
stm32f103c8t_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d81c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0800d92c  0800d92c  0001d92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0b8  0800e0b8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0b8  0800e0b8  0001e0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0c0  0800e0c0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0c0  0800e0c0  0001e0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0c4  0800e0c4  0001e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800e0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fac  20000084  0800e14c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004030  0800e14c  00024030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020169  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004227  00000000  00000000  00040216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  00044440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b0  00000000  00000000  00045f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa5e  00000000  00000000  00047910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc63  00000000  00000000  0006236e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a700  00000000  00000000  0007ffd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a6d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a88  00000000  00000000  0011a724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d914 	.word	0x0800d914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	0800d914 	.word	0x0800d914

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_f2iz>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000710:	d30f      	bcc.n	8000732 <__aeabi_f2iz+0x2a>
 8000712:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000716:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800071a:	d90d      	bls.n	8000738 <__aeabi_f2iz+0x30>
 800071c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000724:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000728:	fa23 f002 	lsr.w	r0, r3, r2
 800072c:	bf18      	it	ne
 800072e:	4240      	negne	r0, r0
 8000730:	4770      	bx	lr
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	4770      	bx	lr
 8000738:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800073c:	d101      	bne.n	8000742 <__aeabi_f2iz+0x3a>
 800073e:	0242      	lsls	r2, r0, #9
 8000740:	d105      	bne.n	800074e <__aeabi_f2iz+0x46>
 8000742:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000746:	bf08      	it	eq
 8000748:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr

08000754 <__aeabi_ldivmod>:
 8000754:	b97b      	cbnz	r3, 8000776 <__aeabi_ldivmod+0x22>
 8000756:	b972      	cbnz	r2, 8000776 <__aeabi_ldivmod+0x22>
 8000758:	2900      	cmp	r1, #0
 800075a:	bfbe      	ittt	lt
 800075c:	2000      	movlt	r0, #0
 800075e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000762:	e006      	blt.n	8000772 <__aeabi_ldivmod+0x1e>
 8000764:	bf08      	it	eq
 8000766:	2800      	cmpeq	r0, #0
 8000768:	bf1c      	itt	ne
 800076a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800076e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000772:	f000 b9a9 	b.w	8000ac8 <__aeabi_idiv0>
 8000776:	f1ad 0c08 	sub.w	ip, sp, #8
 800077a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800077e:	2900      	cmp	r1, #0
 8000780:	db09      	blt.n	8000796 <__aeabi_ldivmod+0x42>
 8000782:	2b00      	cmp	r3, #0
 8000784:	db1a      	blt.n	80007bc <__aeabi_ldivmod+0x68>
 8000786:	f000 f835 	bl	80007f4 <__udivmoddi4>
 800078a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000792:	b004      	add	sp, #16
 8000794:	4770      	bx	lr
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	db1b      	blt.n	80007d8 <__aeabi_ldivmod+0x84>
 80007a0:	f000 f828 	bl	80007f4 <__udivmoddi4>
 80007a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ac:	b004      	add	sp, #16
 80007ae:	4240      	negs	r0, r0
 80007b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b4:	4252      	negs	r2, r2
 80007b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007ba:	4770      	bx	lr
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	f000 f817 	bl	80007f4 <__udivmoddi4>
 80007c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ce:	b004      	add	sp, #16
 80007d0:	4240      	negs	r0, r0
 80007d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d6:	4770      	bx	lr
 80007d8:	4252      	negs	r2, r2
 80007da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007de:	f000 f809 	bl	80007f4 <__udivmoddi4>
 80007e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ea:	b004      	add	sp, #16
 80007ec:	4252      	negs	r2, r2
 80007ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f2:	4770      	bx	lr

080007f4 <__udivmoddi4>:
 80007f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007f8:	9e08      	ldr	r6, [sp, #32]
 80007fa:	460d      	mov	r5, r1
 80007fc:	4604      	mov	r4, r0
 80007fe:	4688      	mov	r8, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14d      	bne.n	80008a0 <__udivmoddi4+0xac>
 8000804:	428a      	cmp	r2, r1
 8000806:	4694      	mov	ip, r2
 8000808:	d968      	bls.n	80008dc <__udivmoddi4+0xe8>
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	b152      	cbz	r2, 8000826 <__udivmoddi4+0x32>
 8000810:	fa01 f302 	lsl.w	r3, r1, r2
 8000814:	f1c2 0120 	rsb	r1, r2, #32
 8000818:	fa20 f101 	lsr.w	r1, r0, r1
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	ea41 0803 	orr.w	r8, r1, r3
 8000824:	4094      	lsls	r4, r2
 8000826:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800082a:	fbb8 f7f1 	udiv	r7, r8, r1
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	fb01 8817 	mls	r8, r1, r7, r8
 8000836:	fb07 f00e 	mul.w	r0, r7, lr
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000840:	4298      	cmp	r0, r3
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x66>
 8000844:	eb1c 0303 	adds.w	r3, ip, r3
 8000848:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 800084c:	f080 811e 	bcs.w	8000a8c <__udivmoddi4+0x298>
 8000850:	4298      	cmp	r0, r3
 8000852:	f240 811b 	bls.w	8000a8c <__udivmoddi4+0x298>
 8000856:	3f02      	subs	r7, #2
 8000858:	4463      	add	r3, ip
 800085a:	1a1b      	subs	r3, r3, r0
 800085c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000860:	fb01 3310 	mls	r3, r1, r0, r3
 8000864:	fb00 fe0e 	mul.w	lr, r0, lr
 8000868:	b2a4      	uxth	r4, r4
 800086a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086e:	45a6      	cmp	lr, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x94>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800087a:	f080 8109 	bcs.w	8000a90 <__udivmoddi4+0x29c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f240 8106 	bls.w	8000a90 <__udivmoddi4+0x29c>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	2100      	movs	r1, #0
 800088a:	eba4 040e 	sub.w	r4, r4, lr
 800088e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000892:	b11e      	cbz	r6, 800089c <__udivmoddi4+0xa8>
 8000894:	2300      	movs	r3, #0
 8000896:	40d4      	lsrs	r4, r2
 8000898:	e9c6 4300 	strd	r4, r3, [r6]
 800089c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a0:	428b      	cmp	r3, r1
 80008a2:	d908      	bls.n	80008b6 <__udivmoddi4+0xc2>
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	f000 80ee 	beq.w	8000a86 <__udivmoddi4+0x292>
 80008aa:	2100      	movs	r1, #0
 80008ac:	e9c6 0500 	strd	r0, r5, [r6]
 80008b0:	4608      	mov	r0, r1
 80008b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b6:	fab3 f183 	clz	r1, r3
 80008ba:	2900      	cmp	r1, #0
 80008bc:	d14a      	bne.n	8000954 <__udivmoddi4+0x160>
 80008be:	42ab      	cmp	r3, r5
 80008c0:	d302      	bcc.n	80008c8 <__udivmoddi4+0xd4>
 80008c2:	4282      	cmp	r2, r0
 80008c4:	f200 80fc 	bhi.w	8000ac0 <__udivmoddi4+0x2cc>
 80008c8:	1a84      	subs	r4, r0, r2
 80008ca:	eb65 0303 	sbc.w	r3, r5, r3
 80008ce:	2001      	movs	r0, #1
 80008d0:	4698      	mov	r8, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d0e2      	beq.n	800089c <__udivmoddi4+0xa8>
 80008d6:	e9c6 4800 	strd	r4, r8, [r6]
 80008da:	e7df      	b.n	800089c <__udivmoddi4+0xa8>
 80008dc:	b902      	cbnz	r2, 80008e0 <__udivmoddi4+0xec>
 80008de:	deff      	udf	#255	; 0xff
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	f040 8091 	bne.w	8000a0c <__udivmoddi4+0x218>
 80008ea:	eba1 000c 	sub.w	r0, r1, ip
 80008ee:	2101      	movs	r1, #1
 80008f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f4:	fa1f fe8c 	uxth.w	lr, ip
 80008f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80008fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000900:	0c25      	lsrs	r5, r4, #16
 8000902:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000906:	fb0e f003 	mul.w	r0, lr, r3
 800090a:	42a8      	cmp	r0, r5
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x12c>
 800090e:	eb1c 0505 	adds.w	r5, ip, r5
 8000912:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x12a>
 8000918:	42a8      	cmp	r0, r5
 800091a:	f200 80ce 	bhi.w	8000aba <__udivmoddi4+0x2c6>
 800091e:	4643      	mov	r3, r8
 8000920:	1a2d      	subs	r5, r5, r0
 8000922:	fbb5 f0f7 	udiv	r0, r5, r7
 8000926:	fb07 5510 	mls	r5, r7, r0, r5
 800092a:	fb0e fe00 	mul.w	lr, lr, r0
 800092e:	b2a4      	uxth	r4, r4
 8000930:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000934:	45a6      	cmp	lr, r4
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x156>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x154>
 8000942:	45a6      	cmp	lr, r4
 8000944:	f200 80b6 	bhi.w	8000ab4 <__udivmoddi4+0x2c0>
 8000948:	4628      	mov	r0, r5
 800094a:	eba4 040e 	sub.w	r4, r4, lr
 800094e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000952:	e79e      	b.n	8000892 <__udivmoddi4+0x9e>
 8000954:	f1c1 0720 	rsb	r7, r1, #32
 8000958:	408b      	lsls	r3, r1
 800095a:	fa22 fc07 	lsr.w	ip, r2, r7
 800095e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000962:	fa25 fa07 	lsr.w	sl, r5, r7
 8000966:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096a:	fbba f8f9 	udiv	r8, sl, r9
 800096e:	fa20 f307 	lsr.w	r3, r0, r7
 8000972:	fb09 aa18 	mls	sl, r9, r8, sl
 8000976:	408d      	lsls	r5, r1
 8000978:	fa1f fe8c 	uxth.w	lr, ip
 800097c:	431d      	orrs	r5, r3
 800097e:	fa00 f301 	lsl.w	r3, r0, r1
 8000982:	fb08 f00e 	mul.w	r0, r8, lr
 8000986:	0c2c      	lsrs	r4, r5, #16
 8000988:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800098c:	42a0      	cmp	r0, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	d90b      	bls.n	80009ac <__udivmoddi4+0x1b8>
 8000994:	eb1c 0404 	adds.w	r4, ip, r4
 8000998:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800099c:	f080 8088 	bcs.w	8000ab0 <__udivmoddi4+0x2bc>
 80009a0:	42a0      	cmp	r0, r4
 80009a2:	f240 8085 	bls.w	8000ab0 <__udivmoddi4+0x2bc>
 80009a6:	f1a8 0802 	sub.w	r8, r8, #2
 80009aa:	4464      	add	r4, ip
 80009ac:	1a24      	subs	r4, r4, r0
 80009ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80009b2:	fb09 4410 	mls	r4, r9, r0, r4
 80009b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c0:	45a6      	cmp	lr, r4
 80009c2:	d908      	bls.n	80009d6 <__udivmoddi4+0x1e2>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80009cc:	d26c      	bcs.n	8000aa8 <__udivmoddi4+0x2b4>
 80009ce:	45a6      	cmp	lr, r4
 80009d0:	d96a      	bls.n	8000aa8 <__udivmoddi4+0x2b4>
 80009d2:	3802      	subs	r0, #2
 80009d4:	4464      	add	r4, ip
 80009d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009da:	fba0 9502 	umull	r9, r5, r0, r2
 80009de:	eba4 040e 	sub.w	r4, r4, lr
 80009e2:	42ac      	cmp	r4, r5
 80009e4:	46c8      	mov	r8, r9
 80009e6:	46ae      	mov	lr, r5
 80009e8:	d356      	bcc.n	8000a98 <__udivmoddi4+0x2a4>
 80009ea:	d053      	beq.n	8000a94 <__udivmoddi4+0x2a0>
 80009ec:	2e00      	cmp	r6, #0
 80009ee:	d069      	beq.n	8000ac4 <__udivmoddi4+0x2d0>
 80009f0:	ebb3 0208 	subs.w	r2, r3, r8
 80009f4:	eb64 040e 	sbc.w	r4, r4, lr
 80009f8:	fa22 f301 	lsr.w	r3, r2, r1
 80009fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000a00:	431f      	orrs	r7, r3
 8000a02:	40cc      	lsrs	r4, r1
 8000a04:	e9c6 7400 	strd	r7, r4, [r6]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	e747      	b.n	800089c <__udivmoddi4+0xa8>
 8000a0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a10:	f1c2 0120 	rsb	r1, r2, #32
 8000a14:	fa25 f301 	lsr.w	r3, r5, r1
 8000a18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000a20:	4095      	lsls	r5, r2
 8000a22:	430d      	orrs	r5, r1
 8000a24:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a28:	fb07 3311 	mls	r3, r7, r1, r3
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	0c28      	lsrs	r0, r5, #16
 8000a32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a36:	fb01 f30e 	mul.w	r3, r1, lr
 8000a3a:	4283      	cmp	r3, r0
 8000a3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x260>
 8000a42:	eb1c 0000 	adds.w	r0, ip, r0
 8000a46:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000a4a:	d22f      	bcs.n	8000aac <__udivmoddi4+0x2b8>
 8000a4c:	4283      	cmp	r3, r0
 8000a4e:	d92d      	bls.n	8000aac <__udivmoddi4+0x2b8>
 8000a50:	3902      	subs	r1, #2
 8000a52:	4460      	add	r0, ip
 8000a54:	1ac0      	subs	r0, r0, r3
 8000a56:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a5a:	fb07 0013 	mls	r0, r7, r3, r0
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a64:	fb03 f00e 	mul.w	r0, r3, lr
 8000a68:	42a8      	cmp	r0, r5
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x28a>
 8000a6c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a70:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a74:	d216      	bcs.n	8000aa4 <__udivmoddi4+0x2b0>
 8000a76:	42a8      	cmp	r0, r5
 8000a78:	d914      	bls.n	8000aa4 <__udivmoddi4+0x2b0>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4465      	add	r5, ip
 8000a7e:	1a28      	subs	r0, r5, r0
 8000a80:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a84:	e738      	b.n	80008f8 <__udivmoddi4+0x104>
 8000a86:	4631      	mov	r1, r6
 8000a88:	4630      	mov	r0, r6
 8000a8a:	e707      	b.n	800089c <__udivmoddi4+0xa8>
 8000a8c:	462f      	mov	r7, r5
 8000a8e:	e6e4      	b.n	800085a <__udivmoddi4+0x66>
 8000a90:	4618      	mov	r0, r3
 8000a92:	e6f9      	b.n	8000888 <__udivmoddi4+0x94>
 8000a94:	454b      	cmp	r3, r9
 8000a96:	d2a9      	bcs.n	80009ec <__udivmoddi4+0x1f8>
 8000a98:	ebb9 0802 	subs.w	r8, r9, r2
 8000a9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e7a3      	b.n	80009ec <__udivmoddi4+0x1f8>
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	e7ea      	b.n	8000a7e <__udivmoddi4+0x28a>
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	e794      	b.n	80009d6 <__udivmoddi4+0x1e2>
 8000aac:	4641      	mov	r1, r8
 8000aae:	e7d1      	b.n	8000a54 <__udivmoddi4+0x260>
 8000ab0:	46d0      	mov	r8, sl
 8000ab2:	e77b      	b.n	80009ac <__udivmoddi4+0x1b8>
 8000ab4:	4464      	add	r4, ip
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	e747      	b.n	800094a <__udivmoddi4+0x156>
 8000aba:	3b02      	subs	r3, #2
 8000abc:	4465      	add	r5, ip
 8000abe:	e72f      	b.n	8000920 <__udivmoddi4+0x12c>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e706      	b.n	80008d2 <__udivmoddi4+0xde>
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e6e9      	b.n	800089c <__udivmoddi4+0xa8>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000b00:	887a      	ldrh	r2, [r7, #2]
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fbe4 	bl	80002d4 <__aeabi_i2f>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fdcf 	bl	80006b8 <__aeabi_fcmplt>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000b20:	2301      	movs	r3, #1
 8000b22:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8000b2a:	883a      	ldrh	r2, [r7, #0]
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fbcf 	bl	80002d4 <__aeabi_i2f>
 8000b36:	4603      	mov	r3, r0
 8000b38:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000b3a:	f04f 0100 	mov.w	r1, #0
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff fdba 	bl	80006b8 <__aeabi_fcmplt>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000b4e:	7cfb      	ldrb	r3, [r7, #19]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d104      	bne.n	8000b5e <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8000b54:	887a      	ldrh	r2, [r7, #2]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	82fb      	strh	r3, [r7, #22]
 8000b5c:	e003      	b.n	8000b66 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8000b66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b68:	8afa      	ldrh	r2, [r7, #22]
 8000b6a:	88b9      	ldrh	r1, [r7, #4]
 8000b6c:	88f8      	ldrh	r0, [r7, #6]
 8000b6e:	f000 fd35 	bl	80015dc <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8000b72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b74:	8afa      	ldrh	r2, [r7, #22]
 8000b76:	8839      	ldrh	r1, [r7, #0]
 8000b78:	88f8      	ldrh	r0, [r7, #6]
 8000b7a:	f000 fd2f 	bl	80015dc <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000b7e:	7cbb      	ldrb	r3, [r7, #18]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8000b84:	883a      	ldrh	r2, [r7, #0]
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	82bb      	strh	r3, [r7, #20]
 8000b8c:	e003      	b.n	8000b96 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8000b8e:	88ba      	ldrh	r2, [r7, #4]
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8000b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b98:	8aba      	ldrh	r2, [r7, #20]
 8000b9a:	88b9      	ldrh	r1, [r7, #4]
 8000b9c:	88f8      	ldrh	r0, [r7, #6]
 8000b9e:	f000 fd61 	bl	8001664 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8000ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ba4:	8aba      	ldrh	r2, [r7, #20]
 8000ba6:	88b9      	ldrh	r1, [r7, #4]
 8000ba8:	8878      	ldrh	r0, [r7, #2]
 8000baa:	f000 fd5b 	bl	8001664 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8000bae:	8afb      	ldrh	r3, [r7, #22]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8000bb4:	8abb      	ldrh	r3, [r7, #20]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d005      	beq.n	8000bc6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8000bba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000bbc:	8839      	ldrh	r1, [r7, #0]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fbd3 	bl	800136c <ILI9341_Draw_Pixel>
	}
	
}
 8000bc6:	bf00      	nop
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}
	...

08000bd0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4623      	mov	r3, r4
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	4603      	mov	r3, r0
 8000be4:	71bb      	strb	r3, [r7, #6]
 8000be6:	460b      	mov	r3, r1
 8000be8:	717b      	strb	r3, [r7, #5]
 8000bea:	4613      	mov	r3, r2
 8000bec:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	2b1f      	cmp	r3, #31
 8000bf6:	d802      	bhi.n	8000bfe <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	e002      	b.n	8000c04 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	3b20      	subs	r3, #32
 8000c02:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	753b      	strb	r3, [r7, #20]
 8000c08:	e012      	b.n	8000c30 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000c0a:	7dfa      	ldrb	r2, [r7, #23]
 8000c0c:	7d38      	ldrb	r0, [r7, #20]
 8000c0e:	7d39      	ldrb	r1, [r7, #20]
 8000c10:	4c3b      	ldr	r4, [pc, #236]	; (8000d00 <ILI9341_Draw_Char+0x130>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4423      	add	r3, r4
 8000c1c:	4403      	add	r3, r0
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	f101 0318 	add.w	r3, r1, #24
 8000c24:	443b      	add	r3, r7
 8000c26:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000c2a:	7d3b      	ldrb	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	753b      	strb	r3, [r7, #20]
 8000c30:	7d3b      	ldrb	r3, [r7, #20]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d9e9      	bls.n	8000c0a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	b298      	uxth	r0, r3
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c40:	461a      	mov	r2, r3
 8000c42:	0052      	lsls	r2, r2, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	b29c      	uxth	r4, r3
 8000c50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4623      	mov	r3, r4
 8000c56:	f000 fc65 	bl	8001524 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	757b      	strb	r3, [r7, #21]
 8000c5e:	e047      	b.n	8000cf0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	75bb      	strb	r3, [r7, #22]
 8000c64:	e03e      	b.n	8000ce4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8000c66:	7d7b      	ldrb	r3, [r7, #21]
 8000c68:	3318      	adds	r3, #24
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c70:	461a      	mov	r2, r3
 8000c72:	7dbb      	ldrb	r3, [r7, #22]
 8000c74:	fa42 f303 	asr.w	r3, r2, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d02e      	beq.n	8000cde <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d110      	bne.n	8000ca8 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	7d7b      	ldrb	r3, [r7, #21]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b298      	uxth	r0, r3
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	7dbb      	ldrb	r3, [r7, #22]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f000 fb63 	bl	800136c <ILI9341_Draw_Pixel>
 8000ca6:	e01a      	b.n	8000cde <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	7d7b      	ldrb	r3, [r7, #21]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000cb2:	fb01 f303 	mul.w	r3, r1, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	b298      	uxth	r0, r3
 8000cbc:	797b      	ldrb	r3, [r7, #5]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	7dbb      	ldrb	r3, [r7, #22]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000cc6:	fb01 f303 	mul.w	r3, r1, r3
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4413      	add	r3, r2
 8000cce:	b299      	uxth	r1, r3
 8000cd0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000cd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4623      	mov	r3, r4
 8000cda:	f000 fc23 	bl	8001524 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000cde:	7dbb      	ldrb	r3, [r7, #22]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	75bb      	strb	r3, [r7, #22]
 8000ce4:	7dbb      	ldrb	r3, [r7, #22]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d9bd      	bls.n	8000c66 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000cea:	7d7b      	ldrb	r3, [r7, #21]
 8000cec:	3301      	adds	r3, #1
 8000cee:	757b      	strb	r3, [r7, #21]
 8000cf0:	7d7b      	ldrb	r3, [r7, #21]
 8000cf2:	2b05      	cmp	r3, #5
 8000cf4:	d9b4      	bls.n	8000c60 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	0800dbdc 	.word	0x0800dbdc

08000d04 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	4611      	mov	r1, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	70fb      	strb	r3, [r7, #3]
 8000d16:	460b      	mov	r3, r1
 8000d18:	70bb      	strb	r3, [r7, #2]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000d1e:	e017      	b.n	8000d50 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	7818      	ldrb	r0, [r3, #0]
 8000d28:	883c      	ldrh	r4, [r7, #0]
 8000d2a:	78ba      	ldrb	r2, [r7, #2]
 8000d2c:	78f9      	ldrb	r1, [r7, #3]
 8000d2e:	8bbb      	ldrh	r3, [r7, #28]
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	8b3b      	ldrh	r3, [r7, #24]
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	4623      	mov	r3, r4
 8000d38:	f7ff ff4a 	bl	8000bd0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000d3c:	8b3b      	ldrh	r3, [r7, #24]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	0052      	lsls	r2, r2, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e3      	bne.n	8000d20 <ILI9341_Draw_Text+0x1c>
    }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd90      	pop	{r4, r7, pc}
	...

08000d64 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
//MX_SPI1_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <ILI9341_SPI_Init+0x14>)
 8000d70:	f004 fa2f 	bl	80051d2 <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(&hspi1, &SPI_Data, 1, 1);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <ILI9341_SPI_Send+0x20>)
 8000d8e:	f006 fbfd 	bl	800758c <HAL_SPI_Transmit>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200002f4 	.word	0x200002f4

08000da0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <ILI9341_Write_Command+0x40>)
 8000db2:	f004 fa0e 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <ILI9341_Write_Command+0x44>)
 8000dbe:	f004 fa08 	bl	80051d2 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffd9 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <ILI9341_Write_Command+0x40>)
 8000dd2:	f004 f9fe 	bl	80051d2 <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40010800 	.word	0x40010800

08000de8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <ILI9341_Write_Data+0x40>)
 8000dfa:	f004 f9ea 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <ILI9341_Write_Data+0x44>)
 8000e06:	f004 f9e4 	bl	80051d2 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffb5 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <ILI9341_Write_Data+0x44>)
 8000e1a:	f004 f9da 	bl	80051d2 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000e4e:	202a      	movs	r0, #42	; 0x2a
 8000e50:	f7ff ffa6 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffc3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffbe 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ffb7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffb2 	bl	8000de8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000e84:	202b      	movs	r0, #43	; 0x2b
 8000e86:	f7ff ff8b 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffa8 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffa3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000ea2:	883b      	ldrh	r3, [r7, #0]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff9c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000eb0:	883b      	ldrh	r3, [r7, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff97 	bl	8000de8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000eba:	202c      	movs	r0, #44	; 0x2c
 8000ebc:	f7ff ff70 	bl	8000da0 <ILI9341_Write_Command>
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <ILI9341_Reset+0x38>)
 8000ed4:	f004 f97d 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000ed8:	20c8      	movs	r0, #200	; 0xc8
 8000eda:	f003 fe2b 	bl	8004b34 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <ILI9341_Reset+0x3c>)
 8000ee6:	f004 f974 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000eea:	20c8      	movs	r0, #200	; 0xc8
 8000eec:	f003 fe22 	bl	8004b34 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	4802      	ldr	r0, [pc, #8]	; (8000f00 <ILI9341_Reset+0x38>)
 8000ef8:	f004 f96b 	bl	80051d2 <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00

08000f08 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	f7ff ff42 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f003 fe09 	bl	8004b34 <HAL_Delay>
	
switch(screen_rotation) 
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d837      	bhi.n	8000f98 <ILI9341_Set_Rotation+0x90>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <ILI9341_Set_Rotation+0x28>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f41 	.word	0x08000f41
 8000f34:	08000f57 	.word	0x08000f57
 8000f38:	08000f6d 	.word	0x08000f6d
 8000f3c:	08000f83 	.word	0x08000f83
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000f40:	2048      	movs	r0, #72	; 0x48
 8000f42:	f7ff ff51 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f48:	22f0      	movs	r2, #240	; 0xf0
 8000f4a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f52:	801a      	strh	r2, [r3, #0]
			break;
 8000f54:	e021      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000f56:	2028      	movs	r0, #40	; 0x28
 8000f58:	f7ff ff46 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f62:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f66:	22f0      	movs	r2, #240	; 0xf0
 8000f68:	801a      	strh	r2, [r3, #0]
			break;
 8000f6a:	e016      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000f6c:	2088      	movs	r0, #136	; 0x88
 8000f6e:	f7ff ff3b 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f74:	22f0      	movs	r2, #240	; 0xf0
 8000f76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f7e:	801a      	strh	r2, [r3, #0]
			break;
 8000f80:	e00b      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000f82:	20e8      	movs	r0, #232	; 0xe8
 8000f84:	f7ff ff30 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f8e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f92:	22f0      	movs	r2, #240	; 0xf0
 8000f94:	801a      	strh	r2, [r3, #0]
			break;
 8000f96:	e000      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000f98:	bf00      	nop
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000002 	.word	0x20000002
 8000fa8:	20000000 	.word	0x20000000

08000fac <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <ILI9341_Enable+0x14>)
 8000fb8:	f004 f90b 	bl	80051d2 <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000fc8:	f7ff fff0 	bl	8000fac <ILI9341_Enable>
ILI9341_SPI_Init();
 8000fcc:	f7ff feca 	bl	8000d64 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000fd0:	f7ff ff7a 	bl	8000ec8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fee3 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f003 fda9 	bl	8004b34 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000fe2:	20cb      	movs	r0, #203	; 0xcb
 8000fe4:	f7ff fedc 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000fe8:	2039      	movs	r0, #57	; 0x39
 8000fea:	f7ff fefd 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000fee:	202c      	movs	r0, #44	; 0x2c
 8000ff0:	f7ff fefa 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fef7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000ffa:	2034      	movs	r0, #52	; 0x34
 8000ffc:	f7ff fef4 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fef1 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001006:	20cf      	movs	r0, #207	; 0xcf
 8001008:	f7ff feca 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff feeb 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001012:	20c1      	movs	r0, #193	; 0xc1
 8001014:	f7ff fee8 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001018:	2030      	movs	r0, #48	; 0x30
 800101a:	f7ff fee5 	bl	8000de8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800101e:	20e8      	movs	r0, #232	; 0xe8
 8001020:	f7ff febe 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001024:	2085      	movs	r0, #133	; 0x85
 8001026:	f7ff fedf 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fedc 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001030:	2078      	movs	r0, #120	; 0x78
 8001032:	f7ff fed9 	bl	8000de8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001036:	20ea      	movs	r0, #234	; 0xea
 8001038:	f7ff feb2 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fed3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fed0 	bl	8000de8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001048:	20ed      	movs	r0, #237	; 0xed
 800104a:	f7ff fea9 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f7ff feca 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff fec7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800105a:	2012      	movs	r0, #18
 800105c:	f7ff fec4 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001060:	2081      	movs	r0, #129	; 0x81
 8001062:	f7ff fec1 	bl	8000de8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001066:	20f7      	movs	r0, #247	; 0xf7
 8001068:	f7ff fe9a 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800106c:	2020      	movs	r0, #32
 800106e:	f7ff febb 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001072:	20c0      	movs	r0, #192	; 0xc0
 8001074:	f7ff fe94 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001078:	2023      	movs	r0, #35	; 0x23
 800107a:	f7ff feb5 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800107e:	20c1      	movs	r0, #193	; 0xc1
 8001080:	f7ff fe8e 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001084:	2010      	movs	r0, #16
 8001086:	f7ff feaf 	bl	8000de8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800108a:	20c5      	movs	r0, #197	; 0xc5
 800108c:	f7ff fe88 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001090:	203e      	movs	r0, #62	; 0x3e
 8001092:	f7ff fea9 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	f7ff fea6 	bl	8000de8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800109c:	20c7      	movs	r0, #199	; 0xc7
 800109e:	f7ff fe7f 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80010a2:	2086      	movs	r0, #134	; 0x86
 80010a4:	f7ff fea0 	bl	8000de8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80010a8:	2036      	movs	r0, #54	; 0x36
 80010aa:	f7ff fe79 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80010ae:	2048      	movs	r0, #72	; 0x48
 80010b0:	f7ff fe9a 	bl	8000de8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80010b4:	203a      	movs	r0, #58	; 0x3a
 80010b6:	f7ff fe73 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80010ba:	2055      	movs	r0, #85	; 0x55
 80010bc:	f7ff fe94 	bl	8000de8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80010c0:	20b1      	movs	r0, #177	; 0xb1
 80010c2:	f7ff fe6d 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fe8e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80010cc:	2018      	movs	r0, #24
 80010ce:	f7ff fe8b 	bl	8000de8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80010d2:	20b6      	movs	r0, #182	; 0xb6
 80010d4:	f7ff fe64 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80010d8:	2008      	movs	r0, #8
 80010da:	f7ff fe85 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80010de:	2082      	movs	r0, #130	; 0x82
 80010e0:	f7ff fe82 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80010e4:	2027      	movs	r0, #39	; 0x27
 80010e6:	f7ff fe7f 	bl	8000de8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80010ea:	20f2      	movs	r0, #242	; 0xf2
 80010ec:	f7ff fe58 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fe79 	bl	8000de8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80010f6:	2026      	movs	r0, #38	; 0x26
 80010f8:	f7ff fe52 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff fe73 	bl	8000de8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001102:	20e0      	movs	r0, #224	; 0xe0
 8001104:	f7ff fe4c 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001108:	200f      	movs	r0, #15
 800110a:	f7ff fe6d 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800110e:	2031      	movs	r0, #49	; 0x31
 8001110:	f7ff fe6a 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001114:	202b      	movs	r0, #43	; 0x2b
 8001116:	f7ff fe67 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800111a:	200c      	movs	r0, #12
 800111c:	f7ff fe64 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001120:	200e      	movs	r0, #14
 8001122:	f7ff fe61 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001126:	2008      	movs	r0, #8
 8001128:	f7ff fe5e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800112c:	204e      	movs	r0, #78	; 0x4e
 800112e:	f7ff fe5b 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001132:	20f1      	movs	r0, #241	; 0xf1
 8001134:	f7ff fe58 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001138:	2037      	movs	r0, #55	; 0x37
 800113a:	f7ff fe55 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800113e:	2007      	movs	r0, #7
 8001140:	f7ff fe52 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001144:	2010      	movs	r0, #16
 8001146:	f7ff fe4f 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800114a:	2003      	movs	r0, #3
 800114c:	f7ff fe4c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001150:	200e      	movs	r0, #14
 8001152:	f7ff fe49 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001156:	2009      	movs	r0, #9
 8001158:	f7ff fe46 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fe43 	bl	8000de8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001162:	20e1      	movs	r0, #225	; 0xe1
 8001164:	f7ff fe1c 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fe3d 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800116e:	200e      	movs	r0, #14
 8001170:	f7ff fe3a 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001174:	2014      	movs	r0, #20
 8001176:	f7ff fe37 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800117a:	2003      	movs	r0, #3
 800117c:	f7ff fe34 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001180:	2011      	movs	r0, #17
 8001182:	f7ff fe31 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001186:	2007      	movs	r0, #7
 8001188:	f7ff fe2e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800118c:	2031      	movs	r0, #49	; 0x31
 800118e:	f7ff fe2b 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001192:	20c1      	movs	r0, #193	; 0xc1
 8001194:	f7ff fe28 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001198:	2048      	movs	r0, #72	; 0x48
 800119a:	f7ff fe25 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800119e:	2008      	movs	r0, #8
 80011a0:	f7ff fe22 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80011a4:	200f      	movs	r0, #15
 80011a6:	f7ff fe1f 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80011aa:	200c      	movs	r0, #12
 80011ac:	f7ff fe1c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80011b0:	2031      	movs	r0, #49	; 0x31
 80011b2:	f7ff fe19 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80011b6:	2036      	movs	r0, #54	; 0x36
 80011b8:	f7ff fe16 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80011bc:	200f      	movs	r0, #15
 80011be:	f7ff fe13 	bl	8000de8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80011c2:	2011      	movs	r0, #17
 80011c4:	f7ff fdec 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(120);
 80011c8:	2078      	movs	r0, #120	; 0x78
 80011ca:	f003 fcb3 	bl	8004b34 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80011ce:	2029      	movs	r0, #41	; 0x29
 80011d0:	f7ff fde6 	bl	8000da0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff fe97 	bl	8000f08 <ILI9341_Set_Rotation>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80011e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011e4:	b08d      	sub	sp, #52	; 0x34
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	6039      	str	r1, [r7, #0]
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	466b      	mov	r3, sp
 80011f0:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011fe:	d202      	bcs.n	8001206 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	e002      	b.n	800120c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001206:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001212:	4840      	ldr	r0, [pc, #256]	; (8001314 <ILI9341_Draw_Colour_Burst+0x134>)
 8001214:	f003 ffdd 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121e:	483e      	ldr	r0, [pc, #248]	; (8001318 <ILI9341_Draw_Colour_Burst+0x138>)
 8001220:	f003 ffd7 	bl	80051d2 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	b29b      	uxth	r3, r3
 800122a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800122e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001230:	460b      	mov	r3, r1
 8001232:	3b01      	subs	r3, #1
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	2300      	movs	r3, #0
 8001238:	4688      	mov	r8, r1
 800123a:	4699      	mov	r9, r3
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001248:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800124c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001250:	2300      	movs	r3, #0
 8001252:	460c      	mov	r4, r1
 8001254:	461d      	mov	r5, r3
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	00eb      	lsls	r3, r5, #3
 8001260:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001264:	00e2      	lsls	r2, r4, #3
 8001266:	1dcb      	adds	r3, r1, #7
 8001268:	08db      	lsrs	r3, r3, #3
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	ebad 0d03 	sub.w	sp, sp, r3
 8001270:	466b      	mov	r3, sp
 8001272:	3300      	adds	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
 800127a:	e00e      	b.n	800129a <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001280:	4413      	add	r3, r2
 8001282:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001286:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	3301      	adds	r3, #1
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	b2d1      	uxtb	r1, r2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	3302      	adds	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
 800129a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3ec      	bcc.n	800127c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80012ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012bc:	fb01 f202 	mul.w	r2, r1, r2
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d010      	beq.n	80012ec <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ce:	e009      	b.n	80012e4 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	230a      	movs	r3, #10
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	4810      	ldr	r0, [pc, #64]	; (800131c <ILI9341_Draw_Colour_Burst+0x13c>)
 80012da:	f006 f957 	bl	800758c <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e0:	3301      	adds	r3, #1
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3f1      	bcc.n	80012d0 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	230a      	movs	r3, #10
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <ILI9341_Draw_Colour_Burst+0x13c>)
 80012f6:	f006 f949 	bl	800758c <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <ILI9341_Draw_Colour_Burst+0x138>)
 8001302:	f003 ff66 	bl	80051d2 <HAL_GPIO_WritePin>
 8001306:	46b5      	mov	sp, r6
}
 8001308:	bf00      	nop
 800130a:	3734      	adds	r7, #52	; 0x34
 800130c:	46bd      	mov	sp, r7
 800130e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001312:	bf00      	nop
 8001314:	40010800 	.word	0x40010800
 8001318:	40010c00 	.word	0x40010c00
 800131c:	200002f4 	.word	0x200002f4

08001320 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <ILI9341_Fill_Screen+0x44>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <ILI9341_Fill_Screen+0x48>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fd79 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <ILI9341_Fill_Screen+0x44>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <ILI9341_Fill_Screen+0x48>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	461a      	mov	r2, r3
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff42 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000002 	.word	0x20000002
 8001368:	20000000 	.word	0x20000000

0800136c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	460b      	mov	r3, r1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800137e:	4b64      	ldr	r3, [pc, #400]	; (8001510 <ILI9341_Draw_Pixel+0x1a4>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	429a      	cmp	r2, r3
 8001388:	f080 80be 	bcs.w	8001508 <ILI9341_Draw_Pixel+0x19c>
 800138c:	4b61      	ldr	r3, [pc, #388]	; (8001514 <ILI9341_Draw_Pixel+0x1a8>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	88ba      	ldrh	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	f080 80b7 	bcs.w	8001508 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a0:	485d      	ldr	r0, [pc, #372]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 80013a2:	f003 ff16 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ac:	485b      	ldr	r0, [pc, #364]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80013ae:	f003 ff10 	bl	80051d2 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80013b2:	202a      	movs	r0, #42	; 0x2a
 80013b4:	f7ff fce2 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013be:	4856      	ldr	r0, [pc, #344]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 80013c0:	f003 ff07 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ca:	4854      	ldr	r0, [pc, #336]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80013cc:	f003 ff01 	bl	80051d2 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d6:	4851      	ldr	r0, [pc, #324]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80013d8:	f003 fefb 	bl	80051d2 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	753b      	strb	r3, [r7, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	757b      	strb	r3, [r7, #21]
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	3301      	adds	r3, #1
 80013f0:	121b      	asrs	r3, r3, #8
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	75bb      	strb	r3, [r7, #22]
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001400:	f107 0114 	add.w	r1, r7, #20
 8001404:	2301      	movs	r3, #1
 8001406:	2204      	movs	r2, #4
 8001408:	4845      	ldr	r0, [pc, #276]	; (8001520 <ILI9341_Draw_Pixel+0x1b4>)
 800140a:	f006 f8bf 	bl	800758c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001414:	4841      	ldr	r0, [pc, #260]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 8001416:	f003 fedc 	bl	80051d2 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001420:	483d      	ldr	r0, [pc, #244]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 8001422:	f003 fed6 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	483b      	ldr	r0, [pc, #236]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 800142e:	f003 fed0 	bl	80051d2 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001432:	202b      	movs	r0, #43	; 0x2b
 8001434:	f7ff fca2 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143e:	4836      	ldr	r0, [pc, #216]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 8001440:	f003 fec7 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144a:	4834      	ldr	r0, [pc, #208]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 800144c:	f003 fec1 	bl	80051d2 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001456:	4831      	ldr	r0, [pc, #196]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 8001458:	f003 febb 	bl	80051d2 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b29b      	uxth	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	743b      	strb	r3, [r7, #16]
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	747b      	strb	r3, [r7, #17]
 800146c:	88bb      	ldrh	r3, [r7, #4]
 800146e:	3301      	adds	r3, #1
 8001470:	121b      	asrs	r3, r3, #8
 8001472:	b2db      	uxtb	r3, r3
 8001474:	74bb      	strb	r3, [r7, #18]
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3301      	adds	r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001480:	f107 0110 	add.w	r1, r7, #16
 8001484:	2301      	movs	r3, #1
 8001486:	2204      	movs	r2, #4
 8001488:	4825      	ldr	r0, [pc, #148]	; (8001520 <ILI9341_Draw_Pixel+0x1b4>)
 800148a:	f006 f87f 	bl	800758c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001494:	4821      	ldr	r0, [pc, #132]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 8001496:	f003 fe9c 	bl	80051d2 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a0:	481d      	ldr	r0, [pc, #116]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 80014a2:	f003 fe96 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ac:	481b      	ldr	r0, [pc, #108]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80014ae:	f003 fe90 	bl	80051d2 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80014b2:	202c      	movs	r0, #44	; 0x2c
 80014b4:	f7ff fc62 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014be:	4816      	ldr	r0, [pc, #88]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 80014c0:	f003 fe87 	bl	80051d2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80014cc:	f003 fe81 	bl	80051d2 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d6:	4811      	ldr	r0, [pc, #68]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80014d8:	f003 fe7b 	bl	80051d2 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	733b      	strb	r3, [r7, #12]
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80014ec:	f107 010c 	add.w	r1, r7, #12
 80014f0:	2301      	movs	r3, #1
 80014f2:	2202      	movs	r2, #2
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <ILI9341_Draw_Pixel+0x1b4>)
 80014f6:	f006 f849 	bl	800758c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 8001502:	f003 fe66 	bl	80051d2 <HAL_GPIO_WritePin>
 8001506:	e000      	b.n	800150a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001508:	bf00      	nop
	
}
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000002 	.word	0x20000002
 8001514:	20000000 	.word	0x20000000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	200002f4 	.word	0x200002f4

08001524 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	4603      	mov	r3, r0
 8001538:	80bb      	strh	r3, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]
 800153e:	4613      	mov	r3, r2
 8001540:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <ILI9341_Draw_Rectangle+0xb0>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	88fa      	ldrh	r2, [r7, #6]
 800154a:	429a      	cmp	r2, r3
 800154c:	d23d      	bcs.n	80015ca <ILI9341_Draw_Rectangle+0xa6>
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <ILI9341_Draw_Rectangle+0xb4>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	88ba      	ldrh	r2, [r7, #4]
 8001556:	429a      	cmp	r2, r3
 8001558:	d237      	bcs.n	80015ca <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800155a:	88fa      	ldrh	r2, [r7, #6]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	4413      	add	r3, r2
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <ILI9341_Draw_Rectangle+0xb0>)
 8001562:	8812      	ldrh	r2, [r2, #0]
 8001564:	b292      	uxth	r2, r2
 8001566:	4293      	cmp	r3, r2
 8001568:	dd05      	ble.n	8001576 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <ILI9341_Draw_Rectangle+0xb0>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b29a      	uxth	r2, r3
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001576:	88ba      	ldrh	r2, [r7, #4]
 8001578:	883b      	ldrh	r3, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <ILI9341_Draw_Rectangle+0xb4>)
 800157e:	8812      	ldrh	r2, [r2, #0]
 8001580:	b292      	uxth	r2, r2
 8001582:	4293      	cmp	r3, r2
 8001584:	dd05      	ble.n	8001592 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <ILI9341_Draw_Rectangle+0xb4>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	b29a      	uxth	r2, r3
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	4413      	add	r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29c      	uxth	r4, r3
 800159e:	88ba      	ldrh	r2, [r7, #4]
 80015a0:	883b      	ldrh	r3, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	88b9      	ldrh	r1, [r7, #4]
 80015ac:	88f8      	ldrh	r0, [r7, #6]
 80015ae:	4622      	mov	r2, r4
 80015b0:	f7ff fc3e 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80015b4:	883b      	ldrh	r3, [r7, #0]
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	8b3b      	ldrh	r3, [r7, #24]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe0c 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
 80015c8:	e000      	b.n	80015cc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80015ca:	bf00      	nop
}
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000002 	.word	0x20000002
 80015d8:	20000000 	.word	0x20000000

080015dc <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4604      	mov	r4, r0
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	4603      	mov	r3, r0
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <ILI9341_Draw_Horizontal_Line+0x80>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	429a      	cmp	r2, r3
 8001604:	d225      	bcs.n	8001652 <ILI9341_Draw_Horizontal_Line+0x76>
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <ILI9341_Draw_Horizontal_Line+0x84>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	88ba      	ldrh	r2, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	d21f      	bcs.n	8001652 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8001612:	88fa      	ldrh	r2, [r7, #6]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4413      	add	r3, r2
 8001618:	4a10      	ldr	r2, [pc, #64]	; (800165c <ILI9341_Draw_Horizontal_Line+0x80>)
 800161a:	8812      	ldrh	r2, [r2, #0]
 800161c:	b292      	uxth	r2, r2
 800161e:	4293      	cmp	r3, r2
 8001620:	dd05      	ble.n	800162e <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <ILI9341_Draw_Horizontal_Line+0x80>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b29a      	uxth	r2, r3
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	88b9      	ldrh	r1, [r7, #4]
 800163e:	88f8      	ldrh	r0, [r7, #6]
 8001640:	f7ff fbf6 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8001644:	887a      	ldrh	r2, [r7, #2]
 8001646:	883b      	ldrh	r3, [r7, #0]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fdc8 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
 8001650:	e000      	b.n	8001654 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001652:	bf00      	nop
}
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	bf00      	nop
 800165c:	20000002 	.word	0x20000002
 8001660:	20000000 	.word	0x20000000

08001664 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	80fb      	strh	r3, [r7, #6]
 8001676:	4603      	mov	r3, r0
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	807b      	strh	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <ILI9341_Draw_Vertical_Line+0x80>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	d225      	bcs.n	80016da <ILI9341_Draw_Vertical_Line+0x76>
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <ILI9341_Draw_Vertical_Line+0x84>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	88ba      	ldrh	r2, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	d21f      	bcs.n	80016da <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800169a:	88ba      	ldrh	r2, [r7, #4]
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	4413      	add	r3, r2
 80016a0:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	b292      	uxth	r2, r2
 80016a6:	4293      	cmp	r3, r2
 80016a8:	dd05      	ble.n	80016b6 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80016b6:	88ba      	ldrh	r2, [r7, #4]
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	4413      	add	r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	88fa      	ldrh	r2, [r7, #6]
 80016c4:	88b9      	ldrh	r1, [r7, #4]
 80016c6:	88f8      	ldrh	r0, [r7, #6]
 80016c8:	f7ff fbb2 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80016cc:	887a      	ldrh	r2, [r7, #2]
 80016ce:	883b      	ldrh	r3, [r7, #0]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fd84 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
 80016d8:	e000      	b.n	80016dc <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80016da:	bf00      	nop
}
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000002 	.word	0x20000002
 80016e8:	20000000 	.word	0x20000000

080016ec <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2203      	movs	r2, #3
 80016f8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2203      	movs	r2, #3
 8001704:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2203      	movs	r2, #3
 8001716:	715a      	strb	r2, [r3, #5]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b08a      	sub	sp, #40	; 0x28
 8001726:	af04      	add	r7, sp, #16
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	460b      	mov	r3, r1
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	b29a      	uxth	r2, r3
 8001740:	8af9      	ldrh	r1, [r7, #22]
 8001742:	f241 3388 	movw	r3, #5000	; 0x1388
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2302      	movs	r3, #2
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	f004 fb22 	bl	8005d9c <HAL_I2C_Mem_Read>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10b      	bne.n	8001776 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800175e:	7d7b      	ldrb	r3, [r7, #21]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	b21a      	sxth	r2, r3
 8001764:	7d3b      	ldrb	r3, [r7, #20]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	801a      	strh	r2, [r3, #0]
		return true;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <read_register16+0x56>
	} else
		return false;
 8001776:	2300      	movs	r3, #0

}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b08b      	sub	sp, #44	; 0x2c
 8001784:	af04      	add	r7, sp, #16
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	461a      	mov	r2, r3
 800178c:	460b      	mov	r3, r1
 800178e:	72fb      	strb	r3, [r7, #11]
 8001790:	4613      	mov	r3, r2
 8001792:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	7abb      	ldrb	r3, [r7, #10]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	8af9      	ldrh	r1, [r7, #22]
 80017aa:	f241 3488 	movw	r4, #5000	; 0x1388
 80017ae:	9402      	str	r4, [sp, #8]
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	f004 faf0 	bl	8005d9c <HAL_I2C_Mem_Read>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <read_data+0x46>
		return 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <read_data+0x48>
	else
		return 1;
 80017c6:	2301      	movs	r3, #1

}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	461a      	mov	r2, r3
 80017dc:	2188      	movs	r1, #136	; 0x88
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ff9f 	bl	8001722 <read_register16>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d06f      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3302      	adds	r3, #2
 80017ee:	461a      	mov	r2, r3
 80017f0:	218a      	movs	r1, #138	; 0x8a
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff95 	bl	8001722 <read_register16>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d065      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	461a      	mov	r2, r3
 8001804:	218c      	movs	r1, #140	; 0x8c
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff8b 	bl	8001722 <read_register16>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d05b      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3306      	adds	r3, #6
 8001816:	461a      	mov	r2, r3
 8001818:	218e      	movs	r1, #142	; 0x8e
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff81 	bl	8001722 <read_register16>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d051      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3308      	adds	r3, #8
 800182a:	461a      	mov	r2, r3
 800182c:	2190      	movs	r1, #144	; 0x90
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff77 	bl	8001722 <read_register16>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d047      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	330a      	adds	r3, #10
 800183e:	461a      	mov	r2, r3
 8001840:	2192      	movs	r1, #146	; 0x92
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff6d 	bl	8001722 <read_register16>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d03d      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	330c      	adds	r3, #12
 8001852:	461a      	mov	r2, r3
 8001854:	2194      	movs	r1, #148	; 0x94
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ff63 	bl	8001722 <read_register16>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d033      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	330e      	adds	r3, #14
 8001866:	461a      	mov	r2, r3
 8001868:	2196      	movs	r1, #150	; 0x96
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ff59 	bl	8001722 <read_register16>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d029      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3310      	adds	r3, #16
 800187a:	461a      	mov	r2, r3
 800187c:	2198      	movs	r1, #152	; 0x98
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ff4f 	bl	8001722 <read_register16>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01f      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3312      	adds	r3, #18
 800188e:	461a      	mov	r2, r3
 8001890:	219a      	movs	r1, #154	; 0x9a
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff45 	bl	8001722 <read_register16>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3314      	adds	r3, #20
 80018a2:	461a      	mov	r2, r3
 80018a4:	219c      	movs	r1, #156	; 0x9c
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff3b 	bl	8001722 <read_register16>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80018b6:	461a      	mov	r2, r3
 80018b8:	219e      	movs	r1, #158	; 0x9e
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff31 	bl	8001722 <read_register16>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <read_calibration_data+0xfa>

		return true;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <read_calibration_data+0xfc>
	}

	return false;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f103 0218 	add.w	r2, r3, #24
 80018e2:	2301      	movs	r3, #1
 80018e4:	21a1      	movs	r1, #161	; 0xa1
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff4a 	bl	8001780 <read_data>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d14b      	bne.n	800198a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	331a      	adds	r3, #26
 80018f6:	461a      	mov	r2, r3
 80018f8:	21e1      	movs	r1, #225	; 0xe1
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff11 	bl	8001722 <read_register16>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d041      	beq.n	800198a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f103 021c 	add.w	r2, r3, #28
 800190c:	2301      	movs	r3, #1
 800190e:	21e3      	movs	r1, #227	; 0xe3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff35 	bl	8001780 <read_data>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d136      	bne.n	800198a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800191c:	f107 030e 	add.w	r3, r7, #14
 8001920:	461a      	mov	r2, r3
 8001922:	21e4      	movs	r1, #228	; 0xe4
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fefc 	bl	8001722 <read_register16>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02c      	beq.n	800198a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	461a      	mov	r2, r3
 8001936:	21e5      	movs	r1, #229	; 0xe5
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fef2 	bl	8001722 <read_register16>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d022      	beq.n	800198a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800194a:	2301      	movs	r3, #1
 800194c:	21e7      	movs	r1, #231	; 0xe7
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ff16 	bl	8001780 <read_data>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d117      	bne.n	800198a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	b21b      	sxth	r3, r3
 8001960:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001964:	b21a      	sxth	r2, r3
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	121b      	asrs	r3, r3, #8
 800196a:	b21b      	sxth	r3, r3
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800197a:	89bb      	ldrh	r3, [r7, #12]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	b29b      	uxth	r3, r3
 8001980:	b21a      	sxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	841a      	strh	r2, [r3, #32]

		return true;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <read_hum_calibration_data+0xb8>
	}

	return false;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
 80019a0:	4613      	mov	r3, r2
 80019a2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	89f9      	ldrh	r1, [r7, #14]
 80019b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	2301      	movs	r3, #1
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	1cbb      	adds	r3, r7, #2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2301      	movs	r3, #1
 80019c6:	f004 f8ef 	bl	8005ba8 <HAL_I2C_Mem_Write>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <write_register8+0x40>
		return false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <write_register8+0x42>
	else
		return true;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ec:	2b76      	cmp	r3, #118	; 0x76
 80019ee:	d005      	beq.n	80019fc <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019f4:	2b77      	cmp	r3, #119	; 0x77
 80019f6:	d001      	beq.n	80019fc <bmp280_init+0x1e>

		return false;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e099      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a02:	2301      	movs	r3, #1
 8001a04:	21d0      	movs	r1, #208	; 0xd0
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff feba 	bl	8001780 <read_data>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <bmp280_init+0x38>
		return false;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e08c      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a1c:	2b58      	cmp	r3, #88	; 0x58
 8001a1e:	d006      	beq.n	8001a2e <bmp280_init+0x50>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a26:	2b60      	cmp	r3, #96	; 0x60
 8001a28:	d001      	beq.n	8001a2e <bmp280_init+0x50>

		return false;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e080      	b.n	8001b30 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001a2e:	22b6      	movs	r2, #182	; 0xb6
 8001a30:	21e0      	movs	r1, #224	; 0xe0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffae 	bl	8001994 <write_register8>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <bmp280_init+0x64>
		return false;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e076      	b.n	8001b30 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001a42:	f107 020c 	add.w	r2, r7, #12
 8001a46:	2301      	movs	r3, #1
 8001a48:	21f3      	movs	r1, #243	; 0xf3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fe98 	bl	8001780 <read_data>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f5      	bne.n	8001a42 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001a56:	7b3b      	ldrb	r3, [r7, #12]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f0      	bne.n	8001a42 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff feb5 	bl	80017d0 <read_calibration_data>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d100      	bne.n	8001a74 <bmp280_init+0x96>
 8001a72:	e001      	b.n	8001a78 <bmp280_init+0x9a>
		return false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e05b      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a7e:	2b60      	cmp	r3, #96	; 0x60
 8001a80:	d10a      	bne.n	8001a98 <bmp280_init+0xba>
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff26 	bl	80018d4 <read_hum_calibration_data>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f083 0301 	eor.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <bmp280_init+0xba>
		return false;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e04b      	b.n	8001b30 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	795b      	ldrb	r3, [r3, #5]
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	b25a      	sxtb	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	21f5      	movs	r1, #245	; 0xf5
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff6d 	bl	8001994 <write_register8>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bmp280_init+0xe6>
		return false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e035      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	78db      	ldrb	r3, [r3, #3]
 8001ad6:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	789b      	ldrb	r3, [r3, #2]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001af0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001af8:	2b60      	cmp	r3, #96	; 0x60
 8001afa:	d10d      	bne.n	8001b18 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	791b      	ldrb	r3, [r3, #4]
 8001b00:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001b02:	7b7b      	ldrb	r3, [r7, #13]
 8001b04:	461a      	mov	r2, r3
 8001b06:	21f2      	movs	r1, #242	; 0xf2
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff43 	bl	8001994 <write_register8>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <bmp280_init+0x13a>
			return false;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e00b      	b.n	8001b30 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	21f4      	movs	r1, #244	; 0xf4
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff38 	bl	8001994 <write_register8>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <bmp280_init+0x150>
		return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <bmp280_init+0x152>
	}

	return true;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	10da      	asrs	r2, r3, #3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001b5a:	12db      	asrs	r3, r3, #11
 8001b5c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	111b      	asrs	r3, r3, #4
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	8812      	ldrh	r2, [r2, #0]
 8001b66:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	1112      	asrs	r2, r2, #4
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	8809      	ldrh	r1, [r1, #0]
 8001b70:	1a52      	subs	r2, r2, r1
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001b82:	139b      	asrs	r3, r3, #14
 8001b84:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	441a      	add	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3380      	adds	r3, #128	; 0x80
 8001b9c:	121b      	asrs	r3, r3, #8
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bac:	b0cc      	sub	sp, #304	; 0x130
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001bb4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001bb8:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001bc0:	17da      	asrs	r2, r3, #31
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	4615      	mov	r5, r2
 8001bc6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001bca:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8001bce:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001bd2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bda:	fb03 f102 	mul.w	r1, r3, r2
 8001bde:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001be2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	18ca      	adds	r2, r1, r3
 8001bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bf0:	fba3 8903 	umull	r8, r9, r3, r3
 8001bf4:	eb02 0309 	add.w	r3, r2, r9
 8001bf8:	4699      	mov	r9, r3
 8001bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bfe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	17da      	asrs	r2, r3, #31
 8001c06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c0a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c0e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001c12:	4603      	mov	r3, r0
 8001c14:	fb03 f209 	mul.w	r2, r3, r9
 8001c18:	460b      	mov	r3, r1
 8001c1a:	fb08 f303 	mul.w	r3, r8, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	4602      	mov	r2, r0
 8001c22:	fba8 2102 	umull	r2, r1, r8, r2
 8001c26:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001c2a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001c2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c32:	4413      	add	r3, r2
 8001c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c38:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001c3c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001c40:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c48:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	17da      	asrs	r2, r3, #31
 8001c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c54:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c5c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001c60:	462a      	mov	r2, r5
 8001c62:	fb02 f203 	mul.w	r2, r2, r3
 8001c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	441a      	add	r2, r3
 8001c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c76:	4621      	mov	r1, r4
 8001c78:	fba3 3101 	umull	r3, r1, r3, r1
 8001c7c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001c80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c88:	18d3      	adds	r3, r2, r3
 8001c8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c8e:	f04f 0000 	mov.w	r0, #0
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001c9a:	462b      	mov	r3, r5
 8001c9c:	0459      	lsls	r1, r3, #17
 8001c9e:	4622      	mov	r2, r4
 8001ca0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	0458      	lsls	r0, r3, #17
 8001ca8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001cac:	1814      	adds	r4, r2, r0
 8001cae:	643c      	str	r4, [r7, #64]	; 0x40
 8001cb0:	414b      	adcs	r3, r1
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001cb8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cc0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	17da      	asrs	r2, r3, #31
 8001cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ccc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001cd0:	f04f 0000 	mov.w	r0, #0
 8001cd4:	f04f 0100 	mov.w	r1, #0
 8001cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cdc:	00d9      	lsls	r1, r3, #3
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ce4:	1814      	adds	r4, r2, r0
 8001ce6:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ce8:	414b      	adcs	r3, r1
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cec:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001cf0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001cf4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cfc:	fb03 f102 	mul.w	r1, r3, r2
 8001d00:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	18ca      	adds	r2, r1, r3
 8001d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d12:	fba3 3103 	umull	r3, r1, r3, r3
 8001d16:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001d1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d22:	18d3      	adds	r3, r2, r3
 8001d24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	17da      	asrs	r2, r3, #31
 8001d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d38:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d3c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001d40:	4622      	mov	r2, r4
 8001d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d46:	4641      	mov	r1, r8
 8001d48:	fb01 f202 	mul.w	r2, r1, r2
 8001d4c:	464d      	mov	r5, r9
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4621      	mov	r1, r4
 8001d52:	4603      	mov	r3, r0
 8001d54:	fb03 f305 	mul.w	r3, r3, r5
 8001d58:	4413      	add	r3, r2
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4641      	mov	r1, r8
 8001d5e:	fba2 2101 	umull	r2, r1, r2, r1
 8001d62:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001d66:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001d6a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001d6e:	4413      	add	r3, r2
 8001d70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001d80:	4623      	mov	r3, r4
 8001d82:	0a18      	lsrs	r0, r3, #8
 8001d84:	462a      	mov	r2, r5
 8001d86:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	17da      	asrs	r2, r3, #31
 8001d9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d9e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001da6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001daa:	464a      	mov	r2, r9
 8001dac:	fb02 f203 	mul.w	r2, r2, r3
 8001db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001db4:	4644      	mov	r4, r8
 8001db6:	fb04 f303 	mul.w	r3, r4, r3
 8001dba:	441a      	add	r2, r3
 8001dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001dc0:	4644      	mov	r4, r8
 8001dc2:	fba3 3404 	umull	r3, r4, r3, r4
 8001dc6:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001dd2:	18d3      	adds	r3, r2, r3
 8001dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001de4:	464c      	mov	r4, r9
 8001de6:	0323      	lsls	r3, r4, #12
 8001de8:	46c4      	mov	ip, r8
 8001dea:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001dee:	4644      	mov	r4, r8
 8001df0:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001df2:	1884      	adds	r4, r0, r2
 8001df4:	633c      	str	r4, [r7, #48]	; 0x30
 8001df6:	eb41 0303 	adc.w	r3, r1, r3
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001e00:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001e04:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e08:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001e0c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001e10:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e18:	88db      	ldrh	r3, [r3, #6]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e22:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e26:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e30:	4641      	mov	r1, r8
 8001e32:	fb01 f202 	mul.w	r2, r1, r2
 8001e36:	464d      	mov	r5, r9
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	fb03 f305 	mul.w	r3, r3, r5
 8001e42:	4413      	add	r3, r2
 8001e44:	4602      	mov	r2, r0
 8001e46:	4641      	mov	r1, r8
 8001e48:	fba2 2101 	umull	r2, r1, r2, r1
 8001e4c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001e50:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001e54:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001e58:	4413      	add	r3, r2
 8001e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	104a      	asrs	r2, r1, #1
 8001e6e:	4629      	mov	r1, r5
 8001e70:	17cb      	asrs	r3, r1, #31
 8001e72:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001e76:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e146      	b.n	8002110 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001e82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e86:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001e8a:	17da      	asrs	r2, r3, #31
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e90:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e94:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001e98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001e9c:	105b      	asrs	r3, r3, #1
 8001e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ea2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ea6:	07db      	lsls	r3, r3, #31
 8001ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001eac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001eb0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	1aa4      	subs	r4, r4, r2
 8001eb8:	67bc      	str	r4, [r7, #120]	; 0x78
 8001eba:	eb61 0303 	sbc.w	r3, r1, r3
 8001ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ec0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	1891      	adds	r1, r2, r2
 8001eca:	6239      	str	r1, [r7, #32]
 8001ecc:	415b      	adcs	r3, r3
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	1851      	adds	r1, r2, r1
 8001ed8:	61b9      	str	r1, [r7, #24]
 8001eda:	4629      	mov	r1, r5
 8001edc:	414b      	adcs	r3, r1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001eec:	4649      	mov	r1, r9
 8001eee:	018b      	lsls	r3, r1, #6
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	018a      	lsls	r2, r1, #6
 8001efa:	4641      	mov	r1, r8
 8001efc:	1889      	adds	r1, r1, r2
 8001efe:	6139      	str	r1, [r7, #16]
 8001f00:	4649      	mov	r1, r9
 8001f02:	eb43 0101 	adc.w	r1, r3, r1
 8001f06:	6179      	str	r1, [r7, #20]
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f14:	4649      	mov	r1, r9
 8001f16:	008b      	lsls	r3, r1, #2
 8001f18:	46c4      	mov	ip, r8
 8001f1a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001f1e:	4641      	mov	r1, r8
 8001f20:	008a      	lsls	r2, r1, #2
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	4622      	mov	r2, r4
 8001f2a:	189b      	adds	r3, r3, r2
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	462a      	mov	r2, r5
 8001f32:	eb42 0303 	adc.w	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001f44:	4649      	mov	r1, r9
 8001f46:	008b      	lsls	r3, r1, #2
 8001f48:	46c4      	mov	ip, r8
 8001f4a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001f4e:	4641      	mov	r1, r8
 8001f50:	008a      	lsls	r2, r1, #2
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	4622      	mov	r2, r4
 8001f5a:	189b      	adds	r3, r3, r2
 8001f5c:	673b      	str	r3, [r7, #112]	; 0x70
 8001f5e:	462b      	mov	r3, r5
 8001f60:	460a      	mov	r2, r1
 8001f62:	eb42 0303 	adc.w	r3, r2, r3
 8001f66:	677b      	str	r3, [r7, #116]	; 0x74
 8001f68:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001f6c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001f70:	f7fe fbf0 	bl	8000754 <__aeabi_ldivmod>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f80:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	17da      	asrs	r2, r3, #31
 8001f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f8c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001f90:	f04f 0000 	mov.w	r0, #0
 8001f94:	f04f 0100 	mov.w	r1, #0
 8001f98:	0b50      	lsrs	r0, r2, #13
 8001f9a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f9e:	1359      	asrs	r1, r3, #13
 8001fa0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	fb00 f203 	mul.w	r2, r0, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	fb03 f301 	mul.w	r3, r3, r1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	fba2 2100 	umull	r2, r1, r2, r0
 8001fb8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001fbc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001fc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001fca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0b50      	lsrs	r0, r2, #13
 8001fd8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001fdc:	1359      	asrs	r1, r3, #13
 8001fde:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001fe2:	462b      	mov	r3, r5
 8001fe4:	fb00 f203 	mul.w	r2, r0, r3
 8001fe8:	4623      	mov	r3, r4
 8001fea:	fb03 f301 	mul.w	r3, r3, r1
 8001fee:	4413      	add	r3, r2
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	fba2 2100 	umull	r2, r1, r2, r0
 8001ff6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001ffa:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001ffe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002002:	4413      	add	r3, r2
 8002004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002014:	4621      	mov	r1, r4
 8002016:	0e4a      	lsrs	r2, r1, #25
 8002018:	4620      	mov	r0, r4
 800201a:	4629      	mov	r1, r5
 800201c:	460c      	mov	r4, r1
 800201e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8002022:	164b      	asrs	r3, r1, #25
 8002024:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800202c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002030:	b21b      	sxth	r3, r3
 8002032:	17da      	asrs	r2, r3, #31
 8002034:	663b      	str	r3, [r7, #96]	; 0x60
 8002036:	667a      	str	r2, [r7, #100]	; 0x64
 8002038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800203c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002040:	462a      	mov	r2, r5
 8002042:	fb02 f203 	mul.w	r2, r2, r3
 8002046:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800204a:	4621      	mov	r1, r4
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002056:	4621      	mov	r1, r4
 8002058:	fba2 2101 	umull	r2, r1, r2, r1
 800205c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8002060:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002064:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002068:	4413      	add	r3, r2
 800206a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800207a:	4621      	mov	r1, r4
 800207c:	0cca      	lsrs	r2, r1, #19
 800207e:	4620      	mov	r0, r4
 8002080:	4629      	mov	r1, r5
 8002082:	460c      	mov	r4, r1
 8002084:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8002088:	14cb      	asrs	r3, r1, #19
 800208a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800208e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002092:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002096:	1884      	adds	r4, r0, r2
 8002098:	65bc      	str	r4, [r7, #88]	; 0x58
 800209a:	eb41 0303 	adc.w	r3, r1, r3
 800209e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80020a4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80020a8:	4621      	mov	r1, r4
 80020aa:	1889      	adds	r1, r1, r2
 80020ac:	6539      	str	r1, [r7, #80]	; 0x50
 80020ae:	4629      	mov	r1, r5
 80020b0:	eb43 0101 	adc.w	r1, r3, r1
 80020b4:	6579      	str	r1, [r7, #84]	; 0x54
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80020c2:	4623      	mov	r3, r4
 80020c4:	0a18      	lsrs	r0, r3, #8
 80020c6:	462a      	mov	r2, r5
 80020c8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80020cc:	462b      	mov	r3, r5
 80020ce:	1219      	asrs	r1, r3, #8
 80020d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	17da      	asrs	r2, r3, #31
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80020de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80020ec:	464c      	mov	r4, r9
 80020ee:	0123      	lsls	r3, r4, #4
 80020f0:	46c4      	mov	ip, r8
 80020f2:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80020f6:	4644      	mov	r4, r8
 80020f8:	0122      	lsls	r2, r4, #4
 80020fa:	1884      	adds	r4, r0, r2
 80020fc:	603c      	str	r4, [r7, #0]
 80020fe:	eb41 0303 	adc.w	r3, r1, r3
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002108:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800210c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8002110:	4618      	mov	r0, r3
 8002112:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002116:	46bd      	mov	sp, r7
 8002118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800211c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800212e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	039a      	lsls	r2, r3, #14
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800213a:	051b      	lsls	r3, r3, #20
 800213c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002144:	4619      	mov	r1, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002152:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800215a:	4611      	mov	r1, r2
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	fb01 f202 	mul.w	r2, r1, r2
 8002162:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	7f09      	ldrb	r1, [r1, #28]
 8002168:	4608      	mov	r0, r1
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	fb00 f101 	mul.w	r1, r0, r1
 8002170:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002172:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002176:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800217a:	1292      	asrs	r2, r2, #10
 800217c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002186:	fb01 f202 	mul.w	r2, r1, r2
 800218a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800218e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	13db      	asrs	r3, r3, #15
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	13d2      	asrs	r2, r2, #15
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	7e12      	ldrb	r2, [r2, #24]
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021ba:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80021c2:	bfa8      	it	ge
 80021c4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80021c8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	131b      	asrs	r3, r3, #12
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80021ec:	2b60      	cmp	r3, #96	; 0x60
 80021ee:	d007      	beq.n	8002200 <bmp280_read_fixed+0x28>
		if (humidity)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <bmp280_read_fixed+0x24>
			*humidity = 0;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <bmp280_read_fixed+0x32>
 8002206:	2308      	movs	r3, #8
 8002208:	e000      	b.n	800220c <bmp280_read_fixed+0x34>
 800220a:	2306      	movs	r3, #6
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f107 0218 	add.w	r2, r7, #24
 8002216:	21f7      	movs	r1, #247	; 0xf7
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff fab1 	bl	8001780 <read_data>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <bmp280_read_fixed+0x50>
		return false;
 8002224:	2300      	movs	r3, #0
 8002226:	e038      	b.n	800229a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002228:	7e3b      	ldrb	r3, [r7, #24]
 800222a:	031a      	lsls	r2, r3, #12
 800222c:	7e7b      	ldrb	r3, [r7, #25]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4313      	orrs	r3, r2
 8002232:	7eba      	ldrb	r2, [r7, #26]
 8002234:	0912      	lsrs	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4313      	orrs	r3, r2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800223c:	7efb      	ldrb	r3, [r7, #27]
 800223e:	031a      	lsls	r2, r3, #12
 8002240:	7f3b      	ldrb	r3, [r7, #28]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4313      	orrs	r3, r2
 8002246:	7f7a      	ldrb	r2, [r7, #29]
 8002248:	0912      	lsrs	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4313      	orrs	r3, r2
 800224e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	461a      	mov	r2, r3
 8002256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff fc6d 	bl	8001b38 <compensate_temperature>
 800225e:	4602      	mov	r2, r0
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	461a      	mov	r2, r3
 8002268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7ff fc9c 	bl	8001ba8 <compensate_pressure>
 8002270:	4602      	mov	r2, r0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800227c:	7fbb      	ldrb	r3, [r7, #30]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	7ffa      	ldrb	r2, [r7, #31]
 8002282:	4313      	orrs	r3, r2
 8002284:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	461a      	mov	r2, r3
 800228a:	6a39      	ldr	r1, [r7, #32]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ff45 	bl	800211c <compensate_humidity>
 8002292:	4602      	mov	r2, r0
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	3730      	adds	r7, #48	; 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <bmp280_read_float+0x1a>
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	e000      	b.n	80022c0 <bmp280_read_float+0x1c>
 80022be:	2300      	movs	r3, #0
 80022c0:	f107 0218 	add.w	r2, r7, #24
 80022c4:	f107 011c 	add.w	r1, r7, #28
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7ff ff85 	bl	80021d8 <bmp280_read_fixed>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02d      	beq.n	8002330 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fd fffc 	bl	80002d4 <__aeabi_i2f>
 80022dc:	4603      	mov	r3, r0
 80022de:	4917      	ldr	r1, [pc, #92]	; (800233c <bmp280_read_float+0x98>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f8ff 	bl	80004e4 <__aeabi_fdiv>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fd ffeb 	bl	80002cc <__aeabi_ui2f>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f8f1 	bl	80004e4 <__aeabi_fdiv>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
		if (humidity)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fd ffda 	bl	80002cc <__aeabi_ui2f>
 8002318:	4603      	mov	r3, r0
 800231a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f8e0 	bl	80004e4 <__aeabi_fdiv>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	601a      	str	r2, [r3, #0]
		return true;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <bmp280_read_float+0x8e>
	}

	return false;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	42c80000 	.word	0x42c80000

08002340 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8002348:	4a03      	ldr	r2, [pc, #12]	; (8002358 <DS3231_Init+0x18>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	200000a0 	.word	0x200000a0

0800235c <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af02      	add	r7, sp, #8
 8002362:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2100      	movs	r1, #0
 8002372:	460a      	mov	r2, r1
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	460a      	mov	r2, r1
 8002378:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800237a:	4b35      	ldr	r3, [pc, #212]	; (8002450 <DS3231_GetTime+0xf4>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f107 020f 	add.w	r2, r7, #15
 8002382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2301      	movs	r3, #1
 800238a:	21d0      	movs	r1, #208	; 0xd0
 800238c:	f003 f8ae 	bl	80054ec <HAL_I2C_Master_Transmit>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <DS3231_GetTime+0x3e>
 8002396:	2300      	movs	r3, #0
 8002398:	e055      	b.n	8002446 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <DS3231_GetTime+0xf4>)
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	f107 0208 	add.w	r2, r7, #8
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2307      	movs	r3, #7
 80023aa:	21d0      	movs	r1, #208	; 0xd0
 80023ac:	f003 f99c 	bl	80056e8 <HAL_I2C_Master_Receive>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <DS3231_GetTime+0x5e>
 80023b6:	2300      	movs	r3, #0
 80023b8:	e045      	b.n	8002446 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 80023ba:	7a3b      	ldrb	r3, [r7, #8]
 80023bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f8e2 	bl	800258c <B2D>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 80023d0:	7a7b      	ldrb	r3, [r7, #9]
 80023d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f8d7 	bl	800258c <B2D>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 80023e6:	7abb      	ldrb	r3, [r7, #10]
 80023e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f8cc 	bl	800258c <B2D>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	b2da      	uxtb	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8002408:	7b3b      	ldrb	r3, [r7, #12]
 800240a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f8bb 	bl	800258c <B2D>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 800241e:	7b7b      	ldrb	r3, [r7, #13]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	b2db      	uxtb	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f8b0 	bl	800258c <B2D>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f8a8 	bl	800258c <B2D>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	701a      	strb	r2, [r3, #0]

  return true;
 8002444:	2301      	movs	r3, #1
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200000a0 	.word	0x200000a0

08002454 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 800245c:	2300      	movs	r3, #0
 800245e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	733b      	strb	r3, [r7, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	799b      	ldrb	r3, [r3, #6]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f8a7 	bl	80025bc <D2B>
 800246e:	4603      	mov	r3, r0
 8002470:	737b      	strb	r3, [r7, #13]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	795b      	ldrb	r3, [r3, #5]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f8a0 	bl	80025bc <D2B>
 800247c:	4603      	mov	r3, r0
 800247e:	73bb      	strb	r3, [r7, #14]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f899 	bl	80025bc <D2B>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	78db      	ldrb	r3, [r3, #3]
 8002492:	743b      	strb	r3, [r7, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	789b      	ldrb	r3, [r3, #2]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f88f 	bl	80025bc <D2B>
 800249e:	4603      	mov	r3, r0
 80024a0:	747b      	strb	r3, [r7, #17]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f888 	bl	80025bc <D2B>
 80024ac:	4603      	mov	r3, r0
 80024ae:	74bb      	strb	r3, [r7, #18]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f881 	bl	80025bc <D2B>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <DS3231_SetTime+0x94>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	f107 020c 	add.w	r2, r7, #12
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2308      	movs	r3, #8
 80024ce:	21d0      	movs	r1, #208	; 0xd0
 80024d0:	f003 f80c 	bl	80054ec <HAL_I2C_Master_Transmit>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <DS3231_SetTime+0x8a>
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <DS3231_SetTime+0x8c>

  return true;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200000a0 	.word	0x200000a0

080024ec <ReadRegister>:

  return true;
}

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <ReadRegister+0x54>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	1dfa      	adds	r2, r7, #7
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2301      	movs	r3, #1
 8002506:	21d0      	movs	r1, #208	; 0xd0
 8002508:	f002 fff0 	bl	80054ec <HAL_I2C_Master_Transmit>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <ReadRegister+0x2a>
 8002512:	2300      	movs	r3, #0
 8002514:	e00f      	b.n	8002536 <ReadRegister+0x4a>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <ReadRegister+0x54>)
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2301      	movs	r3, #1
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	21d0      	movs	r1, #208	; 0xd0
 8002526:	f003 f8df 	bl	80056e8 <HAL_I2C_Master_Receive>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <ReadRegister+0x48>
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <ReadRegister+0x4a>

  return true;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200000a0 	.word	0x200000a0

08002544 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af02      	add	r7, sp, #8
 800254a:	4603      	mov	r3, r0
 800254c:	460a      	mov	r2, r1
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	4613      	mov	r3, r2
 8002552:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	733b      	strb	r3, [r7, #12]
 8002558:	79bb      	ldrb	r3, [r7, #6]
 800255a:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <WriteRegister+0x44>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	f107 020c 	add.w	r2, r7, #12
 8002564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2302      	movs	r3, #2
 800256c:	21d0      	movs	r1, #208	; 0xd0
 800256e:	f002 ffbd 	bl	80054ec <HAL_I2C_Master_Transmit>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <WriteRegister+0x38>
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <WriteRegister+0x3a>

  return true;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200000a0 	.word	0x200000a0

0800258c <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <D2B+0x44>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	b258      	sxtb	r0, r3
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <D2B+0x44>)
 80025da:	fba3 1302 	umull	r1, r3, r3, r2
 80025de:	08d9      	lsrs	r1, r3, #3
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	4303      	orrs	r3, r0
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	cccccccd 	.word	0xcccccccd

08002604 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN PV */


// -------------------------------------------------------------------------
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INTERUPT_FROM_RTC_Pin)			// Interrupt signal every seconds
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002614:	d104      	bne.n	8002620 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(red_data_fron_rtc_SemHandle);						// Lets RTS task read data from ds3231
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f006 fef4 	bl	8009408 <osSemaphoreRelease>
	}

	// Detect pressed key (interrupt)
	if((GPIO_Pin == KEY_1_Pin) && (state == true))
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	2b10      	cmp	r3, #16
 8002624:	d10a      	bne.n	800263c <HAL_GPIO_EXTI_Callback+0x38>
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_GPIO_EXTI_Callback+0x38>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 800262e:	481f      	ldr	r0, [pc, #124]	; (80026ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8002630:	f005 fae2 	bl	8007bf8 <HAL_TIM_Base_Start_IT>
		state = false;
 8002634:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e000      	b.n	800263e <HAL_GPIO_EXTI_Callback+0x3a>
	}
	else
	{
		__NOP();
 800263c:	bf00      	nop
	}

	if((GPIO_Pin == KEY_2_Pin) && (state == true))
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d10a      	bne.n	800265a <HAL_GPIO_EXTI_Callback+0x56>
 8002644:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <HAL_GPIO_EXTI_Callback+0x56>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 800264c:	4817      	ldr	r0, [pc, #92]	; (80026ac <HAL_GPIO_EXTI_Callback+0xa8>)
 800264e:	f005 fad3 	bl	8007bf8 <HAL_TIM_Base_Start_IT>
		state = false;
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e000      	b.n	800265c <HAL_GPIO_EXTI_Callback+0x58>
	}
	else
	{
		__NOP();
 800265a:	bf00      	nop
	}

	if((GPIO_Pin == KEY_3_Pin) && (state == true))
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d10a      	bne.n	8002678 <HAL_GPIO_EXTI_Callback+0x74>
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d006      	beq.n	8002678 <HAL_GPIO_EXTI_Callback+0x74>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 800266a:	4810      	ldr	r0, [pc, #64]	; (80026ac <HAL_GPIO_EXTI_Callback+0xa8>)
 800266c:	f005 fac4 	bl	8007bf8 <HAL_TIM_Base_Start_IT>
		state = false;
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e000      	b.n	800267a <HAL_GPIO_EXTI_Callback+0x76>
	}
	else
	{
		__NOP();
 8002678:	bf00      	nop
	}

	if((GPIO_Pin == KEY_4_Pin) && (state == true))
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d10a      	bne.n	8002696 <HAL_GPIO_EXTI_Callback+0x92>
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_GPIO_EXTI_Callback+0x92>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8002688:	4808      	ldr	r0, [pc, #32]	; (80026ac <HAL_GPIO_EXTI_Callback+0xa8>)
 800268a:	f005 fab5 	bl	8007bf8 <HAL_TIM_Base_Start_IT>
		state = false;
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e001      	b.n	800269a <HAL_GPIO_EXTI_Callback+0x96>
	}
	else
	{
		__NOP();
 8002696:	bf00      	nop
	}

}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000b20 	.word	0x20000b20
 80026a8:	20000005 	.word	0x20000005
 80026ac:	20000394 	.word	0x20000394

080026b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b4:	f002 fa0c 	bl	8004ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026b8:	f000 f8f4 	bl	80028a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026bc:	f000 fa60 	bl	8002b80 <MX_GPIO_Init>
  MX_SPI1_Init();
 80026c0:	f000 f964 	bl	800298c <MX_SPI1_Init>
  MX_I2C1_Init();
 80026c4:	f000 f934 	bl	8002930 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80026c8:	f000 fa30 	bl	8002b2c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80026cc:	f000 f994 	bl	80029f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026d0:	f000 f9de 	bl	8002a90 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  DS3231_Init(&hi2c1);
 80026d4:	4848      	ldr	r0, [pc, #288]	; (80027f8 <main+0x148>)
 80026d6:	f7ff fe33 	bl	8002340 <DS3231_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80026da:	f006 faa5 	bl	8008c28 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of I2C_Mutex */
  I2C_MutexHandle = osMutexNew(&I2C_Mutex_attributes);
 80026de:	4847      	ldr	r0, [pc, #284]	; (80027fc <main+0x14c>)
 80026e0:	f006 fc48 	bl	8008f74 <osMutexNew>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4a46      	ldr	r2, [pc, #280]	; (8002800 <main+0x150>)
 80026e8:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of LCD_Sem */
  LCD_SemHandle = osSemaphoreNew(1, 1, &LCD_Sem_attributes);
 80026ea:	4a46      	ldr	r2, [pc, #280]	; (8002804 <main+0x154>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	2001      	movs	r0, #1
 80026f0:	f006 fd88 	bl	8009204 <osSemaphoreNew>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4a44      	ldr	r2, [pc, #272]	; (8002808 <main+0x158>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* creation of set_rts_val_Sem */
  set_rts_val_SemHandle = osSemaphoreNew(1, 1, &set_rts_val_Sem_attributes);
 80026fa:	4a44      	ldr	r2, [pc, #272]	; (800280c <main+0x15c>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	2001      	movs	r0, #1
 8002700:	f006 fd80 	bl	8009204 <osSemaphoreNew>
 8002704:	4603      	mov	r3, r0
 8002706:	4a42      	ldr	r2, [pc, #264]	; (8002810 <main+0x160>)
 8002708:	6013      	str	r3, [r2, #0]

  /* creation of red_data_fron_rtc_Sem */
  red_data_fron_rtc_SemHandle = osSemaphoreNew(1, 1, &red_data_fron_rtc_Sem_attributes);
 800270a:	4a42      	ldr	r2, [pc, #264]	; (8002814 <main+0x164>)
 800270c:	2101      	movs	r1, #1
 800270e:	2001      	movs	r0, #1
 8002710:	f006 fd78 	bl	8009204 <osSemaphoreNew>
 8002714:	4603      	mov	r3, r0
 8002716:	4a40      	ldr	r2, [pc, #256]	; (8002818 <main+0x168>)
 8002718:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (2, sizeof(QUEUE_t), &UARTQueue_attributes);
 800271a:	4a40      	ldr	r2, [pc, #256]	; (800281c <main+0x16c>)
 800271c:	f44f 7119 	mov.w	r1, #612	; 0x264
 8002720:	2002      	movs	r0, #2
 8002722:	f006 fec9 	bl	80094b8 <osMessageQueueNew>
 8002726:	4603      	mov	r3, r0
 8002728:	4a3d      	ldr	r2, [pc, #244]	; (8002820 <main+0x170>)
 800272a:	6013      	str	r3, [r2, #0]

  /* creation of buttonQueue */
  buttonQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &buttonQueue_attributes);
 800272c:	4a3d      	ldr	r2, [pc, #244]	; (8002824 <main+0x174>)
 800272e:	2102      	movs	r1, #2
 8002730:	2002      	movs	r0, #2
 8002732:	f006 fec1 	bl	80094b8 <osMessageQueueNew>
 8002736:	4603      	mov	r3, r0
 8002738:	4a3b      	ldr	r2, [pc, #236]	; (8002828 <main+0x178>)
 800273a:	6013      	str	r3, [r2, #0]

  /* creation of THPQueue */
  THPQueueHandle = osMessageQueueNew (2, sizeof(QUEUE_BME280), &THPQueue_attributes);
 800273c:	4a3b      	ldr	r2, [pc, #236]	; (800282c <main+0x17c>)
 800273e:	210c      	movs	r1, #12
 8002740:	2002      	movs	r0, #2
 8002742:	f006 feb9 	bl	80094b8 <osMessageQueueNew>
 8002746:	4603      	mov	r3, r0
 8002748:	4a39      	ldr	r2, [pc, #228]	; (8002830 <main+0x180>)
 800274a:	6013      	str	r3, [r2, #0]

  /* creation of rtc_queue */
  rtc_queueHandle = osMessageQueueNew (2, sizeof(QUEUE_RTC), &rtc_queue_attributes);
 800274c:	4a39      	ldr	r2, [pc, #228]	; (8002834 <main+0x184>)
 800274e:	2107      	movs	r1, #7
 8002750:	2002      	movs	r0, #2
 8002752:	f006 feb1 	bl	80094b8 <osMessageQueueNew>
 8002756:	4603      	mov	r3, r0
 8002758:	4a37      	ldr	r2, [pc, #220]	; (8002838 <main+0x188>)
 800275a:	6013      	str	r3, [r2, #0]

  /* creation of new_rtc_queue */
  new_rtc_queueHandle = osMessageQueueNew (2, sizeof(QUEUE_NEW_RTC), &new_rtc_queue_attributes);
 800275c:	4a37      	ldr	r2, [pc, #220]	; (800283c <main+0x18c>)
 800275e:	2107      	movs	r1, #7
 8002760:	2002      	movs	r0, #2
 8002762:	f006 fea9 	bl	80094b8 <osMessageQueueNew>
 8002766:	4603      	mov	r3, r0
 8002768:	4a35      	ldr	r2, [pc, #212]	; (8002840 <main+0x190>)
 800276a:	6013      	str	r3, [r2, #0]

  /* creation of QUEUE_RTC_VAL */
  QUEUE_RTC_VALHandle = osMessageQueueNew (2, sizeof(QUEUE_RTC_VAL), &QUEUE_RTC_VAL_attributes);
 800276c:	4a35      	ldr	r2, [pc, #212]	; (8002844 <main+0x194>)
 800276e:	2118      	movs	r1, #24
 8002770:	2002      	movs	r0, #2
 8002772:	f006 fea1 	bl	80094b8 <osMessageQueueNew>
 8002776:	4603      	mov	r3, r0
 8002778:	4a33      	ldr	r2, [pc, #204]	; (8002848 <main+0x198>)
 800277a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800277c:	4a33      	ldr	r2, [pc, #204]	; (800284c <main+0x19c>)
 800277e:	2100      	movs	r1, #0
 8002780:	4833      	ldr	r0, [pc, #204]	; (8002850 <main+0x1a0>)
 8002782:	f006 fab7 	bl	8008cf4 <osThreadNew>
 8002786:	4603      	mov	r3, r0
 8002788:	4a32      	ldr	r2, [pc, #200]	; (8002854 <main+0x1a4>)
 800278a:	6013      	str	r3, [r2, #0]

  /* creation of RTC_DS3231_Task */
  RTC_DS3231_TaskHandle = osThreadNew(start_RTC_DS3231_Task, NULL, &RTC_DS3231_Task_attributes);
 800278c:	4a32      	ldr	r2, [pc, #200]	; (8002858 <main+0x1a8>)
 800278e:	2100      	movs	r1, #0
 8002790:	4832      	ldr	r0, [pc, #200]	; (800285c <main+0x1ac>)
 8002792:	f006 faaf 	bl	8008cf4 <osThreadNew>
 8002796:	4603      	mov	r3, r0
 8002798:	4a31      	ldr	r2, [pc, #196]	; (8002860 <main+0x1b0>)
 800279a:	6013      	str	r3, [r2, #0]

  /* creation of BPE280_Task */
  BPE280_TaskHandle = osThreadNew(start_BPE280_Task, NULL, &BPE280_Task_attributes);
 800279c:	4a31      	ldr	r2, [pc, #196]	; (8002864 <main+0x1b4>)
 800279e:	2100      	movs	r1, #0
 80027a0:	4831      	ldr	r0, [pc, #196]	; (8002868 <main+0x1b8>)
 80027a2:	f006 faa7 	bl	8008cf4 <osThreadNew>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a30      	ldr	r2, [pc, #192]	; (800286c <main+0x1bc>)
 80027aa:	6013      	str	r3, [r2, #0]

  /* creation of SET_RTS_TASK */
  SET_RTS_TASKHandle = osThreadNew(start_SET_RTS_TASK, NULL, &SET_RTS_TASK_attributes);
 80027ac:	4a30      	ldr	r2, [pc, #192]	; (8002870 <main+0x1c0>)
 80027ae:	2100      	movs	r1, #0
 80027b0:	4830      	ldr	r0, [pc, #192]	; (8002874 <main+0x1c4>)
 80027b2:	f006 fa9f 	bl	8008cf4 <osThreadNew>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <main+0x1c8>)
 80027ba:	6013      	str	r3, [r2, #0]

  /* creation of UART_USB_Task */
  UART_USB_TaskHandle = osThreadNew(start_UART_USB_Task, NULL, &UART_USB_Task_attributes);
 80027bc:	4a2f      	ldr	r2, [pc, #188]	; (800287c <main+0x1cc>)
 80027be:	2100      	movs	r1, #0
 80027c0:	482f      	ldr	r0, [pc, #188]	; (8002880 <main+0x1d0>)
 80027c2:	f006 fa97 	bl	8008cf4 <osThreadNew>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a2e      	ldr	r2, [pc, #184]	; (8002884 <main+0x1d4>)
 80027ca:	6013      	str	r3, [r2, #0]

  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(start_LCD_Task, NULL, &LCD_Task_attributes);
 80027cc:	4a2e      	ldr	r2, [pc, #184]	; (8002888 <main+0x1d8>)
 80027ce:	2100      	movs	r1, #0
 80027d0:	482e      	ldr	r0, [pc, #184]	; (800288c <main+0x1dc>)
 80027d2:	f006 fa8f 	bl	8008cf4 <osThreadNew>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <main+0x1e0>)
 80027da:	6013      	str	r3, [r2, #0]

  /* creation of NRF24L01_Task */
  NRF24L01_TaskHandle = osThreadNew(Start_NRF24L01, NULL, &NRF24L01_Task_attributes);
 80027dc:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <main+0x1e4>)
 80027de:	2100      	movs	r1, #0
 80027e0:	482d      	ldr	r0, [pc, #180]	; (8002898 <main+0x1e8>)
 80027e2:	f006 fa87 	bl	8008cf4 <osThreadNew>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4a2c      	ldr	r2, [pc, #176]	; (800289c <main+0x1ec>)
 80027ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  HAL_TIM_Base_Start_IT(&htim2);		//  This TIM3 using for calculate how many time all tasks was running.
 80027ec:	482c      	ldr	r0, [pc, #176]	; (80028a0 <main+0x1f0>)
 80027ee:	f005 fa03 	bl	8007bf8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80027f2:	f006 fa4b 	bl	8008c8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <main+0x146>
 80027f8:	200002a0 	.word	0x200002a0
 80027fc:	0800dfa8 	.word	0x0800dfa8
 8002800:	20000b14 	.word	0x20000b14
 8002804:	0800dfb8 	.word	0x0800dfb8
 8002808:	20000b18 	.word	0x20000b18
 800280c:	0800dfc8 	.word	0x0800dfc8
 8002810:	20000b1c 	.word	0x20000b1c
 8002814:	0800dfd8 	.word	0x0800dfd8
 8002818:	20000b20 	.word	0x20000b20
 800281c:	0800df18 	.word	0x0800df18
 8002820:	2000043c 	.word	0x2000043c
 8002824:	0800df30 	.word	0x0800df30
 8002828:	20000958 	.word	0x20000958
 800282c:	0800df48 	.word	0x0800df48
 8002830:	2000095c 	.word	0x2000095c
 8002834:	0800df60 	.word	0x0800df60
 8002838:	200009c8 	.word	0x200009c8
 800283c:	0800df78 	.word	0x0800df78
 8002840:	20000a2c 	.word	0x20000a2c
 8002844:	0800df90 	.word	0x0800df90
 8002848:	20000a90 	.word	0x20000a90
 800284c:	0800de1c 	.word	0x0800de1c
 8002850:	08002d15 	.word	0x08002d15
 8002854:	20000420 	.word	0x20000420
 8002858:	0800de40 	.word	0x0800de40
 800285c:	08002d29 	.word	0x08002d29
 8002860:	20000424 	.word	0x20000424
 8002864:	0800de64 	.word	0x0800de64
 8002868:	08002e41 	.word	0x08002e41
 800286c:	20000428 	.word	0x20000428
 8002870:	0800de88 	.word	0x0800de88
 8002874:	08002f2d 	.word	0x08002f2d
 8002878:	2000042c 	.word	0x2000042c
 800287c:	0800deac 	.word	0x0800deac
 8002880:	08003651 	.word	0x08003651
 8002884:	20000430 	.word	0x20000430
 8002888:	0800ded0 	.word	0x0800ded0
 800288c:	080038bd 	.word	0x080038bd
 8002890:	20000434 	.word	0x20000434
 8002894:	0800def4 	.word	0x0800def4
 8002898:	08004415 	.word	0x08004415
 800289c:	20000438 	.word	0x20000438
 80028a0:	2000034c 	.word	0x2000034c

080028a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b090      	sub	sp, #64	; 0x40
 80028a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028aa:	f107 0318 	add.w	r3, r7, #24
 80028ae:	2228      	movs	r2, #40	; 0x28
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f00a fb50 	bl	800cf58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028d4:	2301      	movs	r3, #1
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028d8:	2302      	movs	r3, #2
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e8:	f107 0318 	add.w	r3, r7, #24
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 f97f 	bl	8006bf0 <HAL_RCC_OscConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80028f8:	f001 fe54 	bl	80045a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fc:	230f      	movs	r3, #15
 80028fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002900:	2302      	movs	r3, #2
 8002902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	2102      	movs	r1, #2
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fbec 	bl	80070f4 <HAL_RCC_ClockConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002922:	f001 fe3f 	bl	80045a4 <Error_Handler>
  }
}
 8002926:	bf00      	nop
 8002928:	3740      	adds	r7, #64	; 0x40
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <MX_I2C1_Init+0x50>)
 8002936:	4a13      	ldr	r2, [pc, #76]	; (8002984 <MX_I2C1_Init+0x54>)
 8002938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <MX_I2C1_Init+0x50>)
 800293c:	4a12      	ldr	r2, [pc, #72]	; (8002988 <MX_I2C1_Init+0x58>)
 800293e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <MX_I2C1_Init+0x50>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <MX_I2C1_Init+0x50>)
 8002948:	2200      	movs	r2, #0
 800294a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <MX_I2C1_Init+0x50>)
 800294e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002952:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <MX_I2C1_Init+0x50>)
 8002956:	2200      	movs	r2, #0
 8002958:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <MX_I2C1_Init+0x50>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <MX_I2C1_Init+0x50>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <MX_I2C1_Init+0x50>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800296c:	4804      	ldr	r0, [pc, #16]	; (8002980 <MX_I2C1_Init+0x50>)
 800296e:	f002 fc79 	bl	8005264 <HAL_I2C_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002978:	f001 fe14 	bl	80045a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}
 8002980:	200002a0 	.word	0x200002a0
 8002984:	40005400 	.word	0x40005400
 8002988:	000186a0 	.word	0x000186a0

0800298c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <MX_SPI1_Init+0x64>)
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <MX_SPI1_Init+0x68>)
 8002994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <MX_SPI1_Init+0x64>)
 8002998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800299c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029c0:	2208      	movs	r2, #8
 80029c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029d8:	220a      	movs	r2, #10
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029dc:	4804      	ldr	r0, [pc, #16]	; (80029f0 <MX_SPI1_Init+0x64>)
 80029de:	f004 fd51 	bl	8007484 <HAL_SPI_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029e8:	f001 fddc 	bl	80045a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	200002f4 	.word	0x200002f4
 80029f4:	40013000 	.word	0x40013000

080029f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <MX_TIM2_Init+0x94>)
 8002a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <MX_TIM2_Init+0x94>)
 8002a1e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <MX_TIM2_Init+0x94>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <MX_TIM2_Init+0x94>)
 8002a2c:	220a      	movs	r2, #10
 8002a2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <MX_TIM2_Init+0x94>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <MX_TIM2_Init+0x94>)
 8002a38:	2280      	movs	r2, #128	; 0x80
 8002a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a3c:	4813      	ldr	r0, [pc, #76]	; (8002a8c <MX_TIM2_Init+0x94>)
 8002a3e:	f005 f88b 	bl	8007b58 <HAL_TIM_Base_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a48:	f001 fdac 	bl	80045a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a52:	f107 0308 	add.w	r3, r7, #8
 8002a56:	4619      	mov	r1, r3
 8002a58:	480c      	ldr	r0, [pc, #48]	; (8002a8c <MX_TIM2_Init+0x94>)
 8002a5a:	f005 fa55 	bl	8007f08 <HAL_TIM_ConfigClockSource>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a64:	f001 fd9e 	bl	80045a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a70:	463b      	mov	r3, r7
 8002a72:	4619      	mov	r1, r3
 8002a74:	4805      	ldr	r0, [pc, #20]	; (8002a8c <MX_TIM2_Init+0x94>)
 8002a76:	f005 fc27 	bl	80082c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a80:	f001 fd90 	bl	80045a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	2000034c 	.word	0x2000034c

08002a90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a96:	f107 0308 	add.w	r3, r7, #8
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa4:	463b      	mov	r3, r7
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <MX_TIM3_Init+0x98>)
 8002ab0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ab4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002ab8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ac2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ad4:	4813      	ldr	r0, [pc, #76]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002ad6:	f005 f83f 	bl	8007b58 <HAL_TIM_Base_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ae0:	f001 fd60 	bl	80045a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	4619      	mov	r1, r3
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002af2:	f005 fa09 	bl	8007f08 <HAL_TIM_ConfigClockSource>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002afc:	f001 fd52 	bl	80045a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b08:	463b      	mov	r3, r7
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4805      	ldr	r0, [pc, #20]	; (8002b24 <MX_TIM3_Init+0x94>)
 8002b0e:	f005 fbdb 	bl	80082c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b18:	f001 fd44 	bl	80045a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b1c:	bf00      	nop
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000394 	.word	0x20000394
 8002b28:	40000400 	.word	0x40000400

08002b2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <MX_USART1_UART_Init+0x4c>)
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <MX_USART1_UART_Init+0x50>)
 8002b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <MX_USART1_UART_Init+0x4c>)
 8002b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <MX_USART1_UART_Init+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <MX_USART1_UART_Init+0x4c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <MX_USART1_UART_Init+0x4c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <MX_USART1_UART_Init+0x4c>)
 8002b52:	220c      	movs	r2, #12
 8002b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <MX_USART1_UART_Init+0x4c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <MX_USART1_UART_Init+0x4c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b62:	4805      	ldr	r0, [pc, #20]	; (8002b78 <MX_USART1_UART_Init+0x4c>)
 8002b64:	f005 fc20 	bl	80083a8 <HAL_UART_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b6e:	f001 fd19 	bl	80045a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200003dc 	.word	0x200003dc
 8002b7c:	40013800 	.word	0x40013800

08002b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b86:	f107 0310 	add.w	r3, r7, #16
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b94:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4a58      	ldr	r2, [pc, #352]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002b9a:	f043 0310 	orr.w	r3, r3, #16
 8002b9e:	6193      	str	r3, [r2, #24]
 8002ba0:	4b56      	ldr	r3, [pc, #344]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002bb2:	f043 0320 	orr.w	r3, r3, #32
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b4d      	ldr	r3, [pc, #308]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4a4c      	ldr	r2, [pc, #304]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6193      	str	r3, [r2, #24]
 8002bd0:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002be2:	f043 0308 	orr.w	r3, r3, #8
 8002be6:	6193      	str	r3, [r2, #24]
 8002be8:	4b44      	ldr	r3, [pc, #272]	; (8002cfc <MX_GPIO_Init+0x17c>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bfa:	4841      	ldr	r0, [pc, #260]	; (8002d00 <MX_GPIO_Init+0x180>)
 8002bfc:	f002 fae9 	bl	80051d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002c00:	2200      	movs	r2, #0
 8002c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c06:	483f      	ldr	r0, [pc, #252]	; (8002d04 <MX_GPIO_Init+0x184>)
 8002c08:	f002 fae3 	bl	80051d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002c12:	483d      	ldr	r0, [pc, #244]	; (8002d08 <MX_GPIO_Init+0x188>)
 8002c14:	f002 fadd 	bl	80051d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4833      	ldr	r0, [pc, #204]	; (8002d00 <MX_GPIO_Init+0x180>)
 8002c32:	f002 f933 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERUPT_FROM_RTC_Pin */
  GPIO_InitStruct.Pin = INTERUPT_FROM_RTC_Pin;
 8002c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c3c:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <MX_GPIO_Init+0x18c>)
 8002c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERUPT_FROM_RTC_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	4619      	mov	r1, r3
 8002c4a:	482d      	ldr	r0, [pc, #180]	; (8002d00 <MX_GPIO_Init+0x180>)
 8002c4c:	f002 f926 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_4_Pin KEY_3_Pin KEY_2_Pin KEY_1_Pin */
  GPIO_InitStruct.Pin = KEY_4_Pin|KEY_3_Pin|KEY_2_Pin|KEY_1_Pin;
 8002c50:	231e      	movs	r3, #30
 8002c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c54:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <MX_GPIO_Init+0x190>)
 8002c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4619      	mov	r1, r3
 8002c62:	4829      	ldr	r0, [pc, #164]	; (8002d08 <MX_GPIO_Init+0x188>)
 8002c64:	f002 f91a 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 0310 	add.w	r3, r7, #16
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4820      	ldr	r0, [pc, #128]	; (8002d04 <MX_GPIO_Init+0x184>)
 8002c82:	f002 f90b 	bl	8004e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8002c86:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c94:	2303      	movs	r3, #3
 8002c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	481a      	ldr	r0, [pc, #104]	; (8002d08 <MX_GPIO_Init+0x188>)
 8002ca0:	f002 f8fc 	bl	8004e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2105      	movs	r1, #5
 8002ca8:	2007      	movs	r0, #7
 8002caa:	f002 f81c 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002cae:	2007      	movs	r0, #7
 8002cb0:	f002 f835 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2105      	movs	r1, #5
 8002cb8:	2008      	movs	r0, #8
 8002cba:	f002 f814 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002cbe:	2008      	movs	r0, #8
 8002cc0:	f002 f82d 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2105      	movs	r1, #5
 8002cc8:	2009      	movs	r0, #9
 8002cca:	f002 f80c 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002cce:	2009      	movs	r0, #9
 8002cd0:	f002 f825 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2105      	movs	r1, #5
 8002cd8:	200a      	movs	r0, #10
 8002cda:	f002 f804 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002cde:	200a      	movs	r0, #10
 8002ce0:	f002 f81d 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2105      	movs	r1, #5
 8002ce8:	2028      	movs	r0, #40	; 0x28
 8002cea:	f001 fffc 	bl	8004ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cee:	2028      	movs	r0, #40	; 0x28
 8002cf0:	f002 f815 	bl	8004d1e <HAL_NVIC_EnableIRQ>

}
 8002cf4:	bf00      	nop
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40010c00 	.word	0x40010c00
 8002d08:	40010800 	.word	0x40010800
 8002d0c:	10110000 	.word	0x10110000
 8002d10:	10210000 	.word	0x10210000

08002d14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	for(;;)
	{
	  osDelay(1000);
 8002d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d20:	f006 f8fa 	bl	8008f18 <osDelay>
 8002d24:	e7fa      	b.n	8002d1c <StartDefaultTask+0x8>
	...

08002d28 <start_RTC_DS3231_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_RTC_DS3231_Task */
void start_RTC_DS3231_Task(void *argument)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	QUEUE_NEW_RTC QUEUE_NEW_RTC_t;
	_RTC time; 							// rtc_queueHandle

	// Init DS3231 RTC module
	// Turn on interrupt PIN on RTC module every one second
	uint8_t buff = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]
	ReadRegister(14, &buff);
 8002d34:	f107 030f 	add.w	r3, r7, #15
 8002d38:	4619      	mov	r1, r3
 8002d3a:	200e      	movs	r0, #14
 8002d3c:	f7ff fbd6 	bl	80024ec <ReadRegister>
	buff = buff & 0b11100011;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	f023 031c 	bic.w	r3, r3, #28
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	73fb      	strb	r3, [r7, #15]
	WriteRegister(14, buff);
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	200e      	movs	r0, #14
 8002d50:	f7ff fbf8 	bl	8002544 <WriteRegister>

	for(;;)
	{
		if(xQueueReceive(new_rtc_queueHandle , &QUEUE_NEW_RTC_t, 0) == pdTRUE)			// Waiting to new rts time and data
 8002d54:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <start_RTC_DS3231_Task+0x104>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f107 0118 	add.w	r1, r7, #24
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f007 f998 	bl	800a094 <xQueueReceive>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d121      	bne.n	8002dae <start_RTC_DS3231_Task+0x86>
		{
			// Set new time and data
			time.Year = QUEUE_NEW_RTC_t.Year;
 8002d6a:	7e3b      	ldrb	r3, [r7, #24]
 8002d6c:	743b      	strb	r3, [r7, #16]
			time.Month = QUEUE_NEW_RTC_t.Month;
 8002d6e:	7e7b      	ldrb	r3, [r7, #25]
 8002d70:	747b      	strb	r3, [r7, #17]
			time.Date = QUEUE_NEW_RTC_t.Date ;
 8002d72:	7ebb      	ldrb	r3, [r7, #26]
 8002d74:	74bb      	strb	r3, [r7, #18]
			time.DaysOfWeek = QUEUE_NEW_RTC_t.DaysOfWeek;
 8002d76:	7efb      	ldrb	r3, [r7, #27]
 8002d78:	74fb      	strb	r3, [r7, #19]
			time.Hour = QUEUE_NEW_RTC_t.Hour;
 8002d7a:	7f3b      	ldrb	r3, [r7, #28]
 8002d7c:	753b      	strb	r3, [r7, #20]
			time.Min = QUEUE_NEW_RTC_t.Min;
 8002d7e:	7f7b      	ldrb	r3, [r7, #29]
 8002d80:	757b      	strb	r3, [r7, #21]
			time.Sec = QUEUE_NEW_RTC_t.Sec;
 8002d82:	7fbb      	ldrb	r3, [r7, #30]
 8002d84:	75bb      	strb	r3, [r7, #22]

			if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002d86:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <start_RTC_DS3231_Task+0x108>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f006 f98b 	bl	80090a8 <osMutexAcquire>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <start_RTC_DS3231_Task+0x7a>
			{
				DS3231_SetTime(&time);
 8002d98:	f107 0310 	add.w	r3, r7, #16
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fb59 	bl	8002454 <DS3231_SetTime>
			}
			osMutexRelease(I2C_MutexHandle);
 8002da2:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <start_RTC_DS3231_Task+0x108>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f006 f9dc 	bl	8009164 <osMutexRelease>
 8002dac:	e7d2      	b.n	8002d54 <start_RTC_DS3231_Task+0x2c>

		}
		else																			// If no new data - show current time
		{
			if (osSemaphoreAcquire(red_data_fron_rtc_SemHandle, 10) == osOK)		// If was interrupt from RTC PIN module
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <start_RTC_DS3231_Task+0x10c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	210a      	movs	r1, #10
 8002db4:	4618      	mov	r0, r3
 8002db6:	f006 fac1 	bl	800933c <osSemaphoreAcquire>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1c9      	bne.n	8002d54 <start_RTC_DS3231_Task+0x2c>
			{
				if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <start_RTC_DS3231_Task+0x108>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f006 f96e 	bl	80090a8 <osMutexAcquire>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d104      	bne.n	8002ddc <start_RTC_DS3231_Task+0xb4>
				{
					DS3231_GetTime(&time);
 8002dd2:	f107 0310 	add.w	r3, r7, #16
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fac0 	bl	800235c <DS3231_GetTime>
				}
				osMutexRelease(I2C_MutexHandle);
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <start_RTC_DS3231_Task+0x108>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f006 f9bf 	bl	8009164 <osMutexRelease>

				// Fill in structure of queue
				QUEUE_RTC_t.Year = time.Year;
 8002de6:	7c3b      	ldrb	r3, [r7, #16]
 8002de8:	f887 3020 	strb.w	r3, [r7, #32]
				QUEUE_RTC_t.Month = time.Month;
 8002dec:	7c7b      	ldrb	r3, [r7, #17]
 8002dee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				QUEUE_RTC_t.Date = time.Date;
 8002df2:	7cbb      	ldrb	r3, [r7, #18]
 8002df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				QUEUE_RTC_t.DaysOfWeek = time.DaysOfWeek;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				QUEUE_RTC_t.Hour = time.Hour;
 8002dfe:	7d3b      	ldrb	r3, [r7, #20]
 8002e00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				QUEUE_RTC_t.Min = time.Min;
 8002e04:	7d7b      	ldrb	r3, [r7, #21]
 8002e06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				QUEUE_RTC_t.Sec = time.Sec;
 8002e0a:	7dbb      	ldrb	r3, [r7, #22]
 8002e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				if(xQueueSend(rtc_queueHandle, &QUEUE_RTC_t, 0) != pdPASS)					// Send current time over queue
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <start_RTC_DS3231_Task+0x110>)
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	f107 0120 	add.w	r1, r7, #32
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f006 ff16 	bl	8009c4c <xQueueGenericSend>
				{
					// ERROR
				}
				// Give semaphore
				osSemaphoreRelease(LCD_SemHandle);		// Let print time and date on start_LCD_Task
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <start_RTC_DS3231_Task+0x114>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f006 faef 	bl	8009408 <osSemaphoreRelease>
		if(xQueueReceive(new_rtc_queueHandle , &QUEUE_NEW_RTC_t, 0) == pdTRUE)			// Waiting to new rts time and data
 8002e2a:	e793      	b.n	8002d54 <start_RTC_DS3231_Task+0x2c>
 8002e2c:	20000a2c 	.word	0x20000a2c
 8002e30:	20000b14 	.word	0x20000b14
 8002e34:	20000b20 	.word	0x20000b20
 8002e38:	200009c8 	.word	0x200009c8
 8002e3c:	20000b18 	.word	0x20000b18

08002e40 <start_BPE280_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_BPE280_Task */
void start_BPE280_Task(void *argument)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b098      	sub	sp, #96	; 0x60
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	QUEUE_BME280 QUEUE_BME280_t;
	BMP280_HandleTypedef bmp280;
	float pressure, temperature, humidity;

	// Init BME280
	if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002e48:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <start_BPE280_Task+0xdc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f006 f92a 	bl	80090a8 <osMutexAcquire>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d122      	bne.n	8002ea0 <start_BPE280_Task+0x60>
	{
		bmp280_init_default_params(&bmp280.params);
 8002e5a:	f107 0318 	add.w	r3, r7, #24
 8002e5e:	332c      	adds	r3, #44	; 0x2c
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe fc43 	bl	80016ec <bmp280_init_default_params>
		bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002e66:	2376      	movs	r3, #118	; 0x76
 8002e68:	87bb      	strh	r3, [r7, #60]	; 0x3c
		bmp280.i2c = &hi2c1;
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <start_BPE280_Task+0xe0>)
 8002e6c:	643b      	str	r3, [r7, #64]	; 0x40

		if(bmp280_init(&bmp280, &bmp280.params) != true)
 8002e6e:	f107 0318 	add.w	r3, r7, #24
 8002e72:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002e76:	f107 0318 	add.w	r3, r7, #24
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe fdae 	bl	80019de <bmp280_init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f083 0301 	eor.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d000      	beq.n	8002e90 <start_BPE280_Task+0x50>
		{
			while(1){}   								// ERROR
 8002e8e:	e7fe      	b.n	8002e8e <start_BPE280_Task+0x4e>
		}

		bool bme280p = bmp280.id == BME280_CHIP_ID;
 8002e90:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002e94:	2b60      	cmp	r3, #96	; 0x60
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}
	osMutexRelease(I2C_MutexHandle);
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <start_BPE280_Task+0xdc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f006 f95d 	bl	8009164 <osMutexRelease>


	for(;;)
	{
		if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002eaa:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <start_BPE280_Task+0xdc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f006 f8f9 	bl	80090a8 <osMutexAcquire>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d124      	bne.n	8002f06 <start_BPE280_Task+0xc6>
		{
			if((bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) != true)
 8002ebc:	f107 030c 	add.w	r3, r7, #12
 8002ec0:	f107 0214 	add.w	r2, r7, #20
 8002ec4:	f107 0110 	add.w	r1, r7, #16
 8002ec8:	f107 0018 	add.w	r0, r7, #24
 8002ecc:	f7ff f9ea 	bl	80022a4 <bmp280_read_float>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f083 0301 	eor.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d000      	beq.n	8002ede <start_BPE280_Task+0x9e>
			{
				while(1){}								// ERROR
 8002edc:	e7fe      	b.n	8002edc <start_BPE280_Task+0x9c>
			}
			else										// IF all okay. Send data into QUEUE to the main task
			{
				// Fill in fields of struct
				QUEUE_BME280_t.temperature = temperature;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	653b      	str	r3, [r7, #80]	; 0x50
				QUEUE_BME280_t.humidity = humidity;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	657b      	str	r3, [r7, #84]	; 0x54
				QUEUE_BME280_t.pressure = pressure;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	64fb      	str	r3, [r7, #76]	; 0x4c

				int status_queue = xQueueSend(THPQueueHandle, &QUEUE_BME280_t, 0);		// Send data into queue
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <start_BPE280_Task+0xe4>)
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f006 fea9 	bl	8009c4c <xQueueGenericSend>
 8002efa:	65b8      	str	r0, [r7, #88]	; 0x58
				if(status_queue != pdPASS)
				{
					// ERROR
				}
				// Give semaphore
				osSemaphoreRelease(LCD_SemHandle);		// Let print T, H and P on start_LCD_Task
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <start_BPE280_Task+0xe8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f006 fa81 	bl	8009408 <osSemaphoreRelease>
			}
		}
		osMutexRelease(I2C_MutexHandle);
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <start_BPE280_Task+0xdc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f006 f92a 	bl	8009164 <osMutexRelease>

		osDelay(5000);
 8002f10:	f241 3088 	movw	r0, #5000	; 0x1388
 8002f14:	f006 f800 	bl	8008f18 <osDelay>
		if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002f18:	e7c7      	b.n	8002eaa <start_BPE280_Task+0x6a>
 8002f1a:	bf00      	nop
 8002f1c:	20000b14 	.word	0x20000b14
 8002f20:	200002a0 	.word	0x200002a0
 8002f24:	2000095c 	.word	0x2000095c
 8002f28:	20000b18 	.word	0x20000b18

08002f2c <start_SET_RTS_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_SET_RTS_TASK */
void start_SET_RTS_TASK(void *argument)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b08f      	sub	sp, #60	; 0x3c
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	QUEUE_NEW_RTC QUEUE_NEW_RTC_t;
	QUEUE_RTC_VAL QUEUE_RTC_VAL_t;

	for(;;)
	{
		uint16_t pressed_key, status_queue = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	86fb      	strh	r3, [r7, #54]	; 0x36

		if(osSemaphoreAcquire(set_rts_val_SemHandle, 10) == osOK)					// Waiting on the press any button
 8002f38:	4b88      	ldr	r3, [pc, #544]	; (800315c <start_SET_RTS_TASK+0x230>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	210a      	movs	r1, #10
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f006 f9fc 	bl	800933c <osSemaphoreAcquire>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f4      	bne.n	8002f34 <start_SET_RTS_TASK+0x8>
		{
			if (xQueueReceive( buttonQueueHandle , &pressed_key, 0 ) == pdTRUE)		// Read witch button was pressed
 8002f4a:	4b85      	ldr	r3, [pc, #532]	; (8003160 <start_SET_RTS_TASK+0x234>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f107 010a 	add.w	r1, r7, #10
 8002f52:	2200      	movs	r2, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f007 f89d 	bl	800a094 <xQueueReceive>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d1e9      	bne.n	8002f34 <start_SET_RTS_TASK+0x8>
				static int8_t day_of_week = 1;
				static int8_t hour = 1;
				static int8_t minute = 1;
				static int8_t second = 1;

				osThreadSuspend(RTC_DS3231_TaskHandle);								// Stop task, and stop print RTC data on LCD
 8002f60:	4b80      	ldr	r3, [pc, #512]	; (8003164 <start_SET_RTS_TASK+0x238>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f005 ff6f 	bl	8008e48 <osThreadSuspend>
				osThreadSuspend(BPE280_TaskHandle);									// Stop task, and stop print BME280 data on LCD
 8002f6a:	4b7f      	ldr	r3, [pc, #508]	; (8003168 <start_SET_RTS_TASK+0x23c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f005 ff6a 	bl	8008e48 <osThreadSuspend>

				QUEUE_RTC_VAL_t.new_value = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
				memset(QUEUE_RTC_VAL_t.name, 0, sizeof(QUEUE_RTC_VAL_t.name));
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2214      	movs	r2, #20
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f009 ffe8 	bl	800cf58 <memset>

				switch (setet_type)
 8002f88:	4b78      	ldr	r3, [pc, #480]	; (800316c <start_SET_RTS_TASK+0x240>)
 8002f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	2b07      	cmp	r3, #7
 8002f92:	f200 8342 	bhi.w	800361a <start_SET_RTS_TASK+0x6ee>
 8002f96:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <start_SET_RTS_TASK+0x70>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08002fbd 	.word	0x08002fbd
 8002fa0:	0800308d 	.word	0x0800308d
 8002fa4:	08003189 	.word	0x08003189
 8002fa8:	08003259 	.word	0x08003259
 8002fac:	0800332d 	.word	0x0800332d
 8002fb0:	08003421 	.word	0x08003421
 8002fb4:	080034f3 	.word	0x080034f3
 8002fb8:	080035c3 	.word	0x080035c3
				{
					case 1:
						// set years
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2214      	movs	r2, #20
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f009 ffc6 	bl	800cf58 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Year: ");			// Set the setings value
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd f8bc 	bl	8000150 <strlen>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a62      	ldr	r2, [pc, #392]	; (8003170 <start_SET_RTS_TASK+0x244>)
 8002fe6:	6810      	ldr	r0, [r2, #0]
 8002fe8:	6018      	str	r0, [r3, #0]
 8002fea:	8891      	ldrh	r1, [r2, #4]
 8002fec:	7992      	ldrb	r2, [r2, #6]
 8002fee:	8099      	strh	r1, [r3, #4]
 8002ff0:	719a      	strb	r2, [r3, #6]

						if(pressed_key == 2)
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d110      	bne.n	800301a <start_SET_RTS_TASK+0xee>
						{
							yaer--;
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <start_SET_RTS_TASK+0x248>)
 8002ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	b25a      	sxtb	r2, r3
 8003006:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <start_SET_RTS_TASK+0x248>)
 8003008:	701a      	strb	r2, [r3, #0]
							if(yaer < 0)
 800300a:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <start_SET_RTS_TASK+0x248>)
 800300c:	f993 3000 	ldrsb.w	r3, [r3]
 8003010:	2b00      	cmp	r3, #0
 8003012:	da02      	bge.n	800301a <start_SET_RTS_TASK+0xee>
							{
								yaer = 99;
 8003014:	4b57      	ldr	r3, [pc, #348]	; (8003174 <start_SET_RTS_TASK+0x248>)
 8003016:	2263      	movs	r2, #99	; 0x63
 8003018:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d110      	bne.n	8003042 <start_SET_RTS_TASK+0x116>
						{
							yaer++;
 8003020:	4b54      	ldr	r3, [pc, #336]	; (8003174 <start_SET_RTS_TASK+0x248>)
 8003022:	f993 3000 	ldrsb.w	r3, [r3]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3301      	adds	r3, #1
 800302a:	b2db      	uxtb	r3, r3
 800302c:	b25a      	sxtb	r2, r3
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <start_SET_RTS_TASK+0x248>)
 8003030:	701a      	strb	r2, [r3, #0]
							if(yaer > 99)
 8003032:	4b50      	ldr	r3, [pc, #320]	; (8003174 <start_SET_RTS_TASK+0x248>)
 8003034:	f993 3000 	ldrsb.w	r3, [r3]
 8003038:	2b63      	cmp	r3, #99	; 0x63
 800303a:	dd02      	ble.n	8003042 <start_SET_RTS_TASK+0x116>
							{
								yaer = 0;
 800303c:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <start_SET_RTS_TASK+0x248>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = yaer;
 8003042:	4b4c      	ldr	r3, [pc, #304]	; (8003174 <start_SET_RTS_TASK+0x248>)
 8003044:	f993 3000 	ldrsb.w	r3, [r3]
 8003048:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);		// Save new value on LCD
 800304a:	4b4b      	ldr	r3, [pc, #300]	; (8003178 <start_SET_RTS_TASK+0x24c>)
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	f107 010c 	add.w	r1, r7, #12
 8003052:	2300      	movs	r3, #0
 8003054:	2200      	movs	r2, #0
 8003056:	f006 fdf9 	bl	8009c4c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);							// Let show new value on LCD
 800305a:	4b48      	ldr	r3, [pc, #288]	; (800317c <start_SET_RTS_TASK+0x250>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f006 f9d2 	bl	8009408 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 8003064:	897b      	ldrh	r3, [r7, #10]
 8003066:	2b04      	cmp	r3, #4
 8003068:	f040 82ca 	bne.w	8003600 <start_SET_RTS_TASK+0x6d4>
						{
							QUEUE_NEW_RTC_t.Year = QUEUE_RTC_VAL_t.new_value;		// Save new selected value in queue for rts
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
							setet_type++;											// Go to next case
 8003074:	4b3d      	ldr	r3, [pc, #244]	; (800316c <start_SET_RTS_TASK+0x240>)
 8003076:	f993 3000 	ldrsb.w	r3, [r3]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3301      	adds	r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	b25a      	sxtb	r2, r3
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <start_SET_RTS_TASK+0x240>)
 8003084:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;							// init next value
 8003086:	2301      	movs	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
						}
						break;
 800308a:	e2b9      	b.n	8003600 <start_SET_RTS_TASK+0x6d4>

					case 2:
						// set month
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 800308c:	f107 030c 	add.w	r3, r7, #12
 8003090:	3304      	adds	r3, #4
 8003092:	2214      	movs	r2, #20
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f009 ff5e 	bl	800cf58 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Month: ");			// Set the setings value
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	3304      	adds	r3, #4
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd f854 	bl	8000150 <strlen>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	f107 030c 	add.w	r3, r7, #12
 80030b0:	3304      	adds	r3, #4
 80030b2:	4413      	add	r3, r2
 80030b4:	4932      	ldr	r1, [pc, #200]	; (8003180 <start_SET_RTS_TASK+0x254>)
 80030b6:	461a      	mov	r2, r3
 80030b8:	460b      	mov	r3, r1
 80030ba:	cb03      	ldmia	r3!, {r0, r1}
 80030bc:	6010      	str	r0, [r2, #0]
 80030be:	6051      	str	r1, [r2, #4]

						if(pressed_key == 2)
 80030c0:	897b      	ldrh	r3, [r7, #10]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d110      	bne.n	80030e8 <start_SET_RTS_TASK+0x1bc>
						{
							month--;
 80030c6:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <start_SET_RTS_TASK+0x258>)
 80030c8:	f993 3000 	ldrsb.w	r3, [r3]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	b25a      	sxtb	r2, r3
 80030d4:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <start_SET_RTS_TASK+0x258>)
 80030d6:	701a      	strb	r2, [r3, #0]
							if(month < 1)
 80030d8:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <start_SET_RTS_TASK+0x258>)
 80030da:	f993 3000 	ldrsb.w	r3, [r3]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	dc02      	bgt.n	80030e8 <start_SET_RTS_TASK+0x1bc>
							{
								month = 12;
 80030e2:	4b28      	ldr	r3, [pc, #160]	; (8003184 <start_SET_RTS_TASK+0x258>)
 80030e4:	220c      	movs	r2, #12
 80030e6:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 80030e8:	897b      	ldrh	r3, [r7, #10]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d110      	bne.n	8003110 <start_SET_RTS_TASK+0x1e4>
						{
							month++;
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <start_SET_RTS_TASK+0x258>)
 80030f0:	f993 3000 	ldrsb.w	r3, [r3]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	b25a      	sxtb	r2, r3
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <start_SET_RTS_TASK+0x258>)
 80030fe:	701a      	strb	r2, [r3, #0]
							if(month > 12)
 8003100:	4b20      	ldr	r3, [pc, #128]	; (8003184 <start_SET_RTS_TASK+0x258>)
 8003102:	f993 3000 	ldrsb.w	r3, [r3]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	dd02      	ble.n	8003110 <start_SET_RTS_TASK+0x1e4>
							{
								month = 1;
 800310a:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <start_SET_RTS_TASK+0x258>)
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = month;
 8003110:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <start_SET_RTS_TASK+0x258>)
 8003112:	f993 3000 	ldrsb.w	r3, [r3]
 8003116:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <start_SET_RTS_TASK+0x24c>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	f107 010c 	add.w	r1, r7, #12
 8003120:	2300      	movs	r3, #0
 8003122:	2200      	movs	r2, #0
 8003124:	f006 fd92 	bl	8009c4c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <start_SET_RTS_TASK+0x250>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f006 f96b 	bl	8009408 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	2b04      	cmp	r3, #4
 8003136:	f040 8265 	bne.w	8003604 <start_SET_RTS_TASK+0x6d8>
						{
							QUEUE_NEW_RTC_t.Month = QUEUE_RTC_VAL_t.new_value;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
							setet_type++;
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <start_SET_RTS_TASK+0x240>)
 8003144:	f993 3000 	ldrsb.w	r3, [r3]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3301      	adds	r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	b25a      	sxtb	r2, r3
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <start_SET_RTS_TASK+0x240>)
 8003152:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 8003154:	2301      	movs	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
						}
						break;
 8003158:	e254      	b.n	8003604 <start_SET_RTS_TASK+0x6d8>
 800315a:	bf00      	nop
 800315c:	20000b1c 	.word	0x20000b1c
 8003160:	20000958 	.word	0x20000958
 8003164:	20000424 	.word	0x20000424
 8003168:	20000428 	.word	0x20000428
 800316c:	20000006 	.word	0x20000006
 8003170:	0800da1c 	.word	0x0800da1c
 8003174:	20000007 	.word	0x20000007
 8003178:	20000a90 	.word	0x20000a90
 800317c:	20000b18 	.word	0x20000b18
 8003180:	0800da24 	.word	0x0800da24
 8003184:	20000008 	.word	0x20000008

					case 3:
						// set Date
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 8003188:	f107 030c 	add.w	r3, r7, #12
 800318c:	3304      	adds	r3, #4
 800318e:	2214      	movs	r2, #20
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f009 fee0 	bl	800cf58 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Date: ");			// Set the setings value
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	3304      	adds	r3, #4
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fc ffd6 	bl	8000150 <strlen>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	3304      	adds	r3, #4
 80031ae:	4413      	add	r3, r2
 80031b0:	4a92      	ldr	r2, [pc, #584]	; (80033fc <start_SET_RTS_TASK+0x4d0>)
 80031b2:	6810      	ldr	r0, [r2, #0]
 80031b4:	6018      	str	r0, [r3, #0]
 80031b6:	8891      	ldrh	r1, [r2, #4]
 80031b8:	7992      	ldrb	r2, [r2, #6]
 80031ba:	8099      	strh	r1, [r3, #4]
 80031bc:	719a      	strb	r2, [r3, #6]

						if(pressed_key == 2)
 80031be:	897b      	ldrh	r3, [r7, #10]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d110      	bne.n	80031e6 <start_SET_RTS_TASK+0x2ba>
						{
							date--;
 80031c4:	4b8e      	ldr	r3, [pc, #568]	; (8003400 <start_SET_RTS_TASK+0x4d4>)
 80031c6:	f993 3000 	ldrsb.w	r3, [r3]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	b25a      	sxtb	r2, r3
 80031d2:	4b8b      	ldr	r3, [pc, #556]	; (8003400 <start_SET_RTS_TASK+0x4d4>)
 80031d4:	701a      	strb	r2, [r3, #0]
							if(date < 1)
 80031d6:	4b8a      	ldr	r3, [pc, #552]	; (8003400 <start_SET_RTS_TASK+0x4d4>)
 80031d8:	f993 3000 	ldrsb.w	r3, [r3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	dc02      	bgt.n	80031e6 <start_SET_RTS_TASK+0x2ba>
							{
								date = 31;
 80031e0:	4b87      	ldr	r3, [pc, #540]	; (8003400 <start_SET_RTS_TASK+0x4d4>)
 80031e2:	221f      	movs	r2, #31
 80031e4:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d110      	bne.n	800320e <start_SET_RTS_TASK+0x2e2>
						{
							date++;
 80031ec:	4b84      	ldr	r3, [pc, #528]	; (8003400 <start_SET_RTS_TASK+0x4d4>)
 80031ee:	f993 3000 	ldrsb.w	r3, [r3]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	b25a      	sxtb	r2, r3
 80031fa:	4b81      	ldr	r3, [pc, #516]	; (8003400 <start_SET_RTS_TASK+0x4d4>)
 80031fc:	701a      	strb	r2, [r3, #0]
							if(date > 31)
 80031fe:	4b80      	ldr	r3, [pc, #512]	; (8003400 <start_SET_RTS_TASK+0x4d4>)
 8003200:	f993 3000 	ldrsb.w	r3, [r3]
 8003204:	2b1f      	cmp	r3, #31
 8003206:	dd02      	ble.n	800320e <start_SET_RTS_TASK+0x2e2>
							{
								date = 1;
 8003208:	4b7d      	ldr	r3, [pc, #500]	; (8003400 <start_SET_RTS_TASK+0x4d4>)
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = date;
 800320e:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <start_SET_RTS_TASK+0x4d4>)
 8003210:	f993 3000 	ldrsb.w	r3, [r3]
 8003214:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 8003216:	4b7b      	ldr	r3, [pc, #492]	; (8003404 <start_SET_RTS_TASK+0x4d8>)
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	f107 010c 	add.w	r1, r7, #12
 800321e:	2300      	movs	r3, #0
 8003220:	2200      	movs	r2, #0
 8003222:	f006 fd13 	bl	8009c4c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 8003226:	4b78      	ldr	r3, [pc, #480]	; (8003408 <start_SET_RTS_TASK+0x4dc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f006 f8ec 	bl	8009408 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 8003230:	897b      	ldrh	r3, [r7, #10]
 8003232:	2b04      	cmp	r3, #4
 8003234:	f040 81e8 	bne.w	8003608 <start_SET_RTS_TASK+0x6dc>
						{
							QUEUE_NEW_RTC_t.Date = QUEUE_RTC_VAL_t.new_value;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							setet_type++;
 8003240:	4b72      	ldr	r3, [pc, #456]	; (800340c <start_SET_RTS_TASK+0x4e0>)
 8003242:	f993 3000 	ldrsb.w	r3, [r3]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3301      	adds	r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	b25a      	sxtb	r2, r3
 800324e:	4b6f      	ldr	r3, [pc, #444]	; (800340c <start_SET_RTS_TASK+0x4e0>)
 8003250:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 8003252:	2301      	movs	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
						}
						break;
 8003256:	e1d7      	b.n	8003608 <start_SET_RTS_TASK+0x6dc>

					case 4:
						// set DaysOfWeek
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	3304      	adds	r3, #4
 800325e:	2214      	movs	r2, #20
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f009 fe78 	bl	800cf58 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Day of week: ");			// Set the setings value
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	3304      	adds	r3, #4
 800326e:	4618      	mov	r0, r3
 8003270:	f7fc ff6e 	bl	8000150 <strlen>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	3304      	adds	r3, #4
 800327e:	4413      	add	r3, r2
 8003280:	4a63      	ldr	r2, [pc, #396]	; (8003410 <start_SET_RTS_TASK+0x4e4>)
 8003282:	461c      	mov	r4, r3
 8003284:	4613      	mov	r3, r2
 8003286:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003288:	6020      	str	r0, [r4, #0]
 800328a:	6061      	str	r1, [r4, #4]
 800328c:	60a2      	str	r2, [r4, #8]
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	81a3      	strh	r3, [r4, #12]

						if(pressed_key == 2)
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d110      	bne.n	80032ba <start_SET_RTS_TASK+0x38e>
						{
							day_of_week--;
 8003298:	4b5e      	ldr	r3, [pc, #376]	; (8003414 <start_SET_RTS_TASK+0x4e8>)
 800329a:	f993 3000 	ldrsb.w	r3, [r3]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	b25a      	sxtb	r2, r3
 80032a6:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <start_SET_RTS_TASK+0x4e8>)
 80032a8:	701a      	strb	r2, [r3, #0]
							if(day_of_week < 1)
 80032aa:	4b5a      	ldr	r3, [pc, #360]	; (8003414 <start_SET_RTS_TASK+0x4e8>)
 80032ac:	f993 3000 	ldrsb.w	r3, [r3]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	dc02      	bgt.n	80032ba <start_SET_RTS_TASK+0x38e>
							{
								day_of_week = 7;
 80032b4:	4b57      	ldr	r3, [pc, #348]	; (8003414 <start_SET_RTS_TASK+0x4e8>)
 80032b6:	2207      	movs	r2, #7
 80032b8:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d110      	bne.n	80032e2 <start_SET_RTS_TASK+0x3b6>
						{
							day_of_week++;
 80032c0:	4b54      	ldr	r3, [pc, #336]	; (8003414 <start_SET_RTS_TASK+0x4e8>)
 80032c2:	f993 3000 	ldrsb.w	r3, [r3]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	b25a      	sxtb	r2, r3
 80032ce:	4b51      	ldr	r3, [pc, #324]	; (8003414 <start_SET_RTS_TASK+0x4e8>)
 80032d0:	701a      	strb	r2, [r3, #0]
							if(day_of_week > 7)
 80032d2:	4b50      	ldr	r3, [pc, #320]	; (8003414 <start_SET_RTS_TASK+0x4e8>)
 80032d4:	f993 3000 	ldrsb.w	r3, [r3]
 80032d8:	2b07      	cmp	r3, #7
 80032da:	dd02      	ble.n	80032e2 <start_SET_RTS_TASK+0x3b6>
							{
								day_of_week = 1;
 80032dc:	4b4d      	ldr	r3, [pc, #308]	; (8003414 <start_SET_RTS_TASK+0x4e8>)
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = day_of_week;
 80032e2:	4b4c      	ldr	r3, [pc, #304]	; (8003414 <start_SET_RTS_TASK+0x4e8>)
 80032e4:	f993 3000 	ldrsb.w	r3, [r3]
 80032e8:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 80032ea:	4b46      	ldr	r3, [pc, #280]	; (8003404 <start_SET_RTS_TASK+0x4d8>)
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	f107 010c 	add.w	r1, r7, #12
 80032f2:	2300      	movs	r3, #0
 80032f4:	2200      	movs	r2, #0
 80032f6:	f006 fca9 	bl	8009c4c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80032fa:	4b43      	ldr	r3, [pc, #268]	; (8003408 <start_SET_RTS_TASK+0x4dc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f006 f882 	bl	8009408 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 8003304:	897b      	ldrh	r3, [r7, #10]
 8003306:	2b04      	cmp	r3, #4
 8003308:	f040 8180 	bne.w	800360c <start_SET_RTS_TASK+0x6e0>
						{
							QUEUE_NEW_RTC_t.DaysOfWeek = QUEUE_RTC_VAL_t.new_value;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							setet_type++;
 8003314:	4b3d      	ldr	r3, [pc, #244]	; (800340c <start_SET_RTS_TASK+0x4e0>)
 8003316:	f993 3000 	ldrsb.w	r3, [r3]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3301      	adds	r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	b25a      	sxtb	r2, r3
 8003322:	4b3a      	ldr	r3, [pc, #232]	; (800340c <start_SET_RTS_TASK+0x4e0>)
 8003324:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
						}
						break;
 800332a:	e16f      	b.n	800360c <start_SET_RTS_TASK+0x6e0>

					case 5:
						// set Hour
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	3304      	adds	r3, #4
 8003332:	2214      	movs	r2, #20
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f009 fe0e 	bl	800cf58 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Hour: ");			// Set the setings value
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	3304      	adds	r3, #4
 8003342:	4618      	mov	r0, r3
 8003344:	f7fc ff04 	bl	8000150 <strlen>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	3304      	adds	r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	4a30      	ldr	r2, [pc, #192]	; (8003418 <start_SET_RTS_TASK+0x4ec>)
 8003356:	6810      	ldr	r0, [r2, #0]
 8003358:	6018      	str	r0, [r3, #0]
 800335a:	8891      	ldrh	r1, [r2, #4]
 800335c:	7992      	ldrb	r2, [r2, #6]
 800335e:	8099      	strh	r1, [r3, #4]
 8003360:	719a      	strb	r2, [r3, #6]

						if(pressed_key == 2)
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d110      	bne.n	800338a <start_SET_RTS_TASK+0x45e>
						{
							hour--;
 8003368:	4b2c      	ldr	r3, [pc, #176]	; (800341c <start_SET_RTS_TASK+0x4f0>)
 800336a:	f993 3000 	ldrsb.w	r3, [r3]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	b25a      	sxtb	r2, r3
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <start_SET_RTS_TASK+0x4f0>)
 8003378:	701a      	strb	r2, [r3, #0]

							if(hour < 0)
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <start_SET_RTS_TASK+0x4f0>)
 800337c:	f993 3000 	ldrsb.w	r3, [r3]
 8003380:	2b00      	cmp	r3, #0
 8003382:	da02      	bge.n	800338a <start_SET_RTS_TASK+0x45e>
							{
								hour = 24;
 8003384:	4b25      	ldr	r3, [pc, #148]	; (800341c <start_SET_RTS_TASK+0x4f0>)
 8003386:	2218      	movs	r2, #24
 8003388:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 800338a:	897b      	ldrh	r3, [r7, #10]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d110      	bne.n	80033b2 <start_SET_RTS_TASK+0x486>
						{
							hour++;
 8003390:	4b22      	ldr	r3, [pc, #136]	; (800341c <start_SET_RTS_TASK+0x4f0>)
 8003392:	f993 3000 	ldrsb.w	r3, [r3]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3301      	adds	r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	b25a      	sxtb	r2, r3
 800339e:	4b1f      	ldr	r3, [pc, #124]	; (800341c <start_SET_RTS_TASK+0x4f0>)
 80033a0:	701a      	strb	r2, [r3, #0]
							if(hour > 24)
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <start_SET_RTS_TASK+0x4f0>)
 80033a4:	f993 3000 	ldrsb.w	r3, [r3]
 80033a8:	2b18      	cmp	r3, #24
 80033aa:	dd02      	ble.n	80033b2 <start_SET_RTS_TASK+0x486>
							{
								hour = 0;
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <start_SET_RTS_TASK+0x4f0>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = hour;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <start_SET_RTS_TASK+0x4f0>)
 80033b4:	f993 3000 	ldrsb.w	r3, [r3]
 80033b8:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <start_SET_RTS_TASK+0x4d8>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	f107 010c 	add.w	r1, r7, #12
 80033c2:	2300      	movs	r3, #0
 80033c4:	2200      	movs	r2, #0
 80033c6:	f006 fc41 	bl	8009c4c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <start_SET_RTS_TASK+0x4dc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f006 f81a 	bl	8009408 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 80033d4:	897b      	ldrh	r3, [r7, #10]
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	f040 811a 	bne.w	8003610 <start_SET_RTS_TASK+0x6e4>
						{
							QUEUE_NEW_RTC_t.Hour = QUEUE_RTC_VAL_t.new_value;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
							setet_type++;
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <start_SET_RTS_TASK+0x4e0>)
 80033e6:	f993 3000 	ldrsb.w	r3, [r3]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	b25a      	sxtb	r2, r3
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <start_SET_RTS_TASK+0x4e0>)
 80033f4:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
						}
						break;
 80033fa:	e109      	b.n	8003610 <start_SET_RTS_TASK+0x6e4>
 80033fc:	0800da2c 	.word	0x0800da2c
 8003400:	20000009 	.word	0x20000009
 8003404:	20000a90 	.word	0x20000a90
 8003408:	20000b18 	.word	0x20000b18
 800340c:	20000006 	.word	0x20000006
 8003410:	0800da34 	.word	0x0800da34
 8003414:	2000000a 	.word	0x2000000a
 8003418:	0800da44 	.word	0x0800da44
 800341c:	2000000b 	.word	0x2000000b

					case 6:
						// set Minutes
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	3304      	adds	r3, #4
 8003426:	2214      	movs	r2, #20
 8003428:	2100      	movs	r1, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f009 fd94 	bl	800cf58 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Minute: ");			// Set the setings value
 8003430:	f107 030c 	add.w	r3, r7, #12
 8003434:	3304      	adds	r3, #4
 8003436:	4618      	mov	r0, r3
 8003438:	f7fc fe8a 	bl	8000150 <strlen>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	3304      	adds	r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	4976      	ldr	r1, [pc, #472]	; (8003624 <start_SET_RTS_TASK+0x6f8>)
 800344a:	461a      	mov	r2, r3
 800344c:	460b      	mov	r3, r1
 800344e:	cb03      	ldmia	r3!, {r0, r1}
 8003450:	6010      	str	r0, [r2, #0]
 8003452:	6051      	str	r1, [r2, #4]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	7213      	strb	r3, [r2, #8]

						if(pressed_key == 2)
 8003458:	897b      	ldrh	r3, [r7, #10]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d110      	bne.n	8003480 <start_SET_RTS_TASK+0x554>
						{
							minute--;
 800345e:	4b72      	ldr	r3, [pc, #456]	; (8003628 <start_SET_RTS_TASK+0x6fc>)
 8003460:	f993 3000 	ldrsb.w	r3, [r3]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	b25a      	sxtb	r2, r3
 800346c:	4b6e      	ldr	r3, [pc, #440]	; (8003628 <start_SET_RTS_TASK+0x6fc>)
 800346e:	701a      	strb	r2, [r3, #0]
							if(minute < 0)
 8003470:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <start_SET_RTS_TASK+0x6fc>)
 8003472:	f993 3000 	ldrsb.w	r3, [r3]
 8003476:	2b00      	cmp	r3, #0
 8003478:	da02      	bge.n	8003480 <start_SET_RTS_TASK+0x554>
							{
								minute = 59;
 800347a:	4b6b      	ldr	r3, [pc, #428]	; (8003628 <start_SET_RTS_TASK+0x6fc>)
 800347c:	223b      	movs	r2, #59	; 0x3b
 800347e:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 8003480:	897b      	ldrh	r3, [r7, #10]
 8003482:	2b03      	cmp	r3, #3
 8003484:	d110      	bne.n	80034a8 <start_SET_RTS_TASK+0x57c>
						{
							minute++;
 8003486:	4b68      	ldr	r3, [pc, #416]	; (8003628 <start_SET_RTS_TASK+0x6fc>)
 8003488:	f993 3000 	ldrsb.w	r3, [r3]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	3301      	adds	r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	b25a      	sxtb	r2, r3
 8003494:	4b64      	ldr	r3, [pc, #400]	; (8003628 <start_SET_RTS_TASK+0x6fc>)
 8003496:	701a      	strb	r2, [r3, #0]
							if(minute > 59)
 8003498:	4b63      	ldr	r3, [pc, #396]	; (8003628 <start_SET_RTS_TASK+0x6fc>)
 800349a:	f993 3000 	ldrsb.w	r3, [r3]
 800349e:	2b3b      	cmp	r3, #59	; 0x3b
 80034a0:	dd02      	ble.n	80034a8 <start_SET_RTS_TASK+0x57c>
							{
								minute = 0;
 80034a2:	4b61      	ldr	r3, [pc, #388]	; (8003628 <start_SET_RTS_TASK+0x6fc>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = minute;
 80034a8:	4b5f      	ldr	r3, [pc, #380]	; (8003628 <start_SET_RTS_TASK+0x6fc>)
 80034aa:	f993 3000 	ldrsb.w	r3, [r3]
 80034ae:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 80034b0:	4b5e      	ldr	r3, [pc, #376]	; (800362c <start_SET_RTS_TASK+0x700>)
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	f107 010c 	add.w	r1, r7, #12
 80034b8:	2300      	movs	r3, #0
 80034ba:	2200      	movs	r2, #0
 80034bc:	f006 fbc6 	bl	8009c4c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80034c0:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <start_SET_RTS_TASK+0x704>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f005 ff9f 	bl	8009408 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	f040 80a1 	bne.w	8003614 <start_SET_RTS_TASK+0x6e8>
						{
							QUEUE_NEW_RTC_t.Min = QUEUE_RTC_VAL_t.new_value;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
							setet_type++;
 80034da:	4b56      	ldr	r3, [pc, #344]	; (8003634 <start_SET_RTS_TASK+0x708>)
 80034dc:	f993 3000 	ldrsb.w	r3, [r3]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	b25a      	sxtb	r2, r3
 80034e8:	4b52      	ldr	r3, [pc, #328]	; (8003634 <start_SET_RTS_TASK+0x708>)
 80034ea:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 80034ec:	2301      	movs	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
						}
						break;
 80034f0:	e090      	b.n	8003614 <start_SET_RTS_TASK+0x6e8>


					case 7:
						// set Seconds
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	3304      	adds	r3, #4
 80034f8:	2214      	movs	r2, #20
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f009 fd2b 	bl	800cf58 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Second: ");			// Set the setings value
 8003502:	f107 030c 	add.w	r3, r7, #12
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f7fc fe21 	bl	8000150 <strlen>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	f107 030c 	add.w	r3, r7, #12
 8003516:	3304      	adds	r3, #4
 8003518:	4413      	add	r3, r2
 800351a:	4947      	ldr	r1, [pc, #284]	; (8003638 <start_SET_RTS_TASK+0x70c>)
 800351c:	461a      	mov	r2, r3
 800351e:	460b      	mov	r3, r1
 8003520:	cb03      	ldmia	r3!, {r0, r1}
 8003522:	6010      	str	r0, [r2, #0]
 8003524:	6051      	str	r1, [r2, #4]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	7213      	strb	r3, [r2, #8]

						if(pressed_key == 2)
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d110      	bne.n	8003552 <start_SET_RTS_TASK+0x626>
						{
							second--;
 8003530:	4b42      	ldr	r3, [pc, #264]	; (800363c <start_SET_RTS_TASK+0x710>)
 8003532:	f993 3000 	ldrsb.w	r3, [r3]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	b25a      	sxtb	r2, r3
 800353e:	4b3f      	ldr	r3, [pc, #252]	; (800363c <start_SET_RTS_TASK+0x710>)
 8003540:	701a      	strb	r2, [r3, #0]
							if(second < 0)
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <start_SET_RTS_TASK+0x710>)
 8003544:	f993 3000 	ldrsb.w	r3, [r3]
 8003548:	2b00      	cmp	r3, #0
 800354a:	da02      	bge.n	8003552 <start_SET_RTS_TASK+0x626>
							{
								second = 59;
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <start_SET_RTS_TASK+0x710>)
 800354e:	223b      	movs	r2, #59	; 0x3b
 8003550:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d110      	bne.n	800357a <start_SET_RTS_TASK+0x64e>
						{
							second++;
 8003558:	4b38      	ldr	r3, [pc, #224]	; (800363c <start_SET_RTS_TASK+0x710>)
 800355a:	f993 3000 	ldrsb.w	r3, [r3]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3301      	adds	r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	b25a      	sxtb	r2, r3
 8003566:	4b35      	ldr	r3, [pc, #212]	; (800363c <start_SET_RTS_TASK+0x710>)
 8003568:	701a      	strb	r2, [r3, #0]
							if(second > 59)
 800356a:	4b34      	ldr	r3, [pc, #208]	; (800363c <start_SET_RTS_TASK+0x710>)
 800356c:	f993 3000 	ldrsb.w	r3, [r3]
 8003570:	2b3b      	cmp	r3, #59	; 0x3b
 8003572:	dd02      	ble.n	800357a <start_SET_RTS_TASK+0x64e>
							{
								second = 0;
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <start_SET_RTS_TASK+0x710>)
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = second;
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <start_SET_RTS_TASK+0x710>)
 800357c:	f993 3000 	ldrsb.w	r3, [r3]
 8003580:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 8003582:	4b2a      	ldr	r3, [pc, #168]	; (800362c <start_SET_RTS_TASK+0x700>)
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	f107 010c 	add.w	r1, r7, #12
 800358a:	2300      	movs	r3, #0
 800358c:	2200      	movs	r2, #0
 800358e:	f006 fb5d 	bl	8009c4c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 8003592:	4b27      	ldr	r3, [pc, #156]	; (8003630 <start_SET_RTS_TASK+0x704>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f005 ff36 	bl	8009408 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 800359c:	897b      	ldrh	r3, [r7, #10]
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d13a      	bne.n	8003618 <start_SET_RTS_TASK+0x6ec>
						{
							QUEUE_NEW_RTC_t.Sec = QUEUE_RTC_VAL_t.new_value;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							setet_type++;
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <start_SET_RTS_TASK+0x708>)
 80035ac:	f993 3000 	ldrsb.w	r3, [r3]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	b25a      	sxtb	r2, r3
 80035b8:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <start_SET_RTS_TASK+0x708>)
 80035ba:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 80035bc:	2301      	movs	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
						}
						break;
 80035c0:	e02a      	b.n	8003618 <start_SET_RTS_TASK+0x6ec>

					case 8:
						//ILI9341_Fill_Screen(BLACK);								// Claan LCD
						xQueueSend(new_rtc_queueHandle, &QUEUE_NEW_RTC_t, 0);		// Send new time and data to rtc task
 80035c2:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <start_SET_RTS_TASK+0x714>)
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80035ca:	2300      	movs	r3, #0
 80035cc:	2200      	movs	r2, #0
 80035ce:	f006 fb3d 	bl	8009c4c <xQueueGenericSend>

						osThreadResume(RTC_DS3231_TaskHandle);					// Start RTS task
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <start_SET_RTS_TASK+0x718>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f005 fc6a 	bl	8008eb0 <osThreadResume>
						osThreadResume(BPE280_TaskHandle);						// Start BME280 tasl
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <start_SET_RTS_TASK+0x71c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f005 fc65 	bl	8008eb0 <osThreadResume>

						print_first_time_on_lcd_flag = true;						// Print new time and data on LCD
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <start_SET_RTS_TASK+0x720>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]

						setet_type++;												// Exit from switch
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <start_SET_RTS_TASK+0x708>)
 80035ee:	f993 3000 	ldrsb.w	r3, [r3]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3301      	adds	r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	b25a      	sxtb	r2, r3
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <start_SET_RTS_TASK+0x708>)
 80035fc:	701a      	strb	r2, [r3, #0]


						break;
 80035fe:	e00c      	b.n	800361a <start_SET_RTS_TASK+0x6ee>
						break;
 8003600:	bf00      	nop
 8003602:	e00a      	b.n	800361a <start_SET_RTS_TASK+0x6ee>
						break;
 8003604:	bf00      	nop
 8003606:	e008      	b.n	800361a <start_SET_RTS_TASK+0x6ee>
						break;
 8003608:	bf00      	nop
 800360a:	e006      	b.n	800361a <start_SET_RTS_TASK+0x6ee>
						break;
 800360c:	bf00      	nop
 800360e:	e004      	b.n	800361a <start_SET_RTS_TASK+0x6ee>
						break;
 8003610:	bf00      	nop
 8003612:	e002      	b.n	800361a <start_SET_RTS_TASK+0x6ee>
						break;
 8003614:	bf00      	nop
 8003616:	e000      	b.n	800361a <start_SET_RTS_TASK+0x6ee>
						break;
 8003618:	bf00      	nop
				}
				osDelay(200);
 800361a:	20c8      	movs	r0, #200	; 0xc8
 800361c:	f005 fc7c 	bl	8008f18 <osDelay>
	{
 8003620:	e488      	b.n	8002f34 <start_SET_RTS_TASK+0x8>
 8003622:	bf00      	nop
 8003624:	0800da4c 	.word	0x0800da4c
 8003628:	2000000c 	.word	0x2000000c
 800362c:	20000a90 	.word	0x20000a90
 8003630:	20000b18 	.word	0x20000b18
 8003634:	20000006 	.word	0x20000006
 8003638:	0800da58 	.word	0x0800da58
 800363c:	2000000d 	.word	0x2000000d
 8003640:	20000a2c 	.word	0x20000a2c
 8003644:	20000424 	.word	0x20000424
 8003648:	20000428 	.word	0x20000428
 800364c:	20000004 	.word	0x20000004

08003650 <start_UART_USB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_UART_USB_Task */
void start_UART_USB_Task(void *argument)
{
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8003656:	af00      	add	r7, sp, #0
 8003658:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800365c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003660:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN start_UART_USB_Task */
  /* Infinite loop */
  for(;;)
  {
	  char str_end_of_line[3] = {'\r','\n'};
 8003662:	4a8e      	ldr	r2, [pc, #568]	; (800389c <start_UART_USB_Task+0x24c>)
 8003664:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	4611      	mov	r1, r2
 800366c:	8019      	strh	r1, [r3, #0]
 800366e:	3302      	adds	r3, #2
 8003670:	0c12      	lsrs	r2, r2, #16
 8003672:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003674:	232d      	movs	r3, #45	; 0x2d
 8003676:	f887 32bf 	strb.w	r3, [r7, #703]	; 0x2bf
	  char buff[10] = {0};
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8003680:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 800368a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800368e:	f44f 7219 	mov.w	r2, #612	; 0x264
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f009 fc5f 	bl	800cf58 <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 800369a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc fd56 	bl	8000150 <strlen>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036ac:	4413      	add	r3, r2
 80036ae:	4a7c      	ldr	r2, [pc, #496]	; (80038a0 <start_UART_USB_Task+0x250>)
 80036b0:	461d      	mov	r5, r3
 80036b2:	4614      	mov	r4, r2
 80036b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b6:	6028      	str	r0, [r5, #0]
 80036b8:	6069      	str	r1, [r5, #4]
 80036ba:	60aa      	str	r2, [r5, #8]
 80036bc:	60eb      	str	r3, [r5, #12]
 80036be:	cc03      	ldmia	r4!, {r0, r1}
 80036c0:	6128      	str	r0, [r5, #16]
 80036c2:	6169      	str	r1, [r5, #20]
 80036c4:	7823      	ldrb	r3, [r4, #0]
 80036c6:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 80036c8:	f009 fb2e 	bl	800cd28 <xPortGetFreeHeapSize>
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b74      	ldr	r3, [pc, #464]	; (80038a4 <start_UART_USB_Task+0x254>)
 80036d2:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 80036d4:	4b73      	ldr	r3, [pc, #460]	; (80038a4 <start_UART_USB_Task+0x254>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f507 712c 	add.w	r1, r7, #688	; 0x2b0
 80036dc:	220a      	movs	r2, #10
 80036de:	4618      	mov	r0, r3
 80036e0:	f009 fc28 	bl	800cf34 <itoa>
	  strcat(msg.Buf, buff);
 80036e4:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 80036e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f009 fcfe 	bl	800d0f0 <strcat>
	  strcat(msg.Buf, str_end_of_line);
 80036f4:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 80036f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f009 fcf6 	bl	800d0f0 <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8003704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc fd21 	bl	8000150 <strlen>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003716:	4413      	add	r3, r2
 8003718:	4a63      	ldr	r2, [pc, #396]	; (80038a8 <start_UART_USB_Task+0x258>)
 800371a:	4614      	mov	r4, r2
 800371c:	469c      	mov	ip, r3
 800371e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003722:	4665      	mov	r5, ip
 8003724:	4626      	mov	r6, r4
 8003726:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003728:	6028      	str	r0, [r5, #0]
 800372a:	6069      	str	r1, [r5, #4]
 800372c:	60aa      	str	r2, [r5, #8]
 800372e:	60eb      	str	r3, [r5, #12]
 8003730:	3410      	adds	r4, #16
 8003732:	f10c 0c10 	add.w	ip, ip, #16
 8003736:	4574      	cmp	r4, lr
 8003738:	d1f3      	bne.n	8003722 <start_UART_USB_Task+0xd2>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 800373a:	485c      	ldr	r0, [pc, #368]	; (80038ac <start_UART_USB_Task+0x25c>)
 800373c:	f008 fb52 	bl	800bde4 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  while(msg.Buf[buffer_size] != '\0')
 8003746:	e004      	b.n	8003752 <start_UART_USB_Task+0x102>
	  {
		  buffer_size ++;
 8003748:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 800374c:	3301      	adds	r3, #1
 800374e:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  while(msg.Buf[buffer_size] != '\0')
 8003752:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 8003756:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 800375a:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f1      	bne.n	8003748 <start_UART_USB_Task+0xf8>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8003770:	e013      	b.n	800379a <start_UART_USB_Task+0x14a>
	  {
		  // add data to queue
		  msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003772:	f8b7 22c6 	ldrh.w	r2, [r7, #710]	; 0x2c6
 8003776:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800377a:	4413      	add	r3, r2
 800377c:	494b      	ldr	r1, [pc, #300]	; (80038ac <start_UART_USB_Task+0x25c>)
 800377e:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8003782:	440a      	add	r2, r1
 8003784:	7811      	ldrb	r1, [r2, #0]
 8003786:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 800378a:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 800378e:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003790:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8003794:	3301      	adds	r3, #1
 8003796:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 800379a:	4a44      	ldr	r2, [pc, #272]	; (80038ac <start_UART_USB_Task+0x25c>)
 800379c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80037a0:	4413      	add	r3, r2
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e4      	bne.n	8003772 <start_UART_USB_Task+0x122>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 80037a8:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <start_UART_USB_Task+0x260>)
 80037aa:	f507 7425 	add.w	r4, r7, #660	; 0x294
 80037ae:	461d      	mov	r5, r3
 80037b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037b8:	c403      	stmia	r4!, {r0, r1}
 80037ba:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 80037bc:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80037c0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80037c4:	4a3b      	ldr	r2, [pc, #236]	; (80038b4 <start_UART_USB_Task+0x264>)
 80037c6:	461c      	mov	r4, r3
 80037c8:	4615      	mov	r5, r2
 80037ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80037d6:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 80037da:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80037de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f009 fc83 	bl	800d0f0 <strcat>
	  strcat(msg.Buf, str_head_2);
 80037ea:	f107 0208 	add.w	r2, r7, #8
 80037ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f009 fc7b 	bl	800d0f0 <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 80037fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037fe:	2100      	movs	r1, #0
 8003800:	482a      	ldr	r0, [pc, #168]	; (80038ac <start_UART_USB_Task+0x25c>)
 8003802:	f009 fba9 	bl	800cf58 <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8003806:	4829      	ldr	r0, [pc, #164]	; (80038ac <start_UART_USB_Task+0x25c>)
 8003808:	f008 fb84 	bl	800bf14 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 800380c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8003810:	b29a      	uxth	r2, r3
 8003812:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 8003816:	4413      	add	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	3340      	adds	r3, #64	; 0x40
 800381c:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8003826:	e013      	b.n	8003850 <start_UART_USB_Task+0x200>
	  {
		  // add data to queue
		  msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003828:	f8b7 22c6 	ldrh.w	r2, [r7, #710]	; 0x2c6
 800382c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8003830:	4413      	add	r3, r2
 8003832:	491e      	ldr	r1, [pc, #120]	; (80038ac <start_UART_USB_Task+0x25c>)
 8003834:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8003838:	440a      	add	r2, r1
 800383a:	7811      	ldrb	r1, [r2, #0]
 800383c:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8003840:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8003844:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003846:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800384a:	3301      	adds	r3, #1
 800384c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8003850:	4a16      	ldr	r2, [pc, #88]	; (80038ac <start_UART_USB_Task+0x25c>)
 8003852:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8003856:	4413      	add	r3, r2
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e4      	bne.n	8003828 <start_UART_USB_Task+0x1d8>
	  }
	  //strcat(msg.Buf, "#########################################\n\r");

	  buffer_size = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  while(msg.Buf[buffer_size] != '\0')
 8003864:	e004      	b.n	8003870 <start_UART_USB_Task+0x220>
	  {
		  buffer_size ++;
 8003866:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 800386a:	3301      	adds	r3, #1
 800386c:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  while(msg.Buf[buffer_size] != '\0')
 8003870:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 8003874:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8003878:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 800387c:	5cd3      	ldrb	r3, [r2, r3]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f1      	bne.n	8003866 <start_UART_USB_Task+0x216>
	  }
	  // Transmit over virtual comport
	  HAL_UART_Transmit_IT( &huart1, msg.Buf, buffer_size);
 8003882:	f8b7 22c6 	ldrh.w	r2, [r7, #710]	; 0x2c6
 8003886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800388a:	4619      	mov	r1, r3
 800388c:	480a      	ldr	r0, [pc, #40]	; (80038b8 <start_UART_USB_Task+0x268>)
 800388e:	f004 fdd8 	bl	8008442 <HAL_UART_Transmit_IT>

	  osDelay(3000);
 8003892:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003896:	f005 fb3f 	bl	8008f18 <osDelay>
  {
 800389a:	e6e2      	b.n	8003662 <start_UART_USB_Task+0x12>
 800389c:	0800dab4 	.word	0x0800dab4
 80038a0:	0800da64 	.word	0x0800da64
 80038a4:	2000029c 	.word	0x2000029c
 80038a8:	0800da80 	.word	0x0800da80
 80038ac:	200000a8 	.word	0x200000a8
 80038b0:	0800dab8 	.word	0x0800dab8
 80038b4:	0800dad4 	.word	0x0800dad4
 80038b8:	200003dc 	.word	0x200003dc

080038bc <start_LCD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_LCD_Task */
void start_LCD_Task(void *argument)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b0ba      	sub	sp, #232	; 0xe8
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	QUEUE_BME280 QUEUE_BME280_t;
	QUEUE_RTC QUEUE_RTC_t;
	QUEUE_RTC_VAL QUEUE_RTC_VAL_t;

	char str_hour[4] = {0};
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char str_minute[4] = {0};
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	char str_msecond[4] = {0};
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char str_buf[6] = {0};
 80038d6:	2300      	movs	r3, #0
 80038d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038dc:	2300      	movs	r3, #0
 80038de:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	char str_date[15] = {0};
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80038e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	f8c3 2007 	str.w	r2, [r3, #7]
	char str_time_buf[10] = {0};
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	809a      	strh	r2, [r3, #4]

	bool two_point = true;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	ILI9341_Reset();
 800390c:	f7fd fadc 	bl	8000ec8 <ILI9341_Reset>
	ILI9341_Init();
 8003910:	f7fd fb58 	bl	8000fc4 <ILI9341_Init>
	ILI9341_Fill_Screen(BLACK);
 8003914:	2000      	movs	r0, #0
 8003916:	f7fd fd03 	bl	8001320 <ILI9341_Fill_Screen>

	//ILI9341_Draw_Image(snow_tiger, SCREEN_HORIZONTAL_2);

	osDelay(1000);
 800391a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800391e:	f005 fafb 	bl	8008f18 <osDelay>

	// Draw static lines
	ILI9341_Draw_Hollow_Rectangle_Coord(0, 0, 319, 150, BLUE);
 8003922:	231f      	movs	r3, #31
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2396      	movs	r3, #150	; 0x96
 8003928:	f240 123f 	movw	r2, #319	; 0x13f
 800392c:	2100      	movs	r1, #0
 800392e:	2000      	movs	r0, #0
 8003930:	f7fd f8cc 	bl	8000acc <ILI9341_Draw_Hollow_Rectangle_Coord>

	for(;;)
	{

		if(osSemaphoreAcquire(LCD_SemHandle, 10) == osOK)
 8003934:	4bd8      	ldr	r3, [pc, #864]	; (8003c98 <start_LCD_Task+0x3dc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	210a      	movs	r1, #10
 800393a:	4618      	mov	r0, r3
 800393c:	f005 fcfe 	bl	800933c <osSemaphoreAcquire>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 8545 	bne.w	80043d2 <start_LCD_Task+0xb16>
		{
			// If new time/data is selecting
			if((xQueueReceive(QUEUE_RTC_VALHandle , &QUEUE_RTC_VAL_t, 0)) == pdTRUE)
 8003948:	4bd4      	ldr	r3, [pc, #848]	; (8003c9c <start_LCD_Task+0x3e0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003950:	2200      	movs	r2, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f006 fb9e 	bl	800a094 <xQueueReceive>
 8003958:	4603      	mov	r3, r0
 800395a:	2b01      	cmp	r3, #1
 800395c:	d128      	bne.n	80039b0 <start_LCD_Task+0xf4>
			{
				ILI9341_Fill_Screen(BLACK);
 800395e:	2000      	movs	r0, #0
 8003960:	f7fd fcde 	bl	8001320 <ILI9341_Fill_Screen>
				char buf[6] = {0};
 8003964:	2300      	movs	r3, #0
 8003966:	67bb      	str	r3, [r7, #120]	; 0x78
 8003968:	2300      	movs	r3, #0
 800396a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
				// Convert QUEUE_RTC_VAL_t.new_value into strint
				sprintf(buf, "%d", QUEUE_RTC_VAL_t.new_value);
 800396e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003972:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003976:	49ca      	ldr	r1, [pc, #808]	; (8003ca0 <start_LCD_Task+0x3e4>)
 8003978:	4618      	mov	r0, r3
 800397a:	f009 fb99 	bl	800d0b0 <siprintf>
				ILI9341_Draw_Text(QUEUE_RTC_VAL_t.name, 10, 100, YELLOW, 2, BLACK);
 800397e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003982:	1d18      	adds	r0, r3, #4
 8003984:	2300      	movs	r3, #0
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	2302      	movs	r3, #2
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	210a      	movs	r1, #10
 8003994:	f7fd f9b6 	bl	8000d04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text(buf, 200, 100, YELLOW, 2, BLACK);
 8003998:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800399c:	2300      	movs	r3, #0
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	2302      	movs	r3, #2
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039a8:	2264      	movs	r2, #100	; 0x64
 80039aa:	21c8      	movs	r1, #200	; 0xc8
 80039ac:	f7fd f9aa 	bl	8000d04 <ILI9341_Draw_Text>
			}


			// If data from BME280 is ready print T, H and  P
			// Waiting queue from start_BPE280_Task
			if((xQueueReceive(THPQueueHandle, &QUEUE_BME280_t, 0)) == pdTRUE)
 80039b0:	4bbc      	ldr	r3, [pc, #752]	; (8003ca4 <start_LCD_Task+0x3e8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80039b8:	2200      	movs	r2, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f006 fb6a 	bl	800a094 <xQueueReceive>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	f040 80d6 	bne.w	8003b74 <start_LCD_Task+0x2b8>
			{
				// Print T, H and  P on LCD
				char str_temperature[5] = {0};
 80039c8:	2300      	movs	r3, #0
 80039ca:	673b      	str	r3, [r7, #112]	; 0x70
 80039cc:	2300      	movs	r3, #0
 80039ce:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
				char str_humidity[5] = {0};
 80039d2:	2300      	movs	r3, #0
 80039d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
				char str_preassure[10] = {0};
 80039dc:	2300      	movs	r3, #0
 80039de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	809a      	strh	r2, [r3, #4]

				//int preasure = QUEUE_BME280_t.pressure;
				sprintf(str_temperature, "%d", (int)QUEUE_BME280_t.temperature);
 80039ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fc fe8a 	bl	8000708 <__aeabi_f2iz>
 80039f4:	4602      	mov	r2, r0
 80039f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80039fa:	49a9      	ldr	r1, [pc, #676]	; (8003ca0 <start_LCD_Task+0x3e4>)
 80039fc:	4618      	mov	r0, r3
 80039fe:	f009 fb57 	bl	800d0b0 <siprintf>
				char strthp_buf_t[1] = {0};
 8003a02:	2300      	movs	r3, #0
 8003a04:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				strncat(strthp_buf_t, "T:", 2);
 8003a08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fb9f 	bl	8000150 <strlen>
 8003a12:	4603      	mov	r3, r0
 8003a14:	461a      	mov	r2, r3
 8003a16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4aa2      	ldr	r2, [pc, #648]	; (8003ca8 <start_LCD_Task+0x3ec>)
 8003a1e:	8811      	ldrh	r1, [r2, #0]
 8003a20:	7892      	ldrb	r2, [r2, #2]
 8003a22:	8019      	strh	r1, [r3, #0]
 8003a24:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_t, str_temperature, sizeof(str_temperature));
 8003a26:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003a2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a2e:	2205      	movs	r2, #5
 8003a30:	4618      	mov	r0, r3
 8003a32:	f009 fb74 	bl	800d11e <strncat>
				strncat(strthp_buf_t, " C", 2);
 8003a36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fc fb88 	bl	8000150 <strlen>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a48:	4413      	add	r3, r2
 8003a4a:	4a98      	ldr	r2, [pc, #608]	; (8003cac <start_LCD_Task+0x3f0>)
 8003a4c:	8811      	ldrh	r1, [r2, #0]
 8003a4e:	7892      	ldrb	r2, [r2, #2]
 8003a50:	8019      	strh	r1, [r3, #0]
 8003a52:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_t, 10, 160, YELLOW, 2, BLACK);
 8003a54:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a64:	22a0      	movs	r2, #160	; 0xa0
 8003a66:	210a      	movs	r1, #10
 8003a68:	f7fd f94c 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_humidity, "%d", (int)QUEUE_BME280_t.humidity);
 8003a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fc fe49 	bl	8000708 <__aeabi_f2iz>
 8003a76:	4602      	mov	r2, r0
 8003a78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a7c:	4988      	ldr	r1, [pc, #544]	; (8003ca0 <start_LCD_Task+0x3e4>)
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f009 fb16 	bl	800d0b0 <siprintf>
				char strthp_buf_h[10] = {0};
 8003a84:	2300      	movs	r3, #0
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	809a      	strh	r2, [r3, #4]
				strncat(strthp_buf_h, "H:", 2);
 8003a92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fb5a 	bl	8000150 <strlen>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4a82      	ldr	r2, [pc, #520]	; (8003cb0 <start_LCD_Task+0x3f4>)
 8003aa8:	8811      	ldrh	r1, [r2, #0]
 8003aaa:	7892      	ldrb	r2, [r2, #2]
 8003aac:	8019      	strh	r1, [r3, #0]
 8003aae:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_h, str_humidity, sizeof(str_humidity));
 8003ab0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003ab4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ab8:	2205      	movs	r2, #5
 8003aba:	4618      	mov	r0, r3
 8003abc:	f009 fb2f 	bl	800d11e <strncat>
				strncat(strthp_buf_h, " %", 2);
 8003ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fc fb43 	bl	8000150 <strlen>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a77      	ldr	r2, [pc, #476]	; (8003cb4 <start_LCD_Task+0x3f8>)
 8003ad6:	8811      	ldrh	r1, [r2, #0]
 8003ad8:	7892      	ldrb	r2, [r2, #2]
 8003ada:	8019      	strh	r1, [r3, #0]
 8003adc:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_h, 10, 180, YELLOW, 2, BLACK);
 8003ade:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003aee:	22b4      	movs	r2, #180	; 0xb4
 8003af0:	210a      	movs	r1, #10
 8003af2:	f7fd f907 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_preassure, "%d", (int)QUEUE_BME280_t.pressure);
 8003af6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fc fe04 	bl	8000708 <__aeabi_f2iz>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b06:	4966      	ldr	r1, [pc, #408]	; (8003ca0 <start_LCD_Task+0x3e4>)
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f009 fad1 	bl	800d0b0 <siprintf>
				char strthp_buf_p[17] = {0};
 8003b0e:	2300      	movs	r3, #0
 8003b10:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	731a      	strb	r2, [r3, #12]
				strncat(strthp_buf_p, "P:", 2);
 8003b20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fc fb13 	bl	8000150 <strlen>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b32:	4413      	add	r3, r2
 8003b34:	4a60      	ldr	r2, [pc, #384]	; (8003cb8 <start_LCD_Task+0x3fc>)
 8003b36:	8811      	ldrh	r1, [r2, #0]
 8003b38:	7892      	ldrb	r2, [r2, #2]
 8003b3a:	8019      	strh	r1, [r3, #0]
 8003b3c:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_p, str_preassure, sizeof(str_preassure));
 8003b3e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003b42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b46:	220a      	movs	r2, #10
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f009 fae8 	bl	800d11e <strncat>
				strncat(strthp_buf_p, " mmRh", 4);
 8003b4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b52:	2204      	movs	r2, #4
 8003b54:	4959      	ldr	r1, [pc, #356]	; (8003cbc <start_LCD_Task+0x400>)
 8003b56:	4618      	mov	r0, r3
 8003b58:	f009 fae1 	bl	800d11e <strncat>
				ILI9341_Draw_Text(strthp_buf_p, 10, 200, YELLOW, 2, BLACK);
 8003b5c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003b60:	2300      	movs	r3, #0
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	2302      	movs	r3, #2
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b6c:	22c8      	movs	r2, #200	; 0xc8
 8003b6e:	210a      	movs	r1, #10
 8003b70:	f7fd f8c8 	bl	8000d04 <ILI9341_Draw_Text>



			// If data from start_RTC_DS3231_
			// Waiting queue from start_RTC_DS3231_Task
			if((xQueueReceive(rtc_queueHandle, &QUEUE_RTC_t, 0) == pdPASS))
 8003b74:	4b52      	ldr	r3, [pc, #328]	; (8003cc0 <start_LCD_Task+0x404>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f006 fa88 	bl	800a094 <xQueueReceive>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	f040 8423 	bne.w	80043d2 <start_LCD_Task+0xb16>
			{
				if((print_first_time_on_lcd_flag == true) )				// If print data firsttime
 8003b8c:	4b4d      	ldr	r3, [pc, #308]	; (8003cc4 <start_LCD_Task+0x408>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 820a 	beq.w	8003faa <start_LCD_Task+0x6ee>
				{
//					ILI9341_Fill_Screen(BLACK);
//
//					ILI9341_Draw_Hollow_Rectangle_Coord(0, 0, 319, 150, BLUE);

					sprintf(str_hour, "%d", QUEUE_RTC_t.Hour);
 8003b96:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ba0:	493f      	ldr	r1, [pc, #252]	; (8003ca0 <start_LCD_Task+0x3e4>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f009 fa84 	bl	800d0b0 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 8003ba8:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003bac:	461a      	mov	r2, r3
 8003bae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003bb2:	493b      	ldr	r1, [pc, #236]	; (8003ca0 <start_LCD_Task+0x3e4>)
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f009 fa7b 	bl	800d0b0 <siprintf>
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 8003bba:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003bc4:	4936      	ldr	r1, [pc, #216]	; (8003ca0 <start_LCD_Task+0x3e4>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f009 fa72 	bl	800d0b0 <siprintf>

					// Updating hours  on LCD
					if(QUEUE_RTC_t.Hour < 10)
 8003bcc:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003bd0:	2b09      	cmp	r3, #9
 8003bd2:	d828      	bhi.n	8003c26 <start_LCD_Task+0x36a>
					{
						char hour_buff[5] = {0};
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						strncat(hour_buff, "0", 1);
 8003bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fab4 	bl	8000150 <strlen>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bf0:	4413      	add	r3, r2
 8003bf2:	4935      	ldr	r1, [pc, #212]	; (8003cc8 <start_LCD_Task+0x40c>)
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	8013      	strh	r3, [r2, #0]
						strncat(hour_buff, str_hour, sizeof(str_hour));
 8003bfc:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8003c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c04:	2204      	movs	r2, #4
 8003c06:	4618      	mov	r0, r3
 8003c08:	f009 fa89 	bl	800d11e <strncat>
						ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 8003c0c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003c10:	2300      	movs	r3, #0
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	230a      	movs	r3, #10
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	210a      	movs	r1, #10
 8003c20:	f7fd f870 	bl	8000d04 <ILI9341_Draw_Text>
 8003c24:	e00b      	b.n	8003c3e <start_LCD_Task+0x382>
					}
					else
					{
						ILI9341_Draw_Text(str_hour, 10, 1, GREEN, 10, BLACK);
 8003c26:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	230a      	movs	r3, #10
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c36:	2201      	movs	r2, #1
 8003c38:	210a      	movs	r1, #10
 8003c3a:	f7fd f863 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Updating minutes on LCD
					if(QUEUE_RTC_t.Min < 10)
 8003c3e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003c42:	2b09      	cmp	r3, #9
 8003c44:	d842      	bhi.n	8003ccc <start_LCD_Task+0x410>
					{
						char min_buff[5] = {0};
 8003c46:	2300      	movs	r3, #0
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						strncat(min_buff, "0", 1);
 8003c50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fa7b 	bl	8000150 <strlen>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c62:	4413      	add	r3, r2
 8003c64:	4918      	ldr	r1, [pc, #96]	; (8003cc8 <start_LCD_Task+0x40c>)
 8003c66:	461a      	mov	r2, r3
 8003c68:	460b      	mov	r3, r1
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	8013      	strh	r3, [r2, #0]
						strncat(min_buff, str_minute, sizeof(str_minute));
 8003c6e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c76:	2204      	movs	r2, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f009 fa50 	bl	800d11e <strncat>
						ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 8003c7e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003c82:	2300      	movs	r3, #0
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	230a      	movs	r3, #10
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c8e:	2201      	movs	r2, #1
 8003c90:	21c3      	movs	r1, #195	; 0xc3
 8003c92:	f7fd f837 	bl	8000d04 <ILI9341_Draw_Text>
 8003c96:	e025      	b.n	8003ce4 <start_LCD_Task+0x428>
 8003c98:	20000b18 	.word	0x20000b18
 8003c9c:	20000a90 	.word	0x20000a90
 8003ca0:	0800dafc 	.word	0x0800dafc
 8003ca4:	2000095c 	.word	0x2000095c
 8003ca8:	0800db00 	.word	0x0800db00
 8003cac:	0800db04 	.word	0x0800db04
 8003cb0:	0800db08 	.word	0x0800db08
 8003cb4:	0800db0c 	.word	0x0800db0c
 8003cb8:	0800db10 	.word	0x0800db10
 8003cbc:	0800db14 	.word	0x0800db14
 8003cc0:	200009c8 	.word	0x200009c8
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	0800db1c 	.word	0x0800db1c
					}
					else
					{
						ILI9341_Draw_Text(str_minute, 195, 1, GREEN, 10, BLACK);
 8003ccc:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cdc:	2201      	movs	r2, #1
 8003cde:	21c3      	movs	r1, #195	; 0xc3
 8003ce0:	f7fd f810 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Updating seconds on LCD
					if(QUEUE_RTC_t.Sec == 0)
 8003ce4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <start_LCD_Task+0x446>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 8003cec:	2300      	movs	r3, #0
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	2306      	movs	r3, #6
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cf8:	2255      	movs	r2, #85	; 0x55
 8003cfa:	21d7      	movs	r1, #215	; 0xd7
 8003cfc:	48d1      	ldr	r0, [pc, #836]	; (8004044 <start_LCD_Task+0x788>)
 8003cfe:	f7fd f801 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 8003d02:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003d06:	2b09      	cmp	r3, #9
 8003d08:	d828      	bhi.n	8003d5c <start_LCD_Task+0x4a0>
					{
						// add '0'
						char second_buff[5] = {0};
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	623b      	str	r3, [r7, #32]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						strncat(second_buff, "0", 1);
 8003d14:	f107 0320 	add.w	r3, r7, #32
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fa19 	bl	8000150 <strlen>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	461a      	mov	r2, r3
 8003d22:	f107 0320 	add.w	r3, r7, #32
 8003d26:	4413      	add	r3, r2
 8003d28:	49c7      	ldr	r1, [pc, #796]	; (8004048 <start_LCD_Task+0x78c>)
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 8003d32:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8003d36:	f107 0320 	add.w	r3, r7, #32
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f009 f9ee 	bl	800d11e <strncat>
						//strncat(str_time_buf, minute_buff, sizeof(minute_buff));
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 8003d42:	f107 0020 	add.w	r0, r7, #32
 8003d46:	2300      	movs	r3, #0
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2306      	movs	r3, #6
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d52:	2255      	movs	r2, #85	; 0x55
 8003d54:	21d7      	movs	r1, #215	; 0xd7
 8003d56:	f7fc ffd5 	bl	8000d04 <ILI9341_Draw_Text>
 8003d5a:	e00b      	b.n	8003d74 <start_LCD_Task+0x4b8>
					}
					else
					{
						ILI9341_Draw_Text(str_msecond, 215, 85, GREEN, 6, BLACK);
 8003d5c:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8003d60:	2300      	movs	r3, #0
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	2306      	movs	r3, #6
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d6c:	2255      	movs	r2, #85	; 0x55
 8003d6e:	21d7      	movs	r1, #215	; 0xd7
 8003d70:	f7fc ffc8 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Draw seconds line
					ILI9341_Draw_Rectangle(10, 81, (5*QUEUE_RTC_t.Sec), 4, GREEN);
 8003d74:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	0092      	lsls	r2, r2, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2304      	movs	r3, #4
 8003d8a:	2151      	movs	r1, #81	; 0x51
 8003d8c:	200a      	movs	r0, #10
 8003d8e:	f7fd fbc9 	bl	8001524 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 8003d92:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d108      	bne.n	8003dac <start_LCD_Task+0x4f0>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2304      	movs	r3, #4
 8003da0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003da4:	2151      	movs	r1, #81	; 0x51
 8003da6:	200a      	movs	r0, #10
 8003da8:	f7fd fbbc 	bl	8001524 <ILI9341_Draw_Rectangle>
					}

					// Updating blink two points on LCD
					if(two_point == true)
 8003dac:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <start_LCD_Task+0x516>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 8003db4:	2300      	movs	r3, #0
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	230a      	movs	r3, #10
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	2187      	movs	r1, #135	; 0x87
 8003dc4:	48a1      	ldr	r0, [pc, #644]	; (800404c <start_LCD_Task+0x790>)
 8003dc6:	f7fc ff9d 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003dd0:	e00d      	b.n	8003dee <start_LCD_Task+0x532>
					}
					else
					{
						ILI9341_Draw_Text(" ", 135, 1, GREEN, 10, BLACK);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dde:	2201      	movs	r2, #1
 8003de0:	2187      	movs	r1, #135	; 0x87
 8003de2:	489b      	ldr	r0, [pc, #620]	; (8004050 <start_LCD_Task+0x794>)
 8003de4:	f7fc ff8e 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
					}

					// Date
					ILI9341_Draw_Text("        ", 10, 86, BLUE, 4, BLACK);
 8003dee:	2300      	movs	r3, #0
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	2304      	movs	r3, #4
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	231f      	movs	r3, #31
 8003df8:	2256      	movs	r2, #86	; 0x56
 8003dfa:	210a      	movs	r1, #10
 8003dfc:	4895      	ldr	r0, [pc, #596]	; (8004054 <start_LCD_Task+0x798>)
 8003dfe:	f7fc ff81 	bl	8000d04 <ILI9341_Draw_Text>
					memset(str_buf, 0 , sizeof(str_buf));
 8003e02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e06:	2206      	movs	r2, #6
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f009 f8a4 	bl	800cf58 <memset>
					sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 8003e10:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8003e14:	461a      	mov	r2, r3
 8003e16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e1a:	498f      	ldr	r1, [pc, #572]	; (8004058 <start_LCD_Task+0x79c>)
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f009 f947 	bl	800d0b0 <siprintf>

					strncat(str_date, ".", 1);
 8003e22:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc f992 	bl	8000150 <strlen>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e34:	4413      	add	r3, r2
 8003e36:	4989      	ldr	r1, [pc, #548]	; (800405c <start_LCD_Task+0x7a0>)
 8003e38:	461a      	mov	r2, r3
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	8013      	strh	r3, [r2, #0]
					sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 8003e40:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8003e44:	461a      	mov	r2, r3
 8003e46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e4a:	4983      	ldr	r1, [pc, #524]	; (8004058 <start_LCD_Task+0x79c>)
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f009 f92f 	bl	800d0b0 <siprintf>
					strncat(str_date, str_buf, sizeof(str_buf));
 8003e52:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8003e56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e5a:	2206      	movs	r2, #6
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f009 f95e 	bl	800d11e <strncat>
					memset(str_buf, 0 , sizeof(str_buf));
 8003e62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e66:	2206      	movs	r2, #6
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f009 f874 	bl	800cf58 <memset>
					sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 8003e70:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8003e74:	461a      	mov	r2, r3
 8003e76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e7a:	4977      	ldr	r1, [pc, #476]	; (8004058 <start_LCD_Task+0x79c>)
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f009 f917 	bl	800d0b0 <siprintf>
					strncat(str_date, ".", 1);
 8003e82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc f962 	bl	8000150 <strlen>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e94:	4413      	add	r3, r2
 8003e96:	4971      	ldr	r1, [pc, #452]	; (800405c <start_LCD_Task+0x7a0>)
 8003e98:	461a      	mov	r2, r3
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	8013      	strh	r3, [r2, #0]
					strncat(str_date, str_buf, sizeof(str_buf));
 8003ea0:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8003ea4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ea8:	2206      	movs	r2, #6
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f009 f937 	bl	800d11e <strncat>
					ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 8003eb0:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	2304      	movs	r3, #4
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	231f      	movs	r3, #31
 8003ebe:	2256      	movs	r2, #86	; 0x56
 8003ec0:	210a      	movs	r1, #10
 8003ec2:	f7fc ff1f 	bl	8000d04 <ILI9341_Draw_Text>

					ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	2302      	movs	r3, #2
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	231f      	movs	r3, #31
 8003ed0:	2278      	movs	r2, #120	; 0x78
 8003ed2:	210a      	movs	r1, #10
 8003ed4:	4862      	ldr	r0, [pc, #392]	; (8004060 <start_LCD_Task+0x7a4>)
 8003ed6:	f7fc ff15 	bl	8000d04 <ILI9341_Draw_Text>

					switch (QUEUE_RTC_t.DaysOfWeek)
 8003eda:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	2b06      	cmp	r3, #6
 8003ee2:	d85e      	bhi.n	8003fa2 <start_LCD_Task+0x6e6>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <start_LCD_Task+0x630>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f09 	.word	0x08003f09
 8003ef0:	08003f1f 	.word	0x08003f1f
 8003ef4:	08003f35 	.word	0x08003f35
 8003ef8:	08003f4b 	.word	0x08003f4b
 8003efc:	08003f61 	.word	0x08003f61
 8003f00:	08003f77 	.word	0x08003f77
 8003f04:	08003f8d 	.word	0x08003f8d
					{
						case 1:
							ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 8003f08:	2300      	movs	r3, #0
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	231f      	movs	r3, #31
 8003f12:	2278      	movs	r2, #120	; 0x78
 8003f14:	210a      	movs	r1, #10
 8003f16:	4853      	ldr	r0, [pc, #332]	; (8004064 <start_LCD_Task+0x7a8>)
 8003f18:	f7fc fef4 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f1c:	e041      	b.n	8003fa2 <start_LCD_Task+0x6e6>
						case 2:
							ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2302      	movs	r3, #2
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	231f      	movs	r3, #31
 8003f28:	2278      	movs	r2, #120	; 0x78
 8003f2a:	210a      	movs	r1, #10
 8003f2c:	484e      	ldr	r0, [pc, #312]	; (8004068 <start_LCD_Task+0x7ac>)
 8003f2e:	f7fc fee9 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f32:	e036      	b.n	8003fa2 <start_LCD_Task+0x6e6>
						case 3:
							ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 8003f34:	2300      	movs	r3, #0
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	2302      	movs	r3, #2
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	231f      	movs	r3, #31
 8003f3e:	2278      	movs	r2, #120	; 0x78
 8003f40:	210a      	movs	r1, #10
 8003f42:	484a      	ldr	r0, [pc, #296]	; (800406c <start_LCD_Task+0x7b0>)
 8003f44:	f7fc fede 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f48:	e02b      	b.n	8003fa2 <start_LCD_Task+0x6e6>
						case 4:
							ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	2302      	movs	r3, #2
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	231f      	movs	r3, #31
 8003f54:	2278      	movs	r2, #120	; 0x78
 8003f56:	210a      	movs	r1, #10
 8003f58:	4845      	ldr	r0, [pc, #276]	; (8004070 <start_LCD_Task+0x7b4>)
 8003f5a:	f7fc fed3 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f5e:	e020      	b.n	8003fa2 <start_LCD_Task+0x6e6>
						case 5:
							ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 8003f60:	2300      	movs	r3, #0
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	2302      	movs	r3, #2
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	231f      	movs	r3, #31
 8003f6a:	2278      	movs	r2, #120	; 0x78
 8003f6c:	210a      	movs	r1, #10
 8003f6e:	4841      	ldr	r0, [pc, #260]	; (8004074 <start_LCD_Task+0x7b8>)
 8003f70:	f7fc fec8 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f74:	e015      	b.n	8003fa2 <start_LCD_Task+0x6e6>
						case 6:
							ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 8003f76:	2300      	movs	r3, #0
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	231f      	movs	r3, #31
 8003f80:	2278      	movs	r2, #120	; 0x78
 8003f82:	210a      	movs	r1, #10
 8003f84:	483c      	ldr	r0, [pc, #240]	; (8004078 <start_LCD_Task+0x7bc>)
 8003f86:	f7fc febd 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f8a:	e00a      	b.n	8003fa2 <start_LCD_Task+0x6e6>
						case 7:
							ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	2302      	movs	r3, #2
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	231f      	movs	r3, #31
 8003f96:	2278      	movs	r2, #120	; 0x78
 8003f98:	210a      	movs	r1, #10
 8003f9a:	4838      	ldr	r0, [pc, #224]	; (800407c <start_LCD_Task+0x7c0>)
 8003f9c:	f7fc feb2 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003fa0:	bf00      	nop
					}

					print_first_time_on_lcd_flag = false;
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <start_LCD_Task+0x7c4>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e4c4      	b.n	8003934 <start_LCD_Task+0x78>

				}
				else
				{

					sprintf(str_hour, "%d", QUEUE_RTC_t.Hour);
 8003faa:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003fb4:	4928      	ldr	r1, [pc, #160]	; (8004058 <start_LCD_Task+0x79c>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f009 f87a 	bl	800d0b0 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 8003fbc:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003fc6:	4924      	ldr	r1, [pc, #144]	; (8004058 <start_LCD_Task+0x79c>)
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f009 f871 	bl	800d0b0 <siprintf>
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 8003fce:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003fd8:	491f      	ldr	r1, [pc, #124]	; (8004058 <start_LCD_Task+0x79c>)
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f009 f868 	bl	800d0b0 <siprintf>

					// Updating hours and minutes on LCD
					if(QUEUE_RTC_t.Sec == 0)
 8003fe0:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 8091 	bne.w	800410c <start_LCD_Task+0x850>
					{
						if(QUEUE_RTC_t.Min < 10)
 8003fea:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003fee:	2b09      	cmp	r3, #9
 8003ff0:	d848      	bhi.n	8004084 <start_LCD_Task+0x7c8>
						{
							char min_buff[5] = {0};
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	773b      	strb	r3, [r7, #28]
							strncat(min_buff, "0", 1);
 8003ffa:	f107 0318 	add.w	r3, r7, #24
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc f8a6 	bl	8000150 <strlen>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	f107 0318 	add.w	r3, r7, #24
 800400c:	4413      	add	r3, r2
 800400e:	490e      	ldr	r1, [pc, #56]	; (8004048 <start_LCD_Task+0x78c>)
 8004010:	461a      	mov	r2, r3
 8004012:	460b      	mov	r3, r1
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	8013      	strh	r3, [r2, #0]
							strncat(min_buff, str_minute, sizeof(str_minute));
 8004018:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800401c:	f107 0318 	add.w	r3, r7, #24
 8004020:	2204      	movs	r2, #4
 8004022:	4618      	mov	r0, r3
 8004024:	f009 f87b 	bl	800d11e <strncat>
							ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 8004028:	f107 0018 	add.w	r0, r7, #24
 800402c:	2300      	movs	r3, #0
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	230a      	movs	r3, #10
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004038:	2201      	movs	r2, #1
 800403a:	21c3      	movs	r1, #195	; 0xc3
 800403c:	f7fc fe62 	bl	8000d04 <ILI9341_Draw_Text>
 8004040:	e02c      	b.n	800409c <start_LCD_Task+0x7e0>
 8004042:	bf00      	nop
 8004044:	0800db20 	.word	0x0800db20
 8004048:	0800db1c 	.word	0x0800db1c
 800404c:	0800db24 	.word	0x0800db24
 8004050:	0800db28 	.word	0x0800db28
 8004054:	0800db2c 	.word	0x0800db2c
 8004058:	0800dafc 	.word	0x0800dafc
 800405c:	0800db38 	.word	0x0800db38
 8004060:	0800db3c 	.word	0x0800db3c
 8004064:	0800db48 	.word	0x0800db48
 8004068:	0800db50 	.word	0x0800db50
 800406c:	0800db58 	.word	0x0800db58
 8004070:	0800db64 	.word	0x0800db64
 8004074:	0800db70 	.word	0x0800db70
 8004078:	0800db78 	.word	0x0800db78
 800407c:	0800db84 	.word	0x0800db84
 8004080:	20000004 	.word	0x20000004
						}
						else
						{
							ILI9341_Draw_Text(str_minute, 195, 1, GREEN, 10, BLACK);
 8004084:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8004088:	2300      	movs	r3, #0
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	230a      	movs	r3, #10
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004094:	2201      	movs	r2, #1
 8004096:	21c3      	movs	r1, #195	; 0xc3
 8004098:	f7fc fe34 	bl	8000d04 <ILI9341_Draw_Text>
						}

						if(QUEUE_RTC_t.Hour < 10)
 800409c:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	d827      	bhi.n	80040f4 <start_LCD_Task+0x838>
						{
							char hour_buff[5] = {0};
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	2300      	movs	r3, #0
 80040aa:	753b      	strb	r3, [r7, #20]
							strncat(hour_buff, "0", 1);
 80040ac:	f107 0310 	add.w	r3, r7, #16
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc f84d 	bl	8000150 <strlen>
 80040b6:	4603      	mov	r3, r0
 80040b8:	461a      	mov	r2, r3
 80040ba:	f107 0310 	add.w	r3, r7, #16
 80040be:	4413      	add	r3, r2
 80040c0:	49c5      	ldr	r1, [pc, #788]	; (80043d8 <start_LCD_Task+0xb1c>)
 80040c2:	461a      	mov	r2, r3
 80040c4:	460b      	mov	r3, r1
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	8013      	strh	r3, [r2, #0]
							strncat(hour_buff, str_hour, sizeof(str_hour));
 80040ca:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80040ce:	f107 0310 	add.w	r3, r7, #16
 80040d2:	2204      	movs	r2, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f009 f822 	bl	800d11e <strncat>
							ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 80040da:	f107 0010 	add.w	r0, r7, #16
 80040de:	2300      	movs	r3, #0
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	230a      	movs	r3, #10
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040ea:	2201      	movs	r2, #1
 80040ec:	210a      	movs	r1, #10
 80040ee:	f7fc fe09 	bl	8000d04 <ILI9341_Draw_Text>
 80040f2:	e00b      	b.n	800410c <start_LCD_Task+0x850>
						}
						else
						{
							ILI9341_Draw_Text(str_hour, 10, 1, GREEN, 10, BLACK);
 80040f4:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80040f8:	2300      	movs	r3, #0
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	230a      	movs	r3, #10
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004104:	2201      	movs	r2, #1
 8004106:	210a      	movs	r1, #10
 8004108:	f7fc fdfc 	bl	8000d04 <ILI9341_Draw_Text>
						}
					}

					// Updating seconds on LCD
					if(QUEUE_RTC_t.Sec == 0)
 800410c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <start_LCD_Task+0x86e>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 8004114:	2300      	movs	r3, #0
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	2306      	movs	r3, #6
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004120:	2255      	movs	r2, #85	; 0x55
 8004122:	21d7      	movs	r1, #215	; 0xd7
 8004124:	48ad      	ldr	r0, [pc, #692]	; (80043dc <start_LCD_Task+0xb20>)
 8004126:	f7fc fded 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 800412a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800412e:	2b09      	cmp	r3, #9
 8004130:	d827      	bhi.n	8004182 <start_LCD_Task+0x8c6>
					{
						// add '0'
						char second_buff[5] = {0};
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	2300      	movs	r3, #0
 8004138:	733b      	strb	r3, [r7, #12]
						strncat(second_buff, "0", 1);
 800413a:	f107 0308 	add.w	r3, r7, #8
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc f806 	bl	8000150 <strlen>
 8004144:	4603      	mov	r3, r0
 8004146:	461a      	mov	r2, r3
 8004148:	f107 0308 	add.w	r3, r7, #8
 800414c:	4413      	add	r3, r2
 800414e:	49a2      	ldr	r1, [pc, #648]	; (80043d8 <start_LCD_Task+0xb1c>)
 8004150:	461a      	mov	r2, r3
 8004152:	460b      	mov	r3, r1
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 8004158:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800415c:	f107 0308 	add.w	r3, r7, #8
 8004160:	2204      	movs	r2, #4
 8004162:	4618      	mov	r0, r3
 8004164:	f008 ffdb 	bl	800d11e <strncat>
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 8004168:	f107 0008 	add.w	r0, r7, #8
 800416c:	2300      	movs	r3, #0
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	2306      	movs	r3, #6
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004178:	2255      	movs	r2, #85	; 0x55
 800417a:	21d7      	movs	r1, #215	; 0xd7
 800417c:	f7fc fdc2 	bl	8000d04 <ILI9341_Draw_Text>
 8004180:	e00b      	b.n	800419a <start_LCD_Task+0x8de>
					}
					else
					{
						ILI9341_Draw_Text(str_msecond, 215, 85, GREEN, 6, BLACK);
 8004182:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8004186:	2300      	movs	r3, #0
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	2306      	movs	r3, #6
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004192:	2255      	movs	r2, #85	; 0x55
 8004194:	21d7      	movs	r1, #215	; 0xd7
 8004196:	f7fc fdb5 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Draw seconds line
					ILI9341_Draw_Rectangle(10, 81, (5*QUEUE_RTC_t.Sec), 4, GREEN);
 800419a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	0092      	lsls	r2, r2, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2304      	movs	r3, #4
 80041b0:	2151      	movs	r1, #81	; 0x51
 80041b2:	200a      	movs	r0, #10
 80041b4:	f7fd f9b6 	bl	8001524 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 80041b8:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <start_LCD_Task+0x916>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 80041c0:	2300      	movs	r3, #0
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2304      	movs	r3, #4
 80041c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041ca:	2151      	movs	r1, #81	; 0x51
 80041cc:	200a      	movs	r0, #10
 80041ce:	f7fd f9a9 	bl	8001524 <ILI9341_Draw_Rectangle>
					}

					// Updating blink two points on LCD
					if(two_point == true)
 80041d2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <start_LCD_Task+0x93c>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 80041da:	2300      	movs	r3, #0
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	230a      	movs	r3, #10
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041e6:	2201      	movs	r2, #1
 80041e8:	2187      	movs	r1, #135	; 0x87
 80041ea:	487d      	ldr	r0, [pc, #500]	; (80043e0 <start_LCD_Task+0xb24>)
 80041ec:	f7fc fd8a 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80041f6:	e00d      	b.n	8004214 <start_LCD_Task+0x958>
					}
					else
					{
						ILI9341_Draw_Text(" ", 135, 1, GREEN, 10, BLACK);
 80041f8:	2300      	movs	r3, #0
 80041fa:	9301      	str	r3, [sp, #4]
 80041fc:	230a      	movs	r3, #10
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004204:	2201      	movs	r2, #1
 8004206:	2187      	movs	r1, #135	; 0x87
 8004208:	4876      	ldr	r0, [pc, #472]	; (80043e4 <start_LCD_Task+0xb28>)
 800420a:	f7fc fd7b 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
					}

					if(QUEUE_RTC_t.Sec == 0)
 8004214:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 80da 	bne.w	80043d2 <start_LCD_Task+0xb16>
					{
						// Date
						ILI9341_Draw_Text("        ", 10, 86, BLUE, 4, BLACK);
 800421e:	2300      	movs	r3, #0
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	2304      	movs	r3, #4
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	231f      	movs	r3, #31
 8004228:	2256      	movs	r2, #86	; 0x56
 800422a:	210a      	movs	r1, #10
 800422c:	486e      	ldr	r0, [pc, #440]	; (80043e8 <start_LCD_Task+0xb2c>)
 800422e:	f7fc fd69 	bl	8000d04 <ILI9341_Draw_Text>
						memset(str_buf, 0 , sizeof(str_buf));
 8004232:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004236:	2206      	movs	r2, #6
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f008 fe8c 	bl	800cf58 <memset>
						sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 8004240:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8004244:	461a      	mov	r2, r3
 8004246:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800424a:	4968      	ldr	r1, [pc, #416]	; (80043ec <start_LCD_Task+0xb30>)
 800424c:	4618      	mov	r0, r3
 800424e:	f008 ff2f 	bl	800d0b0 <siprintf>

						strncat(str_date, ".", 1);
 8004252:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004256:	4618      	mov	r0, r3
 8004258:	f7fb ff7a 	bl	8000150 <strlen>
 800425c:	4603      	mov	r3, r0
 800425e:	461a      	mov	r2, r3
 8004260:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004264:	4413      	add	r3, r2
 8004266:	4962      	ldr	r1, [pc, #392]	; (80043f0 <start_LCD_Task+0xb34>)
 8004268:	461a      	mov	r2, r3
 800426a:	460b      	mov	r3, r1
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	8013      	strh	r3, [r2, #0]
						sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 8004270:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8004274:	461a      	mov	r2, r3
 8004276:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800427a:	495c      	ldr	r1, [pc, #368]	; (80043ec <start_LCD_Task+0xb30>)
 800427c:	4618      	mov	r0, r3
 800427e:	f008 ff17 	bl	800d0b0 <siprintf>
						strncat(str_date, str_buf, sizeof(str_buf));
 8004282:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8004286:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800428a:	2206      	movs	r2, #6
 800428c:	4618      	mov	r0, r3
 800428e:	f008 ff46 	bl	800d11e <strncat>
						memset(str_buf, 0 , sizeof(str_buf));
 8004292:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004296:	2206      	movs	r2, #6
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f008 fe5c 	bl	800cf58 <memset>
						sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 80042a0:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80042a4:	461a      	mov	r2, r3
 80042a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042aa:	4950      	ldr	r1, [pc, #320]	; (80043ec <start_LCD_Task+0xb30>)
 80042ac:	4618      	mov	r0, r3
 80042ae:	f008 feff 	bl	800d0b0 <siprintf>
						strncat(str_date, ".", 1);
 80042b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fb ff4a 	bl	8000150 <strlen>
 80042bc:	4603      	mov	r3, r0
 80042be:	461a      	mov	r2, r3
 80042c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80042c4:	4413      	add	r3, r2
 80042c6:	494a      	ldr	r1, [pc, #296]	; (80043f0 <start_LCD_Task+0xb34>)
 80042c8:	461a      	mov	r2, r3
 80042ca:	460b      	mov	r3, r1
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	8013      	strh	r3, [r2, #0]
						strncat(str_date, str_buf, sizeof(str_buf));
 80042d0:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80042d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80042d8:	2206      	movs	r2, #6
 80042da:	4618      	mov	r0, r3
 80042dc:	f008 ff1f 	bl	800d11e <strncat>
						ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 80042e0:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80042e4:	2300      	movs	r3, #0
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	2304      	movs	r3, #4
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	231f      	movs	r3, #31
 80042ee:	2256      	movs	r2, #86	; 0x56
 80042f0:	210a      	movs	r1, #10
 80042f2:	f7fc fd07 	bl	8000d04 <ILI9341_Draw_Text>

						ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 80042f6:	2300      	movs	r3, #0
 80042f8:	9301      	str	r3, [sp, #4]
 80042fa:	2302      	movs	r3, #2
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	231f      	movs	r3, #31
 8004300:	2278      	movs	r2, #120	; 0x78
 8004302:	210a      	movs	r1, #10
 8004304:	483b      	ldr	r0, [pc, #236]	; (80043f4 <start_LCD_Task+0xb38>)
 8004306:	f7fc fcfd 	bl	8000d04 <ILI9341_Draw_Text>

						switch (QUEUE_RTC_t.DaysOfWeek)
 800430a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800430e:	3b01      	subs	r3, #1
 8004310:	2b06      	cmp	r3, #6
 8004312:	f63f ab0f 	bhi.w	8003934 <start_LCD_Task+0x78>
 8004316:	a201      	add	r2, pc, #4	; (adr r2, 800431c <start_LCD_Task+0xa60>)
 8004318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431c:	08004339 	.word	0x08004339
 8004320:	0800434f 	.word	0x0800434f
 8004324:	08004365 	.word	0x08004365
 8004328:	0800437b 	.word	0x0800437b
 800432c:	08004391 	.word	0x08004391
 8004330:	080043a7 	.word	0x080043a7
 8004334:	080043bd 	.word	0x080043bd
						{
							case 1:
								ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 8004338:	2300      	movs	r3, #0
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2302      	movs	r3, #2
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	231f      	movs	r3, #31
 8004342:	2278      	movs	r2, #120	; 0x78
 8004344:	210a      	movs	r1, #10
 8004346:	482c      	ldr	r0, [pc, #176]	; (80043f8 <start_LCD_Task+0xb3c>)
 8004348:	f7fc fcdc 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 800434c:	e042      	b.n	80043d4 <start_LCD_Task+0xb18>
							case 2:
								ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 800434e:	2300      	movs	r3, #0
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	2302      	movs	r3, #2
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	231f      	movs	r3, #31
 8004358:	2278      	movs	r2, #120	; 0x78
 800435a:	210a      	movs	r1, #10
 800435c:	4827      	ldr	r0, [pc, #156]	; (80043fc <start_LCD_Task+0xb40>)
 800435e:	f7fc fcd1 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004362:	e037      	b.n	80043d4 <start_LCD_Task+0xb18>
							case 3:
								ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 8004364:	2300      	movs	r3, #0
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	2302      	movs	r3, #2
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	231f      	movs	r3, #31
 800436e:	2278      	movs	r2, #120	; 0x78
 8004370:	210a      	movs	r1, #10
 8004372:	4823      	ldr	r0, [pc, #140]	; (8004400 <start_LCD_Task+0xb44>)
 8004374:	f7fc fcc6 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004378:	e02c      	b.n	80043d4 <start_LCD_Task+0xb18>
							case 4:
								ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 800437a:	2300      	movs	r3, #0
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	2302      	movs	r3, #2
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	231f      	movs	r3, #31
 8004384:	2278      	movs	r2, #120	; 0x78
 8004386:	210a      	movs	r1, #10
 8004388:	481e      	ldr	r0, [pc, #120]	; (8004404 <start_LCD_Task+0xb48>)
 800438a:	f7fc fcbb 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 800438e:	e021      	b.n	80043d4 <start_LCD_Task+0xb18>
							case 5:
								ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 8004390:	2300      	movs	r3, #0
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	2302      	movs	r3, #2
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	231f      	movs	r3, #31
 800439a:	2278      	movs	r2, #120	; 0x78
 800439c:	210a      	movs	r1, #10
 800439e:	481a      	ldr	r0, [pc, #104]	; (8004408 <start_LCD_Task+0xb4c>)
 80043a0:	f7fc fcb0 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80043a4:	e016      	b.n	80043d4 <start_LCD_Task+0xb18>
							case 6:
								ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 80043a6:	2300      	movs	r3, #0
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	2302      	movs	r3, #2
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	231f      	movs	r3, #31
 80043b0:	2278      	movs	r2, #120	; 0x78
 80043b2:	210a      	movs	r1, #10
 80043b4:	4815      	ldr	r0, [pc, #84]	; (800440c <start_LCD_Task+0xb50>)
 80043b6:	f7fc fca5 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80043ba:	e00b      	b.n	80043d4 <start_LCD_Task+0xb18>
							case 7:
								ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 80043bc:	2300      	movs	r3, #0
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	2302      	movs	r3, #2
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	231f      	movs	r3, #31
 80043c6:	2278      	movs	r2, #120	; 0x78
 80043c8:	210a      	movs	r1, #10
 80043ca:	4811      	ldr	r0, [pc, #68]	; (8004410 <start_LCD_Task+0xb54>)
 80043cc:	f7fc fc9a 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80043d0:	e000      	b.n	80043d4 <start_LCD_Task+0xb18>
						}

					}
 80043d2:	bf00      	nop
		if(osSemaphoreAcquire(LCD_SemHandle, 10) == osOK)
 80043d4:	f7ff baae 	b.w	8003934 <start_LCD_Task+0x78>
 80043d8:	0800db1c 	.word	0x0800db1c
 80043dc:	0800db20 	.word	0x0800db20
 80043e0:	0800db24 	.word	0x0800db24
 80043e4:	0800db28 	.word	0x0800db28
 80043e8:	0800db2c 	.word	0x0800db2c
 80043ec:	0800dafc 	.word	0x0800dafc
 80043f0:	0800db38 	.word	0x0800db38
 80043f4:	0800db3c 	.word	0x0800db3c
 80043f8:	0800db48 	.word	0x0800db48
 80043fc:	0800db50 	.word	0x0800db50
 8004400:	0800db58 	.word	0x0800db58
 8004404:	0800db64 	.word	0x0800db64
 8004408:	0800db70 	.word	0x0800db70
 800440c:	0800db78 	.word	0x0800db78
 8004410:	0800db84 	.word	0x0800db84

08004414 <Start_NRF24L01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_NRF24L01 */
void Start_NRF24L01(void *argument)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_NRF24L01 */
  /* Infinite loop */
	int ggg = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {

	  ggg ++;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
    osDelay(100);
 8004426:	2064      	movs	r0, #100	; 0x64
 8004428:	f004 fd76 	bl	8008f18 <osDelay>
	  ggg ++;
 800442c:	e7f8      	b.n	8004420 <Start_NRF24L01+0xc>
	...

08004430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// NEw VERSION
	if (htim->Instance == TIM3)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a50      	ldr	r2, [pc, #320]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f040 8088 	bne.w	8004554 <HAL_TIM_PeriodElapsedCallback+0x124>
	{
		BaseType_t xHigherPriorityTaskWoken;

		uint16_t key_1 = 1;
 8004444:	2301      	movs	r3, #1
 8004446:	827b      	strh	r3, [r7, #18]
		uint16_t key_2 = 2;
 8004448:	2302      	movs	r3, #2
 800444a:	823b      	strh	r3, [r7, #16]
		uint16_t key_3 = 3;
 800444c:	2303      	movs	r3, #3
 800444e:	81fb      	strh	r3, [r7, #14]
		uint16_t key_4 = 4;
 8004450:	2304      	movs	r3, #4
 8004452:	81bb      	strh	r3, [r7, #12]

		if(HAL_GPIO_ReadPin(GPIOA, KEY_1_Pin) == GPIO_PIN_RESET)
 8004454:	2110      	movs	r1, #16
 8004456:	484b      	ldr	r0, [pc, #300]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004458:	f000 fea4 	bl	80051a4 <HAL_GPIO_ReadPin>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d118      	bne.n	8004494 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8004462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004466:	4848      	ldr	r0, [pc, #288]	; (8004588 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004468:	f000 fecb 	bl	8005202 <HAL_GPIO_TogglePin>
			state = true;
 800446c:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 8004472:	4847      	ldr	r0, [pc, #284]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004474:	f003 fc12 	bl	8007c9c <HAL_TIM_Base_Stop_IT>

			if((xQueueSendFromISR( buttonQueueHandle, &key_1, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 8004478:	4b46      	ldr	r3, [pc, #280]	; (8004594 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	f107 0214 	add.w	r2, r7, #20
 8004480:	f107 0112 	add.w	r1, r7, #18
 8004484:	2300      	movs	r3, #0
 8004486:	f005 fcdf 	bl	8009e48 <xQueueGenericSendFromISR>
			{
				// Error
			}
			// Set semaphore
			osSemaphoreRelease(set_rts_val_SemHandle);
 800448a:	4b43      	ldr	r3, [pc, #268]	; (8004598 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f004 ffba 	bl	8009408 <osSemaphoreRelease>
		}

		if(HAL_GPIO_ReadPin(GPIOA, KEY_2_Pin) == GPIO_PIN_RESET)
 8004494:	2108      	movs	r1, #8
 8004496:	483b      	ldr	r0, [pc, #236]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004498:	f000 fe84 	bl	80051a4 <HAL_GPIO_ReadPin>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d118      	bne.n	80044d4 <HAL_TIM_PeriodElapsedCallback+0xa4>
		{
			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80044a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044a6:	4838      	ldr	r0, [pc, #224]	; (8004588 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80044a8:	f000 feab 	bl	8005202 <HAL_GPIO_TogglePin>
			state = true;
 80044ac:	4b37      	ldr	r3, [pc, #220]	; (800458c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 80044b2:	4837      	ldr	r0, [pc, #220]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80044b4:	f003 fbf2 	bl	8007c9c <HAL_TIM_Base_Stop_IT>

			if((xQueueSendFromISR( buttonQueueHandle, &key_2, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 80044b8:	4b36      	ldr	r3, [pc, #216]	; (8004594 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	f107 0214 	add.w	r2, r7, #20
 80044c0:	f107 0110 	add.w	r1, r7, #16
 80044c4:	2300      	movs	r3, #0
 80044c6:	f005 fcbf 	bl	8009e48 <xQueueGenericSendFromISR>
			{
				// Error
			}
			// Set semaphore
			osSemaphoreRelease(set_rts_val_SemHandle);
 80044ca:	4b33      	ldr	r3, [pc, #204]	; (8004598 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f004 ff9a 	bl	8009408 <osSemaphoreRelease>
		}

		if(HAL_GPIO_ReadPin(GPIOA, KEY_3_Pin) == GPIO_PIN_RESET)
 80044d4:	2104      	movs	r1, #4
 80044d6:	482b      	ldr	r0, [pc, #172]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80044d8:	f000 fe64 	bl	80051a4 <HAL_GPIO_ReadPin>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d118      	bne.n	8004514 <HAL_TIM_PeriodElapsedCallback+0xe4>
		{
			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80044e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044e6:	4828      	ldr	r0, [pc, #160]	; (8004588 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80044e8:	f000 fe8b 	bl	8005202 <HAL_GPIO_TogglePin>
			state = true;
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 80044f2:	4827      	ldr	r0, [pc, #156]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80044f4:	f003 fbd2 	bl	8007c9c <HAL_TIM_Base_Stop_IT>

			if((xQueueSendFromISR( buttonQueueHandle, &key_3, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 80044f8:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	f107 0214 	add.w	r2, r7, #20
 8004500:	f107 010e 	add.w	r1, r7, #14
 8004504:	2300      	movs	r3, #0
 8004506:	f005 fc9f 	bl	8009e48 <xQueueGenericSendFromISR>
			{
				// Error
			}
			// Set semaphore
			osSemaphoreRelease(set_rts_val_SemHandle);
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f004 ff7a 	bl	8009408 <osSemaphoreRelease>
		}

		if(HAL_GPIO_ReadPin(GPIOA, KEY_4_Pin) == GPIO_PIN_RESET)
 8004514:	2102      	movs	r1, #2
 8004516:	481b      	ldr	r0, [pc, #108]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004518:	f000 fe44 	bl	80051a4 <HAL_GPIO_ReadPin>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d118      	bne.n	8004554 <HAL_TIM_PeriodElapsedCallback+0x124>
		{
			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8004522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004526:	4818      	ldr	r0, [pc, #96]	; (8004588 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004528:	f000 fe6b 	bl	8005202 <HAL_GPIO_TogglePin>
			state = true;
 800452c:	4b17      	ldr	r3, [pc, #92]	; (800458c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 8004532:	4817      	ldr	r0, [pc, #92]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004534:	f003 fbb2 	bl	8007c9c <HAL_TIM_Base_Stop_IT>

			if((xQueueSendFromISR( buttonQueueHandle, &key_4, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 8004538:	4b16      	ldr	r3, [pc, #88]	; (8004594 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	f107 0214 	add.w	r2, r7, #20
 8004540:	f107 010c 	add.w	r1, r7, #12
 8004544:	2300      	movs	r3, #0
 8004546:	f005 fc7f 	bl	8009e48 <xQueueGenericSendFromISR>
			{
				// Error
			}
			// Set semaphore
			osSemaphoreRelease(set_rts_val_SemHandle);
 800454a:	4b13      	ldr	r3, [pc, #76]	; (8004598 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f004 ff5a 	bl	8009408 <osSemaphoreRelease>
		}
	}

	// Timer for measure how many time task was running.
	if(htim->Instance == TIM2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d104      	bne.n	8004568 <HAL_TIM_PeriodElapsedCallback+0x138>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	4a0d      	ldr	r2, [pc, #52]	; (800459c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004566:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0c      	ldr	r2, [pc, #48]	; (80045a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <HAL_TIM_PeriodElapsedCallback+0x146>
    HAL_IncTick();
 8004572:	f000 fac3 	bl	8004afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004576:	bf00      	nop
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40000400 	.word	0x40000400
 8004584:	40010800 	.word	0x40010800
 8004588:	40011000 	.word	0x40011000
 800458c:	20000005 	.word	0x20000005
 8004590:	20000394 	.word	0x20000394
 8004594:	20000958 	.word	0x20000958
 8004598:	20000b1c 	.word	0x20000b1c
 800459c:	200000a4 	.word	0x200000a4
 80045a0:	40000800 	.word	0x40000800

080045a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045a8:	b672      	cpsid	i
}
 80045aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045ac:	e7fe      	b.n	80045ac <Error_Handler+0x8>
	...

080045b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80045b6:	4b1c      	ldr	r3, [pc, #112]	; (8004628 <HAL_MspInit+0x78>)
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <HAL_MspInit+0x78>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6193      	str	r3, [r2, #24]
 80045c2:	4b19      	ldr	r3, [pc, #100]	; (8004628 <HAL_MspInit+0x78>)
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ce:	4b16      	ldr	r3, [pc, #88]	; (8004628 <HAL_MspInit+0x78>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <HAL_MspInit+0x78>)
 80045d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d8:	61d3      	str	r3, [r2, #28]
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_MspInit+0x78>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045e6:	2200      	movs	r2, #0
 80045e8:	210f      	movs	r1, #15
 80045ea:	f06f 0001 	mvn.w	r0, #1
 80045ee:	f000 fb7a 	bl	8004ce6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80045f2:	2200      	movs	r2, #0
 80045f4:	2105      	movs	r1, #5
 80045f6:	2001      	movs	r0, #1
 80045f8:	f000 fb75 	bl	8004ce6 <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80045fc:	2001      	movs	r0, #1
 80045fe:	f000 fb8e 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <HAL_MspInit+0x7c>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	4a04      	ldr	r2, [pc, #16]	; (800462c <HAL_MspInit+0x7c>)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	40010000 	.word	0x40010000

08004630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	f107 0310 	add.w	r3, r7, #16
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <HAL_I2C_MspInit+0x70>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d123      	bne.n	8004698 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004650:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HAL_I2C_MspInit+0x74>)
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	4a13      	ldr	r2, [pc, #76]	; (80046a4 <HAL_I2C_MspInit+0x74>)
 8004656:	f043 0308 	orr.w	r3, r3, #8
 800465a:	6193      	str	r3, [r2, #24]
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <HAL_I2C_MspInit+0x74>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004668:	23c0      	movs	r3, #192	; 0xc0
 800466a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800466c:	2312      	movs	r3, #18
 800466e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004670:	2303      	movs	r3, #3
 8004672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004674:	f107 0310 	add.w	r3, r7, #16
 8004678:	4619      	mov	r1, r3
 800467a:	480b      	ldr	r0, [pc, #44]	; (80046a8 <HAL_I2C_MspInit+0x78>)
 800467c:	f000 fc0e 	bl	8004e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_I2C_MspInit+0x74>)
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	4a07      	ldr	r2, [pc, #28]	; (80046a4 <HAL_I2C_MspInit+0x74>)
 8004686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800468a:	61d3      	str	r3, [r2, #28]
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_I2C_MspInit+0x74>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004698:	bf00      	nop
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40005400 	.word	0x40005400
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40010c00 	.word	0x40010c00

080046ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b4:	f107 0310 	add.w	r3, r7, #16
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <HAL_SPI_MspInit+0x98>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d137      	bne.n	800473c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <HAL_SPI_MspInit+0x9c>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <HAL_SPI_MspInit+0x9c>)
 80046d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046d6:	6193      	str	r3, [r2, #24]
 80046d8:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_SPI_MspInit+0x9c>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_SPI_MspInit+0x9c>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	4a17      	ldr	r2, [pc, #92]	; (8004748 <HAL_SPI_MspInit+0x9c>)
 80046ea:	f043 0304 	orr.w	r3, r3, #4
 80046ee:	6193      	str	r3, [r2, #24]
 80046f0:	4b15      	ldr	r3, [pc, #84]	; (8004748 <HAL_SPI_MspInit+0x9c>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80046fc:	23a0      	movs	r3, #160	; 0xa0
 80046fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	2302      	movs	r3, #2
 8004702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004704:	2303      	movs	r3, #3
 8004706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004708:	f107 0310 	add.w	r3, r7, #16
 800470c:	4619      	mov	r1, r3
 800470e:	480f      	ldr	r0, [pc, #60]	; (800474c <HAL_SPI_MspInit+0xa0>)
 8004710:	f000 fbc4 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004714:	2340      	movs	r3, #64	; 0x40
 8004716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004720:	f107 0310 	add.w	r3, r7, #16
 8004724:	4619      	mov	r1, r3
 8004726:	4809      	ldr	r0, [pc, #36]	; (800474c <HAL_SPI_MspInit+0xa0>)
 8004728:	f000 fbb8 	bl	8004e9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800472c:	2200      	movs	r2, #0
 800472e:	2105      	movs	r1, #5
 8004730:	2023      	movs	r0, #35	; 0x23
 8004732:	f000 fad8 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004736:	2023      	movs	r0, #35	; 0x23
 8004738:	f000 faf1 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800473c:	bf00      	nop
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40013000 	.word	0x40013000
 8004748:	40021000 	.word	0x40021000
 800474c:	40010800 	.word	0x40010800

08004750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d114      	bne.n	800478c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_TIM_Base_MspInit+0x78>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_TIM_Base_MspInit+0x78>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	61d3      	str	r3, [r2, #28]
 800476e:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <HAL_TIM_Base_MspInit+0x78>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	2105      	movs	r1, #5
 800477e:	201c      	movs	r0, #28
 8004780:	f000 fab1 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004784:	201c      	movs	r0, #28
 8004786:	f000 faca 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800478a:	e018      	b.n	80047be <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <HAL_TIM_Base_MspInit+0x7c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d113      	bne.n	80047be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <HAL_TIM_Base_MspInit+0x78>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <HAL_TIM_Base_MspInit+0x78>)
 800479c:	f043 0302 	orr.w	r3, r3, #2
 80047a0:	61d3      	str	r3, [r2, #28]
 80047a2:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_TIM_Base_MspInit+0x78>)
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	2105      	movs	r1, #5
 80047b2:	201d      	movs	r0, #29
 80047b4:	f000 fa97 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80047b8:	201d      	movs	r0, #29
 80047ba:	f000 fab0 	bl	8004d1e <HAL_NVIC_EnableIRQ>
}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40000400 	.word	0x40000400

080047d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d8:	f107 0310 	add.w	r3, r7, #16
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a20      	ldr	r2, [pc, #128]	; (800486c <HAL_UART_MspInit+0x9c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d139      	bne.n	8004864 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047f0:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <HAL_UART_MspInit+0xa0>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <HAL_UART_MspInit+0xa0>)
 80047f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047fa:	6193      	str	r3, [r2, #24]
 80047fc:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <HAL_UART_MspInit+0xa0>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004808:	4b19      	ldr	r3, [pc, #100]	; (8004870 <HAL_UART_MspInit+0xa0>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	4a18      	ldr	r2, [pc, #96]	; (8004870 <HAL_UART_MspInit+0xa0>)
 800480e:	f043 0304 	orr.w	r3, r3, #4
 8004812:	6193      	str	r3, [r2, #24]
 8004814:	4b16      	ldr	r3, [pc, #88]	; (8004870 <HAL_UART_MspInit+0xa0>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004826:	2302      	movs	r3, #2
 8004828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800482a:	2303      	movs	r3, #3
 800482c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800482e:	f107 0310 	add.w	r3, r7, #16
 8004832:	4619      	mov	r1, r3
 8004834:	480f      	ldr	r0, [pc, #60]	; (8004874 <HAL_UART_MspInit+0xa4>)
 8004836:	f000 fb31 	bl	8004e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800483a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800483e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004848:	f107 0310 	add.w	r3, r7, #16
 800484c:	4619      	mov	r1, r3
 800484e:	4809      	ldr	r0, [pc, #36]	; (8004874 <HAL_UART_MspInit+0xa4>)
 8004850:	f000 fb24 	bl	8004e9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004854:	2200      	movs	r2, #0
 8004856:	2105      	movs	r1, #5
 8004858:	2025      	movs	r0, #37	; 0x25
 800485a:	f000 fa44 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800485e:	2025      	movs	r0, #37	; 0x25
 8004860:	f000 fa5d 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004864:	bf00      	nop
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40013800 	.word	0x40013800
 8004870:	40021000 	.word	0x40021000
 8004874:	40010800 	.word	0x40010800

08004878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	; 0x30
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8004888:	2200      	movs	r2, #0
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	201e      	movs	r0, #30
 800488e:	f000 fa2a 	bl	8004ce6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004892:	201e      	movs	r0, #30
 8004894:	f000 fa43 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004898:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <HAL_InitTick+0xa0>)
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <HAL_InitTick+0xa0>)
 800489e:	f043 0304 	orr.w	r3, r3, #4
 80048a2:	61d3      	str	r3, [r2, #28]
 80048a4:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <HAL_InitTick+0xa0>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048b0:	f107 0210 	add.w	r2, r7, #16
 80048b4:	f107 0314 	add.w	r3, r7, #20
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 fd94 	bl	80073e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80048c0:	f002 fd6a 	bl	8007398 <HAL_RCC_GetPCLK1Freq>
 80048c4:	4603      	mov	r3, r0
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	4a13      	ldr	r2, [pc, #76]	; (800491c <HAL_InitTick+0xa4>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	0c9b      	lsrs	r3, r3, #18
 80048d4:	3b01      	subs	r3, #1
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <HAL_InitTick+0xa8>)
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <HAL_InitTick+0xac>)
 80048dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80048de:	4b10      	ldr	r3, [pc, #64]	; (8004920 <HAL_InitTick+0xa8>)
 80048e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80048e6:	4a0e      	ldr	r2, [pc, #56]	; (8004920 <HAL_InitTick+0xa8>)
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <HAL_InitTick+0xa8>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_InitTick+0xa8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80048f8:	4809      	ldr	r0, [pc, #36]	; (8004920 <HAL_InitTick+0xa8>)
 80048fa:	f003 f92d 	bl	8007b58 <HAL_TIM_Base_Init>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8004904:	4806      	ldr	r0, [pc, #24]	; (8004920 <HAL_InitTick+0xa8>)
 8004906:	f003 f977 	bl	8007bf8 <HAL_TIM_Base_Start_IT>
 800490a:	4603      	mov	r3, r0
 800490c:	e000      	b.n	8004910 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
}
 8004910:	4618      	mov	r0, r3
 8004912:	3730      	adds	r7, #48	; 0x30
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021000 	.word	0x40021000
 800491c:	431bde83 	.word	0x431bde83
 8004920:	20000b24 	.word	0x20000b24
 8004924:	40000800 	.word	0x40000800

08004928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800492c:	e7fe      	b.n	800492c <NMI_Handler+0x4>

0800492e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004932:	e7fe      	b.n	8004932 <HardFault_Handler+0x4>

08004934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004938:	e7fe      	b.n	8004938 <MemManage_Handler+0x4>

0800493a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800493a:	b480      	push	{r7}
 800493c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800493e:	e7fe      	b.n	800493e <BusFault_Handler+0x4>

08004940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004944:	e7fe      	b.n	8004944 <UsageFault_Handler+0x4>

08004946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004946:	b480      	push	{r7}
 8004948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800494a:	bf00      	nop
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8004956:	f002 f933 	bl	8006bc0 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}

0800495e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_4_Pin);
 8004962:	2002      	movs	r0, #2
 8004964:	f000 fc66 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}

0800496c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_3_Pin);
 8004970:	2004      	movs	r0, #4
 8004972:	f000 fc5f 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}

0800497a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_2_Pin);
 800497e:	2008      	movs	r0, #8
 8004980:	f000 fc58 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004984:	bf00      	nop
 8004986:	bd80      	pop	{r7, pc}

08004988 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_1_Pin);
 800498c:	2010      	movs	r0, #16
 800498e:	f000 fc51 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800499c:	4802      	ldr	r0, [pc, #8]	; (80049a8 <TIM2_IRQHandler+0x10>)
 800499e:	f003 f9ab 	bl	8007cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000034c 	.word	0x2000034c

080049ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049b0:	4802      	ldr	r0, [pc, #8]	; (80049bc <TIM3_IRQHandler+0x10>)
 80049b2:	f003 f9a1 	bl	8007cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000394 	.word	0x20000394

080049c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80049c4:	4802      	ldr	r0, [pc, #8]	; (80049d0 <TIM4_IRQHandler+0x10>)
 80049c6:	f003 f997 	bl	8007cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000b24 	.word	0x20000b24

080049d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80049d8:	4802      	ldr	r0, [pc, #8]	; (80049e4 <SPI1_IRQHandler+0x10>)
 80049da:	f002 ff13 	bl	8007804 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	200002f4 	.word	0x200002f4

080049e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049ec:	4802      	ldr	r0, [pc, #8]	; (80049f8 <USART1_IRQHandler+0x10>)
 80049ee:	f003 fd6d 	bl	80084cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200003dc 	.word	0x200003dc

080049fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERUPT_FROM_RTC_Pin);
 8004a00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a04:	f000 fc16 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a08:	bf00      	nop
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a14:	4a14      	ldr	r2, [pc, #80]	; (8004a68 <_sbrk+0x5c>)
 8004a16:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <_sbrk+0x60>)
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a20:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <_sbrk+0x64>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <_sbrk+0x64>)
 8004a2a:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <_sbrk+0x68>)
 8004a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <_sbrk+0x64>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d207      	bcs.n	8004a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a3c:	f008 fa38 	bl	800ceb0 <__errno>
 8004a40:	4603      	mov	r3, r0
 8004a42:	220c      	movs	r2, #12
 8004a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a4a:	e009      	b.n	8004a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <_sbrk+0x64>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <_sbrk+0x64>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	4a05      	ldr	r2, [pc, #20]	; (8004a70 <_sbrk+0x64>)
 8004a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20005000 	.word	0x20005000
 8004a6c:	00000400 	.word	0x00000400
 8004a70:	20000b6c 	.word	0x20000b6c
 8004a74:	20004030 	.word	0x20004030

08004a78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a84:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a86:	490d      	ldr	r1, [pc, #52]	; (8004abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a88:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a8c:	e002      	b.n	8004a94 <LoopCopyDataInit>

08004a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a92:	3304      	adds	r3, #4

08004a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a98:	d3f9      	bcc.n	8004a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a9c:	4c0a      	ldr	r4, [pc, #40]	; (8004ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aa0:	e001      	b.n	8004aa6 <LoopFillZerobss>

08004aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aa4:	3204      	adds	r2, #4

08004aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aa8:	d3fb      	bcc.n	8004aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004aaa:	f7ff ffe5 	bl	8004a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aae:	f008 fa05 	bl	800cebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ab2:	f7fd fdfd 	bl	80026b0 <main>
  bx lr
 8004ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8004ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004abc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004ac0:	0800e0c8 	.word	0x0800e0c8
  ldr r2, =_sbss
 8004ac4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004ac8:	20004030 	.word	0x20004030

08004acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004acc:	e7fe      	b.n	8004acc <ADC1_2_IRQHandler>
	...

08004ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <HAL_Init+0x28>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a07      	ldr	r2, [pc, #28]	; (8004af8 <HAL_Init+0x28>)
 8004ada:	f043 0310 	orr.w	r3, r3, #16
 8004ade:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ae0:	2003      	movs	r0, #3
 8004ae2:	f000 f8f5 	bl	8004cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ae6:	200f      	movs	r0, #15
 8004ae8:	f7ff fec6 	bl	8004878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004aec:	f7ff fd60 	bl	80045b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40022000 	.word	0x40022000

08004afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_IncTick+0x1c>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_IncTick+0x20>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4a03      	ldr	r2, [pc, #12]	; (8004b1c <HAL_IncTick+0x20>)
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr
 8004b18:	20000018 	.word	0x20000018
 8004b1c:	20000b70 	.word	0x20000b70

08004b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return uwTick;
 8004b24:	4b02      	ldr	r3, [pc, #8]	; (8004b30 <HAL_GetTick+0x10>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr
 8004b30:	20000b70 	.word	0x20000b70

08004b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_GetTick>
 8004b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b4c:	d005      	beq.n	8004b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_Delay+0x44>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b5a:	bf00      	nop
 8004b5c:	f7ff ffe0 	bl	8004b20 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d8f7      	bhi.n	8004b5c <HAL_Delay+0x28>
  {
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000018 	.word	0x20000018

08004b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bae:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	60d3      	str	r3, [r2, #12]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <__NVIC_GetPriorityGrouping+0x18>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	f003 0307 	and.w	r3, r3, #7
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	db0b      	blt.n	8004c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	f003 021f 	and.w	r2, r3, #31
 8004bf8:	4906      	ldr	r1, [pc, #24]	; (8004c14 <__NVIC_EnableIRQ+0x34>)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2001      	movs	r0, #1
 8004c02:	fa00 f202 	lsl.w	r2, r0, r2
 8004c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	e000e100 	.word	0xe000e100

08004c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	db0a      	blt.n	8004c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	490c      	ldr	r1, [pc, #48]	; (8004c64 <__NVIC_SetPriority+0x4c>)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	0112      	lsls	r2, r2, #4
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c40:	e00a      	b.n	8004c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	4908      	ldr	r1, [pc, #32]	; (8004c68 <__NVIC_SetPriority+0x50>)
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	0112      	lsls	r2, r2, #4
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	440b      	add	r3, r1
 8004c56:	761a      	strb	r2, [r3, #24]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	e000e100 	.word	0xe000e100
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f1c3 0307 	rsb	r3, r3, #7
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	bf28      	it	cs
 8004c8a:	2304      	movcs	r3, #4
 8004c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	3304      	adds	r3, #4
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d902      	bls.n	8004c9c <NVIC_EncodePriority+0x30>
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3b03      	subs	r3, #3
 8004c9a:	e000      	b.n	8004c9e <NVIC_EncodePriority+0x32>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	401a      	ands	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbe:	43d9      	mvns	r1, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc4:	4313      	orrs	r3, r2
         );
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3724      	adds	r7, #36	; 0x24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff4f 	bl	8004b7c <__NVIC_SetPriorityGrouping>
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	4603      	mov	r3, r0
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf8:	f7ff ff64 	bl	8004bc4 <__NVIC_GetPriorityGrouping>
 8004cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7ff ffb2 	bl	8004c6c <NVIC_EncodePriority>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff81 	bl	8004c18 <__NVIC_SetPriority>
}
 8004d16:	bf00      	nop
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff57 	bl	8004be0 <__NVIC_EnableIRQ>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d008      	beq.n	8004d62 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2204      	movs	r2, #4
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e020      	b.n	8004da4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 020e 	bic.w	r2, r2, #14
 8004d70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr
	...

08004db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d005      	beq.n	8004dd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2204      	movs	r2, #4
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	e051      	b.n	8004e76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 020e 	bic.w	r2, r2, #14
 8004de0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a22      	ldr	r2, [pc, #136]	; (8004e80 <HAL_DMA_Abort_IT+0xd0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d029      	beq.n	8004e50 <HAL_DMA_Abort_IT+0xa0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <HAL_DMA_Abort_IT+0xd4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d022      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x9c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <HAL_DMA_Abort_IT+0xd8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d01a      	beq.n	8004e46 <HAL_DMA_Abort_IT+0x96>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <HAL_DMA_Abort_IT+0xdc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d012      	beq.n	8004e40 <HAL_DMA_Abort_IT+0x90>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	; (8004e90 <HAL_DMA_Abort_IT+0xe0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00a      	beq.n	8004e3a <HAL_DMA_Abort_IT+0x8a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1a      	ldr	r2, [pc, #104]	; (8004e94 <HAL_DMA_Abort_IT+0xe4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d102      	bne.n	8004e34 <HAL_DMA_Abort_IT+0x84>
 8004e2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e32:	e00e      	b.n	8004e52 <HAL_DMA_Abort_IT+0xa2>
 8004e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e38:	e00b      	b.n	8004e52 <HAL_DMA_Abort_IT+0xa2>
 8004e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e3e:	e008      	b.n	8004e52 <HAL_DMA_Abort_IT+0xa2>
 8004e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e44:	e005      	b.n	8004e52 <HAL_DMA_Abort_IT+0xa2>
 8004e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e4a:	e002      	b.n	8004e52 <HAL_DMA_Abort_IT+0xa2>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	e000      	b.n	8004e52 <HAL_DMA_Abort_IT+0xa2>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4a11      	ldr	r2, [pc, #68]	; (8004e98 <HAL_DMA_Abort_IT+0xe8>)
 8004e54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
    } 
  }
  return status;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40020008 	.word	0x40020008
 8004e84:	4002001c 	.word	0x4002001c
 8004e88:	40020030 	.word	0x40020030
 8004e8c:	40020044 	.word	0x40020044
 8004e90:	40020058 	.word	0x40020058
 8004e94:	4002006c 	.word	0x4002006c
 8004e98:	40020000 	.word	0x40020000

08004e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b08b      	sub	sp, #44	; 0x2c
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eae:	e169      	b.n	8005184 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	f040 8158 	bne.w	800517e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4a9a      	ldr	r2, [pc, #616]	; (800513c <HAL_GPIO_Init+0x2a0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d05e      	beq.n	8004f96 <HAL_GPIO_Init+0xfa>
 8004ed8:	4a98      	ldr	r2, [pc, #608]	; (800513c <HAL_GPIO_Init+0x2a0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d875      	bhi.n	8004fca <HAL_GPIO_Init+0x12e>
 8004ede:	4a98      	ldr	r2, [pc, #608]	; (8005140 <HAL_GPIO_Init+0x2a4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d058      	beq.n	8004f96 <HAL_GPIO_Init+0xfa>
 8004ee4:	4a96      	ldr	r2, [pc, #600]	; (8005140 <HAL_GPIO_Init+0x2a4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d86f      	bhi.n	8004fca <HAL_GPIO_Init+0x12e>
 8004eea:	4a96      	ldr	r2, [pc, #600]	; (8005144 <HAL_GPIO_Init+0x2a8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d052      	beq.n	8004f96 <HAL_GPIO_Init+0xfa>
 8004ef0:	4a94      	ldr	r2, [pc, #592]	; (8005144 <HAL_GPIO_Init+0x2a8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d869      	bhi.n	8004fca <HAL_GPIO_Init+0x12e>
 8004ef6:	4a94      	ldr	r2, [pc, #592]	; (8005148 <HAL_GPIO_Init+0x2ac>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d04c      	beq.n	8004f96 <HAL_GPIO_Init+0xfa>
 8004efc:	4a92      	ldr	r2, [pc, #584]	; (8005148 <HAL_GPIO_Init+0x2ac>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d863      	bhi.n	8004fca <HAL_GPIO_Init+0x12e>
 8004f02:	4a92      	ldr	r2, [pc, #584]	; (800514c <HAL_GPIO_Init+0x2b0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d046      	beq.n	8004f96 <HAL_GPIO_Init+0xfa>
 8004f08:	4a90      	ldr	r2, [pc, #576]	; (800514c <HAL_GPIO_Init+0x2b0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d85d      	bhi.n	8004fca <HAL_GPIO_Init+0x12e>
 8004f0e:	2b12      	cmp	r3, #18
 8004f10:	d82a      	bhi.n	8004f68 <HAL_GPIO_Init+0xcc>
 8004f12:	2b12      	cmp	r3, #18
 8004f14:	d859      	bhi.n	8004fca <HAL_GPIO_Init+0x12e>
 8004f16:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <HAL_GPIO_Init+0x80>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f97 	.word	0x08004f97
 8004f20:	08004f71 	.word	0x08004f71
 8004f24:	08004f83 	.word	0x08004f83
 8004f28:	08004fc5 	.word	0x08004fc5
 8004f2c:	08004fcb 	.word	0x08004fcb
 8004f30:	08004fcb 	.word	0x08004fcb
 8004f34:	08004fcb 	.word	0x08004fcb
 8004f38:	08004fcb 	.word	0x08004fcb
 8004f3c:	08004fcb 	.word	0x08004fcb
 8004f40:	08004fcb 	.word	0x08004fcb
 8004f44:	08004fcb 	.word	0x08004fcb
 8004f48:	08004fcb 	.word	0x08004fcb
 8004f4c:	08004fcb 	.word	0x08004fcb
 8004f50:	08004fcb 	.word	0x08004fcb
 8004f54:	08004fcb 	.word	0x08004fcb
 8004f58:	08004fcb 	.word	0x08004fcb
 8004f5c:	08004fcb 	.word	0x08004fcb
 8004f60:	08004f79 	.word	0x08004f79
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	4a79      	ldr	r2, [pc, #484]	; (8005150 <HAL_GPIO_Init+0x2b4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f6e:	e02c      	b.n	8004fca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	623b      	str	r3, [r7, #32]
          break;
 8004f76:	e029      	b.n	8004fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	623b      	str	r3, [r7, #32]
          break;
 8004f80:	e024      	b.n	8004fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	3308      	adds	r3, #8
 8004f88:	623b      	str	r3, [r7, #32]
          break;
 8004f8a:	e01f      	b.n	8004fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	330c      	adds	r3, #12
 8004f92:	623b      	str	r3, [r7, #32]
          break;
 8004f94:	e01a      	b.n	8004fcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	623b      	str	r3, [r7, #32]
          break;
 8004fa2:	e013      	b.n	8004fcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d105      	bne.n	8004fb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fac:	2308      	movs	r3, #8
 8004fae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	611a      	str	r2, [r3, #16]
          break;
 8004fb6:	e009      	b.n	8004fcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fb8:	2308      	movs	r3, #8
 8004fba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	615a      	str	r2, [r3, #20]
          break;
 8004fc2:	e003      	b.n	8004fcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	623b      	str	r3, [r7, #32]
          break;
 8004fc8:	e000      	b.n	8004fcc <HAL_GPIO_Init+0x130>
          break;
 8004fca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2bff      	cmp	r3, #255	; 0xff
 8004fd0:	d801      	bhi.n	8004fd6 <HAL_GPIO_Init+0x13a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	e001      	b.n	8004fda <HAL_GPIO_Init+0x13e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2bff      	cmp	r3, #255	; 0xff
 8004fe0:	d802      	bhi.n	8004fe8 <HAL_GPIO_Init+0x14c>
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	e002      	b.n	8004fee <HAL_GPIO_Init+0x152>
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	3b08      	subs	r3, #8
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	210f      	movs	r1, #15
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	401a      	ands	r2, r3
 8005000:	6a39      	ldr	r1, [r7, #32]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	fa01 f303 	lsl.w	r3, r1, r3
 8005008:	431a      	orrs	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80b1 	beq.w	800517e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800501c:	4b4d      	ldr	r3, [pc, #308]	; (8005154 <HAL_GPIO_Init+0x2b8>)
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	4a4c      	ldr	r2, [pc, #304]	; (8005154 <HAL_GPIO_Init+0x2b8>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6193      	str	r3, [r2, #24]
 8005028:	4b4a      	ldr	r3, [pc, #296]	; (8005154 <HAL_GPIO_Init+0x2b8>)
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005034:	4a48      	ldr	r2, [pc, #288]	; (8005158 <HAL_GPIO_Init+0x2bc>)
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	089b      	lsrs	r3, r3, #2
 800503a:	3302      	adds	r3, #2
 800503c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005040:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	220f      	movs	r2, #15
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43db      	mvns	r3, r3
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4013      	ands	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a40      	ldr	r2, [pc, #256]	; (800515c <HAL_GPIO_Init+0x2c0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <HAL_GPIO_Init+0x1ec>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3f      	ldr	r2, [pc, #252]	; (8005160 <HAL_GPIO_Init+0x2c4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00d      	beq.n	8005084 <HAL_GPIO_Init+0x1e8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3e      	ldr	r2, [pc, #248]	; (8005164 <HAL_GPIO_Init+0x2c8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <HAL_GPIO_Init+0x1e4>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a3d      	ldr	r2, [pc, #244]	; (8005168 <HAL_GPIO_Init+0x2cc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d101      	bne.n	800507c <HAL_GPIO_Init+0x1e0>
 8005078:	2303      	movs	r3, #3
 800507a:	e006      	b.n	800508a <HAL_GPIO_Init+0x1ee>
 800507c:	2304      	movs	r3, #4
 800507e:	e004      	b.n	800508a <HAL_GPIO_Init+0x1ee>
 8005080:	2302      	movs	r3, #2
 8005082:	e002      	b.n	800508a <HAL_GPIO_Init+0x1ee>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_GPIO_Init+0x1ee>
 8005088:	2300      	movs	r3, #0
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	f002 0203 	and.w	r2, r2, #3
 8005090:	0092      	lsls	r2, r2, #2
 8005092:	4093      	lsls	r3, r2
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800509a:	492f      	ldr	r1, [pc, #188]	; (8005158 <HAL_GPIO_Init+0x2bc>)
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	089b      	lsrs	r3, r3, #2
 80050a0:	3302      	adds	r3, #2
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d006      	beq.n	80050c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050b4:	4b2d      	ldr	r3, [pc, #180]	; (800516c <HAL_GPIO_Init+0x2d0>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	492c      	ldr	r1, [pc, #176]	; (800516c <HAL_GPIO_Init+0x2d0>)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	4313      	orrs	r3, r2
 80050be:	600b      	str	r3, [r1, #0]
 80050c0:	e006      	b.n	80050d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80050c2:	4b2a      	ldr	r3, [pc, #168]	; (800516c <HAL_GPIO_Init+0x2d0>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	4928      	ldr	r1, [pc, #160]	; (800516c <HAL_GPIO_Init+0x2d0>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d006      	beq.n	80050ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80050dc:	4b23      	ldr	r3, [pc, #140]	; (800516c <HAL_GPIO_Init+0x2d0>)
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	4922      	ldr	r1, [pc, #136]	; (800516c <HAL_GPIO_Init+0x2d0>)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]
 80050e8:	e006      	b.n	80050f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_GPIO_Init+0x2d0>)
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	43db      	mvns	r3, r3
 80050f2:	491e      	ldr	r1, [pc, #120]	; (800516c <HAL_GPIO_Init+0x2d0>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d006      	beq.n	8005112 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005104:	4b19      	ldr	r3, [pc, #100]	; (800516c <HAL_GPIO_Init+0x2d0>)
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	4918      	ldr	r1, [pc, #96]	; (800516c <HAL_GPIO_Init+0x2d0>)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]
 8005110:	e006      	b.n	8005120 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005112:	4b16      	ldr	r3, [pc, #88]	; (800516c <HAL_GPIO_Init+0x2d0>)
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	43db      	mvns	r3, r3
 800511a:	4914      	ldr	r1, [pc, #80]	; (800516c <HAL_GPIO_Init+0x2d0>)
 800511c:	4013      	ands	r3, r2
 800511e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d021      	beq.n	8005170 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <HAL_GPIO_Init+0x2d0>)
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	490e      	ldr	r1, [pc, #56]	; (800516c <HAL_GPIO_Init+0x2d0>)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	4313      	orrs	r3, r2
 8005136:	60cb      	str	r3, [r1, #12]
 8005138:	e021      	b.n	800517e <HAL_GPIO_Init+0x2e2>
 800513a:	bf00      	nop
 800513c:	10320000 	.word	0x10320000
 8005140:	10310000 	.word	0x10310000
 8005144:	10220000 	.word	0x10220000
 8005148:	10210000 	.word	0x10210000
 800514c:	10120000 	.word	0x10120000
 8005150:	10110000 	.word	0x10110000
 8005154:	40021000 	.word	0x40021000
 8005158:	40010000 	.word	0x40010000
 800515c:	40010800 	.word	0x40010800
 8005160:	40010c00 	.word	0x40010c00
 8005164:	40011000 	.word	0x40011000
 8005168:	40011400 	.word	0x40011400
 800516c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <HAL_GPIO_Init+0x304>)
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	43db      	mvns	r3, r3
 8005178:	4909      	ldr	r1, [pc, #36]	; (80051a0 <HAL_GPIO_Init+0x304>)
 800517a:	4013      	ands	r3, r2
 800517c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	3301      	adds	r3, #1
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	f47f ae8e 	bne.w	8004eb0 <HAL_GPIO_Init+0x14>
  }
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	372c      	adds	r7, #44	; 0x2c
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr
 80051a0:	40010400 	.word	0x40010400

080051a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	887b      	ldrh	r3, [r7, #2]
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
 80051c0:	e001      	b.n	80051c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	807b      	strh	r3, [r7, #2]
 80051de:	4613      	mov	r3, r2
 80051e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051e2:	787b      	ldrb	r3, [r7, #1]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e8:	887a      	ldrh	r2, [r7, #2]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80051ee:	e003      	b.n	80051f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051f0:	887b      	ldrh	r3, [r7, #2]
 80051f2:	041a      	lsls	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	611a      	str	r2, [r3, #16]
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	460b      	mov	r3, r1
 800520c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4013      	ands	r3, r2
 800521a:	041a      	lsls	r2, r3, #16
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	43d9      	mvns	r1, r3
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	400b      	ands	r3, r1
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	611a      	str	r2, [r3, #16]
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800524a:	4a05      	ldr	r2, [pc, #20]	; (8005260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fd f9d6 	bl	8002604 <HAL_GPIO_EXTI_Callback>
  }
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40010400 	.word	0x40010400

08005264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e12b      	b.n	80054ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff f9d0 	bl	8004630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2224      	movs	r2, #36	; 0x24
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0201 	bic.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052c8:	f002 f866 	bl	8007398 <HAL_RCC_GetPCLK1Freq>
 80052cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4a81      	ldr	r2, [pc, #516]	; (80054d8 <HAL_I2C_Init+0x274>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d807      	bhi.n	80052e8 <HAL_I2C_Init+0x84>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4a80      	ldr	r2, [pc, #512]	; (80054dc <HAL_I2C_Init+0x278>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	bf94      	ite	ls
 80052e0:	2301      	movls	r3, #1
 80052e2:	2300      	movhi	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e006      	b.n	80052f6 <HAL_I2C_Init+0x92>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4a7d      	ldr	r2, [pc, #500]	; (80054e0 <HAL_I2C_Init+0x27c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	bf94      	ite	ls
 80052f0:	2301      	movls	r3, #1
 80052f2:	2300      	movhi	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0e7      	b.n	80054ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a78      	ldr	r2, [pc, #480]	; (80054e4 <HAL_I2C_Init+0x280>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	0c9b      	lsrs	r3, r3, #18
 8005308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a6a      	ldr	r2, [pc, #424]	; (80054d8 <HAL_I2C_Init+0x274>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d802      	bhi.n	8005338 <HAL_I2C_Init+0xd4>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	3301      	adds	r3, #1
 8005336:	e009      	b.n	800534c <HAL_I2C_Init+0xe8>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	4a69      	ldr	r2, [pc, #420]	; (80054e8 <HAL_I2C_Init+0x284>)
 8005344:	fba2 2303 	umull	r2, r3, r2, r3
 8005348:	099b      	lsrs	r3, r3, #6
 800534a:	3301      	adds	r3, #1
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	430b      	orrs	r3, r1
 8005352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800535e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	495c      	ldr	r1, [pc, #368]	; (80054d8 <HAL_I2C_Init+0x274>)
 8005368:	428b      	cmp	r3, r1
 800536a:	d819      	bhi.n	80053a0 <HAL_I2C_Init+0x13c>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1e59      	subs	r1, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	fbb1 f3f3 	udiv	r3, r1, r3
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005380:	400b      	ands	r3, r1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_I2C_Init+0x138>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1e59      	subs	r1, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	fbb1 f3f3 	udiv	r3, r1, r3
 8005394:	3301      	adds	r3, #1
 8005396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539a:	e051      	b.n	8005440 <HAL_I2C_Init+0x1dc>
 800539c:	2304      	movs	r3, #4
 800539e:	e04f      	b.n	8005440 <HAL_I2C_Init+0x1dc>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d111      	bne.n	80053cc <HAL_I2C_Init+0x168>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1e58      	subs	r0, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6859      	ldr	r1, [r3, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	440b      	add	r3, r1
 80053b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ba:	3301      	adds	r3, #1
 80053bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	e012      	b.n	80053f2 <HAL_I2C_Init+0x18e>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1e58      	subs	r0, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	0099      	lsls	r1, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e2:	3301      	adds	r3, #1
 80053e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bf0c      	ite	eq
 80053ec:	2301      	moveq	r3, #1
 80053ee:	2300      	movne	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_I2C_Init+0x196>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e022      	b.n	8005440 <HAL_I2C_Init+0x1dc>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10e      	bne.n	8005420 <HAL_I2C_Init+0x1bc>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1e58      	subs	r0, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6859      	ldr	r1, [r3, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	440b      	add	r3, r1
 8005410:	fbb0 f3f3 	udiv	r3, r0, r3
 8005414:	3301      	adds	r3, #1
 8005416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	e00f      	b.n	8005440 <HAL_I2C_Init+0x1dc>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1e58      	subs	r0, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	0099      	lsls	r1, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	fbb0 f3f3 	udiv	r3, r0, r3
 8005436:	3301      	adds	r3, #1
 8005438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	6809      	ldr	r1, [r1, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69da      	ldr	r2, [r3, #28]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800546e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6911      	ldr	r1, [r2, #16]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68d2      	ldr	r2, [r2, #12]
 800547a:	4311      	orrs	r1, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	430b      	orrs	r3, r1
 8005482:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	000186a0 	.word	0x000186a0
 80054dc:	001e847f 	.word	0x001e847f
 80054e0:	003d08ff 	.word	0x003d08ff
 80054e4:	431bde83 	.word	0x431bde83
 80054e8:	10624dd3 	.word	0x10624dd3

080054ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	461a      	mov	r2, r3
 80054f8:	460b      	mov	r3, r1
 80054fa:	817b      	strh	r3, [r7, #10]
 80054fc:	4613      	mov	r3, r2
 80054fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005500:	f7ff fb0e 	bl	8004b20 <HAL_GetTick>
 8005504:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b20      	cmp	r3, #32
 8005510:	f040 80e0 	bne.w	80056d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	2319      	movs	r3, #25
 800551a:	2201      	movs	r2, #1
 800551c:	4970      	ldr	r1, [pc, #448]	; (80056e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f001 f972 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
 800552c:	e0d3      	b.n	80056d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_I2C_Master_Transmit+0x50>
 8005538:	2302      	movs	r3, #2
 800553a:	e0cc      	b.n	80056d6 <HAL_I2C_Master_Transmit+0x1ea>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b01      	cmp	r3, #1
 8005550:	d007      	beq.n	8005562 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005570:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2221      	movs	r2, #33	; 0x21
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2210      	movs	r2, #16
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	893a      	ldrh	r2, [r7, #8]
 8005592:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a50      	ldr	r2, [pc, #320]	; (80056e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80055a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055a4:	8979      	ldrh	r1, [r7, #10]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fe5e 	bl	800626c <I2C_MasterRequestWrite>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e08d      	b.n	80056d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055d0:	e066      	b.n	80056a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	6a39      	ldr	r1, [r7, #32]
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f001 f9ec 	bl	80069b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d107      	bne.n	80055fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e06b      	b.n	80056d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d11b      	bne.n	8005674 <HAL_I2C_Master_Transmit+0x188>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d017      	beq.n	8005674 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	6a39      	ldr	r1, [r7, #32]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f001 f9dc 	bl	8006a36 <I2C_WaitOnBTFFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00d      	beq.n	80056a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	2b04      	cmp	r3, #4
 800568a:	d107      	bne.n	800569c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e01a      	b.n	80056d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d194      	bne.n	80055d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e000      	b.n	80056d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	00100002 	.word	0x00100002
 80056e4:	ffff0000 	.word	0xffff0000

080056e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08c      	sub	sp, #48	; 0x30
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	607a      	str	r2, [r7, #4]
 80056f2:	461a      	mov	r2, r3
 80056f4:	460b      	mov	r3, r1
 80056f6:	817b      	strh	r3, [r7, #10]
 80056f8:	4613      	mov	r3, r2
 80056fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005700:	f7ff fa0e 	bl	8004b20 <HAL_GetTick>
 8005704:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b20      	cmp	r3, #32
 8005710:	f040 823f 	bne.w	8005b92 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2319      	movs	r3, #25
 800571a:	2201      	movs	r2, #1
 800571c:	497f      	ldr	r1, [pc, #508]	; (800591c <HAL_I2C_Master_Receive+0x234>)
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f001 f872 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800572a:	2302      	movs	r3, #2
 800572c:	e232      	b.n	8005b94 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_I2C_Master_Receive+0x54>
 8005738:	2302      	movs	r3, #2
 800573a:	e22b      	b.n	8005b94 <HAL_I2C_Master_Receive+0x4ac>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d007      	beq.n	8005762 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2222      	movs	r2, #34	; 0x22
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2210      	movs	r2, #16
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	893a      	ldrh	r2, [r7, #8]
 8005792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4a5f      	ldr	r2, [pc, #380]	; (8005920 <HAL_I2C_Master_Receive+0x238>)
 80057a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057a4:	8979      	ldrh	r1, [r7, #10]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fde0 	bl	8006370 <I2C_MasterRequestRead>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e1ec      	b.n	8005b94 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d113      	bne.n	80057ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	e1c0      	b.n	8005b6c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d11e      	bne.n	8005830 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005800:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005802:	b672      	cpsid	i
}
 8005804:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800582c:	b662      	cpsie	i
}
 800582e:	e035      	b.n	800589c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005834:	2b02      	cmp	r3, #2
 8005836:	d11e      	bne.n	8005876 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005846:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005848:	b672      	cpsid	i
}
 800584a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005870:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005872:	b662      	cpsie	i
}
 8005874:	e012      	b.n	800589c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005884:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005886:	2300      	movs	r3, #0
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800589c:	e166      	b.n	8005b6c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	f200 811f 	bhi.w	8005ae6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d123      	bne.n	80058f8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f001 f8ff 	bl	8006ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e167      	b.n	8005b94 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058f6:	e139      	b.n	8005b6c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d152      	bne.n	80059a6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	2200      	movs	r2, #0
 8005908:	4906      	ldr	r1, [pc, #24]	; (8005924 <HAL_I2C_Master_Receive+0x23c>)
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 ff7c 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e13c      	b.n	8005b94 <HAL_I2C_Master_Receive+0x4ac>
 800591a:	bf00      	nop
 800591c:	00100002 	.word	0x00100002
 8005920:	ffff0000 	.word	0xffff0000
 8005924:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005928:	b672      	cpsid	i
}
 800592a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800593a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800596e:	b662      	cpsie	i
}
 8005970:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059a4:	e0e2      	b.n	8005b6c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	2200      	movs	r2, #0
 80059ae:	497b      	ldr	r1, [pc, #492]	; (8005b9c <HAL_I2C_Master_Receive+0x4b4>)
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 ff29 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0e9      	b.n	8005b94 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059d0:	b672      	cpsid	i
}
 80059d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a06:	4b66      	ldr	r3, [pc, #408]	; (8005ba0 <HAL_I2C_Master_Receive+0x4b8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	08db      	lsrs	r3, r3, #3
 8005a0c:	4a65      	ldr	r2, [pc, #404]	; (8005ba4 <HAL_I2C_Master_Receive+0x4bc>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	0a1a      	lsrs	r2, r3, #8
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	00da      	lsls	r2, r3, #3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d118      	bne.n	8005a5e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f043 0220 	orr.w	r2, r3, #32
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005a4e:	b662      	cpsie	i
}
 8005a50:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e09a      	b.n	8005b94 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d1d9      	bne.n	8005a20 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691a      	ldr	r2, [r3, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005aae:	b662      	cpsie	i
}
 8005ab0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ae4:	e042      	b.n	8005b6c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 ffe4 	bl	8006ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e04c      	b.n	8005b94 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d118      	bne.n	8005b6c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f ae94 	bne.w	800589e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e000      	b.n	8005b94 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005b92:	2302      	movs	r3, #2
  }
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3728      	adds	r7, #40	; 0x28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	00010004 	.word	0x00010004
 8005ba0:	20000010 	.word	0x20000010
 8005ba4:	14f8b589 	.word	0x14f8b589

08005ba8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	817b      	strh	r3, [r7, #10]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	813b      	strh	r3, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bc2:	f7fe ffad 	bl	8004b20 <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	f040 80d9 	bne.w	8005d88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	2319      	movs	r3, #25
 8005bdc:	2201      	movs	r2, #1
 8005bde:	496d      	ldr	r1, [pc, #436]	; (8005d94 <HAL_I2C_Mem_Write+0x1ec>)
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fe11 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0cc      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2C_Mem_Write+0x56>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0c5      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d007      	beq.n	8005c24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2221      	movs	r2, #33	; 0x21
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2240      	movs	r2, #64	; 0x40
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a4d      	ldr	r2, [pc, #308]	; (8005d98 <HAL_I2C_Mem_Write+0x1f0>)
 8005c64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c66:	88f8      	ldrh	r0, [r7, #6]
 8005c68:	893a      	ldrh	r2, [r7, #8]
 8005c6a:	8979      	ldrh	r1, [r7, #10]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fc48 	bl	800650c <I2C_RequestMemoryWrite>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d052      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e081      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fe92 	bl	80069b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d107      	bne.n	8005cae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e06b      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d11b      	bne.n	8005d28 <HAL_I2C_Mem_Write+0x180>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d017      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1aa      	bne.n	8005c86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fe7e 	bl	8006a36 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d107      	bne.n	8005d58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e016      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	00100002 	.word	0x00100002
 8005d98:	ffff0000 	.word	0xffff0000

08005d9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08c      	sub	sp, #48	; 0x30
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	4608      	mov	r0, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	817b      	strh	r3, [r7, #10]
 8005dae:	460b      	mov	r3, r1
 8005db0:	813b      	strh	r3, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dba:	f7fe feb1 	bl	8004b20 <HAL_GetTick>
 8005dbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	f040 8244 	bne.w	8006256 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	2319      	movs	r3, #25
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	4982      	ldr	r1, [pc, #520]	; (8005fe0 <HAL_I2C_Mem_Read+0x244>)
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fd15 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
 8005de6:	e237      	b.n	8006258 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_I2C_Mem_Read+0x5a>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e230      	b.n	8006258 <HAL_I2C_Mem_Read+0x4bc>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d007      	beq.n	8005e1c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2222      	movs	r2, #34	; 0x22
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2240      	movs	r2, #64	; 0x40
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a62      	ldr	r2, [pc, #392]	; (8005fe4 <HAL_I2C_Mem_Read+0x248>)
 8005e5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e5e:	88f8      	ldrh	r0, [r7, #6]
 8005e60:	893a      	ldrh	r2, [r7, #8]
 8005e62:	8979      	ldrh	r1, [r7, #10]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fbe2 	bl	8006638 <I2C_RequestMemoryRead>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e1ec      	b.n	8006258 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d113      	bne.n	8005eae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	61fb      	str	r3, [r7, #28]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e1c0      	b.n	8006230 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d11e      	bne.n	8005ef4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ec6:	b672      	cpsid	i
}
 8005ec8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ef0:	b662      	cpsie	i
}
 8005ef2:	e035      	b.n	8005f60 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d11e      	bne.n	8005f3a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f0c:	b672      	cpsid	i
}
 8005f0e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005f36:	b662      	cpsie	i
}
 8005f38:	e012      	b.n	8005f60 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f48:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005f60:	e166      	b.n	8006230 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	f200 811f 	bhi.w	80061aa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d123      	bne.n	8005fbc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fd9d 	bl	8006ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e167      	b.n	8006258 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fba:	e139      	b.n	8006230 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d152      	bne.n	800606a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	2200      	movs	r2, #0
 8005fcc:	4906      	ldr	r1, [pc, #24]	; (8005fe8 <HAL_I2C_Mem_Read+0x24c>)
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fc1a 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d008      	beq.n	8005fec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e13c      	b.n	8006258 <HAL_I2C_Mem_Read+0x4bc>
 8005fde:	bf00      	nop
 8005fe0:	00100002 	.word	0x00100002
 8005fe4:	ffff0000 	.word	0xffff0000
 8005fe8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005fec:	b672      	cpsid	i
}
 8005fee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006032:	b662      	cpsie	i
}
 8006034:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006068:	e0e2      	b.n	8006230 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	2200      	movs	r2, #0
 8006072:	497b      	ldr	r1, [pc, #492]	; (8006260 <HAL_I2C_Mem_Read+0x4c4>)
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 fbc7 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0e9      	b.n	8006258 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006092:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006094:	b672      	cpsid	i
}
 8006096:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80060ca:	4b66      	ldr	r3, [pc, #408]	; (8006264 <HAL_I2C_Mem_Read+0x4c8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	4a65      	ldr	r2, [pc, #404]	; (8006268 <HAL_I2C_Mem_Read+0x4cc>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0a1a      	lsrs	r2, r3, #8
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	00da      	lsls	r2, r3, #3
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d118      	bne.n	8006122 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006112:	b662      	cpsie	i
}
 8006114:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e09a      	b.n	8006258 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b04      	cmp	r3, #4
 800612e:	d1d9      	bne.n	80060e4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800613e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006172:	b662      	cpsie	i
}
 8006174:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061a8:	e042      	b.n	8006230 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fc82 	bl	8006ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e04c      	b.n	8006258 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d118      	bne.n	8006230 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006234:	2b00      	cmp	r3, #0
 8006236:	f47f ae94 	bne.w	8005f62 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e000      	b.n	8006258 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006256:	2302      	movs	r3, #2
  }
}
 8006258:	4618      	mov	r0, r3
 800625a:	3728      	adds	r7, #40	; 0x28
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	00010004 	.word	0x00010004
 8006264:	20000010 	.word	0x20000010
 8006268:	14f8b589 	.word	0x14f8b589

0800626c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	460b      	mov	r3, r1
 800627a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b08      	cmp	r3, #8
 8006286:	d006      	beq.n	8006296 <I2C_MasterRequestWrite+0x2a>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d003      	beq.n	8006296 <I2C_MasterRequestWrite+0x2a>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006294:	d108      	bne.n	80062a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	e00b      	b.n	80062c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	2b12      	cmp	r3, #18
 80062ae:	d107      	bne.n	80062c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fa9b 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00d      	beq.n	80062f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e6:	d103      	bne.n	80062f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e035      	b.n	8006360 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062fc:	d108      	bne.n	8006310 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062fe:	897b      	ldrh	r3, [r7, #10]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	461a      	mov	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800630c:	611a      	str	r2, [r3, #16]
 800630e:	e01b      	b.n	8006348 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006310:	897b      	ldrh	r3, [r7, #10]
 8006312:	11db      	asrs	r3, r3, #7
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f003 0306 	and.w	r3, r3, #6
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f063 030f 	orn	r3, r3, #15
 8006320:	b2da      	uxtb	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	490e      	ldr	r1, [pc, #56]	; (8006368 <I2C_MasterRequestWrite+0xfc>)
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fac1 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e010      	b.n	8006360 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800633e:	897b      	ldrh	r3, [r7, #10]
 8006340:	b2da      	uxtb	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4907      	ldr	r1, [pc, #28]	; (800636c <I2C_MasterRequestWrite+0x100>)
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fab1 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	00010008 	.word	0x00010008
 800636c:	00010002 	.word	0x00010002

08006370 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af02      	add	r7, sp, #8
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	460b      	mov	r3, r1
 800637e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006394:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d006      	beq.n	80063aa <I2C_MasterRequestRead+0x3a>
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d003      	beq.n	80063aa <I2C_MasterRequestRead+0x3a>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063a8:	d108      	bne.n	80063bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	e00b      	b.n	80063d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c0:	2b11      	cmp	r3, #17
 80063c2:	d107      	bne.n	80063d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fa11 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00d      	beq.n	8006408 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fa:	d103      	bne.n	8006404 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e079      	b.n	80064fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006410:	d108      	bne.n	8006424 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006412:	897b      	ldrh	r3, [r7, #10]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	611a      	str	r2, [r3, #16]
 8006422:	e05f      	b.n	80064e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006424:	897b      	ldrh	r3, [r7, #10]
 8006426:	11db      	asrs	r3, r3, #7
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f003 0306 	and.w	r3, r3, #6
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f063 030f 	orn	r3, r3, #15
 8006434:	b2da      	uxtb	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4930      	ldr	r1, [pc, #192]	; (8006504 <I2C_MasterRequestRead+0x194>)
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fa37 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e054      	b.n	80064fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006452:	897b      	ldrh	r3, [r7, #10]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	4929      	ldr	r1, [pc, #164]	; (8006508 <I2C_MasterRequestRead+0x198>)
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fa27 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e044      	b.n	80064fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006472:	2300      	movs	r3, #0
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006496:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f9af 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00d      	beq.n	80064cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064be:	d103      	bne.n	80064c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e017      	b.n	80064fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80064cc:	897b      	ldrh	r3, [r7, #10]
 80064ce:	11db      	asrs	r3, r3, #7
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f003 0306 	and.w	r3, r3, #6
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f063 030e 	orn	r3, r3, #14
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	4907      	ldr	r1, [pc, #28]	; (8006508 <I2C_MasterRequestRead+0x198>)
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f9e3 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	00010008 	.word	0x00010008
 8006508:	00010002 	.word	0x00010002

0800650c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	4603      	mov	r3, r0
 800651c:	817b      	strh	r3, [r7, #10]
 800651e:	460b      	mov	r3, r1
 8006520:	813b      	strh	r3, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	2200      	movs	r2, #0
 800653e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f960 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655c:	d103      	bne.n	8006566 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e05f      	b.n	800662a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800656a:	897b      	ldrh	r3, [r7, #10]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	6a3a      	ldr	r2, [r7, #32]
 800657e:	492d      	ldr	r1, [pc, #180]	; (8006634 <I2C_RequestMemoryWrite+0x128>)
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f998 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e04c      	b.n	800662a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a8:	6a39      	ldr	r1, [r7, #32]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fa02 	bl	80069b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d107      	bne.n	80065ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e02b      	b.n	800662a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d105      	bne.n	80065e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065d8:	893b      	ldrh	r3, [r7, #8]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	611a      	str	r2, [r3, #16]
 80065e2:	e021      	b.n	8006628 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065e4:	893b      	ldrh	r3, [r7, #8]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f4:	6a39      	ldr	r1, [r7, #32]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 f9dc 	bl	80069b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00d      	beq.n	800661e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b04      	cmp	r3, #4
 8006608:	d107      	bne.n	800661a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e005      	b.n	800662a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800661e:	893b      	ldrh	r3, [r7, #8]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	00010002 	.word	0x00010002

08006638 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4603      	mov	r3, r0
 8006648:	817b      	strh	r3, [r7, #10]
 800664a:	460b      	mov	r3, r1
 800664c:	813b      	strh	r3, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006660:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006670:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	2200      	movs	r2, #0
 800667a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 f8c2 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00d      	beq.n	80066a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006698:	d103      	bne.n	80066a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e0aa      	b.n	80067fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066a6:	897b      	ldrh	r3, [r7, #10]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	4952      	ldr	r1, [pc, #328]	; (8006804 <I2C_RequestMemoryRead+0x1cc>)
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f8fa 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e097      	b.n	80067fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e4:	6a39      	ldr	r1, [r7, #32]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f964 	bl	80069b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00d      	beq.n	800670e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d107      	bne.n	800670a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006708:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e076      	b.n	80067fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d105      	bne.n	8006720 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006714:	893b      	ldrh	r3, [r7, #8]
 8006716:	b2da      	uxtb	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	611a      	str	r2, [r3, #16]
 800671e:	e021      	b.n	8006764 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006720:	893b      	ldrh	r3, [r7, #8]
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	b29b      	uxth	r3, r3
 8006726:	b2da      	uxtb	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800672e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006730:	6a39      	ldr	r1, [r7, #32]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f93e 	bl	80069b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00d      	beq.n	800675a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	2b04      	cmp	r3, #4
 8006744:	d107      	bne.n	8006756 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006754:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e050      	b.n	80067fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800675a:	893b      	ldrh	r3, [r7, #8]
 800675c:	b2da      	uxtb	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006766:	6a39      	ldr	r1, [r7, #32]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f923 	bl	80069b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00d      	beq.n	8006790 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006778:	2b04      	cmp	r3, #4
 800677a:	d107      	bne.n	800678c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800678a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e035      	b.n	80067fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800679e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f82b 	bl	8006808 <I2C_WaitOnFlagUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00d      	beq.n	80067d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c6:	d103      	bne.n	80067d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e013      	b.n	80067fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80067d4:	897b      	ldrh	r3, [r7, #10]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	4906      	ldr	r1, [pc, #24]	; (8006804 <I2C_RequestMemoryRead+0x1cc>)
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f863 	bl	80068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	00010002 	.word	0x00010002

08006808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	4613      	mov	r3, r2
 8006816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006818:	e025      	b.n	8006866 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006820:	d021      	beq.n	8006866 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006822:	f7fe f97d 	bl	8004b20 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d302      	bcc.n	8006838 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d116      	bne.n	8006866 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f043 0220 	orr.w	r2, r3, #32
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e023      	b.n	80068ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	d10d      	bne.n	800688c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	43da      	mvns	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4013      	ands	r3, r2
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	bf0c      	ite	eq
 8006882:	2301      	moveq	r3, #1
 8006884:	2300      	movne	r3, #0
 8006886:	b2db      	uxtb	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	e00c      	b.n	80068a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	43da      	mvns	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4013      	ands	r3, r2
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	bf0c      	ite	eq
 800689e:	2301      	moveq	r3, #1
 80068a0:	2300      	movne	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d0b6      	beq.n	800681a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068c4:	e051      	b.n	800696a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d4:	d123      	bne.n	800691e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f043 0204 	orr.w	r2, r3, #4
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e046      	b.n	80069ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006924:	d021      	beq.n	800696a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006926:	f7fe f8fb 	bl	8004b20 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d116      	bne.n	800696a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f043 0220 	orr.w	r2, r3, #32
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e020      	b.n	80069ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	d10c      	bne.n	800698e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	43da      	mvns	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4013      	ands	r3, r2
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	bf14      	ite	ne
 8006986:	2301      	movne	r3, #1
 8006988:	2300      	moveq	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	e00b      	b.n	80069a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	43da      	mvns	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	4013      	ands	r3, r2
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d18d      	bne.n	80068c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c0:	e02d      	b.n	8006a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f8ce 	bl	8006b64 <I2C_IsAcknowledgeFailed>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e02d      	b.n	8006a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d8:	d021      	beq.n	8006a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069da:	f7fe f8a1 	bl	8004b20 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d302      	bcc.n	80069f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d116      	bne.n	8006a1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e007      	b.n	8006a2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a28:	2b80      	cmp	r3, #128	; 0x80
 8006a2a:	d1ca      	bne.n	80069c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a42:	e02d      	b.n	8006aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f88d 	bl	8006b64 <I2C_IsAcknowledgeFailed>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e02d      	b.n	8006ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a5a:	d021      	beq.n	8006aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5c:	f7fe f860 	bl	8004b20 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d302      	bcc.n	8006a72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d116      	bne.n	8006aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e007      	b.n	8006ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d1ca      	bne.n	8006a44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ac4:	e042      	b.n	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0310 	and.w	r3, r3, #16
 8006ad0:	2b10      	cmp	r3, #16
 8006ad2:	d119      	bne.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0210 	mvn.w	r2, #16
 8006adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e029      	b.n	8006b5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b08:	f7fe f80a 	bl	8004b20 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d302      	bcc.n	8006b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d116      	bne.n	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	f043 0220 	orr.w	r2, r3, #32
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e007      	b.n	8006b5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d1b5      	bne.n	8006ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7a:	d11b      	bne.n	8006bb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	f043 0204 	orr.w	r2, r3, #4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006bd0:	f000 f808 	bl	8006be4 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006bd4:	4b02      	ldr	r3, [pc, #8]	; (8006be0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006bd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006bda:	615a      	str	r2, [r3, #20]
  }
}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40010400 	.word	0x40010400

08006be4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006be8:	bf00      	nop
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e272      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8087 	beq.w	8006d1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c10:	4b92      	ldr	r3, [pc, #584]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f003 030c 	and.w	r3, r3, #12
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d00c      	beq.n	8006c36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c1c:	4b8f      	ldr	r3, [pc, #572]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f003 030c 	and.w	r3, r3, #12
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d112      	bne.n	8006c4e <HAL_RCC_OscConfig+0x5e>
 8006c28:	4b8c      	ldr	r3, [pc, #560]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c34:	d10b      	bne.n	8006c4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c36:	4b89      	ldr	r3, [pc, #548]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d06c      	beq.n	8006d1c <HAL_RCC_OscConfig+0x12c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d168      	bne.n	8006d1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e24c      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c56:	d106      	bne.n	8006c66 <HAL_RCC_OscConfig+0x76>
 8006c58:	4b80      	ldr	r3, [pc, #512]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a7f      	ldr	r2, [pc, #508]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	e02e      	b.n	8006cc4 <HAL_RCC_OscConfig+0xd4>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10c      	bne.n	8006c88 <HAL_RCC_OscConfig+0x98>
 8006c6e:	4b7b      	ldr	r3, [pc, #492]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a7a      	ldr	r2, [pc, #488]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4b78      	ldr	r3, [pc, #480]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a77      	ldr	r2, [pc, #476]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e01d      	b.n	8006cc4 <HAL_RCC_OscConfig+0xd4>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c90:	d10c      	bne.n	8006cac <HAL_RCC_OscConfig+0xbc>
 8006c92:	4b72      	ldr	r3, [pc, #456]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a71      	ldr	r2, [pc, #452]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	4b6f      	ldr	r3, [pc, #444]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a6e      	ldr	r2, [pc, #440]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	e00b      	b.n	8006cc4 <HAL_RCC_OscConfig+0xd4>
 8006cac:	4b6b      	ldr	r3, [pc, #428]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a6a      	ldr	r2, [pc, #424]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	4b68      	ldr	r3, [pc, #416]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a67      	ldr	r2, [pc, #412]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d013      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ccc:	f7fd ff28 	bl	8004b20 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd4:	f7fd ff24 	bl	8004b20 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b64      	cmp	r3, #100	; 0x64
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e200      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ce6:	4b5d      	ldr	r3, [pc, #372]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0f0      	beq.n	8006cd4 <HAL_RCC_OscConfig+0xe4>
 8006cf2:	e014      	b.n	8006d1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf4:	f7fd ff14 	bl	8004b20 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cfc:	f7fd ff10 	bl	8004b20 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b64      	cmp	r3, #100	; 0x64
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e1ec      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d0e:	4b53      	ldr	r3, [pc, #332]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f0      	bne.n	8006cfc <HAL_RCC_OscConfig+0x10c>
 8006d1a:	e000      	b.n	8006d1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d063      	beq.n	8006df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d2a:	4b4c      	ldr	r3, [pc, #304]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f003 030c 	and.w	r3, r3, #12
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d36:	4b49      	ldr	r3, [pc, #292]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f003 030c 	and.w	r3, r3, #12
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d11c      	bne.n	8006d7c <HAL_RCC_OscConfig+0x18c>
 8006d42:	4b46      	ldr	r3, [pc, #280]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d116      	bne.n	8006d7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d4e:	4b43      	ldr	r3, [pc, #268]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d005      	beq.n	8006d66 <HAL_RCC_OscConfig+0x176>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d001      	beq.n	8006d66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e1c0      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d66:	4b3d      	ldr	r3, [pc, #244]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	4939      	ldr	r1, [pc, #228]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d7a:	e03a      	b.n	8006df2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d020      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d84:	4b36      	ldr	r3, [pc, #216]	; (8006e60 <HAL_RCC_OscConfig+0x270>)
 8006d86:	2201      	movs	r2, #1
 8006d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d8a:	f7fd fec9 	bl	8004b20 <HAL_GetTick>
 8006d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d92:	f7fd fec5 	bl	8004b20 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e1a1      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006da4:	4b2d      	ldr	r3, [pc, #180]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0f0      	beq.n	8006d92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db0:	4b2a      	ldr	r3, [pc, #168]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	4927      	ldr	r1, [pc, #156]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	600b      	str	r3, [r1, #0]
 8006dc4:	e015      	b.n	8006df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dc6:	4b26      	ldr	r3, [pc, #152]	; (8006e60 <HAL_RCC_OscConfig+0x270>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dcc:	f7fd fea8 	bl	8004b20 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dd4:	f7fd fea4 	bl	8004b20 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e180      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006de6:	4b1d      	ldr	r3, [pc, #116]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d03a      	beq.n	8006e74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d019      	beq.n	8006e3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e06:	4b17      	ldr	r3, [pc, #92]	; (8006e64 <HAL_RCC_OscConfig+0x274>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e0c:	f7fd fe88 	bl	8004b20 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e14:	f7fd fe84 	bl	8004b20 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e160      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e26:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <HAL_RCC_OscConfig+0x26c>)
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e32:	2001      	movs	r0, #1
 8006e34:	f000 fb08 	bl	8007448 <RCC_Delay>
 8006e38:	e01c      	b.n	8006e74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <HAL_RCC_OscConfig+0x274>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e40:	f7fd fe6e 	bl	8004b20 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e46:	e00f      	b.n	8006e68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e48:	f7fd fe6a 	bl	8004b20 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d908      	bls.n	8006e68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e146      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
 8006e5a:	bf00      	nop
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	42420000 	.word	0x42420000
 8006e64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e68:	4b92      	ldr	r3, [pc, #584]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e9      	bne.n	8006e48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 80a6 	beq.w	8006fce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e86:	4b8b      	ldr	r3, [pc, #556]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10d      	bne.n	8006eae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e92:	4b88      	ldr	r3, [pc, #544]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	4a87      	ldr	r2, [pc, #540]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e9c:	61d3      	str	r3, [r2, #28]
 8006e9e:	4b85      	ldr	r3, [pc, #532]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea6:	60bb      	str	r3, [r7, #8]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eae:	4b82      	ldr	r3, [pc, #520]	; (80070b8 <HAL_RCC_OscConfig+0x4c8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d118      	bne.n	8006eec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eba:	4b7f      	ldr	r3, [pc, #508]	; (80070b8 <HAL_RCC_OscConfig+0x4c8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a7e      	ldr	r2, [pc, #504]	; (80070b8 <HAL_RCC_OscConfig+0x4c8>)
 8006ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ec6:	f7fd fe2b 	bl	8004b20 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ece:	f7fd fe27 	bl	8004b20 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b64      	cmp	r3, #100	; 0x64
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e103      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee0:	4b75      	ldr	r3, [pc, #468]	; (80070b8 <HAL_RCC_OscConfig+0x4c8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0f0      	beq.n	8006ece <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d106      	bne.n	8006f02 <HAL_RCC_OscConfig+0x312>
 8006ef4:	4b6f      	ldr	r3, [pc, #444]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	4a6e      	ldr	r2, [pc, #440]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	6213      	str	r3, [r2, #32]
 8006f00:	e02d      	b.n	8006f5e <HAL_RCC_OscConfig+0x36e>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10c      	bne.n	8006f24 <HAL_RCC_OscConfig+0x334>
 8006f0a:	4b6a      	ldr	r3, [pc, #424]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	4a69      	ldr	r2, [pc, #420]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f10:	f023 0301 	bic.w	r3, r3, #1
 8006f14:	6213      	str	r3, [r2, #32]
 8006f16:	4b67      	ldr	r3, [pc, #412]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	4a66      	ldr	r2, [pc, #408]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f1c:	f023 0304 	bic.w	r3, r3, #4
 8006f20:	6213      	str	r3, [r2, #32]
 8006f22:	e01c      	b.n	8006f5e <HAL_RCC_OscConfig+0x36e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b05      	cmp	r3, #5
 8006f2a:	d10c      	bne.n	8006f46 <HAL_RCC_OscConfig+0x356>
 8006f2c:	4b61      	ldr	r3, [pc, #388]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	4a60      	ldr	r2, [pc, #384]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f32:	f043 0304 	orr.w	r3, r3, #4
 8006f36:	6213      	str	r3, [r2, #32]
 8006f38:	4b5e      	ldr	r3, [pc, #376]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	4a5d      	ldr	r2, [pc, #372]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	6213      	str	r3, [r2, #32]
 8006f44:	e00b      	b.n	8006f5e <HAL_RCC_OscConfig+0x36e>
 8006f46:	4b5b      	ldr	r3, [pc, #364]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	4a5a      	ldr	r2, [pc, #360]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f4c:	f023 0301 	bic.w	r3, r3, #1
 8006f50:	6213      	str	r3, [r2, #32]
 8006f52:	4b58      	ldr	r3, [pc, #352]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	4a57      	ldr	r2, [pc, #348]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f58:	f023 0304 	bic.w	r3, r3, #4
 8006f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d015      	beq.n	8006f92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f66:	f7fd fddb 	bl	8004b20 <HAL_GetTick>
 8006f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f6c:	e00a      	b.n	8006f84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f6e:	f7fd fdd7 	bl	8004b20 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e0b1      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f84:	4b4b      	ldr	r3, [pc, #300]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0ee      	beq.n	8006f6e <HAL_RCC_OscConfig+0x37e>
 8006f90:	e014      	b.n	8006fbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f92:	f7fd fdc5 	bl	8004b20 <HAL_GetTick>
 8006f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f98:	e00a      	b.n	8006fb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f9a:	f7fd fdc1 	bl	8004b20 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e09b      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fb0:	4b40      	ldr	r3, [pc, #256]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1ee      	bne.n	8006f9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d105      	bne.n	8006fce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fc2:	4b3c      	ldr	r3, [pc, #240]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	4a3b      	ldr	r2, [pc, #236]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8087 	beq.w	80070e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fd8:	4b36      	ldr	r3, [pc, #216]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f003 030c 	and.w	r3, r3, #12
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d061      	beq.n	80070a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d146      	bne.n	800707a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fec:	4b33      	ldr	r3, [pc, #204]	; (80070bc <HAL_RCC_OscConfig+0x4cc>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff2:	f7fd fd95 	bl	8004b20 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ff8:	e008      	b.n	800700c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ffa:	f7fd fd91 	bl	8004b20 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e06d      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800700c:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1f0      	bne.n	8006ffa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007020:	d108      	bne.n	8007034 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007022:	4b24      	ldr	r3, [pc, #144]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	4921      	ldr	r1, [pc, #132]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8007030:	4313      	orrs	r3, r2
 8007032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007034:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a19      	ldr	r1, [r3, #32]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	430b      	orrs	r3, r1
 8007046:	491b      	ldr	r1, [pc, #108]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 8007048:	4313      	orrs	r3, r2
 800704a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800704c:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <HAL_RCC_OscConfig+0x4cc>)
 800704e:	2201      	movs	r2, #1
 8007050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007052:	f7fd fd65 	bl	8004b20 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800705a:	f7fd fd61 	bl	8004b20 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e03d      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800706c:	4b11      	ldr	r3, [pc, #68]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f0      	beq.n	800705a <HAL_RCC_OscConfig+0x46a>
 8007078:	e035      	b.n	80070e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800707a:	4b10      	ldr	r3, [pc, #64]	; (80070bc <HAL_RCC_OscConfig+0x4cc>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007080:	f7fd fd4e 	bl	8004b20 <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007088:	f7fd fd4a 	bl	8004b20 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e026      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <HAL_RCC_OscConfig+0x4c4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <HAL_RCC_OscConfig+0x498>
 80070a6:	e01e      	b.n	80070e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d107      	bne.n	80070c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e019      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40007000 	.word	0x40007000
 80070bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80070c0:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <HAL_RCC_OscConfig+0x500>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d106      	bne.n	80070e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070de:	429a      	cmp	r2, r3
 80070e0:	d001      	beq.n	80070e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	40021000 	.word	0x40021000

080070f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e0d0      	b.n	80072aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007108:	4b6a      	ldr	r3, [pc, #424]	; (80072b4 <HAL_RCC_ClockConfig+0x1c0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d910      	bls.n	8007138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007116:	4b67      	ldr	r3, [pc, #412]	; (80072b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f023 0207 	bic.w	r2, r3, #7
 800711e:	4965      	ldr	r1, [pc, #404]	; (80072b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	4313      	orrs	r3, r2
 8007124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007126:	4b63      	ldr	r3, [pc, #396]	; (80072b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d001      	beq.n	8007138 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e0b8      	b.n	80072aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d020      	beq.n	8007186 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007150:	4b59      	ldr	r3, [pc, #356]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	4a58      	ldr	r2, [pc, #352]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800715a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007168:	4b53      	ldr	r3, [pc, #332]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4a52      	ldr	r2, [pc, #328]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 800716e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007172:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007174:	4b50      	ldr	r3, [pc, #320]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	494d      	ldr	r1, [pc, #308]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007182:	4313      	orrs	r3, r2
 8007184:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d040      	beq.n	8007214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d107      	bne.n	80071aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800719a:	4b47      	ldr	r3, [pc, #284]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d115      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e07f      	b.n	80072aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d107      	bne.n	80071c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071b2:	4b41      	ldr	r3, [pc, #260]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e073      	b.n	80072aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071c2:	4b3d      	ldr	r3, [pc, #244]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e06b      	b.n	80072aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071d2:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f023 0203 	bic.w	r2, r3, #3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	4936      	ldr	r1, [pc, #216]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071e4:	f7fd fc9c 	bl	8004b20 <HAL_GetTick>
 80071e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ea:	e00a      	b.n	8007202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071ec:	f7fd fc98 	bl	8004b20 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e053      	b.n	80072aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007202:	4b2d      	ldr	r3, [pc, #180]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f003 020c 	and.w	r2, r3, #12
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	429a      	cmp	r2, r3
 8007212:	d1eb      	bne.n	80071ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007214:	4b27      	ldr	r3, [pc, #156]	; (80072b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d210      	bcs.n	8007244 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007222:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f023 0207 	bic.w	r2, r3, #7
 800722a:	4922      	ldr	r1, [pc, #136]	; (80072b4 <HAL_RCC_ClockConfig+0x1c0>)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	4313      	orrs	r3, r2
 8007230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007232:	4b20      	ldr	r3, [pc, #128]	; (80072b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d001      	beq.n	8007244 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e032      	b.n	80072aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007250:	4b19      	ldr	r3, [pc, #100]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	4916      	ldr	r1, [pc, #88]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 800725e:	4313      	orrs	r3, r2
 8007260:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d009      	beq.n	8007282 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800726e:	4b12      	ldr	r3, [pc, #72]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	490e      	ldr	r1, [pc, #56]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 800727e:	4313      	orrs	r3, r2
 8007280:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007282:	f000 f821 	bl	80072c8 <HAL_RCC_GetSysClockFreq>
 8007286:	4602      	mov	r2, r0
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_RCC_ClockConfig+0x1c4>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	091b      	lsrs	r3, r3, #4
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	490a      	ldr	r1, [pc, #40]	; (80072bc <HAL_RCC_ClockConfig+0x1c8>)
 8007294:	5ccb      	ldrb	r3, [r1, r3]
 8007296:	fa22 f303 	lsr.w	r3, r2, r3
 800729a:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <HAL_RCC_ClockConfig+0x1cc>)
 800729c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <HAL_RCC_ClockConfig+0x1d0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fd fae8 	bl	8004878 <HAL_InitTick>

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40022000 	.word	0x40022000
 80072b8:	40021000 	.word	0x40021000
 80072bc:	0800dfe8 	.word	0x0800dfe8
 80072c0:	20000010 	.word	0x20000010
 80072c4:	20000014 	.word	0x20000014

080072c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072c8:	b490      	push	{r4, r7}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80072ce:	4b29      	ldr	r3, [pc, #164]	; (8007374 <HAL_RCC_GetSysClockFreq+0xac>)
 80072d0:	1d3c      	adds	r4, r7, #4
 80072d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80072d8:	f240 2301 	movw	r3, #513	; 0x201
 80072dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	61fb      	str	r3, [r7, #28]
 80072e2:	2300      	movs	r3, #0
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	2300      	movs	r3, #0
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80072f2:	4b21      	ldr	r3, [pc, #132]	; (8007378 <HAL_RCC_GetSysClockFreq+0xb0>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f003 030c 	and.w	r3, r3, #12
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d002      	beq.n	8007308 <HAL_RCC_GetSysClockFreq+0x40>
 8007302:	2b08      	cmp	r3, #8
 8007304:	d003      	beq.n	800730e <HAL_RCC_GetSysClockFreq+0x46>
 8007306:	e02b      	b.n	8007360 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007308:	4b1c      	ldr	r3, [pc, #112]	; (800737c <HAL_RCC_GetSysClockFreq+0xb4>)
 800730a:	623b      	str	r3, [r7, #32]
      break;
 800730c:	e02b      	b.n	8007366 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	0c9b      	lsrs	r3, r3, #18
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	3328      	adds	r3, #40	; 0x28
 8007318:	443b      	add	r3, r7
 800731a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800731e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d012      	beq.n	8007350 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800732a:	4b13      	ldr	r3, [pc, #76]	; (8007378 <HAL_RCC_GetSysClockFreq+0xb0>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	0c5b      	lsrs	r3, r3, #17
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	3328      	adds	r3, #40	; 0x28
 8007336:	443b      	add	r3, r7
 8007338:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800733c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	4a0e      	ldr	r2, [pc, #56]	; (800737c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007342:	fb03 f202 	mul.w	r2, r3, r2
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	fbb2 f3f3 	udiv	r3, r2, r3
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
 800734e:	e004      	b.n	800735a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	4a0b      	ldr	r2, [pc, #44]	; (8007380 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007354:	fb02 f303 	mul.w	r3, r2, r3
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	623b      	str	r3, [r7, #32]
      break;
 800735e:	e002      	b.n	8007366 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007360:	4b06      	ldr	r3, [pc, #24]	; (800737c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007362:	623b      	str	r3, [r7, #32]
      break;
 8007364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007366:	6a3b      	ldr	r3, [r7, #32]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3728      	adds	r7, #40	; 0x28
 800736c:	46bd      	mov	sp, r7
 800736e:	bc90      	pop	{r4, r7}
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	0800db8c 	.word	0x0800db8c
 8007378:	40021000 	.word	0x40021000
 800737c:	007a1200 	.word	0x007a1200
 8007380:	003d0900 	.word	0x003d0900

08007384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007388:	4b02      	ldr	r3, [pc, #8]	; (8007394 <HAL_RCC_GetHCLKFreq+0x10>)
 800738a:	681b      	ldr	r3, [r3, #0]
}
 800738c:	4618      	mov	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr
 8007394:	20000010 	.word	0x20000010

08007398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800739c:	f7ff fff2 	bl	8007384 <HAL_RCC_GetHCLKFreq>
 80073a0:	4602      	mov	r2, r0
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	0a1b      	lsrs	r3, r3, #8
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	4903      	ldr	r1, [pc, #12]	; (80073bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80073ae:	5ccb      	ldrb	r3, [r1, r3]
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40021000 	.word	0x40021000
 80073bc:	0800dff8 	.word	0x0800dff8

080073c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073c4:	f7ff ffde 	bl	8007384 <HAL_RCC_GetHCLKFreq>
 80073c8:	4602      	mov	r2, r0
 80073ca:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	0adb      	lsrs	r3, r3, #11
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	4903      	ldr	r1, [pc, #12]	; (80073e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073d6:	5ccb      	ldrb	r3, [r1, r3]
 80073d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073dc:	4618      	mov	r0, r3
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	40021000 	.word	0x40021000
 80073e4:	0800dff8 	.word	0x0800dff8

080073e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	220f      	movs	r2, #15
 80073f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073f8:	4b11      	ldr	r3, [pc, #68]	; (8007440 <HAL_RCC_GetClockConfig+0x58>)
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f003 0203 	and.w	r2, r3, #3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <HAL_RCC_GetClockConfig+0x58>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <HAL_RCC_GetClockConfig+0x58>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800741c:	4b08      	ldr	r3, [pc, #32]	; (8007440 <HAL_RCC_GetClockConfig+0x58>)
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	08db      	lsrs	r3, r3, #3
 8007422:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800742a:	4b06      	ldr	r3, [pc, #24]	; (8007444 <HAL_RCC_GetClockConfig+0x5c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0207 	and.w	r2, r3, #7
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	bc80      	pop	{r7}
 800743e:	4770      	bx	lr
 8007440:	40021000 	.word	0x40021000
 8007444:	40022000 	.word	0x40022000

08007448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007450:	4b0a      	ldr	r3, [pc, #40]	; (800747c <RCC_Delay+0x34>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <RCC_Delay+0x38>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	0a5b      	lsrs	r3, r3, #9
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007464:	bf00      	nop
  }
  while (Delay --);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1e5a      	subs	r2, r3, #1
 800746a:	60fa      	str	r2, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f9      	bne.n	8007464 <RCC_Delay+0x1c>
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	20000010 	.word	0x20000010
 8007480:	10624dd3 	.word	0x10624dd3

08007484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e076      	b.n	8007584 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	d108      	bne.n	80074b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a6:	d009      	beq.n	80074bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	61da      	str	r2, [r3, #28]
 80074ae:	e005      	b.n	80074bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fd f8e8 	bl	80046ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007540:	ea42 0103 	orr.w	r1, r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	0c1a      	lsrs	r2, r3, #16
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f002 0204 	and.w	r2, r2, #4
 8007562:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69da      	ldr	r2, [r3, #28]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007572:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	603b      	str	r3, [r7, #0]
 8007598:	4613      	mov	r3, r2
 800759a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_SPI_Transmit+0x22>
 80075aa:	2302      	movs	r3, #2
 80075ac:	e126      	b.n	80077fc <HAL_SPI_Transmit+0x270>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075b6:	f7fd fab3 	bl	8004b20 <HAL_GetTick>
 80075ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d002      	beq.n	80075d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
 80075ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075d0:	e10b      	b.n	80077ea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_SPI_Transmit+0x52>
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075e2:	e102      	b.n	80077ea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2203      	movs	r2, #3
 80075e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	88fa      	ldrh	r2, [r7, #6]
 8007602:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800762a:	d10f      	bne.n	800764c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800763a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800764a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b40      	cmp	r3, #64	; 0x40
 8007658:	d007      	beq.n	800766a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007672:	d14b      	bne.n	800770c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_SPI_Transmit+0xf6>
 800767c:	8afb      	ldrh	r3, [r7, #22]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d13e      	bne.n	8007700 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007686:	881a      	ldrh	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	1c9a      	adds	r2, r3, #2
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076a6:	e02b      	b.n	8007700 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d112      	bne.n	80076dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	881a      	ldrh	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	1c9a      	adds	r2, r3, #2
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80076da:	e011      	b.n	8007700 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076dc:	f7fd fa20 	bl	8004b20 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d803      	bhi.n	80076f4 <HAL_SPI_Transmit+0x168>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f2:	d102      	bne.n	80076fa <HAL_SPI_Transmit+0x16e>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d102      	bne.n	8007700 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076fe:	e074      	b.n	80077ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007704:	b29b      	uxth	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1ce      	bne.n	80076a8 <HAL_SPI_Transmit+0x11c>
 800770a:	e04c      	b.n	80077a6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <HAL_SPI_Transmit+0x18e>
 8007714:	8afb      	ldrh	r3, [r7, #22]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d140      	bne.n	800779c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	330c      	adds	r3, #12
 8007724:	7812      	ldrb	r2, [r2, #0]
 8007726:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007740:	e02c      	b.n	800779c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b02      	cmp	r3, #2
 800774e:	d113      	bne.n	8007778 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	330c      	adds	r3, #12
 800775a:	7812      	ldrb	r2, [r2, #0]
 800775c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	86da      	strh	r2, [r3, #54]	; 0x36
 8007776:	e011      	b.n	800779c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007778:	f7fd f9d2 	bl	8004b20 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d803      	bhi.n	8007790 <HAL_SPI_Transmit+0x204>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800778e:	d102      	bne.n	8007796 <HAL_SPI_Transmit+0x20a>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	77fb      	strb	r3, [r7, #31]
          goto error;
 800779a:	e026      	b.n	80077ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1cd      	bne.n	8007742 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 f9b6 	bl	8007b1c <SPI_EndRxTxTransaction>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2220      	movs	r2, #32
 80077ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077c4:	2300      	movs	r3, #0
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	77fb      	strb	r3, [r7, #31]
 80077e6:	e000      	b.n	80077ea <HAL_SPI_Transmit+0x25e>
  }

error:
 80077e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	099b      	lsrs	r3, r3, #6
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10f      	bne.n	8007848 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	099b      	lsrs	r3, r3, #6
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d004      	beq.n	8007848 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
    return;
 8007846:	e0be      	b.n	80079c6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	085b      	lsrs	r3, r3, #1
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <HAL_SPI_IRQHandler+0x66>
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	09db      	lsrs	r3, r3, #7
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
    return;
 8007868:	e0ad      	b.n	80079c6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_SPI_IRQHandler+0x80>
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	099b      	lsrs	r3, r3, #6
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 80a1 	beq.w	80079c6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	095b      	lsrs	r3, r3, #5
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 809a 	beq.w	80079c6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	099b      	lsrs	r3, r3, #6
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d023      	beq.n	80078e6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d011      	beq.n	80078ce <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ae:	f043 0204 	orr.w	r2, r3, #4
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	e00b      	b.n	80078e6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	613b      	str	r3, [r7, #16]
 80078e2:	693b      	ldr	r3, [r7, #16]
        return;
 80078e4:	e06f      	b.n	80079c6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d014      	beq.n	800791c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f6:	f043 0201 	orr.w	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007920:	2b00      	cmp	r3, #0
 8007922:	d04f      	beq.n	80079c4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007932:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <HAL_SPI_IRQHandler+0x14c>
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d034      	beq.n	80079ba <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0203 	bic.w	r2, r2, #3
 800795e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d011      	beq.n	800798c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796c:	4a17      	ldr	r2, [pc, #92]	; (80079cc <HAL_SPI_IRQHandler+0x1c8>)
 800796e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007974:	4618      	mov	r0, r3
 8007976:	f7fd fa1b 	bl	8004db0 <HAL_DMA_Abort_IT>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007990:	2b00      	cmp	r3, #0
 8007992:	d016      	beq.n	80079c2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007998:	4a0c      	ldr	r2, [pc, #48]	; (80079cc <HAL_SPI_IRQHandler+0x1c8>)
 800799a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fd fa05 	bl	8004db0 <HAL_DMA_Abort_IT>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80079b8:	e003      	b.n	80079c2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f808 	bl	80079d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80079c0:	e000      	b.n	80079c4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80079c2:	bf00      	nop
    return;
 80079c4:	bf00      	nop
  }
}
 80079c6:	3720      	adds	r7, #32
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	080079e3 	.word	0x080079e3

080079d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr

080079e2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff ffe7 	bl	80079d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a1c:	f7fd f880 	bl	8004b20 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4413      	add	r3, r2
 8007a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a2c:	f7fd f878 	bl	8004b20 <HAL_GetTick>
 8007a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a32:	4b39      	ldr	r3, [pc, #228]	; (8007b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	015b      	lsls	r3, r3, #5
 8007a38:	0d1b      	lsrs	r3, r3, #20
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	fb02 f303 	mul.w	r3, r2, r3
 8007a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a42:	e054      	b.n	8007aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a4a:	d050      	beq.n	8007aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a4c:	f7fd f868 	bl	8004b20 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d902      	bls.n	8007a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d13d      	bne.n	8007ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a7a:	d111      	bne.n	8007aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a84:	d004      	beq.n	8007a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a8e:	d107      	bne.n	8007aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa8:	d10f      	bne.n	8007aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e017      	b.n	8007b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4013      	ands	r3, r2
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	bf0c      	ite	eq
 8007afe:	2301      	moveq	r3, #1
 8007b00:	2300      	movne	r3, #0
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d19b      	bne.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000010 	.word	0x20000010

08007b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2180      	movs	r1, #128	; 0x80
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff ff6a 	bl	8007a0c <SPI_WaitFlagStateUntilTimeout>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	f043 0220 	orr.w	r2, r3, #32
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e000      	b.n	8007b50 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e041      	b.n	8007bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d106      	bne.n	8007b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fc fde6 	bl	8004750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f000 fa9e 	bl	80080d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d001      	beq.n	8007c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e03a      	b.n	8007c86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a18      	ldr	r2, [pc, #96]	; (8007c90 <HAL_TIM_Base_Start_IT+0x98>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00e      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x58>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3a:	d009      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x58>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x58>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a13      	ldr	r2, [pc, #76]	; (8007c98 <HAL_TIM_Base_Start_IT+0xa0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d111      	bne.n	8007c74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b06      	cmp	r3, #6
 8007c60:	d010      	beq.n	8007c84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0201 	orr.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c72:	e007      	b.n	8007c84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0201 	orr.w	r2, r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr
 8007c90:	40012c00 	.word	0x40012c00
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40000800 	.word	0x40000800

08007c9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0201 	bic.w	r2, r2, #1
 8007cb2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10f      	bne.n	8007ce4 <HAL_TIM_Base_Stop_IT+0x48>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6a1a      	ldr	r2, [r3, #32]
 8007cca:	f240 4344 	movw	r3, #1092	; 0x444
 8007cce:	4013      	ands	r3, r2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d107      	bne.n	8007ce4 <HAL_TIM_Base_Stop_IT+0x48>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0201 	bic.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d122      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d11b      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0202 	mvn.w	r2, #2
 8007d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f9b1 	bl	80080a2 <HAL_TIM_IC_CaptureCallback>
 8007d40:	e005      	b.n	8007d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9a4 	bl	8008090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f9b3 	bl	80080b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d122      	bne.n	8007da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d11b      	bne.n	8007da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0204 	mvn.w	r2, #4
 8007d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f987 	bl	80080a2 <HAL_TIM_IC_CaptureCallback>
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f97a 	bl	8008090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f989 	bl	80080b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d122      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d11b      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0208 	mvn.w	r2, #8
 8007dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f95d 	bl	80080a2 <HAL_TIM_IC_CaptureCallback>
 8007de8:	e005      	b.n	8007df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f950 	bl	8008090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f95f 	bl	80080b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d122      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0310 	and.w	r3, r3, #16
 8007e14:	2b10      	cmp	r3, #16
 8007e16:	d11b      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0210 	mvn.w	r2, #16
 8007e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2208      	movs	r2, #8
 8007e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f933 	bl	80080a2 <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f926 	bl	8008090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f935 	bl	80080b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d10e      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d107      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0201 	mvn.w	r2, #1
 8007e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fc fada 	bl	8004430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e86:	2b80      	cmp	r3, #128	; 0x80
 8007e88:	d10e      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e94:	2b80      	cmp	r3, #128	; 0x80
 8007e96:	d107      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa77 	bl	8008396 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb2:	2b40      	cmp	r3, #64	; 0x40
 8007eb4:	d10e      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	d107      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f8f9 	bl	80080c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d10e      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d107      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0220 	mvn.w	r2, #32
 8007ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa42 	bl	8008384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <HAL_TIM_ConfigClockSource+0x18>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e0b3      	b.n	8008088 <HAL_TIM_ConfigClockSource+0x180>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f58:	d03e      	beq.n	8007fd8 <HAL_TIM_ConfigClockSource+0xd0>
 8007f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f5e:	f200 8087 	bhi.w	8008070 <HAL_TIM_ConfigClockSource+0x168>
 8007f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f66:	f000 8085 	beq.w	8008074 <HAL_TIM_ConfigClockSource+0x16c>
 8007f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6e:	d87f      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x168>
 8007f70:	2b70      	cmp	r3, #112	; 0x70
 8007f72:	d01a      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0xa2>
 8007f74:	2b70      	cmp	r3, #112	; 0x70
 8007f76:	d87b      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x168>
 8007f78:	2b60      	cmp	r3, #96	; 0x60
 8007f7a:	d050      	beq.n	800801e <HAL_TIM_ConfigClockSource+0x116>
 8007f7c:	2b60      	cmp	r3, #96	; 0x60
 8007f7e:	d877      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x168>
 8007f80:	2b50      	cmp	r3, #80	; 0x50
 8007f82:	d03c      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0xf6>
 8007f84:	2b50      	cmp	r3, #80	; 0x50
 8007f86:	d873      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x168>
 8007f88:	2b40      	cmp	r3, #64	; 0x40
 8007f8a:	d058      	beq.n	800803e <HAL_TIM_ConfigClockSource+0x136>
 8007f8c:	2b40      	cmp	r3, #64	; 0x40
 8007f8e:	d86f      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x168>
 8007f90:	2b30      	cmp	r3, #48	; 0x30
 8007f92:	d064      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x156>
 8007f94:	2b30      	cmp	r3, #48	; 0x30
 8007f96:	d86b      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x168>
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d060      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x156>
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	d867      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x168>
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d05c      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x156>
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d05a      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007fa8:	e062      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6899      	ldr	r1, [r3, #8]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f000 f966 	bl	800828a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	609a      	str	r2, [r3, #8]
      break;
 8007fd6:	e04e      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	6899      	ldr	r1, [r3, #8]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f000 f94f 	bl	800828a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ffa:	609a      	str	r2, [r3, #8]
      break;
 8007ffc:	e03b      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6859      	ldr	r1, [r3, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	461a      	mov	r2, r3
 800800c:	f000 f8c6 	bl	800819c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2150      	movs	r1, #80	; 0x50
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f91d 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 800801c:	e02b      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6859      	ldr	r1, [r3, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	461a      	mov	r2, r3
 800802c:	f000 f8e4 	bl	80081f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2160      	movs	r1, #96	; 0x60
 8008036:	4618      	mov	r0, r3
 8008038:	f000 f90d 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 800803c:	e01b      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6859      	ldr	r1, [r3, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	461a      	mov	r2, r3
 800804c:	f000 f8a6 	bl	800819c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2140      	movs	r1, #64	; 0x40
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f8fd 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 800805c:	e00b      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f000 f8f4 	bl	8008256 <TIM_ITRx_SetConfig>
        break;
 800806e:	e002      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008070:	bf00      	nop
 8008072:	e000      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008074:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr

080080a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bc80      	pop	{r7}
 80080b2:	4770      	bx	lr

080080b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bc80      	pop	{r7}
 80080c4:	4770      	bx	lr

080080c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bc80      	pop	{r7}
 80080d6:	4770      	bx	lr

080080d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a29      	ldr	r2, [pc, #164]	; (8008190 <TIM_Base_SetConfig+0xb8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00b      	beq.n	8008108 <TIM_Base_SetConfig+0x30>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f6:	d007      	beq.n	8008108 <TIM_Base_SetConfig+0x30>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a26      	ldr	r2, [pc, #152]	; (8008194 <TIM_Base_SetConfig+0xbc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_Base_SetConfig+0x30>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a25      	ldr	r2, [pc, #148]	; (8008198 <TIM_Base_SetConfig+0xc0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d108      	bne.n	800811a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a1c      	ldr	r2, [pc, #112]	; (8008190 <TIM_Base_SetConfig+0xb8>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00b      	beq.n	800813a <TIM_Base_SetConfig+0x62>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008128:	d007      	beq.n	800813a <TIM_Base_SetConfig+0x62>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a19      	ldr	r2, [pc, #100]	; (8008194 <TIM_Base_SetConfig+0xbc>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d003      	beq.n	800813a <TIM_Base_SetConfig+0x62>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a18      	ldr	r2, [pc, #96]	; (8008198 <TIM_Base_SetConfig+0xc0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d108      	bne.n	800814c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689a      	ldr	r2, [r3, #8]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a07      	ldr	r2, [pc, #28]	; (8008190 <TIM_Base_SetConfig+0xb8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d103      	bne.n	8008180 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	615a      	str	r2, [r3, #20]
}
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr
 8008190:	40012c00 	.word	0x40012c00
 8008194:	40000400 	.word	0x40000400
 8008198:	40000800 	.word	0x40000800

0800819c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	f023 0201 	bic.w	r2, r3, #1
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f023 030a 	bic.w	r3, r3, #10
 80081d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	621a      	str	r2, [r3, #32]
}
 80081ee:	bf00      	nop
 80081f0:	371c      	adds	r7, #28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bc80      	pop	{r7}
 80081f6:	4770      	bx	lr

080081f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	f023 0210 	bic.w	r2, r3, #16
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008222:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	031b      	lsls	r3, r3, #12
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	621a      	str	r2, [r3, #32]
}
 800824c:	bf00      	nop
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	bc80      	pop	{r7}
 8008254:	4770      	bx	lr

08008256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	f043 0307 	orr.w	r3, r3, #7
 8008278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	609a      	str	r2, [r3, #8]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	bc80      	pop	{r7}
 8008288:	4770      	bx	lr

0800828a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800828a:	b480      	push	{r7}
 800828c:	b087      	sub	sp, #28
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	021a      	lsls	r2, r3, #8
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	431a      	orrs	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	609a      	str	r2, [r3, #8]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082dc:	2302      	movs	r3, #2
 80082de:	e046      	b.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a16      	ldr	r2, [pc, #88]	; (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d00e      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832c:	d009      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a12      	ldr	r2, [pc, #72]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d004      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a10      	ldr	r2, [pc, #64]	; (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d10c      	bne.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4313      	orrs	r3, r2
 8008352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr
 8008378:	40012c00 	.word	0x40012c00
 800837c:	40000400 	.word	0x40000400
 8008380:	40000800 	.word	0x40000800

08008384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr

08008396 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr

080083a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e03f      	b.n	800843a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fc f9fe 	bl	80047d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2224      	movs	r2, #36	; 0x24
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68da      	ldr	r2, [r3, #12]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fb8d 	bl	8008b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	695a      	ldr	r2, [r3, #20]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008442:	b480      	push	{r7}
 8008444:	b085      	sub	sp, #20
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	4613      	mov	r3, r2
 800844e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b20      	cmp	r3, #32
 800845a:	d130      	bne.n	80084be <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <HAL_UART_Transmit_IT+0x26>
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e029      	b.n	80084c0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <HAL_UART_Transmit_IT+0x38>
 8008476:	2302      	movs	r3, #2
 8008478:	e022      	b.n	80084c0 <HAL_UART_Transmit_IT+0x7e>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	88fa      	ldrh	r2, [r7, #6]
 8008492:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2221      	movs	r2, #33	; 0x21
 800849e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084b8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	e000      	b.n	80084c0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80084be:	2302      	movs	r3, #2
  }
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr
	...

080084cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	; 0x28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10d      	bne.n	800851e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b00      	cmp	r3, #0
 800850a:	d008      	beq.n	800851e <HAL_UART_IRQHandler+0x52>
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa4f 	bl	80089ba <UART_Receive_IT>
      return;
 800851c:	e17b      	b.n	8008816 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 80b1 	beq.w	8008688 <HAL_UART_IRQHandler+0x1bc>
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <HAL_UART_IRQHandler+0x70>
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80a6 	beq.w	8008688 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <HAL_UART_IRQHandler+0x90>
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	f043 0201 	orr.w	r2, r3, #1
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <HAL_UART_IRQHandler+0xb0>
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	f043 0202 	orr.w	r2, r3, #2
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <HAL_UART_IRQHandler+0xd0>
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	d005      	beq.n	800859c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008594:	f043 0204 	orr.w	r2, r3, #4
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00f      	beq.n	80085c6 <HAL_UART_IRQHandler+0xfa>
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	f003 0320 	and.w	r3, r3, #32
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <HAL_UART_IRQHandler+0xee>
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	f043 0208 	orr.w	r2, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 811e 	beq.w	800880c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <HAL_UART_IRQHandler+0x11e>
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	f003 0320 	and.w	r3, r3, #32
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f9e8 	bl	80089ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	bf14      	ite	ne
 80085f8:	2301      	movne	r3, #1
 80085fa:	2300      	moveq	r3, #0
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <HAL_UART_IRQHandler+0x146>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d031      	beq.n	8008676 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f92a 	bl	800886c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b00      	cmp	r3, #0
 8008624:	d023      	beq.n	800866e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	695a      	ldr	r2, [r3, #20]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008634:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	2b00      	cmp	r3, #0
 800863c:	d013      	beq.n	8008666 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	4a76      	ldr	r2, [pc, #472]	; (800881c <HAL_UART_IRQHandler+0x350>)
 8008644:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	4618      	mov	r0, r3
 800864c:	f7fc fbb0 	bl	8004db0 <HAL_DMA_Abort_IT>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d016      	beq.n	8008684 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008664:	e00e      	b.n	8008684 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f8ec 	bl	8008844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800866c:	e00a      	b.n	8008684 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f8e8 	bl	8008844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008674:	e006      	b.n	8008684 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f8e4 	bl	8008844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008682:	e0c3      	b.n	800880c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008684:	bf00      	nop
    return;
 8008686:	e0c1      	b.n	800880c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	2b01      	cmp	r3, #1
 800868e:	f040 80a1 	bne.w	80087d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	f003 0310 	and.w	r3, r3, #16
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 809b 	beq.w	80087d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	f003 0310 	and.w	r3, r3, #16
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8095 	beq.w	80087d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d04e      	beq.n	800876c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80086d8:	8a3b      	ldrh	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 8098 	beq.w	8008810 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086e4:	8a3a      	ldrh	r2, [r7, #16]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	f080 8092 	bcs.w	8008810 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	8a3a      	ldrh	r2, [r7, #16]
 80086f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	d02b      	beq.n	8008754 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800870a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695a      	ldr	r2, [r3, #20]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0201 	bic.w	r2, r2, #1
 800871a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695a      	ldr	r2, [r3, #20]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800872a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0210 	bic.w	r2, r2, #16
 8008748:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	4618      	mov	r0, r3
 8008750:	f7fc faf3 	bl	8004d3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800875c:	b29b      	uxth	r3, r3
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	b29b      	uxth	r3, r3
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f876 	bl	8008856 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800876a:	e051      	b.n	8008810 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008774:	b29b      	uxth	r3, r3
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d047      	beq.n	8008814 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008784:	8a7b      	ldrh	r3, [r7, #18]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d044      	beq.n	8008814 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008798:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	695a      	ldr	r2, [r3, #20]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0201 	bic.w	r2, r2, #1
 80087a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0210 	bic.w	r2, r2, #16
 80087c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087c8:	8a7b      	ldrh	r3, [r7, #18]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f842 	bl	8008856 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80087d2:	e01f      	b.n	8008814 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d008      	beq.n	80087f0 <HAL_UART_IRQHandler+0x324>
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f87f 	bl	80088ec <UART_Transmit_IT>
    return;
 80087ee:	e012      	b.n	8008816 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00d      	beq.n	8008816 <HAL_UART_IRQHandler+0x34a>
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d008      	beq.n	8008816 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f8c0 	bl	800898a <UART_EndTransmit_IT>
    return;
 800880a:	e004      	b.n	8008816 <HAL_UART_IRQHandler+0x34a>
    return;
 800880c:	bf00      	nop
 800880e:	e002      	b.n	8008816 <HAL_UART_IRQHandler+0x34a>
      return;
 8008810:	bf00      	nop
 8008812:	e000      	b.n	8008816 <HAL_UART_IRQHandler+0x34a>
      return;
 8008814:	bf00      	nop
  }
}
 8008816:	3728      	adds	r7, #40	; 0x28
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	080088c5 	.word	0x080088c5

08008820 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	bc80      	pop	{r7}
 8008830:	4770      	bx	lr

08008832 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr

08008844 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr

08008856 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr

0800886c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008882:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695a      	ldr	r2, [r3, #20]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0201 	bic.w	r2, r2, #1
 8008892:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	2b01      	cmp	r3, #1
 800889a:	d107      	bne.n	80088ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0210 	bic.w	r2, r2, #16
 80088aa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	bc80      	pop	{r7}
 80088c2:	4770      	bx	lr

080088c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7ff ffb0 	bl	8008844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088e4:	bf00      	nop
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b21      	cmp	r3, #33	; 0x21
 80088fe:	d13e      	bne.n	800897e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	d114      	bne.n	8008934 <UART_Transmit_IT+0x48>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d110      	bne.n	8008934 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008926:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	1c9a      	adds	r2, r3, #2
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]
 8008932:	e008      	b.n	8008946 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	1c59      	adds	r1, r3, #1
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6211      	str	r1, [r2, #32]
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800894a:	b29b      	uxth	r3, r3
 800894c:	3b01      	subs	r3, #1
 800894e:	b29b      	uxth	r3, r3
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	4619      	mov	r1, r3
 8008954:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10f      	bne.n	800897a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008968:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008978:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	e000      	b.n	8008980 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800897e:	2302      	movs	r3, #2
  }
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr

0800898a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff ff38 	bl	8008820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b22      	cmp	r3, #34	; 0x22
 80089cc:	f040 8099 	bne.w	8008b02 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d8:	d117      	bne.n	8008a0a <UART_Receive_IT+0x50>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d113      	bne.n	8008a0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	1c9a      	adds	r2, r3, #2
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	629a      	str	r2, [r3, #40]	; 0x28
 8008a08:	e026      	b.n	8008a58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a1c:	d007      	beq.n	8008a2e <UART_Receive_IT+0x74>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <UART_Receive_IT+0x82>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	701a      	strb	r2, [r3, #0]
 8008a3a:	e008      	b.n	8008a4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	4619      	mov	r1, r3
 8008a66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d148      	bne.n	8008afe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0220 	bic.w	r2, r2, #32
 8008a7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	695a      	ldr	r2, [r3, #20]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0201 	bic.w	r2, r2, #1
 8008a9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d123      	bne.n	8008af4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0210 	bic.w	r2, r2, #16
 8008ac0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	d10a      	bne.n	8008ae6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff feb2 	bl	8008856 <HAL_UARTEx_RxEventCallback>
 8008af2:	e002      	b.n	8008afa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff fe9c 	bl	8008832 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	e002      	b.n	8008b04 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e000      	b.n	8008b04 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008b02:	2302      	movs	r3, #2
  }
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689a      	ldr	r2, [r3, #8]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008b46:	f023 030c 	bic.w	r3, r3, #12
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	6812      	ldr	r2, [r2, #0]
 8008b4e:	68b9      	ldr	r1, [r7, #8]
 8008b50:	430b      	orrs	r3, r1
 8008b52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699a      	ldr	r2, [r3, #24]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a2c      	ldr	r2, [pc, #176]	; (8008c20 <UART_SetConfig+0x114>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d103      	bne.n	8008b7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008b74:	f7fe fc24 	bl	80073c0 <HAL_RCC_GetPCLK2Freq>
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	e002      	b.n	8008b82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008b7c:	f7fe fc0c 	bl	8007398 <HAL_RCC_GetPCLK1Freq>
 8008b80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009a      	lsls	r2, r3, #2
 8008b8c:	441a      	add	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b98:	4a22      	ldr	r2, [pc, #136]	; (8008c24 <UART_SetConfig+0x118>)
 8008b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9e:	095b      	lsrs	r3, r3, #5
 8008ba0:	0119      	lsls	r1, r3, #4
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009a      	lsls	r2, r3, #2
 8008bac:	441a      	add	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bb8:	4b1a      	ldr	r3, [pc, #104]	; (8008c24 <UART_SetConfig+0x118>)
 8008bba:	fba3 0302 	umull	r0, r3, r3, r2
 8008bbe:	095b      	lsrs	r3, r3, #5
 8008bc0:	2064      	movs	r0, #100	; 0x64
 8008bc2:	fb00 f303 	mul.w	r3, r0, r3
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	011b      	lsls	r3, r3, #4
 8008bca:	3332      	adds	r3, #50	; 0x32
 8008bcc:	4a15      	ldr	r2, [pc, #84]	; (8008c24 <UART_SetConfig+0x118>)
 8008bce:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bd8:	4419      	add	r1, r3
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	009a      	lsls	r2, r3, #2
 8008be4:	441a      	add	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bf0:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <UART_SetConfig+0x118>)
 8008bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8008bf6:	095b      	lsrs	r3, r3, #5
 8008bf8:	2064      	movs	r0, #100	; 0x64
 8008bfa:	fb00 f303 	mul.w	r3, r0, r3
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	011b      	lsls	r3, r3, #4
 8008c02:	3332      	adds	r3, #50	; 0x32
 8008c04:	4a07      	ldr	r2, [pc, #28]	; (8008c24 <UART_SetConfig+0x118>)
 8008c06:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	f003 020f 	and.w	r2, r3, #15
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	440a      	add	r2, r1
 8008c16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008c18:	bf00      	nop
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	40013800 	.word	0x40013800
 8008c24:	51eb851f 	.word	0x51eb851f

08008c28 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c2e:	f3ef 8305 	mrs	r3, IPSR
 8008c32:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10f      	bne.n	8008c5a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c3e:	607b      	str	r3, [r7, #4]
  return(result);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <osKernelInitialize+0x32>
 8008c46:	4b10      	ldr	r3, [pc, #64]	; (8008c88 <osKernelInitialize+0x60>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d109      	bne.n	8008c62 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8008c52:	603b      	str	r3, [r7, #0]
  return(result);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008c5a:	f06f 0305 	mvn.w	r3, #5
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	e00c      	b.n	8008c7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c62:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <osKernelInitialize+0x60>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d105      	bne.n	8008c76 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <osKernelInitialize+0x60>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	e002      	b.n	8008c7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bc80      	pop	{r7}
 8008c86:	4770      	bx	lr
 8008c88:	20000b74 	.word	0x20000b74

08008c8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c92:	f3ef 8305 	mrs	r3, IPSR
 8008c96:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10f      	bne.n	8008cbe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8008ca2:	607b      	str	r3, [r7, #4]
  return(result);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d109      	bne.n	8008cbe <osKernelStart+0x32>
 8008caa:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <osKernelStart+0x64>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d109      	bne.n	8008cc6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8008cb6:	603b      	str	r3, [r7, #0]
  return(result);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008cbe:	f06f 0305 	mvn.w	r3, #5
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	e00e      	b.n	8008ce4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cc6:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <osKernelStart+0x64>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d107      	bne.n	8008cde <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008cce:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <osKernelStart+0x64>)
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008cd4:	f002 f95e 	bl	800af94 <vTaskStartScheduler>
      stat = osOK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	e002      	b.n	8008ce4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ce2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000b74 	.word	0x20000b74

08008cf4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b092      	sub	sp, #72	; 0x48
 8008cf8:	af04      	add	r7, sp, #16
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d04:	f3ef 8305 	mrs	r3, IPSR
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f040 8094 	bne.w	8008e3a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d12:	f3ef 8310 	mrs	r3, PRIMASK
 8008d16:	623b      	str	r3, [r7, #32]
  return(result);
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f040 808d 	bne.w	8008e3a <osThreadNew+0x146>
 8008d20:	4b48      	ldr	r3, [pc, #288]	; (8008e44 <osThreadNew+0x150>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d106      	bne.n	8008d36 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d28:	f3ef 8311 	mrs	r3, BASEPRI
 8008d2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f040 8082 	bne.w	8008e3a <osThreadNew+0x146>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d07e      	beq.n	8008e3a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008d3c:	2380      	movs	r3, #128	; 0x80
 8008d3e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008d40:	2318      	movs	r3, #24
 8008d42:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008d44:	2300      	movs	r3, #0
 8008d46:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008d48:	f107 031b 	add.w	r3, r7, #27
 8008d4c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d52:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d045      	beq.n	8008de6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <osThreadNew+0x74>
        name = attr->name;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d008      	beq.n	8008d8e <osThreadNew+0x9a>
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	2b38      	cmp	r3, #56	; 0x38
 8008d80:	d805      	bhi.n	8008d8e <osThreadNew+0x9a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <osThreadNew+0x9e>
        return (NULL);
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e054      	b.n	8008e3c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	089b      	lsrs	r3, r3, #2
 8008da0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00e      	beq.n	8008dc8 <osThreadNew+0xd4>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	2bbf      	cmp	r3, #191	; 0xbf
 8008db0:	d90a      	bls.n	8008dc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d006      	beq.n	8008dc8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <osThreadNew+0xd4>
        mem = 1;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dc6:	e010      	b.n	8008dea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10c      	bne.n	8008dea <osThreadNew+0xf6>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d108      	bne.n	8008dea <osThreadNew+0xf6>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d104      	bne.n	8008dea <osThreadNew+0xf6>
          mem = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008de4:	e001      	b.n	8008dea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d110      	bne.n	8008e12 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008df8:	9202      	str	r2, [sp, #8]
 8008dfa:	9301      	str	r3, [sp, #4]
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f001 fd80 	bl	800a90c <xTaskCreateStatic>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	617b      	str	r3, [r7, #20]
 8008e10:	e013      	b.n	8008e3a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d110      	bne.n	8008e3a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	f107 0314 	add.w	r3, r7, #20
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f001 fdca 	bl	800a9c4 <xTaskCreate>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d001      	beq.n	8008e3a <osThreadNew+0x146>
          hTask = NULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e3a:	697b      	ldr	r3, [r7, #20]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3738      	adds	r7, #56	; 0x38
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20000b74 	.word	0x20000b74

08008e48 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e54:	f3ef 8305 	mrs	r3, IPSR
 8008e58:	617b      	str	r3, [r7, #20]
  return(result);
 8008e5a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10f      	bne.n	8008e80 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e60:	f3ef 8310 	mrs	r3, PRIMASK
 8008e64:	613b      	str	r3, [r7, #16]
  return(result);
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d109      	bne.n	8008e80 <osThreadSuspend+0x38>
 8008e6c:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <osThreadSuspend+0x64>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d109      	bne.n	8008e88 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e74:	f3ef 8311 	mrs	r3, BASEPRI
 8008e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8008e80:	f06f 0305 	mvn.w	r3, #5
 8008e84:	61fb      	str	r3, [r7, #28]
 8008e86:	e00b      	b.n	8008ea0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d103      	bne.n	8008e96 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8008e8e:	f06f 0303 	mvn.w	r3, #3
 8008e92:	61fb      	str	r3, [r7, #28]
 8008e94:	e004      	b.n	8008ea0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8008e9a:	69b8      	ldr	r0, [r7, #24]
 8008e9c:	f001 ff6c 	bl	800ad78 <vTaskSuspend>
  }

  return (stat);
 8008ea0:	69fb      	ldr	r3, [r7, #28]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3720      	adds	r7, #32
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000b74 	.word	0x20000b74

08008eb0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ebc:	f3ef 8305 	mrs	r3, IPSR
 8008ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8008ec2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10f      	bne.n	8008ee8 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8008ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d109      	bne.n	8008ee8 <osThreadResume+0x38>
 8008ed4:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <osThreadResume+0x64>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d109      	bne.n	8008ef0 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008edc:	f3ef 8311 	mrs	r3, BASEPRI
 8008ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <osThreadResume+0x40>
    stat = osErrorISR;
 8008ee8:	f06f 0305 	mvn.w	r3, #5
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	e00b      	b.n	8008f08 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <osThreadResume+0x4e>
    stat = osErrorParameter;
 8008ef6:	f06f 0303 	mvn.w	r3, #3
 8008efa:	61fb      	str	r3, [r7, #28]
 8008efc:	e004      	b.n	8008f08 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8008f02:	69b8      	ldr	r0, [r7, #24]
 8008f04:	f001 ffe8 	bl	800aed8 <vTaskResume>
  }

  return (stat);
 8008f08:	69fb      	ldr	r3, [r7, #28]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3720      	adds	r7, #32
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000b74 	.word	0x20000b74

08008f18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f20:	f3ef 8305 	mrs	r3, IPSR
 8008f24:	613b      	str	r3, [r7, #16]
  return(result);
 8008f26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10f      	bne.n	8008f4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f30:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d109      	bne.n	8008f4c <osDelay+0x34>
 8008f38:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <osDelay+0x58>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d109      	bne.n	8008f54 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f40:	f3ef 8311 	mrs	r3, BASEPRI
 8008f44:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <osDelay+0x3c>
    stat = osErrorISR;
 8008f4c:	f06f 0305 	mvn.w	r3, #5
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	e007      	b.n	8008f64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 fe88 	bl	800ac74 <vTaskDelay>
    }
  }

  return (stat);
 8008f64:	697b      	ldr	r3, [r7, #20]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000b74 	.word	0x20000b74

08008f74 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f80:	f3ef 8305 	mrs	r3, IPSR
 8008f84:	613b      	str	r3, [r7, #16]
  return(result);
 8008f86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f040 8085 	bne.w	8009098 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f92:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d17e      	bne.n	8009098 <osMutexNew+0x124>
 8008f9a:	4b42      	ldr	r3, [pc, #264]	; (80090a4 <osMutexNew+0x130>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d105      	bne.n	8008fae <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8008fa6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d174      	bne.n	8009098 <osMutexNew+0x124>
    if (attr != NULL) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <osMutexNew+0x48>
      type = attr->attr_bits;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	623b      	str	r3, [r7, #32]
 8008fba:	e001      	b.n	8008fc0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <osMutexNew+0x5c>
      rmtx = 1U;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	61fb      	str	r3, [r7, #28]
 8008fce:	e001      	b.n	8008fd4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	f003 0308 	and.w	r3, r3, #8
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d15c      	bne.n	8009098 <osMutexNew+0x124>
      mem = -1;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fe2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d015      	beq.n	8009016 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d006      	beq.n	8009000 <osMutexNew+0x8c>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	2b4f      	cmp	r3, #79	; 0x4f
 8008ff8:	d902      	bls.n	8009000 <osMutexNew+0x8c>
          mem = 1;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	61bb      	str	r3, [r7, #24]
 8008ffe:	e00c      	b.n	800901a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d108      	bne.n	800901a <osMutexNew+0xa6>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d104      	bne.n	800901a <osMutexNew+0xa6>
            mem = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	e001      	b.n	800901a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d112      	bne.n	8009046 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d007      	beq.n	8009036 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	4619      	mov	r1, r3
 800902c:	2004      	movs	r0, #4
 800902e:	f000 fd1d 	bl	8009a6c <xQueueCreateMutexStatic>
 8009032:	6278      	str	r0, [r7, #36]	; 0x24
 8009034:	e016      	b.n	8009064 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	4619      	mov	r1, r3
 800903c:	2001      	movs	r0, #1
 800903e:	f000 fd15 	bl	8009a6c <xQueueCreateMutexStatic>
 8009042:	6278      	str	r0, [r7, #36]	; 0x24
 8009044:	e00e      	b.n	8009064 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10b      	bne.n	8009064 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d004      	beq.n	800905c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009052:	2004      	movs	r0, #4
 8009054:	f000 fcf2 	bl	8009a3c <xQueueCreateMutex>
 8009058:	6278      	str	r0, [r7, #36]	; 0x24
 800905a:	e003      	b.n	8009064 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800905c:	2001      	movs	r0, #1
 800905e:	f000 fced 	bl	8009a3c <xQueueCreateMutex>
 8009062:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00c      	beq.n	8009084 <osMutexNew+0x110>
        if (attr != NULL) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <osMutexNew+0x104>
          name = attr->name;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	e001      	b.n	800907c <osMutexNew+0x108>
        } else {
          name = NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800907c:	6979      	ldr	r1, [r7, #20]
 800907e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009080:	f001 fbbe 	bl	800a800 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	2b00      	cmp	r3, #0
 8009088:	d006      	beq.n	8009098 <osMutexNew+0x124>
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d003      	beq.n	8009098 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	f043 0301 	orr.w	r3, r3, #1
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800909a:	4618      	mov	r0, r3
 800909c:	3728      	adds	r7, #40	; 0x28
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20000b74 	.word	0x20000b74

080090a8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f023 0301 	bic.w	r3, r3, #1
 80090b8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090c6:	f3ef 8305 	mrs	r3, IPSR
 80090ca:	613b      	str	r3, [r7, #16]
  return(result);
 80090cc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10f      	bne.n	80090f2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090d2:	f3ef 8310 	mrs	r3, PRIMASK
 80090d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d109      	bne.n	80090f2 <osMutexAcquire+0x4a>
 80090de:	4b20      	ldr	r3, [pc, #128]	; (8009160 <osMutexAcquire+0xb8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d109      	bne.n	80090fa <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090e6:	f3ef 8311 	mrs	r3, BASEPRI
 80090ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <osMutexAcquire+0x52>
    stat = osErrorISR;
 80090f2:	f06f 0305 	mvn.w	r3, #5
 80090f6:	61fb      	str	r3, [r7, #28]
 80090f8:	e02c      	b.n	8009154 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d103      	bne.n	8009108 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009100:	f06f 0303 	mvn.w	r3, #3
 8009104:	61fb      	str	r3, [r7, #28]
 8009106:	e025      	b.n	8009154 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d011      	beq.n	8009132 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	69b8      	ldr	r0, [r7, #24]
 8009112:	f000 fcfa 	bl	8009b0a <xQueueTakeMutexRecursive>
 8009116:	4603      	mov	r3, r0
 8009118:	2b01      	cmp	r3, #1
 800911a:	d01b      	beq.n	8009154 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009122:	f06f 0301 	mvn.w	r3, #1
 8009126:	61fb      	str	r3, [r7, #28]
 8009128:	e014      	b.n	8009154 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800912a:	f06f 0302 	mvn.w	r3, #2
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	e010      	b.n	8009154 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	69b8      	ldr	r0, [r7, #24]
 8009136:	f001 f88d 	bl	800a254 <xQueueSemaphoreTake>
 800913a:	4603      	mov	r3, r0
 800913c:	2b01      	cmp	r3, #1
 800913e:	d009      	beq.n	8009154 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009146:	f06f 0301 	mvn.w	r3, #1
 800914a:	61fb      	str	r3, [r7, #28]
 800914c:	e002      	b.n	8009154 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800914e:	f06f 0302 	mvn.w	r3, #2
 8009152:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009154:	69fb      	ldr	r3, [r7, #28]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3720      	adds	r7, #32
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20000b74 	.word	0x20000b74

08009164 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f023 0301 	bic.w	r3, r3, #1
 8009172:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800917c:	2300      	movs	r3, #0
 800917e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009180:	f3ef 8305 	mrs	r3, IPSR
 8009184:	613b      	str	r3, [r7, #16]
  return(result);
 8009186:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10f      	bne.n	80091ac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800918c:	f3ef 8310 	mrs	r3, PRIMASK
 8009190:	60fb      	str	r3, [r7, #12]
  return(result);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d109      	bne.n	80091ac <osMutexRelease+0x48>
 8009198:	4b19      	ldr	r3, [pc, #100]	; (8009200 <osMutexRelease+0x9c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b02      	cmp	r3, #2
 800919e:	d109      	bne.n	80091b4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091a0:	f3ef 8311 	mrs	r3, BASEPRI
 80091a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80091ac:	f06f 0305 	mvn.w	r3, #5
 80091b0:	61fb      	str	r3, [r7, #28]
 80091b2:	e01f      	b.n	80091f4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80091ba:	f06f 0303 	mvn.w	r3, #3
 80091be:	61fb      	str	r3, [r7, #28]
 80091c0:	e018      	b.n	80091f4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80091c8:	69b8      	ldr	r0, [r7, #24]
 80091ca:	f000 fc6a 	bl	8009aa2 <xQueueGiveMutexRecursive>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d00f      	beq.n	80091f4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80091d4:	f06f 0302 	mvn.w	r3, #2
 80091d8:	61fb      	str	r3, [r7, #28]
 80091da:	e00b      	b.n	80091f4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80091dc:	2300      	movs	r3, #0
 80091de:	2200      	movs	r2, #0
 80091e0:	2100      	movs	r1, #0
 80091e2:	69b8      	ldr	r0, [r7, #24]
 80091e4:	f000 fd32 	bl	8009c4c <xQueueGenericSend>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d002      	beq.n	80091f4 <osMutexRelease+0x90>
        stat = osErrorResource;
 80091ee:	f06f 0302 	mvn.w	r3, #2
 80091f2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80091f4:	69fb      	ldr	r3, [r7, #28]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3720      	adds	r7, #32
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000b74 	.word	0x20000b74

08009204 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009204:	b580      	push	{r7, lr}
 8009206:	b08c      	sub	sp, #48	; 0x30
 8009208:	af02      	add	r7, sp, #8
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009210:	2300      	movs	r3, #0
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009214:	f3ef 8305 	mrs	r3, IPSR
 8009218:	61bb      	str	r3, [r7, #24]
  return(result);
 800921a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800921c:	2b00      	cmp	r3, #0
 800921e:	f040 8086 	bne.w	800932e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009222:	f3ef 8310 	mrs	r3, PRIMASK
 8009226:	617b      	str	r3, [r7, #20]
  return(result);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d17f      	bne.n	800932e <osSemaphoreNew+0x12a>
 800922e:	4b42      	ldr	r3, [pc, #264]	; (8009338 <osSemaphoreNew+0x134>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d105      	bne.n	8009242 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009236:	f3ef 8311 	mrs	r3, BASEPRI
 800923a:	613b      	str	r3, [r7, #16]
  return(result);
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d175      	bne.n	800932e <osSemaphoreNew+0x12a>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d072      	beq.n	800932e <osSemaphoreNew+0x12a>
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	429a      	cmp	r2, r3
 800924e:	d86e      	bhi.n	800932e <osSemaphoreNew+0x12a>
    mem = -1;
 8009250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009254:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d015      	beq.n	8009288 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d006      	beq.n	8009272 <osSemaphoreNew+0x6e>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	2b4f      	cmp	r3, #79	; 0x4f
 800926a:	d902      	bls.n	8009272 <osSemaphoreNew+0x6e>
        mem = 1;
 800926c:	2301      	movs	r3, #1
 800926e:	623b      	str	r3, [r7, #32]
 8009270:	e00c      	b.n	800928c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d108      	bne.n	800928c <osSemaphoreNew+0x88>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d104      	bne.n	800928c <osSemaphoreNew+0x88>
          mem = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	623b      	str	r3, [r7, #32]
 8009286:	e001      	b.n	800928c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009292:	d04c      	beq.n	800932e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d128      	bne.n	80092ec <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800929a:	6a3b      	ldr	r3, [r7, #32]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d10a      	bne.n	80092b6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2203      	movs	r2, #3
 80092a6:	9200      	str	r2, [sp, #0]
 80092a8:	2200      	movs	r2, #0
 80092aa:	2100      	movs	r1, #0
 80092ac:	2001      	movs	r0, #1
 80092ae:	f000 fad3 	bl	8009858 <xQueueGenericCreateStatic>
 80092b2:	6278      	str	r0, [r7, #36]	; 0x24
 80092b4:	e005      	b.n	80092c2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80092b6:	2203      	movs	r2, #3
 80092b8:	2100      	movs	r1, #0
 80092ba:	2001      	movs	r0, #1
 80092bc:	f000 fb43 	bl	8009946 <xQueueGenericCreate>
 80092c0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d022      	beq.n	800930e <osSemaphoreNew+0x10a>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d01f      	beq.n	800930e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80092ce:	2300      	movs	r3, #0
 80092d0:	2200      	movs	r2, #0
 80092d2:	2100      	movs	r1, #0
 80092d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092d6:	f000 fcb9 	bl	8009c4c <xQueueGenericSend>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d016      	beq.n	800930e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80092e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092e2:	f001 f943 	bl	800a56c <vQueueDelete>
            hSemaphore = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
 80092ea:	e010      	b.n	800930e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d108      	bne.n	8009304 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	461a      	mov	r2, r3
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 fc3b 	bl	8009b76 <xQueueCreateCountingSemaphoreStatic>
 8009300:	6278      	str	r0, [r7, #36]	; 0x24
 8009302:	e004      	b.n	800930e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009304:	68b9      	ldr	r1, [r7, #8]
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 fc6c 	bl	8009be4 <xQueueCreateCountingSemaphore>
 800930c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00c      	beq.n	800932e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <osSemaphoreNew+0x11e>
          name = attr->name;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	61fb      	str	r3, [r7, #28]
 8009320:	e001      	b.n	8009326 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009326:	69f9      	ldr	r1, [r7, #28]
 8009328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800932a:	f001 fa69 	bl	800a800 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009330:	4618      	mov	r0, r3
 8009332:	3728      	adds	r7, #40	; 0x28
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20000b74 	.word	0x20000b74

0800933c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d103      	bne.n	800935c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009354:	f06f 0303 	mvn.w	r3, #3
 8009358:	61fb      	str	r3, [r7, #28]
 800935a:	e04b      	b.n	80093f4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800935c:	f3ef 8305 	mrs	r3, IPSR
 8009360:	617b      	str	r3, [r7, #20]
  return(result);
 8009362:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10f      	bne.n	8009388 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009368:	f3ef 8310 	mrs	r3, PRIMASK
 800936c:	613b      	str	r3, [r7, #16]
  return(result);
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d109      	bne.n	8009388 <osSemaphoreAcquire+0x4c>
 8009374:	4b22      	ldr	r3, [pc, #136]	; (8009400 <osSemaphoreAcquire+0xc4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d128      	bne.n	80093ce <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800937c:	f3ef 8311 	mrs	r3, BASEPRI
 8009380:	60fb      	str	r3, [r7, #12]
  return(result);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d022      	beq.n	80093ce <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800938e:	f06f 0303 	mvn.w	r3, #3
 8009392:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009394:	e02d      	b.n	80093f2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8009396:	2300      	movs	r3, #0
 8009398:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800939a:	f107 0308 	add.w	r3, r7, #8
 800939e:	461a      	mov	r2, r3
 80093a0:	2100      	movs	r1, #0
 80093a2:	69b8      	ldr	r0, [r7, #24]
 80093a4:	f001 f862 	bl	800a46c <xQueueReceiveFromISR>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d003      	beq.n	80093b6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80093ae:	f06f 0302 	mvn.w	r3, #2
 80093b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80093b4:	e01d      	b.n	80093f2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d01a      	beq.n	80093f2 <osSemaphoreAcquire+0xb6>
 80093bc:	4b11      	ldr	r3, [pc, #68]	; (8009404 <osSemaphoreAcquire+0xc8>)
 80093be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80093cc:	e011      	b.n	80093f2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	69b8      	ldr	r0, [r7, #24]
 80093d2:	f000 ff3f 	bl	800a254 <xQueueSemaphoreTake>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d00b      	beq.n	80093f4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80093e2:	f06f 0301 	mvn.w	r3, #1
 80093e6:	61fb      	str	r3, [r7, #28]
 80093e8:	e004      	b.n	80093f4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80093ea:	f06f 0302 	mvn.w	r3, #2
 80093ee:	61fb      	str	r3, [r7, #28]
 80093f0:	e000      	b.n	80093f4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80093f2:	bf00      	nop
      }
    }
  }

  return (stat);
 80093f4:	69fb      	ldr	r3, [r7, #28]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000b74 	.word	0x20000b74
 8009404:	e000ed04 	.word	0xe000ed04

08009408 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009414:	2300      	movs	r3, #0
 8009416:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d103      	bne.n	8009426 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800941e:	f06f 0303 	mvn.w	r3, #3
 8009422:	61fb      	str	r3, [r7, #28]
 8009424:	e03e      	b.n	80094a4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009426:	f3ef 8305 	mrs	r3, IPSR
 800942a:	617b      	str	r3, [r7, #20]
  return(result);
 800942c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10f      	bne.n	8009452 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009432:	f3ef 8310 	mrs	r3, PRIMASK
 8009436:	613b      	str	r3, [r7, #16]
  return(result);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <osSemaphoreRelease+0x4a>
 800943e:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <osSemaphoreRelease+0xa8>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d120      	bne.n	8009488 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009446:	f3ef 8311 	mrs	r3, BASEPRI
 800944a:	60fb      	str	r3, [r7, #12]
  return(result);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d01a      	beq.n	8009488 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8009452:	2300      	movs	r3, #0
 8009454:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009456:	f107 0308 	add.w	r3, r7, #8
 800945a:	4619      	mov	r1, r3
 800945c:	69b8      	ldr	r0, [r7, #24]
 800945e:	f000 fd8b 	bl	8009f78 <xQueueGiveFromISR>
 8009462:	4603      	mov	r3, r0
 8009464:	2b01      	cmp	r3, #1
 8009466:	d003      	beq.n	8009470 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009468:	f06f 0302 	mvn.w	r3, #2
 800946c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800946e:	e018      	b.n	80094a2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d015      	beq.n	80094a2 <osSemaphoreRelease+0x9a>
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <osSemaphoreRelease+0xac>)
 8009478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009486:	e00c      	b.n	80094a2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009488:	2300      	movs	r3, #0
 800948a:	2200      	movs	r2, #0
 800948c:	2100      	movs	r1, #0
 800948e:	69b8      	ldr	r0, [r7, #24]
 8009490:	f000 fbdc 	bl	8009c4c <xQueueGenericSend>
 8009494:	4603      	mov	r3, r0
 8009496:	2b01      	cmp	r3, #1
 8009498:	d004      	beq.n	80094a4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800949a:	f06f 0302 	mvn.w	r3, #2
 800949e:	61fb      	str	r3, [r7, #28]
 80094a0:	e000      	b.n	80094a4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80094a2:	bf00      	nop
    }
  }

  return (stat);
 80094a4:	69fb      	ldr	r3, [r7, #28]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3720      	adds	r7, #32
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	20000b74 	.word	0x20000b74
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08c      	sub	sp, #48	; 0x30
 80094bc:	af02      	add	r7, sp, #8
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094c8:	f3ef 8305 	mrs	r3, IPSR
 80094cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80094ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d16f      	bne.n	80095b4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094d4:	f3ef 8310 	mrs	r3, PRIMASK
 80094d8:	617b      	str	r3, [r7, #20]
  return(result);
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d169      	bne.n	80095b4 <osMessageQueueNew+0xfc>
 80094e0:	4b37      	ldr	r3, [pc, #220]	; (80095c0 <osMessageQueueNew+0x108>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d105      	bne.n	80094f4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094e8:	f3ef 8311 	mrs	r3, BASEPRI
 80094ec:	613b      	str	r3, [r7, #16]
  return(result);
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d15f      	bne.n	80095b4 <osMessageQueueNew+0xfc>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d05c      	beq.n	80095b4 <osMessageQueueNew+0xfc>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d059      	beq.n	80095b4 <osMessageQueueNew+0xfc>
    mem = -1;
 8009500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009504:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d029      	beq.n	8009560 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d012      	beq.n	800953a <osMessageQueueNew+0x82>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	2b4f      	cmp	r3, #79	; 0x4f
 800951a:	d90e      	bls.n	800953a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695a      	ldr	r2, [r3, #20]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	429a      	cmp	r2, r3
 8009532:	d302      	bcc.n	800953a <osMessageQueueNew+0x82>
        mem = 1;
 8009534:	2301      	movs	r3, #1
 8009536:	623b      	str	r3, [r7, #32]
 8009538:	e014      	b.n	8009564 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d110      	bne.n	8009564 <osMessageQueueNew+0xac>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10c      	bne.n	8009564 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800954e:	2b00      	cmp	r3, #0
 8009550:	d108      	bne.n	8009564 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d104      	bne.n	8009564 <osMessageQueueNew+0xac>
          mem = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	623b      	str	r3, [r7, #32]
 800955e:	e001      	b.n	8009564 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d10b      	bne.n	8009582 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691a      	ldr	r2, [r3, #16]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	2100      	movs	r1, #0
 8009574:	9100      	str	r1, [sp, #0]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 f96d 	bl	8009858 <xQueueGenericCreateStatic>
 800957e:	6278      	str	r0, [r7, #36]	; 0x24
 8009580:	e008      	b.n	8009594 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d105      	bne.n	8009594 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009588:	2200      	movs	r2, #0
 800958a:	68b9      	ldr	r1, [r7, #8]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f9da 	bl	8009946 <xQueueGenericCreate>
 8009592:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00c      	beq.n	80095b4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	61fb      	str	r3, [r7, #28]
 80095a6:	e001      	b.n	80095ac <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80095a8:	2300      	movs	r3, #0
 80095aa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80095ac:	69f9      	ldr	r1, [r7, #28]
 80095ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095b0:	f001 f926 	bl	800a800 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3728      	adds	r7, #40	; 0x28
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000b74 	.word	0x20000b74

080095c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4a06      	ldr	r2, [pc, #24]	; (80095ec <vApplicationGetIdleTaskMemory+0x28>)
 80095d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	4a05      	ldr	r2, [pc, #20]	; (80095f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80095da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2280      	movs	r2, #128	; 0x80
 80095e0:	601a      	str	r2, [r3, #0]
}
 80095e2:	bf00      	nop
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr
 80095ec:	20000b78 	.word	0x20000b78
 80095f0:	20000c38 	.word	0x20000c38

080095f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4a07      	ldr	r2, [pc, #28]	; (8009620 <vApplicationGetTimerTaskMemory+0x2c>)
 8009604:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	4a06      	ldr	r2, [pc, #24]	; (8009624 <vApplicationGetTimerTaskMemory+0x30>)
 800960a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009612:	601a      	str	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	bc80      	pop	{r7}
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20000e38 	.word	0x20000e38
 8009624:	20000ef8 	.word	0x20000ef8

08009628 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f103 0208 	add.w	r2, r3, #8
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009640:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f103 0208 	add.w	r2, r3, #8
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f103 0208 	add.w	r2, r3, #8
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	bc80      	pop	{r7}
 8009664:	4770      	bx	lr

08009666 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	bc80      	pop	{r7}
 800967c:	4770      	bx	lr

0800967e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800967e:	b480      	push	{r7}
 8009680:	b085      	sub	sp, #20
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	689a      	ldr	r2, [r3, #8]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	601a      	str	r2, [r3, #0]
}
 80096ba:	bf00      	nop
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	bc80      	pop	{r7}
 80096c2:	4770      	bx	lr

080096c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096da:	d103      	bne.n	80096e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e00c      	b.n	80096fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3308      	adds	r3, #8
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	e002      	b.n	80096f2 <vListInsert+0x2e>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d2f6      	bcs.n	80096ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	601a      	str	r2, [r3, #0]
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	bc80      	pop	{r7}
 8009732:	4770      	bx	lr

08009734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	6892      	ldr	r2, [r2, #8]
 800974a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6852      	ldr	r2, [r2, #4]
 8009754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	d103      	bne.n	8009768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	1e5a      	subs	r2, r3, #1
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	bc80      	pop	{r7}
 8009784:	4770      	bx	lr
	...

08009788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80097b2:	f003 f89b 	bl	800c8ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097be:	68f9      	ldr	r1, [r7, #12]
 80097c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097c2:	fb01 f303 	mul.w	r3, r1, r3
 80097c6:	441a      	add	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	3b01      	subs	r3, #1
 80097e4:	68f9      	ldr	r1, [r7, #12]
 80097e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097e8:	fb01 f303 	mul.w	r3, r1, r3
 80097ec:	441a      	add	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	22ff      	movs	r2, #255	; 0xff
 80097f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	22ff      	movs	r2, #255	; 0xff
 80097fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d114      	bne.n	8009832 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d01a      	beq.n	8009846 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3310      	adds	r3, #16
 8009814:	4618      	mov	r0, r3
 8009816:	f001 fef9 	bl	800b60c <xTaskRemoveFromEventList>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d012      	beq.n	8009846 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009820:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <xQueueGenericReset+0xcc>)
 8009822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	e009      	b.n	8009846 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3310      	adds	r3, #16
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fef6 	bl	8009628 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3324      	adds	r3, #36	; 0x24
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff fef1 	bl	8009628 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009846:	f003 f881 	bl	800c94c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800984a:	2301      	movs	r3, #1
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08e      	sub	sp, #56	; 0x38
 800985c:	af02      	add	r7, sp, #8
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	627b      	str	r3, [r7, #36]	; 0x24
}
 800989a:	bf00      	nop
 800989c:	e7fe      	b.n	800989c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <xQueueGenericCreateStatic+0x52>
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <xQueueGenericCreateStatic+0x56>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e000      	b.n	80098b0 <xQueueGenericCreateStatic+0x58>
 80098ae:	2300      	movs	r3, #0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10a      	bne.n	80098ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	623b      	str	r3, [r7, #32]
}
 80098c6:	bf00      	nop
 80098c8:	e7fe      	b.n	80098c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d102      	bne.n	80098d6 <xQueueGenericCreateStatic+0x7e>
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <xQueueGenericCreateStatic+0x82>
 80098d6:	2301      	movs	r3, #1
 80098d8:	e000      	b.n	80098dc <xQueueGenericCreateStatic+0x84>
 80098da:	2300      	movs	r3, #0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	61fb      	str	r3, [r7, #28]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80098f6:	2350      	movs	r3, #80	; 0x50
 80098f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b50      	cmp	r3, #80	; 0x50
 80098fe:	d00a      	beq.n	8009916 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	61bb      	str	r3, [r7, #24]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00d      	beq.n	800993c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009928:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800992c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	4613      	mov	r3, r2
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	68b9      	ldr	r1, [r7, #8]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 f843 	bl	80099c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800993e:	4618      	mov	r0, r3
 8009940:	3730      	adds	r7, #48	; 0x30
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009946:	b580      	push	{r7, lr}
 8009948:	b08a      	sub	sp, #40	; 0x28
 800994a:	af02      	add	r7, sp, #8
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	4613      	mov	r3, r2
 8009952:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <xQueueGenericCreate+0x2a>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	613b      	str	r3, [r7, #16]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d102      	bne.n	800997c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009976:	2300      	movs	r3, #0
 8009978:	61fb      	str	r3, [r7, #28]
 800997a:	e004      	b.n	8009986 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	fb02 f303 	mul.w	r3, r2, r3
 8009984:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	3350      	adds	r3, #80	; 0x50
 800998a:	4618      	mov	r0, r3
 800998c:	f003 f8ae 	bl	800caec <pvPortMalloc>
 8009990:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00f      	beq.n	80099b8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	3350      	adds	r3, #80	; 0x50
 800999c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099a6:	79fa      	ldrb	r2, [r7, #7]
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	4613      	mov	r3, r2
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	68b9      	ldr	r1, [r7, #8]
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 f805 	bl	80099c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80099b8:	69bb      	ldr	r3, [r7, #24]
	}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3720      	adds	r7, #32
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	607a      	str	r2, [r7, #4]
 80099ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d103      	bne.n	80099de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	e002      	b.n	80099e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099f0:	2101      	movs	r1, #1
 80099f2:	69b8      	ldr	r0, [r7, #24]
 80099f4:	f7ff fec8 	bl	8009788 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	78fa      	ldrb	r2, [r7, #3]
 80099fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00e      	beq.n	8009a34 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f90c 	bl	8009c4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a46:	2301      	movs	r3, #1
 8009a48:	617b      	str	r3, [r7, #20]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	461a      	mov	r2, r3
 8009a52:	6939      	ldr	r1, [r7, #16]
 8009a54:	6978      	ldr	r0, [r7, #20]
 8009a56:	f7ff ff76 	bl	8009946 <xQueueGenericCreate>
 8009a5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f7ff ffd3 	bl	8009a08 <prvInitialiseMutex>

		return pxNewQueue;
 8009a62:	68fb      	ldr	r3, [r7, #12]
	}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	6939      	ldr	r1, [r7, #16]
 8009a8a:	6978      	ldr	r0, [r7, #20]
 8009a8c:	f7ff fee4 	bl	8009858 <xQueueGenericCreateStatic>
 8009a90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f7ff ffb8 	bl	8009a08 <prvInitialiseMutex>

		return pxNewQueue;
 8009a98:	68fb      	ldr	r3, [r7, #12]
	}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009aa2:	b590      	push	{r4, r7, lr}
 8009aa4:	b087      	sub	sp, #28
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	60fb      	str	r3, [r7, #12]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	685c      	ldr	r4, [r3, #4]
 8009ace:	f001 ffd5 	bl	800ba7c <xTaskGetCurrentTaskHandle>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	d111      	bne.n	8009afc <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	1e5a      	subs	r2, r3, #1
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d105      	bne.n	8009af6 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009aea:	2300      	movs	r3, #0
 8009aec:	2200      	movs	r2, #0
 8009aee:	2100      	movs	r1, #0
 8009af0:	6938      	ldr	r0, [r7, #16]
 8009af2:	f000 f8ab 	bl	8009c4c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009af6:	2301      	movs	r3, #1
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	e001      	b.n	8009b00 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009b00:	697b      	ldr	r3, [r7, #20]
	}
 8009b02:	4618      	mov	r0, r3
 8009b04:	371c      	adds	r7, #28
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd90      	pop	{r4, r7, pc}

08009b0a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009b0a:	b590      	push	{r4, r7, lr}
 8009b0c:	b087      	sub	sp, #28
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10a      	bne.n	8009b34 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	60fb      	str	r3, [r7, #12]
}
 8009b30:	bf00      	nop
 8009b32:	e7fe      	b.n	8009b32 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	685c      	ldr	r4, [r3, #4]
 8009b38:	f001 ffa0 	bl	800ba7c <xTaskGetCurrentTaskHandle>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	429c      	cmp	r4, r3
 8009b40:	d107      	bne.n	8009b52 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	617b      	str	r3, [r7, #20]
 8009b50:	e00c      	b.n	8009b6c <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6938      	ldr	r0, [r7, #16]
 8009b56:	f000 fb7d 	bl	800a254 <xQueueSemaphoreTake>
 8009b5a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	1c5a      	adds	r2, r3, #1
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009b6c:	697b      	ldr	r3, [r7, #20]
	}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd90      	pop	{r4, r7, pc}

08009b76 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b08a      	sub	sp, #40	; 0x28
 8009b7a:	af02      	add	r7, sp, #8
 8009b7c:	60f8      	str	r0, [r7, #12]
 8009b7e:	60b9      	str	r1, [r7, #8]
 8009b80:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	61bb      	str	r3, [r7, #24]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d90a      	bls.n	8009bbc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	617b      	str	r3, [r7, #20]
}
 8009bb8:	bf00      	nop
 8009bba:	e7fe      	b.n	8009bba <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f7ff fe46 	bl	8009858 <xQueueGenericCreateStatic>
 8009bcc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bda:	69fb      	ldr	r3, [r7, #28]
	}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3720      	adds	r7, #32
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10a      	bne.n	8009c0a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	613b      	str	r3, [r7, #16]
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d90a      	bls.n	8009c28 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	60fb      	str	r3, [r7, #12]
}
 8009c24:	bf00      	nop
 8009c26:	e7fe      	b.n	8009c26 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c28:	2202      	movs	r2, #2
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff fe8a 	bl	8009946 <xQueueGenericCreate>
 8009c32:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c40:	697b      	ldr	r3, [r7, #20]
	}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08e      	sub	sp, #56	; 0x38
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10a      	bne.n	8009c7e <xQueueGenericSend+0x32>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c7a:	bf00      	nop
 8009c7c:	e7fe      	b.n	8009c7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d103      	bne.n	8009c8c <xQueueGenericSend+0x40>
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <xQueueGenericSend+0x44>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e000      	b.n	8009c92 <xQueueGenericSend+0x46>
 8009c90:	2300      	movs	r3, #0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10a      	bne.n	8009cac <xQueueGenericSend+0x60>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d103      	bne.n	8009cba <xQueueGenericSend+0x6e>
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d101      	bne.n	8009cbe <xQueueGenericSend+0x72>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e000      	b.n	8009cc0 <xQueueGenericSend+0x74>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <xQueueGenericSend+0x8e>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	623b      	str	r3, [r7, #32]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cda:	f001 fedd 	bl	800ba98 <xTaskGetSchedulerState>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d102      	bne.n	8009cea <xQueueGenericSend+0x9e>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <xQueueGenericSend+0xa2>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e000      	b.n	8009cf0 <xQueueGenericSend+0xa4>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10a      	bne.n	8009d0a <xQueueGenericSend+0xbe>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	61fb      	str	r3, [r7, #28]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d0a:	f002 fdef 	bl	800c8ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d302      	bcc.n	8009d20 <xQueueGenericSend+0xd4>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d129      	bne.n	8009d74 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	68b9      	ldr	r1, [r7, #8]
 8009d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d26:	f000 fc5b 	bl	800a5e0 <prvCopyDataToQueue>
 8009d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d010      	beq.n	8009d56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	3324      	adds	r3, #36	; 0x24
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 fc67 	bl	800b60c <xTaskRemoveFromEventList>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d013      	beq.n	8009d6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d44:	4b3f      	ldr	r3, [pc, #252]	; (8009e44 <xQueueGenericSend+0x1f8>)
 8009d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	e00a      	b.n	8009d6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d007      	beq.n	8009d6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d5c:	4b39      	ldr	r3, [pc, #228]	; (8009e44 <xQueueGenericSend+0x1f8>)
 8009d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d6c:	f002 fdee 	bl	800c94c <vPortExitCritical>
				return pdPASS;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e063      	b.n	8009e3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d103      	bne.n	8009d82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d7a:	f002 fde7 	bl	800c94c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e05c      	b.n	8009e3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d106      	bne.n	8009d96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d88:	f107 0314 	add.w	r3, r7, #20
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 fca1 	bl	800b6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d92:	2301      	movs	r3, #1
 8009d94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d96:	f002 fdd9 	bl	800c94c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d9a:	f001 f96f 	bl	800b07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d9e:	f002 fda5 	bl	800c8ec <vPortEnterCritical>
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009da8:	b25b      	sxtb	r3, r3
 8009daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dae:	d103      	bne.n	8009db8 <xQueueGenericSend+0x16c>
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dbe:	b25b      	sxtb	r3, r3
 8009dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dc4:	d103      	bne.n	8009dce <xQueueGenericSend+0x182>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dce:	f002 fdbd 	bl	800c94c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dd2:	1d3a      	adds	r2, r7, #4
 8009dd4:	f107 0314 	add.w	r3, r7, #20
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 fc90 	bl	800b700 <xTaskCheckForTimeOut>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d124      	bne.n	8009e30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009de8:	f000 fcf2 	bl	800a7d0 <prvIsQueueFull>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d018      	beq.n	8009e24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	3310      	adds	r3, #16
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	4611      	mov	r1, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 fbb6 	bl	800b56c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e02:	f000 fc7d 	bl	800a700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e06:	f001 f947 	bl	800b098 <xTaskResumeAll>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f47f af7c 	bne.w	8009d0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e12:	4b0c      	ldr	r3, [pc, #48]	; (8009e44 <xQueueGenericSend+0x1f8>)
 8009e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e18:	601a      	str	r2, [r3, #0]
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	e772      	b.n	8009d0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e26:	f000 fc6b 	bl	800a700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e2a:	f001 f935 	bl	800b098 <xTaskResumeAll>
 8009e2e:	e76c      	b.n	8009d0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e32:	f000 fc65 	bl	800a700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e36:	f001 f92f 	bl	800b098 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e3a:	2300      	movs	r3, #0
		}
	}
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3738      	adds	r7, #56	; 0x38
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	e000ed04 	.word	0xe000ed04

08009e48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08e      	sub	sp, #56	; 0x38
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10a      	bne.n	8009e76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d103      	bne.n	8009e84 <xQueueGenericSendFromISR+0x3c>
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <xQueueGenericSendFromISR+0x40>
 8009e84:	2301      	movs	r3, #1
 8009e86:	e000      	b.n	8009e8a <xQueueGenericSendFromISR+0x42>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	623b      	str	r3, [r7, #32]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d103      	bne.n	8009eb2 <xQueueGenericSendFromISR+0x6a>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d101      	bne.n	8009eb6 <xQueueGenericSendFromISR+0x6e>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e000      	b.n	8009eb8 <xQueueGenericSendFromISR+0x70>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	61fb      	str	r3, [r7, #28]
}
 8009ece:	bf00      	nop
 8009ed0:	e7fe      	b.n	8009ed0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ed2:	f002 fdcd 	bl	800ca70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	61ba      	str	r2, [r7, #24]
 8009eec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009eee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d302      	bcc.n	8009f04 <xQueueGenericSendFromISR+0xbc>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d12c      	bne.n	8009f5e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	68b9      	ldr	r1, [r7, #8]
 8009f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f14:	f000 fb64 	bl	800a5e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f18:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f20:	d112      	bne.n	8009f48 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d016      	beq.n	8009f58 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	3324      	adds	r3, #36	; 0x24
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f001 fb6c 	bl	800b60c <xTaskRemoveFromEventList>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00e      	beq.n	8009f58 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	e007      	b.n	8009f58 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	b25a      	sxtb	r2, r3
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009f5c:	e001      	b.n	8009f62 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	637b      	str	r3, [r7, #52]	; 0x34
 8009f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f64:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3738      	adds	r7, #56	; 0x38
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08e      	sub	sp, #56	; 0x38
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10a      	bne.n	8009fa2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	623b      	str	r3, [r7, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	e7fe      	b.n	8009fa0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	61fb      	str	r3, [r7, #28]
}
 8009fbc:	bf00      	nop
 8009fbe:	e7fe      	b.n	8009fbe <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d103      	bne.n	8009fd0 <xQueueGiveFromISR+0x58>
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <xQueueGiveFromISR+0x5c>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e000      	b.n	8009fd6 <xQueueGiveFromISR+0x5e>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	61bb      	str	r3, [r7, #24]
}
 8009fec:	bf00      	nop
 8009fee:	e7fe      	b.n	8009fee <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ff0:	f002 fd3e 	bl	800ca70 <vPortValidateInterruptPriority>
	__asm volatile
 8009ff4:	f3ef 8211 	mrs	r2, BASEPRI
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	617a      	str	r2, [r7, #20]
 800a00a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a00c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a00e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a014:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d22b      	bcs.n	800a078 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	1c5a      	adds	r2, r3, #1
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a03a:	d112      	bne.n	800a062 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	2b00      	cmp	r3, #0
 800a042:	d016      	beq.n	800a072 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	3324      	adds	r3, #36	; 0x24
 800a048:	4618      	mov	r0, r3
 800a04a:	f001 fadf 	bl	800b60c <xTaskRemoveFromEventList>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00e      	beq.n	800a072 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00b      	beq.n	800a072 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2201      	movs	r2, #1
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	e007      	b.n	800a072 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a066:	3301      	adds	r3, #1
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	b25a      	sxtb	r2, r3
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a072:	2301      	movs	r3, #1
 800a074:	637b      	str	r3, [r7, #52]	; 0x34
 800a076:	e001      	b.n	800a07c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a078:	2300      	movs	r3, #0
 800a07a:	637b      	str	r3, [r7, #52]	; 0x34
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f383 8811 	msr	BASEPRI, r3
}
 800a086:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3738      	adds	r7, #56	; 0x38
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08c      	sub	sp, #48	; 0x30
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <xQueueReceive+0x30>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	623b      	str	r3, [r7, #32]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d103      	bne.n	800a0d2 <xQueueReceive+0x3e>
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <xQueueReceive+0x42>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e000      	b.n	800a0d8 <xQueueReceive+0x44>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <xQueueReceive+0x5e>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	61fb      	str	r3, [r7, #28]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0f2:	f001 fcd1 	bl	800ba98 <xTaskGetSchedulerState>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d102      	bne.n	800a102 <xQueueReceive+0x6e>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <xQueueReceive+0x72>
 800a102:	2301      	movs	r3, #1
 800a104:	e000      	b.n	800a108 <xQueueReceive+0x74>
 800a106:	2300      	movs	r3, #0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10a      	bne.n	800a122 <xQueueReceive+0x8e>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	61bb      	str	r3, [r7, #24]
}
 800a11e:	bf00      	nop
 800a120:	e7fe      	b.n	800a120 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a122:	f002 fbe3 	bl	800c8ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d01f      	beq.n	800a172 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a136:	f000 fabd 	bl	800a6b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	1e5a      	subs	r2, r3, #1
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00f      	beq.n	800a16a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	3310      	adds	r3, #16
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 fa5c 	bl	800b60c <xTaskRemoveFromEventList>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d007      	beq.n	800a16a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a15a:	4b3d      	ldr	r3, [pc, #244]	; (800a250 <xQueueReceive+0x1bc>)
 800a15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a16a:	f002 fbef 	bl	800c94c <vPortExitCritical>
				return pdPASS;
 800a16e:	2301      	movs	r3, #1
 800a170:	e069      	b.n	800a246 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d103      	bne.n	800a180 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a178:	f002 fbe8 	bl	800c94c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a17c:	2300      	movs	r3, #0
 800a17e:	e062      	b.n	800a246 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a186:	f107 0310 	add.w	r3, r7, #16
 800a18a:	4618      	mov	r0, r3
 800a18c:	f001 faa2 	bl	800b6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a194:	f002 fbda 	bl	800c94c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a198:	f000 ff70 	bl	800b07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a19c:	f002 fba6 	bl	800c8ec <vPortEnterCritical>
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1a6:	b25b      	sxtb	r3, r3
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ac:	d103      	bne.n	800a1b6 <xQueueReceive+0x122>
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1bc:	b25b      	sxtb	r3, r3
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1c2:	d103      	bne.n	800a1cc <xQueueReceive+0x138>
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1cc:	f002 fbbe 	bl	800c94c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1d0:	1d3a      	adds	r2, r7, #4
 800a1d2:	f107 0310 	add.w	r3, r7, #16
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 fa91 	bl	800b700 <xTaskCheckForTimeOut>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d123      	bne.n	800a22c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e6:	f000 fadd 	bl	800a7a4 <prvIsQueueEmpty>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d017      	beq.n	800a220 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	3324      	adds	r3, #36	; 0x24
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f001 f9b7 	bl	800b56c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a200:	f000 fa7e 	bl	800a700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a204:	f000 ff48 	bl	800b098 <xTaskResumeAll>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d189      	bne.n	800a122 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a20e:	4b10      	ldr	r3, [pc, #64]	; (800a250 <xQueueReceive+0x1bc>)
 800a210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	e780      	b.n	800a122 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a222:	f000 fa6d 	bl	800a700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a226:	f000 ff37 	bl	800b098 <xTaskResumeAll>
 800a22a:	e77a      	b.n	800a122 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a22e:	f000 fa67 	bl	800a700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a232:	f000 ff31 	bl	800b098 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a238:	f000 fab4 	bl	800a7a4 <prvIsQueueEmpty>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f43f af6f 	beq.w	800a122 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a246:	4618      	mov	r0, r3
 800a248:	3730      	adds	r7, #48	; 0x30
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08e      	sub	sp, #56	; 0x38
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a25e:	2300      	movs	r3, #0
 800a260:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a266:	2300      	movs	r3, #0
 800a268:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	623b      	str	r3, [r7, #32]
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00a      	beq.n	800a2a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	61fb      	str	r3, [r7, #28]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2a4:	f001 fbf8 	bl	800ba98 <xTaskGetSchedulerState>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d102      	bne.n	800a2b4 <xQueueSemaphoreTake+0x60>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <xQueueSemaphoreTake+0x64>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e000      	b.n	800a2ba <xQueueSemaphoreTake+0x66>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10a      	bne.n	800a2d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	61bb      	str	r3, [r7, #24]
}
 800a2d0:	bf00      	nop
 800a2d2:	e7fe      	b.n	800a2d2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2d4:	f002 fb0a 	bl	800c8ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d024      	beq.n	800a32e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	1e5a      	subs	r2, r3, #1
 800a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d104      	bne.n	800a2fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a2f4:	f001 fe92 	bl	800c01c <pvTaskIncrementMutexHeldCount>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00f      	beq.n	800a326 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	3310      	adds	r3, #16
 800a30a:	4618      	mov	r0, r3
 800a30c:	f001 f97e 	bl	800b60c <xTaskRemoveFromEventList>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a316:	4b54      	ldr	r3, [pc, #336]	; (800a468 <xQueueSemaphoreTake+0x214>)
 800a318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a326:	f002 fb11 	bl	800c94c <vPortExitCritical>
				return pdPASS;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e097      	b.n	800a45e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d111      	bne.n	800a358 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	617b      	str	r3, [r7, #20]
}
 800a34c:	bf00      	nop
 800a34e:	e7fe      	b.n	800a34e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a350:	f002 fafc 	bl	800c94c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a354:	2300      	movs	r3, #0
 800a356:	e082      	b.n	800a45e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d106      	bne.n	800a36c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a35e:	f107 030c 	add.w	r3, r7, #12
 800a362:	4618      	mov	r0, r3
 800a364:	f001 f9b6 	bl	800b6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a368:	2301      	movs	r3, #1
 800a36a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a36c:	f002 faee 	bl	800c94c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a370:	f000 fe84 	bl	800b07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a374:	f002 faba 	bl	800c8ec <vPortEnterCritical>
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a37e:	b25b      	sxtb	r3, r3
 800a380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a384:	d103      	bne.n	800a38e <xQueueSemaphoreTake+0x13a>
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a394:	b25b      	sxtb	r3, r3
 800a396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a39a:	d103      	bne.n	800a3a4 <xQueueSemaphoreTake+0x150>
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3a4:	f002 fad2 	bl	800c94c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3a8:	463a      	mov	r2, r7
 800a3aa:	f107 030c 	add.w	r3, r7, #12
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f001 f9a5 	bl	800b700 <xTaskCheckForTimeOut>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d132      	bne.n	800a422 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3be:	f000 f9f1 	bl	800a7a4 <prvIsQueueEmpty>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d026      	beq.n	800a416 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d109      	bne.n	800a3e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a3d0:	f002 fa8c 	bl	800c8ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 fb7b 	bl	800bad4 <xTaskPriorityInherit>
 800a3de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a3e0:	f002 fab4 	bl	800c94c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	3324      	adds	r3, #36	; 0x24
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 f8bd 	bl	800b56c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3f4:	f000 f984 	bl	800a700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3f8:	f000 fe4e 	bl	800b098 <xTaskResumeAll>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f47f af68 	bne.w	800a2d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a404:	4b18      	ldr	r3, [pc, #96]	; (800a468 <xQueueSemaphoreTake+0x214>)
 800a406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	e75e      	b.n	800a2d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a418:	f000 f972 	bl	800a700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a41c:	f000 fe3c 	bl	800b098 <xTaskResumeAll>
 800a420:	e758      	b.n	800a2d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a424:	f000 f96c 	bl	800a700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a428:	f000 fe36 	bl	800b098 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a42c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a42e:	f000 f9b9 	bl	800a7a4 <prvIsQueueEmpty>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	f43f af4d 	beq.w	800a2d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00d      	beq.n	800a45c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a440:	f002 fa54 	bl	800c8ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a446:	f000 f8b4 	bl	800a5b2 <prvGetDisinheritPriorityAfterTimeout>
 800a44a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a452:	4618      	mov	r0, r3
 800a454:	f001 fc1a 	bl	800bc8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a458:	f002 fa78 	bl	800c94c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a45c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3738      	adds	r7, #56	; 0x38
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	e000ed04 	.word	0xe000ed04

0800a46c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08e      	sub	sp, #56	; 0x38
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	623b      	str	r3, [r7, #32]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <xQueueReceiveFromISR+0x3a>
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d101      	bne.n	800a4aa <xQueueReceiveFromISR+0x3e>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e000      	b.n	800a4ac <xQueueReceiveFromISR+0x40>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	61fb      	str	r3, [r7, #28]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4c6:	f002 fad3 	bl	800ca70 <vPortValidateInterruptPriority>
	__asm volatile
 800a4ca:	f3ef 8211 	mrs	r2, BASEPRI
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	61ba      	str	r2, [r7, #24]
 800a4e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a4e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d02f      	beq.n	800a552 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4fc:	68b9      	ldr	r1, [r7, #8]
 800a4fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a500:	f000 f8d8 	bl	800a6b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	1e5a      	subs	r2, r3, #1
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a50c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a514:	d112      	bne.n	800a53c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d016      	beq.n	800a54c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	3310      	adds	r3, #16
 800a522:	4618      	mov	r0, r3
 800a524:	f001 f872 	bl	800b60c <xTaskRemoveFromEventList>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00e      	beq.n	800a54c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00b      	beq.n	800a54c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	e007      	b.n	800a54c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a540:	3301      	adds	r3, #1
 800a542:	b2db      	uxtb	r3, r3
 800a544:	b25a      	sxtb	r2, r3
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a54c:	2301      	movs	r3, #1
 800a54e:	637b      	str	r3, [r7, #52]	; 0x34
 800a550:	e001      	b.n	800a556 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a552:	2300      	movs	r3, #0
 800a554:	637b      	str	r3, [r7, #52]	; 0x34
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f383 8811 	msr	BASEPRI, r3
}
 800a560:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a564:	4618      	mov	r0, r3
 800a566:	3738      	adds	r7, #56	; 0x38
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <vQueueDelete+0x28>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	60bb      	str	r3, [r7, #8]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 f95b 	bl	800a850 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d102      	bne.n	800a5aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f002 fb65 	bl	800cc74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5aa:	bf00      	nop
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d006      	beq.n	800a5d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	e001      	b.n	800a5d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
	}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10d      	bne.n	800a61a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d14d      	bne.n	800a6a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 fad0 	bl	800bbb0 <xTaskPriorityDisinherit>
 800a610:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	605a      	str	r2, [r3, #4]
 800a618:	e043      	b.n	800a6a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d119      	bne.n	800a654 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6898      	ldr	r0, [r3, #8]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a628:	461a      	mov	r2, r3
 800a62a:	68b9      	ldr	r1, [r7, #8]
 800a62c:	f002 fc86 	bl	800cf3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	689a      	ldr	r2, [r3, #8]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a638:	441a      	add	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	429a      	cmp	r2, r3
 800a648:	d32b      	bcc.n	800a6a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	609a      	str	r2, [r3, #8]
 800a652:	e026      	b.n	800a6a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	68d8      	ldr	r0, [r3, #12]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	461a      	mov	r2, r3
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	f002 fc6c 	bl	800cf3c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	68da      	ldr	r2, [r3, #12]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66c:	425b      	negs	r3, r3
 800a66e:	441a      	add	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	68da      	ldr	r2, [r3, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d207      	bcs.n	800a690 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a688:	425b      	negs	r3, r3
 800a68a:	441a      	add	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b02      	cmp	r3, #2
 800a694:	d105      	bne.n	800a6a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	1c5a      	adds	r2, r3, #1
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6aa:	697b      	ldr	r3, [r7, #20]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3718      	adds	r7, #24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d018      	beq.n	800a6f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68da      	ldr	r2, [r3, #12]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ce:	441a      	add	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68da      	ldr	r2, [r3, #12]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d303      	bcc.n	800a6e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68d9      	ldr	r1, [r3, #12]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6838      	ldr	r0, [r7, #0]
 800a6f4:	f002 fc22 	bl	800cf3c <memcpy>
	}
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a708:	f002 f8f0 	bl	800c8ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a714:	e011      	b.n	800a73a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d012      	beq.n	800a744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3324      	adds	r3, #36	; 0x24
 800a722:	4618      	mov	r0, r3
 800a724:	f000 ff72 	bl	800b60c <xTaskRemoveFromEventList>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a72e:	f001 f849 	bl	800b7c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	3b01      	subs	r3, #1
 800a736:	b2db      	uxtb	r3, r3
 800a738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a73a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	dce9      	bgt.n	800a716 <prvUnlockQueue+0x16>
 800a742:	e000      	b.n	800a746 <prvUnlockQueue+0x46>
					break;
 800a744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	22ff      	movs	r2, #255	; 0xff
 800a74a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a74e:	f002 f8fd 	bl	800c94c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a752:	f002 f8cb 	bl	800c8ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a75c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a75e:	e011      	b.n	800a784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d012      	beq.n	800a78e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	3310      	adds	r3, #16
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 ff4d 	bl	800b60c <xTaskRemoveFromEventList>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a778:	f001 f824 	bl	800b7c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	3b01      	subs	r3, #1
 800a780:	b2db      	uxtb	r3, r3
 800a782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dce9      	bgt.n	800a760 <prvUnlockQueue+0x60>
 800a78c:	e000      	b.n	800a790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a78e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	22ff      	movs	r2, #255	; 0xff
 800a794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a798:	f002 f8d8 	bl	800c94c <vPortExitCritical>
}
 800a79c:	bf00      	nop
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7ac:	f002 f89e 	bl	800c8ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	e001      	b.n	800a7c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7c2:	f002 f8c3 	bl	800c94c <vPortExitCritical>

	return xReturn;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7d8:	f002 f888 	bl	800c8ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d102      	bne.n	800a7ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	e001      	b.n	800a7f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f2:	f002 f8ab 	bl	800c94c <vPortExitCritical>

	return xReturn;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e014      	b.n	800a83a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a810:	4a0e      	ldr	r2, [pc, #56]	; (800a84c <vQueueAddToRegistry+0x4c>)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10b      	bne.n	800a834 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a81c:	490b      	ldr	r1, [pc, #44]	; (800a84c <vQueueAddToRegistry+0x4c>)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	683a      	ldr	r2, [r7, #0]
 800a822:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a826:	4a09      	ldr	r2, [pc, #36]	; (800a84c <vQueueAddToRegistry+0x4c>)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	4413      	add	r3, r2
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a832:	e006      	b.n	800a842 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3301      	adds	r3, #1
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b07      	cmp	r3, #7
 800a83e:	d9e7      	bls.n	800a810 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	bc80      	pop	{r7}
 800a84a:	4770      	bx	lr
 800a84c:	200012f8 	.word	0x200012f8

0800a850 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a858:	2300      	movs	r3, #0
 800a85a:	60fb      	str	r3, [r7, #12]
 800a85c:	e016      	b.n	800a88c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a85e:	4a10      	ldr	r2, [pc, #64]	; (800a8a0 <vQueueUnregisterQueue+0x50>)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	00db      	lsls	r3, r3, #3
 800a864:	4413      	add	r3, r2
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d10b      	bne.n	800a886 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a86e:	4a0c      	ldr	r2, [pc, #48]	; (800a8a0 <vQueueUnregisterQueue+0x50>)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2100      	movs	r1, #0
 800a874:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a878:	4a09      	ldr	r2, [pc, #36]	; (800a8a0 <vQueueUnregisterQueue+0x50>)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	4413      	add	r3, r2
 800a880:	2200      	movs	r2, #0
 800a882:	605a      	str	r2, [r3, #4]
				break;
 800a884:	e006      	b.n	800a894 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3301      	adds	r3, #1
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b07      	cmp	r3, #7
 800a890:	d9e5      	bls.n	800a85e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a892:	bf00      	nop
 800a894:	bf00      	nop
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	bc80      	pop	{r7}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	200012f8 	.word	0x200012f8

0800a8a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8b4:	f002 f81a 	bl	800c8ec <vPortEnterCritical>
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8be:	b25b      	sxtb	r3, r3
 800a8c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8c4:	d103      	bne.n	800a8ce <vQueueWaitForMessageRestricted+0x2a>
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8d4:	b25b      	sxtb	r3, r3
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8da:	d103      	bne.n	800a8e4 <vQueueWaitForMessageRestricted+0x40>
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8e4:	f002 f832 	bl	800c94c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d106      	bne.n	800a8fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	3324      	adds	r3, #36	; 0x24
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fe5b 	bl	800b5b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8fe:	6978      	ldr	r0, [r7, #20]
 800a900:	f7ff fefe 	bl	800a700 <prvUnlockQueue>
	}
 800a904:	bf00      	nop
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b08e      	sub	sp, #56	; 0x38
 800a910:	af04      	add	r7, sp, #16
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	623b      	str	r3, [r7, #32]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10a      	bne.n	800a952 <xTaskCreateStatic+0x46>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	61fb      	str	r3, [r7, #28]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a952:	23c0      	movs	r3, #192	; 0xc0
 800a954:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	2bc0      	cmp	r3, #192	; 0xc0
 800a95a:	d00a      	beq.n	800a972 <xTaskCreateStatic+0x66>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	61bb      	str	r3, [r7, #24]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	2b00      	cmp	r3, #0
 800a976:	d01e      	beq.n	800a9b6 <xTaskCreateStatic+0xaa>
 800a978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d01b      	beq.n	800a9b6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a986:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a990:	2300      	movs	r3, #0
 800a992:	9303      	str	r3, [sp, #12]
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	9302      	str	r3, [sp, #8]
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 f851 	bl	800aa50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9b0:	f000 f8f0 	bl	800ab94 <prvAddNewTaskToReadyList>
 800a9b4:	e001      	b.n	800a9ba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9ba:	697b      	ldr	r3, [r7, #20]
	}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3728      	adds	r7, #40	; 0x28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08c      	sub	sp, #48	; 0x30
 800a9c8:	af04      	add	r7, sp, #16
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	603b      	str	r3, [r7, #0]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f002 f887 	bl	800caec <pvPortMalloc>
 800a9de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00e      	beq.n	800aa04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a9e6:	20c0      	movs	r0, #192	; 0xc0
 800a9e8:	f002 f880 	bl	800caec <pvPortMalloc>
 800a9ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	631a      	str	r2, [r3, #48]	; 0x30
 800a9fa:	e005      	b.n	800aa08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9fc:	6978      	ldr	r0, [r7, #20]
 800a9fe:	f002 f939 	bl	800cc74 <vPortFree>
 800aa02:	e001      	b.n	800aa08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa04:	2300      	movs	r3, #0
 800aa06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d017      	beq.n	800aa3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa16:	88fa      	ldrh	r2, [r7, #6]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	9303      	str	r3, [sp, #12]
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	9302      	str	r3, [sp, #8]
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	9301      	str	r3, [sp, #4]
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f000 f80f 	bl	800aa50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa32:	69f8      	ldr	r0, [r7, #28]
 800aa34:	f000 f8ae 	bl	800ab94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	61bb      	str	r3, [r7, #24]
 800aa3c:	e002      	b.n	800aa44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa44:	69bb      	ldr	r3, [r7, #24]
	}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3720      	adds	r7, #32
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b088      	sub	sp, #32
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	461a      	mov	r2, r3
 800aa68:	21a5      	movs	r1, #165	; 0xa5
 800aa6a:	f002 fa75 	bl	800cf58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	f023 0307 	bic.w	r3, r3, #7
 800aa86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	f003 0307 	and.w	r3, r3, #7
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00a      	beq.n	800aaa8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	617b      	str	r3, [r7, #20]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	61fb      	str	r3, [r7, #28]
 800aaac:	e012      	b.n	800aad4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	4413      	add	r3, r2
 800aab4:	7819      	ldrb	r1, [r3, #0]
 800aab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	4413      	add	r3, r2
 800aabc:	3334      	adds	r3, #52	; 0x34
 800aabe:	460a      	mov	r2, r1
 800aac0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	4413      	add	r3, r2
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d006      	beq.n	800aadc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	3301      	adds	r3, #1
 800aad2:	61fb      	str	r3, [r7, #28]
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	d9e9      	bls.n	800aaae <prvInitialiseNewTask+0x5e>
 800aada:	e000      	b.n	800aade <prvInitialiseNewTask+0x8e>
		{
			break;
 800aadc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae8:	2b37      	cmp	r3, #55	; 0x37
 800aaea:	d901      	bls.n	800aaf0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aaec:	2337      	movs	r3, #55	; 0x37
 800aaee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aafa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafe:	2200      	movs	r2, #0
 800ab00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	3304      	adds	r3, #4
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe fdad 	bl	8009666 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	3318      	adds	r3, #24
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fe fda8 	bl	8009666 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	2200      	movs	r2, #0
 800ab30:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab34:	2200      	movs	r2, #0
 800ab36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	3358      	adds	r3, #88	; 0x58
 800ab46:	2260      	movs	r2, #96	; 0x60
 800ab48:	2100      	movs	r1, #0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f002 fa04 	bl	800cf58 <memset>
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	4a0d      	ldr	r2, [pc, #52]	; (800ab88 <prvInitialiseNewTask+0x138>)
 800ab54:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	4a0c      	ldr	r2, [pc, #48]	; (800ab8c <prvInitialiseNewTask+0x13c>)
 800ab5a:	661a      	str	r2, [r3, #96]	; 0x60
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	4a0c      	ldr	r2, [pc, #48]	; (800ab90 <prvInitialiseNewTask+0x140>)
 800ab60:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	68f9      	ldr	r1, [r7, #12]
 800ab66:	69b8      	ldr	r0, [r7, #24]
 800ab68:	f001 fdd2 	bl	800c710 <pxPortInitialiseStack>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab7e:	bf00      	nop
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	0800e020 	.word	0x0800e020
 800ab8c:	0800e040 	.word	0x0800e040
 800ab90:	0800e000 	.word	0x0800e000

0800ab94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab9c:	f001 fea6 	bl	800c8ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aba0:	4b2d      	ldr	r3, [pc, #180]	; (800ac58 <prvAddNewTaskToReadyList+0xc4>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3301      	adds	r3, #1
 800aba6:	4a2c      	ldr	r2, [pc, #176]	; (800ac58 <prvAddNewTaskToReadyList+0xc4>)
 800aba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abaa:	4b2c      	ldr	r3, [pc, #176]	; (800ac5c <prvAddNewTaskToReadyList+0xc8>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d109      	bne.n	800abc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abb2:	4a2a      	ldr	r2, [pc, #168]	; (800ac5c <prvAddNewTaskToReadyList+0xc8>)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abb8:	4b27      	ldr	r3, [pc, #156]	; (800ac58 <prvAddNewTaskToReadyList+0xc4>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d110      	bne.n	800abe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abc0:	f000 fe24 	bl	800b80c <prvInitialiseTaskLists>
 800abc4:	e00d      	b.n	800abe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abc6:	4b26      	ldr	r3, [pc, #152]	; (800ac60 <prvAddNewTaskToReadyList+0xcc>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d109      	bne.n	800abe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abce:	4b23      	ldr	r3, [pc, #140]	; (800ac5c <prvAddNewTaskToReadyList+0xc8>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	429a      	cmp	r2, r3
 800abda:	d802      	bhi.n	800abe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abdc:	4a1f      	ldr	r2, [pc, #124]	; (800ac5c <prvAddNewTaskToReadyList+0xc8>)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abe2:	4b20      	ldr	r3, [pc, #128]	; (800ac64 <prvAddNewTaskToReadyList+0xd0>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3301      	adds	r3, #1
 800abe8:	4a1e      	ldr	r2, [pc, #120]	; (800ac64 <prvAddNewTaskToReadyList+0xd0>)
 800abea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800abec:	4b1d      	ldr	r3, [pc, #116]	; (800ac64 <prvAddNewTaskToReadyList+0xd0>)
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf8:	4b1b      	ldr	r3, [pc, #108]	; (800ac68 <prvAddNewTaskToReadyList+0xd4>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d903      	bls.n	800ac08 <prvAddNewTaskToReadyList+0x74>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac04:	4a18      	ldr	r2, [pc, #96]	; (800ac68 <prvAddNewTaskToReadyList+0xd4>)
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4a15      	ldr	r2, [pc, #84]	; (800ac6c <prvAddNewTaskToReadyList+0xd8>)
 800ac16:	441a      	add	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	4610      	mov	r0, r2
 800ac20:	f7fe fd2d 	bl	800967e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac24:	f001 fe92 	bl	800c94c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac28:	4b0d      	ldr	r3, [pc, #52]	; (800ac60 <prvAddNewTaskToReadyList+0xcc>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00e      	beq.n	800ac4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac30:	4b0a      	ldr	r3, [pc, #40]	; (800ac5c <prvAddNewTaskToReadyList+0xc8>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d207      	bcs.n	800ac4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac3e:	4b0c      	ldr	r3, [pc, #48]	; (800ac70 <prvAddNewTaskToReadyList+0xdc>)
 800ac40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	200017f4 	.word	0x200017f4
 800ac5c:	20001338 	.word	0x20001338
 800ac60:	20001800 	.word	0x20001800
 800ac64:	20001810 	.word	0x20001810
 800ac68:	200017fc 	.word	0x200017fc
 800ac6c:	2000133c 	.word	0x2000133c
 800ac70:	e000ed04 	.word	0xe000ed04

0800ac74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d017      	beq.n	800acb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac86:	4b13      	ldr	r3, [pc, #76]	; (800acd4 <vTaskDelay+0x60>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00a      	beq.n	800aca4 <vTaskDelay+0x30>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	60bb      	str	r3, [r7, #8]
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aca4:	f000 f9ea 	bl	800b07c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aca8:	2100      	movs	r1, #0
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f001 f9ca 	bl	800c044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acb0:	f000 f9f2 	bl	800b098 <xTaskResumeAll>
 800acb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d107      	bne.n	800accc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800acbc:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <vTaskDelay+0x64>)
 800acbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800accc:	bf00      	nop
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	2000181c 	.word	0x2000181c
 800acd8:	e000ed04 	.word	0xe000ed04

0800acdc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <eTaskGetState+0x28>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	60bb      	str	r3, [r7, #8]
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800ad04:	4b18      	ldr	r3, [pc, #96]	; (800ad68 <eTaskGetState+0x8c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d102      	bne.n	800ad14 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	75fb      	strb	r3, [r7, #23]
 800ad12:	e023      	b.n	800ad5c <eTaskGetState+0x80>
		}
		else
		{
			taskENTER_CRITICAL();
 800ad14:	f001 fdea 	bl	800c8ec <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800ad1e:	f001 fe15 	bl	800c94c <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 800ad22:	4b12      	ldr	r3, [pc, #72]	; (800ad6c <eTaskGetState+0x90>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d004      	beq.n	800ad36 <eTaskGetState+0x5a>
 800ad2c:	4b10      	ldr	r3, [pc, #64]	; (800ad70 <eTaskGetState+0x94>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d102      	bne.n	800ad3c <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800ad36:	2302      	movs	r3, #2
 800ad38:	75fb      	strb	r3, [r7, #23]
 800ad3a:	e00f      	b.n	800ad5c <eTaskGetState+0x80>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4a0d      	ldr	r2, [pc, #52]	; (800ad74 <eTaskGetState+0x98>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d109      	bne.n	800ad58 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d102      	bne.n	800ad52 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	75fb      	strb	r3, [r7, #23]
 800ad50:	e004      	b.n	800ad5c <eTaskGetState+0x80>
					}
					else
					{
						eReturn = eBlocked;
 800ad52:	2302      	movs	r3, #2
 800ad54:	75fb      	strb	r3, [r7, #23]
 800ad56:	e001      	b.n	800ad5c <eTaskGetState+0x80>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20001338 	.word	0x20001338
 800ad6c:	200017c4 	.word	0x200017c4
 800ad70:	200017c8 	.word	0x200017c8
 800ad74:	200017e0 	.word	0x200017e0

0800ad78 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ad80:	f001 fdb4 	bl	800c8ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d102      	bne.n	800ad90 <vTaskSuspend+0x18>
 800ad8a:	4b30      	ldr	r3, [pc, #192]	; (800ae4c <vTaskSuspend+0xd4>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	e000      	b.n	800ad92 <vTaskSuspend+0x1a>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fe fccb 	bl	8009734 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d004      	beq.n	800adb0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3318      	adds	r3, #24
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe fcc2 	bl	8009734 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	3304      	adds	r3, #4
 800adb4:	4619      	mov	r1, r3
 800adb6:	4826      	ldr	r0, [pc, #152]	; (800ae50 <vTaskSuspend+0xd8>)
 800adb8:	f7fe fc61 	bl	800967e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d103      	bne.n	800add0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800add0:	f001 fdbc 	bl	800c94c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800add4:	4b1f      	ldr	r3, [pc, #124]	; (800ae54 <vTaskSuspend+0xdc>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d005      	beq.n	800ade8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800addc:	f001 fd86 	bl	800c8ec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ade0:	f000 fe28 	bl	800ba34 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ade4:	f001 fdb2 	bl	800c94c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ade8:	4b18      	ldr	r3, [pc, #96]	; (800ae4c <vTaskSuspend+0xd4>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d127      	bne.n	800ae42 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800adf2:	4b18      	ldr	r3, [pc, #96]	; (800ae54 <vTaskSuspend+0xdc>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d017      	beq.n	800ae2a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800adfa:	4b17      	ldr	r3, [pc, #92]	; (800ae58 <vTaskSuspend+0xe0>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <vTaskSuspend+0xa0>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	60bb      	str	r3, [r7, #8]
}
 800ae14:	bf00      	nop
 800ae16:	e7fe      	b.n	800ae16 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ae18:	4b10      	ldr	r3, [pc, #64]	; (800ae5c <vTaskSuspend+0xe4>)
 800ae1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae28:	e00b      	b.n	800ae42 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <vTaskSuspend+0xd8>)
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	; (800ae60 <vTaskSuspend+0xe8>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d103      	bne.n	800ae3e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ae36:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <vTaskSuspend+0xd4>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]
	}
 800ae3c:	e001      	b.n	800ae42 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ae3e:	f000 fb13 	bl	800b468 <vTaskSwitchContext>
	}
 800ae42:	bf00      	nop
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20001338 	.word	0x20001338
 800ae50:	200017e0 	.word	0x200017e0
 800ae54:	20001800 	.word	0x20001800
 800ae58:	2000181c 	.word	0x2000181c
 800ae5c:	e000ed04 	.word	0xe000ed04
 800ae60:	200017f4 	.word	0x200017f4

0800ae64 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10a      	bne.n	800ae90 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	60fb      	str	r3, [r7, #12]
}
 800ae8c:	bf00      	nop
 800ae8e:	e7fe      	b.n	800ae8e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	695b      	ldr	r3, [r3, #20]
 800ae94:	4a0e      	ldr	r2, [pc, #56]	; (800aed0 <prvTaskIsTaskSuspended+0x6c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d101      	bne.n	800ae9e <prvTaskIsTaskSuspended+0x3a>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e000      	b.n	800aea0 <prvTaskIsTaskSuspended+0x3c>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00f      	beq.n	800aec4 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea8:	4a0a      	ldr	r2, [pc, #40]	; (800aed4 <prvTaskIsTaskSuspended+0x70>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d00a      	beq.n	800aec4 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <prvTaskIsTaskSuspended+0x56>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e000      	b.n	800aebc <prvTaskIsTaskSuspended+0x58>
 800aeba:	2300      	movs	r3, #0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800aec0:	2301      	movs	r3, #1
 800aec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aec4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800aec6:	4618      	mov	r0, r3
 800aec8:	371c      	adds	r7, #28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bc80      	pop	{r7}
 800aece:	4770      	bx	lr
 800aed0:	200017e0 	.word	0x200017e0
 800aed4:	200017cc 	.word	0x200017cc

0800aed8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10a      	bne.n	800af00 <vTaskResume+0x28>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	60bb      	str	r3, [r7, #8]
}
 800aefc:	bf00      	nop
 800aefe:	e7fe      	b.n	800aefe <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d03a      	beq.n	800af7c <vTaskResume+0xa4>
 800af06:	4b1f      	ldr	r3, [pc, #124]	; (800af84 <vTaskResume+0xac>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d035      	beq.n	800af7c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800af10:	f001 fcec 	bl	800c8ec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f7ff ffa5 	bl	800ae64 <prvTaskIsTaskSuspended>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d02b      	beq.n	800af78 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	3304      	adds	r3, #4
 800af24:	4618      	mov	r0, r3
 800af26:	f7fe fc05 	bl	8009734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2e:	4b16      	ldr	r3, [pc, #88]	; (800af88 <vTaskResume+0xb0>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d903      	bls.n	800af3e <vTaskResume+0x66>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3a:	4a13      	ldr	r2, [pc, #76]	; (800af88 <vTaskResume+0xb0>)
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af42:	4613      	mov	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4a10      	ldr	r2, [pc, #64]	; (800af8c <vTaskResume+0xb4>)
 800af4c:	441a      	add	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3304      	adds	r3, #4
 800af52:	4619      	mov	r1, r3
 800af54:	4610      	mov	r0, r2
 800af56:	f7fe fb92 	bl	800967e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5e:	4b09      	ldr	r3, [pc, #36]	; (800af84 <vTaskResume+0xac>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	429a      	cmp	r2, r3
 800af66:	d307      	bcc.n	800af78 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800af68:	4b09      	ldr	r3, [pc, #36]	; (800af90 <vTaskResume+0xb8>)
 800af6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af6e:	601a      	str	r2, [r3, #0]
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800af78:	f001 fce8 	bl	800c94c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af7c:	bf00      	nop
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20001338 	.word	0x20001338
 800af88:	200017fc 	.word	0x200017fc
 800af8c:	2000133c 	.word	0x2000133c
 800af90:	e000ed04 	.word	0xe000ed04

0800af94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08a      	sub	sp, #40	; 0x28
 800af98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800afa2:	463a      	mov	r2, r7
 800afa4:	1d39      	adds	r1, r7, #4
 800afa6:	f107 0308 	add.w	r3, r7, #8
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fe fb0a 	bl	80095c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	9202      	str	r2, [sp, #8]
 800afb8:	9301      	str	r3, [sp, #4]
 800afba:	2300      	movs	r3, #0
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	2300      	movs	r3, #0
 800afc0:	460a      	mov	r2, r1
 800afc2:	4925      	ldr	r1, [pc, #148]	; (800b058 <vTaskStartScheduler+0xc4>)
 800afc4:	4825      	ldr	r0, [pc, #148]	; (800b05c <vTaskStartScheduler+0xc8>)
 800afc6:	f7ff fca1 	bl	800a90c <xTaskCreateStatic>
 800afca:	4603      	mov	r3, r0
 800afcc:	4a24      	ldr	r2, [pc, #144]	; (800b060 <vTaskStartScheduler+0xcc>)
 800afce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afd0:	4b23      	ldr	r3, [pc, #140]	; (800b060 <vTaskStartScheduler+0xcc>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d002      	beq.n	800afde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afd8:	2301      	movs	r3, #1
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	e001      	b.n	800afe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d102      	bne.n	800afee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800afe8:	f001 f880 	bl	800c0ec <xTimerCreateTimerTask>
 800afec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d11e      	bne.n	800b032 <vTaskStartScheduler+0x9e>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	613b      	str	r3, [r7, #16]
}
 800b006:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b008:	4b16      	ldr	r3, [pc, #88]	; (800b064 <vTaskStartScheduler+0xd0>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3358      	adds	r3, #88	; 0x58
 800b00e:	4a16      	ldr	r2, [pc, #88]	; (800b068 <vTaskStartScheduler+0xd4>)
 800b010:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b012:	4b16      	ldr	r3, [pc, #88]	; (800b06c <vTaskStartScheduler+0xd8>)
 800b014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b018:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b01a:	4b15      	ldr	r3, [pc, #84]	; (800b070 <vTaskStartScheduler+0xdc>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b020:	4b14      	ldr	r3, [pc, #80]	; (800b074 <vTaskStartScheduler+0xe0>)
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b026:	4b14      	ldr	r3, [pc, #80]	; (800b078 <vTaskStartScheduler+0xe4>)
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b02c:	f001 fbec 	bl	800c808 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b030:	e00e      	b.n	800b050 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b038:	d10a      	bne.n	800b050 <vTaskStartScheduler+0xbc>
	__asm volatile
 800b03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	60fb      	str	r3, [r7, #12]
}
 800b04c:	bf00      	nop
 800b04e:	e7fe      	b.n	800b04e <vTaskStartScheduler+0xba>
}
 800b050:	bf00      	nop
 800b052:	3718      	adds	r7, #24
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	0800db9c 	.word	0x0800db9c
 800b05c:	0800b7dd 	.word	0x0800b7dd
 800b060:	20001818 	.word	0x20001818
 800b064:	20001338 	.word	0x20001338
 800b068:	20000020 	.word	0x20000020
 800b06c:	20001814 	.word	0x20001814
 800b070:	20001800 	.word	0x20001800
 800b074:	200017f8 	.word	0x200017f8
 800b078:	200000a4 	.word	0x200000a4

0800b07c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b07c:	b480      	push	{r7}
 800b07e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b080:	4b04      	ldr	r3, [pc, #16]	; (800b094 <vTaskSuspendAll+0x18>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3301      	adds	r3, #1
 800b086:	4a03      	ldr	r2, [pc, #12]	; (800b094 <vTaskSuspendAll+0x18>)
 800b088:	6013      	str	r3, [r2, #0]
}
 800b08a:	bf00      	nop
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bc80      	pop	{r7}
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	2000181c 	.word	0x2000181c

0800b098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0a6:	4b42      	ldr	r3, [pc, #264]	; (800b1b0 <xTaskResumeAll+0x118>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10a      	bne.n	800b0c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	603b      	str	r3, [r7, #0]
}
 800b0c0:	bf00      	nop
 800b0c2:	e7fe      	b.n	800b0c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0c4:	f001 fc12 	bl	800c8ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0c8:	4b39      	ldr	r3, [pc, #228]	; (800b1b0 <xTaskResumeAll+0x118>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	4a38      	ldr	r2, [pc, #224]	; (800b1b0 <xTaskResumeAll+0x118>)
 800b0d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d2:	4b37      	ldr	r3, [pc, #220]	; (800b1b0 <xTaskResumeAll+0x118>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d162      	bne.n	800b1a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0da:	4b36      	ldr	r3, [pc, #216]	; (800b1b4 <xTaskResumeAll+0x11c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d05e      	beq.n	800b1a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0e2:	e02f      	b.n	800b144 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b0e4:	4b34      	ldr	r3, [pc, #208]	; (800b1b8 <xTaskResumeAll+0x120>)
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3318      	adds	r3, #24
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe fb1f 	bl	8009734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe fb1a 	bl	8009734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b104:	4b2d      	ldr	r3, [pc, #180]	; (800b1bc <xTaskResumeAll+0x124>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d903      	bls.n	800b114 <xTaskResumeAll+0x7c>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	4a2a      	ldr	r2, [pc, #168]	; (800b1bc <xTaskResumeAll+0x124>)
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b118:	4613      	mov	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4a27      	ldr	r2, [pc, #156]	; (800b1c0 <xTaskResumeAll+0x128>)
 800b122:	441a      	add	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	3304      	adds	r3, #4
 800b128:	4619      	mov	r1, r3
 800b12a:	4610      	mov	r0, r2
 800b12c:	f7fe faa7 	bl	800967e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b134:	4b23      	ldr	r3, [pc, #140]	; (800b1c4 <xTaskResumeAll+0x12c>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d302      	bcc.n	800b144 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b13e:	4b22      	ldr	r3, [pc, #136]	; (800b1c8 <xTaskResumeAll+0x130>)
 800b140:	2201      	movs	r2, #1
 800b142:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b144:	4b1c      	ldr	r3, [pc, #112]	; (800b1b8 <xTaskResumeAll+0x120>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1cb      	bne.n	800b0e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b152:	f000 fc6f 	bl	800ba34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b156:	4b1d      	ldr	r3, [pc, #116]	; (800b1cc <xTaskResumeAll+0x134>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d010      	beq.n	800b184 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b162:	f000 f8c3 	bl	800b2ec <xTaskIncrementTick>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b16c:	4b16      	ldr	r3, [pc, #88]	; (800b1c8 <xTaskResumeAll+0x130>)
 800b16e:	2201      	movs	r2, #1
 800b170:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3b01      	subs	r3, #1
 800b176:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1f1      	bne.n	800b162 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b17e:	4b13      	ldr	r3, [pc, #76]	; (800b1cc <xTaskResumeAll+0x134>)
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b184:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <xTaskResumeAll+0x130>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d009      	beq.n	800b1a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b18c:	2301      	movs	r3, #1
 800b18e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b190:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <xTaskResumeAll+0x138>)
 800b192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1a0:	f001 fbd4 	bl	800c94c <vPortExitCritical>

	return xAlreadyYielded;
 800b1a4:	68bb      	ldr	r3, [r7, #8]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	2000181c 	.word	0x2000181c
 800b1b4:	200017f4 	.word	0x200017f4
 800b1b8:	200017cc 	.word	0x200017cc
 800b1bc:	200017fc 	.word	0x200017fc
 800b1c0:	2000133c 	.word	0x2000133c
 800b1c4:	20001338 	.word	0x20001338
 800b1c8:	20001808 	.word	0x20001808
 800b1cc:	20001804 	.word	0x20001804
 800b1d0:	e000ed04 	.word	0xe000ed04

0800b1d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b1da:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <xTaskGetTickCount+0x18>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1e0:	687b      	ldr	r3, [r7, #4]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	370c      	adds	r7, #12
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bc80      	pop	{r7}
 800b1ea:	4770      	bx	lr
 800b1ec:	200017f8 	.word	0x200017f8

0800b1f0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	617b      	str	r3, [r7, #20]
 800b200:	2338      	movs	r3, #56	; 0x38
 800b202:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800b204:	f7ff ff3a 	bl	800b07c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800b208:	4b32      	ldr	r3, [pc, #200]	; (800b2d4 <uxTaskGetSystemState+0xe4>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d358      	bcc.n	800b2c4 <uxTaskGetSystemState+0xd4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	3b01      	subs	r3, #1
 800b216:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	4613      	mov	r3, r2
 800b21c:	00db      	lsls	r3, r3, #3
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	461a      	mov	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	1898      	adds	r0, r3, r2
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	4613      	mov	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4a29      	ldr	r2, [pc, #164]	; (800b2d8 <uxTaskGetSystemState+0xe8>)
 800b234:	4413      	add	r3, r2
 800b236:	2201      	movs	r2, #1
 800b238:	4619      	mov	r1, r3
 800b23a:	f000 fb8d 	bl	800b958 <prvListTasksWithinSingleList>
 800b23e:	4602      	mov	r2, r0
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	4413      	add	r3, r2
 800b244:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1e2      	bne.n	800b212 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800b24c:	697a      	ldr	r2, [r7, #20]
 800b24e:	4613      	mov	r3, r2
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	4413      	add	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	461a      	mov	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	4413      	add	r3, r2
 800b25c:	4a1f      	ldr	r2, [pc, #124]	; (800b2dc <uxTaskGetSystemState+0xec>)
 800b25e:	6811      	ldr	r1, [r2, #0]
 800b260:	2202      	movs	r2, #2
 800b262:	4618      	mov	r0, r3
 800b264:	f000 fb78 	bl	800b958 <prvListTasksWithinSingleList>
 800b268:	4602      	mov	r2, r0
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	4413      	add	r3, r2
 800b26e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800b270:	697a      	ldr	r2, [r7, #20]
 800b272:	4613      	mov	r3, r2
 800b274:	00db      	lsls	r3, r3, #3
 800b276:	4413      	add	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	461a      	mov	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	4a17      	ldr	r2, [pc, #92]	; (800b2e0 <uxTaskGetSystemState+0xf0>)
 800b282:	6811      	ldr	r1, [r2, #0]
 800b284:	2202      	movs	r2, #2
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fb66 	bl	800b958 <prvListTasksWithinSingleList>
 800b28c:	4602      	mov	r2, r0
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	4413      	add	r3, r2
 800b292:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	4613      	mov	r3, r2
 800b298:	00db      	lsls	r3, r3, #3
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	461a      	mov	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	2203      	movs	r2, #3
 800b2a6:	490f      	ldr	r1, [pc, #60]	; (800b2e4 <uxTaskGetSystemState+0xf4>)
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 fb55 	bl	800b958 <prvListTasksWithinSingleList>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <uxTaskGetSystemState+0xd4>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b2bc:	4b0a      	ldr	r3, [pc, #40]	; (800b2e8 <uxTaskGetSystemState+0xf8>)
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800b2c4:	f7ff fee8 	bl	800b098 <xTaskResumeAll>

		return uxTask;
 800b2c8:	697b      	ldr	r3, [r7, #20]
	}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3718      	adds	r7, #24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	200017f4 	.word	0x200017f4
 800b2d8:	2000133c 	.word	0x2000133c
 800b2dc:	200017c4 	.word	0x200017c4
 800b2e0:	200017c8 	.word	0x200017c8
 800b2e4:	200017e0 	.word	0x200017e0
 800b2e8:	200000a4 	.word	0x200000a4

0800b2ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2f6:	4b51      	ldr	r3, [pc, #324]	; (800b43c <xTaskIncrementTick+0x150>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f040 808e 	bne.w	800b41c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b300:	4b4f      	ldr	r3, [pc, #316]	; (800b440 <xTaskIncrementTick+0x154>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3301      	adds	r3, #1
 800b306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b308:	4a4d      	ldr	r2, [pc, #308]	; (800b440 <xTaskIncrementTick+0x154>)
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d120      	bne.n	800b356 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b314:	4b4b      	ldr	r3, [pc, #300]	; (800b444 <xTaskIncrementTick+0x158>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00a      	beq.n	800b334 <xTaskIncrementTick+0x48>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	603b      	str	r3, [r7, #0]
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <xTaskIncrementTick+0x46>
 800b334:	4b43      	ldr	r3, [pc, #268]	; (800b444 <xTaskIncrementTick+0x158>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	4b43      	ldr	r3, [pc, #268]	; (800b448 <xTaskIncrementTick+0x15c>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a41      	ldr	r2, [pc, #260]	; (800b444 <xTaskIncrementTick+0x158>)
 800b340:	6013      	str	r3, [r2, #0]
 800b342:	4a41      	ldr	r2, [pc, #260]	; (800b448 <xTaskIncrementTick+0x15c>)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	4b40      	ldr	r3, [pc, #256]	; (800b44c <xTaskIncrementTick+0x160>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3301      	adds	r3, #1
 800b34e:	4a3f      	ldr	r2, [pc, #252]	; (800b44c <xTaskIncrementTick+0x160>)
 800b350:	6013      	str	r3, [r2, #0]
 800b352:	f000 fb6f 	bl	800ba34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b356:	4b3e      	ldr	r3, [pc, #248]	; (800b450 <xTaskIncrementTick+0x164>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d34e      	bcc.n	800b3fe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b360:	4b38      	ldr	r3, [pc, #224]	; (800b444 <xTaskIncrementTick+0x158>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d101      	bne.n	800b36e <xTaskIncrementTick+0x82>
 800b36a:	2301      	movs	r3, #1
 800b36c:	e000      	b.n	800b370 <xTaskIncrementTick+0x84>
 800b36e:	2300      	movs	r3, #0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d004      	beq.n	800b37e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b374:	4b36      	ldr	r3, [pc, #216]	; (800b450 <xTaskIncrementTick+0x164>)
 800b376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b37a:	601a      	str	r2, [r3, #0]
					break;
 800b37c:	e03f      	b.n	800b3fe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b37e:	4b31      	ldr	r3, [pc, #196]	; (800b444 <xTaskIncrementTick+0x158>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	429a      	cmp	r2, r3
 800b394:	d203      	bcs.n	800b39e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b396:	4a2e      	ldr	r2, [pc, #184]	; (800b450 <xTaskIncrementTick+0x164>)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6013      	str	r3, [r2, #0]
						break;
 800b39c:	e02f      	b.n	800b3fe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe f9c6 	bl	8009734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d004      	beq.n	800b3ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	3318      	adds	r3, #24
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fe f9bd 	bl	8009734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3be:	4b25      	ldr	r3, [pc, #148]	; (800b454 <xTaskIncrementTick+0x168>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d903      	bls.n	800b3ce <xTaskIncrementTick+0xe2>
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ca:	4a22      	ldr	r2, [pc, #136]	; (800b454 <xTaskIncrementTick+0x168>)
 800b3cc:	6013      	str	r3, [r2, #0]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4a1f      	ldr	r2, [pc, #124]	; (800b458 <xTaskIncrementTick+0x16c>)
 800b3dc:	441a      	add	r2, r3
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	f7fe f94a 	bl	800967e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ee:	4b1b      	ldr	r3, [pc, #108]	; (800b45c <xTaskIncrementTick+0x170>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d3b3      	bcc.n	800b360 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3fc:	e7b0      	b.n	800b360 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3fe:	4b17      	ldr	r3, [pc, #92]	; (800b45c <xTaskIncrementTick+0x170>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b404:	4914      	ldr	r1, [pc, #80]	; (800b458 <xTaskIncrementTick+0x16c>)
 800b406:	4613      	mov	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	440b      	add	r3, r1
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d907      	bls.n	800b426 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b416:	2301      	movs	r3, #1
 800b418:	617b      	str	r3, [r7, #20]
 800b41a:	e004      	b.n	800b426 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b41c:	4b10      	ldr	r3, [pc, #64]	; (800b460 <xTaskIncrementTick+0x174>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3301      	adds	r3, #1
 800b422:	4a0f      	ldr	r2, [pc, #60]	; (800b460 <xTaskIncrementTick+0x174>)
 800b424:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b426:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <xTaskIncrementTick+0x178>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b42e:	2301      	movs	r3, #1
 800b430:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b432:	697b      	ldr	r3, [r7, #20]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3718      	adds	r7, #24
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	2000181c 	.word	0x2000181c
 800b440:	200017f8 	.word	0x200017f8
 800b444:	200017c4 	.word	0x200017c4
 800b448:	200017c8 	.word	0x200017c8
 800b44c:	2000180c 	.word	0x2000180c
 800b450:	20001814 	.word	0x20001814
 800b454:	200017fc 	.word	0x200017fc
 800b458:	2000133c 	.word	0x2000133c
 800b45c:	20001338 	.word	0x20001338
 800b460:	20001804 	.word	0x20001804
 800b464:	20001808 	.word	0x20001808

0800b468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b46e:	4b36      	ldr	r3, [pc, #216]	; (800b548 <vTaskSwitchContext+0xe0>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d003      	beq.n	800b47e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b476:	4b35      	ldr	r3, [pc, #212]	; (800b54c <vTaskSwitchContext+0xe4>)
 800b478:	2201      	movs	r2, #1
 800b47a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b47c:	e05e      	b.n	800b53c <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800b47e:	4b33      	ldr	r3, [pc, #204]	; (800b54c <vTaskSwitchContext+0xe4>)
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b484:	4b32      	ldr	r3, [pc, #200]	; (800b550 <vTaskSwitchContext+0xe8>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a32      	ldr	r2, [pc, #200]	; (800b554 <vTaskSwitchContext+0xec>)
 800b48a:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b48c:	4b31      	ldr	r3, [pc, #196]	; (800b554 <vTaskSwitchContext+0xec>)
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	4b31      	ldr	r3, [pc, #196]	; (800b558 <vTaskSwitchContext+0xf0>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	429a      	cmp	r2, r3
 800b496:	d909      	bls.n	800b4ac <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b498:	4b30      	ldr	r3, [pc, #192]	; (800b55c <vTaskSwitchContext+0xf4>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b49e:	4a2d      	ldr	r2, [pc, #180]	; (800b554 <vTaskSwitchContext+0xec>)
 800b4a0:	6810      	ldr	r0, [r2, #0]
 800b4a2:	4a2d      	ldr	r2, [pc, #180]	; (800b558 <vTaskSwitchContext+0xf0>)
 800b4a4:	6812      	ldr	r2, [r2, #0]
 800b4a6:	1a82      	subs	r2, r0, r2
 800b4a8:	440a      	add	r2, r1
 800b4aa:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800b4ac:	4b29      	ldr	r3, [pc, #164]	; (800b554 <vTaskSwitchContext+0xec>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a29      	ldr	r2, [pc, #164]	; (800b558 <vTaskSwitchContext+0xf0>)
 800b4b2:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b4b4:	4b2a      	ldr	r3, [pc, #168]	; (800b560 <vTaskSwitchContext+0xf8>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	60fb      	str	r3, [r7, #12]
 800b4ba:	e010      	b.n	800b4de <vTaskSwitchContext+0x76>
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10a      	bne.n	800b4d8 <vTaskSwitchContext+0x70>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	607b      	str	r3, [r7, #4]
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <vTaskSwitchContext+0x6e>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	4921      	ldr	r1, [pc, #132]	; (800b564 <vTaskSwitchContext+0xfc>)
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	440b      	add	r3, r1
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d0e4      	beq.n	800b4bc <vTaskSwitchContext+0x54>
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4a19      	ldr	r2, [pc, #100]	; (800b564 <vTaskSwitchContext+0xfc>)
 800b4fe:	4413      	add	r3, r2
 800b500:	60bb      	str	r3, [r7, #8]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	685a      	ldr	r2, [r3, #4]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	605a      	str	r2, [r3, #4]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	685a      	ldr	r2, [r3, #4]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	3308      	adds	r3, #8
 800b514:	429a      	cmp	r2, r3
 800b516:	d104      	bne.n	800b522 <vTaskSwitchContext+0xba>
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	605a      	str	r2, [r3, #4]
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	4a0c      	ldr	r2, [pc, #48]	; (800b55c <vTaskSwitchContext+0xf4>)
 800b52a:	6013      	str	r3, [r2, #0]
 800b52c:	4a0c      	ldr	r2, [pc, #48]	; (800b560 <vTaskSwitchContext+0xf8>)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b532:	4b0a      	ldr	r3, [pc, #40]	; (800b55c <vTaskSwitchContext+0xf4>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3358      	adds	r3, #88	; 0x58
 800b538:	4a0b      	ldr	r2, [pc, #44]	; (800b568 <vTaskSwitchContext+0x100>)
 800b53a:	6013      	str	r3, [r2, #0]
}
 800b53c:	bf00      	nop
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	2000181c 	.word	0x2000181c
 800b54c:	20001808 	.word	0x20001808
 800b550:	200000a4 	.word	0x200000a4
 800b554:	20001824 	.word	0x20001824
 800b558:	20001820 	.word	0x20001820
 800b55c:	20001338 	.word	0x20001338
 800b560:	200017fc 	.word	0x200017fc
 800b564:	2000133c 	.word	0x2000133c
 800b568:	20000020 	.word	0x20000020

0800b56c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10a      	bne.n	800b592 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	60fb      	str	r3, [r7, #12]
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b592:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <vTaskPlaceOnEventList+0x44>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3318      	adds	r3, #24
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7fe f892 	bl	80096c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	6838      	ldr	r0, [r7, #0]
 800b5a4:	f000 fd4e 	bl	800c044 <prvAddCurrentTaskToDelayedList>
}
 800b5a8:	bf00      	nop
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	20001338 	.word	0x20001338

0800b5b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10a      	bne.n	800b5dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	617b      	str	r3, [r7, #20]
}
 800b5d8:	bf00      	nop
 800b5da:	e7fe      	b.n	800b5da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5dc:	4b0a      	ldr	r3, [pc, #40]	; (800b608 <vTaskPlaceOnEventListRestricted+0x54>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3318      	adds	r3, #24
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f7fe f84a 	bl	800967e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b5f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5f6:	6879      	ldr	r1, [r7, #4]
 800b5f8:	68b8      	ldr	r0, [r7, #8]
 800b5fa:	f000 fd23 	bl	800c044 <prvAddCurrentTaskToDelayedList>
	}
 800b5fe:	bf00      	nop
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20001338 	.word	0x20001338

0800b60c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10a      	bne.n	800b638 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	60fb      	str	r3, [r7, #12]
}
 800b634:	bf00      	nop
 800b636:	e7fe      	b.n	800b636 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	3318      	adds	r3, #24
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fe f879 	bl	8009734 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b642:	4b1e      	ldr	r3, [pc, #120]	; (800b6bc <xTaskRemoveFromEventList+0xb0>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d11d      	bne.n	800b686 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	3304      	adds	r3, #4
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe f870 	bl	8009734 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b658:	4b19      	ldr	r3, [pc, #100]	; (800b6c0 <xTaskRemoveFromEventList+0xb4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d903      	bls.n	800b668 <xTaskRemoveFromEventList+0x5c>
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b664:	4a16      	ldr	r2, [pc, #88]	; (800b6c0 <xTaskRemoveFromEventList+0xb4>)
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b66c:	4613      	mov	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4a13      	ldr	r2, [pc, #76]	; (800b6c4 <xTaskRemoveFromEventList+0xb8>)
 800b676:	441a      	add	r2, r3
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	3304      	adds	r3, #4
 800b67c:	4619      	mov	r1, r3
 800b67e:	4610      	mov	r0, r2
 800b680:	f7fd fffd 	bl	800967e <vListInsertEnd>
 800b684:	e005      	b.n	800b692 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	3318      	adds	r3, #24
 800b68a:	4619      	mov	r1, r3
 800b68c:	480e      	ldr	r0, [pc, #56]	; (800b6c8 <xTaskRemoveFromEventList+0xbc>)
 800b68e:	f7fd fff6 	bl	800967e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b696:	4b0d      	ldr	r3, [pc, #52]	; (800b6cc <xTaskRemoveFromEventList+0xc0>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d905      	bls.n	800b6ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6a4:	4b0a      	ldr	r3, [pc, #40]	; (800b6d0 <xTaskRemoveFromEventList+0xc4>)
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	e001      	b.n	800b6b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b6b0:	697b      	ldr	r3, [r7, #20]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	2000181c 	.word	0x2000181c
 800b6c0:	200017fc 	.word	0x200017fc
 800b6c4:	2000133c 	.word	0x2000133c
 800b6c8:	200017cc 	.word	0x200017cc
 800b6cc:	20001338 	.word	0x20001338
 800b6d0:	20001808 	.word	0x20001808

0800b6d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <vTaskInternalSetTimeOutState+0x24>)
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6e4:	4b05      	ldr	r3, [pc, #20]	; (800b6fc <vTaskInternalSetTimeOutState+0x28>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	605a      	str	r2, [r3, #4]
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bc80      	pop	{r7}
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	2000180c 	.word	0x2000180c
 800b6fc:	200017f8 	.word	0x200017f8

0800b700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10a      	bne.n	800b726 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	613b      	str	r3, [r7, #16]
}
 800b722:	bf00      	nop
 800b724:	e7fe      	b.n	800b724 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	60fb      	str	r3, [r7, #12]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b742:	f001 f8d3 	bl	800c8ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b746:	4b1d      	ldr	r3, [pc, #116]	; (800b7bc <xTaskCheckForTimeOut+0xbc>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	69ba      	ldr	r2, [r7, #24]
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b75e:	d102      	bne.n	800b766 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b760:	2300      	movs	r3, #0
 800b762:	61fb      	str	r3, [r7, #28]
 800b764:	e023      	b.n	800b7ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	4b15      	ldr	r3, [pc, #84]	; (800b7c0 <xTaskCheckForTimeOut+0xc0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d007      	beq.n	800b782 <xTaskCheckForTimeOut+0x82>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	69ba      	ldr	r2, [r7, #24]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d302      	bcc.n	800b782 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b77c:	2301      	movs	r3, #1
 800b77e:	61fb      	str	r3, [r7, #28]
 800b780:	e015      	b.n	800b7ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d20b      	bcs.n	800b7a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	1ad2      	subs	r2, r2, r3
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff ff9b 	bl	800b6d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61fb      	str	r3, [r7, #28]
 800b7a2:	e004      	b.n	800b7ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7ae:	f001 f8cd 	bl	800c94c <vPortExitCritical>

	return xReturn;
 800b7b2:	69fb      	ldr	r3, [r7, #28]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3720      	adds	r7, #32
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	200017f8 	.word	0x200017f8
 800b7c0:	2000180c 	.word	0x2000180c

0800b7c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7c8:	4b03      	ldr	r3, [pc, #12]	; (800b7d8 <vTaskMissedYield+0x14>)
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	601a      	str	r2, [r3, #0]
}
 800b7ce:	bf00      	nop
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bc80      	pop	{r7}
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	20001808 	.word	0x20001808

0800b7dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7e4:	f000 f84c 	bl	800b880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7e8:	4b06      	ldr	r3, [pc, #24]	; (800b804 <prvIdleTask+0x28>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d9f9      	bls.n	800b7e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7f0:	4b05      	ldr	r3, [pc, #20]	; (800b808 <prvIdleTask+0x2c>)
 800b7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b800:	e7f0      	b.n	800b7e4 <prvIdleTask+0x8>
 800b802:	bf00      	nop
 800b804:	2000133c 	.word	0x2000133c
 800b808:	e000ed04 	.word	0xe000ed04

0800b80c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b812:	2300      	movs	r3, #0
 800b814:	607b      	str	r3, [r7, #4]
 800b816:	e00c      	b.n	800b832 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	4613      	mov	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4a10      	ldr	r2, [pc, #64]	; (800b864 <prvInitialiseTaskLists+0x58>)
 800b824:	4413      	add	r3, r2
 800b826:	4618      	mov	r0, r3
 800b828:	f7fd fefe 	bl	8009628 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3301      	adds	r3, #1
 800b830:	607b      	str	r3, [r7, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b37      	cmp	r3, #55	; 0x37
 800b836:	d9ef      	bls.n	800b818 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b838:	480b      	ldr	r0, [pc, #44]	; (800b868 <prvInitialiseTaskLists+0x5c>)
 800b83a:	f7fd fef5 	bl	8009628 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b83e:	480b      	ldr	r0, [pc, #44]	; (800b86c <prvInitialiseTaskLists+0x60>)
 800b840:	f7fd fef2 	bl	8009628 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b844:	480a      	ldr	r0, [pc, #40]	; (800b870 <prvInitialiseTaskLists+0x64>)
 800b846:	f7fd feef 	bl	8009628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b84a:	480a      	ldr	r0, [pc, #40]	; (800b874 <prvInitialiseTaskLists+0x68>)
 800b84c:	f7fd feec 	bl	8009628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b850:	4b09      	ldr	r3, [pc, #36]	; (800b878 <prvInitialiseTaskLists+0x6c>)
 800b852:	4a05      	ldr	r2, [pc, #20]	; (800b868 <prvInitialiseTaskLists+0x5c>)
 800b854:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b856:	4b09      	ldr	r3, [pc, #36]	; (800b87c <prvInitialiseTaskLists+0x70>)
 800b858:	4a04      	ldr	r2, [pc, #16]	; (800b86c <prvInitialiseTaskLists+0x60>)
 800b85a:	601a      	str	r2, [r3, #0]
}
 800b85c:	bf00      	nop
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	2000133c 	.word	0x2000133c
 800b868:	2000179c 	.word	0x2000179c
 800b86c:	200017b0 	.word	0x200017b0
 800b870:	200017cc 	.word	0x200017cc
 800b874:	200017e0 	.word	0x200017e0
 800b878:	200017c4 	.word	0x200017c4
 800b87c:	200017c8 	.word	0x200017c8

0800b880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b880:	b480      	push	{r7}
 800b882:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b884:	bf00      	nop
 800b886:	46bd      	mov	sp, r7
 800b888:	bc80      	pop	{r7}
 800b88a:	4770      	bx	lr

0800b88c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d102      	bne.n	800b8a6 <vTaskGetInfo+0x1a>
 800b8a0:	4b2c      	ldr	r3, [pc, #176]	; (800b954 <vTaskGetInfo+0xc8>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	e000      	b.n	800b8a8 <vTaskGetInfo+0x1c>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800b8e2:	78fb      	ldrb	r3, [r7, #3]
 800b8e4:	2b05      	cmp	r3, #5
 800b8e6:	d01a      	beq.n	800b91e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800b8e8:	4b1a      	ldr	r3, [pc, #104]	; (800b954 <vTaskGetInfo+0xc8>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d103      	bne.n	800b8fa <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	731a      	strb	r2, [r3, #12]
 800b8f8:	e018      	b.n	800b92c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	78fa      	ldrb	r2, [r7, #3]
 800b8fe:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	2b03      	cmp	r3, #3
 800b904:	d112      	bne.n	800b92c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800b906:	f7ff fbb9 	bl	800b07c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2202      	movs	r2, #2
 800b916:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800b918:	f7ff fbbe 	bl	800b098 <xTaskResumeAll>
 800b91c:	e006      	b.n	800b92c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800b91e:	6978      	ldr	r0, [r7, #20]
 800b920:	f7ff f9dc 	bl	800acdc <eTaskGetState>
 800b924:	4603      	mov	r3, r0
 800b926:	461a      	mov	r2, r3
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d009      	beq.n	800b946 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b936:	4618      	mov	r0, r3
 800b938:	f000 f860 	bl	800b9fc <prvTaskCheckFreeStackSpace>
 800b93c:	4603      	mov	r3, r0
 800b93e:	461a      	mov	r2, r3
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800b944:	e002      	b.n	800b94c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2200      	movs	r2, #0
 800b94a:	841a      	strh	r2, [r3, #32]
	}
 800b94c:	bf00      	nop
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	20001338 	.word	0x20001338

0800b958 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b08a      	sub	sp, #40	; 0x28
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	4613      	mov	r3, r2
 800b964:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d03f      	beq.n	800b9f2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	623b      	str	r3, [r7, #32]
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	605a      	str	r2, [r3, #4]
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	685a      	ldr	r2, [r3, #4]
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	3308      	adds	r3, #8
 800b988:	429a      	cmp	r2, r3
 800b98a:	d104      	bne.n	800b996 <prvListTasksWithinSingleList+0x3e>
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	605a      	str	r2, [r3, #4]
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	61bb      	str	r3, [r7, #24]
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	605a      	str	r2, [r3, #4]
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d104      	bne.n	800b9c2 <prvListTasksWithinSingleList+0x6a>
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	685a      	ldr	r2, [r3, #4]
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	605a      	str	r2, [r3, #4]
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800b9ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	00db      	lsls	r3, r3, #3
 800b9d0:	4413      	add	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	1899      	adds	r1, r3, r2
 800b9da:	79fb      	ldrb	r3, [r7, #7]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	6978      	ldr	r0, [r7, #20]
 800b9e0:	f7ff ff54 	bl	800b88c <vTaskGetInfo>
				uxTask++;
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d1d5      	bne.n	800b99e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3728      	adds	r7, #40	; 0x28
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ba04:	2300      	movs	r3, #0
 800ba06:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ba08:	e005      	b.n	800ba16 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3301      	adds	r3, #1
 800ba14:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2ba5      	cmp	r3, #165	; 0xa5
 800ba1c:	d0f5      	beq.n	800ba0a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	089b      	lsrs	r3, r3, #2
 800ba22:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	b29b      	uxth	r3, r3
	}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bc80      	pop	{r7}
 800ba30:	4770      	bx	lr
	...

0800ba34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba3a:	4b0e      	ldr	r3, [pc, #56]	; (800ba74 <prvResetNextTaskUnblockTime+0x40>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <prvResetNextTaskUnblockTime+0x14>
 800ba44:	2301      	movs	r3, #1
 800ba46:	e000      	b.n	800ba4a <prvResetNextTaskUnblockTime+0x16>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba4e:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <prvResetNextTaskUnblockTime+0x44>)
 800ba50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba54:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba56:	e008      	b.n	800ba6a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ba58:	4b06      	ldr	r3, [pc, #24]	; (800ba74 <prvResetNextTaskUnblockTime+0x40>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	4a04      	ldr	r2, [pc, #16]	; (800ba78 <prvResetNextTaskUnblockTime+0x44>)
 800ba68:	6013      	str	r3, [r2, #0]
}
 800ba6a:	bf00      	nop
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bc80      	pop	{r7}
 800ba72:	4770      	bx	lr
 800ba74:	200017c4 	.word	0x200017c4
 800ba78:	20001814 	.word	0x20001814

0800ba7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ba82:	4b04      	ldr	r3, [pc, #16]	; (800ba94 <xTaskGetCurrentTaskHandle+0x18>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ba88:	687b      	ldr	r3, [r7, #4]
	}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bc80      	pop	{r7}
 800ba92:	4770      	bx	lr
 800ba94:	20001338 	.word	0x20001338

0800ba98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba9e:	4b0b      	ldr	r3, [pc, #44]	; (800bacc <xTaskGetSchedulerState+0x34>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d102      	bne.n	800baac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800baa6:	2301      	movs	r3, #1
 800baa8:	607b      	str	r3, [r7, #4]
 800baaa:	e008      	b.n	800babe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baac:	4b08      	ldr	r3, [pc, #32]	; (800bad0 <xTaskGetSchedulerState+0x38>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bab4:	2302      	movs	r3, #2
 800bab6:	607b      	str	r3, [r7, #4]
 800bab8:	e001      	b.n	800babe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800baba:	2300      	movs	r3, #0
 800babc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800babe:	687b      	ldr	r3, [r7, #4]
	}
 800bac0:	4618      	mov	r0, r3
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bc80      	pop	{r7}
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	20001800 	.word	0x20001800
 800bad0:	2000181c 	.word	0x2000181c

0800bad4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bae0:	2300      	movs	r3, #0
 800bae2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d056      	beq.n	800bb98 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	4b2d      	ldr	r3, [pc, #180]	; (800bba4 <xTaskPriorityInherit+0xd0>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d246      	bcs.n	800bb86 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	699b      	ldr	r3, [r3, #24]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	db06      	blt.n	800bb0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb00:	4b28      	ldr	r3, [pc, #160]	; (800bba4 <xTaskPriorityInherit+0xd0>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	6959      	ldr	r1, [r3, #20]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb16:	4613      	mov	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4a22      	ldr	r2, [pc, #136]	; (800bba8 <xTaskPriorityInherit+0xd4>)
 800bb20:	4413      	add	r3, r2
 800bb22:	4299      	cmp	r1, r3
 800bb24:	d101      	bne.n	800bb2a <xTaskPriorityInherit+0x56>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e000      	b.n	800bb2c <xTaskPriorityInherit+0x58>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d022      	beq.n	800bb76 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	3304      	adds	r3, #4
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fd fdfd 	bl	8009734 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb3a:	4b1a      	ldr	r3, [pc, #104]	; (800bba4 <xTaskPriorityInherit+0xd0>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb48:	4b18      	ldr	r3, [pc, #96]	; (800bbac <xTaskPriorityInherit+0xd8>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d903      	bls.n	800bb58 <xTaskPriorityInherit+0x84>
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	4a15      	ldr	r2, [pc, #84]	; (800bbac <xTaskPriorityInherit+0xd8>)
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	4413      	add	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4a10      	ldr	r2, [pc, #64]	; (800bba8 <xTaskPriorityInherit+0xd4>)
 800bb66:	441a      	add	r2, r3
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	4610      	mov	r0, r2
 800bb70:	f7fd fd85 	bl	800967e <vListInsertEnd>
 800bb74:	e004      	b.n	800bb80 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb76:	4b0b      	ldr	r3, [pc, #44]	; (800bba4 <xTaskPriorityInherit+0xd0>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb80:	2301      	movs	r3, #1
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	e008      	b.n	800bb98 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb8a:	4b06      	ldr	r3, [pc, #24]	; (800bba4 <xTaskPriorityInherit+0xd0>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d201      	bcs.n	800bb98 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb94:	2301      	movs	r3, #1
 800bb96:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb98:	68fb      	ldr	r3, [r7, #12]
	}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	20001338 	.word	0x20001338
 800bba8:	2000133c 	.word	0x2000133c
 800bbac:	200017fc 	.word	0x200017fc

0800bbb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d056      	beq.n	800bc74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbc6:	4b2e      	ldr	r3, [pc, #184]	; (800bc80 <xTaskPriorityDisinherit+0xd0>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d00a      	beq.n	800bbe6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	60fb      	str	r3, [r7, #12]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10a      	bne.n	800bc04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	60bb      	str	r3, [r7, #8]
}
 800bc00:	bf00      	nop
 800bc02:	e7fe      	b.n	800bc02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc08:	1e5a      	subs	r2, r3, #1
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d02c      	beq.n	800bc74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d128      	bne.n	800bc74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	3304      	adds	r3, #4
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fd fd84 	bl	8009734 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc44:	4b0f      	ldr	r3, [pc, #60]	; (800bc84 <xTaskPriorityDisinherit+0xd4>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d903      	bls.n	800bc54 <xTaskPriorityDisinherit+0xa4>
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	4a0c      	ldr	r2, [pc, #48]	; (800bc84 <xTaskPriorityDisinherit+0xd4>)
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc58:	4613      	mov	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4a09      	ldr	r2, [pc, #36]	; (800bc88 <xTaskPriorityDisinherit+0xd8>)
 800bc62:	441a      	add	r2, r3
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	3304      	adds	r3, #4
 800bc68:	4619      	mov	r1, r3
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	f7fd fd07 	bl	800967e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc70:	2301      	movs	r3, #1
 800bc72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc74:	697b      	ldr	r3, [r7, #20]
	}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3718      	adds	r7, #24
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	20001338 	.word	0x20001338
 800bc84:	200017fc 	.word	0x200017fc
 800bc88:	2000133c 	.word	0x2000133c

0800bc8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b088      	sub	sp, #32
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d06f      	beq.n	800bd84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10a      	bne.n	800bcc2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	60fb      	str	r3, [r7, #12]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d902      	bls.n	800bcd2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	61fb      	str	r3, [r7, #28]
 800bcd0:	e002      	b.n	800bcd8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcd6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcdc:	69fa      	ldr	r2, [r7, #28]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d050      	beq.n	800bd84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d14b      	bne.n	800bd84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bcec:	4b27      	ldr	r3, [pc, #156]	; (800bd8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	69ba      	ldr	r2, [r7, #24]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d10a      	bne.n	800bd0c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	60bb      	str	r3, [r7, #8]
}
 800bd08:	bf00      	nop
 800bd0a:	e7fe      	b.n	800bd0a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	69fa      	ldr	r2, [r7, #28]
 800bd16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	db04      	blt.n	800bd2a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	6959      	ldr	r1, [r3, #20]
 800bd2e:	693a      	ldr	r2, [r7, #16]
 800bd30:	4613      	mov	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4a15      	ldr	r2, [pc, #84]	; (800bd90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bd3a:	4413      	add	r3, r2
 800bd3c:	4299      	cmp	r1, r3
 800bd3e:	d101      	bne.n	800bd44 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800bd40:	2301      	movs	r3, #1
 800bd42:	e000      	b.n	800bd46 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800bd44:	2300      	movs	r3, #0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d01c      	beq.n	800bd84 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fd fcf0 	bl	8009734 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	4b0e      	ldr	r3, [pc, #56]	; (800bd94 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d903      	bls.n	800bd68 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	4a0b      	ldr	r2, [pc, #44]	; (800bd94 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4a06      	ldr	r2, [pc, #24]	; (800bd90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bd76:	441a      	add	r2, r3
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	f7fd fc7d 	bl	800967e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd84:	bf00      	nop
 800bd86:	3720      	adds	r7, #32
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	20001338 	.word	0x20001338
 800bd90:	2000133c 	.word	0x2000133c
 800bd94:	200017fc 	.word	0x200017fc

0800bd98 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f001 f9b2 	bl	800d10e <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f7f4 f9d0 	bl	8000150 <strlen>
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	e007      	b.n	800bdc4 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	4413      	add	r3, r2
 800bdba:	2220      	movs	r2, #32
 800bdbc:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	60fb      	str	r3, [r7, #12]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b0e      	cmp	r3, #14
 800bdc8:	d9f4      	bls.n	800bdb4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	4413      	add	r3, r2
	}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800bde4:	b590      	push	{r4, r7, lr}
 800bde6:	b089      	sub	sp, #36	; 0x24
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800bdf2:	4b46      	ldr	r3, [pc, #280]	; (800bf0c <vTaskList+0x128>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800bdf8:	4b44      	ldr	r3, [pc, #272]	; (800bf0c <vTaskList+0x128>)
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	4413      	add	r3, r2
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fe71 	bl	800caec <pvPortMalloc>
 800be0a:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d078      	beq.n	800bf04 <vTaskList+0x120>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2200      	movs	r2, #0
 800be16:	4619      	mov	r1, r3
 800be18:	6938      	ldr	r0, [r7, #16]
 800be1a:	f7ff f9e9 	bl	800b1f0 <uxTaskGetSystemState>
 800be1e:	4603      	mov	r3, r0
 800be20:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800be22:	2300      	movs	r3, #0
 800be24:	60bb      	str	r3, [r7, #8]
 800be26:	e066      	b.n	800bef6 <vTaskList+0x112>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	4613      	mov	r3, r2
 800be2c:	00db      	lsls	r3, r3, #3
 800be2e:	4413      	add	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	461a      	mov	r2, r3
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	4413      	add	r3, r2
 800be38:	7b1b      	ldrb	r3, [r3, #12]
 800be3a:	2b04      	cmp	r3, #4
 800be3c:	d81b      	bhi.n	800be76 <vTaskList+0x92>
 800be3e:	a201      	add	r2, pc, #4	; (adr r2, 800be44 <vTaskList+0x60>)
 800be40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be44:	0800be59 	.word	0x0800be59
 800be48:	0800be5f 	.word	0x0800be5f
 800be4c:	0800be65 	.word	0x0800be65
 800be50:	0800be6b 	.word	0x0800be6b
 800be54:	0800be71 	.word	0x0800be71
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800be58:	2358      	movs	r3, #88	; 0x58
 800be5a:	75fb      	strb	r3, [r7, #23]
										break;
 800be5c:	e00e      	b.n	800be7c <vTaskList+0x98>

					case eReady:		cStatus = tskREADY_CHAR;
 800be5e:	2352      	movs	r3, #82	; 0x52
 800be60:	75fb      	strb	r3, [r7, #23]
										break;
 800be62:	e00b      	b.n	800be7c <vTaskList+0x98>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800be64:	2342      	movs	r3, #66	; 0x42
 800be66:	75fb      	strb	r3, [r7, #23]
										break;
 800be68:	e008      	b.n	800be7c <vTaskList+0x98>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800be6a:	2353      	movs	r3, #83	; 0x53
 800be6c:	75fb      	strb	r3, [r7, #23]
										break;
 800be6e:	e005      	b.n	800be7c <vTaskList+0x98>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800be70:	2344      	movs	r3, #68	; 0x44
 800be72:	75fb      	strb	r3, [r7, #23]
										break;
 800be74:	e002      	b.n	800be7c <vTaskList+0x98>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 800be76:	2300      	movs	r3, #0
 800be78:	75fb      	strb	r3, [r7, #23]
										break;
 800be7a:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	4613      	mov	r3, r2
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	4413      	add	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	461a      	mov	r2, r3
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	4413      	add	r3, r2
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff ff81 	bl	800bd98 <prvWriteNameToBuffer>
 800be96:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800be98:	7df9      	ldrb	r1, [r7, #23]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	4613      	mov	r3, r2
 800be9e:	00db      	lsls	r3, r3, #3
 800bea0:	4413      	add	r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	461a      	mov	r2, r3
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	4413      	add	r3, r2
 800beaa:	6918      	ldr	r0, [r3, #16]
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	4613      	mov	r3, r2
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	4413      	add	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	461a      	mov	r2, r3
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	4413      	add	r3, r2
 800bebc:	8c1b      	ldrh	r3, [r3, #32]
 800bebe:	461c      	mov	r4, r3
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	4613      	mov	r3, r2
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	4413      	add	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	461a      	mov	r2, r3
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	4413      	add	r3, r2
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	9400      	str	r4, [sp, #0]
 800bed6:	4603      	mov	r3, r0
 800bed8:	460a      	mov	r2, r1
 800beda:	490d      	ldr	r1, [pc, #52]	; (800bf10 <vTaskList+0x12c>)
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f001 f8e7 	bl	800d0b0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7f4 f934 	bl	8000150 <strlen>
 800bee8:	4602      	mov	r2, r0
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4413      	add	r3, r2
 800beee:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	3301      	adds	r3, #1
 800bef4:	60bb      	str	r3, [r7, #8]
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	429a      	cmp	r2, r3
 800befc:	d394      	bcc.n	800be28 <vTaskList+0x44>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800befe:	6938      	ldr	r0, [r7, #16]
 800bf00:	f000 feb8 	bl	800cc74 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf04:	bf00      	nop
 800bf06:	371c      	adds	r7, #28
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd90      	pop	{r4, r7, pc}
 800bf0c:	200017f4 	.word	0x200017f4
 800bf10:	0800dba4 	.word	0x0800dba4

0800bf14 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800bf22:	4b3a      	ldr	r3, [pc, #232]	; (800c00c <vTaskGetRunTimeStats+0xf8>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	617b      	str	r3, [r7, #20]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800bf28:	4b38      	ldr	r3, [pc, #224]	; (800c00c <vTaskGetRunTimeStats+0xf8>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	4413      	add	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 fdd9 	bl	800caec <pvPortMalloc>
 800bf3a:	61f8      	str	r0, [r7, #28]

		if( pxTaskStatusArray != NULL )
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d060      	beq.n	800c004 <vTaskGetRunTimeStats+0xf0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	f107 020c 	add.w	r2, r7, #12
 800bf48:	4619      	mov	r1, r3
 800bf4a:	69f8      	ldr	r0, [r7, #28]
 800bf4c:	f7ff f950 	bl	800b1f0 <uxTaskGetSystemState>
 800bf50:	4603      	mov	r3, r0
 800bf52:	617b      	str	r3, [r7, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	4a2e      	ldr	r2, [pc, #184]	; (800c010 <vTaskGetRunTimeStats+0xfc>)
 800bf58:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5c:	095b      	lsrs	r3, r3, #5
 800bf5e:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d04b      	beq.n	800bffe <vTaskGetRunTimeStats+0xea>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800bf66:	2300      	movs	r3, #0
 800bf68:	613b      	str	r3, [r7, #16]
 800bf6a:	e044      	b.n	800bff6 <vTaskGetRunTimeStats+0xe2>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	461a      	mov	r2, r3
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	699a      	ldr	r2, [r3, #24]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf84:	61bb      	str	r3, [r7, #24]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	4613      	mov	r3, r2
 800bf8a:	00db      	lsls	r3, r3, #3
 800bf8c:	4413      	add	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	461a      	mov	r2, r3
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	4413      	add	r3, r2
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff fefc 	bl	800bd98 <prvWriteNameToBuffer>
 800bfa0:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00e      	beq.n	800bfc6 <vTaskGetRunTimeStats+0xb2>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	699a      	ldr	r2, [r3, #24]
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	4915      	ldr	r1, [pc, #84]	; (800c014 <vTaskGetRunTimeStats+0x100>)
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f001 f876 	bl	800d0b0 <siprintf>
 800bfc4:	e00d      	b.n	800bfe2 <vTaskGetRunTimeStats+0xce>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800bfc6:	693a      	ldr	r2, [r7, #16]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	00db      	lsls	r3, r3, #3
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	490f      	ldr	r1, [pc, #60]	; (800c018 <vTaskGetRunTimeStats+0x104>)
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 f867 	bl	800d0b0 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7f4 f8b4 	bl	8000150 <strlen>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4413      	add	r3, r2
 800bfee:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	3301      	adds	r3, #1
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	693a      	ldr	r2, [r7, #16]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d3b6      	bcc.n	800bf6c <vTaskGetRunTimeStats+0x58>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800bffe:	69f8      	ldr	r0, [r7, #28]
 800c000:	f000 fe38 	bl	800cc74 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c004:	bf00      	nop
 800c006:	3720      	adds	r7, #32
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	200017f4 	.word	0x200017f4
 800c010:	51eb851f 	.word	0x51eb851f
 800c014:	0800dbb4 	.word	0x0800dbb4
 800c018:	0800dbc0 	.word	0x0800dbc0

0800c01c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c01c:	b480      	push	{r7}
 800c01e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c020:	4b07      	ldr	r3, [pc, #28]	; (800c040 <pvTaskIncrementMutexHeldCount+0x24>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d004      	beq.n	800c032 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c028:	4b05      	ldr	r3, [pc, #20]	; (800c040 <pvTaskIncrementMutexHeldCount+0x24>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c02e:	3201      	adds	r2, #1
 800c030:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c032:	4b03      	ldr	r3, [pc, #12]	; (800c040 <pvTaskIncrementMutexHeldCount+0x24>)
 800c034:	681b      	ldr	r3, [r3, #0]
	}
 800c036:	4618      	mov	r0, r3
 800c038:	46bd      	mov	sp, r7
 800c03a:	bc80      	pop	{r7}
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	20001338 	.word	0x20001338

0800c044 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c04e:	4b21      	ldr	r3, [pc, #132]	; (800c0d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c054:	4b20      	ldr	r3, [pc, #128]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3304      	adds	r3, #4
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fd fb6a 	bl	8009734 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c066:	d10a      	bne.n	800c07e <prvAddCurrentTaskToDelayedList+0x3a>
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d007      	beq.n	800c07e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c06e:	4b1a      	ldr	r3, [pc, #104]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3304      	adds	r3, #4
 800c074:	4619      	mov	r1, r3
 800c076:	4819      	ldr	r0, [pc, #100]	; (800c0dc <prvAddCurrentTaskToDelayedList+0x98>)
 800c078:	f7fd fb01 	bl	800967e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c07c:	e026      	b.n	800c0cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4413      	add	r3, r2
 800c084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c086:	4b14      	ldr	r3, [pc, #80]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	429a      	cmp	r2, r3
 800c094:	d209      	bcs.n	800c0aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c096:	4b12      	ldr	r3, [pc, #72]	; (800c0e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	4b0f      	ldr	r3, [pc, #60]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	4610      	mov	r0, r2
 800c0a4:	f7fd fb0e 	bl	80096c4 <vListInsert>
}
 800c0a8:	e010      	b.n	800c0cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0aa:	4b0e      	ldr	r3, [pc, #56]	; (800c0e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	4b0a      	ldr	r3, [pc, #40]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	f7fd fb04 	bl	80096c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d202      	bcs.n	800c0cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c0c6:	4a08      	ldr	r2, [pc, #32]	; (800c0e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	6013      	str	r3, [r2, #0]
}
 800c0cc:	bf00      	nop
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	200017f8 	.word	0x200017f8
 800c0d8:	20001338 	.word	0x20001338
 800c0dc:	200017e0 	.word	0x200017e0
 800c0e0:	200017c8 	.word	0x200017c8
 800c0e4:	200017c4 	.word	0x200017c4
 800c0e8:	20001814 	.word	0x20001814

0800c0ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08a      	sub	sp, #40	; 0x28
 800c0f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0f6:	f000 facb 	bl	800c690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0fa:	4b1c      	ldr	r3, [pc, #112]	; (800c16c <xTimerCreateTimerTask+0x80>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d021      	beq.n	800c146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c102:	2300      	movs	r3, #0
 800c104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c106:	2300      	movs	r3, #0
 800c108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c10a:	1d3a      	adds	r2, r7, #4
 800c10c:	f107 0108 	add.w	r1, r7, #8
 800c110:	f107 030c 	add.w	r3, r7, #12
 800c114:	4618      	mov	r0, r3
 800c116:	f7fd fa6d 	bl	80095f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	9202      	str	r2, [sp, #8]
 800c122:	9301      	str	r3, [sp, #4]
 800c124:	2318      	movs	r3, #24
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	2300      	movs	r3, #0
 800c12a:	460a      	mov	r2, r1
 800c12c:	4910      	ldr	r1, [pc, #64]	; (800c170 <xTimerCreateTimerTask+0x84>)
 800c12e:	4811      	ldr	r0, [pc, #68]	; (800c174 <xTimerCreateTimerTask+0x88>)
 800c130:	f7fe fbec 	bl	800a90c <xTaskCreateStatic>
 800c134:	4603      	mov	r3, r0
 800c136:	4a10      	ldr	r2, [pc, #64]	; (800c178 <xTimerCreateTimerTask+0x8c>)
 800c138:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c13a:	4b0f      	ldr	r3, [pc, #60]	; (800c178 <xTimerCreateTimerTask+0x8c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c142:	2301      	movs	r3, #1
 800c144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10a      	bne.n	800c162 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	613b      	str	r3, [r7, #16]
}
 800c15e:	bf00      	nop
 800c160:	e7fe      	b.n	800c160 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c162:	697b      	ldr	r3, [r7, #20]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	20001858 	.word	0x20001858
 800c170:	0800dbcc 	.word	0x0800dbcc
 800c174:	0800c299 	.word	0x0800c299
 800c178:	2000185c 	.word	0x2000185c

0800c17c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b08a      	sub	sp, #40	; 0x28
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10a      	bne.n	800c1aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	623b      	str	r3, [r7, #32]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c1aa:	4b1a      	ldr	r3, [pc, #104]	; (800c214 <xTimerGenericCommand+0x98>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d02a      	beq.n	800c208 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b05      	cmp	r3, #5
 800c1c2:	dc18      	bgt.n	800c1f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c1c4:	f7ff fc68 	bl	800ba98 <xTaskGetSchedulerState>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d109      	bne.n	800c1e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c1ce:	4b11      	ldr	r3, [pc, #68]	; (800c214 <xTimerGenericCommand+0x98>)
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	f107 0110 	add.w	r1, r7, #16
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1da:	f7fd fd37 	bl	8009c4c <xQueueGenericSend>
 800c1de:	6278      	str	r0, [r7, #36]	; 0x24
 800c1e0:	e012      	b.n	800c208 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1e2:	4b0c      	ldr	r3, [pc, #48]	; (800c214 <xTimerGenericCommand+0x98>)
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	f107 0110 	add.w	r1, r7, #16
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f7fd fd2d 	bl	8009c4c <xQueueGenericSend>
 800c1f2:	6278      	str	r0, [r7, #36]	; 0x24
 800c1f4:	e008      	b.n	800c208 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1f6:	4b07      	ldr	r3, [pc, #28]	; (800c214 <xTimerGenericCommand+0x98>)
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	f107 0110 	add.w	r1, r7, #16
 800c1fe:	2300      	movs	r3, #0
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	f7fd fe21 	bl	8009e48 <xQueueGenericSendFromISR>
 800c206:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3728      	adds	r7, #40	; 0x28
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20001858 	.word	0x20001858

0800c218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af02      	add	r7, sp, #8
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c222:	4b1c      	ldr	r3, [pc, #112]	; (800c294 <prvProcessExpiredTimer+0x7c>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	3304      	adds	r3, #4
 800c230:	4618      	mov	r0, r3
 800c232:	f7fd fa7f 	bl	8009734 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	69db      	ldr	r3, [r3, #28]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d122      	bne.n	800c284 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	699a      	ldr	r2, [r3, #24]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	18d1      	adds	r1, r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	6978      	ldr	r0, [r7, #20]
 800c24c:	f000 f8c8 	bl	800c3e0 <prvInsertTimerInActiveList>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d016      	beq.n	800c284 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c256:	2300      	movs	r3, #0
 800c258:	9300      	str	r3, [sp, #0]
 800c25a:	2300      	movs	r3, #0
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	2100      	movs	r1, #0
 800c260:	6978      	ldr	r0, [r7, #20]
 800c262:	f7ff ff8b 	bl	800c17c <xTimerGenericCommand>
 800c266:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10a      	bne.n	800c284 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	60fb      	str	r3, [r7, #12]
}
 800c280:	bf00      	nop
 800c282:	e7fe      	b.n	800c282 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c288:	6978      	ldr	r0, [r7, #20]
 800c28a:	4798      	blx	r3
}
 800c28c:	bf00      	nop
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	20001850 	.word	0x20001850

0800c298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2a0:	f107 0308 	add.w	r3, r7, #8
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 f857 	bl	800c358 <prvGetNextExpireTime>
 800c2aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 f803 	bl	800c2bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c2b6:	f000 f8d5 	bl	800c464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2ba:	e7f1      	b.n	800c2a0 <prvTimerTask+0x8>

0800c2bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c2c6:	f7fe fed9 	bl	800b07c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2ca:	f107 0308 	add.w	r3, r7, #8
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 f866 	bl	800c3a0 <prvSampleTimeNow>
 800c2d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d130      	bne.n	800c33e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10a      	bne.n	800c2f8 <prvProcessTimerOrBlockTask+0x3c>
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d806      	bhi.n	800c2f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2ea:	f7fe fed5 	bl	800b098 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2ee:	68f9      	ldr	r1, [r7, #12]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7ff ff91 	bl	800c218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2f6:	e024      	b.n	800c342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d008      	beq.n	800c310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2fe:	4b13      	ldr	r3, [pc, #76]	; (800c34c <prvProcessTimerOrBlockTask+0x90>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	bf0c      	ite	eq
 800c308:	2301      	moveq	r3, #1
 800c30a:	2300      	movne	r3, #0
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c310:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <prvProcessTimerOrBlockTask+0x94>)
 800c312:	6818      	ldr	r0, [r3, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	4619      	mov	r1, r3
 800c31e:	f7fe fac1 	bl	800a8a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c322:	f7fe feb9 	bl	800b098 <xTaskResumeAll>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10a      	bne.n	800c342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c32c:	4b09      	ldr	r3, [pc, #36]	; (800c354 <prvProcessTimerOrBlockTask+0x98>)
 800c32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	f3bf 8f6f 	isb	sy
}
 800c33c:	e001      	b.n	800c342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c33e:	f7fe feab 	bl	800b098 <xTaskResumeAll>
}
 800c342:	bf00      	nop
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	20001854 	.word	0x20001854
 800c350:	20001858 	.word	0x20001858
 800c354:	e000ed04 	.word	0xe000ed04

0800c358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c360:	4b0e      	ldr	r3, [pc, #56]	; (800c39c <prvGetNextExpireTime+0x44>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	bf0c      	ite	eq
 800c36a:	2301      	moveq	r3, #1
 800c36c:	2300      	movne	r3, #0
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	461a      	mov	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d105      	bne.n	800c38a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c37e:	4b07      	ldr	r3, [pc, #28]	; (800c39c <prvGetNextExpireTime+0x44>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60fb      	str	r3, [r7, #12]
 800c388:	e001      	b.n	800c38e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c38a:	2300      	movs	r3, #0
 800c38c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c38e:	68fb      	ldr	r3, [r7, #12]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	bc80      	pop	{r7}
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	20001850 	.word	0x20001850

0800c3a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c3a8:	f7fe ff14 	bl	800b1d4 <xTaskGetTickCount>
 800c3ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c3ae:	4b0b      	ldr	r3, [pc, #44]	; (800c3dc <prvSampleTimeNow+0x3c>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d205      	bcs.n	800c3c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c3b8:	f000 f908 	bl	800c5cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	e002      	b.n	800c3ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3ca:	4a04      	ldr	r2, [pc, #16]	; (800c3dc <prvSampleTimeNow+0x3c>)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20001860 	.word	0x20001860

0800c3e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	429a      	cmp	r2, r3
 800c404:	d812      	bhi.n	800c42c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	1ad2      	subs	r2, r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	429a      	cmp	r2, r3
 800c412:	d302      	bcc.n	800c41a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c414:	2301      	movs	r3, #1
 800c416:	617b      	str	r3, [r7, #20]
 800c418:	e01b      	b.n	800c452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c41a:	4b10      	ldr	r3, [pc, #64]	; (800c45c <prvInsertTimerInActiveList+0x7c>)
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3304      	adds	r3, #4
 800c422:	4619      	mov	r1, r3
 800c424:	4610      	mov	r0, r2
 800c426:	f7fd f94d 	bl	80096c4 <vListInsert>
 800c42a:	e012      	b.n	800c452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	429a      	cmp	r2, r3
 800c432:	d206      	bcs.n	800c442 <prvInsertTimerInActiveList+0x62>
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d302      	bcc.n	800c442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c43c:	2301      	movs	r3, #1
 800c43e:	617b      	str	r3, [r7, #20]
 800c440:	e007      	b.n	800c452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c442:	4b07      	ldr	r3, [pc, #28]	; (800c460 <prvInsertTimerInActiveList+0x80>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3304      	adds	r3, #4
 800c44a:	4619      	mov	r1, r3
 800c44c:	4610      	mov	r0, r2
 800c44e:	f7fd f939 	bl	80096c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c452:	697b      	ldr	r3, [r7, #20]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	20001854 	.word	0x20001854
 800c460:	20001850 	.word	0x20001850

0800c464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08e      	sub	sp, #56	; 0x38
 800c468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c46a:	e09d      	b.n	800c5a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	da18      	bge.n	800c4a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c472:	1d3b      	adds	r3, r7, #4
 800c474:	3304      	adds	r3, #4
 800c476:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10a      	bne.n	800c494 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	61fb      	str	r3, [r7, #28]
}
 800c490:	bf00      	nop
 800c492:	e7fe      	b.n	800c492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c49a:	6850      	ldr	r0, [r2, #4]
 800c49c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c49e:	6892      	ldr	r2, [r2, #8]
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	db7d      	blt.n	800c5a6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d004      	beq.n	800c4c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fd f93a 	bl	8009734 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4c0:	463b      	mov	r3, r7
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7ff ff6c 	bl	800c3a0 <prvSampleTimeNow>
 800c4c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b09      	cmp	r3, #9
 800c4ce:	d86b      	bhi.n	800c5a8 <prvProcessReceivedCommands+0x144>
 800c4d0:	a201      	add	r2, pc, #4	; (adr r2, 800c4d8 <prvProcessReceivedCommands+0x74>)
 800c4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d6:	bf00      	nop
 800c4d8:	0800c501 	.word	0x0800c501
 800c4dc:	0800c501 	.word	0x0800c501
 800c4e0:	0800c501 	.word	0x0800c501
 800c4e4:	0800c5a9 	.word	0x0800c5a9
 800c4e8:	0800c55d 	.word	0x0800c55d
 800c4ec:	0800c595 	.word	0x0800c595
 800c4f0:	0800c501 	.word	0x0800c501
 800c4f4:	0800c501 	.word	0x0800c501
 800c4f8:	0800c5a9 	.word	0x0800c5a9
 800c4fc:	0800c55d 	.word	0x0800c55d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	18d1      	adds	r1, r2, r3
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c50c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c50e:	f7ff ff67 	bl	800c3e0 <prvInsertTimerInActiveList>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d047      	beq.n	800c5a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c51e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d13f      	bne.n	800c5a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52c:	699b      	ldr	r3, [r3, #24]
 800c52e:	441a      	add	r2, r3
 800c530:	2300      	movs	r3, #0
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	2300      	movs	r3, #0
 800c536:	2100      	movs	r1, #0
 800c538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c53a:	f7ff fe1f 	bl	800c17c <xTimerGenericCommand>
 800c53e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c540:	6a3b      	ldr	r3, [r7, #32]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d130      	bne.n	800c5a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	61bb      	str	r3, [r7, #24]
}
 800c558:	bf00      	nop
 800c55a:	e7fe      	b.n	800c55a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c560:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10a      	bne.n	800c580 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	617b      	str	r3, [r7, #20]
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c582:	699a      	ldr	r2, [r3, #24]
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	18d1      	adds	r1, r2, r3
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c58e:	f7ff ff27 	bl	800c3e0 <prvInsertTimerInActiveList>
					break;
 800c592:	e009      	b.n	800c5a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d104      	bne.n	800c5a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c59e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5a0:	f000 fb68 	bl	800cc74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5a4:	e000      	b.n	800c5a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c5a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5a8:	4b07      	ldr	r3, [pc, #28]	; (800c5c8 <prvProcessReceivedCommands+0x164>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	1d39      	adds	r1, r7, #4
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fd fd6f 	bl	800a094 <xQueueReceive>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f47f af57 	bne.w	800c46c <prvProcessReceivedCommands+0x8>
	}
}
 800c5be:	bf00      	nop
 800c5c0:	bf00      	nop
 800c5c2:	3730      	adds	r7, #48	; 0x30
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20001858 	.word	0x20001858

0800c5cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b088      	sub	sp, #32
 800c5d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5d2:	e045      	b.n	800c660 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5d4:	4b2c      	ldr	r3, [pc, #176]	; (800c688 <prvSwitchTimerLists+0xbc>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5de:	4b2a      	ldr	r3, [pc, #168]	; (800c688 <prvSwitchTimerLists+0xbc>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fd f8a1 	bl	8009734 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d12e      	bne.n	800c660 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	699b      	ldr	r3, [r3, #24]
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	4413      	add	r3, r2
 800c60a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	429a      	cmp	r2, r3
 800c612:	d90e      	bls.n	800c632 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c620:	4b19      	ldr	r3, [pc, #100]	; (800c688 <prvSwitchTimerLists+0xbc>)
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	3304      	adds	r3, #4
 800c628:	4619      	mov	r1, r3
 800c62a:	4610      	mov	r0, r2
 800c62c:	f7fd f84a 	bl	80096c4 <vListInsert>
 800c630:	e016      	b.n	800c660 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c632:	2300      	movs	r3, #0
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	2300      	movs	r3, #0
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	2100      	movs	r1, #0
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7ff fd9d 	bl	800c17c <xTimerGenericCommand>
 800c642:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d10a      	bne.n	800c660 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	603b      	str	r3, [r7, #0]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c660:	4b09      	ldr	r3, [pc, #36]	; (800c688 <prvSwitchTimerLists+0xbc>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1b4      	bne.n	800c5d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c66a:	4b07      	ldr	r3, [pc, #28]	; (800c688 <prvSwitchTimerLists+0xbc>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c670:	4b06      	ldr	r3, [pc, #24]	; (800c68c <prvSwitchTimerLists+0xc0>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a04      	ldr	r2, [pc, #16]	; (800c688 <prvSwitchTimerLists+0xbc>)
 800c676:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c678:	4a04      	ldr	r2, [pc, #16]	; (800c68c <prvSwitchTimerLists+0xc0>)
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	6013      	str	r3, [r2, #0]
}
 800c67e:	bf00      	nop
 800c680:	3718      	adds	r7, #24
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20001850 	.word	0x20001850
 800c68c:	20001854 	.word	0x20001854

0800c690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c696:	f000 f929 	bl	800c8ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c69a:	4b15      	ldr	r3, [pc, #84]	; (800c6f0 <prvCheckForValidListAndQueue+0x60>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d120      	bne.n	800c6e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6a2:	4814      	ldr	r0, [pc, #80]	; (800c6f4 <prvCheckForValidListAndQueue+0x64>)
 800c6a4:	f7fc ffc0 	bl	8009628 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6a8:	4813      	ldr	r0, [pc, #76]	; (800c6f8 <prvCheckForValidListAndQueue+0x68>)
 800c6aa:	f7fc ffbd 	bl	8009628 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <prvCheckForValidListAndQueue+0x6c>)
 800c6b0:	4a10      	ldr	r2, [pc, #64]	; (800c6f4 <prvCheckForValidListAndQueue+0x64>)
 800c6b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6b4:	4b12      	ldr	r3, [pc, #72]	; (800c700 <prvCheckForValidListAndQueue+0x70>)
 800c6b6:	4a10      	ldr	r2, [pc, #64]	; (800c6f8 <prvCheckForValidListAndQueue+0x68>)
 800c6b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	4b11      	ldr	r3, [pc, #68]	; (800c704 <prvCheckForValidListAndQueue+0x74>)
 800c6c0:	4a11      	ldr	r2, [pc, #68]	; (800c708 <prvCheckForValidListAndQueue+0x78>)
 800c6c2:	2110      	movs	r1, #16
 800c6c4:	200a      	movs	r0, #10
 800c6c6:	f7fd f8c7 	bl	8009858 <xQueueGenericCreateStatic>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4a08      	ldr	r2, [pc, #32]	; (800c6f0 <prvCheckForValidListAndQueue+0x60>)
 800c6ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c6d0:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <prvCheckForValidListAndQueue+0x60>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d005      	beq.n	800c6e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6d8:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <prvCheckForValidListAndQueue+0x60>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	490b      	ldr	r1, [pc, #44]	; (800c70c <prvCheckForValidListAndQueue+0x7c>)
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fe f88e 	bl	800a800 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6e4:	f000 f932 	bl	800c94c <vPortExitCritical>
}
 800c6e8:	bf00      	nop
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20001858 	.word	0x20001858
 800c6f4:	20001828 	.word	0x20001828
 800c6f8:	2000183c 	.word	0x2000183c
 800c6fc:	20001850 	.word	0x20001850
 800c700:	20001854 	.word	0x20001854
 800c704:	20001904 	.word	0x20001904
 800c708:	20001864 	.word	0x20001864
 800c70c:	0800dbd4 	.word	0x0800dbd4

0800c710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	3b04      	subs	r3, #4
 800c720:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3b04      	subs	r3, #4
 800c72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f023 0201 	bic.w	r2, r3, #1
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3b04      	subs	r3, #4
 800c73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c740:	4a08      	ldr	r2, [pc, #32]	; (800c764 <pxPortInitialiseStack+0x54>)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	3b14      	subs	r3, #20
 800c74a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	3b20      	subs	r3, #32
 800c756:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c758:	68fb      	ldr	r3, [r7, #12]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3714      	adds	r7, #20
 800c75e:	46bd      	mov	sp, r7
 800c760:	bc80      	pop	{r7}
 800c762:	4770      	bx	lr
 800c764:	0800c769 	.word	0x0800c769

0800c768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c76e:	2300      	movs	r3, #0
 800c770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c772:	4b12      	ldr	r3, [pc, #72]	; (800c7bc <prvTaskExitError+0x54>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c77a:	d00a      	beq.n	800c792 <prvTaskExitError+0x2a>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	60fb      	str	r3, [r7, #12]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <prvTaskExitError+0x28>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	60bb      	str	r3, [r7, #8]
}
 800c7a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7a6:	bf00      	nop
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0fc      	beq.n	800c7a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7ae:	bf00      	nop
 800c7b0:	bf00      	nop
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bc80      	pop	{r7}
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	2000001c 	.word	0x2000001c

0800c7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7c0:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <pxCurrentTCBConst2>)
 800c7c2:	6819      	ldr	r1, [r3, #0]
 800c7c4:	6808      	ldr	r0, [r1, #0]
 800c7c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c7ca:	f380 8809 	msr	PSP, r0
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f04f 0000 	mov.w	r0, #0
 800c7d6:	f380 8811 	msr	BASEPRI, r0
 800c7da:	f04e 0e0d 	orr.w	lr, lr, #13
 800c7de:	4770      	bx	lr

0800c7e0 <pxCurrentTCBConst2>:
 800c7e0:	20001338 	.word	0x20001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop

0800c7e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c7e8:	4806      	ldr	r0, [pc, #24]	; (800c804 <prvPortStartFirstTask+0x1c>)
 800c7ea:	6800      	ldr	r0, [r0, #0]
 800c7ec:	6800      	ldr	r0, [r0, #0]
 800c7ee:	f380 8808 	msr	MSP, r0
 800c7f2:	b662      	cpsie	i
 800c7f4:	b661      	cpsie	f
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	df00      	svc	0
 800c800:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c802:	bf00      	nop
 800c804:	e000ed08 	.word	0xe000ed08

0800c808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c80e:	4b32      	ldr	r3, [pc, #200]	; (800c8d8 <xPortStartScheduler+0xd0>)
 800c810:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	b2db      	uxtb	r3, r3
 800c818:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	22ff      	movs	r2, #255	; 0xff
 800c81e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	b2db      	uxtb	r3, r3
 800c826:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c828:	78fb      	ldrb	r3, [r7, #3]
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c830:	b2da      	uxtb	r2, r3
 800c832:	4b2a      	ldr	r3, [pc, #168]	; (800c8dc <xPortStartScheduler+0xd4>)
 800c834:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c836:	4b2a      	ldr	r3, [pc, #168]	; (800c8e0 <xPortStartScheduler+0xd8>)
 800c838:	2207      	movs	r2, #7
 800c83a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c83c:	e009      	b.n	800c852 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c83e:	4b28      	ldr	r3, [pc, #160]	; (800c8e0 <xPortStartScheduler+0xd8>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3b01      	subs	r3, #1
 800c844:	4a26      	ldr	r2, [pc, #152]	; (800c8e0 <xPortStartScheduler+0xd8>)
 800c846:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c852:	78fb      	ldrb	r3, [r7, #3]
 800c854:	b2db      	uxtb	r3, r3
 800c856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c85a:	2b80      	cmp	r3, #128	; 0x80
 800c85c:	d0ef      	beq.n	800c83e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c85e:	4b20      	ldr	r3, [pc, #128]	; (800c8e0 <xPortStartScheduler+0xd8>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f1c3 0307 	rsb	r3, r3, #7
 800c866:	2b04      	cmp	r3, #4
 800c868:	d00a      	beq.n	800c880 <xPortStartScheduler+0x78>
	__asm volatile
 800c86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	60bb      	str	r3, [r7, #8]
}
 800c87c:	bf00      	nop
 800c87e:	e7fe      	b.n	800c87e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c880:	4b17      	ldr	r3, [pc, #92]	; (800c8e0 <xPortStartScheduler+0xd8>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	021b      	lsls	r3, r3, #8
 800c886:	4a16      	ldr	r2, [pc, #88]	; (800c8e0 <xPortStartScheduler+0xd8>)
 800c888:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c88a:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <xPortStartScheduler+0xd8>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c892:	4a13      	ldr	r2, [pc, #76]	; (800c8e0 <xPortStartScheduler+0xd8>)
 800c894:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c89e:	4b11      	ldr	r3, [pc, #68]	; (800c8e4 <xPortStartScheduler+0xdc>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a10      	ldr	r2, [pc, #64]	; (800c8e4 <xPortStartScheduler+0xdc>)
 800c8a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8aa:	4b0e      	ldr	r3, [pc, #56]	; (800c8e4 <xPortStartScheduler+0xdc>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a0d      	ldr	r2, [pc, #52]	; (800c8e4 <xPortStartScheduler+0xdc>)
 800c8b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c8b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8b6:	f000 f8b9 	bl	800ca2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8ba:	4b0b      	ldr	r3, [pc, #44]	; (800c8e8 <xPortStartScheduler+0xe0>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8c0:	f7ff ff92 	bl	800c7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8c4:	f7fe fdd0 	bl	800b468 <vTaskSwitchContext>
	prvTaskExitError();
 800c8c8:	f7ff ff4e 	bl	800c768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	e000e400 	.word	0xe000e400
 800c8dc:	20001954 	.word	0x20001954
 800c8e0:	20001958 	.word	0x20001958
 800c8e4:	e000ed20 	.word	0xe000ed20
 800c8e8:	2000001c 	.word	0x2000001c

0800c8ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	607b      	str	r3, [r7, #4]
}
 800c904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c906:	4b0f      	ldr	r3, [pc, #60]	; (800c944 <vPortEnterCritical+0x58>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3301      	adds	r3, #1
 800c90c:	4a0d      	ldr	r2, [pc, #52]	; (800c944 <vPortEnterCritical+0x58>)
 800c90e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c910:	4b0c      	ldr	r3, [pc, #48]	; (800c944 <vPortEnterCritical+0x58>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d10f      	bne.n	800c938 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c918:	4b0b      	ldr	r3, [pc, #44]	; (800c948 <vPortEnterCritical+0x5c>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00a      	beq.n	800c938 <vPortEnterCritical+0x4c>
	__asm volatile
 800c922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	603b      	str	r3, [r7, #0]
}
 800c934:	bf00      	nop
 800c936:	e7fe      	b.n	800c936 <vPortEnterCritical+0x4a>
	}
}
 800c938:	bf00      	nop
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bc80      	pop	{r7}
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	2000001c 	.word	0x2000001c
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c952:	4b11      	ldr	r3, [pc, #68]	; (800c998 <vPortExitCritical+0x4c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d10a      	bne.n	800c970 <vPortExitCritical+0x24>
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	607b      	str	r3, [r7, #4]
}
 800c96c:	bf00      	nop
 800c96e:	e7fe      	b.n	800c96e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c970:	4b09      	ldr	r3, [pc, #36]	; (800c998 <vPortExitCritical+0x4c>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3b01      	subs	r3, #1
 800c976:	4a08      	ldr	r2, [pc, #32]	; (800c998 <vPortExitCritical+0x4c>)
 800c978:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c97a:	4b07      	ldr	r3, [pc, #28]	; (800c998 <vPortExitCritical+0x4c>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d105      	bne.n	800c98e <vPortExitCritical+0x42>
 800c982:	2300      	movs	r3, #0
 800c984:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	f383 8811 	msr	BASEPRI, r3
}
 800c98c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c98e:	bf00      	nop
 800c990:	370c      	adds	r7, #12
 800c992:	46bd      	mov	sp, r7
 800c994:	bc80      	pop	{r7}
 800c996:	4770      	bx	lr
 800c998:	2000001c 	.word	0x2000001c
 800c99c:	00000000 	.word	0x00000000

0800c9a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9a0:	f3ef 8009 	mrs	r0, PSP
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	4b0d      	ldr	r3, [pc, #52]	; (800c9e0 <pxCurrentTCBConst>)
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c9b0:	6010      	str	r0, [r2, #0]
 800c9b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c9b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c9ba:	f380 8811 	msr	BASEPRI, r0
 800c9be:	f7fe fd53 	bl	800b468 <vTaskSwitchContext>
 800c9c2:	f04f 0000 	mov.w	r0, #0
 800c9c6:	f380 8811 	msr	BASEPRI, r0
 800c9ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c9ce:	6819      	ldr	r1, [r3, #0]
 800c9d0:	6808      	ldr	r0, [r1, #0]
 800c9d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c9d6:	f380 8809 	msr	PSP, r0
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	4770      	bx	lr

0800c9e0 <pxCurrentTCBConst>:
 800c9e0:	20001338 	.word	0x20001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop

0800c9e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	607b      	str	r3, [r7, #4]
}
 800ca00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca02:	f7fe fc73 	bl	800b2ec <xTaskIncrementTick>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d003      	beq.n	800ca14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca0c:	4b06      	ldr	r3, [pc, #24]	; (800ca28 <SysTick_Handler+0x40>)
 800ca0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	2300      	movs	r3, #0
 800ca16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	f383 8811 	msr	BASEPRI, r3
}
 800ca1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	e000ed04 	.word	0xe000ed04

0800ca2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca30:	4b0a      	ldr	r3, [pc, #40]	; (800ca5c <vPortSetupTimerInterrupt+0x30>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca36:	4b0a      	ldr	r3, [pc, #40]	; (800ca60 <vPortSetupTimerInterrupt+0x34>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca3c:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <vPortSetupTimerInterrupt+0x38>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a09      	ldr	r2, [pc, #36]	; (800ca68 <vPortSetupTimerInterrupt+0x3c>)
 800ca42:	fba2 2303 	umull	r2, r3, r2, r3
 800ca46:	099b      	lsrs	r3, r3, #6
 800ca48:	4a08      	ldr	r2, [pc, #32]	; (800ca6c <vPortSetupTimerInterrupt+0x40>)
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca4e:	4b03      	ldr	r3, [pc, #12]	; (800ca5c <vPortSetupTimerInterrupt+0x30>)
 800ca50:	2207      	movs	r2, #7
 800ca52:	601a      	str	r2, [r3, #0]
}
 800ca54:	bf00      	nop
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bc80      	pop	{r7}
 800ca5a:	4770      	bx	lr
 800ca5c:	e000e010 	.word	0xe000e010
 800ca60:	e000e018 	.word	0xe000e018
 800ca64:	20000010 	.word	0x20000010
 800ca68:	10624dd3 	.word	0x10624dd3
 800ca6c:	e000e014 	.word	0xe000e014

0800ca70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca76:	f3ef 8305 	mrs	r3, IPSR
 800ca7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2b0f      	cmp	r3, #15
 800ca80:	d914      	bls.n	800caac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca82:	4a16      	ldr	r2, [pc, #88]	; (800cadc <vPortValidateInterruptPriority+0x6c>)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	4413      	add	r3, r2
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca8c:	4b14      	ldr	r3, [pc, #80]	; (800cae0 <vPortValidateInterruptPriority+0x70>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	7afa      	ldrb	r2, [r7, #11]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d20a      	bcs.n	800caac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	607b      	str	r3, [r7, #4]
}
 800caa8:	bf00      	nop
 800caaa:	e7fe      	b.n	800caaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800caac:	4b0d      	ldr	r3, [pc, #52]	; (800cae4 <vPortValidateInterruptPriority+0x74>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cab4:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <vPortValidateInterruptPriority+0x78>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d90a      	bls.n	800cad2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	f383 8811 	msr	BASEPRI, r3
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	603b      	str	r3, [r7, #0]
}
 800cace:	bf00      	nop
 800cad0:	e7fe      	b.n	800cad0 <vPortValidateInterruptPriority+0x60>
	}
 800cad2:	bf00      	nop
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bc80      	pop	{r7}
 800cada:	4770      	bx	lr
 800cadc:	e000e3f0 	.word	0xe000e3f0
 800cae0:	20001954 	.word	0x20001954
 800cae4:	e000ed0c 	.word	0xe000ed0c
 800cae8:	20001958 	.word	0x20001958

0800caec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08a      	sub	sp, #40	; 0x28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800caf4:	2300      	movs	r3, #0
 800caf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800caf8:	f7fe fac0 	bl	800b07c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cafc:	4b58      	ldr	r3, [pc, #352]	; (800cc60 <pvPortMalloc+0x174>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d101      	bne.n	800cb08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb04:	f000 f91a 	bl	800cd3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb08:	4b56      	ldr	r3, [pc, #344]	; (800cc64 <pvPortMalloc+0x178>)
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4013      	ands	r3, r2
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f040 808e 	bne.w	800cc32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d01d      	beq.n	800cb58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cb1c:	2208      	movs	r2, #8
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4413      	add	r3, r2
 800cb22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f003 0307 	and.w	r3, r3, #7
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d014      	beq.n	800cb58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f023 0307 	bic.w	r3, r3, #7
 800cb34:	3308      	adds	r3, #8
 800cb36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f003 0307 	and.w	r3, r3, #7
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00a      	beq.n	800cb58 <pvPortMalloc+0x6c>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	617b      	str	r3, [r7, #20]
}
 800cb54:	bf00      	nop
 800cb56:	e7fe      	b.n	800cb56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d069      	beq.n	800cc32 <pvPortMalloc+0x146>
 800cb5e:	4b42      	ldr	r3, [pc, #264]	; (800cc68 <pvPortMalloc+0x17c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d864      	bhi.n	800cc32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb68:	4b40      	ldr	r3, [pc, #256]	; (800cc6c <pvPortMalloc+0x180>)
 800cb6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb6c:	4b3f      	ldr	r3, [pc, #252]	; (800cc6c <pvPortMalloc+0x180>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb72:	e004      	b.n	800cb7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d903      	bls.n	800cb90 <pvPortMalloc+0xa4>
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1f1      	bne.n	800cb74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb90:	4b33      	ldr	r3, [pc, #204]	; (800cc60 <pvPortMalloc+0x174>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d04b      	beq.n	800cc32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb9a:	6a3b      	ldr	r3, [r7, #32]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2208      	movs	r2, #8
 800cba0:	4413      	add	r3, r2
 800cba2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	6a3b      	ldr	r3, [r7, #32]
 800cbaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	685a      	ldr	r2, [r3, #4]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	1ad2      	subs	r2, r2, r3
 800cbb4:	2308      	movs	r3, #8
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d91f      	bls.n	800cbfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cbbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	f003 0307 	and.w	r3, r3, #7
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00a      	beq.n	800cbe4 <pvPortMalloc+0xf8>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	613b      	str	r3, [r7, #16]
}
 800cbe0:	bf00      	nop
 800cbe2:	e7fe      	b.n	800cbe2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	1ad2      	subs	r2, r2, r3
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbf6:	69b8      	ldr	r0, [r7, #24]
 800cbf8:	f000 f902 	bl	800ce00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbfc:	4b1a      	ldr	r3, [pc, #104]	; (800cc68 <pvPortMalloc+0x17c>)
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	4a18      	ldr	r2, [pc, #96]	; (800cc68 <pvPortMalloc+0x17c>)
 800cc08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc0a:	4b17      	ldr	r3, [pc, #92]	; (800cc68 <pvPortMalloc+0x17c>)
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	4b18      	ldr	r3, [pc, #96]	; (800cc70 <pvPortMalloc+0x184>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d203      	bcs.n	800cc1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc16:	4b14      	ldr	r3, [pc, #80]	; (800cc68 <pvPortMalloc+0x17c>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a15      	ldr	r2, [pc, #84]	; (800cc70 <pvPortMalloc+0x184>)
 800cc1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	4b10      	ldr	r3, [pc, #64]	; (800cc64 <pvPortMalloc+0x178>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	431a      	orrs	r2, r3
 800cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2e:	2200      	movs	r2, #0
 800cc30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc32:	f7fe fa31 	bl	800b098 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	f003 0307 	and.w	r3, r3, #7
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00a      	beq.n	800cc56 <pvPortMalloc+0x16a>
	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	60fb      	str	r3, [r7, #12]
}
 800cc52:	bf00      	nop
 800cc54:	e7fe      	b.n	800cc54 <pvPortMalloc+0x168>
	return pvReturn;
 800cc56:	69fb      	ldr	r3, [r7, #28]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3728      	adds	r7, #40	; 0x28
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	20004010 	.word	0x20004010
 800cc64:	2000401c 	.word	0x2000401c
 800cc68:	20004014 	.word	0x20004014
 800cc6c:	20004008 	.word	0x20004008
 800cc70:	20004018 	.word	0x20004018

0800cc74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d048      	beq.n	800cd18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc86:	2308      	movs	r3, #8
 800cc88:	425b      	negs	r3, r3
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	685a      	ldr	r2, [r3, #4]
 800cc98:	4b21      	ldr	r3, [pc, #132]	; (800cd20 <vPortFree+0xac>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10a      	bne.n	800ccb8 <vPortFree+0x44>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	60fb      	str	r3, [r7, #12]
}
 800ccb4:	bf00      	nop
 800ccb6:	e7fe      	b.n	800ccb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00a      	beq.n	800ccd6 <vPortFree+0x62>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	60bb      	str	r3, [r7, #8]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	685a      	ldr	r2, [r3, #4]
 800ccda:	4b11      	ldr	r3, [pc, #68]	; (800cd20 <vPortFree+0xac>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4013      	ands	r3, r2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d019      	beq.n	800cd18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d115      	bne.n	800cd18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	685a      	ldr	r2, [r3, #4]
 800ccf0:	4b0b      	ldr	r3, [pc, #44]	; (800cd20 <vPortFree+0xac>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	43db      	mvns	r3, r3
 800ccf6:	401a      	ands	r2, r3
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccfc:	f7fe f9be 	bl	800b07c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	4b07      	ldr	r3, [pc, #28]	; (800cd24 <vPortFree+0xb0>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4413      	add	r3, r2
 800cd0a:	4a06      	ldr	r2, [pc, #24]	; (800cd24 <vPortFree+0xb0>)
 800cd0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd0e:	6938      	ldr	r0, [r7, #16]
 800cd10:	f000 f876 	bl	800ce00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cd14:	f7fe f9c0 	bl	800b098 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd18:	bf00      	nop
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	2000401c 	.word	0x2000401c
 800cd24:	20004014 	.word	0x20004014

0800cd28 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800cd28:	b480      	push	{r7}
 800cd2a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800cd2c:	4b02      	ldr	r3, [pc, #8]	; (800cd38 <xPortGetFreeHeapSize+0x10>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bc80      	pop	{r7}
 800cd36:	4770      	bx	lr
 800cd38:	20004014 	.word	0x20004014

0800cd3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd42:	f242 63ac 	movw	r3, #9900	; 0x26ac
 800cd46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd48:	4b27      	ldr	r3, [pc, #156]	; (800cde8 <prvHeapInit+0xac>)
 800cd4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f003 0307 	and.w	r3, r3, #7
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00c      	beq.n	800cd70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	3307      	adds	r3, #7
 800cd5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f023 0307 	bic.w	r3, r3, #7
 800cd62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	4a1f      	ldr	r2, [pc, #124]	; (800cde8 <prvHeapInit+0xac>)
 800cd6c:	4413      	add	r3, r2
 800cd6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd74:	4a1d      	ldr	r2, [pc, #116]	; (800cdec <prvHeapInit+0xb0>)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd7a:	4b1c      	ldr	r3, [pc, #112]	; (800cdec <prvHeapInit+0xb0>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	4413      	add	r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd88:	2208      	movs	r2, #8
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	1a9b      	subs	r3, r3, r2
 800cd8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f023 0307 	bic.w	r3, r3, #7
 800cd96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	4a15      	ldr	r2, [pc, #84]	; (800cdf0 <prvHeapInit+0xb4>)
 800cd9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd9e:	4b14      	ldr	r3, [pc, #80]	; (800cdf0 <prvHeapInit+0xb4>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2200      	movs	r2, #0
 800cda4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cda6:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <prvHeapInit+0xb4>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	1ad2      	subs	r2, r2, r3
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cdbc:	4b0c      	ldr	r3, [pc, #48]	; (800cdf0 <prvHeapInit+0xb4>)
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	4a0a      	ldr	r2, [pc, #40]	; (800cdf4 <prvHeapInit+0xb8>)
 800cdca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	4a09      	ldr	r2, [pc, #36]	; (800cdf8 <prvHeapInit+0xbc>)
 800cdd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdd4:	4b09      	ldr	r3, [pc, #36]	; (800cdfc <prvHeapInit+0xc0>)
 800cdd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cdda:	601a      	str	r2, [r3, #0]
}
 800cddc:	bf00      	nop
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bc80      	pop	{r7}
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	2000195c 	.word	0x2000195c
 800cdec:	20004008 	.word	0x20004008
 800cdf0:	20004010 	.word	0x20004010
 800cdf4:	20004018 	.word	0x20004018
 800cdf8:	20004014 	.word	0x20004014
 800cdfc:	2000401c 	.word	0x2000401c

0800ce00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce08:	4b27      	ldr	r3, [pc, #156]	; (800cea8 <prvInsertBlockIntoFreeList+0xa8>)
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	e002      	b.n	800ce14 <prvInsertBlockIntoFreeList+0x14>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d8f7      	bhi.n	800ce0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	4413      	add	r3, r2
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d108      	bne.n	800ce42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	441a      	add	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	441a      	add	r2, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d118      	bne.n	800ce88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	4b14      	ldr	r3, [pc, #80]	; (800ceac <prvInsertBlockIntoFreeList+0xac>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d00d      	beq.n	800ce7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	441a      	add	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	601a      	str	r2, [r3, #0]
 800ce7c:	e008      	b.n	800ce90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce7e:	4b0b      	ldr	r3, [pc, #44]	; (800ceac <prvInsertBlockIntoFreeList+0xac>)
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	e003      	b.n	800ce90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d002      	beq.n	800ce9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce9e:	bf00      	nop
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bc80      	pop	{r7}
 800cea6:	4770      	bx	lr
 800cea8:	20004008 	.word	0x20004008
 800ceac:	20004010 	.word	0x20004010

0800ceb0 <__errno>:
 800ceb0:	4b01      	ldr	r3, [pc, #4]	; (800ceb8 <__errno+0x8>)
 800ceb2:	6818      	ldr	r0, [r3, #0]
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	20000020 	.word	0x20000020

0800cebc <__libc_init_array>:
 800cebc:	b570      	push	{r4, r5, r6, lr}
 800cebe:	2600      	movs	r6, #0
 800cec0:	4d0c      	ldr	r5, [pc, #48]	; (800cef4 <__libc_init_array+0x38>)
 800cec2:	4c0d      	ldr	r4, [pc, #52]	; (800cef8 <__libc_init_array+0x3c>)
 800cec4:	1b64      	subs	r4, r4, r5
 800cec6:	10a4      	asrs	r4, r4, #2
 800cec8:	42a6      	cmp	r6, r4
 800ceca:	d109      	bne.n	800cee0 <__libc_init_array+0x24>
 800cecc:	f000 fd22 	bl	800d914 <_init>
 800ced0:	2600      	movs	r6, #0
 800ced2:	4d0a      	ldr	r5, [pc, #40]	; (800cefc <__libc_init_array+0x40>)
 800ced4:	4c0a      	ldr	r4, [pc, #40]	; (800cf00 <__libc_init_array+0x44>)
 800ced6:	1b64      	subs	r4, r4, r5
 800ced8:	10a4      	asrs	r4, r4, #2
 800ceda:	42a6      	cmp	r6, r4
 800cedc:	d105      	bne.n	800ceea <__libc_init_array+0x2e>
 800cede:	bd70      	pop	{r4, r5, r6, pc}
 800cee0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cee4:	4798      	blx	r3
 800cee6:	3601      	adds	r6, #1
 800cee8:	e7ee      	b.n	800cec8 <__libc_init_array+0xc>
 800ceea:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceee:	4798      	blx	r3
 800cef0:	3601      	adds	r6, #1
 800cef2:	e7f2      	b.n	800ceda <__libc_init_array+0x1e>
 800cef4:	0800e0c0 	.word	0x0800e0c0
 800cef8:	0800e0c0 	.word	0x0800e0c0
 800cefc:	0800e0c0 	.word	0x0800e0c0
 800cf00:	0800e0c4 	.word	0x0800e0c4

0800cf04 <__itoa>:
 800cf04:	1e93      	subs	r3, r2, #2
 800cf06:	2b22      	cmp	r3, #34	; 0x22
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	d904      	bls.n	800cf18 <__itoa+0x14>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	461c      	mov	r4, r3
 800cf12:	700b      	strb	r3, [r1, #0]
 800cf14:	4620      	mov	r0, r4
 800cf16:	bd10      	pop	{r4, pc}
 800cf18:	2a0a      	cmp	r2, #10
 800cf1a:	d109      	bne.n	800cf30 <__itoa+0x2c>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	da07      	bge.n	800cf30 <__itoa+0x2c>
 800cf20:	232d      	movs	r3, #45	; 0x2d
 800cf22:	700b      	strb	r3, [r1, #0]
 800cf24:	2101      	movs	r1, #1
 800cf26:	4240      	negs	r0, r0
 800cf28:	4421      	add	r1, r4
 800cf2a:	f000 f90b 	bl	800d144 <__utoa>
 800cf2e:	e7f1      	b.n	800cf14 <__itoa+0x10>
 800cf30:	2100      	movs	r1, #0
 800cf32:	e7f9      	b.n	800cf28 <__itoa+0x24>

0800cf34 <itoa>:
 800cf34:	f7ff bfe6 	b.w	800cf04 <__itoa>

0800cf38 <__retarget_lock_acquire_recursive>:
 800cf38:	4770      	bx	lr

0800cf3a <__retarget_lock_release_recursive>:
 800cf3a:	4770      	bx	lr

0800cf3c <memcpy>:
 800cf3c:	440a      	add	r2, r1
 800cf3e:	4291      	cmp	r1, r2
 800cf40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf44:	d100      	bne.n	800cf48 <memcpy+0xc>
 800cf46:	4770      	bx	lr
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf4e:	4291      	cmp	r1, r2
 800cf50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf54:	d1f9      	bne.n	800cf4a <memcpy+0xe>
 800cf56:	bd10      	pop	{r4, pc}

0800cf58 <memset>:
 800cf58:	4603      	mov	r3, r0
 800cf5a:	4402      	add	r2, r0
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d100      	bne.n	800cf62 <memset+0xa>
 800cf60:	4770      	bx	lr
 800cf62:	f803 1b01 	strb.w	r1, [r3], #1
 800cf66:	e7f9      	b.n	800cf5c <memset+0x4>

0800cf68 <sbrk_aligned>:
 800cf68:	b570      	push	{r4, r5, r6, lr}
 800cf6a:	4e0e      	ldr	r6, [pc, #56]	; (800cfa4 <sbrk_aligned+0x3c>)
 800cf6c:	460c      	mov	r4, r1
 800cf6e:	6831      	ldr	r1, [r6, #0]
 800cf70:	4605      	mov	r5, r0
 800cf72:	b911      	cbnz	r1, 800cf7a <sbrk_aligned+0x12>
 800cf74:	f000 f88c 	bl	800d090 <_sbrk_r>
 800cf78:	6030      	str	r0, [r6, #0]
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f000 f887 	bl	800d090 <_sbrk_r>
 800cf82:	1c43      	adds	r3, r0, #1
 800cf84:	d00a      	beq.n	800cf9c <sbrk_aligned+0x34>
 800cf86:	1cc4      	adds	r4, r0, #3
 800cf88:	f024 0403 	bic.w	r4, r4, #3
 800cf8c:	42a0      	cmp	r0, r4
 800cf8e:	d007      	beq.n	800cfa0 <sbrk_aligned+0x38>
 800cf90:	1a21      	subs	r1, r4, r0
 800cf92:	4628      	mov	r0, r5
 800cf94:	f000 f87c 	bl	800d090 <_sbrk_r>
 800cf98:	3001      	adds	r0, #1
 800cf9a:	d101      	bne.n	800cfa0 <sbrk_aligned+0x38>
 800cf9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	bd70      	pop	{r4, r5, r6, pc}
 800cfa4:	20004028 	.word	0x20004028

0800cfa8 <_malloc_r>:
 800cfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfac:	1ccd      	adds	r5, r1, #3
 800cfae:	f025 0503 	bic.w	r5, r5, #3
 800cfb2:	3508      	adds	r5, #8
 800cfb4:	2d0c      	cmp	r5, #12
 800cfb6:	bf38      	it	cc
 800cfb8:	250c      	movcc	r5, #12
 800cfba:	2d00      	cmp	r5, #0
 800cfbc:	4607      	mov	r7, r0
 800cfbe:	db01      	blt.n	800cfc4 <_malloc_r+0x1c>
 800cfc0:	42a9      	cmp	r1, r5
 800cfc2:	d905      	bls.n	800cfd0 <_malloc_r+0x28>
 800cfc4:	230c      	movs	r3, #12
 800cfc6:	2600      	movs	r6, #0
 800cfc8:	603b      	str	r3, [r7, #0]
 800cfca:	4630      	mov	r0, r6
 800cfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd0:	4e2e      	ldr	r6, [pc, #184]	; (800d08c <_malloc_r+0xe4>)
 800cfd2:	f000 f8f9 	bl	800d1c8 <__malloc_lock>
 800cfd6:	6833      	ldr	r3, [r6, #0]
 800cfd8:	461c      	mov	r4, r3
 800cfda:	bb34      	cbnz	r4, 800d02a <_malloc_r+0x82>
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4638      	mov	r0, r7
 800cfe0:	f7ff ffc2 	bl	800cf68 <sbrk_aligned>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	d14d      	bne.n	800d086 <_malloc_r+0xde>
 800cfea:	6834      	ldr	r4, [r6, #0]
 800cfec:	4626      	mov	r6, r4
 800cfee:	2e00      	cmp	r6, #0
 800cff0:	d140      	bne.n	800d074 <_malloc_r+0xcc>
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	4631      	mov	r1, r6
 800cff6:	4638      	mov	r0, r7
 800cff8:	eb04 0803 	add.w	r8, r4, r3
 800cffc:	f000 f848 	bl	800d090 <_sbrk_r>
 800d000:	4580      	cmp	r8, r0
 800d002:	d13a      	bne.n	800d07a <_malloc_r+0xd2>
 800d004:	6821      	ldr	r1, [r4, #0]
 800d006:	3503      	adds	r5, #3
 800d008:	1a6d      	subs	r5, r5, r1
 800d00a:	f025 0503 	bic.w	r5, r5, #3
 800d00e:	3508      	adds	r5, #8
 800d010:	2d0c      	cmp	r5, #12
 800d012:	bf38      	it	cc
 800d014:	250c      	movcc	r5, #12
 800d016:	4638      	mov	r0, r7
 800d018:	4629      	mov	r1, r5
 800d01a:	f7ff ffa5 	bl	800cf68 <sbrk_aligned>
 800d01e:	3001      	adds	r0, #1
 800d020:	d02b      	beq.n	800d07a <_malloc_r+0xd2>
 800d022:	6823      	ldr	r3, [r4, #0]
 800d024:	442b      	add	r3, r5
 800d026:	6023      	str	r3, [r4, #0]
 800d028:	e00e      	b.n	800d048 <_malloc_r+0xa0>
 800d02a:	6822      	ldr	r2, [r4, #0]
 800d02c:	1b52      	subs	r2, r2, r5
 800d02e:	d41e      	bmi.n	800d06e <_malloc_r+0xc6>
 800d030:	2a0b      	cmp	r2, #11
 800d032:	d916      	bls.n	800d062 <_malloc_r+0xba>
 800d034:	1961      	adds	r1, r4, r5
 800d036:	42a3      	cmp	r3, r4
 800d038:	6025      	str	r5, [r4, #0]
 800d03a:	bf18      	it	ne
 800d03c:	6059      	strne	r1, [r3, #4]
 800d03e:	6863      	ldr	r3, [r4, #4]
 800d040:	bf08      	it	eq
 800d042:	6031      	streq	r1, [r6, #0]
 800d044:	5162      	str	r2, [r4, r5]
 800d046:	604b      	str	r3, [r1, #4]
 800d048:	4638      	mov	r0, r7
 800d04a:	f104 060b 	add.w	r6, r4, #11
 800d04e:	f000 f8c1 	bl	800d1d4 <__malloc_unlock>
 800d052:	f026 0607 	bic.w	r6, r6, #7
 800d056:	1d23      	adds	r3, r4, #4
 800d058:	1af2      	subs	r2, r6, r3
 800d05a:	d0b6      	beq.n	800cfca <_malloc_r+0x22>
 800d05c:	1b9b      	subs	r3, r3, r6
 800d05e:	50a3      	str	r3, [r4, r2]
 800d060:	e7b3      	b.n	800cfca <_malloc_r+0x22>
 800d062:	6862      	ldr	r2, [r4, #4]
 800d064:	42a3      	cmp	r3, r4
 800d066:	bf0c      	ite	eq
 800d068:	6032      	streq	r2, [r6, #0]
 800d06a:	605a      	strne	r2, [r3, #4]
 800d06c:	e7ec      	b.n	800d048 <_malloc_r+0xa0>
 800d06e:	4623      	mov	r3, r4
 800d070:	6864      	ldr	r4, [r4, #4]
 800d072:	e7b2      	b.n	800cfda <_malloc_r+0x32>
 800d074:	4634      	mov	r4, r6
 800d076:	6876      	ldr	r6, [r6, #4]
 800d078:	e7b9      	b.n	800cfee <_malloc_r+0x46>
 800d07a:	230c      	movs	r3, #12
 800d07c:	4638      	mov	r0, r7
 800d07e:	603b      	str	r3, [r7, #0]
 800d080:	f000 f8a8 	bl	800d1d4 <__malloc_unlock>
 800d084:	e7a1      	b.n	800cfca <_malloc_r+0x22>
 800d086:	6025      	str	r5, [r4, #0]
 800d088:	e7de      	b.n	800d048 <_malloc_r+0xa0>
 800d08a:	bf00      	nop
 800d08c:	20004024 	.word	0x20004024

0800d090 <_sbrk_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	2300      	movs	r3, #0
 800d094:	4d05      	ldr	r5, [pc, #20]	; (800d0ac <_sbrk_r+0x1c>)
 800d096:	4604      	mov	r4, r0
 800d098:	4608      	mov	r0, r1
 800d09a:	602b      	str	r3, [r5, #0]
 800d09c:	f7f7 fcb6 	bl	8004a0c <_sbrk>
 800d0a0:	1c43      	adds	r3, r0, #1
 800d0a2:	d102      	bne.n	800d0aa <_sbrk_r+0x1a>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	b103      	cbz	r3, 800d0aa <_sbrk_r+0x1a>
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	2000402c 	.word	0x2000402c

0800d0b0 <siprintf>:
 800d0b0:	b40e      	push	{r1, r2, r3}
 800d0b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0b6:	b500      	push	{lr}
 800d0b8:	b09c      	sub	sp, #112	; 0x70
 800d0ba:	ab1d      	add	r3, sp, #116	; 0x74
 800d0bc:	9002      	str	r0, [sp, #8]
 800d0be:	9006      	str	r0, [sp, #24]
 800d0c0:	9107      	str	r1, [sp, #28]
 800d0c2:	9104      	str	r1, [sp, #16]
 800d0c4:	4808      	ldr	r0, [pc, #32]	; (800d0e8 <siprintf+0x38>)
 800d0c6:	4909      	ldr	r1, [pc, #36]	; (800d0ec <siprintf+0x3c>)
 800d0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0cc:	9105      	str	r1, [sp, #20]
 800d0ce:	6800      	ldr	r0, [r0, #0]
 800d0d0:	a902      	add	r1, sp, #8
 800d0d2:	9301      	str	r3, [sp, #4]
 800d0d4:	f000 f928 	bl	800d328 <_svfiprintf_r>
 800d0d8:	2200      	movs	r2, #0
 800d0da:	9b02      	ldr	r3, [sp, #8]
 800d0dc:	701a      	strb	r2, [r3, #0]
 800d0de:	b01c      	add	sp, #112	; 0x70
 800d0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e4:	b003      	add	sp, #12
 800d0e6:	4770      	bx	lr
 800d0e8:	20000020 	.word	0x20000020
 800d0ec:	ffff0208 	.word	0xffff0208

0800d0f0 <strcat>:
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	b510      	push	{r4, lr}
 800d0f4:	7814      	ldrb	r4, [r2, #0]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	3201      	adds	r2, #1
 800d0fa:	2c00      	cmp	r4, #0
 800d0fc:	d1fa      	bne.n	800d0f4 <strcat+0x4>
 800d0fe:	3b01      	subs	r3, #1
 800d100:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d104:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d108:	2a00      	cmp	r2, #0
 800d10a:	d1f9      	bne.n	800d100 <strcat+0x10>
 800d10c:	bd10      	pop	{r4, pc}

0800d10e <strcpy>:
 800d10e:	4603      	mov	r3, r0
 800d110:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d114:	f803 2b01 	strb.w	r2, [r3], #1
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d1f9      	bne.n	800d110 <strcpy+0x2>
 800d11c:	4770      	bx	lr

0800d11e <strncat>:
 800d11e:	b530      	push	{r4, r5, lr}
 800d120:	4604      	mov	r4, r0
 800d122:	7825      	ldrb	r5, [r4, #0]
 800d124:	4623      	mov	r3, r4
 800d126:	3401      	adds	r4, #1
 800d128:	2d00      	cmp	r5, #0
 800d12a:	d1fa      	bne.n	800d122 <strncat+0x4>
 800d12c:	3a01      	subs	r2, #1
 800d12e:	d304      	bcc.n	800d13a <strncat+0x1c>
 800d130:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d134:	f803 4b01 	strb.w	r4, [r3], #1
 800d138:	b904      	cbnz	r4, 800d13c <strncat+0x1e>
 800d13a:	bd30      	pop	{r4, r5, pc}
 800d13c:	2a00      	cmp	r2, #0
 800d13e:	d1f5      	bne.n	800d12c <strncat+0xe>
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	e7f3      	b.n	800d12c <strncat+0xe>

0800d144 <__utoa>:
 800d144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d146:	b08b      	sub	sp, #44	; 0x2c
 800d148:	4605      	mov	r5, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	466e      	mov	r6, sp
 800d14e:	4c1d      	ldr	r4, [pc, #116]	; (800d1c4 <__utoa+0x80>)
 800d150:	f104 0c20 	add.w	ip, r4, #32
 800d154:	4637      	mov	r7, r6
 800d156:	6820      	ldr	r0, [r4, #0]
 800d158:	6861      	ldr	r1, [r4, #4]
 800d15a:	3408      	adds	r4, #8
 800d15c:	c703      	stmia	r7!, {r0, r1}
 800d15e:	4564      	cmp	r4, ip
 800d160:	463e      	mov	r6, r7
 800d162:	d1f7      	bne.n	800d154 <__utoa+0x10>
 800d164:	7921      	ldrb	r1, [r4, #4]
 800d166:	6820      	ldr	r0, [r4, #0]
 800d168:	7139      	strb	r1, [r7, #4]
 800d16a:	1e91      	subs	r1, r2, #2
 800d16c:	2922      	cmp	r1, #34	; 0x22
 800d16e:	6038      	str	r0, [r7, #0]
 800d170:	f04f 0100 	mov.w	r1, #0
 800d174:	d904      	bls.n	800d180 <__utoa+0x3c>
 800d176:	7019      	strb	r1, [r3, #0]
 800d178:	460b      	mov	r3, r1
 800d17a:	4618      	mov	r0, r3
 800d17c:	b00b      	add	sp, #44	; 0x2c
 800d17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d180:	1e58      	subs	r0, r3, #1
 800d182:	4684      	mov	ip, r0
 800d184:	fbb5 f7f2 	udiv	r7, r5, r2
 800d188:	fb02 5617 	mls	r6, r2, r7, r5
 800d18c:	3628      	adds	r6, #40	; 0x28
 800d18e:	446e      	add	r6, sp
 800d190:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d194:	460c      	mov	r4, r1
 800d196:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d19a:	462e      	mov	r6, r5
 800d19c:	42b2      	cmp	r2, r6
 800d19e:	463d      	mov	r5, r7
 800d1a0:	f101 0101 	add.w	r1, r1, #1
 800d1a4:	d9ee      	bls.n	800d184 <__utoa+0x40>
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	545a      	strb	r2, [r3, r1]
 800d1aa:	1919      	adds	r1, r3, r4
 800d1ac:	1aa5      	subs	r5, r4, r2
 800d1ae:	42aa      	cmp	r2, r5
 800d1b0:	dae3      	bge.n	800d17a <__utoa+0x36>
 800d1b2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d1b6:	780e      	ldrb	r6, [r1, #0]
 800d1b8:	3201      	adds	r2, #1
 800d1ba:	7006      	strb	r6, [r0, #0]
 800d1bc:	f801 5901 	strb.w	r5, [r1], #-1
 800d1c0:	e7f4      	b.n	800d1ac <__utoa+0x68>
 800d1c2:	bf00      	nop
 800d1c4:	0800e060 	.word	0x0800e060

0800d1c8 <__malloc_lock>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	; (800d1d0 <__malloc_lock+0x8>)
 800d1ca:	f7ff beb5 	b.w	800cf38 <__retarget_lock_acquire_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	20004020 	.word	0x20004020

0800d1d4 <__malloc_unlock>:
 800d1d4:	4801      	ldr	r0, [pc, #4]	; (800d1dc <__malloc_unlock+0x8>)
 800d1d6:	f7ff beb0 	b.w	800cf3a <__retarget_lock_release_recursive>
 800d1da:	bf00      	nop
 800d1dc:	20004020 	.word	0x20004020

0800d1e0 <_free_r>:
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	4605      	mov	r5, r0
 800d1e4:	2900      	cmp	r1, #0
 800d1e6:	d040      	beq.n	800d26a <_free_r+0x8a>
 800d1e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ec:	1f0c      	subs	r4, r1, #4
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	bfb8      	it	lt
 800d1f2:	18e4      	addlt	r4, r4, r3
 800d1f4:	f7ff ffe8 	bl	800d1c8 <__malloc_lock>
 800d1f8:	4a1c      	ldr	r2, [pc, #112]	; (800d26c <_free_r+0x8c>)
 800d1fa:	6813      	ldr	r3, [r2, #0]
 800d1fc:	b933      	cbnz	r3, 800d20c <_free_r+0x2c>
 800d1fe:	6063      	str	r3, [r4, #4]
 800d200:	6014      	str	r4, [r2, #0]
 800d202:	4628      	mov	r0, r5
 800d204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d208:	f7ff bfe4 	b.w	800d1d4 <__malloc_unlock>
 800d20c:	42a3      	cmp	r3, r4
 800d20e:	d908      	bls.n	800d222 <_free_r+0x42>
 800d210:	6820      	ldr	r0, [r4, #0]
 800d212:	1821      	adds	r1, r4, r0
 800d214:	428b      	cmp	r3, r1
 800d216:	bf01      	itttt	eq
 800d218:	6819      	ldreq	r1, [r3, #0]
 800d21a:	685b      	ldreq	r3, [r3, #4]
 800d21c:	1809      	addeq	r1, r1, r0
 800d21e:	6021      	streq	r1, [r4, #0]
 800d220:	e7ed      	b.n	800d1fe <_free_r+0x1e>
 800d222:	461a      	mov	r2, r3
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	b10b      	cbz	r3, 800d22c <_free_r+0x4c>
 800d228:	42a3      	cmp	r3, r4
 800d22a:	d9fa      	bls.n	800d222 <_free_r+0x42>
 800d22c:	6811      	ldr	r1, [r2, #0]
 800d22e:	1850      	adds	r0, r2, r1
 800d230:	42a0      	cmp	r0, r4
 800d232:	d10b      	bne.n	800d24c <_free_r+0x6c>
 800d234:	6820      	ldr	r0, [r4, #0]
 800d236:	4401      	add	r1, r0
 800d238:	1850      	adds	r0, r2, r1
 800d23a:	4283      	cmp	r3, r0
 800d23c:	6011      	str	r1, [r2, #0]
 800d23e:	d1e0      	bne.n	800d202 <_free_r+0x22>
 800d240:	6818      	ldr	r0, [r3, #0]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	4401      	add	r1, r0
 800d246:	6011      	str	r1, [r2, #0]
 800d248:	6053      	str	r3, [r2, #4]
 800d24a:	e7da      	b.n	800d202 <_free_r+0x22>
 800d24c:	d902      	bls.n	800d254 <_free_r+0x74>
 800d24e:	230c      	movs	r3, #12
 800d250:	602b      	str	r3, [r5, #0]
 800d252:	e7d6      	b.n	800d202 <_free_r+0x22>
 800d254:	6820      	ldr	r0, [r4, #0]
 800d256:	1821      	adds	r1, r4, r0
 800d258:	428b      	cmp	r3, r1
 800d25a:	bf01      	itttt	eq
 800d25c:	6819      	ldreq	r1, [r3, #0]
 800d25e:	685b      	ldreq	r3, [r3, #4]
 800d260:	1809      	addeq	r1, r1, r0
 800d262:	6021      	streq	r1, [r4, #0]
 800d264:	6063      	str	r3, [r4, #4]
 800d266:	6054      	str	r4, [r2, #4]
 800d268:	e7cb      	b.n	800d202 <_free_r+0x22>
 800d26a:	bd38      	pop	{r3, r4, r5, pc}
 800d26c:	20004024 	.word	0x20004024

0800d270 <__ssputs_r>:
 800d270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d274:	688e      	ldr	r6, [r1, #8]
 800d276:	4682      	mov	sl, r0
 800d278:	429e      	cmp	r6, r3
 800d27a:	460c      	mov	r4, r1
 800d27c:	4690      	mov	r8, r2
 800d27e:	461f      	mov	r7, r3
 800d280:	d838      	bhi.n	800d2f4 <__ssputs_r+0x84>
 800d282:	898a      	ldrh	r2, [r1, #12]
 800d284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d288:	d032      	beq.n	800d2f0 <__ssputs_r+0x80>
 800d28a:	6825      	ldr	r5, [r4, #0]
 800d28c:	6909      	ldr	r1, [r1, #16]
 800d28e:	3301      	adds	r3, #1
 800d290:	eba5 0901 	sub.w	r9, r5, r1
 800d294:	6965      	ldr	r5, [r4, #20]
 800d296:	444b      	add	r3, r9
 800d298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d29c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2a0:	106d      	asrs	r5, r5, #1
 800d2a2:	429d      	cmp	r5, r3
 800d2a4:	bf38      	it	cc
 800d2a6:	461d      	movcc	r5, r3
 800d2a8:	0553      	lsls	r3, r2, #21
 800d2aa:	d531      	bpl.n	800d310 <__ssputs_r+0xa0>
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	f7ff fe7b 	bl	800cfa8 <_malloc_r>
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	b950      	cbnz	r0, 800d2cc <__ssputs_r+0x5c>
 800d2b6:	230c      	movs	r3, #12
 800d2b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2bc:	f8ca 3000 	str.w	r3, [sl]
 800d2c0:	89a3      	ldrh	r3, [r4, #12]
 800d2c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c6:	81a3      	strh	r3, [r4, #12]
 800d2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2cc:	464a      	mov	r2, r9
 800d2ce:	6921      	ldr	r1, [r4, #16]
 800d2d0:	f7ff fe34 	bl	800cf3c <memcpy>
 800d2d4:	89a3      	ldrh	r3, [r4, #12]
 800d2d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2de:	81a3      	strh	r3, [r4, #12]
 800d2e0:	6126      	str	r6, [r4, #16]
 800d2e2:	444e      	add	r6, r9
 800d2e4:	6026      	str	r6, [r4, #0]
 800d2e6:	463e      	mov	r6, r7
 800d2e8:	6165      	str	r5, [r4, #20]
 800d2ea:	eba5 0509 	sub.w	r5, r5, r9
 800d2ee:	60a5      	str	r5, [r4, #8]
 800d2f0:	42be      	cmp	r6, r7
 800d2f2:	d900      	bls.n	800d2f6 <__ssputs_r+0x86>
 800d2f4:	463e      	mov	r6, r7
 800d2f6:	4632      	mov	r2, r6
 800d2f8:	4641      	mov	r1, r8
 800d2fa:	6820      	ldr	r0, [r4, #0]
 800d2fc:	f000 fab8 	bl	800d870 <memmove>
 800d300:	68a3      	ldr	r3, [r4, #8]
 800d302:	2000      	movs	r0, #0
 800d304:	1b9b      	subs	r3, r3, r6
 800d306:	60a3      	str	r3, [r4, #8]
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	4433      	add	r3, r6
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	e7db      	b.n	800d2c8 <__ssputs_r+0x58>
 800d310:	462a      	mov	r2, r5
 800d312:	f000 fac7 	bl	800d8a4 <_realloc_r>
 800d316:	4606      	mov	r6, r0
 800d318:	2800      	cmp	r0, #0
 800d31a:	d1e1      	bne.n	800d2e0 <__ssputs_r+0x70>
 800d31c:	4650      	mov	r0, sl
 800d31e:	6921      	ldr	r1, [r4, #16]
 800d320:	f7ff ff5e 	bl	800d1e0 <_free_r>
 800d324:	e7c7      	b.n	800d2b6 <__ssputs_r+0x46>
	...

0800d328 <_svfiprintf_r>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	4698      	mov	r8, r3
 800d32e:	898b      	ldrh	r3, [r1, #12]
 800d330:	4607      	mov	r7, r0
 800d332:	061b      	lsls	r3, r3, #24
 800d334:	460d      	mov	r5, r1
 800d336:	4614      	mov	r4, r2
 800d338:	b09d      	sub	sp, #116	; 0x74
 800d33a:	d50e      	bpl.n	800d35a <_svfiprintf_r+0x32>
 800d33c:	690b      	ldr	r3, [r1, #16]
 800d33e:	b963      	cbnz	r3, 800d35a <_svfiprintf_r+0x32>
 800d340:	2140      	movs	r1, #64	; 0x40
 800d342:	f7ff fe31 	bl	800cfa8 <_malloc_r>
 800d346:	6028      	str	r0, [r5, #0]
 800d348:	6128      	str	r0, [r5, #16]
 800d34a:	b920      	cbnz	r0, 800d356 <_svfiprintf_r+0x2e>
 800d34c:	230c      	movs	r3, #12
 800d34e:	603b      	str	r3, [r7, #0]
 800d350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d354:	e0d1      	b.n	800d4fa <_svfiprintf_r+0x1d2>
 800d356:	2340      	movs	r3, #64	; 0x40
 800d358:	616b      	str	r3, [r5, #20]
 800d35a:	2300      	movs	r3, #0
 800d35c:	9309      	str	r3, [sp, #36]	; 0x24
 800d35e:	2320      	movs	r3, #32
 800d360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d364:	2330      	movs	r3, #48	; 0x30
 800d366:	f04f 0901 	mov.w	r9, #1
 800d36a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d36e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d514 <_svfiprintf_r+0x1ec>
 800d372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d376:	4623      	mov	r3, r4
 800d378:	469a      	mov	sl, r3
 800d37a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d37e:	b10a      	cbz	r2, 800d384 <_svfiprintf_r+0x5c>
 800d380:	2a25      	cmp	r2, #37	; 0x25
 800d382:	d1f9      	bne.n	800d378 <_svfiprintf_r+0x50>
 800d384:	ebba 0b04 	subs.w	fp, sl, r4
 800d388:	d00b      	beq.n	800d3a2 <_svfiprintf_r+0x7a>
 800d38a:	465b      	mov	r3, fp
 800d38c:	4622      	mov	r2, r4
 800d38e:	4629      	mov	r1, r5
 800d390:	4638      	mov	r0, r7
 800d392:	f7ff ff6d 	bl	800d270 <__ssputs_r>
 800d396:	3001      	adds	r0, #1
 800d398:	f000 80aa 	beq.w	800d4f0 <_svfiprintf_r+0x1c8>
 800d39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d39e:	445a      	add	r2, fp
 800d3a0:	9209      	str	r2, [sp, #36]	; 0x24
 800d3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f000 80a2 	beq.w	800d4f0 <_svfiprintf_r+0x1c8>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3b6:	f10a 0a01 	add.w	sl, sl, #1
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	9307      	str	r3, [sp, #28]
 800d3be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3c2:	931a      	str	r3, [sp, #104]	; 0x68
 800d3c4:	4654      	mov	r4, sl
 800d3c6:	2205      	movs	r2, #5
 800d3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3cc:	4851      	ldr	r0, [pc, #324]	; (800d514 <_svfiprintf_r+0x1ec>)
 800d3ce:	f000 fa41 	bl	800d854 <memchr>
 800d3d2:	9a04      	ldr	r2, [sp, #16]
 800d3d4:	b9d8      	cbnz	r0, 800d40e <_svfiprintf_r+0xe6>
 800d3d6:	06d0      	lsls	r0, r2, #27
 800d3d8:	bf44      	itt	mi
 800d3da:	2320      	movmi	r3, #32
 800d3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3e0:	0711      	lsls	r1, r2, #28
 800d3e2:	bf44      	itt	mi
 800d3e4:	232b      	movmi	r3, #43	; 0x2b
 800d3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f0:	d015      	beq.n	800d41e <_svfiprintf_r+0xf6>
 800d3f2:	4654      	mov	r4, sl
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	f04f 0c0a 	mov.w	ip, #10
 800d3fa:	9a07      	ldr	r2, [sp, #28]
 800d3fc:	4621      	mov	r1, r4
 800d3fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d402:	3b30      	subs	r3, #48	; 0x30
 800d404:	2b09      	cmp	r3, #9
 800d406:	d94e      	bls.n	800d4a6 <_svfiprintf_r+0x17e>
 800d408:	b1b0      	cbz	r0, 800d438 <_svfiprintf_r+0x110>
 800d40a:	9207      	str	r2, [sp, #28]
 800d40c:	e014      	b.n	800d438 <_svfiprintf_r+0x110>
 800d40e:	eba0 0308 	sub.w	r3, r0, r8
 800d412:	fa09 f303 	lsl.w	r3, r9, r3
 800d416:	4313      	orrs	r3, r2
 800d418:	46a2      	mov	sl, r4
 800d41a:	9304      	str	r3, [sp, #16]
 800d41c:	e7d2      	b.n	800d3c4 <_svfiprintf_r+0x9c>
 800d41e:	9b03      	ldr	r3, [sp, #12]
 800d420:	1d19      	adds	r1, r3, #4
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	9103      	str	r1, [sp, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	bfbb      	ittet	lt
 800d42a:	425b      	neglt	r3, r3
 800d42c:	f042 0202 	orrlt.w	r2, r2, #2
 800d430:	9307      	strge	r3, [sp, #28]
 800d432:	9307      	strlt	r3, [sp, #28]
 800d434:	bfb8      	it	lt
 800d436:	9204      	strlt	r2, [sp, #16]
 800d438:	7823      	ldrb	r3, [r4, #0]
 800d43a:	2b2e      	cmp	r3, #46	; 0x2e
 800d43c:	d10c      	bne.n	800d458 <_svfiprintf_r+0x130>
 800d43e:	7863      	ldrb	r3, [r4, #1]
 800d440:	2b2a      	cmp	r3, #42	; 0x2a
 800d442:	d135      	bne.n	800d4b0 <_svfiprintf_r+0x188>
 800d444:	9b03      	ldr	r3, [sp, #12]
 800d446:	3402      	adds	r4, #2
 800d448:	1d1a      	adds	r2, r3, #4
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	9203      	str	r2, [sp, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bfb8      	it	lt
 800d452:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d456:	9305      	str	r3, [sp, #20]
 800d458:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d518 <_svfiprintf_r+0x1f0>
 800d45c:	2203      	movs	r2, #3
 800d45e:	4650      	mov	r0, sl
 800d460:	7821      	ldrb	r1, [r4, #0]
 800d462:	f000 f9f7 	bl	800d854 <memchr>
 800d466:	b140      	cbz	r0, 800d47a <_svfiprintf_r+0x152>
 800d468:	2340      	movs	r3, #64	; 0x40
 800d46a:	eba0 000a 	sub.w	r0, r0, sl
 800d46e:	fa03 f000 	lsl.w	r0, r3, r0
 800d472:	9b04      	ldr	r3, [sp, #16]
 800d474:	3401      	adds	r4, #1
 800d476:	4303      	orrs	r3, r0
 800d478:	9304      	str	r3, [sp, #16]
 800d47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d47e:	2206      	movs	r2, #6
 800d480:	4826      	ldr	r0, [pc, #152]	; (800d51c <_svfiprintf_r+0x1f4>)
 800d482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d486:	f000 f9e5 	bl	800d854 <memchr>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d038      	beq.n	800d500 <_svfiprintf_r+0x1d8>
 800d48e:	4b24      	ldr	r3, [pc, #144]	; (800d520 <_svfiprintf_r+0x1f8>)
 800d490:	bb1b      	cbnz	r3, 800d4da <_svfiprintf_r+0x1b2>
 800d492:	9b03      	ldr	r3, [sp, #12]
 800d494:	3307      	adds	r3, #7
 800d496:	f023 0307 	bic.w	r3, r3, #7
 800d49a:	3308      	adds	r3, #8
 800d49c:	9303      	str	r3, [sp, #12]
 800d49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a0:	4433      	add	r3, r6
 800d4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a4:	e767      	b.n	800d376 <_svfiprintf_r+0x4e>
 800d4a6:	460c      	mov	r4, r1
 800d4a8:	2001      	movs	r0, #1
 800d4aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4ae:	e7a5      	b.n	800d3fc <_svfiprintf_r+0xd4>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f04f 0c0a 	mov.w	ip, #10
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	3401      	adds	r4, #1
 800d4ba:	9305      	str	r3, [sp, #20]
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c2:	3a30      	subs	r2, #48	; 0x30
 800d4c4:	2a09      	cmp	r2, #9
 800d4c6:	d903      	bls.n	800d4d0 <_svfiprintf_r+0x1a8>
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0c5      	beq.n	800d458 <_svfiprintf_r+0x130>
 800d4cc:	9105      	str	r1, [sp, #20]
 800d4ce:	e7c3      	b.n	800d458 <_svfiprintf_r+0x130>
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4d8:	e7f0      	b.n	800d4bc <_svfiprintf_r+0x194>
 800d4da:	ab03      	add	r3, sp, #12
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	462a      	mov	r2, r5
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	4b10      	ldr	r3, [pc, #64]	; (800d524 <_svfiprintf_r+0x1fc>)
 800d4e4:	a904      	add	r1, sp, #16
 800d4e6:	f3af 8000 	nop.w
 800d4ea:	1c42      	adds	r2, r0, #1
 800d4ec:	4606      	mov	r6, r0
 800d4ee:	d1d6      	bne.n	800d49e <_svfiprintf_r+0x176>
 800d4f0:	89ab      	ldrh	r3, [r5, #12]
 800d4f2:	065b      	lsls	r3, r3, #25
 800d4f4:	f53f af2c 	bmi.w	800d350 <_svfiprintf_r+0x28>
 800d4f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4fa:	b01d      	add	sp, #116	; 0x74
 800d4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d500:	ab03      	add	r3, sp, #12
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	462a      	mov	r2, r5
 800d506:	4638      	mov	r0, r7
 800d508:	4b06      	ldr	r3, [pc, #24]	; (800d524 <_svfiprintf_r+0x1fc>)
 800d50a:	a904      	add	r1, sp, #16
 800d50c:	f000 f87c 	bl	800d608 <_printf_i>
 800d510:	e7eb      	b.n	800d4ea <_svfiprintf_r+0x1c2>
 800d512:	bf00      	nop
 800d514:	0800e085 	.word	0x0800e085
 800d518:	0800e08b 	.word	0x0800e08b
 800d51c:	0800e08f 	.word	0x0800e08f
 800d520:	00000000 	.word	0x00000000
 800d524:	0800d271 	.word	0x0800d271

0800d528 <_printf_common>:
 800d528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d52c:	4616      	mov	r6, r2
 800d52e:	4699      	mov	r9, r3
 800d530:	688a      	ldr	r2, [r1, #8]
 800d532:	690b      	ldr	r3, [r1, #16]
 800d534:	4607      	mov	r7, r0
 800d536:	4293      	cmp	r3, r2
 800d538:	bfb8      	it	lt
 800d53a:	4613      	movlt	r3, r2
 800d53c:	6033      	str	r3, [r6, #0]
 800d53e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d542:	460c      	mov	r4, r1
 800d544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d548:	b10a      	cbz	r2, 800d54e <_printf_common+0x26>
 800d54a:	3301      	adds	r3, #1
 800d54c:	6033      	str	r3, [r6, #0]
 800d54e:	6823      	ldr	r3, [r4, #0]
 800d550:	0699      	lsls	r1, r3, #26
 800d552:	bf42      	ittt	mi
 800d554:	6833      	ldrmi	r3, [r6, #0]
 800d556:	3302      	addmi	r3, #2
 800d558:	6033      	strmi	r3, [r6, #0]
 800d55a:	6825      	ldr	r5, [r4, #0]
 800d55c:	f015 0506 	ands.w	r5, r5, #6
 800d560:	d106      	bne.n	800d570 <_printf_common+0x48>
 800d562:	f104 0a19 	add.w	sl, r4, #25
 800d566:	68e3      	ldr	r3, [r4, #12]
 800d568:	6832      	ldr	r2, [r6, #0]
 800d56a:	1a9b      	subs	r3, r3, r2
 800d56c:	42ab      	cmp	r3, r5
 800d56e:	dc28      	bgt.n	800d5c2 <_printf_common+0x9a>
 800d570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d574:	1e13      	subs	r3, r2, #0
 800d576:	6822      	ldr	r2, [r4, #0]
 800d578:	bf18      	it	ne
 800d57a:	2301      	movne	r3, #1
 800d57c:	0692      	lsls	r2, r2, #26
 800d57e:	d42d      	bmi.n	800d5dc <_printf_common+0xb4>
 800d580:	4649      	mov	r1, r9
 800d582:	4638      	mov	r0, r7
 800d584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d588:	47c0      	blx	r8
 800d58a:	3001      	adds	r0, #1
 800d58c:	d020      	beq.n	800d5d0 <_printf_common+0xa8>
 800d58e:	6823      	ldr	r3, [r4, #0]
 800d590:	68e5      	ldr	r5, [r4, #12]
 800d592:	f003 0306 	and.w	r3, r3, #6
 800d596:	2b04      	cmp	r3, #4
 800d598:	bf18      	it	ne
 800d59a:	2500      	movne	r5, #0
 800d59c:	6832      	ldr	r2, [r6, #0]
 800d59e:	f04f 0600 	mov.w	r6, #0
 800d5a2:	68a3      	ldr	r3, [r4, #8]
 800d5a4:	bf08      	it	eq
 800d5a6:	1aad      	subeq	r5, r5, r2
 800d5a8:	6922      	ldr	r2, [r4, #16]
 800d5aa:	bf08      	it	eq
 800d5ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	bfc4      	itt	gt
 800d5b4:	1a9b      	subgt	r3, r3, r2
 800d5b6:	18ed      	addgt	r5, r5, r3
 800d5b8:	341a      	adds	r4, #26
 800d5ba:	42b5      	cmp	r5, r6
 800d5bc:	d11a      	bne.n	800d5f4 <_printf_common+0xcc>
 800d5be:	2000      	movs	r0, #0
 800d5c0:	e008      	b.n	800d5d4 <_printf_common+0xac>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	4652      	mov	r2, sl
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	47c0      	blx	r8
 800d5cc:	3001      	adds	r0, #1
 800d5ce:	d103      	bne.n	800d5d8 <_printf_common+0xb0>
 800d5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d8:	3501      	adds	r5, #1
 800d5da:	e7c4      	b.n	800d566 <_printf_common+0x3e>
 800d5dc:	2030      	movs	r0, #48	; 0x30
 800d5de:	18e1      	adds	r1, r4, r3
 800d5e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5ea:	4422      	add	r2, r4
 800d5ec:	3302      	adds	r3, #2
 800d5ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5f2:	e7c5      	b.n	800d580 <_printf_common+0x58>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	4622      	mov	r2, r4
 800d5f8:	4649      	mov	r1, r9
 800d5fa:	4638      	mov	r0, r7
 800d5fc:	47c0      	blx	r8
 800d5fe:	3001      	adds	r0, #1
 800d600:	d0e6      	beq.n	800d5d0 <_printf_common+0xa8>
 800d602:	3601      	adds	r6, #1
 800d604:	e7d9      	b.n	800d5ba <_printf_common+0x92>
	...

0800d608 <_printf_i>:
 800d608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d60c:	7e0f      	ldrb	r7, [r1, #24]
 800d60e:	4691      	mov	r9, r2
 800d610:	2f78      	cmp	r7, #120	; 0x78
 800d612:	4680      	mov	r8, r0
 800d614:	460c      	mov	r4, r1
 800d616:	469a      	mov	sl, r3
 800d618:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d61a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d61e:	d807      	bhi.n	800d630 <_printf_i+0x28>
 800d620:	2f62      	cmp	r7, #98	; 0x62
 800d622:	d80a      	bhi.n	800d63a <_printf_i+0x32>
 800d624:	2f00      	cmp	r7, #0
 800d626:	f000 80d9 	beq.w	800d7dc <_printf_i+0x1d4>
 800d62a:	2f58      	cmp	r7, #88	; 0x58
 800d62c:	f000 80a4 	beq.w	800d778 <_printf_i+0x170>
 800d630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d638:	e03a      	b.n	800d6b0 <_printf_i+0xa8>
 800d63a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d63e:	2b15      	cmp	r3, #21
 800d640:	d8f6      	bhi.n	800d630 <_printf_i+0x28>
 800d642:	a101      	add	r1, pc, #4	; (adr r1, 800d648 <_printf_i+0x40>)
 800d644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d648:	0800d6a1 	.word	0x0800d6a1
 800d64c:	0800d6b5 	.word	0x0800d6b5
 800d650:	0800d631 	.word	0x0800d631
 800d654:	0800d631 	.word	0x0800d631
 800d658:	0800d631 	.word	0x0800d631
 800d65c:	0800d631 	.word	0x0800d631
 800d660:	0800d6b5 	.word	0x0800d6b5
 800d664:	0800d631 	.word	0x0800d631
 800d668:	0800d631 	.word	0x0800d631
 800d66c:	0800d631 	.word	0x0800d631
 800d670:	0800d631 	.word	0x0800d631
 800d674:	0800d7c3 	.word	0x0800d7c3
 800d678:	0800d6e5 	.word	0x0800d6e5
 800d67c:	0800d7a5 	.word	0x0800d7a5
 800d680:	0800d631 	.word	0x0800d631
 800d684:	0800d631 	.word	0x0800d631
 800d688:	0800d7e5 	.word	0x0800d7e5
 800d68c:	0800d631 	.word	0x0800d631
 800d690:	0800d6e5 	.word	0x0800d6e5
 800d694:	0800d631 	.word	0x0800d631
 800d698:	0800d631 	.word	0x0800d631
 800d69c:	0800d7ad 	.word	0x0800d7ad
 800d6a0:	682b      	ldr	r3, [r5, #0]
 800d6a2:	1d1a      	adds	r2, r3, #4
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	602a      	str	r2, [r5, #0]
 800d6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e0a4      	b.n	800d7fe <_printf_i+0x1f6>
 800d6b4:	6820      	ldr	r0, [r4, #0]
 800d6b6:	6829      	ldr	r1, [r5, #0]
 800d6b8:	0606      	lsls	r6, r0, #24
 800d6ba:	f101 0304 	add.w	r3, r1, #4
 800d6be:	d50a      	bpl.n	800d6d6 <_printf_i+0xce>
 800d6c0:	680e      	ldr	r6, [r1, #0]
 800d6c2:	602b      	str	r3, [r5, #0]
 800d6c4:	2e00      	cmp	r6, #0
 800d6c6:	da03      	bge.n	800d6d0 <_printf_i+0xc8>
 800d6c8:	232d      	movs	r3, #45	; 0x2d
 800d6ca:	4276      	negs	r6, r6
 800d6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6d0:	230a      	movs	r3, #10
 800d6d2:	485e      	ldr	r0, [pc, #376]	; (800d84c <_printf_i+0x244>)
 800d6d4:	e019      	b.n	800d70a <_printf_i+0x102>
 800d6d6:	680e      	ldr	r6, [r1, #0]
 800d6d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6dc:	602b      	str	r3, [r5, #0]
 800d6de:	bf18      	it	ne
 800d6e0:	b236      	sxthne	r6, r6
 800d6e2:	e7ef      	b.n	800d6c4 <_printf_i+0xbc>
 800d6e4:	682b      	ldr	r3, [r5, #0]
 800d6e6:	6820      	ldr	r0, [r4, #0]
 800d6e8:	1d19      	adds	r1, r3, #4
 800d6ea:	6029      	str	r1, [r5, #0]
 800d6ec:	0601      	lsls	r1, r0, #24
 800d6ee:	d501      	bpl.n	800d6f4 <_printf_i+0xec>
 800d6f0:	681e      	ldr	r6, [r3, #0]
 800d6f2:	e002      	b.n	800d6fa <_printf_i+0xf2>
 800d6f4:	0646      	lsls	r6, r0, #25
 800d6f6:	d5fb      	bpl.n	800d6f0 <_printf_i+0xe8>
 800d6f8:	881e      	ldrh	r6, [r3, #0]
 800d6fa:	2f6f      	cmp	r7, #111	; 0x6f
 800d6fc:	bf0c      	ite	eq
 800d6fe:	2308      	moveq	r3, #8
 800d700:	230a      	movne	r3, #10
 800d702:	4852      	ldr	r0, [pc, #328]	; (800d84c <_printf_i+0x244>)
 800d704:	2100      	movs	r1, #0
 800d706:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d70a:	6865      	ldr	r5, [r4, #4]
 800d70c:	2d00      	cmp	r5, #0
 800d70e:	bfa8      	it	ge
 800d710:	6821      	ldrge	r1, [r4, #0]
 800d712:	60a5      	str	r5, [r4, #8]
 800d714:	bfa4      	itt	ge
 800d716:	f021 0104 	bicge.w	r1, r1, #4
 800d71a:	6021      	strge	r1, [r4, #0]
 800d71c:	b90e      	cbnz	r6, 800d722 <_printf_i+0x11a>
 800d71e:	2d00      	cmp	r5, #0
 800d720:	d04d      	beq.n	800d7be <_printf_i+0x1b6>
 800d722:	4615      	mov	r5, r2
 800d724:	fbb6 f1f3 	udiv	r1, r6, r3
 800d728:	fb03 6711 	mls	r7, r3, r1, r6
 800d72c:	5dc7      	ldrb	r7, [r0, r7]
 800d72e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d732:	4637      	mov	r7, r6
 800d734:	42bb      	cmp	r3, r7
 800d736:	460e      	mov	r6, r1
 800d738:	d9f4      	bls.n	800d724 <_printf_i+0x11c>
 800d73a:	2b08      	cmp	r3, #8
 800d73c:	d10b      	bne.n	800d756 <_printf_i+0x14e>
 800d73e:	6823      	ldr	r3, [r4, #0]
 800d740:	07de      	lsls	r6, r3, #31
 800d742:	d508      	bpl.n	800d756 <_printf_i+0x14e>
 800d744:	6923      	ldr	r3, [r4, #16]
 800d746:	6861      	ldr	r1, [r4, #4]
 800d748:	4299      	cmp	r1, r3
 800d74a:	bfde      	ittt	le
 800d74c:	2330      	movle	r3, #48	; 0x30
 800d74e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d752:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d756:	1b52      	subs	r2, r2, r5
 800d758:	6122      	str	r2, [r4, #16]
 800d75a:	464b      	mov	r3, r9
 800d75c:	4621      	mov	r1, r4
 800d75e:	4640      	mov	r0, r8
 800d760:	f8cd a000 	str.w	sl, [sp]
 800d764:	aa03      	add	r2, sp, #12
 800d766:	f7ff fedf 	bl	800d528 <_printf_common>
 800d76a:	3001      	adds	r0, #1
 800d76c:	d14c      	bne.n	800d808 <_printf_i+0x200>
 800d76e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d772:	b004      	add	sp, #16
 800d774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d778:	4834      	ldr	r0, [pc, #208]	; (800d84c <_printf_i+0x244>)
 800d77a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d77e:	6829      	ldr	r1, [r5, #0]
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	f851 6b04 	ldr.w	r6, [r1], #4
 800d786:	6029      	str	r1, [r5, #0]
 800d788:	061d      	lsls	r5, r3, #24
 800d78a:	d514      	bpl.n	800d7b6 <_printf_i+0x1ae>
 800d78c:	07df      	lsls	r7, r3, #31
 800d78e:	bf44      	itt	mi
 800d790:	f043 0320 	orrmi.w	r3, r3, #32
 800d794:	6023      	strmi	r3, [r4, #0]
 800d796:	b91e      	cbnz	r6, 800d7a0 <_printf_i+0x198>
 800d798:	6823      	ldr	r3, [r4, #0]
 800d79a:	f023 0320 	bic.w	r3, r3, #32
 800d79e:	6023      	str	r3, [r4, #0]
 800d7a0:	2310      	movs	r3, #16
 800d7a2:	e7af      	b.n	800d704 <_printf_i+0xfc>
 800d7a4:	6823      	ldr	r3, [r4, #0]
 800d7a6:	f043 0320 	orr.w	r3, r3, #32
 800d7aa:	6023      	str	r3, [r4, #0]
 800d7ac:	2378      	movs	r3, #120	; 0x78
 800d7ae:	4828      	ldr	r0, [pc, #160]	; (800d850 <_printf_i+0x248>)
 800d7b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d7b4:	e7e3      	b.n	800d77e <_printf_i+0x176>
 800d7b6:	0659      	lsls	r1, r3, #25
 800d7b8:	bf48      	it	mi
 800d7ba:	b2b6      	uxthmi	r6, r6
 800d7bc:	e7e6      	b.n	800d78c <_printf_i+0x184>
 800d7be:	4615      	mov	r5, r2
 800d7c0:	e7bb      	b.n	800d73a <_printf_i+0x132>
 800d7c2:	682b      	ldr	r3, [r5, #0]
 800d7c4:	6826      	ldr	r6, [r4, #0]
 800d7c6:	1d18      	adds	r0, r3, #4
 800d7c8:	6961      	ldr	r1, [r4, #20]
 800d7ca:	6028      	str	r0, [r5, #0]
 800d7cc:	0635      	lsls	r5, r6, #24
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	d501      	bpl.n	800d7d6 <_printf_i+0x1ce>
 800d7d2:	6019      	str	r1, [r3, #0]
 800d7d4:	e002      	b.n	800d7dc <_printf_i+0x1d4>
 800d7d6:	0670      	lsls	r0, r6, #25
 800d7d8:	d5fb      	bpl.n	800d7d2 <_printf_i+0x1ca>
 800d7da:	8019      	strh	r1, [r3, #0]
 800d7dc:	2300      	movs	r3, #0
 800d7de:	4615      	mov	r5, r2
 800d7e0:	6123      	str	r3, [r4, #16]
 800d7e2:	e7ba      	b.n	800d75a <_printf_i+0x152>
 800d7e4:	682b      	ldr	r3, [r5, #0]
 800d7e6:	2100      	movs	r1, #0
 800d7e8:	1d1a      	adds	r2, r3, #4
 800d7ea:	602a      	str	r2, [r5, #0]
 800d7ec:	681d      	ldr	r5, [r3, #0]
 800d7ee:	6862      	ldr	r2, [r4, #4]
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f000 f82f 	bl	800d854 <memchr>
 800d7f6:	b108      	cbz	r0, 800d7fc <_printf_i+0x1f4>
 800d7f8:	1b40      	subs	r0, r0, r5
 800d7fa:	6060      	str	r0, [r4, #4]
 800d7fc:	6863      	ldr	r3, [r4, #4]
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	2300      	movs	r3, #0
 800d802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d806:	e7a8      	b.n	800d75a <_printf_i+0x152>
 800d808:	462a      	mov	r2, r5
 800d80a:	4649      	mov	r1, r9
 800d80c:	4640      	mov	r0, r8
 800d80e:	6923      	ldr	r3, [r4, #16]
 800d810:	47d0      	blx	sl
 800d812:	3001      	adds	r0, #1
 800d814:	d0ab      	beq.n	800d76e <_printf_i+0x166>
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	079b      	lsls	r3, r3, #30
 800d81a:	d413      	bmi.n	800d844 <_printf_i+0x23c>
 800d81c:	68e0      	ldr	r0, [r4, #12]
 800d81e:	9b03      	ldr	r3, [sp, #12]
 800d820:	4298      	cmp	r0, r3
 800d822:	bfb8      	it	lt
 800d824:	4618      	movlt	r0, r3
 800d826:	e7a4      	b.n	800d772 <_printf_i+0x16a>
 800d828:	2301      	movs	r3, #1
 800d82a:	4632      	mov	r2, r6
 800d82c:	4649      	mov	r1, r9
 800d82e:	4640      	mov	r0, r8
 800d830:	47d0      	blx	sl
 800d832:	3001      	adds	r0, #1
 800d834:	d09b      	beq.n	800d76e <_printf_i+0x166>
 800d836:	3501      	adds	r5, #1
 800d838:	68e3      	ldr	r3, [r4, #12]
 800d83a:	9903      	ldr	r1, [sp, #12]
 800d83c:	1a5b      	subs	r3, r3, r1
 800d83e:	42ab      	cmp	r3, r5
 800d840:	dcf2      	bgt.n	800d828 <_printf_i+0x220>
 800d842:	e7eb      	b.n	800d81c <_printf_i+0x214>
 800d844:	2500      	movs	r5, #0
 800d846:	f104 0619 	add.w	r6, r4, #25
 800d84a:	e7f5      	b.n	800d838 <_printf_i+0x230>
 800d84c:	0800e096 	.word	0x0800e096
 800d850:	0800e0a7 	.word	0x0800e0a7

0800d854 <memchr>:
 800d854:	4603      	mov	r3, r0
 800d856:	b510      	push	{r4, lr}
 800d858:	b2c9      	uxtb	r1, r1
 800d85a:	4402      	add	r2, r0
 800d85c:	4293      	cmp	r3, r2
 800d85e:	4618      	mov	r0, r3
 800d860:	d101      	bne.n	800d866 <memchr+0x12>
 800d862:	2000      	movs	r0, #0
 800d864:	e003      	b.n	800d86e <memchr+0x1a>
 800d866:	7804      	ldrb	r4, [r0, #0]
 800d868:	3301      	adds	r3, #1
 800d86a:	428c      	cmp	r4, r1
 800d86c:	d1f6      	bne.n	800d85c <memchr+0x8>
 800d86e:	bd10      	pop	{r4, pc}

0800d870 <memmove>:
 800d870:	4288      	cmp	r0, r1
 800d872:	b510      	push	{r4, lr}
 800d874:	eb01 0402 	add.w	r4, r1, r2
 800d878:	d902      	bls.n	800d880 <memmove+0x10>
 800d87a:	4284      	cmp	r4, r0
 800d87c:	4623      	mov	r3, r4
 800d87e:	d807      	bhi.n	800d890 <memmove+0x20>
 800d880:	1e43      	subs	r3, r0, #1
 800d882:	42a1      	cmp	r1, r4
 800d884:	d008      	beq.n	800d898 <memmove+0x28>
 800d886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d88a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d88e:	e7f8      	b.n	800d882 <memmove+0x12>
 800d890:	4601      	mov	r1, r0
 800d892:	4402      	add	r2, r0
 800d894:	428a      	cmp	r2, r1
 800d896:	d100      	bne.n	800d89a <memmove+0x2a>
 800d898:	bd10      	pop	{r4, pc}
 800d89a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d89e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8a2:	e7f7      	b.n	800d894 <memmove+0x24>

0800d8a4 <_realloc_r>:
 800d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a8:	4680      	mov	r8, r0
 800d8aa:	4614      	mov	r4, r2
 800d8ac:	460e      	mov	r6, r1
 800d8ae:	b921      	cbnz	r1, 800d8ba <_realloc_r+0x16>
 800d8b0:	4611      	mov	r1, r2
 800d8b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b6:	f7ff bb77 	b.w	800cfa8 <_malloc_r>
 800d8ba:	b92a      	cbnz	r2, 800d8c8 <_realloc_r+0x24>
 800d8bc:	f7ff fc90 	bl	800d1e0 <_free_r>
 800d8c0:	4625      	mov	r5, r4
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c8:	f000 f81b 	bl	800d902 <_malloc_usable_size_r>
 800d8cc:	4284      	cmp	r4, r0
 800d8ce:	4607      	mov	r7, r0
 800d8d0:	d802      	bhi.n	800d8d8 <_realloc_r+0x34>
 800d8d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d8d6:	d812      	bhi.n	800d8fe <_realloc_r+0x5a>
 800d8d8:	4621      	mov	r1, r4
 800d8da:	4640      	mov	r0, r8
 800d8dc:	f7ff fb64 	bl	800cfa8 <_malloc_r>
 800d8e0:	4605      	mov	r5, r0
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	d0ed      	beq.n	800d8c2 <_realloc_r+0x1e>
 800d8e6:	42bc      	cmp	r4, r7
 800d8e8:	4622      	mov	r2, r4
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	bf28      	it	cs
 800d8ee:	463a      	movcs	r2, r7
 800d8f0:	f7ff fb24 	bl	800cf3c <memcpy>
 800d8f4:	4631      	mov	r1, r6
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	f7ff fc72 	bl	800d1e0 <_free_r>
 800d8fc:	e7e1      	b.n	800d8c2 <_realloc_r+0x1e>
 800d8fe:	4635      	mov	r5, r6
 800d900:	e7df      	b.n	800d8c2 <_realloc_r+0x1e>

0800d902 <_malloc_usable_size_r>:
 800d902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d906:	1f18      	subs	r0, r3, #4
 800d908:	2b00      	cmp	r3, #0
 800d90a:	bfbc      	itt	lt
 800d90c:	580b      	ldrlt	r3, [r1, r0]
 800d90e:	18c0      	addlt	r0, r0, r3
 800d910:	4770      	bx	lr
	...

0800d914 <_init>:
 800d914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d916:	bf00      	nop
 800d918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d91a:	bc08      	pop	{r3}
 800d91c:	469e      	mov	lr, r3
 800d91e:	4770      	bx	lr

0800d920 <_fini>:
 800d920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d922:	bf00      	nop
 800d924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d926:	bc08      	pop	{r3}
 800d928:	469e      	mov	lr, r3
 800d92a:	4770      	bx	lr
