
stm32f103c8t_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf54  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800d064  0800d064  0001d064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d780  0800d780  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d780  0800d780  0001d780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d788  0800d788  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d788  0800d788  0001d788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d78c  0800d78c  0001d78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800d790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003854  20000084  0800d814  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038d8  0800d814  000238d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff16  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000420d  00000000  00000000  0003ffc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  000441d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a8  00000000  00000000  00045ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa70  00000000  00000000  00047690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dbd2  00000000  00000000  00062100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a69b  00000000  00000000  0007fcd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a36d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000799c  00000000  00000000  0011a3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d04c 	.word	0x0800d04c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	0800d04c 	.word	0x0800d04c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_f2iz>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000710:	d30f      	bcc.n	8000732 <__aeabi_f2iz+0x2a>
 8000712:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000716:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800071a:	d90d      	bls.n	8000738 <__aeabi_f2iz+0x30>
 800071c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000724:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000728:	fa23 f002 	lsr.w	r0, r3, r2
 800072c:	bf18      	it	ne
 800072e:	4240      	negne	r0, r0
 8000730:	4770      	bx	lr
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	4770      	bx	lr
 8000738:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800073c:	d101      	bne.n	8000742 <__aeabi_f2iz+0x3a>
 800073e:	0242      	lsls	r2, r0, #9
 8000740:	d105      	bne.n	800074e <__aeabi_f2iz+0x46>
 8000742:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000746:	bf08      	it	eq
 8000748:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr

08000754 <__aeabi_ldivmod>:
 8000754:	b97b      	cbnz	r3, 8000776 <__aeabi_ldivmod+0x22>
 8000756:	b972      	cbnz	r2, 8000776 <__aeabi_ldivmod+0x22>
 8000758:	2900      	cmp	r1, #0
 800075a:	bfbe      	ittt	lt
 800075c:	2000      	movlt	r0, #0
 800075e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000762:	e006      	blt.n	8000772 <__aeabi_ldivmod+0x1e>
 8000764:	bf08      	it	eq
 8000766:	2800      	cmpeq	r0, #0
 8000768:	bf1c      	itt	ne
 800076a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800076e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000772:	f000 b9a9 	b.w	8000ac8 <__aeabi_idiv0>
 8000776:	f1ad 0c08 	sub.w	ip, sp, #8
 800077a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800077e:	2900      	cmp	r1, #0
 8000780:	db09      	blt.n	8000796 <__aeabi_ldivmod+0x42>
 8000782:	2b00      	cmp	r3, #0
 8000784:	db1a      	blt.n	80007bc <__aeabi_ldivmod+0x68>
 8000786:	f000 f835 	bl	80007f4 <__udivmoddi4>
 800078a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000792:	b004      	add	sp, #16
 8000794:	4770      	bx	lr
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	db1b      	blt.n	80007d8 <__aeabi_ldivmod+0x84>
 80007a0:	f000 f828 	bl	80007f4 <__udivmoddi4>
 80007a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ac:	b004      	add	sp, #16
 80007ae:	4240      	negs	r0, r0
 80007b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b4:	4252      	negs	r2, r2
 80007b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007ba:	4770      	bx	lr
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	f000 f817 	bl	80007f4 <__udivmoddi4>
 80007c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ce:	b004      	add	sp, #16
 80007d0:	4240      	negs	r0, r0
 80007d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d6:	4770      	bx	lr
 80007d8:	4252      	negs	r2, r2
 80007da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007de:	f000 f809 	bl	80007f4 <__udivmoddi4>
 80007e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ea:	b004      	add	sp, #16
 80007ec:	4252      	negs	r2, r2
 80007ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f2:	4770      	bx	lr

080007f4 <__udivmoddi4>:
 80007f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007f8:	9e08      	ldr	r6, [sp, #32]
 80007fa:	460d      	mov	r5, r1
 80007fc:	4604      	mov	r4, r0
 80007fe:	4688      	mov	r8, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14d      	bne.n	80008a0 <__udivmoddi4+0xac>
 8000804:	428a      	cmp	r2, r1
 8000806:	4694      	mov	ip, r2
 8000808:	d968      	bls.n	80008dc <__udivmoddi4+0xe8>
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	b152      	cbz	r2, 8000826 <__udivmoddi4+0x32>
 8000810:	fa01 f302 	lsl.w	r3, r1, r2
 8000814:	f1c2 0120 	rsb	r1, r2, #32
 8000818:	fa20 f101 	lsr.w	r1, r0, r1
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	ea41 0803 	orr.w	r8, r1, r3
 8000824:	4094      	lsls	r4, r2
 8000826:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800082a:	fbb8 f7f1 	udiv	r7, r8, r1
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	fb01 8817 	mls	r8, r1, r7, r8
 8000836:	fb07 f00e 	mul.w	r0, r7, lr
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000840:	4298      	cmp	r0, r3
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x66>
 8000844:	eb1c 0303 	adds.w	r3, ip, r3
 8000848:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 800084c:	f080 811e 	bcs.w	8000a8c <__udivmoddi4+0x298>
 8000850:	4298      	cmp	r0, r3
 8000852:	f240 811b 	bls.w	8000a8c <__udivmoddi4+0x298>
 8000856:	3f02      	subs	r7, #2
 8000858:	4463      	add	r3, ip
 800085a:	1a1b      	subs	r3, r3, r0
 800085c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000860:	fb01 3310 	mls	r3, r1, r0, r3
 8000864:	fb00 fe0e 	mul.w	lr, r0, lr
 8000868:	b2a4      	uxth	r4, r4
 800086a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086e:	45a6      	cmp	lr, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x94>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800087a:	f080 8109 	bcs.w	8000a90 <__udivmoddi4+0x29c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f240 8106 	bls.w	8000a90 <__udivmoddi4+0x29c>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	2100      	movs	r1, #0
 800088a:	eba4 040e 	sub.w	r4, r4, lr
 800088e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000892:	b11e      	cbz	r6, 800089c <__udivmoddi4+0xa8>
 8000894:	2300      	movs	r3, #0
 8000896:	40d4      	lsrs	r4, r2
 8000898:	e9c6 4300 	strd	r4, r3, [r6]
 800089c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a0:	428b      	cmp	r3, r1
 80008a2:	d908      	bls.n	80008b6 <__udivmoddi4+0xc2>
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	f000 80ee 	beq.w	8000a86 <__udivmoddi4+0x292>
 80008aa:	2100      	movs	r1, #0
 80008ac:	e9c6 0500 	strd	r0, r5, [r6]
 80008b0:	4608      	mov	r0, r1
 80008b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b6:	fab3 f183 	clz	r1, r3
 80008ba:	2900      	cmp	r1, #0
 80008bc:	d14a      	bne.n	8000954 <__udivmoddi4+0x160>
 80008be:	42ab      	cmp	r3, r5
 80008c0:	d302      	bcc.n	80008c8 <__udivmoddi4+0xd4>
 80008c2:	4282      	cmp	r2, r0
 80008c4:	f200 80fc 	bhi.w	8000ac0 <__udivmoddi4+0x2cc>
 80008c8:	1a84      	subs	r4, r0, r2
 80008ca:	eb65 0303 	sbc.w	r3, r5, r3
 80008ce:	2001      	movs	r0, #1
 80008d0:	4698      	mov	r8, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d0e2      	beq.n	800089c <__udivmoddi4+0xa8>
 80008d6:	e9c6 4800 	strd	r4, r8, [r6]
 80008da:	e7df      	b.n	800089c <__udivmoddi4+0xa8>
 80008dc:	b902      	cbnz	r2, 80008e0 <__udivmoddi4+0xec>
 80008de:	deff      	udf	#255	; 0xff
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	f040 8091 	bne.w	8000a0c <__udivmoddi4+0x218>
 80008ea:	eba1 000c 	sub.w	r0, r1, ip
 80008ee:	2101      	movs	r1, #1
 80008f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f4:	fa1f fe8c 	uxth.w	lr, ip
 80008f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80008fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000900:	0c25      	lsrs	r5, r4, #16
 8000902:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000906:	fb0e f003 	mul.w	r0, lr, r3
 800090a:	42a8      	cmp	r0, r5
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x12c>
 800090e:	eb1c 0505 	adds.w	r5, ip, r5
 8000912:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x12a>
 8000918:	42a8      	cmp	r0, r5
 800091a:	f200 80ce 	bhi.w	8000aba <__udivmoddi4+0x2c6>
 800091e:	4643      	mov	r3, r8
 8000920:	1a2d      	subs	r5, r5, r0
 8000922:	fbb5 f0f7 	udiv	r0, r5, r7
 8000926:	fb07 5510 	mls	r5, r7, r0, r5
 800092a:	fb0e fe00 	mul.w	lr, lr, r0
 800092e:	b2a4      	uxth	r4, r4
 8000930:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000934:	45a6      	cmp	lr, r4
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x156>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x154>
 8000942:	45a6      	cmp	lr, r4
 8000944:	f200 80b6 	bhi.w	8000ab4 <__udivmoddi4+0x2c0>
 8000948:	4628      	mov	r0, r5
 800094a:	eba4 040e 	sub.w	r4, r4, lr
 800094e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000952:	e79e      	b.n	8000892 <__udivmoddi4+0x9e>
 8000954:	f1c1 0720 	rsb	r7, r1, #32
 8000958:	408b      	lsls	r3, r1
 800095a:	fa22 fc07 	lsr.w	ip, r2, r7
 800095e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000962:	fa25 fa07 	lsr.w	sl, r5, r7
 8000966:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096a:	fbba f8f9 	udiv	r8, sl, r9
 800096e:	fa20 f307 	lsr.w	r3, r0, r7
 8000972:	fb09 aa18 	mls	sl, r9, r8, sl
 8000976:	408d      	lsls	r5, r1
 8000978:	fa1f fe8c 	uxth.w	lr, ip
 800097c:	431d      	orrs	r5, r3
 800097e:	fa00 f301 	lsl.w	r3, r0, r1
 8000982:	fb08 f00e 	mul.w	r0, r8, lr
 8000986:	0c2c      	lsrs	r4, r5, #16
 8000988:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800098c:	42a0      	cmp	r0, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	d90b      	bls.n	80009ac <__udivmoddi4+0x1b8>
 8000994:	eb1c 0404 	adds.w	r4, ip, r4
 8000998:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800099c:	f080 8088 	bcs.w	8000ab0 <__udivmoddi4+0x2bc>
 80009a0:	42a0      	cmp	r0, r4
 80009a2:	f240 8085 	bls.w	8000ab0 <__udivmoddi4+0x2bc>
 80009a6:	f1a8 0802 	sub.w	r8, r8, #2
 80009aa:	4464      	add	r4, ip
 80009ac:	1a24      	subs	r4, r4, r0
 80009ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80009b2:	fb09 4410 	mls	r4, r9, r0, r4
 80009b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c0:	45a6      	cmp	lr, r4
 80009c2:	d908      	bls.n	80009d6 <__udivmoddi4+0x1e2>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80009cc:	d26c      	bcs.n	8000aa8 <__udivmoddi4+0x2b4>
 80009ce:	45a6      	cmp	lr, r4
 80009d0:	d96a      	bls.n	8000aa8 <__udivmoddi4+0x2b4>
 80009d2:	3802      	subs	r0, #2
 80009d4:	4464      	add	r4, ip
 80009d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009da:	fba0 9502 	umull	r9, r5, r0, r2
 80009de:	eba4 040e 	sub.w	r4, r4, lr
 80009e2:	42ac      	cmp	r4, r5
 80009e4:	46c8      	mov	r8, r9
 80009e6:	46ae      	mov	lr, r5
 80009e8:	d356      	bcc.n	8000a98 <__udivmoddi4+0x2a4>
 80009ea:	d053      	beq.n	8000a94 <__udivmoddi4+0x2a0>
 80009ec:	2e00      	cmp	r6, #0
 80009ee:	d069      	beq.n	8000ac4 <__udivmoddi4+0x2d0>
 80009f0:	ebb3 0208 	subs.w	r2, r3, r8
 80009f4:	eb64 040e 	sbc.w	r4, r4, lr
 80009f8:	fa22 f301 	lsr.w	r3, r2, r1
 80009fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000a00:	431f      	orrs	r7, r3
 8000a02:	40cc      	lsrs	r4, r1
 8000a04:	e9c6 7400 	strd	r7, r4, [r6]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	e747      	b.n	800089c <__udivmoddi4+0xa8>
 8000a0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a10:	f1c2 0120 	rsb	r1, r2, #32
 8000a14:	fa25 f301 	lsr.w	r3, r5, r1
 8000a18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000a20:	4095      	lsls	r5, r2
 8000a22:	430d      	orrs	r5, r1
 8000a24:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a28:	fb07 3311 	mls	r3, r7, r1, r3
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	0c28      	lsrs	r0, r5, #16
 8000a32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a36:	fb01 f30e 	mul.w	r3, r1, lr
 8000a3a:	4283      	cmp	r3, r0
 8000a3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x260>
 8000a42:	eb1c 0000 	adds.w	r0, ip, r0
 8000a46:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000a4a:	d22f      	bcs.n	8000aac <__udivmoddi4+0x2b8>
 8000a4c:	4283      	cmp	r3, r0
 8000a4e:	d92d      	bls.n	8000aac <__udivmoddi4+0x2b8>
 8000a50:	3902      	subs	r1, #2
 8000a52:	4460      	add	r0, ip
 8000a54:	1ac0      	subs	r0, r0, r3
 8000a56:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a5a:	fb07 0013 	mls	r0, r7, r3, r0
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a64:	fb03 f00e 	mul.w	r0, r3, lr
 8000a68:	42a8      	cmp	r0, r5
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x28a>
 8000a6c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a70:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a74:	d216      	bcs.n	8000aa4 <__udivmoddi4+0x2b0>
 8000a76:	42a8      	cmp	r0, r5
 8000a78:	d914      	bls.n	8000aa4 <__udivmoddi4+0x2b0>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4465      	add	r5, ip
 8000a7e:	1a28      	subs	r0, r5, r0
 8000a80:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a84:	e738      	b.n	80008f8 <__udivmoddi4+0x104>
 8000a86:	4631      	mov	r1, r6
 8000a88:	4630      	mov	r0, r6
 8000a8a:	e707      	b.n	800089c <__udivmoddi4+0xa8>
 8000a8c:	462f      	mov	r7, r5
 8000a8e:	e6e4      	b.n	800085a <__udivmoddi4+0x66>
 8000a90:	4618      	mov	r0, r3
 8000a92:	e6f9      	b.n	8000888 <__udivmoddi4+0x94>
 8000a94:	454b      	cmp	r3, r9
 8000a96:	d2a9      	bcs.n	80009ec <__udivmoddi4+0x1f8>
 8000a98:	ebb9 0802 	subs.w	r8, r9, r2
 8000a9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e7a3      	b.n	80009ec <__udivmoddi4+0x1f8>
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	e7ea      	b.n	8000a7e <__udivmoddi4+0x28a>
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	e794      	b.n	80009d6 <__udivmoddi4+0x1e2>
 8000aac:	4641      	mov	r1, r8
 8000aae:	e7d1      	b.n	8000a54 <__udivmoddi4+0x260>
 8000ab0:	46d0      	mov	r8, sl
 8000ab2:	e77b      	b.n	80009ac <__udivmoddi4+0x1b8>
 8000ab4:	4464      	add	r4, ip
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	e747      	b.n	800094a <__udivmoddi4+0x156>
 8000aba:	3b02      	subs	r3, #2
 8000abc:	4465      	add	r5, ip
 8000abe:	e72f      	b.n	8000920 <__udivmoddi4+0x12c>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e706      	b.n	80008d2 <__udivmoddi4+0xde>
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e6e9      	b.n	800089c <__udivmoddi4+0xa8>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000b00:	887a      	ldrh	r2, [r7, #2]
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fbe4 	bl	80002d4 <__aeabi_i2f>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fdcf 	bl	80006b8 <__aeabi_fcmplt>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000b20:	2301      	movs	r3, #1
 8000b22:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8000b2a:	883a      	ldrh	r2, [r7, #0]
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fbcf 	bl	80002d4 <__aeabi_i2f>
 8000b36:	4603      	mov	r3, r0
 8000b38:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000b3a:	f04f 0100 	mov.w	r1, #0
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff fdba 	bl	80006b8 <__aeabi_fcmplt>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000b4e:	7cfb      	ldrb	r3, [r7, #19]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d104      	bne.n	8000b5e <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8000b54:	887a      	ldrh	r2, [r7, #2]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	82fb      	strh	r3, [r7, #22]
 8000b5c:	e003      	b.n	8000b66 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8000b66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b68:	8afa      	ldrh	r2, [r7, #22]
 8000b6a:	88b9      	ldrh	r1, [r7, #4]
 8000b6c:	88f8      	ldrh	r0, [r7, #6]
 8000b6e:	f000 fd33 	bl	80015d8 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8000b72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b74:	8afa      	ldrh	r2, [r7, #22]
 8000b76:	8839      	ldrh	r1, [r7, #0]
 8000b78:	88f8      	ldrh	r0, [r7, #6]
 8000b7a:	f000 fd2d 	bl	80015d8 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000b7e:	7cbb      	ldrb	r3, [r7, #18]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8000b84:	883a      	ldrh	r2, [r7, #0]
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	82bb      	strh	r3, [r7, #20]
 8000b8c:	e003      	b.n	8000b96 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8000b8e:	88ba      	ldrh	r2, [r7, #4]
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8000b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b98:	8aba      	ldrh	r2, [r7, #20]
 8000b9a:	88b9      	ldrh	r1, [r7, #4]
 8000b9c:	88f8      	ldrh	r0, [r7, #6]
 8000b9e:	f000 fd5f 	bl	8001660 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8000ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ba4:	8aba      	ldrh	r2, [r7, #20]
 8000ba6:	88b9      	ldrh	r1, [r7, #4]
 8000ba8:	8878      	ldrh	r0, [r7, #2]
 8000baa:	f000 fd59 	bl	8001660 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8000bae:	8afb      	ldrh	r3, [r7, #22]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8000bb4:	8abb      	ldrh	r3, [r7, #20]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d005      	beq.n	8000bc6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8000bba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000bbc:	8839      	ldrh	r1, [r7, #0]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fbd1 	bl	8001368 <ILI9341_Draw_Pixel>
	}
	
}
 8000bc6:	bf00      	nop
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}
	...

08000bd0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4623      	mov	r3, r4
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	4603      	mov	r3, r0
 8000be4:	71bb      	strb	r3, [r7, #6]
 8000be6:	460b      	mov	r3, r1
 8000be8:	717b      	strb	r3, [r7, #5]
 8000bea:	4613      	mov	r3, r2
 8000bec:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	2b1f      	cmp	r3, #31
 8000bf6:	d802      	bhi.n	8000bfe <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	e002      	b.n	8000c04 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	3b20      	subs	r3, #32
 8000c02:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	753b      	strb	r3, [r7, #20]
 8000c08:	e012      	b.n	8000c30 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000c0a:	7dfa      	ldrb	r2, [r7, #23]
 8000c0c:	7d38      	ldrb	r0, [r7, #20]
 8000c0e:	7d39      	ldrb	r1, [r7, #20]
 8000c10:	4c3b      	ldr	r4, [pc, #236]	; (8000d00 <ILI9341_Draw_Char+0x130>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4423      	add	r3, r4
 8000c1c:	4403      	add	r3, r0
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	f101 0318 	add.w	r3, r1, #24
 8000c24:	443b      	add	r3, r7
 8000c26:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000c2a:	7d3b      	ldrb	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	753b      	strb	r3, [r7, #20]
 8000c30:	7d3b      	ldrb	r3, [r7, #20]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d9e9      	bls.n	8000c0a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	b298      	uxth	r0, r3
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c40:	461a      	mov	r2, r3
 8000c42:	0052      	lsls	r2, r2, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	b29c      	uxth	r4, r3
 8000c50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4623      	mov	r3, r4
 8000c56:	f000 fc63 	bl	8001520 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	757b      	strb	r3, [r7, #21]
 8000c5e:	e047      	b.n	8000cf0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	75bb      	strb	r3, [r7, #22]
 8000c64:	e03e      	b.n	8000ce4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8000c66:	7d7b      	ldrb	r3, [r7, #21]
 8000c68:	3318      	adds	r3, #24
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c70:	461a      	mov	r2, r3
 8000c72:	7dbb      	ldrb	r3, [r7, #22]
 8000c74:	fa42 f303 	asr.w	r3, r2, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d02e      	beq.n	8000cde <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d110      	bne.n	8000ca8 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	7d7b      	ldrb	r3, [r7, #21]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b298      	uxth	r0, r3
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	7dbb      	ldrb	r3, [r7, #22]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f000 fb61 	bl	8001368 <ILI9341_Draw_Pixel>
 8000ca6:	e01a      	b.n	8000cde <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	7d7b      	ldrb	r3, [r7, #21]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000cb2:	fb01 f303 	mul.w	r3, r1, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	b298      	uxth	r0, r3
 8000cbc:	797b      	ldrb	r3, [r7, #5]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	7dbb      	ldrb	r3, [r7, #22]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000cc6:	fb01 f303 	mul.w	r3, r1, r3
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4413      	add	r3, r2
 8000cce:	b299      	uxth	r1, r3
 8000cd0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000cd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4623      	mov	r3, r4
 8000cda:	f000 fc21 	bl	8001520 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000cde:	7dbb      	ldrb	r3, [r7, #22]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	75bb      	strb	r3, [r7, #22]
 8000ce4:	7dbb      	ldrb	r3, [r7, #22]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d9bd      	bls.n	8000c66 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000cea:	7d7b      	ldrb	r3, [r7, #21]
 8000cec:	3301      	adds	r3, #1
 8000cee:	757b      	strb	r3, [r7, #21]
 8000cf0:	7d7b      	ldrb	r3, [r7, #21]
 8000cf2:	2b05      	cmp	r3, #5
 8000cf4:	d9b4      	bls.n	8000c60 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	0800d2dc 	.word	0x0800d2dc

08000d04 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	4611      	mov	r1, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	70fb      	strb	r3, [r7, #3]
 8000d16:	460b      	mov	r3, r1
 8000d18:	70bb      	strb	r3, [r7, #2]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000d1e:	e017      	b.n	8000d50 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	7818      	ldrb	r0, [r3, #0]
 8000d28:	883c      	ldrh	r4, [r7, #0]
 8000d2a:	78ba      	ldrb	r2, [r7, #2]
 8000d2c:	78f9      	ldrb	r1, [r7, #3]
 8000d2e:	8bbb      	ldrh	r3, [r7, #28]
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	8b3b      	ldrh	r3, [r7, #24]
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	4623      	mov	r3, r4
 8000d38:	f7ff ff4a 	bl	8000bd0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000d3c:	8b3b      	ldrh	r3, [r7, #24]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	0052      	lsls	r2, r2, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e3      	bne.n	8000d20 <ILI9341_Draw_Text+0x1c>
    }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd90      	pop	{r4, r7, pc}
	...

08000d64 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
//MX_SPI1_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <ILI9341_SPI_Init+0x14>)
 8000d70:	f004 f983 	bl	800507a <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(&hspi1, &SPI_Data, 1, 1);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <ILI9341_SPI_Send+0x20>)
 8000d8e:	f006 fb39 	bl	8007404 <HAL_SPI_Transmit>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200000fc 	.word	0x200000fc

08000da0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <ILI9341_Write_Command+0x40>)
 8000db2:	f004 f962 	bl	800507a <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <ILI9341_Write_Command+0x44>)
 8000dbe:	f004 f95c 	bl	800507a <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffd9 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <ILI9341_Write_Command+0x40>)
 8000dd2:	f004 f952 	bl	800507a <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40010800 	.word	0x40010800

08000de8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <ILI9341_Write_Data+0x40>)
 8000dfa:	f004 f93e 	bl	800507a <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <ILI9341_Write_Data+0x44>)
 8000e06:	f004 f938 	bl	800507a <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffb5 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <ILI9341_Write_Data+0x44>)
 8000e1a:	f004 f92e 	bl	800507a <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000e4e:	202a      	movs	r0, #42	; 0x2a
 8000e50:	f7ff ffa6 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffc3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffbe 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ffb7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffb2 	bl	8000de8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000e84:	202b      	movs	r0, #43	; 0x2b
 8000e86:	f7ff ff8b 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffa8 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffa3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000ea2:	883b      	ldrh	r3, [r7, #0]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff9c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000eb0:	883b      	ldrh	r3, [r7, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff97 	bl	8000de8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000eba:	202c      	movs	r0, #44	; 0x2c
 8000ebc:	f7ff ff70 	bl	8000da0 <ILI9341_Write_Command>
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <ILI9341_Reset+0x38>)
 8000ed4:	f004 f8d1 	bl	800507a <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000ed8:	20c8      	movs	r0, #200	; 0xc8
 8000eda:	f003 fd7f 	bl	80049dc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <ILI9341_Reset+0x3c>)
 8000ee6:	f004 f8c8 	bl	800507a <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000eea:	20c8      	movs	r0, #200	; 0xc8
 8000eec:	f003 fd76 	bl	80049dc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	4802      	ldr	r0, [pc, #8]	; (8000f00 <ILI9341_Reset+0x38>)
 8000ef8:	f004 f8bf 	bl	800507a <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00

08000f08 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	f7ff ff42 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f003 fd5d 	bl	80049dc <HAL_Delay>
	
switch(screen_rotation) 
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d837      	bhi.n	8000f98 <ILI9341_Set_Rotation+0x90>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <ILI9341_Set_Rotation+0x28>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f41 	.word	0x08000f41
 8000f34:	08000f57 	.word	0x08000f57
 8000f38:	08000f6d 	.word	0x08000f6d
 8000f3c:	08000f83 	.word	0x08000f83
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000f40:	2048      	movs	r0, #72	; 0x48
 8000f42:	f7ff ff51 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f48:	22f0      	movs	r2, #240	; 0xf0
 8000f4a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f52:	801a      	strh	r2, [r3, #0]
			break;
 8000f54:	e021      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000f56:	2028      	movs	r0, #40	; 0x28
 8000f58:	f7ff ff46 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f62:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f66:	22f0      	movs	r2, #240	; 0xf0
 8000f68:	801a      	strh	r2, [r3, #0]
			break;
 8000f6a:	e016      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000f6c:	2088      	movs	r0, #136	; 0x88
 8000f6e:	f7ff ff3b 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f74:	22f0      	movs	r2, #240	; 0xf0
 8000f76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f7e:	801a      	strh	r2, [r3, #0]
			break;
 8000f80:	e00b      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000f82:	20e8      	movs	r0, #232	; 0xe8
 8000f84:	f7ff ff30 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f8e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f92:	22f0      	movs	r2, #240	; 0xf0
 8000f94:	801a      	strh	r2, [r3, #0]
			break;
 8000f96:	e000      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000f98:	bf00      	nop
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000002 	.word	0x20000002
 8000fa8:	20000000 	.word	0x20000000

08000fac <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <ILI9341_Enable+0x14>)
 8000fb8:	f004 f85f 	bl	800507a <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000fc8:	f7ff fff0 	bl	8000fac <ILI9341_Enable>
ILI9341_SPI_Init();
 8000fcc:	f7ff feca 	bl	8000d64 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000fd0:	f7ff ff7a 	bl	8000ec8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fee3 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f003 fcfe 	bl	80049dc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000fe0:	20cb      	movs	r0, #203	; 0xcb
 8000fe2:	f7ff fedd 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000fe6:	2039      	movs	r0, #57	; 0x39
 8000fe8:	f7ff fefe 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000fec:	202c      	movs	r0, #44	; 0x2c
 8000fee:	f7ff fefb 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fef8 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000ff8:	2034      	movs	r0, #52	; 0x34
 8000ffa:	f7ff fef5 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff fef2 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001004:	20cf      	movs	r0, #207	; 0xcf
 8001006:	f7ff fecb 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff feec 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001010:	20c1      	movs	r0, #193	; 0xc1
 8001012:	f7ff fee9 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001016:	2030      	movs	r0, #48	; 0x30
 8001018:	f7ff fee6 	bl	8000de8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800101c:	20e8      	movs	r0, #232	; 0xe8
 800101e:	f7ff febf 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001022:	2085      	movs	r0, #133	; 0x85
 8001024:	f7ff fee0 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fedd 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800102e:	2078      	movs	r0, #120	; 0x78
 8001030:	f7ff feda 	bl	8000de8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001034:	20ea      	movs	r0, #234	; 0xea
 8001036:	f7ff feb3 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fed4 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fed1 	bl	8000de8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001046:	20ed      	movs	r0, #237	; 0xed
 8001048:	f7ff feaa 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	f7ff fecb 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001052:	2003      	movs	r0, #3
 8001054:	f7ff fec8 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001058:	2012      	movs	r0, #18
 800105a:	f7ff fec5 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800105e:	2081      	movs	r0, #129	; 0x81
 8001060:	f7ff fec2 	bl	8000de8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001064:	20f7      	movs	r0, #247	; 0xf7
 8001066:	f7ff fe9b 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800106a:	2020      	movs	r0, #32
 800106c:	f7ff febc 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001070:	20c0      	movs	r0, #192	; 0xc0
 8001072:	f7ff fe95 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001076:	2023      	movs	r0, #35	; 0x23
 8001078:	f7ff feb6 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800107c:	20c1      	movs	r0, #193	; 0xc1
 800107e:	f7ff fe8f 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001082:	2010      	movs	r0, #16
 8001084:	f7ff feb0 	bl	8000de8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001088:	20c5      	movs	r0, #197	; 0xc5
 800108a:	f7ff fe89 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800108e:	203e      	movs	r0, #62	; 0x3e
 8001090:	f7ff feaa 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001094:	2028      	movs	r0, #40	; 0x28
 8001096:	f7ff fea7 	bl	8000de8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800109a:	20c7      	movs	r0, #199	; 0xc7
 800109c:	f7ff fe80 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80010a0:	2086      	movs	r0, #134	; 0x86
 80010a2:	f7ff fea1 	bl	8000de8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80010a6:	2036      	movs	r0, #54	; 0x36
 80010a8:	f7ff fe7a 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80010ac:	2048      	movs	r0, #72	; 0x48
 80010ae:	f7ff fe9b 	bl	8000de8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80010b2:	203a      	movs	r0, #58	; 0x3a
 80010b4:	f7ff fe74 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80010b8:	2055      	movs	r0, #85	; 0x55
 80010ba:	f7ff fe95 	bl	8000de8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80010be:	20b1      	movs	r0, #177	; 0xb1
 80010c0:	f7ff fe6e 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff fe8f 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80010ca:	2018      	movs	r0, #24
 80010cc:	f7ff fe8c 	bl	8000de8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80010d0:	20b6      	movs	r0, #182	; 0xb6
 80010d2:	f7ff fe65 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80010d6:	2008      	movs	r0, #8
 80010d8:	f7ff fe86 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80010dc:	2082      	movs	r0, #130	; 0x82
 80010de:	f7ff fe83 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80010e2:	2027      	movs	r0, #39	; 0x27
 80010e4:	f7ff fe80 	bl	8000de8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80010e8:	20f2      	movs	r0, #242	; 0xf2
 80010ea:	f7ff fe59 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff fe7a 	bl	8000de8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80010f4:	2026      	movs	r0, #38	; 0x26
 80010f6:	f7ff fe53 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff fe74 	bl	8000de8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001100:	20e0      	movs	r0, #224	; 0xe0
 8001102:	f7ff fe4d 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001106:	200f      	movs	r0, #15
 8001108:	f7ff fe6e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800110c:	2031      	movs	r0, #49	; 0x31
 800110e:	f7ff fe6b 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001112:	202b      	movs	r0, #43	; 0x2b
 8001114:	f7ff fe68 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001118:	200c      	movs	r0, #12
 800111a:	f7ff fe65 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800111e:	200e      	movs	r0, #14
 8001120:	f7ff fe62 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001124:	2008      	movs	r0, #8
 8001126:	f7ff fe5f 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800112a:	204e      	movs	r0, #78	; 0x4e
 800112c:	f7ff fe5c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001130:	20f1      	movs	r0, #241	; 0xf1
 8001132:	f7ff fe59 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001136:	2037      	movs	r0, #55	; 0x37
 8001138:	f7ff fe56 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800113c:	2007      	movs	r0, #7
 800113e:	f7ff fe53 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001142:	2010      	movs	r0, #16
 8001144:	f7ff fe50 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001148:	2003      	movs	r0, #3
 800114a:	f7ff fe4d 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800114e:	200e      	movs	r0, #14
 8001150:	f7ff fe4a 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001154:	2009      	movs	r0, #9
 8001156:	f7ff fe47 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fe44 	bl	8000de8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001160:	20e1      	movs	r0, #225	; 0xe1
 8001162:	f7ff fe1d 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fe3e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800116c:	200e      	movs	r0, #14
 800116e:	f7ff fe3b 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001172:	2014      	movs	r0, #20
 8001174:	f7ff fe38 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001178:	2003      	movs	r0, #3
 800117a:	f7ff fe35 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800117e:	2011      	movs	r0, #17
 8001180:	f7ff fe32 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001184:	2007      	movs	r0, #7
 8001186:	f7ff fe2f 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800118a:	2031      	movs	r0, #49	; 0x31
 800118c:	f7ff fe2c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001190:	20c1      	movs	r0, #193	; 0xc1
 8001192:	f7ff fe29 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001196:	2048      	movs	r0, #72	; 0x48
 8001198:	f7ff fe26 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800119c:	2008      	movs	r0, #8
 800119e:	f7ff fe23 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f7ff fe20 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80011a8:	200c      	movs	r0, #12
 80011aa:	f7ff fe1d 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80011ae:	2031      	movs	r0, #49	; 0x31
 80011b0:	f7ff fe1a 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80011b4:	2036      	movs	r0, #54	; 0x36
 80011b6:	f7ff fe17 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80011ba:	200f      	movs	r0, #15
 80011bc:	f7ff fe14 	bl	8000de8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80011c0:	2011      	movs	r0, #17
 80011c2:	f7ff fded 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(120);
 80011c6:	2078      	movs	r0, #120	; 0x78
 80011c8:	f003 fc08 	bl	80049dc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80011cc:	2029      	movs	r0, #41	; 0x29
 80011ce:	f7ff fde7 	bl	8000da0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f7ff fe98 	bl	8000f08 <ILI9341_Set_Rotation>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80011dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011e0:	b08d      	sub	sp, #52	; 0x34
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	6039      	str	r1, [r7, #0]
 80011e8:	80fb      	strh	r3, [r7, #6]
 80011ea:	466b      	mov	r3, sp
 80011ec:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011fa:	d202      	bcs.n	8001202 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001200:	e002      	b.n	8001208 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001202:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800120e:	4840      	ldr	r0, [pc, #256]	; (8001310 <ILI9341_Draw_Colour_Burst+0x134>)
 8001210:	f003 ff33 	bl	800507a <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121a:	483e      	ldr	r0, [pc, #248]	; (8001314 <ILI9341_Draw_Colour_Burst+0x138>)
 800121c:	f003 ff2d 	bl	800507a <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	b29b      	uxth	r3, r3
 8001226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800122a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800122c:	460b      	mov	r3, r1
 800122e:	3b01      	subs	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	2300      	movs	r3, #0
 8001234:	4688      	mov	r8, r1
 8001236:	4699      	mov	r9, r3
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001244:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001248:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800124c:	2300      	movs	r3, #0
 800124e:	460c      	mov	r4, r1
 8001250:	461d      	mov	r5, r3
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	00eb      	lsls	r3, r5, #3
 800125c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001260:	00e2      	lsls	r2, r4, #3
 8001262:	1dcb      	adds	r3, r1, #7
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	ebad 0d03 	sub.w	sp, sp, r3
 800126c:	466b      	mov	r3, sp
 800126e:	3300      	adds	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001272:	2300      	movs	r3, #0
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
 8001276:	e00e      	b.n	8001296 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127c:	4413      	add	r3, r2
 800127e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001282:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	3301      	adds	r3, #1
 8001288:	88fa      	ldrh	r2, [r7, #6]
 800128a:	b2d1      	uxtb	r1, r2
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001292:	3302      	adds	r3, #2
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
 8001296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	429a      	cmp	r2, r3
 800129c:	d3ec      	bcc.n	8001278 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ac:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80012b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b8:	fb01 f202 	mul.w	r2, r1, r2
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d010      	beq.n	80012e8 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ca:	e009      	b.n	80012e0 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	230a      	movs	r3, #10
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	4810      	ldr	r0, [pc, #64]	; (8001318 <ILI9341_Draw_Colour_Burst+0x13c>)
 80012d6:	f006 f895 	bl	8007404 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	3301      	adds	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d3f1      	bcc.n	80012cc <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	230a      	movs	r3, #10
 80012ee:	69b9      	ldr	r1, [r7, #24]
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <ILI9341_Draw_Colour_Burst+0x13c>)
 80012f2:	f006 f887 	bl	8007404 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <ILI9341_Draw_Colour_Burst+0x138>)
 80012fe:	f003 febc 	bl	800507a <HAL_GPIO_WritePin>
 8001302:	46b5      	mov	sp, r6
}
 8001304:	bf00      	nop
 8001306:	3734      	adds	r7, #52	; 0x34
 8001308:	46bd      	mov	sp, r7
 800130a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800130e:	bf00      	nop
 8001310:	40010800 	.word	0x40010800
 8001314:	40010c00 	.word	0x40010c00
 8001318:	200000fc 	.word	0x200000fc

0800131c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <ILI9341_Fill_Screen+0x44>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <ILI9341_Fill_Screen+0x48>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	b29b      	uxth	r3, r3
 8001332:	2100      	movs	r1, #0
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fd7b 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <ILI9341_Fill_Screen+0x44>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <ILI9341_Fill_Screen+0x48>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	461a      	mov	r2, r3
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff42 	bl	80011dc <ILI9341_Draw_Colour_Burst>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000002 	.word	0x20000002
 8001364:	20000000 	.word	0x20000000

08001368 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	460b      	mov	r3, r1
 8001374:	80bb      	strh	r3, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800137a:	4b64      	ldr	r3, [pc, #400]	; (800150c <ILI9341_Draw_Pixel+0x1a4>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	429a      	cmp	r2, r3
 8001384:	f080 80be 	bcs.w	8001504 <ILI9341_Draw_Pixel+0x19c>
 8001388:	4b61      	ldr	r3, [pc, #388]	; (8001510 <ILI9341_Draw_Pixel+0x1a8>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	f080 80b7 	bcs.w	8001504 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800139c:	485d      	ldr	r0, [pc, #372]	; (8001514 <ILI9341_Draw_Pixel+0x1ac>)
 800139e:	f003 fe6c 	bl	800507a <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a8:	485b      	ldr	r0, [pc, #364]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 80013aa:	f003 fe66 	bl	800507a <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80013ae:	202a      	movs	r0, #42	; 0x2a
 80013b0:	f7ff fce4 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ba:	4856      	ldr	r0, [pc, #344]	; (8001514 <ILI9341_Draw_Pixel+0x1ac>)
 80013bc:	f003 fe5d 	bl	800507a <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c6:	4854      	ldr	r0, [pc, #336]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 80013c8:	f003 fe57 	bl	800507a <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d2:	4851      	ldr	r0, [pc, #324]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 80013d4:	f003 fe51 	bl	800507a <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	753b      	strb	r3, [r7, #20]
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	757b      	strb	r3, [r7, #21]
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	3301      	adds	r3, #1
 80013ec:	121b      	asrs	r3, r3, #8
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	75bb      	strb	r3, [r7, #22]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80013fc:	f107 0114 	add.w	r1, r7, #20
 8001400:	2301      	movs	r3, #1
 8001402:	2204      	movs	r2, #4
 8001404:	4845      	ldr	r0, [pc, #276]	; (800151c <ILI9341_Draw_Pixel+0x1b4>)
 8001406:	f005 fffd 	bl	8007404 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001410:	4841      	ldr	r0, [pc, #260]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 8001412:	f003 fe32 	bl	800507a <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800141c:	483d      	ldr	r0, [pc, #244]	; (8001514 <ILI9341_Draw_Pixel+0x1ac>)
 800141e:	f003 fe2c 	bl	800507a <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001428:	483b      	ldr	r0, [pc, #236]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 800142a:	f003 fe26 	bl	800507a <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800142e:	202b      	movs	r0, #43	; 0x2b
 8001430:	f7ff fca4 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143a:	4836      	ldr	r0, [pc, #216]	; (8001514 <ILI9341_Draw_Pixel+0x1ac>)
 800143c:	f003 fe1d 	bl	800507a <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001446:	4834      	ldr	r0, [pc, #208]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 8001448:	f003 fe17 	bl	800507a <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001452:	4831      	ldr	r0, [pc, #196]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 8001454:	f003 fe11 	bl	800507a <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	743b      	strb	r3, [r7, #16]
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	747b      	strb	r3, [r7, #17]
 8001468:	88bb      	ldrh	r3, [r7, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	121b      	asrs	r3, r3, #8
 800146e:	b2db      	uxtb	r3, r3
 8001470:	74bb      	strb	r3, [r7, #18]
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3301      	adds	r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800147c:	f107 0110 	add.w	r1, r7, #16
 8001480:	2301      	movs	r3, #1
 8001482:	2204      	movs	r2, #4
 8001484:	4825      	ldr	r0, [pc, #148]	; (800151c <ILI9341_Draw_Pixel+0x1b4>)
 8001486:	f005 ffbd 	bl	8007404 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001490:	4821      	ldr	r0, [pc, #132]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 8001492:	f003 fdf2 	bl	800507a <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149c:	481d      	ldr	r0, [pc, #116]	; (8001514 <ILI9341_Draw_Pixel+0x1ac>)
 800149e:	f003 fdec 	bl	800507a <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a8:	481b      	ldr	r0, [pc, #108]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 80014aa:	f003 fde6 	bl	800507a <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80014ae:	202c      	movs	r0, #44	; 0x2c
 80014b0:	f7ff fc64 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ba:	4816      	ldr	r0, [pc, #88]	; (8001514 <ILI9341_Draw_Pixel+0x1ac>)
 80014bc:	f003 fddd 	bl	800507a <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	4814      	ldr	r0, [pc, #80]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 80014c8:	f003 fdd7 	bl	800507a <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d2:	4811      	ldr	r0, [pc, #68]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 80014d4:	f003 fdd1 	bl	800507a <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	733b      	strb	r3, [r7, #12]
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80014e8:	f107 010c 	add.w	r1, r7, #12
 80014ec:	2301      	movs	r3, #1
 80014ee:	2202      	movs	r2, #2
 80014f0:	480a      	ldr	r0, [pc, #40]	; (800151c <ILI9341_Draw_Pixel+0x1b4>)
 80014f2:	f005 ff87 	bl	8007404 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fc:	4806      	ldr	r0, [pc, #24]	; (8001518 <ILI9341_Draw_Pixel+0x1b0>)
 80014fe:	f003 fdbc 	bl	800507a <HAL_GPIO_WritePin>
 8001502:	e000      	b.n	8001506 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001504:	bf00      	nop
	
}
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000002 	.word	0x20000002
 8001510:	20000000 	.word	0x20000000
 8001514:	40010800 	.word	0x40010800
 8001518:	40010c00 	.word	0x40010c00
 800151c:	200000fc 	.word	0x200000fc

08001520 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4604      	mov	r4, r0
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	80fb      	strh	r3, [r7, #6]
 8001532:	4603      	mov	r3, r0
 8001534:	80bb      	strh	r3, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	807b      	strh	r3, [r7, #2]
 800153a:	4613      	mov	r3, r2
 800153c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <ILI9341_Draw_Rectangle+0xb0>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	88fa      	ldrh	r2, [r7, #6]
 8001546:	429a      	cmp	r2, r3
 8001548:	d23d      	bcs.n	80015c6 <ILI9341_Draw_Rectangle+0xa6>
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <ILI9341_Draw_Rectangle+0xb4>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d237      	bcs.n	80015c6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	4413      	add	r3, r2
 800155c:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <ILI9341_Draw_Rectangle+0xb0>)
 800155e:	8812      	ldrh	r2, [r2, #0]
 8001560:	b292      	uxth	r2, r2
 8001562:	4293      	cmp	r3, r2
 8001564:	dd05      	ble.n	8001572 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <ILI9341_Draw_Rectangle+0xb0>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	b29a      	uxth	r2, r3
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001572:	88ba      	ldrh	r2, [r7, #4]
 8001574:	883b      	ldrh	r3, [r7, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <ILI9341_Draw_Rectangle+0xb4>)
 800157a:	8812      	ldrh	r2, [r2, #0]
 800157c:	b292      	uxth	r2, r2
 800157e:	4293      	cmp	r3, r2
 8001580:	dd05      	ble.n	800158e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <ILI9341_Draw_Rectangle+0xb4>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	b29a      	uxth	r2, r3
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	3b01      	subs	r3, #1
 8001598:	b29c      	uxth	r4, r3
 800159a:	88ba      	ldrh	r2, [r7, #4]
 800159c:	883b      	ldrh	r3, [r7, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	88b9      	ldrh	r1, [r7, #4]
 80015a8:	88f8      	ldrh	r0, [r7, #6]
 80015aa:	4622      	mov	r2, r4
 80015ac:	f7ff fc40 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80015b0:	883b      	ldrh	r3, [r7, #0]
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	8b3b      	ldrh	r3, [r7, #24]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fe0c 	bl	80011dc <ILI9341_Draw_Colour_Burst>
 80015c4:	e000      	b.n	80015c8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80015c6:	bf00      	nop
}
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000002 	.word	0x20000002
 80015d4:	20000000 	.word	0x20000000

080015d8 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4604      	mov	r4, r0
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4623      	mov	r3, r4
 80015e8:	80fb      	strh	r3, [r7, #6]
 80015ea:	4603      	mov	r3, r0
 80015ec:	80bb      	strh	r3, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	807b      	strh	r3, [r7, #2]
 80015f2:	4613      	mov	r3, r2
 80015f4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <ILI9341_Draw_Horizontal_Line+0x80>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	88fa      	ldrh	r2, [r7, #6]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d225      	bcs.n	800164e <ILI9341_Draw_Horizontal_Line+0x76>
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <ILI9341_Draw_Horizontal_Line+0x84>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	88ba      	ldrh	r2, [r7, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	d21f      	bcs.n	800164e <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 800160e:	88fa      	ldrh	r2, [r7, #6]
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	4413      	add	r3, r2
 8001614:	4a10      	ldr	r2, [pc, #64]	; (8001658 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001616:	8812      	ldrh	r2, [r2, #0]
 8001618:	b292      	uxth	r2, r2
 800161a:	4293      	cmp	r3, r2
 800161c:	dd05      	ble.n	800162a <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	b29a      	uxth	r2, r3
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800162a:	88fa      	ldrh	r2, [r7, #6]
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	4413      	add	r3, r2
 8001630:	b29b      	uxth	r3, r3
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	88b9      	ldrh	r1, [r7, #4]
 800163a:	88f8      	ldrh	r0, [r7, #6]
 800163c:	f7ff fbf8 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	883b      	ldrh	r3, [r7, #0]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fdc8 	bl	80011dc <ILI9341_Draw_Colour_Burst>
 800164c:	e000      	b.n	8001650 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800164e:	bf00      	nop
}
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	20000002 	.word	0x20000002
 800165c:	20000000 	.word	0x20000000

08001660 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4604      	mov	r4, r0
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4623      	mov	r3, r4
 8001670:	80fb      	strh	r3, [r7, #6]
 8001672:	4603      	mov	r3, r0
 8001674:	80bb      	strh	r3, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	807b      	strh	r3, [r7, #2]
 800167a:	4613      	mov	r3, r2
 800167c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <ILI9341_Draw_Vertical_Line+0x80>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	429a      	cmp	r2, r3
 8001688:	d225      	bcs.n	80016d6 <ILI9341_Draw_Vertical_Line+0x76>
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <ILI9341_Draw_Vertical_Line+0x84>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	88ba      	ldrh	r2, [r7, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	d21f      	bcs.n	80016d6 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8001696:	88ba      	ldrh	r2, [r7, #4]
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4413      	add	r3, r2
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <ILI9341_Draw_Vertical_Line+0x84>)
 800169e:	8812      	ldrh	r2, [r2, #0]
 80016a0:	b292      	uxth	r2, r2
 80016a2:	4293      	cmp	r3, r2
 80016a4:	dd05      	ble.n	80016b2 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <ILI9341_Draw_Vertical_Line+0x84>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80016b2:	88ba      	ldrh	r2, [r7, #4]
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29b      	uxth	r3, r3
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	88b9      	ldrh	r1, [r7, #4]
 80016c2:	88f8      	ldrh	r0, [r7, #6]
 80016c4:	f7ff fbb4 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80016c8:	887a      	ldrh	r2, [r7, #2]
 80016ca:	883b      	ldrh	r3, [r7, #0]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fd84 	bl	80011dc <ILI9341_Draw_Colour_Burst>
 80016d4:	e000      	b.n	80016d8 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80016d6:	bf00      	nop
}
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000002 	.word	0x20000002
 80016e4:	20000000 	.word	0x20000000

080016e8 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2203      	movs	r2, #3
 80016f4:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2203      	movs	r2, #3
 8001700:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2203      	movs	r2, #3
 8001706:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2203      	movs	r2, #3
 800170c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	715a      	strb	r2, [r3, #5]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800171e:	b580      	push	{r7, lr}
 8001720:	b08a      	sub	sp, #40	; 0x28
 8001722:	af04      	add	r7, sp, #16
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	460b      	mov	r3, r1
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001738:	7afb      	ldrb	r3, [r7, #11]
 800173a:	b29a      	uxth	r2, r3
 800173c:	8af9      	ldrh	r1, [r7, #22]
 800173e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2302      	movs	r3, #2
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	f004 fa60 	bl	8005c14 <HAL_I2C_Mem_Read>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10b      	bne.n	8001772 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800175a:	7d7b      	ldrb	r3, [r7, #21]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	7d3b      	ldrb	r3, [r7, #20]
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b21b      	sxth	r3, r3
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	801a      	strh	r2, [r3, #0]
		return true;
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <read_register16+0x56>
	} else
		return false;
 8001772:	2300      	movs	r3, #0

}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af04      	add	r7, sp, #16
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	461a      	mov	r2, r3
 8001788:	460b      	mov	r3, r1
 800178a:	72fb      	strb	r3, [r7, #11]
 800178c:	4613      	mov	r3, r2
 800178e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800179c:	7afb      	ldrb	r3, [r7, #11]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	7abb      	ldrb	r3, [r7, #10]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	8af9      	ldrh	r1, [r7, #22]
 80017a6:	f241 3488 	movw	r4, #5000	; 0x1388
 80017aa:	9402      	str	r4, [sp, #8]
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	f004 fa2e 	bl	8005c14 <HAL_I2C_Mem_Read>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <read_data+0x46>
		return 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <read_data+0x48>
	else
		return 1;
 80017c2:	2301      	movs	r3, #1

}
 80017c4:	4618      	mov	r0, r3
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}

080017cc <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	461a      	mov	r2, r3
 80017d8:	2188      	movs	r1, #136	; 0x88
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ff9f 	bl	800171e <read_register16>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d06f      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3302      	adds	r3, #2
 80017ea:	461a      	mov	r2, r3
 80017ec:	218a      	movs	r1, #138	; 0x8a
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff95 	bl	800171e <read_register16>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d065      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	461a      	mov	r2, r3
 8001800:	218c      	movs	r1, #140	; 0x8c
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff8b 	bl	800171e <read_register16>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d05b      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3306      	adds	r3, #6
 8001812:	461a      	mov	r2, r3
 8001814:	218e      	movs	r1, #142	; 0x8e
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ff81 	bl	800171e <read_register16>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d051      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3308      	adds	r3, #8
 8001826:	461a      	mov	r2, r3
 8001828:	2190      	movs	r1, #144	; 0x90
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff77 	bl	800171e <read_register16>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d047      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	330a      	adds	r3, #10
 800183a:	461a      	mov	r2, r3
 800183c:	2192      	movs	r1, #146	; 0x92
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff6d 	bl	800171e <read_register16>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d03d      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	330c      	adds	r3, #12
 800184e:	461a      	mov	r2, r3
 8001850:	2194      	movs	r1, #148	; 0x94
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff63 	bl	800171e <read_register16>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d033      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	330e      	adds	r3, #14
 8001862:	461a      	mov	r2, r3
 8001864:	2196      	movs	r1, #150	; 0x96
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ff59 	bl	800171e <read_register16>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d029      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3310      	adds	r3, #16
 8001876:	461a      	mov	r2, r3
 8001878:	2198      	movs	r1, #152	; 0x98
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff4f 	bl	800171e <read_register16>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01f      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3312      	adds	r3, #18
 800188a:	461a      	mov	r2, r3
 800188c:	219a      	movs	r1, #154	; 0x9a
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff45 	bl	800171e <read_register16>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3314      	adds	r3, #20
 800189e:	461a      	mov	r2, r3
 80018a0:	219c      	movs	r1, #156	; 0x9c
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff3b 	bl	800171e <read_register16>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80018b2:	461a      	mov	r2, r3
 80018b4:	219e      	movs	r1, #158	; 0x9e
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff31 	bl	800171e <read_register16>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <read_calibration_data+0xfa>

		return true;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <read_calibration_data+0xfc>
	}

	return false;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f103 0218 	add.w	r2, r3, #24
 80018de:	2301      	movs	r3, #1
 80018e0:	21a1      	movs	r1, #161	; 0xa1
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff4a 	bl	800177c <read_data>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d14b      	bne.n	8001986 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	331a      	adds	r3, #26
 80018f2:	461a      	mov	r2, r3
 80018f4:	21e1      	movs	r1, #225	; 0xe1
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff11 	bl	800171e <read_register16>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d041      	beq.n	8001986 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f103 021c 	add.w	r2, r3, #28
 8001908:	2301      	movs	r3, #1
 800190a:	21e3      	movs	r1, #227	; 0xe3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff35 	bl	800177c <read_data>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d136      	bne.n	8001986 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001918:	f107 030e 	add.w	r3, r7, #14
 800191c:	461a      	mov	r2, r3
 800191e:	21e4      	movs	r1, #228	; 0xe4
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff fefc 	bl	800171e <read_register16>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d02c      	beq.n	8001986 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	461a      	mov	r2, r3
 8001932:	21e5      	movs	r1, #229	; 0xe5
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fef2 	bl	800171e <read_register16>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d022      	beq.n	8001986 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001946:	2301      	movs	r3, #1
 8001948:	21e7      	movs	r1, #231	; 0xe7
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff16 	bl	800177c <read_data>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d117      	bne.n	8001986 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	b21b      	sxth	r3, r3
 800195c:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001960:	b21a      	sxth	r2, r3
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	121b      	asrs	r3, r3, #8
 8001966:	b21b      	sxth	r3, r3
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	b21b      	sxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b21a      	sxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001976:	89bb      	ldrh	r3, [r7, #12]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21a      	sxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	841a      	strh	r2, [r3, #32]

		return true;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af04      	add	r7, sp, #16
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
 800199c:	4613      	mov	r3, r2
 800199e:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	89f9      	ldrh	r1, [r7, #14]
 80019b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	2301      	movs	r3, #1
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	1cbb      	adds	r3, r7, #2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	f004 f82d 	bl	8005a20 <HAL_I2C_Mem_Write>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <write_register8+0x40>
		return false;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <write_register8+0x42>
	else
		return true;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019e8:	2b76      	cmp	r3, #118	; 0x76
 80019ea:	d005      	beq.n	80019f8 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019f0:	2b77      	cmp	r3, #119	; 0x77
 80019f2:	d001      	beq.n	80019f8 <bmp280_init+0x1e>

		return false;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e099      	b.n	8001b2c <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80019fe:	2301      	movs	r3, #1
 8001a00:	21d0      	movs	r1, #208	; 0xd0
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff feba 	bl	800177c <read_data>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <bmp280_init+0x38>
		return false;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e08c      	b.n	8001b2c <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a18:	2b58      	cmp	r3, #88	; 0x58
 8001a1a:	d006      	beq.n	8001a2a <bmp280_init+0x50>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a22:	2b60      	cmp	r3, #96	; 0x60
 8001a24:	d001      	beq.n	8001a2a <bmp280_init+0x50>

		return false;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e080      	b.n	8001b2c <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001a2a:	22b6      	movs	r2, #182	; 0xb6
 8001a2c:	21e0      	movs	r1, #224	; 0xe0
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffae 	bl	8001990 <write_register8>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <bmp280_init+0x64>
		return false;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e076      	b.n	8001b2c <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001a3e:	f107 020c 	add.w	r2, r7, #12
 8001a42:	2301      	movs	r3, #1
 8001a44:	21f3      	movs	r1, #243	; 0xf3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fe98 	bl	800177c <read_data>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f5      	bne.n	8001a3e <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001a52:	7b3b      	ldrb	r3, [r7, #12]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff feb5 	bl	80017cc <read_calibration_data>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f083 0301 	eor.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d100      	bne.n	8001a70 <bmp280_init+0x96>
 8001a6e:	e001      	b.n	8001a74 <bmp280_init+0x9a>
		return false;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e05b      	b.n	8001b2c <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a7a:	2b60      	cmp	r3, #96	; 0x60
 8001a7c:	d10a      	bne.n	8001a94 <bmp280_init+0xba>
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff26 	bl	80018d0 <read_hum_calibration_data>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f083 0301 	eor.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <bmp280_init+0xba>
		return false;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e04b      	b.n	8001b2c <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	795b      	ldrb	r3, [r3, #5]
 8001a98:	015b      	lsls	r3, r3, #5
 8001a9a:	b25a      	sxtb	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	461a      	mov	r2, r3
 8001aae:	21f5      	movs	r1, #245	; 0xf5
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff6d 	bl	8001990 <write_register8>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <bmp280_init+0xe6>
		return false;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e035      	b.n	8001b2c <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	78db      	ldrb	r3, [r3, #3]
 8001ad2:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001ad4:	b25a      	sxtb	r2, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	789b      	ldrb	r3, [r3, #2]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b25a      	sxtb	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001aec:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001af4:	2b60      	cmp	r3, #96	; 0x60
 8001af6:	d10d      	bne.n	8001b14 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	791b      	ldrb	r3, [r3, #4]
 8001afc:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001afe:	7b7b      	ldrb	r3, [r7, #13]
 8001b00:	461a      	mov	r2, r3
 8001b02:	21f2      	movs	r1, #242	; 0xf2
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff43 	bl	8001990 <write_register8>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <bmp280_init+0x13a>
			return false;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e00b      	b.n	8001b2c <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	461a      	mov	r2, r3
 8001b18:	21f4      	movs	r1, #244	; 0xf4
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff38 	bl	8001990 <write_register8>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <bmp280_init+0x150>
		return false;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <bmp280_init+0x152>
	}

	return true;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	10da      	asrs	r2, r3, #3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001b56:	12db      	asrs	r3, r3, #11
 8001b58:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	111b      	asrs	r3, r3, #4
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	8812      	ldrh	r2, [r2, #0]
 8001b62:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	1112      	asrs	r2, r2, #4
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	8809      	ldrh	r1, [r1, #0]
 8001b6c:	1a52      	subs	r2, r2, r1
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001b7e:	139b      	asrs	r3, r3, #14
 8001b80:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	441a      	add	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3380      	adds	r3, #128	; 0x80
 8001b98:	121b      	asrs	r3, r3, #8
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba8:	b0cc      	sub	sp, #304	; 0x130
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001bb0:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001bb4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001bbc:	17da      	asrs	r2, r3, #31
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	4615      	mov	r5, r2
 8001bc2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001bc6:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8001bca:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001bce:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bd6:	fb03 f102 	mul.w	r1, r3, r2
 8001bda:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	18ca      	adds	r2, r1, r3
 8001be8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bec:	fba3 8903 	umull	r8, r9, r3, r3
 8001bf0:	eb02 0309 	add.w	r3, r2, r9
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bfa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	17da      	asrs	r2, r3, #31
 8001c02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c06:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c0a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001c0e:	4603      	mov	r3, r0
 8001c10:	fb03 f209 	mul.w	r2, r3, r9
 8001c14:	460b      	mov	r3, r1
 8001c16:	fb08 f303 	mul.w	r3, r8, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	fba8 2102 	umull	r2, r1, r8, r2
 8001c22:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001c26:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001c2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c2e:	4413      	add	r3, r2
 8001c30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c34:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001c38:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001c3c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c44:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	17da      	asrs	r2, r3, #31
 8001c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c50:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001c54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c58:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001c5c:	462a      	mov	r2, r5
 8001c5e:	fb02 f203 	mul.w	r2, r2, r3
 8001c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c66:	4621      	mov	r1, r4
 8001c68:	fb01 f303 	mul.w	r3, r1, r3
 8001c6c:	441a      	add	r2, r3
 8001c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c72:	4621      	mov	r1, r4
 8001c74:	fba3 3101 	umull	r3, r1, r3, r1
 8001c78:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001c7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c84:	18d3      	adds	r3, r2, r3
 8001c86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c8a:	f04f 0000 	mov.w	r0, #0
 8001c8e:	f04f 0100 	mov.w	r1, #0
 8001c92:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001c96:	462b      	mov	r3, r5
 8001c98:	0459      	lsls	r1, r3, #17
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	0458      	lsls	r0, r3, #17
 8001ca4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ca8:	1814      	adds	r4, r2, r0
 8001caa:	643c      	str	r4, [r7, #64]	; 0x40
 8001cac:	414b      	adcs	r3, r1
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001cb4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cbc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	17da      	asrs	r2, r3, #31
 8001cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001cc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ccc:	f04f 0000 	mov.w	r0, #0
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cd8:	00d9      	lsls	r1, r3, #3
 8001cda:	2000      	movs	r0, #0
 8001cdc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ce0:	1814      	adds	r4, r2, r0
 8001ce2:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ce4:	414b      	adcs	r3, r1
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001cec:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001cf0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cf8:	fb03 f102 	mul.w	r1, r3, r2
 8001cfc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	18ca      	adds	r2, r1, r3
 8001d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d0e:	fba3 3103 	umull	r3, r1, r3, r3
 8001d12:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001d16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d1e:	18d3      	adds	r3, r2, r3
 8001d20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d28:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	17da      	asrs	r2, r3, #31
 8001d30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d34:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d38:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d42:	4641      	mov	r1, r8
 8001d44:	fb01 f202 	mul.w	r2, r1, r2
 8001d48:	464d      	mov	r5, r9
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	4603      	mov	r3, r0
 8001d50:	fb03 f305 	mul.w	r3, r3, r5
 8001d54:	4413      	add	r3, r2
 8001d56:	4602      	mov	r2, r0
 8001d58:	4641      	mov	r1, r8
 8001d5a:	fba2 2101 	umull	r2, r1, r2, r1
 8001d5e:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001d62:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001d66:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001d70:	f04f 0000 	mov.w	r0, #0
 8001d74:	f04f 0100 	mov.w	r1, #0
 8001d78:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	0a18      	lsrs	r0, r3, #8
 8001d80:	462a      	mov	r2, r5
 8001d82:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001d86:	462b      	mov	r3, r5
 8001d88:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	17da      	asrs	r2, r3, #31
 8001d96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d9a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001da2:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001da6:	464a      	mov	r2, r9
 8001da8:	fb02 f203 	mul.w	r2, r2, r3
 8001dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001db0:	4644      	mov	r4, r8
 8001db2:	fb04 f303 	mul.w	r3, r4, r3
 8001db6:	441a      	add	r2, r3
 8001db8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001dbc:	4644      	mov	r4, r8
 8001dbe:	fba3 3404 	umull	r3, r4, r3, r4
 8001dc2:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001dca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001dce:	18d3      	adds	r3, r2, r3
 8001dd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001de0:	464c      	mov	r4, r9
 8001de2:	0323      	lsls	r3, r4, #12
 8001de4:	46c4      	mov	ip, r8
 8001de6:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001dea:	4644      	mov	r4, r8
 8001dec:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001dee:	1884      	adds	r4, r0, r2
 8001df0:	633c      	str	r4, [r7, #48]	; 0x30
 8001df2:	eb41 0303 	adc.w	r3, r1, r3
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
 8001df8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001dfc:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001e00:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e04:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001e08:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001e0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e14:	88db      	ldrh	r3, [r3, #6]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e1e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e22:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001e26:	4622      	mov	r2, r4
 8001e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	fb01 f202 	mul.w	r2, r1, r2
 8001e32:	464d      	mov	r5, r9
 8001e34:	4618      	mov	r0, r3
 8001e36:	4621      	mov	r1, r4
 8001e38:	4603      	mov	r3, r0
 8001e3a:	fb03 f305 	mul.w	r3, r3, r5
 8001e3e:	4413      	add	r3, r2
 8001e40:	4602      	mov	r2, r0
 8001e42:	4641      	mov	r1, r8
 8001e44:	fba2 2101 	umull	r2, r1, r2, r1
 8001e48:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001e4c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001e50:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001e54:	4413      	add	r3, r2
 8001e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001e66:	4629      	mov	r1, r5
 8001e68:	104a      	asrs	r2, r1, #1
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	17cb      	asrs	r3, r1, #31
 8001e6e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001e72:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e76:	4313      	orrs	r3, r2
 8001e78:	d101      	bne.n	8001e7e <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e146      	b.n	800210c <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001e7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e82:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001e86:	17da      	asrs	r2, r3, #31
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e8c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e90:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001e94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001e98:	105b      	asrs	r3, r3, #1
 8001e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ea2:	07db      	lsls	r3, r3, #31
 8001ea4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ea8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001eac:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	1aa4      	subs	r4, r4, r2
 8001eb4:	67bc      	str	r4, [r7, #120]	; 0x78
 8001eb6:	eb61 0303 	sbc.w	r3, r1, r3
 8001eba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ebc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	462b      	mov	r3, r5
 8001ec4:	1891      	adds	r1, r2, r2
 8001ec6:	6239      	str	r1, [r7, #32]
 8001ec8:	415b      	adcs	r3, r3
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ecc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	1851      	adds	r1, r2, r1
 8001ed4:	61b9      	str	r1, [r7, #24]
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	414b      	adcs	r3, r1
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001ee8:	4649      	mov	r1, r9
 8001eea:	018b      	lsls	r3, r1, #6
 8001eec:	4641      	mov	r1, r8
 8001eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef2:	4641      	mov	r1, r8
 8001ef4:	018a      	lsls	r2, r1, #6
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	1889      	adds	r1, r1, r2
 8001efa:	6139      	str	r1, [r7, #16]
 8001efc:	4649      	mov	r1, r9
 8001efe:	eb43 0101 	adc.w	r1, r3, r1
 8001f02:	6179      	str	r1, [r7, #20]
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f10:	4649      	mov	r1, r9
 8001f12:	008b      	lsls	r3, r1, #2
 8001f14:	46c4      	mov	ip, r8
 8001f16:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001f1a:	4641      	mov	r1, r8
 8001f1c:	008a      	lsls	r2, r1, #2
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	4622      	mov	r2, r4
 8001f26:	189b      	adds	r3, r3, r2
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	462a      	mov	r2, r5
 8001f2e:	eb42 0303 	adc.w	r3, r2, r3
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001f40:	4649      	mov	r1, r9
 8001f42:	008b      	lsls	r3, r1, #2
 8001f44:	46c4      	mov	ip, r8
 8001f46:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001f4a:	4641      	mov	r1, r8
 8001f4c:	008a      	lsls	r2, r1, #2
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	4622      	mov	r2, r4
 8001f56:	189b      	adds	r3, r3, r2
 8001f58:	673b      	str	r3, [r7, #112]	; 0x70
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	eb42 0303 	adc.w	r3, r2, r3
 8001f62:	677b      	str	r3, [r7, #116]	; 0x74
 8001f64:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001f68:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001f6c:	f7fe fbf2 	bl	8000754 <__aeabi_ldivmod>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f7c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	17da      	asrs	r2, r3, #31
 8001f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f88:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001f8c:	f04f 0000 	mov.w	r0, #0
 8001f90:	f04f 0100 	mov.w	r1, #0
 8001f94:	0b50      	lsrs	r0, r2, #13
 8001f96:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f9a:	1359      	asrs	r1, r3, #13
 8001f9c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	fb00 f203 	mul.w	r2, r0, r3
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	fb03 f301 	mul.w	r3, r3, r1
 8001fac:	4413      	add	r3, r2
 8001fae:	4622      	mov	r2, r4
 8001fb0:	fba2 2100 	umull	r2, r1, r2, r0
 8001fb4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001fb8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001fbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001fc6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001fca:	f04f 0000 	mov.w	r0, #0
 8001fce:	f04f 0100 	mov.w	r1, #0
 8001fd2:	0b50      	lsrs	r0, r2, #13
 8001fd4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001fd8:	1359      	asrs	r1, r3, #13
 8001fda:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001fde:	462b      	mov	r3, r5
 8001fe0:	fb00 f203 	mul.w	r2, r0, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	fb03 f301 	mul.w	r3, r3, r1
 8001fea:	4413      	add	r3, r2
 8001fec:	4622      	mov	r2, r4
 8001fee:	fba2 2100 	umull	r2, r1, r2, r0
 8001ff2:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001ff6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001ffa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001ffe:	4413      	add	r3, r2
 8002000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002010:	4621      	mov	r1, r4
 8002012:	0e4a      	lsrs	r2, r1, #25
 8002014:	4620      	mov	r0, r4
 8002016:	4629      	mov	r1, r5
 8002018:	460c      	mov	r4, r1
 800201a:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 800201e:	164b      	asrs	r3, r1, #25
 8002020:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002028:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800202c:	b21b      	sxth	r3, r3
 800202e:	17da      	asrs	r2, r3, #31
 8002030:	663b      	str	r3, [r7, #96]	; 0x60
 8002032:	667a      	str	r2, [r7, #100]	; 0x64
 8002034:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002038:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800203c:	462a      	mov	r2, r5
 800203e:	fb02 f203 	mul.w	r2, r2, r3
 8002042:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002046:	4621      	mov	r1, r4
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002052:	4621      	mov	r1, r4
 8002054:	fba2 2101 	umull	r2, r1, r2, r1
 8002058:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800205c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002060:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002064:	4413      	add	r3, r2
 8002066:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002076:	4621      	mov	r1, r4
 8002078:	0cca      	lsrs	r2, r1, #19
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	460c      	mov	r4, r1
 8002080:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8002084:	14cb      	asrs	r3, r1, #19
 8002086:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800208a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800208e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002092:	1884      	adds	r4, r0, r2
 8002094:	65bc      	str	r4, [r7, #88]	; 0x58
 8002096:	eb41 0303 	adc.w	r3, r1, r3
 800209a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800209c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80020a0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80020a4:	4621      	mov	r1, r4
 80020a6:	1889      	adds	r1, r1, r2
 80020a8:	6539      	str	r1, [r7, #80]	; 0x50
 80020aa:	4629      	mov	r1, r5
 80020ac:	eb43 0101 	adc.w	r1, r3, r1
 80020b0:	6579      	str	r1, [r7, #84]	; 0x54
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80020be:	4623      	mov	r3, r4
 80020c0:	0a18      	lsrs	r0, r3, #8
 80020c2:	462a      	mov	r2, r5
 80020c4:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80020c8:	462b      	mov	r3, r5
 80020ca:	1219      	asrs	r1, r3, #8
 80020cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	17da      	asrs	r2, r3, #31
 80020d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80020da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80020e8:	464c      	mov	r4, r9
 80020ea:	0123      	lsls	r3, r4, #4
 80020ec:	46c4      	mov	ip, r8
 80020ee:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80020f2:	4644      	mov	r4, r8
 80020f4:	0122      	lsls	r2, r4, #4
 80020f6:	1884      	adds	r4, r0, r2
 80020f8:	603c      	str	r4, [r7, #0]
 80020fa:	eb41 0303 	adc.w	r3, r1, r3
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002104:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8002108:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800210c:	4618      	mov	r0, r3
 800210e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002112:	46bd      	mov	sp, r7
 8002114:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002118 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800212a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	039a      	lsls	r2, r3, #14
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002136:	051b      	lsls	r3, r3, #20
 8002138:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002140:	4619      	mov	r1, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800214e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8002156:	4611      	mov	r1, r2
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	fb01 f202 	mul.w	r2, r1, r2
 800215e:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	7f09      	ldrb	r1, [r1, #28]
 8002164:	4608      	mov	r0, r1
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	fb00 f101 	mul.w	r1, r0, r1
 800216c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800216e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002172:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002176:	1292      	asrs	r2, r2, #10
 8002178:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800217c:	68f9      	ldr	r1, [r7, #12]
 800217e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002182:	fb01 f202 	mul.w	r2, r1, r2
 8002186:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800218a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	13db      	asrs	r3, r3, #15
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	13d2      	asrs	r2, r2, #15
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	7e12      	ldrb	r2, [r2, #24]
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021b6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80021be:	bfa8      	it	ge
 80021c0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80021c4:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	131b      	asrs	r3, r3, #12
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	; 0x30
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80021e8:	2b60      	cmp	r3, #96	; 0x60
 80021ea:	d007      	beq.n	80021fc <bmp280_read_fixed+0x28>
		if (humidity)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <bmp280_read_fixed+0x32>
 8002202:	2308      	movs	r3, #8
 8002204:	e000      	b.n	8002208 <bmp280_read_fixed+0x34>
 8002206:	2306      	movs	r3, #6
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f107 0218 	add.w	r2, r7, #24
 8002212:	21f7      	movs	r1, #247	; 0xf7
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fab1 	bl	800177c <read_data>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <bmp280_read_fixed+0x50>
		return false;
 8002220:	2300      	movs	r3, #0
 8002222:	e038      	b.n	8002296 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002224:	7e3b      	ldrb	r3, [r7, #24]
 8002226:	031a      	lsls	r2, r3, #12
 8002228:	7e7b      	ldrb	r3, [r7, #25]
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	4313      	orrs	r3, r2
 800222e:	7eba      	ldrb	r2, [r7, #26]
 8002230:	0912      	lsrs	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	4313      	orrs	r3, r2
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002238:	7efb      	ldrb	r3, [r7, #27]
 800223a:	031a      	lsls	r2, r3, #12
 800223c:	7f3b      	ldrb	r3, [r7, #28]
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	4313      	orrs	r3, r2
 8002242:	7f7a      	ldrb	r2, [r7, #29]
 8002244:	0912      	lsrs	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	4313      	orrs	r3, r2
 800224a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	461a      	mov	r2, r3
 8002252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fc6d 	bl	8001b34 <compensate_temperature>
 800225a:	4602      	mov	r2, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	461a      	mov	r2, r3
 8002264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff fc9c 	bl	8001ba4 <compensate_pressure>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00d      	beq.n	8002294 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002278:	7fbb      	ldrb	r3, [r7, #30]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	7ffa      	ldrb	r2, [r7, #31]
 800227e:	4313      	orrs	r3, r2
 8002280:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	461a      	mov	r2, r3
 8002286:	6a39      	ldr	r1, [r7, #32]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff ff45 	bl	8002118 <compensate_humidity>
 800228e:	4602      	mov	r2, r0
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	3730      	adds	r7, #48	; 0x30
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <bmp280_read_float+0x1a>
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	e000      	b.n	80022bc <bmp280_read_float+0x1c>
 80022ba:	2300      	movs	r3, #0
 80022bc:	f107 0218 	add.w	r2, r7, #24
 80022c0:	f107 011c 	add.w	r1, r7, #28
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff ff85 	bl	80021d4 <bmp280_read_fixed>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02d      	beq.n	800232c <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fd fffe 	bl	80002d4 <__aeabi_i2f>
 80022d8:	4603      	mov	r3, r0
 80022da:	4917      	ldr	r1, [pc, #92]	; (8002338 <bmp280_read_float+0x98>)
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f901 	bl	80004e4 <__aeabi_fdiv>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fd ffed 	bl	80002cc <__aeabi_ui2f>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe f8f3 	bl	80004e4 <__aeabi_fdiv>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	601a      	str	r2, [r3, #0]
		if (humidity)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fd ffdc 	bl	80002cc <__aeabi_ui2f>
 8002314:	4603      	mov	r3, r0
 8002316:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f8e2 	bl	80004e4 <__aeabi_fdiv>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	601a      	str	r2, [r3, #0]
		return true;
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <bmp280_read_float+0x8e>
	}

	return false;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	42c80000 	.word	0x42c80000

0800233c <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8002344:	4a03      	ldr	r2, [pc, #12]	; (8002354 <DS3231_Init+0x18>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	200000a0 	.word	0x200000a0

08002358 <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af02      	add	r7, sp, #8
 800235e:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	2100      	movs	r1, #0
 800236e:	460a      	mov	r2, r1
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	460a      	mov	r2, r1
 8002374:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <DS3231_GetTime+0xf4>)
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	f107 020f 	add.w	r2, r7, #15
 800237e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2301      	movs	r3, #1
 8002386:	21d0      	movs	r1, #208	; 0xd0
 8002388:	f002 ffec 	bl	8005364 <HAL_I2C_Master_Transmit>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <DS3231_GetTime+0x3e>
 8002392:	2300      	movs	r3, #0
 8002394:	e055      	b.n	8002442 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <DS3231_GetTime+0xf4>)
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	f107 0208 	add.w	r2, r7, #8
 800239e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2307      	movs	r3, #7
 80023a6:	21d0      	movs	r1, #208	; 0xd0
 80023a8:	f003 f8da 	bl	8005560 <HAL_I2C_Master_Receive>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <DS3231_GetTime+0x5e>
 80023b2:	2300      	movs	r3, #0
 80023b4:	e045      	b.n	8002442 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 80023b6:	7a3b      	ldrb	r3, [r7, #8]
 80023b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f8e2 	bl	8002588 <B2D>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 80023cc:	7a7b      	ldrb	r3, [r7, #9]
 80023ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f8d7 	bl	8002588 <B2D>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 80023e2:	7abb      	ldrb	r3, [r7, #10]
 80023e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f8cc 	bl	8002588 <B2D>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8002404:	7b3b      	ldrb	r3, [r7, #12]
 8002406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f8bb 	bl	8002588 <B2D>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 800241a:	7b7b      	ldrb	r3, [r7, #13]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f8b0 	bl	8002588 <B2D>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8002430:	7bbb      	ldrb	r3, [r7, #14]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f8a8 	bl	8002588 <B2D>
 8002438:	4603      	mov	r3, r0
 800243a:	461a      	mov	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	701a      	strb	r2, [r3, #0]

  return true;
 8002440:	2301      	movs	r3, #1
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200000a0 	.word	0x200000a0

08002450 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af02      	add	r7, sp, #8
 8002456:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8002458:	2300      	movs	r3, #0
 800245a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	733b      	strb	r3, [r7, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	799b      	ldrb	r3, [r3, #6]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f8a7 	bl	80025b8 <D2B>
 800246a:	4603      	mov	r3, r0
 800246c:	737b      	strb	r3, [r7, #13]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	795b      	ldrb	r3, [r3, #5]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f8a0 	bl	80025b8 <D2B>
 8002478:	4603      	mov	r3, r0
 800247a:	73bb      	strb	r3, [r7, #14]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	791b      	ldrb	r3, [r3, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f899 	bl	80025b8 <D2B>
 8002486:	4603      	mov	r3, r0
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	78db      	ldrb	r3, [r3, #3]
 800248e:	743b      	strb	r3, [r7, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	789b      	ldrb	r3, [r3, #2]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f88f 	bl	80025b8 <D2B>
 800249a:	4603      	mov	r3, r0
 800249c:	747b      	strb	r3, [r7, #17]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f888 	bl	80025b8 <D2B>
 80024a8:	4603      	mov	r3, r0
 80024aa:	74bb      	strb	r3, [r7, #18]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f881 	bl	80025b8 <D2B>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <DS3231_SetTime+0x94>)
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	f107 020c 	add.w	r2, r7, #12
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2308      	movs	r3, #8
 80024ca:	21d0      	movs	r1, #208	; 0xd0
 80024cc:	f002 ff4a 	bl	8005364 <HAL_I2C_Master_Transmit>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <DS3231_SetTime+0x8a>
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <DS3231_SetTime+0x8c>

  return true;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200000a0 	.word	0x200000a0

080024e8 <ReadRegister>:

  return true;
}

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4603      	mov	r3, r0
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <ReadRegister+0x54>)
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	1dfa      	adds	r2, r7, #7
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2301      	movs	r3, #1
 8002502:	21d0      	movs	r1, #208	; 0xd0
 8002504:	f002 ff2e 	bl	8005364 <HAL_I2C_Master_Transmit>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <ReadRegister+0x2a>
 800250e:	2300      	movs	r3, #0
 8002510:	e00f      	b.n	8002532 <ReadRegister+0x4a>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <ReadRegister+0x54>)
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2301      	movs	r3, #1
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	21d0      	movs	r1, #208	; 0xd0
 8002522:	f003 f81d 	bl	8005560 <HAL_I2C_Master_Receive>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <ReadRegister+0x48>
 800252c:	2300      	movs	r3, #0
 800252e:	e000      	b.n	8002532 <ReadRegister+0x4a>

  return true;
 8002530:	2301      	movs	r3, #1
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200000a0 	.word	0x200000a0

08002540 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af02      	add	r7, sp, #8
 8002546:	4603      	mov	r3, r0
 8002548:	460a      	mov	r2, r1
 800254a:	71fb      	strb	r3, [r7, #7]
 800254c:	4613      	mov	r3, r2
 800254e:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	733b      	strb	r3, [r7, #12]
 8002554:	79bb      	ldrb	r3, [r7, #6]
 8002556:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <WriteRegister+0x44>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	f107 020c 	add.w	r2, r7, #12
 8002560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2302      	movs	r3, #2
 8002568:	21d0      	movs	r1, #208	; 0xd0
 800256a:	f002 fefb 	bl	8005364 <HAL_I2C_Master_Transmit>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <WriteRegister+0x38>
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <WriteRegister+0x3a>

  return true;
 8002578:	2301      	movs	r3, #1
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200000a0 	.word	0x200000a0

08002588 <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4413      	add	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	b2db      	uxtb	r3, r3
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <D2B+0x44>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	08db      	lsrs	r3, r3, #3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	b258      	sxtb	r0, r3
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <D2B+0x44>)
 80025d6:	fba3 1302 	umull	r1, r3, r3, r2
 80025da:	08d9      	lsrs	r1, r3, #3
 80025dc:	460b      	mov	r3, r1
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	4303      	orrs	r3, r0
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	cccccccd 	.word	0xcccccccd

08002600 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN PV */


// -------------------------------------------------------------------------
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INTERUPT_FROM_RTC_Pin)										// Interrupt signal every seconds fron RTS module pin
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002610:	d104      	bne.n	800261c <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(red_data_fron_rtc_SemHandle);						// Lets RTS task read data from ds3231
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_GPIO_EXTI_Callback+0x70>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f006 fdee 	bl	80091f8 <osSemaphoreRelease>
	}

	// Detect pressed key (interrupt)  (debounce method)
	if(((GPIO_Pin == KEY_1_Pin) && (state == true)) || ((GPIO_Pin == KEY_2_Pin) && (state == true))
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	2b10      	cmp	r3, #16
 8002620:	d103      	bne.n	800262a <HAL_GPIO_EXTI_Callback+0x2a>
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_GPIO_EXTI_Callback+0x74>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d114      	bne.n	8002654 <HAL_GPIO_EXTI_Callback+0x54>
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d103      	bne.n	8002638 <HAL_GPIO_EXTI_Callback+0x38>
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_GPIO_EXTI_Callback+0x74>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10d      	bne.n	8002654 <HAL_GPIO_EXTI_Callback+0x54>
			|| ((GPIO_Pin == KEY_3_Pin) && (state == true)) || ((GPIO_Pin == KEY_4_Pin) && (state == true)))
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d103      	bne.n	8002646 <HAL_GPIO_EXTI_Callback+0x46>
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_GPIO_EXTI_Callback+0x74>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_GPIO_EXTI_Callback+0x54>
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d10a      	bne.n	8002662 <HAL_GPIO_EXTI_Callback+0x62>
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_GPIO_EXTI_Callback+0x74>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_GPIO_EXTI_Callback+0x62>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8002654:	4808      	ldr	r0, [pc, #32]	; (8002678 <HAL_GPIO_EXTI_Callback+0x78>)
 8002656:	f005 fa0b 	bl	8007a70 <HAL_TIM_Base_Start_IT>
		state = false;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_GPIO_EXTI_Callback+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e001      	b.n	8002666 <HAL_GPIO_EXTI_Callback+0x66>
	}
	else
	{
		__NOP();
 8002662:	bf00      	nop
	}
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000045c 	.word	0x2000045c
 8002674:	20000005 	.word	0x20000005
 8002678:	2000019c 	.word	0x2000019c

0800267c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002680:	f002 f97a 	bl	8004978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002684:	f000 f8f0 	bl	8002868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002688:	f000 fa5c 	bl	8002b44 <MX_GPIO_Init>
  MX_SPI1_Init();
 800268c:	f000 f960 	bl	8002950 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002690:	f000 f930 	bl	80028f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002694:	f000 fa2c 	bl	8002af0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002698:	f000 f990 	bl	80029bc <MX_TIM2_Init>
  MX_TIM3_Init();
 800269c:	f000 f9da 	bl	8002a54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  DS3231_Init(&hi2c1);
 80026a0:	4847      	ldr	r0, [pc, #284]	; (80027c0 <main+0x144>)
 80026a2:	f7ff fe4b 	bl	800233c <DS3231_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80026a6:	f006 f9b7 	bl	8008a18 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of I2C_Mutex */
  I2C_MutexHandle = osMutexNew(&I2C_Mutex_attributes);
 80026aa:	4846      	ldr	r0, [pc, #280]	; (80027c4 <main+0x148>)
 80026ac:	f006 fb5a 	bl	8008d64 <osMutexNew>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a45      	ldr	r2, [pc, #276]	; (80027c8 <main+0x14c>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* creation of read_data_rts_Mutex */
  read_data_rts_MutexHandle = osMutexNew(&read_data_rts_Mutex_attributes);
 80026b6:	4845      	ldr	r0, [pc, #276]	; (80027cc <main+0x150>)
 80026b8:	f006 fb54 	bl	8008d64 <osMutexNew>
 80026bc:	4603      	mov	r3, r0
 80026be:	4a44      	ldr	r2, [pc, #272]	; (80027d0 <main+0x154>)
 80026c0:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of LCD_Sem */
  LCD_SemHandle = osSemaphoreNew(1, 1, &LCD_Sem_attributes);
 80026c2:	4a44      	ldr	r2, [pc, #272]	; (80027d4 <main+0x158>)
 80026c4:	2101      	movs	r1, #1
 80026c6:	2001      	movs	r0, #1
 80026c8:	f006 fc94 	bl	8008ff4 <osSemaphoreNew>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4a42      	ldr	r2, [pc, #264]	; (80027d8 <main+0x15c>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* creation of set_rts_val_Sem */
  set_rts_val_SemHandle = osSemaphoreNew(1, 1, &set_rts_val_Sem_attributes);
 80026d2:	4a42      	ldr	r2, [pc, #264]	; (80027dc <main+0x160>)
 80026d4:	2101      	movs	r1, #1
 80026d6:	2001      	movs	r0, #1
 80026d8:	f006 fc8c 	bl	8008ff4 <osSemaphoreNew>
 80026dc:	4603      	mov	r3, r0
 80026de:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <main+0x164>)
 80026e0:	6013      	str	r3, [r2, #0]

  /* creation of red_data_fron_rtc_Sem */
  red_data_fron_rtc_SemHandle = osSemaphoreNew(1, 1, &red_data_fron_rtc_Sem_attributes);
 80026e2:	4a40      	ldr	r2, [pc, #256]	; (80027e4 <main+0x168>)
 80026e4:	2101      	movs	r1, #1
 80026e6:	2001      	movs	r0, #1
 80026e8:	f006 fc84 	bl	8008ff4 <osSemaphoreNew>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <main+0x16c>)
 80026f0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (1, sizeof(QUEUE_t), &UARTQueue_attributes);
 80026f2:	4a3e      	ldr	r2, [pc, #248]	; (80027ec <main+0x170>)
 80026f4:	2101      	movs	r1, #1
 80026f6:	2001      	movs	r0, #1
 80026f8:	f006 fdd6 	bl	80092a8 <osMessageQueueNew>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4a3c      	ldr	r2, [pc, #240]	; (80027f0 <main+0x174>)
 8002700:	6013      	str	r3, [r2, #0]

  /* creation of buttonQueue */
  buttonQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &buttonQueue_attributes);
 8002702:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <main+0x178>)
 8002704:	2102      	movs	r1, #2
 8002706:	2002      	movs	r0, #2
 8002708:	f006 fdce 	bl	80092a8 <osMessageQueueNew>
 800270c:	4603      	mov	r3, r0
 800270e:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <main+0x17c>)
 8002710:	6013      	str	r3, [r2, #0]

  /* creation of THPQueue */
  THPQueueHandle = osMessageQueueNew (2, sizeof(QUEUE_BME280), &THPQueue_attributes);
 8002712:	4a3a      	ldr	r2, [pc, #232]	; (80027fc <main+0x180>)
 8002714:	210c      	movs	r1, #12
 8002716:	2002      	movs	r0, #2
 8002718:	f006 fdc6 	bl	80092a8 <osMessageQueueNew>
 800271c:	4603      	mov	r3, r0
 800271e:	4a38      	ldr	r2, [pc, #224]	; (8002800 <main+0x184>)
 8002720:	6013      	str	r3, [r2, #0]

  /* creation of rtc_queue */
  rtc_queueHandle = osMessageQueueNew (1, sizeof(QUEUE_RTC), &rtc_queue_attributes);
 8002722:	4a38      	ldr	r2, [pc, #224]	; (8002804 <main+0x188>)
 8002724:	2107      	movs	r1, #7
 8002726:	2001      	movs	r0, #1
 8002728:	f006 fdbe 	bl	80092a8 <osMessageQueueNew>
 800272c:	4603      	mov	r3, r0
 800272e:	4a36      	ldr	r2, [pc, #216]	; (8002808 <main+0x18c>)
 8002730:	6013      	str	r3, [r2, #0]

  /* creation of new_rtc_queue */
  new_rtc_queueHandle = osMessageQueueNew (2, sizeof(QUEUE_NEW_RTC), &new_rtc_queue_attributes);
 8002732:	4a36      	ldr	r2, [pc, #216]	; (800280c <main+0x190>)
 8002734:	2107      	movs	r1, #7
 8002736:	2002      	movs	r0, #2
 8002738:	f006 fdb6 	bl	80092a8 <osMessageQueueNew>
 800273c:	4603      	mov	r3, r0
 800273e:	4a34      	ldr	r2, [pc, #208]	; (8002810 <main+0x194>)
 8002740:	6013      	str	r3, [r2, #0]

  /* creation of QUEUE_RTC_VAL */
  QUEUE_RTC_VALHandle = osMessageQueueNew (2, sizeof(QUEUE_RTC_VAL), &QUEUE_RTC_VAL_attributes);
 8002742:	4a34      	ldr	r2, [pc, #208]	; (8002814 <main+0x198>)
 8002744:	2118      	movs	r1, #24
 8002746:	2002      	movs	r0, #2
 8002748:	f006 fdae 	bl	80092a8 <osMessageQueueNew>
 800274c:	4603      	mov	r3, r0
 800274e:	4a32      	ldr	r2, [pc, #200]	; (8002818 <main+0x19c>)
 8002750:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002752:	4a32      	ldr	r2, [pc, #200]	; (800281c <main+0x1a0>)
 8002754:	2100      	movs	r1, #0
 8002756:	4832      	ldr	r0, [pc, #200]	; (8002820 <main+0x1a4>)
 8002758:	f006 f9c4 	bl	8008ae4 <osThreadNew>
 800275c:	4603      	mov	r3, r0
 800275e:	4a31      	ldr	r2, [pc, #196]	; (8002824 <main+0x1a8>)
 8002760:	6013      	str	r3, [r2, #0]

  /* creation of RTC_DS3231_Task */
  RTC_DS3231_TaskHandle = osThreadNew(start_RTC_DS3231_Task, NULL, &RTC_DS3231_Task_attributes);
 8002762:	4a31      	ldr	r2, [pc, #196]	; (8002828 <main+0x1ac>)
 8002764:	2100      	movs	r1, #0
 8002766:	4831      	ldr	r0, [pc, #196]	; (800282c <main+0x1b0>)
 8002768:	f006 f9bc 	bl	8008ae4 <osThreadNew>
 800276c:	4603      	mov	r3, r0
 800276e:	4a30      	ldr	r2, [pc, #192]	; (8002830 <main+0x1b4>)
 8002770:	6013      	str	r3, [r2, #0]

  /* creation of BPE280_Task */
  BPE280_TaskHandle = osThreadNew(start_BPE280_Task, NULL, &BPE280_Task_attributes);
 8002772:	4a30      	ldr	r2, [pc, #192]	; (8002834 <main+0x1b8>)
 8002774:	2100      	movs	r1, #0
 8002776:	4830      	ldr	r0, [pc, #192]	; (8002838 <main+0x1bc>)
 8002778:	f006 f9b4 	bl	8008ae4 <osThreadNew>
 800277c:	4603      	mov	r3, r0
 800277e:	4a2f      	ldr	r2, [pc, #188]	; (800283c <main+0x1c0>)
 8002780:	6013      	str	r3, [r2, #0]

  /* creation of SET_RTS_TASK */
  SET_RTS_TASKHandle = osThreadNew(start_SET_RTS_TASK, NULL, &SET_RTS_TASK_attributes);
 8002782:	4a2f      	ldr	r2, [pc, #188]	; (8002840 <main+0x1c4>)
 8002784:	2100      	movs	r1, #0
 8002786:	482f      	ldr	r0, [pc, #188]	; (8002844 <main+0x1c8>)
 8002788:	f006 f9ac 	bl	8008ae4 <osThreadNew>
 800278c:	4603      	mov	r3, r0
 800278e:	4a2e      	ldr	r2, [pc, #184]	; (8002848 <main+0x1cc>)
 8002790:	6013      	str	r3, [r2, #0]

  /* creation of UART_USB_Task */
  UART_USB_TaskHandle = osThreadNew(start_UART_USB_Task, NULL, &UART_USB_Task_attributes);
 8002792:	4a2e      	ldr	r2, [pc, #184]	; (800284c <main+0x1d0>)
 8002794:	2100      	movs	r1, #0
 8002796:	482e      	ldr	r0, [pc, #184]	; (8002850 <main+0x1d4>)
 8002798:	f006 f9a4 	bl	8008ae4 <osThreadNew>
 800279c:	4603      	mov	r3, r0
 800279e:	4a2d      	ldr	r2, [pc, #180]	; (8002854 <main+0x1d8>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(start_LCD_Task, NULL, &LCD_Task_attributes);
 80027a2:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <main+0x1dc>)
 80027a4:	2100      	movs	r1, #0
 80027a6:	482d      	ldr	r0, [pc, #180]	; (800285c <main+0x1e0>)
 80027a8:	f006 f99c 	bl	8008ae4 <osThreadNew>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <main+0x1e4>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  HAL_TIM_Base_Start_IT(&htim2);		//  This TIM3 using for calculate how many time all tasks was running.
 80027b2:	482c      	ldr	r0, [pc, #176]	; (8002864 <main+0x1e8>)
 80027b4:	f005 f95c 	bl	8007a70 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80027b8:	f006 f960 	bl	8008a7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <main+0x140>
 80027be:	bf00      	nop
 80027c0:	200000a8 	.word	0x200000a8
 80027c4:	0800d684 	.word	0x0800d684
 80027c8:	2000044c 	.word	0x2000044c
 80027cc:	0800d694 	.word	0x0800d694
 80027d0:	20000450 	.word	0x20000450
 80027d4:	0800d6a4 	.word	0x0800d6a4
 80027d8:	20000454 	.word	0x20000454
 80027dc:	0800d6b4 	.word	0x0800d6b4
 80027e0:	20000458 	.word	0x20000458
 80027e4:	0800d6c4 	.word	0x0800d6c4
 80027e8:	2000045c 	.word	0x2000045c
 80027ec:	0800d5f4 	.word	0x0800d5f4
 80027f0:	20000240 	.word	0x20000240
 80027f4:	0800d60c 	.word	0x0800d60c
 80027f8:	20000298 	.word	0x20000298
 80027fc:	0800d624 	.word	0x0800d624
 8002800:	2000029c 	.word	0x2000029c
 8002804:	0800d63c 	.word	0x0800d63c
 8002808:	20000308 	.word	0x20000308
 800280c:	0800d654 	.word	0x0800d654
 8002810:	20000364 	.word	0x20000364
 8002814:	0800d66c 	.word	0x0800d66c
 8002818:	200003c8 	.word	0x200003c8
 800281c:	0800d51c 	.word	0x0800d51c
 8002820:	08002cd9 	.word	0x08002cd9
 8002824:	20000228 	.word	0x20000228
 8002828:	0800d540 	.word	0x0800d540
 800282c:	08002ced 	.word	0x08002ced
 8002830:	2000022c 	.word	0x2000022c
 8002834:	0800d564 	.word	0x0800d564
 8002838:	08002e91 	.word	0x08002e91
 800283c:	20000230 	.word	0x20000230
 8002840:	0800d588 	.word	0x0800d588
 8002844:	08002f85 	.word	0x08002f85
 8002848:	20000234 	.word	0x20000234
 800284c:	0800d5ac 	.word	0x0800d5ac
 8002850:	080036b5 	.word	0x080036b5
 8002854:	20000238 	.word	0x20000238
 8002858:	0800d5d0 	.word	0x0800d5d0
 800285c:	080036c9 	.word	0x080036c9
 8002860:	2000023c 	.word	0x2000023c
 8002864:	20000154 	.word	0x20000154

08002868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b090      	sub	sp, #64	; 0x40
 800286c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286e:	f107 0318 	add.w	r3, r7, #24
 8002872:	2228      	movs	r2, #40	; 0x28
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f009 ff62 	bl	800c740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
 8002888:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800288a:	2301      	movs	r3, #1
 800288c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800288e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002892:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002898:	2301      	movs	r3, #1
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289c:	2302      	movs	r3, #2
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 f8d9 	bl	8006a68 <HAL_RCC_OscConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80028bc:	f001 fdc6 	bl	800444c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c0:	230f      	movs	r3, #15
 80028c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c4:	2302      	movs	r3, #2
 80028c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2102      	movs	r1, #2
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 fb46 	bl	8006f6c <HAL_RCC_ClockConfig>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80028e6:	f001 fdb1 	bl	800444c <Error_Handler>
  }
}
 80028ea:	bf00      	nop
 80028ec:	3740      	adds	r7, #64	; 0x40
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <MX_I2C1_Init+0x50>)
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <MX_I2C1_Init+0x54>)
 80028fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <MX_I2C1_Init+0x50>)
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <MX_I2C1_Init+0x58>)
 8002902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <MX_I2C1_Init+0x50>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <MX_I2C1_Init+0x50>)
 800290c:	2200      	movs	r2, #0
 800290e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <MX_I2C1_Init+0x50>)
 8002912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <MX_I2C1_Init+0x50>)
 800291a:	2200      	movs	r2, #0
 800291c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <MX_I2C1_Init+0x50>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <MX_I2C1_Init+0x50>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <MX_I2C1_Init+0x50>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002930:	4804      	ldr	r0, [pc, #16]	; (8002944 <MX_I2C1_Init+0x50>)
 8002932:	f002 fbd3 	bl	80050dc <HAL_I2C_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800293c:	f001 fd86 	bl	800444c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200000a8 	.word	0x200000a8
 8002948:	40005400 	.word	0x40005400
 800294c:	000186a0 	.word	0x000186a0

08002950 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002956:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <MX_SPI1_Init+0x68>)
 8002958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <MX_SPI1_Init+0x64>)
 800295c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <MX_SPI1_Init+0x64>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002976:	2200      	movs	r2, #0
 8002978:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <MX_SPI1_Init+0x64>)
 800297c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002980:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002984:	2208      	movs	r2, #8
 8002986:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <MX_SPI1_Init+0x64>)
 800298a:	2200      	movs	r2, #0
 800298c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002990:	2200      	movs	r2, #0
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <MX_SPI1_Init+0x64>)
 8002996:	2200      	movs	r2, #0
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <MX_SPI1_Init+0x64>)
 800299c:	220a      	movs	r2, #10
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029a0:	4804      	ldr	r0, [pc, #16]	; (80029b4 <MX_SPI1_Init+0x64>)
 80029a2:	f004 fcab 	bl	80072fc <HAL_SPI_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029ac:	f001 fd4e 	bl	800444c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200000fc 	.word	0x200000fc
 80029b8:	40013000 	.word	0x40013000

080029bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d0:	463b      	mov	r3, r7
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <MX_TIM2_Init+0x94>)
 80029da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <MX_TIM2_Init+0x94>)
 80029e2:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80029e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <MX_TIM2_Init+0x94>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <MX_TIM2_Init+0x94>)
 80029f0:	220a      	movs	r2, #10
 80029f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <MX_TIM2_Init+0x94>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <MX_TIM2_Init+0x94>)
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a00:	4813      	ldr	r0, [pc, #76]	; (8002a50 <MX_TIM2_Init+0x94>)
 8002a02:	f004 ffe5 	bl	80079d0 <HAL_TIM_Base_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a0c:	f001 fd1e 	bl	800444c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a16:	f107 0308 	add.w	r3, r7, #8
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480c      	ldr	r0, [pc, #48]	; (8002a50 <MX_TIM2_Init+0x94>)
 8002a1e:	f005 f9af 	bl	8007d80 <HAL_TIM_ConfigClockSource>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a28:	f001 fd10 	bl	800444c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a34:	463b      	mov	r3, r7
 8002a36:	4619      	mov	r1, r3
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <MX_TIM2_Init+0x94>)
 8002a3a:	f005 fb81 	bl	8008140 <HAL_TIMEx_MasterConfigSynchronization>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a44:	f001 fd02 	bl	800444c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000154 	.word	0x20000154

08002a54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a5a:	f107 0308 	add.w	r3, r7, #8
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a68:	463b      	mov	r3, r7
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a70:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <MX_TIM3_Init+0x94>)
 8002a72:	4a1e      	ldr	r2, [pc, #120]	; (8002aec <MX_TIM3_Init+0x98>)
 8002a74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <MX_TIM3_Init+0x94>)
 8002a78:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002a7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <MX_TIM3_Init+0x94>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <MX_TIM3_Init+0x94>)
 8002a86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a8c:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <MX_TIM3_Init+0x94>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <MX_TIM3_Init+0x94>)
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a98:	4813      	ldr	r0, [pc, #76]	; (8002ae8 <MX_TIM3_Init+0x94>)
 8002a9a:	f004 ff99 	bl	80079d0 <HAL_TIM_Base_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002aa4:	f001 fcd2 	bl	800444c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480c      	ldr	r0, [pc, #48]	; (8002ae8 <MX_TIM3_Init+0x94>)
 8002ab6:	f005 f963 	bl	8007d80 <HAL_TIM_ConfigClockSource>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ac0:	f001 fcc4 	bl	800444c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002acc:	463b      	mov	r3, r7
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <MX_TIM3_Init+0x94>)
 8002ad2:	f005 fb35 	bl	8008140 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002adc:	f001 fcb6 	bl	800444c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ae0:	bf00      	nop
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	2000019c 	.word	0x2000019c
 8002aec:	40000400 	.word	0x40000400

08002af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <MX_USART1_UART_Init+0x50>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b28:	f005 fb7a 	bl	8008220 <HAL_UART_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b32:	f001 fc8b 	bl	800444c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200001e4 	.word	0x200001e4
 8002b40:	40013800 	.word	0x40013800

08002b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b58:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002b5e:	f043 0310 	orr.w	r3, r3, #16
 8002b62:	6193      	str	r3, [r2, #24]
 8002b64:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b70:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	4a52      	ldr	r2, [pc, #328]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	6193      	str	r3, [r2, #24]
 8002b7c:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b88:	4b4d      	ldr	r3, [pc, #308]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a4c      	ldr	r2, [pc, #304]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4a46      	ldr	r2, [pc, #280]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002ba6:	f043 0308 	orr.w	r3, r3, #8
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <MX_GPIO_Init+0x17c>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bbe:	4841      	ldr	r0, [pc, #260]	; (8002cc4 <MX_GPIO_Init+0x180>)
 8002bc0:	f002 fa5b 	bl	800507a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bca:	483f      	ldr	r0, [pc, #252]	; (8002cc8 <MX_GPIO_Init+0x184>)
 8002bcc:	f002 fa55 	bl	800507a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002bd6:	483d      	ldr	r0, [pc, #244]	; (8002ccc <MX_GPIO_Init+0x188>)
 8002bd8:	f002 fa4f 	bl	800507a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be2:	2301      	movs	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2302      	movs	r3, #2
 8002bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4833      	ldr	r0, [pc, #204]	; (8002cc4 <MX_GPIO_Init+0x180>)
 8002bf6:	f002 f8a5 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERUPT_FROM_RTC_Pin */
  GPIO_InitStruct.Pin = INTERUPT_FROM_RTC_Pin;
 8002bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c00:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <MX_GPIO_Init+0x18c>)
 8002c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERUPT_FROM_RTC_GPIO_Port, &GPIO_InitStruct);
 8002c08:	f107 0310 	add.w	r3, r7, #16
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	482d      	ldr	r0, [pc, #180]	; (8002cc4 <MX_GPIO_Init+0x180>)
 8002c10:	f002 f898 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_4_Pin KEY_3_Pin KEY_2_Pin KEY_1_Pin */
  GPIO_InitStruct.Pin = KEY_4_Pin|KEY_3_Pin|KEY_2_Pin|KEY_1_Pin;
 8002c14:	231e      	movs	r3, #30
 8002c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c18:	4b2e      	ldr	r3, [pc, #184]	; (8002cd4 <MX_GPIO_Init+0x190>)
 8002c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	4619      	mov	r1, r3
 8002c26:	4829      	ldr	r0, [pc, #164]	; (8002ccc <MX_GPIO_Init+0x188>)
 8002c28:	f002 f88c 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c32:	2301      	movs	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	f107 0310 	add.w	r3, r7, #16
 8002c42:	4619      	mov	r1, r3
 8002c44:	4820      	ldr	r0, [pc, #128]	; (8002cc8 <MX_GPIO_Init+0x184>)
 8002c46:	f002 f87d 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8002c4a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c50:	2301      	movs	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4619      	mov	r1, r3
 8002c62:	481a      	ldr	r0, [pc, #104]	; (8002ccc <MX_GPIO_Init+0x188>)
 8002c64:	f002 f86e 	bl	8004d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2105      	movs	r1, #5
 8002c6c:	2007      	movs	r0, #7
 8002c6e:	f001 ff8e 	bl	8004b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c72:	2007      	movs	r0, #7
 8002c74:	f001 ffa7 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2105      	movs	r1, #5
 8002c7c:	2008      	movs	r0, #8
 8002c7e:	f001 ff86 	bl	8004b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c82:	2008      	movs	r0, #8
 8002c84:	f001 ff9f 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2105      	movs	r1, #5
 8002c8c:	2009      	movs	r0, #9
 8002c8e:	f001 ff7e 	bl	8004b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c92:	2009      	movs	r0, #9
 8002c94:	f001 ff97 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2105      	movs	r1, #5
 8002c9c:	200a      	movs	r0, #10
 8002c9e:	f001 ff76 	bl	8004b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ca2:	200a      	movs	r0, #10
 8002ca4:	f001 ff8f 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2105      	movs	r1, #5
 8002cac:	2028      	movs	r0, #40	; 0x28
 8002cae:	f001 ff6e 	bl	8004b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cb2:	2028      	movs	r0, #40	; 0x28
 8002cb4:	f001 ff87 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

}
 8002cb8:	bf00      	nop
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40011000 	.word	0x40011000
 8002cc8:	40010c00 	.word	0x40010c00
 8002ccc:	40010800 	.word	0x40010800
 8002cd0:	10110000 	.word	0x10110000
 8002cd4:	10210000 	.word	0x10210000

08002cd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	for(;;)
	{
	  osDelay(1000);
 8002ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ce4:	f006 f810 	bl	8008d08 <osDelay>
 8002ce8:	e7fa      	b.n	8002ce0 <StartDefaultTask+0x8>
	...

08002cec <start_RTC_DS3231_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_RTC_DS3231_Task */
void start_RTC_DS3231_Task(void *argument)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
//	QUEUE_NEW_RTC QUEUE_NEW_RTC_t;
	_RTC time;

	// Init DS3231 RTC module
	// Turn on interrupt PIN on RTC module every one second
	uint8_t buff = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
	ReadRegister(14, &buff);
 8002cf8:	f107 030f 	add.w	r3, r7, #15
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	200e      	movs	r0, #14
 8002d00:	f7ff fbf2 	bl	80024e8 <ReadRegister>
	buff = buff & 0b11100011;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	f023 031c 	bic.w	r3, r3, #28
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	73fb      	strb	r3, [r7, #15]
	WriteRegister(14, buff);
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	4619      	mov	r1, r3
 8002d12:	200e      	movs	r0, #14
 8002d14:	f7ff fc14 	bl	8002540 <WriteRegister>

	for(;;)
	{
		if(xQueueReceive(new_rtc_queueHandle , &QUEUE_NEW_RTC_t, 0) == pdTRUE)			// Waiting to new rts time and data
 8002d18:	4b54      	ldr	r3, [pc, #336]	; (8002e6c <start_RTC_DS3231_Task+0x180>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4954      	ldr	r1, [pc, #336]	; (8002e70 <start_RTC_DS3231_Task+0x184>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f007 f8af 	bl	8009e84 <xQueueReceive>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d161      	bne.n	8002df0 <start_RTC_DS3231_Task+0x104>
		{
			// Set new time and data
			time.Year = QUEUE_NEW_RTC_t.Year;
 8002d2c:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <start_RTC_DS3231_Task+0x184>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	743b      	strb	r3, [r7, #16]
			time.Month = QUEUE_NEW_RTC_t.Month;
 8002d32:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <start_RTC_DS3231_Task+0x184>)
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	747b      	strb	r3, [r7, #17]
			time.Date = QUEUE_NEW_RTC_t.Date ;
 8002d38:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <start_RTC_DS3231_Task+0x184>)
 8002d3a:	789b      	ldrb	r3, [r3, #2]
 8002d3c:	74bb      	strb	r3, [r7, #18]
			time.DaysOfWeek = QUEUE_NEW_RTC_t.DaysOfWeek;
 8002d3e:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <start_RTC_DS3231_Task+0x184>)
 8002d40:	78db      	ldrb	r3, [r3, #3]
 8002d42:	74fb      	strb	r3, [r7, #19]
			time.Hour = QUEUE_NEW_RTC_t.Hour;
 8002d44:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <start_RTC_DS3231_Task+0x184>)
 8002d46:	791b      	ldrb	r3, [r3, #4]
 8002d48:	753b      	strb	r3, [r7, #20]
			time.Min = QUEUE_NEW_RTC_t.Min;
 8002d4a:	4b49      	ldr	r3, [pc, #292]	; (8002e70 <start_RTC_DS3231_Task+0x184>)
 8002d4c:	795b      	ldrb	r3, [r3, #5]
 8002d4e:	757b      	strb	r3, [r7, #21]
			time.Sec = QUEUE_NEW_RTC_t.Sec;
 8002d50:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <start_RTC_DS3231_Task+0x184>)
 8002d52:	799b      	ldrb	r3, [r3, #6]
 8002d54:	75bb      	strb	r3, [r7, #22]

			if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <start_RTC_DS3231_Task+0x188>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f006 f89b 	bl	8008e98 <osMutexAcquire>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d13e      	bne.n	8002de6 <start_RTC_DS3231_Task+0xfa>
			{
				if(osMutexAcquire (read_data_rts_MutexHandle, 1) == osOK)		// Protest data
 8002d68:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <start_RTC_DS3231_Task+0x18c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f006 f892 	bl	8008e98 <osMutexAcquire>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d130      	bne.n	8002ddc <start_RTC_DS3231_Task+0xf0>
				{
					DS3231_SetTime(&time);
 8002d7a:	f107 0310 	add.w	r3, r7, #16
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fb66 	bl	8002450 <DS3231_SetTime>
					DS3231_GetTime(&time);										// Read new saved date and time from RTS module
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fae5 	bl	8002358 <DS3231_GetTime>

					// Fill in structure of queue
					QUEUE_RTC_t.Year = time.Year;
 8002d8e:	7c3a      	ldrb	r2, [r7, #16]
 8002d90:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002d92:	701a      	strb	r2, [r3, #0]
					QUEUE_RTC_t.Month = time.Month;
 8002d94:	7c7a      	ldrb	r2, [r7, #17]
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002d98:	705a      	strb	r2, [r3, #1]
					QUEUE_RTC_t.Date = time.Date;
 8002d9a:	7cba      	ldrb	r2, [r7, #18]
 8002d9c:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002d9e:	709a      	strb	r2, [r3, #2]
					QUEUE_RTC_t.DaysOfWeek = time.DaysOfWeek;
 8002da0:	7cfa      	ldrb	r2, [r7, #19]
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002da4:	70da      	strb	r2, [r3, #3]
					QUEUE_RTC_t.Hour = time.Hour;
 8002da6:	7d3a      	ldrb	r2, [r7, #20]
 8002da8:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002daa:	711a      	strb	r2, [r3, #4]
					QUEUE_RTC_t.Min = time.Min;
 8002dac:	7d7a      	ldrb	r2, [r7, #21]
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002db0:	715a      	strb	r2, [r3, #5]
					QUEUE_RTC_t.Sec = time.Sec;
 8002db2:	7dba      	ldrb	r2, [r7, #22]
 8002db4:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002db6:	719a      	strb	r2, [r3, #6]

					if(xQueueOverwrite( rtc_queueHandle,  &QUEUE_RTC_t ) != pdPASS)					// Send current time over queue
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <start_RTC_DS3231_Task+0x194>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	492e      	ldr	r1, [pc, #184]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002dc2:	f006 fe3b 	bl	8009a3c <xQueueGenericSend>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d004      	beq.n	8002dd6 <start_RTC_DS3231_Task+0xea>
					// Give back semaphore
					osSemaphoreRelease(LCD_SemHandle);			// Let print time and date on start_LCD_Task
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <start_RTC_DS3231_Task+0x198>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f006 fa11 	bl	80091f8 <osSemaphoreRelease>
					print_first_time_on_lcd_flag = true;		// Set for go print all data on LCD
 8002dd6:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <start_RTC_DS3231_Task+0x19c>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
				}
				osMutexRelease(read_data_rts_MutexHandle);
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <start_RTC_DS3231_Task+0x18c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f006 f8b7 	bl	8008f54 <osMutexRelease>
			}
			osMutexRelease(I2C_MutexHandle);
 8002de6:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <start_RTC_DS3231_Task+0x188>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f006 f8b2 	bl	8008f54 <osMutexRelease>
		}

		if (osSemaphoreAcquire(red_data_fron_rtc_SemHandle, 10) == osOK)		// If was interrupt from RTC PIN module then read data from RTS module
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <start_RTC_DS3231_Task+0x1a0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	210a      	movs	r1, #10
 8002df6:	4618      	mov	r0, r3
 8002df8:	f006 f998 	bl	800912c <osSemaphoreAcquire>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d18a      	bne.n	8002d18 <start_RTC_DS3231_Task+0x2c>
		{
			if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <start_RTC_DS3231_Task+0x188>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2101      	movs	r1, #1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f006 f845 	bl	8008e98 <osMutexAcquire>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d104      	bne.n	8002e1e <start_RTC_DS3231_Task+0x132>
			{
				DS3231_GetTime(&time);
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fa9d 	bl	8002358 <DS3231_GetTime>
			}
			osMutexRelease(I2C_MutexHandle);
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <start_RTC_DS3231_Task+0x188>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f006 f896 	bl	8008f54 <osMutexRelease>

			// Fill in structure of queue
			QUEUE_RTC_t.Year = time.Year;
 8002e28:	7c3a      	ldrb	r2, [r7, #16]
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002e2c:	701a      	strb	r2, [r3, #0]
			QUEUE_RTC_t.Month = time.Month;
 8002e2e:	7c7a      	ldrb	r2, [r7, #17]
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002e32:	705a      	strb	r2, [r3, #1]
			QUEUE_RTC_t.Date = time.Date;
 8002e34:	7cba      	ldrb	r2, [r7, #18]
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002e38:	709a      	strb	r2, [r3, #2]
			QUEUE_RTC_t.DaysOfWeek = time.DaysOfWeek;
 8002e3a:	7cfa      	ldrb	r2, [r7, #19]
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002e3e:	70da      	strb	r2, [r3, #3]
			QUEUE_RTC_t.Hour = time.Hour;
 8002e40:	7d3a      	ldrb	r2, [r7, #20]
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002e44:	711a      	strb	r2, [r3, #4]
			QUEUE_RTC_t.Min = time.Min;
 8002e46:	7d7a      	ldrb	r2, [r7, #21]
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002e4a:	715a      	strb	r2, [r3, #5]
			QUEUE_RTC_t.Sec = time.Sec;
 8002e4c:	7dba      	ldrb	r2, [r7, #22]
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002e50:	719a      	strb	r2, [r3, #6]

			if(xQueueSend(rtc_queueHandle, &QUEUE_RTC_t, 0) != pdPASS)					// Send current time over queue
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <start_RTC_DS3231_Task+0x194>)
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	2300      	movs	r3, #0
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <start_RTC_DS3231_Task+0x190>)
 8002e5c:	f006 fdee 	bl	8009a3c <xQueueGenericSend>
			{
				// ERROR
			}
			// Give semaphore
			osSemaphoreRelease(LCD_SemHandle);		// Let print time and date on start_LCD_Task
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <start_RTC_DS3231_Task+0x198>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f006 f9c7 	bl	80091f8 <osSemaphoreRelease>
		if(xQueueReceive(new_rtc_queueHandle , &QUEUE_NEW_RTC_t, 0) == pdTRUE)			// Waiting to new rts time and data
 8002e6a:	e755      	b.n	8002d18 <start_RTC_DS3231_Task+0x2c>
 8002e6c:	20000364 	.word	0x20000364
 8002e70:	20000474 	.word	0x20000474
 8002e74:	2000044c 	.word	0x2000044c
 8002e78:	20000450 	.word	0x20000450
 8002e7c:	20000460 	.word	0x20000460
 8002e80:	20000308 	.word	0x20000308
 8002e84:	20000454 	.word	0x20000454
 8002e88:	20000004 	.word	0x20000004
 8002e8c:	2000045c 	.word	0x2000045c

08002e90 <start_BPE280_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_BPE280_Task */
void start_BPE280_Task(void *argument)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b094      	sub	sp, #80	; 0x50
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	//QUEUE_BME280 QUEUE_BME280_t;
	BMP280_HandleTypedef bmp280;
	float pressure, temperature, humidity;

	// Init BME280
	if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)				// Protest I2C
 8002e98:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <start_BPE280_Task+0xe0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f005 fffa 	bl	8008e98 <osMutexAcquire>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d122      	bne.n	8002ef0 <start_BPE280_Task+0x60>
	{
		bmp280_init_default_params(&bmp280.params);
 8002eaa:	f107 0314 	add.w	r3, r7, #20
 8002eae:	332c      	adds	r3, #44	; 0x2c
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fc19 	bl	80016e8 <bmp280_init_default_params>
		bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002eb6:	2376      	movs	r3, #118	; 0x76
 8002eb8:	873b      	strh	r3, [r7, #56]	; 0x38
		bmp280.i2c = &hi2c1;
 8002eba:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <start_BPE280_Task+0xe4>)
 8002ebc:	63fb      	str	r3, [r7, #60]	; 0x3c

		if(bmp280_init(&bmp280, &bmp280.params) != true)
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002ec6:	f107 0314 	add.w	r3, r7, #20
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fd84 	bl	80019da <bmp280_init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d000      	beq.n	8002ee0 <start_BPE280_Task+0x50>
		{
			while(1){}   								// ERROR
 8002ede:	e7fe      	b.n	8002ede <start_BPE280_Task+0x4e>
		}

		bool bme280p = bmp280.id == BME280_CHIP_ID;
 8002ee0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ee4:	2b60      	cmp	r3, #96	; 0x60
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}
	osMutexRelease(I2C_MutexHandle);
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <start_BPE280_Task+0xe0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f006 f82d 	bl	8008f54 <osMutexRelease>

	for(;;)
	{
		if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)						// Protest I2C
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <start_BPE280_Task+0xe0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2101      	movs	r1, #1
 8002f00:	4618      	mov	r0, r3
 8002f02:	f005 ffc9 	bl	8008e98 <osMutexAcquire>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d126      	bne.n	8002f5a <start_BPE280_Task+0xca>
		{
			if((bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) != true)
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	f107 0210 	add.w	r2, r7, #16
 8002f14:	f107 010c 	add.w	r1, r7, #12
 8002f18:	f107 0014 	add.w	r0, r7, #20
 8002f1c:	f7ff f9c0 	bl	80022a0 <bmp280_read_float>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f083 0301 	eor.w	r3, r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d000      	beq.n	8002f2e <start_BPE280_Task+0x9e>
			{
				while(1){}								// ERROR
 8002f2c:	e7fe      	b.n	8002f2c <start_BPE280_Task+0x9c>
			}
			else										// IF all okay. Send data into QUEUE to the main task
			{
				// Fill in fields of struct
				QUEUE_BME280_t.temperature = temperature;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <start_BPE280_Task+0xe8>)
 8002f32:	6053      	str	r3, [r2, #4]
				QUEUE_BME280_t.humidity = humidity;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <start_BPE280_Task+0xe8>)
 8002f38:	6093      	str	r3, [r2, #8]
				QUEUE_BME280_t.pressure = pressure;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <start_BPE280_Task+0xe8>)
 8002f3e:	6013      	str	r3, [r2, #0]

				int status_queue = xQueueSend(THPQueueHandle, &QUEUE_BME280_t, 0);		// Send data into queue
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <start_BPE280_Task+0xec>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	2200      	movs	r2, #0
 8002f48:	490b      	ldr	r1, [pc, #44]	; (8002f78 <start_BPE280_Task+0xe8>)
 8002f4a:	f006 fd77 	bl	8009a3c <xQueueGenericSend>
 8002f4e:	64b8      	str	r0, [r7, #72]	; 0x48
				if(status_queue != pdPASS)
				{
					// ERROR
				}
				// Give semaphore
				osSemaphoreRelease(LCD_SemHandle);		// Let print T, H and P on start_LCD_Task
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <start_BPE280_Task+0xf0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f006 f94f 	bl	80091f8 <osSemaphoreRelease>
			}
		}
		osMutexRelease(I2C_MutexHandle);
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <start_BPE280_Task+0xe0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f005 fff8 	bl	8008f54 <osMutexRelease>

		osDelay(5000);
 8002f64:	f241 3088 	movw	r0, #5000	; 0x1388
 8002f68:	f005 fece 	bl	8008d08 <osDelay>
		if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)						// Protest I2C
 8002f6c:	e7c5      	b.n	8002efa <start_BPE280_Task+0x6a>
 8002f6e:	bf00      	nop
 8002f70:	2000044c 	.word	0x2000044c
 8002f74:	200000a8 	.word	0x200000a8
 8002f78:	20000468 	.word	0x20000468
 8002f7c:	2000029c 	.word	0x2000029c
 8002f80:	20000454 	.word	0x20000454

08002f84 <start_SET_RTS_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_SET_RTS_TASK */
void start_SET_RTS_TASK(void *argument)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_SET_RTS_TASK */
  /* Infinite loop */
	for(;;)
	{
		uint16_t pressed_key, status_queue = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	81fb      	strh	r3, [r7, #14]

		if(osSemaphoreAcquire(set_rts_val_SemHandle, 10) == osOK)					// Waiting on the press any button
 8002f90:	4b82      	ldr	r3, [pc, #520]	; (800319c <start_SET_RTS_TASK+0x218>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	210a      	movs	r1, #10
 8002f96:	4618      	mov	r0, r3
 8002f98:	f006 f8c8 	bl	800912c <osSemaphoreAcquire>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f4      	bne.n	8002f8c <start_SET_RTS_TASK+0x8>
		{
			if (xQueueReceive( buttonQueueHandle , &pressed_key, 0 ) == pdTRUE)		// Read witch button was pressed
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <start_SET_RTS_TASK+0x21c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f107 010c 	add.w	r1, r7, #12
 8002faa:	2200      	movs	r2, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f006 ff69 	bl	8009e84 <xQueueReceive>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d1e9      	bne.n	8002f8c <start_SET_RTS_TASK+0x8>
				static int8_t day_of_week = 1;
				static int8_t hour = 1;
				static int8_t minute = 1;
				static int8_t second = 1;

				osThreadSuspend(RTC_DS3231_TaskHandle);								// Stop task, and stop print RTC data on LCD
 8002fb8:	4b7a      	ldr	r3, [pc, #488]	; (80031a4 <start_SET_RTS_TASK+0x220>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f005 fe3b 	bl	8008c38 <osThreadSuspend>
				osThreadSuspend(BPE280_TaskHandle);									// Stop task, and stop print BME280 data on LCD
 8002fc2:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <start_SET_RTS_TASK+0x224>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f005 fe36 	bl	8008c38 <osThreadSuspend>

				QUEUE_RTC_VAL_t.new_value = 0;
 8002fcc:	4b77      	ldr	r3, [pc, #476]	; (80031ac <start_SET_RTS_TASK+0x228>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
				memset(QUEUE_RTC_VAL_t.name, 0, sizeof(QUEUE_RTC_VAL_t.name));
 8002fd2:	2214      	movs	r2, #20
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4876      	ldr	r0, [pc, #472]	; (80031b0 <start_SET_RTS_TASK+0x22c>)
 8002fd8:	f009 fbb2 	bl	800c740 <memset>

				switch (setet_type)
 8002fdc:	4b75      	ldr	r3, [pc, #468]	; (80031b4 <start_SET_RTS_TASK+0x230>)
 8002fde:	f993 3000 	ldrsb.w	r3, [r3]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	2b07      	cmp	r3, #7
 8002fe6:	f200 833a 	bhi.w	800365e <start_SET_RTS_TASK+0x6da>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <start_SET_RTS_TASK+0x6c>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003011 	.word	0x08003011
 8002ff4:	080030d7 	.word	0x080030d7
 8002ff8:	080031d5 	.word	0x080031d5
 8002ffc:	0800329b 	.word	0x0800329b
 8003000:	08003365 	.word	0x08003365
 8003004:	0800345d 	.word	0x0800345d
 8003008:	08003525 	.word	0x08003525
 800300c:	080035eb 	.word	0x080035eb
				{
					case 1:
						// set years
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 8003010:	2214      	movs	r2, #20
 8003012:	2100      	movs	r1, #0
 8003014:	4866      	ldr	r0, [pc, #408]	; (80031b0 <start_SET_RTS_TASK+0x22c>)
 8003016:	f009 fb93 	bl	800c740 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Year: ");			// Set the setings value
 800301a:	4865      	ldr	r0, [pc, #404]	; (80031b0 <start_SET_RTS_TASK+0x22c>)
 800301c:	f7fd f898 	bl	8000150 <strlen>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	4b62      	ldr	r3, [pc, #392]	; (80031b0 <start_SET_RTS_TASK+0x22c>)
 8003026:	4413      	add	r3, r2
 8003028:	4a63      	ldr	r2, [pc, #396]	; (80031b8 <start_SET_RTS_TASK+0x234>)
 800302a:	6810      	ldr	r0, [r2, #0]
 800302c:	6018      	str	r0, [r3, #0]
 800302e:	8891      	ldrh	r1, [r2, #4]
 8003030:	7992      	ldrb	r2, [r2, #6]
 8003032:	8099      	strh	r1, [r3, #4]
 8003034:	719a      	strb	r2, [r3, #6]

						if(pressed_key == 2)
 8003036:	89bb      	ldrh	r3, [r7, #12]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d110      	bne.n	800305e <start_SET_RTS_TASK+0xda>
						{
							yaer--;
 800303c:	4b5f      	ldr	r3, [pc, #380]	; (80031bc <start_SET_RTS_TASK+0x238>)
 800303e:	f993 3000 	ldrsb.w	r3, [r3]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	b25a      	sxtb	r2, r3
 800304a:	4b5c      	ldr	r3, [pc, #368]	; (80031bc <start_SET_RTS_TASK+0x238>)
 800304c:	701a      	strb	r2, [r3, #0]
							if(yaer < 0)
 800304e:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <start_SET_RTS_TASK+0x238>)
 8003050:	f993 3000 	ldrsb.w	r3, [r3]
 8003054:	2b00      	cmp	r3, #0
 8003056:	da02      	bge.n	800305e <start_SET_RTS_TASK+0xda>
							{
								yaer = 99;
 8003058:	4b58      	ldr	r3, [pc, #352]	; (80031bc <start_SET_RTS_TASK+0x238>)
 800305a:	2263      	movs	r2, #99	; 0x63
 800305c:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 800305e:	89bb      	ldrh	r3, [r7, #12]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d110      	bne.n	8003086 <start_SET_RTS_TASK+0x102>
						{
							yaer++;
 8003064:	4b55      	ldr	r3, [pc, #340]	; (80031bc <start_SET_RTS_TASK+0x238>)
 8003066:	f993 3000 	ldrsb.w	r3, [r3]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	b25a      	sxtb	r2, r3
 8003072:	4b52      	ldr	r3, [pc, #328]	; (80031bc <start_SET_RTS_TASK+0x238>)
 8003074:	701a      	strb	r2, [r3, #0]
							if(yaer > 99)
 8003076:	4b51      	ldr	r3, [pc, #324]	; (80031bc <start_SET_RTS_TASK+0x238>)
 8003078:	f993 3000 	ldrsb.w	r3, [r3]
 800307c:	2b63      	cmp	r3, #99	; 0x63
 800307e:	dd02      	ble.n	8003086 <start_SET_RTS_TASK+0x102>
							{
								yaer = 0;
 8003080:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <start_SET_RTS_TASK+0x238>)
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = yaer;
 8003086:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <start_SET_RTS_TASK+0x238>)
 8003088:	f993 3000 	ldrsb.w	r3, [r3]
 800308c:	461a      	mov	r2, r3
 800308e:	4b47      	ldr	r3, [pc, #284]	; (80031ac <start_SET_RTS_TASK+0x228>)
 8003090:	601a      	str	r2, [r3, #0]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);		// Save new value on LCD
 8003092:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <start_SET_RTS_TASK+0x23c>)
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	2300      	movs	r3, #0
 8003098:	2200      	movs	r2, #0
 800309a:	4944      	ldr	r1, [pc, #272]	; (80031ac <start_SET_RTS_TASK+0x228>)
 800309c:	f006 fcce 	bl	8009a3c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);							// Let show new value on LCD
 80030a0:	4b48      	ldr	r3, [pc, #288]	; (80031c4 <start_SET_RTS_TASK+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f006 f8a7 	bl	80091f8 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 80030aa:	89bb      	ldrh	r3, [r7, #12]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	f040 82c9 	bne.w	8003644 <start_SET_RTS_TASK+0x6c0>
						{
							QUEUE_NEW_RTC_t.Year = QUEUE_RTC_VAL_t.new_value;		// Save new selected value in queue for rts
 80030b2:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <start_SET_RTS_TASK+0x228>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <start_SET_RTS_TASK+0x244>)
 80030ba:	701a      	strb	r2, [r3, #0]
							setet_type++;											// Go to next case
 80030bc:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <start_SET_RTS_TASK+0x230>)
 80030be:	f993 3000 	ldrsb.w	r3, [r3]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	b25a      	sxtb	r2, r3
 80030ca:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <start_SET_RTS_TASK+0x230>)
 80030cc:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;							// init next value
 80030ce:	4b37      	ldr	r3, [pc, #220]	; (80031ac <start_SET_RTS_TASK+0x228>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
						}
						break;
 80030d4:	e2b6      	b.n	8003644 <start_SET_RTS_TASK+0x6c0>

					case 2:
						// set month
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 80030d6:	2214      	movs	r2, #20
 80030d8:	2100      	movs	r1, #0
 80030da:	4835      	ldr	r0, [pc, #212]	; (80031b0 <start_SET_RTS_TASK+0x22c>)
 80030dc:	f009 fb30 	bl	800c740 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Month: ");			// Set the setings value
 80030e0:	4833      	ldr	r0, [pc, #204]	; (80031b0 <start_SET_RTS_TASK+0x22c>)
 80030e2:	f7fd f835 	bl	8000150 <strlen>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <start_SET_RTS_TASK+0x22c>)
 80030ec:	4413      	add	r3, r2
 80030ee:	4937      	ldr	r1, [pc, #220]	; (80031cc <start_SET_RTS_TASK+0x248>)
 80030f0:	461a      	mov	r2, r3
 80030f2:	460b      	mov	r3, r1
 80030f4:	cb03      	ldmia	r3!, {r0, r1}
 80030f6:	6010      	str	r0, [r2, #0]
 80030f8:	6051      	str	r1, [r2, #4]

						if(pressed_key == 2)
 80030fa:	89bb      	ldrh	r3, [r7, #12]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d110      	bne.n	8003122 <start_SET_RTS_TASK+0x19e>
						{
							month--;
 8003100:	4b33      	ldr	r3, [pc, #204]	; (80031d0 <start_SET_RTS_TASK+0x24c>)
 8003102:	f993 3000 	ldrsb.w	r3, [r3]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	b25a      	sxtb	r2, r3
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <start_SET_RTS_TASK+0x24c>)
 8003110:	701a      	strb	r2, [r3, #0]
							if(month < 1)
 8003112:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <start_SET_RTS_TASK+0x24c>)
 8003114:	f993 3000 	ldrsb.w	r3, [r3]
 8003118:	2b00      	cmp	r3, #0
 800311a:	dc02      	bgt.n	8003122 <start_SET_RTS_TASK+0x19e>
							{
								month = 12;
 800311c:	4b2c      	ldr	r3, [pc, #176]	; (80031d0 <start_SET_RTS_TASK+0x24c>)
 800311e:	220c      	movs	r2, #12
 8003120:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 8003122:	89bb      	ldrh	r3, [r7, #12]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d110      	bne.n	800314a <start_SET_RTS_TASK+0x1c6>
						{
							month++;
 8003128:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <start_SET_RTS_TASK+0x24c>)
 800312a:	f993 3000 	ldrsb.w	r3, [r3]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3301      	adds	r3, #1
 8003132:	b2db      	uxtb	r3, r3
 8003134:	b25a      	sxtb	r2, r3
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <start_SET_RTS_TASK+0x24c>)
 8003138:	701a      	strb	r2, [r3, #0]
							if(month > 12)
 800313a:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <start_SET_RTS_TASK+0x24c>)
 800313c:	f993 3000 	ldrsb.w	r3, [r3]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	dd02      	ble.n	800314a <start_SET_RTS_TASK+0x1c6>
							{
								month = 1;
 8003144:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <start_SET_RTS_TASK+0x24c>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = month;
 800314a:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <start_SET_RTS_TASK+0x24c>)
 800314c:	f993 3000 	ldrsb.w	r3, [r3]
 8003150:	461a      	mov	r2, r3
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <start_SET_RTS_TASK+0x228>)
 8003154:	601a      	str	r2, [r3, #0]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <start_SET_RTS_TASK+0x23c>)
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	2300      	movs	r3, #0
 800315c:	2200      	movs	r2, #0
 800315e:	4913      	ldr	r1, [pc, #76]	; (80031ac <start_SET_RTS_TASK+0x228>)
 8003160:	f006 fc6c 	bl	8009a3c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <start_SET_RTS_TASK+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f006 f845 	bl	80091f8 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 800316e:	89bb      	ldrh	r3, [r7, #12]
 8003170:	2b04      	cmp	r3, #4
 8003172:	f040 8269 	bne.w	8003648 <start_SET_RTS_TASK+0x6c4>
						{
							QUEUE_NEW_RTC_t.Month = QUEUE_RTC_VAL_t.new_value;
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <start_SET_RTS_TASK+0x228>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <start_SET_RTS_TASK+0x244>)
 800317e:	705a      	strb	r2, [r3, #1]
							setet_type++;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <start_SET_RTS_TASK+0x230>)
 8003182:	f993 3000 	ldrsb.w	r3, [r3]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	3301      	adds	r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	b25a      	sxtb	r2, r3
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <start_SET_RTS_TASK+0x230>)
 8003190:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <start_SET_RTS_TASK+0x228>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]
						}
						break;
 8003198:	e256      	b.n	8003648 <start_SET_RTS_TASK+0x6c4>
 800319a:	bf00      	nop
 800319c:	20000458 	.word	0x20000458
 80031a0:	20000298 	.word	0x20000298
 80031a4:	2000022c 	.word	0x2000022c
 80031a8:	20000230 	.word	0x20000230
 80031ac:	2000047c 	.word	0x2000047c
 80031b0:	20000480 	.word	0x20000480
 80031b4:	20000006 	.word	0x20000006
 80031b8:	0800d158 	.word	0x0800d158
 80031bc:	20000007 	.word	0x20000007
 80031c0:	200003c8 	.word	0x200003c8
 80031c4:	20000454 	.word	0x20000454
 80031c8:	20000474 	.word	0x20000474
 80031cc:	0800d160 	.word	0x0800d160
 80031d0:	20000008 	.word	0x20000008

					case 3:
						// set Date
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 80031d4:	2214      	movs	r2, #20
 80031d6:	2100      	movs	r1, #0
 80031d8:	4894      	ldr	r0, [pc, #592]	; (800342c <start_SET_RTS_TASK+0x4a8>)
 80031da:	f009 fab1 	bl	800c740 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Date: ");			// Set the setings value
 80031de:	4893      	ldr	r0, [pc, #588]	; (800342c <start_SET_RTS_TASK+0x4a8>)
 80031e0:	f7fc ffb6 	bl	8000150 <strlen>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b90      	ldr	r3, [pc, #576]	; (800342c <start_SET_RTS_TASK+0x4a8>)
 80031ea:	4413      	add	r3, r2
 80031ec:	4a90      	ldr	r2, [pc, #576]	; (8003430 <start_SET_RTS_TASK+0x4ac>)
 80031ee:	6810      	ldr	r0, [r2, #0]
 80031f0:	6018      	str	r0, [r3, #0]
 80031f2:	8891      	ldrh	r1, [r2, #4]
 80031f4:	7992      	ldrb	r2, [r2, #6]
 80031f6:	8099      	strh	r1, [r3, #4]
 80031f8:	719a      	strb	r2, [r3, #6]

						if(pressed_key == 2)
 80031fa:	89bb      	ldrh	r3, [r7, #12]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d110      	bne.n	8003222 <start_SET_RTS_TASK+0x29e>
						{
							date--;
 8003200:	4b8c      	ldr	r3, [pc, #560]	; (8003434 <start_SET_RTS_TASK+0x4b0>)
 8003202:	f993 3000 	ldrsb.w	r3, [r3]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b2db      	uxtb	r3, r3
 800320c:	b25a      	sxtb	r2, r3
 800320e:	4b89      	ldr	r3, [pc, #548]	; (8003434 <start_SET_RTS_TASK+0x4b0>)
 8003210:	701a      	strb	r2, [r3, #0]
							if(date < 1)
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <start_SET_RTS_TASK+0x4b0>)
 8003214:	f993 3000 	ldrsb.w	r3, [r3]
 8003218:	2b00      	cmp	r3, #0
 800321a:	dc02      	bgt.n	8003222 <start_SET_RTS_TASK+0x29e>
							{
								date = 31;
 800321c:	4b85      	ldr	r3, [pc, #532]	; (8003434 <start_SET_RTS_TASK+0x4b0>)
 800321e:	221f      	movs	r2, #31
 8003220:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 8003222:	89bb      	ldrh	r3, [r7, #12]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d110      	bne.n	800324a <start_SET_RTS_TASK+0x2c6>
						{
							date++;
 8003228:	4b82      	ldr	r3, [pc, #520]	; (8003434 <start_SET_RTS_TASK+0x4b0>)
 800322a:	f993 3000 	ldrsb.w	r3, [r3]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3301      	adds	r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	b25a      	sxtb	r2, r3
 8003236:	4b7f      	ldr	r3, [pc, #508]	; (8003434 <start_SET_RTS_TASK+0x4b0>)
 8003238:	701a      	strb	r2, [r3, #0]
							if(date > 31)
 800323a:	4b7e      	ldr	r3, [pc, #504]	; (8003434 <start_SET_RTS_TASK+0x4b0>)
 800323c:	f993 3000 	ldrsb.w	r3, [r3]
 8003240:	2b1f      	cmp	r3, #31
 8003242:	dd02      	ble.n	800324a <start_SET_RTS_TASK+0x2c6>
							{
								date = 1;
 8003244:	4b7b      	ldr	r3, [pc, #492]	; (8003434 <start_SET_RTS_TASK+0x4b0>)
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = date;
 800324a:	4b7a      	ldr	r3, [pc, #488]	; (8003434 <start_SET_RTS_TASK+0x4b0>)
 800324c:	f993 3000 	ldrsb.w	r3, [r3]
 8003250:	461a      	mov	r2, r3
 8003252:	4b79      	ldr	r3, [pc, #484]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 8003254:	601a      	str	r2, [r3, #0]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 8003256:	4b79      	ldr	r3, [pc, #484]	; (800343c <start_SET_RTS_TASK+0x4b8>)
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	2300      	movs	r3, #0
 800325c:	2200      	movs	r2, #0
 800325e:	4976      	ldr	r1, [pc, #472]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 8003260:	f006 fbec 	bl	8009a3c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 8003264:	4b76      	ldr	r3, [pc, #472]	; (8003440 <start_SET_RTS_TASK+0x4bc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f005 ffc5 	bl	80091f8 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 800326e:	89bb      	ldrh	r3, [r7, #12]
 8003270:	2b04      	cmp	r3, #4
 8003272:	f040 81eb 	bne.w	800364c <start_SET_RTS_TASK+0x6c8>
						{
							QUEUE_NEW_RTC_t.Date = QUEUE_RTC_VAL_t.new_value;
 8003276:	4b70      	ldr	r3, [pc, #448]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	4b71      	ldr	r3, [pc, #452]	; (8003444 <start_SET_RTS_TASK+0x4c0>)
 800327e:	709a      	strb	r2, [r3, #2]
							setet_type++;
 8003280:	4b71      	ldr	r3, [pc, #452]	; (8003448 <start_SET_RTS_TASK+0x4c4>)
 8003282:	f993 3000 	ldrsb.w	r3, [r3]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3301      	adds	r3, #1
 800328a:	b2db      	uxtb	r3, r3
 800328c:	b25a      	sxtb	r2, r3
 800328e:	4b6e      	ldr	r3, [pc, #440]	; (8003448 <start_SET_RTS_TASK+0x4c4>)
 8003290:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 8003292:	4b69      	ldr	r3, [pc, #420]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
						}
						break;
 8003298:	e1d8      	b.n	800364c <start_SET_RTS_TASK+0x6c8>

					case 4:
						// set DaysOfWeek
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 800329a:	2214      	movs	r2, #20
 800329c:	2100      	movs	r1, #0
 800329e:	4863      	ldr	r0, [pc, #396]	; (800342c <start_SET_RTS_TASK+0x4a8>)
 80032a0:	f009 fa4e 	bl	800c740 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Day of week: ");			// Set the setings value
 80032a4:	4861      	ldr	r0, [pc, #388]	; (800342c <start_SET_RTS_TASK+0x4a8>)
 80032a6:	f7fc ff53 	bl	8000150 <strlen>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b5f      	ldr	r3, [pc, #380]	; (800342c <start_SET_RTS_TASK+0x4a8>)
 80032b0:	4413      	add	r3, r2
 80032b2:	4a66      	ldr	r2, [pc, #408]	; (800344c <start_SET_RTS_TASK+0x4c8>)
 80032b4:	461c      	mov	r4, r3
 80032b6:	4613      	mov	r3, r2
 80032b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032ba:	6020      	str	r0, [r4, #0]
 80032bc:	6061      	str	r1, [r4, #4]
 80032be:	60a2      	str	r2, [r4, #8]
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	81a3      	strh	r3, [r4, #12]

						if(pressed_key == 2)
 80032c4:	89bb      	ldrh	r3, [r7, #12]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d110      	bne.n	80032ec <start_SET_RTS_TASK+0x368>
						{
							day_of_week--;
 80032ca:	4b61      	ldr	r3, [pc, #388]	; (8003450 <start_SET_RTS_TASK+0x4cc>)
 80032cc:	f993 3000 	ldrsb.w	r3, [r3]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	b25a      	sxtb	r2, r3
 80032d8:	4b5d      	ldr	r3, [pc, #372]	; (8003450 <start_SET_RTS_TASK+0x4cc>)
 80032da:	701a      	strb	r2, [r3, #0]
							if(day_of_week < 1)
 80032dc:	4b5c      	ldr	r3, [pc, #368]	; (8003450 <start_SET_RTS_TASK+0x4cc>)
 80032de:	f993 3000 	ldrsb.w	r3, [r3]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	dc02      	bgt.n	80032ec <start_SET_RTS_TASK+0x368>
							{
								day_of_week = 7;
 80032e6:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <start_SET_RTS_TASK+0x4cc>)
 80032e8:	2207      	movs	r2, #7
 80032ea:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 80032ec:	89bb      	ldrh	r3, [r7, #12]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d110      	bne.n	8003314 <start_SET_RTS_TASK+0x390>
						{
							day_of_week++;
 80032f2:	4b57      	ldr	r3, [pc, #348]	; (8003450 <start_SET_RTS_TASK+0x4cc>)
 80032f4:	f993 3000 	ldrsb.w	r3, [r3]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	b25a      	sxtb	r2, r3
 8003300:	4b53      	ldr	r3, [pc, #332]	; (8003450 <start_SET_RTS_TASK+0x4cc>)
 8003302:	701a      	strb	r2, [r3, #0]
							if(day_of_week > 7)
 8003304:	4b52      	ldr	r3, [pc, #328]	; (8003450 <start_SET_RTS_TASK+0x4cc>)
 8003306:	f993 3000 	ldrsb.w	r3, [r3]
 800330a:	2b07      	cmp	r3, #7
 800330c:	dd02      	ble.n	8003314 <start_SET_RTS_TASK+0x390>
							{
								day_of_week = 1;
 800330e:	4b50      	ldr	r3, [pc, #320]	; (8003450 <start_SET_RTS_TASK+0x4cc>)
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = day_of_week;
 8003314:	4b4e      	ldr	r3, [pc, #312]	; (8003450 <start_SET_RTS_TASK+0x4cc>)
 8003316:	f993 3000 	ldrsb.w	r3, [r3]
 800331a:	461a      	mov	r2, r3
 800331c:	4b46      	ldr	r3, [pc, #280]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 800331e:	601a      	str	r2, [r3, #0]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 8003320:	4b46      	ldr	r3, [pc, #280]	; (800343c <start_SET_RTS_TASK+0x4b8>)
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	2300      	movs	r3, #0
 8003326:	2200      	movs	r2, #0
 8003328:	4943      	ldr	r1, [pc, #268]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 800332a:	f006 fb87 	bl	8009a3c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 800332e:	4b44      	ldr	r3, [pc, #272]	; (8003440 <start_SET_RTS_TASK+0x4bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f005 ff60 	bl	80091f8 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 8003338:	89bb      	ldrh	r3, [r7, #12]
 800333a:	2b04      	cmp	r3, #4
 800333c:	f040 8188 	bne.w	8003650 <start_SET_RTS_TASK+0x6cc>
						{
							QUEUE_NEW_RTC_t.DaysOfWeek = QUEUE_RTC_VAL_t.new_value;
 8003340:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <start_SET_RTS_TASK+0x4c0>)
 8003348:	70da      	strb	r2, [r3, #3]
							setet_type++;
 800334a:	4b3f      	ldr	r3, [pc, #252]	; (8003448 <start_SET_RTS_TASK+0x4c4>)
 800334c:	f993 3000 	ldrsb.w	r3, [r3]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	3301      	adds	r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	b25a      	sxtb	r2, r3
 8003358:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <start_SET_RTS_TASK+0x4c4>)
 800335a:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 800335c:	4b36      	ldr	r3, [pc, #216]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]
						}
						break;
 8003362:	e175      	b.n	8003650 <start_SET_RTS_TASK+0x6cc>

					case 5:
						// set Hour
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 8003364:	2214      	movs	r2, #20
 8003366:	2100      	movs	r1, #0
 8003368:	4830      	ldr	r0, [pc, #192]	; (800342c <start_SET_RTS_TASK+0x4a8>)
 800336a:	f009 f9e9 	bl	800c740 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Hour: ");			// Set the setings value
 800336e:	482f      	ldr	r0, [pc, #188]	; (800342c <start_SET_RTS_TASK+0x4a8>)
 8003370:	f7fc feee 	bl	8000150 <strlen>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	4b2c      	ldr	r3, [pc, #176]	; (800342c <start_SET_RTS_TASK+0x4a8>)
 800337a:	4413      	add	r3, r2
 800337c:	4a35      	ldr	r2, [pc, #212]	; (8003454 <start_SET_RTS_TASK+0x4d0>)
 800337e:	6810      	ldr	r0, [r2, #0]
 8003380:	6018      	str	r0, [r3, #0]
 8003382:	8891      	ldrh	r1, [r2, #4]
 8003384:	7992      	ldrb	r2, [r2, #6]
 8003386:	8099      	strh	r1, [r3, #4]
 8003388:	719a      	strb	r2, [r3, #6]

						if(pressed_key == 2)
 800338a:	89bb      	ldrh	r3, [r7, #12]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d110      	bne.n	80033b2 <start_SET_RTS_TASK+0x42e>
						{
							hour--;
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <start_SET_RTS_TASK+0x4d4>)
 8003392:	f993 3000 	ldrsb.w	r3, [r3]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	b25a      	sxtb	r2, r3
 800339e:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <start_SET_RTS_TASK+0x4d4>)
 80033a0:	701a      	strb	r2, [r3, #0]

							if(hour < 0)
 80033a2:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <start_SET_RTS_TASK+0x4d4>)
 80033a4:	f993 3000 	ldrsb.w	r3, [r3]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da02      	bge.n	80033b2 <start_SET_RTS_TASK+0x42e>
							{
								hour = 24;
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <start_SET_RTS_TASK+0x4d4>)
 80033ae:	2218      	movs	r2, #24
 80033b0:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 80033b2:	89bb      	ldrh	r3, [r7, #12]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d110      	bne.n	80033da <start_SET_RTS_TASK+0x456>
						{
							hour++;
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <start_SET_RTS_TASK+0x4d4>)
 80033ba:	f993 3000 	ldrsb.w	r3, [r3]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	b25a      	sxtb	r2, r3
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <start_SET_RTS_TASK+0x4d4>)
 80033c8:	701a      	strb	r2, [r3, #0]
							if(hour > 24)
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <start_SET_RTS_TASK+0x4d4>)
 80033cc:	f993 3000 	ldrsb.w	r3, [r3]
 80033d0:	2b18      	cmp	r3, #24
 80033d2:	dd02      	ble.n	80033da <start_SET_RTS_TASK+0x456>
							{
								hour = 0;
 80033d4:	4b20      	ldr	r3, [pc, #128]	; (8003458 <start_SET_RTS_TASK+0x4d4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = hour;
 80033da:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <start_SET_RTS_TASK+0x4d4>)
 80033dc:	f993 3000 	ldrsb.w	r3, [r3]
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 80033e4:	601a      	str	r2, [r3, #0]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <start_SET_RTS_TASK+0x4b8>)
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	2200      	movs	r2, #0
 80033ee:	4912      	ldr	r1, [pc, #72]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 80033f0:	f006 fb24 	bl	8009a3c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <start_SET_RTS_TASK+0x4bc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f005 fefd 	bl	80091f8 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 80033fe:	89bb      	ldrh	r3, [r7, #12]
 8003400:	2b04      	cmp	r3, #4
 8003402:	f040 8127 	bne.w	8003654 <start_SET_RTS_TASK+0x6d0>
						{
							QUEUE_NEW_RTC_t.Hour = QUEUE_RTC_VAL_t.new_value;
 8003406:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <start_SET_RTS_TASK+0x4c0>)
 800340e:	711a      	strb	r2, [r3, #4]
							setet_type++;
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <start_SET_RTS_TASK+0x4c4>)
 8003412:	f993 3000 	ldrsb.w	r3, [r3]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	3301      	adds	r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	b25a      	sxtb	r2, r3
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <start_SET_RTS_TASK+0x4c4>)
 8003420:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <start_SET_RTS_TASK+0x4b4>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]
						}
						break;
 8003428:	e114      	b.n	8003654 <start_SET_RTS_TASK+0x6d0>
 800342a:	bf00      	nop
 800342c:	20000480 	.word	0x20000480
 8003430:	0800d168 	.word	0x0800d168
 8003434:	20000009 	.word	0x20000009
 8003438:	2000047c 	.word	0x2000047c
 800343c:	200003c8 	.word	0x200003c8
 8003440:	20000454 	.word	0x20000454
 8003444:	20000474 	.word	0x20000474
 8003448:	20000006 	.word	0x20000006
 800344c:	0800d170 	.word	0x0800d170
 8003450:	2000000a 	.word	0x2000000a
 8003454:	0800d180 	.word	0x0800d180
 8003458:	2000000b 	.word	0x2000000b

					case 6:
						// set Minutes
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 800345c:	2214      	movs	r2, #20
 800345e:	2100      	movs	r1, #0
 8003460:	4881      	ldr	r0, [pc, #516]	; (8003668 <start_SET_RTS_TASK+0x6e4>)
 8003462:	f009 f96d 	bl	800c740 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Minute: ");			// Set the setings value
 8003466:	4880      	ldr	r0, [pc, #512]	; (8003668 <start_SET_RTS_TASK+0x6e4>)
 8003468:	f7fc fe72 	bl	8000150 <strlen>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	4b7d      	ldr	r3, [pc, #500]	; (8003668 <start_SET_RTS_TASK+0x6e4>)
 8003472:	4413      	add	r3, r2
 8003474:	497d      	ldr	r1, [pc, #500]	; (800366c <start_SET_RTS_TASK+0x6e8>)
 8003476:	461a      	mov	r2, r3
 8003478:	460b      	mov	r3, r1
 800347a:	cb03      	ldmia	r3!, {r0, r1}
 800347c:	6010      	str	r0, [r2, #0]
 800347e:	6051      	str	r1, [r2, #4]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	7213      	strb	r3, [r2, #8]

						if(pressed_key == 2)
 8003484:	89bb      	ldrh	r3, [r7, #12]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d110      	bne.n	80034ac <start_SET_RTS_TASK+0x528>
						{
							minute--;
 800348a:	4b79      	ldr	r3, [pc, #484]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 800348c:	f993 3000 	ldrsb.w	r3, [r3]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	b25a      	sxtb	r2, r3
 8003498:	4b75      	ldr	r3, [pc, #468]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 800349a:	701a      	strb	r2, [r3, #0]
							if(minute < 0)
 800349c:	4b74      	ldr	r3, [pc, #464]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 800349e:	f993 3000 	ldrsb.w	r3, [r3]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	da02      	bge.n	80034ac <start_SET_RTS_TASK+0x528>
							{
								minute = 59;
 80034a6:	4b72      	ldr	r3, [pc, #456]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 80034a8:	223b      	movs	r2, #59	; 0x3b
 80034aa:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 80034ac:	89bb      	ldrh	r3, [r7, #12]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d110      	bne.n	80034d4 <start_SET_RTS_TASK+0x550>
						{
							minute++;
 80034b2:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 80034b4:	f993 3000 	ldrsb.w	r3, [r3]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	b25a      	sxtb	r2, r3
 80034c0:	4b6b      	ldr	r3, [pc, #428]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 80034c2:	701a      	strb	r2, [r3, #0]
							if(minute > 59)
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 80034c6:	f993 3000 	ldrsb.w	r3, [r3]
 80034ca:	2b3b      	cmp	r3, #59	; 0x3b
 80034cc:	dd02      	ble.n	80034d4 <start_SET_RTS_TASK+0x550>
							{
								minute = 0;
 80034ce:	4b68      	ldr	r3, [pc, #416]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = minute;
 80034d4:	4b66      	ldr	r3, [pc, #408]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 80034d6:	f993 3000 	ldrsb.w	r3, [r3]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b65      	ldr	r3, [pc, #404]	; (8003674 <start_SET_RTS_TASK+0x6f0>)
 80034de:	601a      	str	r2, [r3, #0]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 80034e0:	4b65      	ldr	r3, [pc, #404]	; (8003678 <start_SET_RTS_TASK+0x6f4>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	2300      	movs	r3, #0
 80034e6:	2200      	movs	r2, #0
 80034e8:	4962      	ldr	r1, [pc, #392]	; (8003674 <start_SET_RTS_TASK+0x6f0>)
 80034ea:	f006 faa7 	bl	8009a3c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80034ee:	4b63      	ldr	r3, [pc, #396]	; (800367c <start_SET_RTS_TASK+0x6f8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f005 fe80 	bl	80091f8 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 80034f8:	89bb      	ldrh	r3, [r7, #12]
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	f040 80ac 	bne.w	8003658 <start_SET_RTS_TASK+0x6d4>
						{
							QUEUE_NEW_RTC_t.Min = QUEUE_RTC_VAL_t.new_value;
 8003500:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <start_SET_RTS_TASK+0x6f0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b5e      	ldr	r3, [pc, #376]	; (8003680 <start_SET_RTS_TASK+0x6fc>)
 8003508:	715a      	strb	r2, [r3, #5]
							setet_type++;
 800350a:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <start_SET_RTS_TASK+0x700>)
 800350c:	f993 3000 	ldrsb.w	r3, [r3]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3301      	adds	r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	b25a      	sxtb	r2, r3
 8003518:	4b5a      	ldr	r3, [pc, #360]	; (8003684 <start_SET_RTS_TASK+0x700>)
 800351a:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 800351c:	4b55      	ldr	r3, [pc, #340]	; (8003674 <start_SET_RTS_TASK+0x6f0>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
						}
						break;
 8003522:	e099      	b.n	8003658 <start_SET_RTS_TASK+0x6d4>


					case 7:
						// set Seconds
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
 8003524:	2214      	movs	r2, #20
 8003526:	2100      	movs	r1, #0
 8003528:	484f      	ldr	r0, [pc, #316]	; (8003668 <start_SET_RTS_TASK+0x6e4>)
 800352a:	f009 f909 	bl	800c740 <memset>
						strcat(QUEUE_RTC_VAL_t.name, "Second: ");			// Set the setings value
 800352e:	484e      	ldr	r0, [pc, #312]	; (8003668 <start_SET_RTS_TASK+0x6e4>)
 8003530:	f7fc fe0e 	bl	8000150 <strlen>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <start_SET_RTS_TASK+0x6e4>)
 800353a:	4413      	add	r3, r2
 800353c:	4952      	ldr	r1, [pc, #328]	; (8003688 <start_SET_RTS_TASK+0x704>)
 800353e:	461a      	mov	r2, r3
 8003540:	460b      	mov	r3, r1
 8003542:	cb03      	ldmia	r3!, {r0, r1}
 8003544:	6010      	str	r0, [r2, #0]
 8003546:	6051      	str	r1, [r2, #4]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	7213      	strb	r3, [r2, #8]

						if(pressed_key == 2)
 800354c:	89bb      	ldrh	r3, [r7, #12]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d110      	bne.n	8003574 <start_SET_RTS_TASK+0x5f0>
						{
							second--;
 8003552:	4b4e      	ldr	r3, [pc, #312]	; (800368c <start_SET_RTS_TASK+0x708>)
 8003554:	f993 3000 	ldrsb.w	r3, [r3]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	b25a      	sxtb	r2, r3
 8003560:	4b4a      	ldr	r3, [pc, #296]	; (800368c <start_SET_RTS_TASK+0x708>)
 8003562:	701a      	strb	r2, [r3, #0]
							if(second < 0)
 8003564:	4b49      	ldr	r3, [pc, #292]	; (800368c <start_SET_RTS_TASK+0x708>)
 8003566:	f993 3000 	ldrsb.w	r3, [r3]
 800356a:	2b00      	cmp	r3, #0
 800356c:	da02      	bge.n	8003574 <start_SET_RTS_TASK+0x5f0>
							{
								second = 59;
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <start_SET_RTS_TASK+0x708>)
 8003570:	223b      	movs	r2, #59	; 0x3b
 8003572:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 8003574:	89bb      	ldrh	r3, [r7, #12]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d110      	bne.n	800359c <start_SET_RTS_TASK+0x618>
						{
							second++;
 800357a:	4b44      	ldr	r3, [pc, #272]	; (800368c <start_SET_RTS_TASK+0x708>)
 800357c:	f993 3000 	ldrsb.w	r3, [r3]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	3301      	adds	r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	b25a      	sxtb	r2, r3
 8003588:	4b40      	ldr	r3, [pc, #256]	; (800368c <start_SET_RTS_TASK+0x708>)
 800358a:	701a      	strb	r2, [r3, #0]
							if(second > 59)
 800358c:	4b3f      	ldr	r3, [pc, #252]	; (800368c <start_SET_RTS_TASK+0x708>)
 800358e:	f993 3000 	ldrsb.w	r3, [r3]
 8003592:	2b3b      	cmp	r3, #59	; 0x3b
 8003594:	dd02      	ble.n	800359c <start_SET_RTS_TASK+0x618>
							{
								second = 0;
 8003596:	4b3d      	ldr	r3, [pc, #244]	; (800368c <start_SET_RTS_TASK+0x708>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = second;
 800359c:	4b3b      	ldr	r3, [pc, #236]	; (800368c <start_SET_RTS_TASK+0x708>)
 800359e:	f993 3000 	ldrsb.w	r3, [r3]
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b33      	ldr	r3, [pc, #204]	; (8003674 <start_SET_RTS_TASK+0x6f0>)
 80035a6:	601a      	str	r2, [r3, #0]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
 80035a8:	4b33      	ldr	r3, [pc, #204]	; (8003678 <start_SET_RTS_TASK+0x6f4>)
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	2300      	movs	r3, #0
 80035ae:	2200      	movs	r2, #0
 80035b0:	4930      	ldr	r1, [pc, #192]	; (8003674 <start_SET_RTS_TASK+0x6f0>)
 80035b2:	f006 fa43 	bl	8009a3c <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <start_SET_RTS_TASK+0x6f8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f005 fe1c 	bl	80091f8 <osSemaphoreRelease>

						if(pressed_key == 4)		// Save data
 80035c0:	89bb      	ldrh	r3, [r7, #12]
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d14a      	bne.n	800365c <start_SET_RTS_TASK+0x6d8>
						{
							QUEUE_NEW_RTC_t.Sec = QUEUE_RTC_VAL_t.new_value;
 80035c6:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <start_SET_RTS_TASK+0x6f0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <start_SET_RTS_TASK+0x6fc>)
 80035ce:	719a      	strb	r2, [r3, #6]
							setet_type++;
 80035d0:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <start_SET_RTS_TASK+0x700>)
 80035d2:	f993 3000 	ldrsb.w	r3, [r3]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <start_SET_RTS_TASK+0x700>)
 80035e0:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <start_SET_RTS_TASK+0x6f0>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
						}
						break;
 80035e8:	e038      	b.n	800365c <start_SET_RTS_TASK+0x6d8>

					case 8:
						xQueueSend(new_rtc_queueHandle, &QUEUE_NEW_RTC_t, 0);		// Send new time and data to rtc task
 80035ea:	4b29      	ldr	r3, [pc, #164]	; (8003690 <start_SET_RTS_TASK+0x70c>)
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	2300      	movs	r3, #0
 80035f0:	2200      	movs	r2, #0
 80035f2:	4923      	ldr	r1, [pc, #140]	; (8003680 <start_SET_RTS_TASK+0x6fc>)
 80035f4:	f006 fa22 	bl	8009a3c <xQueueGenericSend>

						osThreadResume(RTC_DS3231_TaskHandle);					// Start RTS task
 80035f8:	4b26      	ldr	r3, [pc, #152]	; (8003694 <start_SET_RTS_TASK+0x710>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f005 fb4f 	bl	8008ca0 <osThreadResume>
						osThreadResume(BPE280_TaskHandle);						// Start BME280 tasl
 8003602:	4b25      	ldr	r3, [pc, #148]	; (8003698 <start_SET_RTS_TASK+0x714>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f005 fb4a 	bl	8008ca0 <osThreadResume>

						print_first_time_on_lcd_flag = true;						// Print new time and data on LCD
 800360c:	4b23      	ldr	r3, [pc, #140]	; (800369c <start_SET_RTS_TASK+0x718>)
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]

						yaer = 1;
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <start_SET_RTS_TASK+0x71c>)
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
						month = 1;
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <start_SET_RTS_TASK+0x720>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
						date = 1;
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <start_SET_RTS_TASK+0x724>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
						day_of_week = 1;
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <start_SET_RTS_TASK+0x728>)
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
						hour = 1;
 800362a:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <start_SET_RTS_TASK+0x72c>)
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
						minute = 1;
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <start_SET_RTS_TASK+0x6ec>)
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
						second = 1;
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <start_SET_RTS_TASK+0x708>)
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]

						setet_type = 1;												// Exit from switch
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <start_SET_RTS_TASK+0x700>)
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]

						break;
 8003642:	e00c      	b.n	800365e <start_SET_RTS_TASK+0x6da>
						break;
 8003644:	bf00      	nop
 8003646:	e00a      	b.n	800365e <start_SET_RTS_TASK+0x6da>
						break;
 8003648:	bf00      	nop
 800364a:	e008      	b.n	800365e <start_SET_RTS_TASK+0x6da>
						break;
 800364c:	bf00      	nop
 800364e:	e006      	b.n	800365e <start_SET_RTS_TASK+0x6da>
						break;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <start_SET_RTS_TASK+0x6da>
						break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <start_SET_RTS_TASK+0x6da>
						break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <start_SET_RTS_TASK+0x6da>
						break;
 800365c:	bf00      	nop
				}
				osDelay(200);
 800365e:	20c8      	movs	r0, #200	; 0xc8
 8003660:	f005 fb52 	bl	8008d08 <osDelay>
	{
 8003664:	e492      	b.n	8002f8c <start_SET_RTS_TASK+0x8>
 8003666:	bf00      	nop
 8003668:	20000480 	.word	0x20000480
 800366c:	0800d188 	.word	0x0800d188
 8003670:	2000000c 	.word	0x2000000c
 8003674:	2000047c 	.word	0x2000047c
 8003678:	200003c8 	.word	0x200003c8
 800367c:	20000454 	.word	0x20000454
 8003680:	20000474 	.word	0x20000474
 8003684:	20000006 	.word	0x20000006
 8003688:	0800d194 	.word	0x0800d194
 800368c:	2000000d 	.word	0x2000000d
 8003690:	20000364 	.word	0x20000364
 8003694:	2000022c 	.word	0x2000022c
 8003698:	20000230 	.word	0x20000230
 800369c:	20000004 	.word	0x20000004
 80036a0:	20000007 	.word	0x20000007
 80036a4:	20000008 	.word	0x20000008
 80036a8:	20000009 	.word	0x20000009
 80036ac:	2000000a 	.word	0x2000000a
 80036b0:	2000000b 	.word	0x2000000b

080036b4 <start_UART_USB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_UART_USB_Task */
void start_UART_USB_Task(void *argument)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	  // Transmit over virtual comport
	  HAL_UART_Transmit_IT( &huart1, msg.Buf, buffer_size);

	  osDelay(5000);
	#else
	  osDelay(1000);
 80036bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036c0:	f005 fb22 	bl	8008d08 <osDelay>
 80036c4:	e7fa      	b.n	80036bc <start_UART_USB_Task+0x8>
	...

080036c8 <start_LCD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_LCD_Task */
void start_LCD_Task(void *argument)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b0b0      	sub	sp, #192	; 0xc0
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_LCD_Task */
  /* Infinite loop */

	char str_hour[4] = {0};
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	char str_minute[4] = {0};
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char str_msecond[4] = {0};
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	char str_buf[6] = {0};
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	char str_date[15] = {0};
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	f8c3 2007 	str.w	r2, [r3, #7]
	char str_time_buf[10] = {0};
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003708:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	809a      	strh	r2, [r3, #4]

	bool two_point = true;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	//ILI9341_Reset();
	ILI9341_Init();
 8003718:	f7fd fc54 	bl	8000fc4 <ILI9341_Init>
	ILI9341_Fill_Screen(BLACK);
 800371c:	2000      	movs	r0, #0
 800371e:	f7fd fdfd 	bl	800131c <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("HELLO", 80, 10, GREEN, 6, BLACK);
 8003722:	2300      	movs	r3, #0
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	2306      	movs	r3, #6
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800372e:	220a      	movs	r2, #10
 8003730:	2150      	movs	r1, #80	; 0x50
 8003732:	48d2      	ldr	r0, [pc, #840]	; (8003a7c <start_LCD_Task+0x3b4>)
 8003734:	f7fd fae6 	bl	8000d04 <ILI9341_Draw_Text>
	osDelay(1000);
 8003738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800373c:	f005 fae4 	bl	8008d08 <osDelay>
	ILI9341_Draw_Text("Made by Oleg Demkiv", 20, 90, GREEN, 2, BLACK);
 8003740:	2300      	movs	r3, #0
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	2302      	movs	r3, #2
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800374c:	225a      	movs	r2, #90	; 0x5a
 800374e:	2114      	movs	r1, #20
 8003750:	48cb      	ldr	r0, [pc, #812]	; (8003a80 <start_LCD_Task+0x3b8>)
 8003752:	f7fd fad7 	bl	8000d04 <ILI9341_Draw_Text>
	osDelay(200);
 8003756:	20c8      	movs	r0, #200	; 0xc8
 8003758:	f005 fad6 	bl	8008d08 <osDelay>
	ILI9341_Draw_Text("STM32f103c8t", 0, 130, GREEN, 2, BLACK);
 800375c:	2300      	movs	r3, #0
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	2302      	movs	r3, #2
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003768:	2282      	movs	r2, #130	; 0x82
 800376a:	2100      	movs	r1, #0
 800376c:	48c5      	ldr	r0, [pc, #788]	; (8003a84 <start_LCD_Task+0x3bc>)
 800376e:	f7fd fac9 	bl	8000d04 <ILI9341_Draw_Text>
	osDelay(200);
 8003772:	20c8      	movs	r0, #200	; 0xc8
 8003774:	f005 fac8 	bl	8008d08 <osDelay>
	ILI9341_Draw_Text("FreeRTOS, CMSIS_V2", 0, 150, GREEN, 2, BLACK);
 8003778:	2300      	movs	r3, #0
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	2302      	movs	r3, #2
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003784:	2296      	movs	r2, #150	; 0x96
 8003786:	2100      	movs	r1, #0
 8003788:	48bf      	ldr	r0, [pc, #764]	; (8003a88 <start_LCD_Task+0x3c0>)
 800378a:	f7fd fabb 	bl	8000d04 <ILI9341_Draw_Text>
	osDelay(200);
 800378e:	20c8      	movs	r0, #200	; 0xc8
 8003790:	f005 faba 	bl	8008d08 <osDelay>
	ILI9341_Draw_Text("7.7.2022",0, 170, GREEN, 2, BLACK);
 8003794:	2300      	movs	r3, #0
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	2302      	movs	r3, #2
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037a0:	22aa      	movs	r2, #170	; 0xaa
 80037a2:	2100      	movs	r1, #0
 80037a4:	48b9      	ldr	r0, [pc, #740]	; (8003a8c <start_LCD_Task+0x3c4>)
 80037a6:	f7fd faad 	bl	8000d04 <ILI9341_Draw_Text>
	osDelay(200);
 80037aa:	20c8      	movs	r0, #200	; 0xc8
 80037ac:	f005 faac 	bl	8008d08 <osDelay>
	ILI9341_Draw_Text("Good luck =) ",0, 190, RED, 3, BLACK);
 80037b0:	2300      	movs	r3, #0
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	2303      	movs	r3, #3
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037bc:	22be      	movs	r2, #190	; 0xbe
 80037be:	2100      	movs	r1, #0
 80037c0:	48b3      	ldr	r0, [pc, #716]	; (8003a90 <start_LCD_Task+0x3c8>)
 80037c2:	f7fd fa9f 	bl	8000d04 <ILI9341_Draw_Text>
	osDelay(5000);
 80037c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80037ca:	f005 fa9d 	bl	8008d08 <osDelay>

	ILI9341_Fill_Screen(BLACK);
 80037ce:	2000      	movs	r0, #0
 80037d0:	f7fd fda4 	bl	800131c <ILI9341_Fill_Screen>


	// Draw static lines
	ILI9341_Draw_Hollow_Rectangle_Coord(0, 0, 319, 150, BLUE);
 80037d4:	231f      	movs	r3, #31
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2396      	movs	r3, #150	; 0x96
 80037da:	f240 123f 	movw	r2, #319	; 0x13f
 80037de:	2100      	movs	r1, #0
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7fd f973 	bl	8000acc <ILI9341_Draw_Hollow_Rectangle_Coord>

	for(;;)
	{

		if(osSemaphoreAcquire(LCD_SemHandle, 100) == osOK)	// Print RTS time and data settings
 80037e6:	4bab      	ldr	r3, [pc, #684]	; (8003a94 <start_LCD_Task+0x3cc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2164      	movs	r1, #100	; 0x64
 80037ec:	4618      	mov	r0, r3
 80037ee:	f005 fc9d 	bl	800912c <osSemaphoreAcquire>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f040 856a 	bne.w	80042ce <start_LCD_Task+0xc06>
		{
			// If new time/data is selecting
			if((xQueueReceive(QUEUE_RTC_VALHandle , &QUEUE_RTC_VAL_t, 0)) == pdTRUE)
 80037fa:	4ba7      	ldr	r3, [pc, #668]	; (8003a98 <start_LCD_Task+0x3d0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	49a6      	ldr	r1, [pc, #664]	; (8003a9c <start_LCD_Task+0x3d4>)
 8003802:	4618      	mov	r0, r3
 8003804:	f006 fb3e 	bl	8009e84 <xQueueReceive>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d126      	bne.n	800385c <start_LCD_Task+0x194>
			{
				ILI9341_Fill_Screen(BLACK);
 800380e:	2000      	movs	r0, #0
 8003810:	f7fd fd84 	bl	800131c <ILI9341_Fill_Screen>
				char buf[6] = {0};
 8003814:	2300      	movs	r3, #0
 8003816:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003818:	2300      	movs	r3, #0
 800381a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				// Convert QUEUE_RTC_VAL_t.new_value into strint
				sprintf(buf, "%d", QUEUE_RTC_VAL_t.new_value);
 800381e:	4b9f      	ldr	r3, [pc, #636]	; (8003a9c <start_LCD_Task+0x3d4>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003826:	499e      	ldr	r1, [pc, #632]	; (8003aa0 <start_LCD_Task+0x3d8>)
 8003828:	4618      	mov	r0, r3
 800382a:	f009 f835 	bl	800c898 <siprintf>
				ILI9341_Draw_Text(QUEUE_RTC_VAL_t.name, 10, 100, YELLOW, 2, BLACK);
 800382e:	2300      	movs	r3, #0
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	2302      	movs	r3, #2
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800383a:	2264      	movs	r2, #100	; 0x64
 800383c:	210a      	movs	r1, #10
 800383e:	4899      	ldr	r0, [pc, #612]	; (8003aa4 <start_LCD_Task+0x3dc>)
 8003840:	f7fd fa60 	bl	8000d04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text(buf, 200, 100, YELLOW, 2, BLACK);
 8003844:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8003848:	2300      	movs	r3, #0
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	2302      	movs	r3, #2
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003854:	2264      	movs	r2, #100	; 0x64
 8003856:	21c8      	movs	r1, #200	; 0xc8
 8003858:	f7fd fa54 	bl	8000d04 <ILI9341_Draw_Text>

			}

			// If data from BME280 is ready print T, H and  P
			// Waiting queue from start_BPE280_Task
			if((xQueueReceive(THPQueueHandle, &QUEUE_BME280_t, 0)) == pdTRUE)
 800385c:	4b92      	ldr	r3, [pc, #584]	; (8003aa8 <start_LCD_Task+0x3e0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2200      	movs	r2, #0
 8003862:	4992      	ldr	r1, [pc, #584]	; (8003aac <start_LCD_Task+0x3e4>)
 8003864:	4618      	mov	r0, r3
 8003866:	f006 fb0d 	bl	8009e84 <xQueueReceive>
 800386a:	4603      	mov	r3, r0
 800386c:	2b01      	cmp	r3, #1
 800386e:	f040 80d6 	bne.w	8003a1e <start_LCD_Task+0x356>
			{
				// Print T, H and  P on LCD
				char str_temperature[5] = {0};
 8003872:	2300      	movs	r3, #0
 8003874:	677b      	str	r3, [r7, #116]	; 0x74
 8003876:	2300      	movs	r3, #0
 8003878:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
				char str_humidity[5] = {0};
 800387c:	2300      	movs	r3, #0
 800387e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
				char str_preassure[10] = {0};
 8003886:	2300      	movs	r3, #0
 8003888:	663b      	str	r3, [r7, #96]	; 0x60
 800388a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	809a      	strh	r2, [r3, #4]

				//int preasure = QUEUE_BME280_t.pressure;
				sprintf(str_temperature, "%d", (int)QUEUE_BME280_t.temperature);
 8003894:	4b85      	ldr	r3, [pc, #532]	; (8003aac <start_LCD_Task+0x3e4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc ff35 	bl	8000708 <__aeabi_f2iz>
 800389e:	4602      	mov	r2, r0
 80038a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038a4:	497e      	ldr	r1, [pc, #504]	; (8003aa0 <start_LCD_Task+0x3d8>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	f008 fff6 	bl	800c898 <siprintf>
				char strthp_buf_t[1] = {0};
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
				strncat(strthp_buf_t, "T:", 2);
 80038b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fc4a 	bl	8000150 <strlen>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038c4:	4413      	add	r3, r2
 80038c6:	4a7a      	ldr	r2, [pc, #488]	; (8003ab0 <start_LCD_Task+0x3e8>)
 80038c8:	8811      	ldrh	r1, [r2, #0]
 80038ca:	7892      	ldrb	r2, [r2, #2]
 80038cc:	8019      	strh	r1, [r3, #0]
 80038ce:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_t, str_temperature, sizeof(str_temperature));
 80038d0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80038d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038d8:	2205      	movs	r2, #5
 80038da:	4618      	mov	r0, r3
 80038dc:	f008 fffc 	bl	800c8d8 <strncat>
				strncat(strthp_buf_t, " C", 2);
 80038e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fc33 	bl	8000150 <strlen>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038f2:	4413      	add	r3, r2
 80038f4:	4a6f      	ldr	r2, [pc, #444]	; (8003ab4 <start_LCD_Task+0x3ec>)
 80038f6:	8811      	ldrh	r1, [r2, #0]
 80038f8:	7892      	ldrb	r2, [r2, #2]
 80038fa:	8019      	strh	r1, [r3, #0]
 80038fc:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_t, 10, 160, YELLOW, 2, BLACK);
 80038fe:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8003902:	2300      	movs	r3, #0
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2302      	movs	r3, #2
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800390e:	22a0      	movs	r2, #160	; 0xa0
 8003910:	210a      	movs	r1, #10
 8003912:	f7fd f9f7 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_humidity, "%d", (int)QUEUE_BME280_t.humidity);
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <start_LCD_Task+0x3e4>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fc fef4 	bl	8000708 <__aeabi_f2iz>
 8003920:	4602      	mov	r2, r0
 8003922:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003926:	495e      	ldr	r1, [pc, #376]	; (8003aa0 <start_LCD_Task+0x3d8>)
 8003928:	4618      	mov	r0, r3
 800392a:	f008 ffb5 	bl	800c898 <siprintf>
				char strthp_buf_h[10] = {0};
 800392e:	2300      	movs	r3, #0
 8003930:	653b      	str	r3, [r7, #80]	; 0x50
 8003932:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	809a      	strh	r2, [r3, #4]
				strncat(strthp_buf_h, "H:", 2);
 800393c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003940:	4618      	mov	r0, r3
 8003942:	f7fc fc05 	bl	8000150 <strlen>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800394e:	4413      	add	r3, r2
 8003950:	4a59      	ldr	r2, [pc, #356]	; (8003ab8 <start_LCD_Task+0x3f0>)
 8003952:	8811      	ldrh	r1, [r2, #0]
 8003954:	7892      	ldrb	r2, [r2, #2]
 8003956:	8019      	strh	r1, [r3, #0]
 8003958:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_h, str_humidity, sizeof(str_humidity));
 800395a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800395e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003962:	2205      	movs	r2, #5
 8003964:	4618      	mov	r0, r3
 8003966:	f008 ffb7 	bl	800c8d8 <strncat>
				strncat(strthp_buf_h, " %", 2);
 800396a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800396e:	4618      	mov	r0, r3
 8003970:	f7fc fbee 	bl	8000150 <strlen>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800397c:	4413      	add	r3, r2
 800397e:	4a4f      	ldr	r2, [pc, #316]	; (8003abc <start_LCD_Task+0x3f4>)
 8003980:	8811      	ldrh	r1, [r2, #0]
 8003982:	7892      	ldrb	r2, [r2, #2]
 8003984:	8019      	strh	r1, [r3, #0]
 8003986:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_h, 10, 180, YELLOW, 2, BLACK);
 8003988:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800398c:	2300      	movs	r3, #0
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	2302      	movs	r3, #2
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003998:	22b4      	movs	r2, #180	; 0xb4
 800399a:	210a      	movs	r1, #10
 800399c:	f7fd f9b2 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_preassure, "%d", (int)QUEUE_BME280_t.pressure);
 80039a0:	4b42      	ldr	r3, [pc, #264]	; (8003aac <start_LCD_Task+0x3e4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fc feaf 	bl	8000708 <__aeabi_f2iz>
 80039aa:	4602      	mov	r2, r0
 80039ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039b0:	493b      	ldr	r1, [pc, #236]	; (8003aa0 <start_LCD_Task+0x3d8>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f008 ff70 	bl	800c898 <siprintf>
				char strthp_buf_p[17] = {0};
 80039b8:	2300      	movs	r3, #0
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	731a      	strb	r2, [r3, #12]
				strncat(strthp_buf_p, "P:", 2);
 80039ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fc fbbe 	bl	8000150 <strlen>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461a      	mov	r2, r3
 80039d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039dc:	4413      	add	r3, r2
 80039de:	4a38      	ldr	r2, [pc, #224]	; (8003ac0 <start_LCD_Task+0x3f8>)
 80039e0:	8811      	ldrh	r1, [r2, #0]
 80039e2:	7892      	ldrb	r2, [r2, #2]
 80039e4:	8019      	strh	r1, [r3, #0]
 80039e6:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_p, str_preassure, sizeof(str_preassure));
 80039e8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80039ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039f0:	220a      	movs	r2, #10
 80039f2:	4618      	mov	r0, r3
 80039f4:	f008 ff70 	bl	800c8d8 <strncat>
				strncat(strthp_buf_p, " mmRh", 4);
 80039f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039fc:	2204      	movs	r2, #4
 80039fe:	4931      	ldr	r1, [pc, #196]	; (8003ac4 <start_LCD_Task+0x3fc>)
 8003a00:	4618      	mov	r0, r3
 8003a02:	f008 ff69 	bl	800c8d8 <strncat>
				ILI9341_Draw_Text(strthp_buf_p, 10, 200, YELLOW, 2, BLACK);
 8003a06:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2302      	movs	r3, #2
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a16:	22c8      	movs	r2, #200	; 0xc8
 8003a18:	210a      	movs	r1, #10
 8003a1a:	f7fd f973 	bl	8000d04 <ILI9341_Draw_Text>
			}


			// If data from start_RTC_DS3231_
			// Waiting queue from start_RTC_DS3231_Task
			if(xQueueReceive(rtc_queueHandle, &QUEUE_RTC_t, 0) == pdPASS)
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <start_LCD_Task+0x400>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	4929      	ldr	r1, [pc, #164]	; (8003acc <start_LCD_Task+0x404>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f006 fa2c 	bl	8009e84 <xQueueReceive>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	f040 844d 	bne.w	80042ce <start_LCD_Task+0xc06>
			{
				if(print_first_time_on_lcd_flag == true)				// If print data firsttime
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <start_LCD_Task+0x408>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 823d 	beq.w	8003eb8 <start_LCD_Task+0x7f0>
				{
					// Print all clock data on LCD
					ILI9341_Fill_Screen(BLACK);
 8003a3e:	2000      	movs	r0, #0
 8003a40:	f7fd fc6c 	bl	800131c <ILI9341_Fill_Screen>

					ILI9341_Draw_Hollow_Rectangle_Coord(0, 0, 319, 150, BLUE);
 8003a44:	231f      	movs	r3, #31
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2396      	movs	r3, #150	; 0x96
 8003a4a:	f240 123f 	movw	r2, #319	; 0x13f
 8003a4e:	2100      	movs	r1, #0
 8003a50:	2000      	movs	r0, #0
 8003a52:	f7fd f83b 	bl	8000acc <ILI9341_Draw_Hollow_Rectangle_Coord>

					sprintf(str_hour, "%d", QUEUE_RTC_t.Hour);
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <start_LCD_Task+0x404>)
 8003a58:	791b      	ldrb	r3, [r3, #4]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003a60:	490f      	ldr	r1, [pc, #60]	; (8003aa0 <start_LCD_Task+0x3d8>)
 8003a62:	4618      	mov	r0, r3
 8003a64:	f008 ff18 	bl	800c898 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 8003a68:	4b18      	ldr	r3, [pc, #96]	; (8003acc <start_LCD_Task+0x404>)
 8003a6a:	795b      	ldrb	r3, [r3, #5]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a72:	490b      	ldr	r1, [pc, #44]	; (8003aa0 <start_LCD_Task+0x3d8>)
 8003a74:	4618      	mov	r0, r3
 8003a76:	f008 ff0f 	bl	800c898 <siprintf>
 8003a7a:	e02b      	b.n	8003ad4 <start_LCD_Task+0x40c>
 8003a7c:	0800d1a0 	.word	0x0800d1a0
 8003a80:	0800d1a8 	.word	0x0800d1a8
 8003a84:	0800d1bc 	.word	0x0800d1bc
 8003a88:	0800d1cc 	.word	0x0800d1cc
 8003a8c:	0800d1e0 	.word	0x0800d1e0
 8003a90:	0800d1ec 	.word	0x0800d1ec
 8003a94:	20000454 	.word	0x20000454
 8003a98:	200003c8 	.word	0x200003c8
 8003a9c:	2000047c 	.word	0x2000047c
 8003aa0:	0800d1fc 	.word	0x0800d1fc
 8003aa4:	20000480 	.word	0x20000480
 8003aa8:	2000029c 	.word	0x2000029c
 8003aac:	20000468 	.word	0x20000468
 8003ab0:	0800d200 	.word	0x0800d200
 8003ab4:	0800d204 	.word	0x0800d204
 8003ab8:	0800d208 	.word	0x0800d208
 8003abc:	0800d20c 	.word	0x0800d20c
 8003ac0:	0800d210 	.word	0x0800d210
 8003ac4:	0800d214 	.word	0x0800d214
 8003ac8:	20000308 	.word	0x20000308
 8003acc:	20000460 	.word	0x20000460
 8003ad0:	20000004 	.word	0x20000004
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 8003ad4:	4bcb      	ldr	r3, [pc, #812]	; (8003e04 <start_LCD_Task+0x73c>)
 8003ad6:	799b      	ldrb	r3, [r3, #6]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003ade:	49ca      	ldr	r1, [pc, #808]	; (8003e08 <start_LCD_Task+0x740>)
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f008 fed9 	bl	800c898 <siprintf>

					// Updating hours  on LCD
					if(QUEUE_RTC_t.Hour < 10)
 8003ae6:	4bc7      	ldr	r3, [pc, #796]	; (8003e04 <start_LCD_Task+0x73c>)
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	2b09      	cmp	r3, #9
 8003aec:	d828      	bhi.n	8003b40 <start_LCD_Task+0x478>
					{
						char hour_buff[5] = {0};
 8003aee:	2300      	movs	r3, #0
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
						strncat(hour_buff, "0", 1);
 8003af8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fc fb27 	bl	8000150 <strlen>
 8003b02:	4603      	mov	r3, r0
 8003b04:	461a      	mov	r2, r3
 8003b06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b0a:	4413      	add	r3, r2
 8003b0c:	49bf      	ldr	r1, [pc, #764]	; (8003e0c <start_LCD_Task+0x744>)
 8003b0e:	461a      	mov	r2, r3
 8003b10:	460b      	mov	r3, r1
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	8013      	strh	r3, [r2, #0]
						strncat(hour_buff, str_hour, sizeof(str_hour));
 8003b16:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003b1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b1e:	2204      	movs	r2, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f008 fed9 	bl	800c8d8 <strncat>
						ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 8003b26:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	230a      	movs	r3, #10
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b36:	2201      	movs	r2, #1
 8003b38:	210a      	movs	r1, #10
 8003b3a:	f7fd f8e3 	bl	8000d04 <ILI9341_Draw_Text>
 8003b3e:	e00b      	b.n	8003b58 <start_LCD_Task+0x490>
					}
					else
					{
						ILI9341_Draw_Text(str_hour, 10, 1, GREEN, 10, BLACK);
 8003b40:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003b44:	2300      	movs	r3, #0
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	230a      	movs	r3, #10
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b50:	2201      	movs	r2, #1
 8003b52:	210a      	movs	r1, #10
 8003b54:	f7fd f8d6 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Updating minutes on LCD
					if(QUEUE_RTC_t.Min < 10)
 8003b58:	4baa      	ldr	r3, [pc, #680]	; (8003e04 <start_LCD_Task+0x73c>)
 8003b5a:	795b      	ldrb	r3, [r3, #5]
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	d828      	bhi.n	8003bb2 <start_LCD_Task+0x4ea>
					{
						char min_buff[5] = {0};
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
						strncat(min_buff, "0", 1);
 8003b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc faee 	bl	8000150 <strlen>
 8003b74:	4603      	mov	r3, r0
 8003b76:	461a      	mov	r2, r3
 8003b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b7c:	4413      	add	r3, r2
 8003b7e:	49a3      	ldr	r1, [pc, #652]	; (8003e0c <start_LCD_Task+0x744>)
 8003b80:	461a      	mov	r2, r3
 8003b82:	460b      	mov	r3, r1
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	8013      	strh	r3, [r2, #0]
						strncat(min_buff, str_minute, sizeof(str_minute));
 8003b88:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8003b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b90:	2204      	movs	r2, #4
 8003b92:	4618      	mov	r0, r3
 8003b94:	f008 fea0 	bl	800c8d8 <strncat>
						ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 8003b98:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	230a      	movs	r3, #10
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ba8:	2201      	movs	r2, #1
 8003baa:	21c3      	movs	r1, #195	; 0xc3
 8003bac:	f7fd f8aa 	bl	8000d04 <ILI9341_Draw_Text>
 8003bb0:	e00b      	b.n	8003bca <start_LCD_Task+0x502>
					}
					else
					{
						ILI9341_Draw_Text(str_minute, 195, 1, GREEN, 10, BLACK);
 8003bb2:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	230a      	movs	r3, #10
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	21c3      	movs	r1, #195	; 0xc3
 8003bc6:	f7fd f89d 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Updating seconds on LCD
					if(QUEUE_RTC_t.Sec == 0)
 8003bca:	4b8e      	ldr	r3, [pc, #568]	; (8003e04 <start_LCD_Task+0x73c>)
 8003bcc:	799b      	ldrb	r3, [r3, #6]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <start_LCD_Task+0x520>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2306      	movs	r3, #6
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bde:	2255      	movs	r2, #85	; 0x55
 8003be0:	21d7      	movs	r1, #215	; 0xd7
 8003be2:	488b      	ldr	r0, [pc, #556]	; (8003e10 <start_LCD_Task+0x748>)
 8003be4:	f7fd f88e 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 8003be8:	4b86      	ldr	r3, [pc, #536]	; (8003e04 <start_LCD_Task+0x73c>)
 8003bea:	799b      	ldrb	r3, [r3, #6]
 8003bec:	2b09      	cmp	r3, #9
 8003bee:	d828      	bhi.n	8003c42 <start_LCD_Task+0x57a>
					{
						// add '0'
						char second_buff[5] = {0};
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						strncat(second_buff, "0", 1);
 8003bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fc faa6 	bl	8000150 <strlen>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0c:	4413      	add	r3, r2
 8003c0e:	497f      	ldr	r1, [pc, #508]	; (8003e0c <start_LCD_Task+0x744>)
 8003c10:	461a      	mov	r2, r3
 8003c12:	460b      	mov	r3, r1
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 8003c18:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c20:	2204      	movs	r2, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f008 fe58 	bl	800c8d8 <strncat>
						//strncat(str_time_buf, minute_buff, sizeof(minute_buff));
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 8003c28:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	2306      	movs	r3, #6
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c38:	2255      	movs	r2, #85	; 0x55
 8003c3a:	21d7      	movs	r1, #215	; 0xd7
 8003c3c:	f7fd f862 	bl	8000d04 <ILI9341_Draw_Text>
 8003c40:	e00b      	b.n	8003c5a <start_LCD_Task+0x592>
					}
					else
					{
						ILI9341_Draw_Text(str_msecond, 215, 85, GREEN, 6, BLACK);
 8003c42:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8003c46:	2300      	movs	r3, #0
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	2306      	movs	r3, #6
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c52:	2255      	movs	r2, #85	; 0x55
 8003c54:	21d7      	movs	r1, #215	; 0xd7
 8003c56:	f7fd f855 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Draw seconds line
					ILI9341_Draw_Rectangle(10, 81, (5*QUEUE_RTC_t.Sec), 4, GREEN);
 8003c5a:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <start_LCD_Task+0x73c>)
 8003c5c:	799b      	ldrb	r3, [r3, #6]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2304      	movs	r3, #4
 8003c70:	2151      	movs	r1, #81	; 0x51
 8003c72:	200a      	movs	r0, #10
 8003c74:	f7fd fc54 	bl	8001520 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 8003c78:	4b62      	ldr	r3, [pc, #392]	; (8003e04 <start_LCD_Task+0x73c>)
 8003c7a:	799b      	ldrb	r3, [r3, #6]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d108      	bne.n	8003c92 <start_LCD_Task+0x5ca>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 8003c80:	2300      	movs	r3, #0
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2304      	movs	r3, #4
 8003c86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c8a:	2151      	movs	r1, #81	; 0x51
 8003c8c:	200a      	movs	r0, #10
 8003c8e:	f7fd fc47 	bl	8001520 <ILI9341_Draw_Rectangle>
					}

					// Updating blink two points on LCD
					if(two_point == true)
 8003c92:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00e      	beq.n	8003cb8 <start_LCD_Task+0x5f0>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	2187      	movs	r1, #135	; 0x87
 8003caa:	485a      	ldr	r0, [pc, #360]	; (8003e14 <start_LCD_Task+0x74c>)
 8003cac:	f7fd f82a 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8003cb6:	e00d      	b.n	8003cd4 <start_LCD_Task+0x60c>
					}
					else
					{
						ILI9341_Draw_Text(" ", 135, 1, GREEN, 10, BLACK);
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	230a      	movs	r3, #10
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	2187      	movs	r1, #135	; 0x87
 8003cc8:	4853      	ldr	r0, [pc, #332]	; (8003e18 <start_LCD_Task+0x750>)
 8003cca:	f7fd f81b 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
					}

					// Date
					ILI9341_Draw_Text("        ", 10, 86, BLUE, 4, BLACK);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	2304      	movs	r3, #4
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	231f      	movs	r3, #31
 8003cde:	2256      	movs	r2, #86	; 0x56
 8003ce0:	210a      	movs	r1, #10
 8003ce2:	484e      	ldr	r0, [pc, #312]	; (8003e1c <start_LCD_Task+0x754>)
 8003ce4:	f7fd f80e 	bl	8000d04 <ILI9341_Draw_Text>
					memset(str_buf, 0 , sizeof(str_buf));
 8003ce8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cec:	2206      	movs	r2, #6
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f008 fd25 	bl	800c740 <memset>
					sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 8003cf6:	4b43      	ldr	r3, [pc, #268]	; (8003e04 <start_LCD_Task+0x73c>)
 8003cf8:	789b      	ldrb	r3, [r3, #2]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d00:	4941      	ldr	r1, [pc, #260]	; (8003e08 <start_LCD_Task+0x740>)
 8003d02:	4618      	mov	r0, r3
 8003d04:	f008 fdc8 	bl	800c898 <siprintf>

					strncat(str_date, ".", 1);
 8003d08:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fa1f 	bl	8000150 <strlen>
 8003d12:	4603      	mov	r3, r0
 8003d14:	461a      	mov	r2, r3
 8003d16:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4940      	ldr	r1, [pc, #256]	; (8003e20 <start_LCD_Task+0x758>)
 8003d1e:	461a      	mov	r2, r3
 8003d20:	460b      	mov	r3, r1
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	8013      	strh	r3, [r2, #0]
					sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <start_LCD_Task+0x73c>)
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d30:	4935      	ldr	r1, [pc, #212]	; (8003e08 <start_LCD_Task+0x740>)
 8003d32:	4618      	mov	r0, r3
 8003d34:	f008 fdb0 	bl	800c898 <siprintf>
					strncat(str_date, str_buf, sizeof(str_buf));
 8003d38:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003d3c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d40:	2206      	movs	r2, #6
 8003d42:	4618      	mov	r0, r3
 8003d44:	f008 fdc8 	bl	800c8d8 <strncat>
					memset(str_buf, 0 , sizeof(str_buf));
 8003d48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f008 fcf5 	bl	800c740 <memset>
					sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 8003d56:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <start_LCD_Task+0x73c>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d60:	4929      	ldr	r1, [pc, #164]	; (8003e08 <start_LCD_Task+0x740>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f008 fd98 	bl	800c898 <siprintf>
					strncat(str_date, ".", 1);
 8003d68:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fc f9ef 	bl	8000150 <strlen>
 8003d72:	4603      	mov	r3, r0
 8003d74:	461a      	mov	r2, r3
 8003d76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4928      	ldr	r1, [pc, #160]	; (8003e20 <start_LCD_Task+0x758>)
 8003d7e:	461a      	mov	r2, r3
 8003d80:	460b      	mov	r3, r1
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	8013      	strh	r3, [r2, #0]
					strncat(str_date, str_buf, sizeof(str_buf));
 8003d86:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003d8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d8e:	2206      	movs	r2, #6
 8003d90:	4618      	mov	r0, r3
 8003d92:	f008 fda1 	bl	800c8d8 <strncat>
					ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 8003d96:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	2304      	movs	r3, #4
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	231f      	movs	r3, #31
 8003da4:	2256      	movs	r2, #86	; 0x56
 8003da6:	210a      	movs	r1, #10
 8003da8:	f7fc ffac 	bl	8000d04 <ILI9341_Draw_Text>

					ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 8003dac:	2300      	movs	r3, #0
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	2302      	movs	r3, #2
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	231f      	movs	r3, #31
 8003db6:	2278      	movs	r2, #120	; 0x78
 8003db8:	210a      	movs	r1, #10
 8003dba:	481a      	ldr	r0, [pc, #104]	; (8003e24 <start_LCD_Task+0x75c>)
 8003dbc:	f7fc ffa2 	bl	8000d04 <ILI9341_Draw_Text>

					switch (QUEUE_RTC_t.DaysOfWeek)
 8003dc0:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <start_LCD_Task+0x73c>)
 8003dc2:	78db      	ldrb	r3, [r3, #3]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	2b06      	cmp	r3, #6
 8003dc8:	d872      	bhi.n	8003eb0 <start_LCD_Task+0x7e8>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <start_LCD_Task+0x708>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	08003e2d 	.word	0x08003e2d
 8003dd8:	08003e43 	.word	0x08003e43
 8003ddc:	08003e59 	.word	0x08003e59
 8003de0:	08003e6f 	.word	0x08003e6f
 8003de4:	08003e85 	.word	0x08003e85
 8003de8:	08003e9b 	.word	0x08003e9b
					{
						case 1:
							ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 8003dec:	2300      	movs	r3, #0
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	2302      	movs	r3, #2
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	231f      	movs	r3, #31
 8003df6:	2278      	movs	r2, #120	; 0x78
 8003df8:	210a      	movs	r1, #10
 8003dfa:	480b      	ldr	r0, [pc, #44]	; (8003e28 <start_LCD_Task+0x760>)
 8003dfc:	f7fc ff82 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003e00:	e056      	b.n	8003eb0 <start_LCD_Task+0x7e8>
 8003e02:	bf00      	nop
 8003e04:	20000460 	.word	0x20000460
 8003e08:	0800d1fc 	.word	0x0800d1fc
 8003e0c:	0800d21c 	.word	0x0800d21c
 8003e10:	0800d220 	.word	0x0800d220
 8003e14:	0800d224 	.word	0x0800d224
 8003e18:	0800d228 	.word	0x0800d228
 8003e1c:	0800d22c 	.word	0x0800d22c
 8003e20:	0800d238 	.word	0x0800d238
 8003e24:	0800d23c 	.word	0x0800d23c
 8003e28:	0800d248 	.word	0x0800d248
						case 2:
							ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	2302      	movs	r3, #2
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	231f      	movs	r3, #31
 8003e36:	2278      	movs	r2, #120	; 0x78
 8003e38:	210a      	movs	r1, #10
 8003e3a:	48a2      	ldr	r0, [pc, #648]	; (80040c4 <start_LCD_Task+0x9fc>)
 8003e3c:	f7fc ff62 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003e40:	e036      	b.n	8003eb0 <start_LCD_Task+0x7e8>
						case 3:
							ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 8003e42:	2300      	movs	r3, #0
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	2302      	movs	r3, #2
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	231f      	movs	r3, #31
 8003e4c:	2278      	movs	r2, #120	; 0x78
 8003e4e:	210a      	movs	r1, #10
 8003e50:	489d      	ldr	r0, [pc, #628]	; (80040c8 <start_LCD_Task+0xa00>)
 8003e52:	f7fc ff57 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003e56:	e02b      	b.n	8003eb0 <start_LCD_Task+0x7e8>
						case 4:
							ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	231f      	movs	r3, #31
 8003e62:	2278      	movs	r2, #120	; 0x78
 8003e64:	210a      	movs	r1, #10
 8003e66:	4899      	ldr	r0, [pc, #612]	; (80040cc <start_LCD_Task+0xa04>)
 8003e68:	f7fc ff4c 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003e6c:	e020      	b.n	8003eb0 <start_LCD_Task+0x7e8>
						case 5:
							ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2302      	movs	r3, #2
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	231f      	movs	r3, #31
 8003e78:	2278      	movs	r2, #120	; 0x78
 8003e7a:	210a      	movs	r1, #10
 8003e7c:	4894      	ldr	r0, [pc, #592]	; (80040d0 <start_LCD_Task+0xa08>)
 8003e7e:	f7fc ff41 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003e82:	e015      	b.n	8003eb0 <start_LCD_Task+0x7e8>
						case 6:
							ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 8003e84:	2300      	movs	r3, #0
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2302      	movs	r3, #2
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	231f      	movs	r3, #31
 8003e8e:	2278      	movs	r2, #120	; 0x78
 8003e90:	210a      	movs	r1, #10
 8003e92:	4890      	ldr	r0, [pc, #576]	; (80040d4 <start_LCD_Task+0xa0c>)
 8003e94:	f7fc ff36 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003e98:	e00a      	b.n	8003eb0 <start_LCD_Task+0x7e8>
						case 7:
							ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	231f      	movs	r3, #31
 8003ea4:	2278      	movs	r2, #120	; 0x78
 8003ea6:	210a      	movs	r1, #10
 8003ea8:	488b      	ldr	r0, [pc, #556]	; (80040d8 <start_LCD_Task+0xa10>)
 8003eaa:	f7fc ff2b 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003eae:	bf00      	nop
					}

					print_first_time_on_lcd_flag = false;
 8003eb0:	4b8a      	ldr	r3, [pc, #552]	; (80040dc <start_LCD_Task+0xa14>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e496      	b.n	80037e6 <start_LCD_Task+0x11e>

				}
				else
				{
					sprintf(str_hour, "%d", QUEUE_RTC_t.Hour);
 8003eb8:	4b89      	ldr	r3, [pc, #548]	; (80040e0 <start_LCD_Task+0xa18>)
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ec2:	4988      	ldr	r1, [pc, #544]	; (80040e4 <start_LCD_Task+0xa1c>)
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f008 fce7 	bl	800c898 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 8003eca:	4b85      	ldr	r3, [pc, #532]	; (80040e0 <start_LCD_Task+0xa18>)
 8003ecc:	795b      	ldrb	r3, [r3, #5]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ed4:	4983      	ldr	r1, [pc, #524]	; (80040e4 <start_LCD_Task+0xa1c>)
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f008 fcde 	bl	800c898 <siprintf>
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 8003edc:	4b80      	ldr	r3, [pc, #512]	; (80040e0 <start_LCD_Task+0xa18>)
 8003ede:	799b      	ldrb	r3, [r3, #6]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003ee6:	497f      	ldr	r1, [pc, #508]	; (80040e4 <start_LCD_Task+0xa1c>)
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f008 fcd5 	bl	800c898 <siprintf>

					// Updating hours and minutes on LCD
					if(QUEUE_RTC_t.Sec == 0)
 8003eee:	4b7c      	ldr	r3, [pc, #496]	; (80040e0 <start_LCD_Task+0xa18>)
 8003ef0:	799b      	ldrb	r3, [r3, #6]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d170      	bne.n	8003fd8 <start_LCD_Task+0x910>
					{
						if(QUEUE_RTC_t.Min < 10)
 8003ef6:	4b7a      	ldr	r3, [pc, #488]	; (80040e0 <start_LCD_Task+0xa18>)
 8003ef8:	795b      	ldrb	r3, [r3, #5]
 8003efa:	2b09      	cmp	r3, #9
 8003efc:	d828      	bhi.n	8003f50 <start_LCD_Task+0x888>
						{
							char min_buff[5] = {0};
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 3020 	strb.w	r3, [r7, #32]
							strncat(min_buff, "0", 1);
 8003f08:	f107 031c 	add.w	r3, r7, #28
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc f91f 	bl	8000150 <strlen>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	f107 031c 	add.w	r3, r7, #28
 8003f1a:	4413      	add	r3, r2
 8003f1c:	4972      	ldr	r1, [pc, #456]	; (80040e8 <start_LCD_Task+0xa20>)
 8003f1e:	461a      	mov	r2, r3
 8003f20:	460b      	mov	r3, r1
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	8013      	strh	r3, [r2, #0]
							strncat(min_buff, str_minute, sizeof(str_minute));
 8003f26:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8003f2a:	f107 031c 	add.w	r3, r7, #28
 8003f2e:	2204      	movs	r2, #4
 8003f30:	4618      	mov	r0, r3
 8003f32:	f008 fcd1 	bl	800c8d8 <strncat>
							ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 8003f36:	f107 001c 	add.w	r0, r7, #28
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	230a      	movs	r3, #10
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f46:	2201      	movs	r2, #1
 8003f48:	21c3      	movs	r1, #195	; 0xc3
 8003f4a:	f7fc fedb 	bl	8000d04 <ILI9341_Draw_Text>
 8003f4e:	e00b      	b.n	8003f68 <start_LCD_Task+0x8a0>
						}
						else
						{
							ILI9341_Draw_Text(str_minute, 195, 1, GREEN, 10, BLACK);
 8003f50:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003f54:	2300      	movs	r3, #0
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	230a      	movs	r3, #10
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f60:	2201      	movs	r2, #1
 8003f62:	21c3      	movs	r1, #195	; 0xc3
 8003f64:	f7fc fece 	bl	8000d04 <ILI9341_Draw_Text>
						}

						if(QUEUE_RTC_t.Hour < 10)
 8003f68:	4b5d      	ldr	r3, [pc, #372]	; (80040e0 <start_LCD_Task+0xa18>)
 8003f6a:	791b      	ldrb	r3, [r3, #4]
 8003f6c:	2b09      	cmp	r3, #9
 8003f6e:	d827      	bhi.n	8003fc0 <start_LCD_Task+0x8f8>
						{
							char hour_buff[5] = {0};
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	2300      	movs	r3, #0
 8003f76:	763b      	strb	r3, [r7, #24]
							strncat(hour_buff, "0", 1);
 8003f78:	f107 0314 	add.w	r3, r7, #20
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc f8e7 	bl	8000150 <strlen>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	f107 0314 	add.w	r3, r7, #20
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4956      	ldr	r1, [pc, #344]	; (80040e8 <start_LCD_Task+0xa20>)
 8003f8e:	461a      	mov	r2, r3
 8003f90:	460b      	mov	r3, r1
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	8013      	strh	r3, [r2, #0]
							strncat(hour_buff, str_hour, sizeof(str_hour));
 8003f96:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f008 fc99 	bl	800c8d8 <strncat>
							ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 8003fa6:	f107 0014 	add.w	r0, r7, #20
 8003faa:	2300      	movs	r3, #0
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	230a      	movs	r3, #10
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	210a      	movs	r1, #10
 8003fba:	f7fc fea3 	bl	8000d04 <ILI9341_Draw_Text>
 8003fbe:	e00b      	b.n	8003fd8 <start_LCD_Task+0x910>
						}
						else
						{
							ILI9341_Draw_Text(str_hour, 10, 1, GREEN, 10, BLACK);
 8003fc0:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	230a      	movs	r3, #10
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	210a      	movs	r1, #10
 8003fd4:	f7fc fe96 	bl	8000d04 <ILI9341_Draw_Text>
						}
					}

					// Updating seconds on LCD
					if(QUEUE_RTC_t.Sec == 0)
 8003fd8:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <start_LCD_Task+0xa18>)
 8003fda:	799b      	ldrb	r3, [r3, #6]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <start_LCD_Task+0x92e>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	2306      	movs	r3, #6
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fec:	2255      	movs	r2, #85	; 0x55
 8003fee:	21d7      	movs	r1, #215	; 0xd7
 8003ff0:	483e      	ldr	r0, [pc, #248]	; (80040ec <start_LCD_Task+0xa24>)
 8003ff2:	f7fc fe87 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 8003ff6:	4b3a      	ldr	r3, [pc, #232]	; (80040e0 <start_LCD_Task+0xa18>)
 8003ff8:	799b      	ldrb	r3, [r3, #6]
 8003ffa:	2b09      	cmp	r3, #9
 8003ffc:	d827      	bhi.n	800404e <start_LCD_Task+0x986>
					{
						// add '0'
						char second_buff[5] = {0};
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	2300      	movs	r3, #0
 8004004:	743b      	strb	r3, [r7, #16]
						strncat(second_buff, "0", 1);
 8004006:	f107 030c 	add.w	r3, r7, #12
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc f8a0 	bl	8000150 <strlen>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	4413      	add	r3, r2
 800401a:	4933      	ldr	r1, [pc, #204]	; (80040e8 <start_LCD_Task+0xa20>)
 800401c:	461a      	mov	r2, r3
 800401e:	460b      	mov	r3, r1
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 8004024:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	2204      	movs	r2, #4
 800402e:	4618      	mov	r0, r3
 8004030:	f008 fc52 	bl	800c8d8 <strncat>
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 8004034:	f107 000c 	add.w	r0, r7, #12
 8004038:	2300      	movs	r3, #0
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	2306      	movs	r3, #6
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004044:	2255      	movs	r2, #85	; 0x55
 8004046:	21d7      	movs	r1, #215	; 0xd7
 8004048:	f7fc fe5c 	bl	8000d04 <ILI9341_Draw_Text>
 800404c:	e00b      	b.n	8004066 <start_LCD_Task+0x99e>
					}
					else
					{
						ILI9341_Draw_Text(str_msecond, 215, 85, GREEN, 6, BLACK);
 800404e:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8004052:	2300      	movs	r3, #0
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	2306      	movs	r3, #6
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800405e:	2255      	movs	r2, #85	; 0x55
 8004060:	21d7      	movs	r1, #215	; 0xd7
 8004062:	f7fc fe4f 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Draw seconds line
					ILI9341_Draw_Rectangle(10, 81, (5*QUEUE_RTC_t.Sec), 4, GREEN);
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <start_LCD_Task+0xa18>)
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b29b      	uxth	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	4413      	add	r3, r2
 8004072:	b29a      	uxth	r2, r3
 8004074:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2304      	movs	r3, #4
 800407c:	2151      	movs	r1, #81	; 0x51
 800407e:	200a      	movs	r0, #10
 8004080:	f7fd fa4e 	bl	8001520 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <start_LCD_Task+0xa18>)
 8004086:	799b      	ldrb	r3, [r3, #6]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d108      	bne.n	800409e <start_LCD_Task+0x9d6>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 800408c:	2300      	movs	r3, #0
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2304      	movs	r3, #4
 8004092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004096:	2151      	movs	r1, #81	; 0x51
 8004098:	200a      	movs	r0, #10
 800409a:	f7fd fa41 	bl	8001520 <ILI9341_Draw_Rectangle>
					}

					// Updating blink two points on LCD
					if(two_point == true)
 800409e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d026      	beq.n	80040f4 <start_LCD_Task+0xa2c>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 80040a6:	2300      	movs	r3, #0
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	230a      	movs	r3, #10
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040b2:	2201      	movs	r2, #1
 80040b4:	2187      	movs	r1, #135	; 0x87
 80040b6:	480e      	ldr	r0, [pc, #56]	; (80040f0 <start_LCD_Task+0xa28>)
 80040b8:	f7fc fe24 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80040c2:	e025      	b.n	8004110 <start_LCD_Task+0xa48>
 80040c4:	0800d250 	.word	0x0800d250
 80040c8:	0800d258 	.word	0x0800d258
 80040cc:	0800d264 	.word	0x0800d264
 80040d0:	0800d270 	.word	0x0800d270
 80040d4:	0800d278 	.word	0x0800d278
 80040d8:	0800d284 	.word	0x0800d284
 80040dc:	20000004 	.word	0x20000004
 80040e0:	20000460 	.word	0x20000460
 80040e4:	0800d1fc 	.word	0x0800d1fc
 80040e8:	0800d21c 	.word	0x0800d21c
 80040ec:	0800d220 	.word	0x0800d220
 80040f0:	0800d224 	.word	0x0800d224
					}
					else
					{
						ILI9341_Draw_Text(" ", 135, 1, GREEN, 10, BLACK);
 80040f4:	2300      	movs	r3, #0
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	230a      	movs	r3, #10
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004100:	2201      	movs	r2, #1
 8004102:	2187      	movs	r1, #135	; 0x87
 8004104:	4873      	ldr	r0, [pc, #460]	; (80042d4 <start_LCD_Task+0xc0c>)
 8004106:	f7fc fdfd 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
					}

					if(QUEUE_RTC_t.Sec == 0)
 8004110:	4b71      	ldr	r3, [pc, #452]	; (80042d8 <start_LCD_Task+0xc10>)
 8004112:	799b      	ldrb	r3, [r3, #6]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 80da 	bne.w	80042ce <start_LCD_Task+0xc06>
					{
						// Date
						ILI9341_Draw_Text("        ", 10, 86, BLUE, 4, BLACK);
 800411a:	2300      	movs	r3, #0
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	2304      	movs	r3, #4
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	231f      	movs	r3, #31
 8004124:	2256      	movs	r2, #86	; 0x56
 8004126:	210a      	movs	r1, #10
 8004128:	486c      	ldr	r0, [pc, #432]	; (80042dc <start_LCD_Task+0xc14>)
 800412a:	f7fc fdeb 	bl	8000d04 <ILI9341_Draw_Text>
						memset(str_buf, 0 , sizeof(str_buf));
 800412e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004132:	2206      	movs	r2, #6
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f008 fb02 	bl	800c740 <memset>
						sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 800413c:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <start_LCD_Task+0xc10>)
 800413e:	789b      	ldrb	r3, [r3, #2]
 8004140:	461a      	mov	r2, r3
 8004142:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004146:	4966      	ldr	r1, [pc, #408]	; (80042e0 <start_LCD_Task+0xc18>)
 8004148:	4618      	mov	r0, r3
 800414a:	f008 fba5 	bl	800c898 <siprintf>

						strncat(str_date, ".", 1);
 800414e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004152:	4618      	mov	r0, r3
 8004154:	f7fb fffc 	bl	8000150 <strlen>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004160:	4413      	add	r3, r2
 8004162:	4960      	ldr	r1, [pc, #384]	; (80042e4 <start_LCD_Task+0xc1c>)
 8004164:	461a      	mov	r2, r3
 8004166:	460b      	mov	r3, r1
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	8013      	strh	r3, [r2, #0]
						sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 800416c:	4b5a      	ldr	r3, [pc, #360]	; (80042d8 <start_LCD_Task+0xc10>)
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	461a      	mov	r2, r3
 8004172:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004176:	495a      	ldr	r1, [pc, #360]	; (80042e0 <start_LCD_Task+0xc18>)
 8004178:	4618      	mov	r0, r3
 800417a:	f008 fb8d 	bl	800c898 <siprintf>
						strncat(str_date, str_buf, sizeof(str_buf));
 800417e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8004182:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004186:	2206      	movs	r2, #6
 8004188:	4618      	mov	r0, r3
 800418a:	f008 fba5 	bl	800c8d8 <strncat>
						memset(str_buf, 0 , sizeof(str_buf));
 800418e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004192:	2206      	movs	r2, #6
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f008 fad2 	bl	800c740 <memset>
						sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 800419c:	4b4e      	ldr	r3, [pc, #312]	; (80042d8 <start_LCD_Task+0xc10>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80041a6:	494e      	ldr	r1, [pc, #312]	; (80042e0 <start_LCD_Task+0xc18>)
 80041a8:	4618      	mov	r0, r3
 80041aa:	f008 fb75 	bl	800c898 <siprintf>
						strncat(str_date, ".", 1);
 80041ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fb ffcc 	bl	8000150 <strlen>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80041c0:	4413      	add	r3, r2
 80041c2:	4948      	ldr	r1, [pc, #288]	; (80042e4 <start_LCD_Task+0xc1c>)
 80041c4:	461a      	mov	r2, r3
 80041c6:	460b      	mov	r3, r1
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	8013      	strh	r3, [r2, #0]
						strncat(str_date, str_buf, sizeof(str_buf));
 80041cc:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80041d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80041d4:	2206      	movs	r2, #6
 80041d6:	4618      	mov	r0, r3
 80041d8:	f008 fb7e 	bl	800c8d8 <strncat>
						ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 80041dc:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80041e0:	2300      	movs	r3, #0
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	2304      	movs	r3, #4
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	231f      	movs	r3, #31
 80041ea:	2256      	movs	r2, #86	; 0x56
 80041ec:	210a      	movs	r1, #10
 80041ee:	f7fc fd89 	bl	8000d04 <ILI9341_Draw_Text>

						ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 80041f2:	2300      	movs	r3, #0
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	2302      	movs	r3, #2
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	231f      	movs	r3, #31
 80041fc:	2278      	movs	r2, #120	; 0x78
 80041fe:	210a      	movs	r1, #10
 8004200:	4839      	ldr	r0, [pc, #228]	; (80042e8 <start_LCD_Task+0xc20>)
 8004202:	f7fc fd7f 	bl	8000d04 <ILI9341_Draw_Text>

						switch (QUEUE_RTC_t.DaysOfWeek)
 8004206:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <start_LCD_Task+0xc10>)
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	3b01      	subs	r3, #1
 800420c:	2b06      	cmp	r3, #6
 800420e:	f63f aaea 	bhi.w	80037e6 <start_LCD_Task+0x11e>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <start_LCD_Task+0xb50>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	08004235 	.word	0x08004235
 800421c:	0800424b 	.word	0x0800424b
 8004220:	08004261 	.word	0x08004261
 8004224:	08004277 	.word	0x08004277
 8004228:	0800428d 	.word	0x0800428d
 800422c:	080042a3 	.word	0x080042a3
 8004230:	080042b9 	.word	0x080042b9
						{
							case 1:
								ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 8004234:	2300      	movs	r3, #0
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	2302      	movs	r3, #2
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	231f      	movs	r3, #31
 800423e:	2278      	movs	r2, #120	; 0x78
 8004240:	210a      	movs	r1, #10
 8004242:	482a      	ldr	r0, [pc, #168]	; (80042ec <start_LCD_Task+0xc24>)
 8004244:	f7fc fd5e 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004248:	e042      	b.n	80042d0 <start_LCD_Task+0xc08>
							case 2:
								ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 800424a:	2300      	movs	r3, #0
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	2302      	movs	r3, #2
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	231f      	movs	r3, #31
 8004254:	2278      	movs	r2, #120	; 0x78
 8004256:	210a      	movs	r1, #10
 8004258:	4825      	ldr	r0, [pc, #148]	; (80042f0 <start_LCD_Task+0xc28>)
 800425a:	f7fc fd53 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 800425e:	e037      	b.n	80042d0 <start_LCD_Task+0xc08>
							case 3:
								ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 8004260:	2300      	movs	r3, #0
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	2302      	movs	r3, #2
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	231f      	movs	r3, #31
 800426a:	2278      	movs	r2, #120	; 0x78
 800426c:	210a      	movs	r1, #10
 800426e:	4821      	ldr	r0, [pc, #132]	; (80042f4 <start_LCD_Task+0xc2c>)
 8004270:	f7fc fd48 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004274:	e02c      	b.n	80042d0 <start_LCD_Task+0xc08>
							case 4:
								ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 8004276:	2300      	movs	r3, #0
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	2302      	movs	r3, #2
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	231f      	movs	r3, #31
 8004280:	2278      	movs	r2, #120	; 0x78
 8004282:	210a      	movs	r1, #10
 8004284:	481c      	ldr	r0, [pc, #112]	; (80042f8 <start_LCD_Task+0xc30>)
 8004286:	f7fc fd3d 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 800428a:	e021      	b.n	80042d0 <start_LCD_Task+0xc08>
							case 5:
								ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 800428c:	2300      	movs	r3, #0
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	2302      	movs	r3, #2
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	231f      	movs	r3, #31
 8004296:	2278      	movs	r2, #120	; 0x78
 8004298:	210a      	movs	r1, #10
 800429a:	4818      	ldr	r0, [pc, #96]	; (80042fc <start_LCD_Task+0xc34>)
 800429c:	f7fc fd32 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80042a0:	e016      	b.n	80042d0 <start_LCD_Task+0xc08>
							case 6:
								ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 80042a2:	2300      	movs	r3, #0
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	2302      	movs	r3, #2
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	231f      	movs	r3, #31
 80042ac:	2278      	movs	r2, #120	; 0x78
 80042ae:	210a      	movs	r1, #10
 80042b0:	4813      	ldr	r0, [pc, #76]	; (8004300 <start_LCD_Task+0xc38>)
 80042b2:	f7fc fd27 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80042b6:	e00b      	b.n	80042d0 <start_LCD_Task+0xc08>
							case 7:
								ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 80042b8:	2300      	movs	r3, #0
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	2302      	movs	r3, #2
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	231f      	movs	r3, #31
 80042c2:	2278      	movs	r2, #120	; 0x78
 80042c4:	210a      	movs	r1, #10
 80042c6:	480f      	ldr	r0, [pc, #60]	; (8004304 <start_LCD_Task+0xc3c>)
 80042c8:	f7fc fd1c 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80042cc:	e000      	b.n	80042d0 <start_LCD_Task+0xc08>
						}

					}
 80042ce:	bf00      	nop
		if(osSemaphoreAcquire(LCD_SemHandle, 100) == osOK)	// Print RTS time and data settings
 80042d0:	f7ff ba89 	b.w	80037e6 <start_LCD_Task+0x11e>
 80042d4:	0800d228 	.word	0x0800d228
 80042d8:	20000460 	.word	0x20000460
 80042dc:	0800d22c 	.word	0x0800d22c
 80042e0:	0800d1fc 	.word	0x0800d1fc
 80042e4:	0800d238 	.word	0x0800d238
 80042e8:	0800d23c 	.word	0x0800d23c
 80042ec:	0800d248 	.word	0x0800d248
 80042f0:	0800d250 	.word	0x0800d250
 80042f4:	0800d258 	.word	0x0800d258
 80042f8:	0800d264 	.word	0x0800d264
 80042fc:	0800d270 	.word	0x0800d270
 8004300:	0800d278 	.word	0x0800d278
 8004304:	0800d284 	.word	0x0800d284

08004308 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// NEw VERSION
	if (htim->Instance == TIM3)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a45      	ldr	r2, [pc, #276]	; (800442c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d173      	bne.n	8004402 <HAL_TIM_PeriodElapsedCallback+0xfa>
	{
		BaseType_t xHigherPriorityTaskWoken;

		uint16_t key_1 = 1;
 800431a:	2301      	movs	r3, #1
 800431c:	827b      	strh	r3, [r7, #18]
		uint16_t key_2 = 2;
 800431e:	2302      	movs	r3, #2
 8004320:	823b      	strh	r3, [r7, #16]
		uint16_t key_3 = 3;
 8004322:	2303      	movs	r3, #3
 8004324:	81fb      	strh	r3, [r7, #14]
		uint16_t key_4 = 4;
 8004326:	2304      	movs	r3, #4
 8004328:	81bb      	strh	r3, [r7, #12]

		if(HAL_GPIO_ReadPin(GPIOA, KEY_1_Pin) == GPIO_PIN_RESET)
 800432a:	2110      	movs	r1, #16
 800432c:	4840      	ldr	r0, [pc, #256]	; (8004430 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800432e:	f000 fe8d 	bl	800504c <HAL_GPIO_ReadPin>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d113      	bne.n	8004360 <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			//HAL_GPIO_TogglePin(GPIOC, LED_Pin);
			state = true;
 8004338:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 800433e:	483e      	ldr	r0, [pc, #248]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004340:	f003 fbe8 	bl	8007b14 <HAL_TIM_Base_Stop_IT>

			if((xQueueSendFromISR( buttonQueueHandle, &key_1, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 8004344:	4b3d      	ldr	r3, [pc, #244]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f107 0214 	add.w	r2, r7, #20
 800434c:	f107 0112 	add.w	r1, r7, #18
 8004350:	2300      	movs	r3, #0
 8004352:	f005 fc71 	bl	8009c38 <xQueueGenericSendFromISR>
			{
				// Error
			}
			// Set semaphore
			osSemaphoreRelease(set_rts_val_SemHandle);
 8004356:	4b3a      	ldr	r3, [pc, #232]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f004 ff4c 	bl	80091f8 <osSemaphoreRelease>
		}

		if(HAL_GPIO_ReadPin(GPIOA, KEY_2_Pin) == GPIO_PIN_RESET)
 8004360:	2108      	movs	r1, #8
 8004362:	4833      	ldr	r0, [pc, #204]	; (8004430 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004364:	f000 fe72 	bl	800504c <HAL_GPIO_ReadPin>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d113      	bne.n	8004396 <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			//HAL_GPIO_TogglePin(GPIOC, LED_Pin);
			state = true;
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 8004374:	4830      	ldr	r0, [pc, #192]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004376:	f003 fbcd 	bl	8007b14 <HAL_TIM_Base_Stop_IT>

			if((xQueueSendFromISR( buttonQueueHandle, &key_2, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 800437a:	4b30      	ldr	r3, [pc, #192]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	f107 0214 	add.w	r2, r7, #20
 8004382:	f107 0110 	add.w	r1, r7, #16
 8004386:	2300      	movs	r3, #0
 8004388:	f005 fc56 	bl	8009c38 <xQueueGenericSendFromISR>
			{
				// Error
			}
			// Set semaphore
			osSemaphoreRelease(set_rts_val_SemHandle);
 800438c:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f004 ff31 	bl	80091f8 <osSemaphoreRelease>
		}

		if(HAL_GPIO_ReadPin(GPIOA, KEY_3_Pin) == GPIO_PIN_RESET)
 8004396:	2104      	movs	r1, #4
 8004398:	4825      	ldr	r0, [pc, #148]	; (8004430 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800439a:	f000 fe57 	bl	800504c <HAL_GPIO_ReadPin>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d113      	bne.n	80043cc <HAL_TIM_PeriodElapsedCallback+0xc4>
		{
			//HAL_GPIO_TogglePin(GPIOC, LED_Pin);
			state = true;
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 80043aa:	4823      	ldr	r0, [pc, #140]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80043ac:	f003 fbb2 	bl	8007b14 <HAL_TIM_Base_Stop_IT>

			if((xQueueSendFromISR( buttonQueueHandle, &key_3, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 80043b0:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	f107 0214 	add.w	r2, r7, #20
 80043b8:	f107 010e 	add.w	r1, r7, #14
 80043bc:	2300      	movs	r3, #0
 80043be:	f005 fc3b 	bl	8009c38 <xQueueGenericSendFromISR>
			{
				// Error
			}
			// Set semaphore
			osSemaphoreRelease(set_rts_val_SemHandle);
 80043c2:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f004 ff16 	bl	80091f8 <osSemaphoreRelease>
		}

		if(HAL_GPIO_ReadPin(GPIOA, KEY_4_Pin) == GPIO_PIN_RESET)
 80043cc:	2102      	movs	r1, #2
 80043ce:	4818      	ldr	r0, [pc, #96]	; (8004430 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80043d0:	f000 fe3c 	bl	800504c <HAL_GPIO_ReadPin>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d113      	bne.n	8004402 <HAL_TIM_PeriodElapsedCallback+0xfa>
		{
			//HAL_GPIO_TogglePin(GPIOC, LED_Pin);
			state = true;
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 80043e0:	4815      	ldr	r0, [pc, #84]	; (8004438 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80043e2:	f003 fb97 	bl	8007b14 <HAL_TIM_Base_Stop_IT>

			if((xQueueSendFromISR( buttonQueueHandle, &key_4, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	f107 0214 	add.w	r2, r7, #20
 80043ee:	f107 010c 	add.w	r1, r7, #12
 80043f2:	2300      	movs	r3, #0
 80043f4:	f005 fc20 	bl	8009c38 <xQueueGenericSendFromISR>
			{
				// Error
			}
			// Set semaphore
			osSemaphoreRelease(set_rts_val_SemHandle);
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f004 fefb 	bl	80091f8 <osSemaphoreRelease>
		}
	}

	// Timer for measure how many time task was running.
	if(htim->Instance == TIM2)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PeriodElapsedCallback+0x10e>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 800440c:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3301      	adds	r3, #1
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004414:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a0b      	ldr	r2, [pc, #44]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <HAL_TIM_PeriodElapsedCallback+0x11c>
    HAL_IncTick();
 8004420:	f000 fac0 	bl	80049a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004424:	bf00      	nop
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40000400 	.word	0x40000400
 8004430:	40010800 	.word	0x40010800
 8004434:	20000005 	.word	0x20000005
 8004438:	2000019c 	.word	0x2000019c
 800443c:	20000298 	.word	0x20000298
 8004440:	20000458 	.word	0x20000458
 8004444:	200000a4 	.word	0x200000a4
 8004448:	40000800 	.word	0x40000800

0800444c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004450:	b672      	cpsid	i
}
 8004452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004454:	e7fe      	b.n	8004454 <Error_Handler+0x8>
	...

08004458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800445e:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <HAL_MspInit+0x78>)
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	4a1b      	ldr	r2, [pc, #108]	; (80044d0 <HAL_MspInit+0x78>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6193      	str	r3, [r2, #24]
 800446a:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_MspInit+0x78>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <HAL_MspInit+0x78>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <HAL_MspInit+0x78>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004480:	61d3      	str	r3, [r2, #28]
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <HAL_MspInit+0x78>)
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800448e:	2200      	movs	r2, #0
 8004490:	210f      	movs	r1, #15
 8004492:	f06f 0001 	mvn.w	r0, #1
 8004496:	f000 fb7a 	bl	8004b8e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	2105      	movs	r1, #5
 800449e:	2001      	movs	r0, #1
 80044a0:	f000 fb75 	bl	8004b8e <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80044a4:	2001      	movs	r0, #1
 80044a6:	f000 fb8e 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80044aa:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <HAL_MspInit+0x7c>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <HAL_MspInit+0x7c>)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40010000 	.word	0x40010000

080044d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e0:	f107 0310 	add.w	r3, r7, #16
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	609a      	str	r2, [r3, #8]
 80044ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_I2C_MspInit+0x70>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d123      	bne.n	8004540 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <HAL_I2C_MspInit+0x74>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <HAL_I2C_MspInit+0x74>)
 80044fe:	f043 0308 	orr.w	r3, r3, #8
 8004502:	6193      	str	r3, [r2, #24]
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <HAL_I2C_MspInit+0x74>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004510:	23c0      	movs	r3, #192	; 0xc0
 8004512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004514:	2312      	movs	r3, #18
 8004516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004518:	2303      	movs	r3, #3
 800451a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451c:	f107 0310 	add.w	r3, r7, #16
 8004520:	4619      	mov	r1, r3
 8004522:	480b      	ldr	r0, [pc, #44]	; (8004550 <HAL_I2C_MspInit+0x78>)
 8004524:	f000 fc0e 	bl	8004d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004528:	4b08      	ldr	r3, [pc, #32]	; (800454c <HAL_I2C_MspInit+0x74>)
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4a07      	ldr	r2, [pc, #28]	; (800454c <HAL_I2C_MspInit+0x74>)
 800452e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004532:	61d3      	str	r3, [r2, #28]
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_I2C_MspInit+0x74>)
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004540:	bf00      	nop
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40005400 	.word	0x40005400
 800454c:	40021000 	.word	0x40021000
 8004550:	40010c00 	.word	0x40010c00

08004554 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800455c:	f107 0310 	add.w	r3, r7, #16
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_SPI_MspInit+0x98>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d137      	bne.n	80045e4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004574:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_SPI_MspInit+0x9c>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <HAL_SPI_MspInit+0x9c>)
 800457a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800457e:	6193      	str	r3, [r2, #24]
 8004580:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <HAL_SPI_MspInit+0x9c>)
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800458c:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <HAL_SPI_MspInit+0x9c>)
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <HAL_SPI_MspInit+0x9c>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	6193      	str	r3, [r2, #24]
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_SPI_MspInit+0x9c>)
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80045a4:	23a0      	movs	r3, #160	; 0xa0
 80045a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a8:	2302      	movs	r3, #2
 80045aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ac:	2303      	movs	r3, #3
 80045ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b0:	f107 0310 	add.w	r3, r7, #16
 80045b4:	4619      	mov	r1, r3
 80045b6:	480f      	ldr	r0, [pc, #60]	; (80045f4 <HAL_SPI_MspInit+0xa0>)
 80045b8:	f000 fbc4 	bl	8004d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045bc:	2340      	movs	r3, #64	; 0x40
 80045be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c8:	f107 0310 	add.w	r3, r7, #16
 80045cc:	4619      	mov	r1, r3
 80045ce:	4809      	ldr	r0, [pc, #36]	; (80045f4 <HAL_SPI_MspInit+0xa0>)
 80045d0:	f000 fbb8 	bl	8004d44 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80045d4:	2200      	movs	r2, #0
 80045d6:	2105      	movs	r1, #5
 80045d8:	2023      	movs	r0, #35	; 0x23
 80045da:	f000 fad8 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80045de:	2023      	movs	r0, #35	; 0x23
 80045e0:	f000 faf1 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80045e4:	bf00      	nop
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40013000 	.word	0x40013000
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40010800 	.word	0x40010800

080045f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004608:	d114      	bne.n	8004634 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_TIM_Base_MspInit+0x78>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIM_Base_MspInit+0x78>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	61d3      	str	r3, [r2, #28]
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_TIM_Base_MspInit+0x78>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004622:	2200      	movs	r2, #0
 8004624:	2105      	movs	r1, #5
 8004626:	201c      	movs	r0, #28
 8004628:	f000 fab1 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800462c:	201c      	movs	r0, #28
 800462e:	f000 faca 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004632:	e018      	b.n	8004666 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0e      	ldr	r2, [pc, #56]	; (8004674 <HAL_TIM_Base_MspInit+0x7c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d113      	bne.n	8004666 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_TIM_Base_MspInit+0x78>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	4a0b      	ldr	r2, [pc, #44]	; (8004670 <HAL_TIM_Base_MspInit+0x78>)
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	61d3      	str	r3, [r2, #28]
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_TIM_Base_MspInit+0x78>)
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004656:	2200      	movs	r2, #0
 8004658:	2105      	movs	r1, #5
 800465a:	201d      	movs	r0, #29
 800465c:	f000 fa97 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004660:	201d      	movs	r0, #29
 8004662:	f000 fab0 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	40000400 	.word	0x40000400

08004678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	f107 0310 	add.w	r3, r7, #16
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a20      	ldr	r2, [pc, #128]	; (8004714 <HAL_UART_MspInit+0x9c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d139      	bne.n	800470c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004698:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <HAL_UART_MspInit+0xa0>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	4a1e      	ldr	r2, [pc, #120]	; (8004718 <HAL_UART_MspInit+0xa0>)
 800469e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046a2:	6193      	str	r3, [r2, #24]
 80046a4:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_UART_MspInit+0xa0>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b0:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_UART_MspInit+0xa0>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4a18      	ldr	r2, [pc, #96]	; (8004718 <HAL_UART_MspInit+0xa0>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	6193      	str	r3, [r2, #24]
 80046bc:	4b16      	ldr	r3, [pc, #88]	; (8004718 <HAL_UART_MspInit+0xa0>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ce:	2302      	movs	r3, #2
 80046d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046d2:	2303      	movs	r3, #3
 80046d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d6:	f107 0310 	add.w	r3, r7, #16
 80046da:	4619      	mov	r1, r3
 80046dc:	480f      	ldr	r0, [pc, #60]	; (800471c <HAL_UART_MspInit+0xa4>)
 80046de:	f000 fb31 	bl	8004d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	4619      	mov	r1, r3
 80046f6:	4809      	ldr	r0, [pc, #36]	; (800471c <HAL_UART_MspInit+0xa4>)
 80046f8:	f000 fb24 	bl	8004d44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80046fc:	2200      	movs	r2, #0
 80046fe:	2105      	movs	r1, #5
 8004700:	2025      	movs	r0, #37	; 0x25
 8004702:	f000 fa44 	bl	8004b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004706:	2025      	movs	r0, #37	; 0x25
 8004708:	f000 fa5d 	bl	8004bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800470c:	bf00      	nop
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40013800 	.word	0x40013800
 8004718:	40021000 	.word	0x40021000
 800471c:	40010800 	.word	0x40010800

08004720 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	; 0x30
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8004730:	2200      	movs	r2, #0
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	201e      	movs	r0, #30
 8004736:	f000 fa2a 	bl	8004b8e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800473a:	201e      	movs	r0, #30
 800473c:	f000 fa43 	bl	8004bc6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004740:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <HAL_InitTick+0xa0>)
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <HAL_InitTick+0xa0>)
 8004746:	f043 0304 	orr.w	r3, r3, #4
 800474a:	61d3      	str	r3, [r2, #28]
 800474c:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <HAL_InitTick+0xa0>)
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004758:	f107 0210 	add.w	r2, r7, #16
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	4611      	mov	r1, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f002 fd7c 	bl	8007260 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004768:	f002 fd52 	bl	8007210 <HAL_RCC_GetPCLK1Freq>
 800476c:	4603      	mov	r3, r0
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_InitTick+0xa4>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	0c9b      	lsrs	r3, r3, #18
 800477c:	3b01      	subs	r3, #1
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_InitTick+0xa8>)
 8004782:	4a12      	ldr	r2, [pc, #72]	; (80047cc <HAL_InitTick+0xac>)
 8004784:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_InitTick+0xa8>)
 8004788:	f240 32e7 	movw	r2, #999	; 0x3e7
 800478c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800478e:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <HAL_InitTick+0xa8>)
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <HAL_InitTick+0xa8>)
 8004796:	2200      	movs	r2, #0
 8004798:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_InitTick+0xa8>)
 800479c:	2200      	movs	r2, #0
 800479e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80047a0:	4809      	ldr	r0, [pc, #36]	; (80047c8 <HAL_InitTick+0xa8>)
 80047a2:	f003 f915 	bl	80079d0 <HAL_TIM_Base_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80047ac:	4806      	ldr	r0, [pc, #24]	; (80047c8 <HAL_InitTick+0xa8>)
 80047ae:	f003 f95f 	bl	8007a70 <HAL_TIM_Base_Start_IT>
 80047b2:	4603      	mov	r3, r0
 80047b4:	e000      	b.n	80047b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3730      	adds	r7, #48	; 0x30
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40021000 	.word	0x40021000
 80047c4:	431bde83 	.word	0x431bde83
 80047c8:	20000494 	.word	0x20000494
 80047cc:	40000800 	.word	0x40000800

080047d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047d4:	e7fe      	b.n	80047d4 <NMI_Handler+0x4>

080047d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047d6:	b480      	push	{r7}
 80047d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047da:	e7fe      	b.n	80047da <HardFault_Handler+0x4>

080047dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047e0:	e7fe      	b.n	80047e0 <MemManage_Handler+0x4>

080047e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047e6:	e7fe      	b.n	80047e6 <BusFault_Handler+0x4>

080047e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047ec:	e7fe      	b.n	80047ec <UsageFault_Handler+0x4>

080047ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047ee:	b480      	push	{r7}
 80047f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047f2:	bf00      	nop
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80047fe:	f002 f91b 	bl	8006a38 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	bd80      	pop	{r7, pc}

08004806 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_4_Pin);
 800480a:	2002      	movs	r0, #2
 800480c:	f000 fc4e 	bl	80050ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}

08004814 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_3_Pin);
 8004818:	2004      	movs	r0, #4
 800481a:	f000 fc47 	bl	80050ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}

08004822 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_2_Pin);
 8004826:	2008      	movs	r0, #8
 8004828:	f000 fc40 	bl	80050ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800482c:	bf00      	nop
 800482e:	bd80      	pop	{r7, pc}

08004830 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_1_Pin);
 8004834:	2010      	movs	r0, #16
 8004836:	f000 fc39 	bl	80050ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800483a:	bf00      	nop
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <TIM2_IRQHandler+0x10>)
 8004846:	f003 f993 	bl	8007b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000154 	.word	0x20000154

08004854 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004858:	4802      	ldr	r0, [pc, #8]	; (8004864 <TIM3_IRQHandler+0x10>)
 800485a:	f003 f989 	bl	8007b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	2000019c 	.word	0x2000019c

08004868 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800486c:	4802      	ldr	r0, [pc, #8]	; (8004878 <TIM4_IRQHandler+0x10>)
 800486e:	f003 f97f 	bl	8007b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000494 	.word	0x20000494

0800487c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004880:	4802      	ldr	r0, [pc, #8]	; (800488c <SPI1_IRQHandler+0x10>)
 8004882:	f002 fefb 	bl	800767c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	200000fc 	.word	0x200000fc

08004890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004894:	4802      	ldr	r0, [pc, #8]	; (80048a0 <USART1_IRQHandler+0x10>)
 8004896:	f003 fd11 	bl	80082bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	200001e4 	.word	0x200001e4

080048a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERUPT_FROM_RTC_Pin);
 80048a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80048ac:	f000 fbfe 	bl	80050ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <_sbrk+0x5c>)
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <_sbrk+0x60>)
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048c8:	4b13      	ldr	r3, [pc, #76]	; (8004918 <_sbrk+0x64>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <_sbrk+0x64>)
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <_sbrk+0x68>)
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <_sbrk+0x64>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d207      	bcs.n	80048f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048e4:	f007 fef2 	bl	800c6cc <__errno>
 80048e8:	4603      	mov	r3, r0
 80048ea:	220c      	movs	r2, #12
 80048ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048f2:	e009      	b.n	8004908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048f4:	4b08      	ldr	r3, [pc, #32]	; (8004918 <_sbrk+0x64>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <_sbrk+0x64>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	4a05      	ldr	r2, [pc, #20]	; (8004918 <_sbrk+0x64>)
 8004904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004906:	68fb      	ldr	r3, [r7, #12]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20005000 	.word	0x20005000
 8004914:	00000400 	.word	0x00000400
 8004918:	200004dc 	.word	0x200004dc
 800491c:	200038d8 	.word	0x200038d8

08004920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800492c:	480c      	ldr	r0, [pc, #48]	; (8004960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800492e:	490d      	ldr	r1, [pc, #52]	; (8004964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004930:	4a0d      	ldr	r2, [pc, #52]	; (8004968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004934:	e002      	b.n	800493c <LoopCopyDataInit>

08004936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800493a:	3304      	adds	r3, #4

0800493c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800493c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800493e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004940:	d3f9      	bcc.n	8004936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004942:	4a0a      	ldr	r2, [pc, #40]	; (800496c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004944:	4c0a      	ldr	r4, [pc, #40]	; (8004970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004948:	e001      	b.n	800494e <LoopFillZerobss>

0800494a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800494a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800494c:	3204      	adds	r2, #4

0800494e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800494e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004950:	d3fb      	bcc.n	800494a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004952:	f7ff ffe5 	bl	8004920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004956:	f007 febf 	bl	800c6d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800495a:	f7fd fe8f 	bl	800267c <main>
  bx lr
 800495e:	4770      	bx	lr
  ldr r0, =_sdata
 8004960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004964:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004968:	0800d790 	.word	0x0800d790
  ldr r2, =_sbss
 800496c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004970:	200038d8 	.word	0x200038d8

08004974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004974:	e7fe      	b.n	8004974 <ADC1_2_IRQHandler>
	...

08004978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800497c:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_Init+0x28>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a07      	ldr	r2, [pc, #28]	; (80049a0 <HAL_Init+0x28>)
 8004982:	f043 0310 	orr.w	r3, r3, #16
 8004986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004988:	2003      	movs	r0, #3
 800498a:	f000 f8f5 	bl	8004b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800498e:	200f      	movs	r0, #15
 8004990:	f7ff fec6 	bl	8004720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004994:	f7ff fd60 	bl	8004458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40022000 	.word	0x40022000

080049a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_IncTick+0x1c>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_IncTick+0x20>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4413      	add	r3, r2
 80049b4:	4a03      	ldr	r2, [pc, #12]	; (80049c4 <HAL_IncTick+0x20>)
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	20000018 	.word	0x20000018
 80049c4:	200004e0 	.word	0x200004e0

080049c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return uwTick;
 80049cc:	4b02      	ldr	r3, [pc, #8]	; (80049d8 <HAL_GetTick+0x10>)
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	200004e0 	.word	0x200004e0

080049dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049e4:	f7ff fff0 	bl	80049c8 <HAL_GetTick>
 80049e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f4:	d005      	beq.n	8004a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_Delay+0x44>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a02:	bf00      	nop
 8004a04:	f7ff ffe0 	bl	80049c8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d8f7      	bhi.n	8004a04 <HAL_Delay+0x28>
  {
  }
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000018 	.word	0x20000018

08004a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a40:	4013      	ands	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a56:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	60d3      	str	r3, [r2, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a70:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <__NVIC_GetPriorityGrouping+0x18>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f003 0307 	and.w	r3, r3, #7
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	e000ed00 	.word	0xe000ed00

08004a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	db0b      	blt.n	8004ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	f003 021f 	and.w	r2, r3, #31
 8004aa0:	4906      	ldr	r1, [pc, #24]	; (8004abc <__NVIC_EnableIRQ+0x34>)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	e000e100 	.word	0xe000e100

08004ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	6039      	str	r1, [r7, #0]
 8004aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	db0a      	blt.n	8004aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	490c      	ldr	r1, [pc, #48]	; (8004b0c <__NVIC_SetPriority+0x4c>)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	0112      	lsls	r2, r2, #4
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ae8:	e00a      	b.n	8004b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	4908      	ldr	r1, [pc, #32]	; (8004b10 <__NVIC_SetPriority+0x50>)
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	3b04      	subs	r3, #4
 8004af8:	0112      	lsls	r2, r2, #4
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	440b      	add	r3, r1
 8004afe:	761a      	strb	r2, [r3, #24]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	e000e100 	.word	0xe000e100
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b089      	sub	sp, #36	; 0x24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f1c3 0307 	rsb	r3, r3, #7
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	bf28      	it	cs
 8004b32:	2304      	movcs	r3, #4
 8004b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	2b06      	cmp	r3, #6
 8004b3c:	d902      	bls.n	8004b44 <NVIC_EncodePriority+0x30>
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3b03      	subs	r3, #3
 8004b42:	e000      	b.n	8004b46 <NVIC_EncodePriority+0x32>
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43da      	mvns	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	401a      	ands	r2, r3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	43d9      	mvns	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b6c:	4313      	orrs	r3, r2
         );
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3724      	adds	r7, #36	; 0x24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ff4f 	bl	8004a24 <__NVIC_SetPriorityGrouping>
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ba0:	f7ff ff64 	bl	8004a6c <__NVIC_GetPriorityGrouping>
 8004ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f7ff ffb2 	bl	8004b14 <NVIC_EncodePriority>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff ff81 	bl	8004ac0 <__NVIC_SetPriority>
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	4603      	mov	r3, r0
 8004bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff57 	bl	8004a88 <__NVIC_EnableIRQ>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d008      	beq.n	8004c0a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e020      	b.n	8004c4c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 020e 	bic.w	r2, r2, #14
 8004c18:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	2101      	movs	r1, #1
 8004c34:	fa01 f202 	lsl.w	r2, r1, r2
 8004c38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr
	...

08004c58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d005      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	e051      	b.n	8004d1e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 020e 	bic.w	r2, r2, #14
 8004c88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_DMA_Abort_IT+0xd0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d029      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xa0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <HAL_DMA_Abort_IT+0xd4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d022      	beq.n	8004cf4 <HAL_DMA_Abort_IT+0x9c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_DMA_Abort_IT+0xd8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01a      	beq.n	8004cee <HAL_DMA_Abort_IT+0x96>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <HAL_DMA_Abort_IT+0xdc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d012      	beq.n	8004ce8 <HAL_DMA_Abort_IT+0x90>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <HAL_DMA_Abort_IT+0xe0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00a      	beq.n	8004ce2 <HAL_DMA_Abort_IT+0x8a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1a      	ldr	r2, [pc, #104]	; (8004d3c <HAL_DMA_Abort_IT+0xe4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d102      	bne.n	8004cdc <HAL_DMA_Abort_IT+0x84>
 8004cd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cda:	e00e      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ce0:	e00b      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ce6:	e008      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cec:	e005      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cf2:	e002      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	e000      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <HAL_DMA_Abort_IT+0xe8>)
 8004cfc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
    } 
  }
  return status;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40020008 	.word	0x40020008
 8004d2c:	4002001c 	.word	0x4002001c
 8004d30:	40020030 	.word	0x40020030
 8004d34:	40020044 	.word	0x40020044
 8004d38:	40020058 	.word	0x40020058
 8004d3c:	4002006c 	.word	0x4002006c
 8004d40:	40020000 	.word	0x40020000

08004d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b08b      	sub	sp, #44	; 0x2c
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d56:	e169      	b.n	800502c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d58:	2201      	movs	r2, #1
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	f040 8158 	bne.w	8005026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4a9a      	ldr	r2, [pc, #616]	; (8004fe4 <HAL_GPIO_Init+0x2a0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d05e      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004d80:	4a98      	ldr	r2, [pc, #608]	; (8004fe4 <HAL_GPIO_Init+0x2a0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d875      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004d86:	4a98      	ldr	r2, [pc, #608]	; (8004fe8 <HAL_GPIO_Init+0x2a4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d058      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004d8c:	4a96      	ldr	r2, [pc, #600]	; (8004fe8 <HAL_GPIO_Init+0x2a4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d86f      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004d92:	4a96      	ldr	r2, [pc, #600]	; (8004fec <HAL_GPIO_Init+0x2a8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d052      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004d98:	4a94      	ldr	r2, [pc, #592]	; (8004fec <HAL_GPIO_Init+0x2a8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d869      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004d9e:	4a94      	ldr	r2, [pc, #592]	; (8004ff0 <HAL_GPIO_Init+0x2ac>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04c      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004da4:	4a92      	ldr	r2, [pc, #584]	; (8004ff0 <HAL_GPIO_Init+0x2ac>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d863      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004daa:	4a92      	ldr	r2, [pc, #584]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d046      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004db0:	4a90      	ldr	r2, [pc, #576]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d85d      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004db6:	2b12      	cmp	r3, #18
 8004db8:	d82a      	bhi.n	8004e10 <HAL_GPIO_Init+0xcc>
 8004dba:	2b12      	cmp	r3, #18
 8004dbc:	d859      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <HAL_GPIO_Init+0x80>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004e3f 	.word	0x08004e3f
 8004dc8:	08004e19 	.word	0x08004e19
 8004dcc:	08004e2b 	.word	0x08004e2b
 8004dd0:	08004e6d 	.word	0x08004e6d
 8004dd4:	08004e73 	.word	0x08004e73
 8004dd8:	08004e73 	.word	0x08004e73
 8004ddc:	08004e73 	.word	0x08004e73
 8004de0:	08004e73 	.word	0x08004e73
 8004de4:	08004e73 	.word	0x08004e73
 8004de8:	08004e73 	.word	0x08004e73
 8004dec:	08004e73 	.word	0x08004e73
 8004df0:	08004e73 	.word	0x08004e73
 8004df4:	08004e73 	.word	0x08004e73
 8004df8:	08004e73 	.word	0x08004e73
 8004dfc:	08004e73 	.word	0x08004e73
 8004e00:	08004e73 	.word	0x08004e73
 8004e04:	08004e73 	.word	0x08004e73
 8004e08:	08004e21 	.word	0x08004e21
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	4a79      	ldr	r2, [pc, #484]	; (8004ff8 <HAL_GPIO_Init+0x2b4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e16:	e02c      	b.n	8004e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	623b      	str	r3, [r7, #32]
          break;
 8004e1e:	e029      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	3304      	adds	r3, #4
 8004e26:	623b      	str	r3, [r7, #32]
          break;
 8004e28:	e024      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	623b      	str	r3, [r7, #32]
          break;
 8004e32:	e01f      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	623b      	str	r3, [r7, #32]
          break;
 8004e3c:	e01a      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e46:	2304      	movs	r3, #4
 8004e48:	623b      	str	r3, [r7, #32]
          break;
 8004e4a:	e013      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e54:	2308      	movs	r3, #8
 8004e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	611a      	str	r2, [r3, #16]
          break;
 8004e5e:	e009      	b.n	8004e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e60:	2308      	movs	r3, #8
 8004e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	615a      	str	r2, [r3, #20]
          break;
 8004e6a:	e003      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	623b      	str	r3, [r7, #32]
          break;
 8004e70:	e000      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          break;
 8004e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2bff      	cmp	r3, #255	; 0xff
 8004e78:	d801      	bhi.n	8004e7e <HAL_GPIO_Init+0x13a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	e001      	b.n	8004e82 <HAL_GPIO_Init+0x13e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3304      	adds	r3, #4
 8004e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2bff      	cmp	r3, #255	; 0xff
 8004e88:	d802      	bhi.n	8004e90 <HAL_GPIO_Init+0x14c>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	e002      	b.n	8004e96 <HAL_GPIO_Init+0x152>
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	3b08      	subs	r3, #8
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	210f      	movs	r1, #15
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	6a39      	ldr	r1, [r7, #32]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80b1 	beq.w	8005026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ec4:	4b4d      	ldr	r3, [pc, #308]	; (8004ffc <HAL_GPIO_Init+0x2b8>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4a4c      	ldr	r2, [pc, #304]	; (8004ffc <HAL_GPIO_Init+0x2b8>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6193      	str	r3, [r2, #24]
 8004ed0:	4b4a      	ldr	r3, [pc, #296]	; (8004ffc <HAL_GPIO_Init+0x2b8>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004edc:	4a48      	ldr	r2, [pc, #288]	; (8005000 <HAL_GPIO_Init+0x2bc>)
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4013      	ands	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <HAL_GPIO_Init+0x2c0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_GPIO_Init+0x1ec>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3f      	ldr	r2, [pc, #252]	; (8005008 <HAL_GPIO_Init+0x2c4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00d      	beq.n	8004f2c <HAL_GPIO_Init+0x1e8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3e      	ldr	r2, [pc, #248]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <HAL_GPIO_Init+0x1e4>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3d      	ldr	r2, [pc, #244]	; (8005010 <HAL_GPIO_Init+0x2cc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <HAL_GPIO_Init+0x1e0>
 8004f20:	2303      	movs	r3, #3
 8004f22:	e006      	b.n	8004f32 <HAL_GPIO_Init+0x1ee>
 8004f24:	2304      	movs	r3, #4
 8004f26:	e004      	b.n	8004f32 <HAL_GPIO_Init+0x1ee>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e002      	b.n	8004f32 <HAL_GPIO_Init+0x1ee>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_GPIO_Init+0x1ee>
 8004f30:	2300      	movs	r3, #0
 8004f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f34:	f002 0203 	and.w	r2, r2, #3
 8004f38:	0092      	lsls	r2, r2, #2
 8004f3a:	4093      	lsls	r3, r2
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f42:	492f      	ldr	r1, [pc, #188]	; (8005000 <HAL_GPIO_Init+0x2bc>)
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	089b      	lsrs	r3, r3, #2
 8004f48:	3302      	adds	r3, #2
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d006      	beq.n	8004f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f5c:	4b2d      	ldr	r3, [pc, #180]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	492c      	ldr	r1, [pc, #176]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]
 8004f68:	e006      	b.n	8004f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f6a:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	4928      	ldr	r1, [pc, #160]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d006      	beq.n	8004f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f84:	4b23      	ldr	r3, [pc, #140]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	4922      	ldr	r1, [pc, #136]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
 8004f90:	e006      	b.n	8004fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f92:	4b20      	ldr	r3, [pc, #128]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	491e      	ldr	r1, [pc, #120]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d006      	beq.n	8004fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004fac:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	4918      	ldr	r1, [pc, #96]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	608b      	str	r3, [r1, #8]
 8004fb8:	e006      	b.n	8004fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004fba:	4b16      	ldr	r3, [pc, #88]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	4914      	ldr	r1, [pc, #80]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d021      	beq.n	8005018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	490e      	ldr	r1, [pc, #56]	; (8005014 <HAL_GPIO_Init+0x2d0>)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60cb      	str	r3, [r1, #12]
 8004fe0:	e021      	b.n	8005026 <HAL_GPIO_Init+0x2e2>
 8004fe2:	bf00      	nop
 8004fe4:	10320000 	.word	0x10320000
 8004fe8:	10310000 	.word	0x10310000
 8004fec:	10220000 	.word	0x10220000
 8004ff0:	10210000 	.word	0x10210000
 8004ff4:	10120000 	.word	0x10120000
 8004ff8:	10110000 	.word	0x10110000
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40010000 	.word	0x40010000
 8005004:	40010800 	.word	0x40010800
 8005008:	40010c00 	.word	0x40010c00
 800500c:	40011000 	.word	0x40011000
 8005010:	40011400 	.word	0x40011400
 8005014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_GPIO_Init+0x304>)
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	43db      	mvns	r3, r3
 8005020:	4909      	ldr	r1, [pc, #36]	; (8005048 <HAL_GPIO_Init+0x304>)
 8005022:	4013      	ands	r3, r2
 8005024:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	3301      	adds	r3, #1
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	f47f ae8e 	bne.w	8004d58 <HAL_GPIO_Init+0x14>
  }
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	372c      	adds	r7, #44	; 0x2c
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	40010400 	.word	0x40010400

0800504c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	4013      	ands	r3, r2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
 8005068:	e001      	b.n	800506e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr

0800507a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	807b      	strh	r3, [r7, #2]
 8005086:	4613      	mov	r3, r2
 8005088:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800508a:	787b      	ldrb	r3, [r7, #1]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005090:	887a      	ldrh	r2, [r7, #2]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005096:	e003      	b.n	80050a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005098:	887b      	ldrh	r3, [r7, #2]
 800509a:	041a      	lsls	r2, r3, #16
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	611a      	str	r2, [r3, #16]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
	...

080050ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050b6:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d006      	beq.n	80050d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050c2:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fa98 	bl	8002600 <HAL_GPIO_EXTI_Callback>
  }
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40010400 	.word	0x40010400

080050dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e12b      	b.n	8005346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff f9e8 	bl	80044d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2224      	movs	r2, #36	; 0x24
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800512e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800513e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005140:	f002 f866 	bl	8007210 <HAL_RCC_GetPCLK1Freq>
 8005144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4a81      	ldr	r2, [pc, #516]	; (8005350 <HAL_I2C_Init+0x274>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d807      	bhi.n	8005160 <HAL_I2C_Init+0x84>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a80      	ldr	r2, [pc, #512]	; (8005354 <HAL_I2C_Init+0x278>)
 8005154:	4293      	cmp	r3, r2
 8005156:	bf94      	ite	ls
 8005158:	2301      	movls	r3, #1
 800515a:	2300      	movhi	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e006      	b.n	800516e <HAL_I2C_Init+0x92>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a7d      	ldr	r2, [pc, #500]	; (8005358 <HAL_I2C_Init+0x27c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	bf94      	ite	ls
 8005168:	2301      	movls	r3, #1
 800516a:	2300      	movhi	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e0e7      	b.n	8005346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a78      	ldr	r2, [pc, #480]	; (800535c <HAL_I2C_Init+0x280>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0c9b      	lsrs	r3, r3, #18
 8005180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4a6a      	ldr	r2, [pc, #424]	; (8005350 <HAL_I2C_Init+0x274>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d802      	bhi.n	80051b0 <HAL_I2C_Init+0xd4>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	3301      	adds	r3, #1
 80051ae:	e009      	b.n	80051c4 <HAL_I2C_Init+0xe8>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	4a69      	ldr	r2, [pc, #420]	; (8005360 <HAL_I2C_Init+0x284>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	099b      	lsrs	r3, r3, #6
 80051c2:	3301      	adds	r3, #1
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	430b      	orrs	r3, r1
 80051ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	495c      	ldr	r1, [pc, #368]	; (8005350 <HAL_I2C_Init+0x274>)
 80051e0:	428b      	cmp	r3, r1
 80051e2:	d819      	bhi.n	8005218 <HAL_I2C_Init+0x13c>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1e59      	subs	r1, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80051f2:	1c59      	adds	r1, r3, #1
 80051f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051f8:	400b      	ands	r3, r1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_I2C_Init+0x138>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1e59      	subs	r1, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fbb1 f3f3 	udiv	r3, r1, r3
 800520c:	3301      	adds	r3, #1
 800520e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005212:	e051      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005214:	2304      	movs	r3, #4
 8005216:	e04f      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d111      	bne.n	8005244 <HAL_I2C_Init+0x168>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1e58      	subs	r0, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6859      	ldr	r1, [r3, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	440b      	add	r3, r1
 800522e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005232:	3301      	adds	r3, #1
 8005234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	e012      	b.n	800526a <HAL_I2C_Init+0x18e>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1e58      	subs	r0, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6859      	ldr	r1, [r3, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	0099      	lsls	r1, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	fbb0 f3f3 	udiv	r3, r0, r3
 800525a:	3301      	adds	r3, #1
 800525c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_I2C_Init+0x196>
 800526e:	2301      	movs	r3, #1
 8005270:	e022      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10e      	bne.n	8005298 <HAL_I2C_Init+0x1bc>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1e58      	subs	r0, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	440b      	add	r3, r1
 8005288:	fbb0 f3f3 	udiv	r3, r0, r3
 800528c:	3301      	adds	r3, #1
 800528e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005296:	e00f      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1e58      	subs	r0, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6859      	ldr	r1, [r3, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	0099      	lsls	r1, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ae:	3301      	adds	r3, #1
 80052b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	6809      	ldr	r1, [r1, #0]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6911      	ldr	r1, [r2, #16]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68d2      	ldr	r2, [r2, #12]
 80052f2:	4311      	orrs	r1, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	000186a0 	.word	0x000186a0
 8005354:	001e847f 	.word	0x001e847f
 8005358:	003d08ff 	.word	0x003d08ff
 800535c:	431bde83 	.word	0x431bde83
 8005360:	10624dd3 	.word	0x10624dd3

08005364 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	461a      	mov	r2, r3
 8005370:	460b      	mov	r3, r1
 8005372:	817b      	strh	r3, [r7, #10]
 8005374:	4613      	mov	r3, r2
 8005376:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005378:	f7ff fb26 	bl	80049c8 <HAL_GetTick>
 800537c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b20      	cmp	r3, #32
 8005388:	f040 80e0 	bne.w	800554c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	2319      	movs	r3, #25
 8005392:	2201      	movs	r2, #1
 8005394:	4970      	ldr	r1, [pc, #448]	; (8005558 <HAL_I2C_Master_Transmit+0x1f4>)
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f001 f972 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053a2:	2302      	movs	r3, #2
 80053a4:	e0d3      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_I2C_Master_Transmit+0x50>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e0cc      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d007      	beq.n	80053da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2221      	movs	r2, #33	; 0x21
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2210      	movs	r2, #16
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	893a      	ldrh	r2, [r7, #8]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a50      	ldr	r2, [pc, #320]	; (800555c <HAL_I2C_Master_Transmit+0x1f8>)
 800541a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800541c:	8979      	ldrh	r1, [r7, #10]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	6a3a      	ldr	r2, [r7, #32]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fe5e 	bl	80060e4 <I2C_MasterRequestWrite>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e08d      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005448:	e066      	b.n	8005518 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	6a39      	ldr	r1, [r7, #32]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f001 f9ec 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	2b04      	cmp	r3, #4
 8005460:	d107      	bne.n	8005472 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005470:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e06b      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	781a      	ldrb	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d11b      	bne.n	80054ec <HAL_I2C_Master_Transmit+0x188>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d017      	beq.n	80054ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	6a39      	ldr	r1, [r7, #32]
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f001 f9dc 	bl	80068ae <I2C_WaitOnBTFFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00d      	beq.n	8005518 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	2b04      	cmp	r3, #4
 8005502:	d107      	bne.n	8005514 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005512:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e01a      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d194      	bne.n	800544a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	00100002 	.word	0x00100002
 800555c:	ffff0000 	.word	0xffff0000

08005560 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	; 0x30
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	461a      	mov	r2, r3
 800556c:	460b      	mov	r3, r1
 800556e:	817b      	strh	r3, [r7, #10]
 8005570:	4613      	mov	r3, r2
 8005572:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005578:	f7ff fa26 	bl	80049c8 <HAL_GetTick>
 800557c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b20      	cmp	r3, #32
 8005588:	f040 823f 	bne.w	8005a0a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	2319      	movs	r3, #25
 8005592:	2201      	movs	r2, #1
 8005594:	497f      	ldr	r1, [pc, #508]	; (8005794 <HAL_I2C_Master_Receive+0x234>)
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f001 f872 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
 80055a4:	e232      	b.n	8005a0c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_I2C_Master_Receive+0x54>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e22b      	b.n	8005a0c <HAL_I2C_Master_Receive+0x4ac>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d007      	beq.n	80055da <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2222      	movs	r2, #34	; 0x22
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2210      	movs	r2, #16
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	893a      	ldrh	r2, [r7, #8]
 800560a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4a5f      	ldr	r2, [pc, #380]	; (8005798 <HAL_I2C_Master_Receive+0x238>)
 800561a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800561c:	8979      	ldrh	r1, [r7, #10]
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fde0 	bl	80061e8 <I2C_MasterRequestRead>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e1ec      	b.n	8005a0c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d113      	bne.n	8005662 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	61fb      	str	r3, [r7, #28]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	e1c0      	b.n	80059e4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005666:	2b01      	cmp	r3, #1
 8005668:	d11e      	bne.n	80056a8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005678:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800567a:	b672      	cpsid	i
}
 800567c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056a4:	b662      	cpsie	i
}
 80056a6:	e035      	b.n	8005714 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d11e      	bne.n	80056ee <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056c0:	b672      	cpsid	i
}
 80056c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056ea:	b662      	cpsie	i
}
 80056ec:	e012      	b.n	8005714 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056fe:	2300      	movs	r3, #0
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005714:	e166      	b.n	80059e4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	2b03      	cmp	r3, #3
 800571c:	f200 811f 	bhi.w	800595e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005724:	2b01      	cmp	r3, #1
 8005726:	d123      	bne.n	8005770 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f001 f8ff 	bl	8006930 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e167      	b.n	8005a0c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800576e:	e139      	b.n	80059e4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005774:	2b02      	cmp	r3, #2
 8005776:	d152      	bne.n	800581e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	2200      	movs	r2, #0
 8005780:	4906      	ldr	r1, [pc, #24]	; (800579c <HAL_I2C_Master_Receive+0x23c>)
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 ff7c 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e13c      	b.n	8005a0c <HAL_I2C_Master_Receive+0x4ac>
 8005792:	bf00      	nop
 8005794:	00100002 	.word	0x00100002
 8005798:	ffff0000 	.word	0xffff0000
 800579c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80057a0:	b672      	cpsid	i
}
 80057a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80057e6:	b662      	cpsie	i
}
 80057e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800581c:	e0e2      	b.n	80059e4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	2200      	movs	r2, #0
 8005826:	497b      	ldr	r1, [pc, #492]	; (8005a14 <HAL_I2C_Master_Receive+0x4b4>)
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 ff29 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0e9      	b.n	8005a0c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005846:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005848:	b672      	cpsid	i
}
 800584a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800587e:	4b66      	ldr	r3, [pc, #408]	; (8005a18 <HAL_I2C_Master_Receive+0x4b8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	08db      	lsrs	r3, r3, #3
 8005884:	4a65      	ldr	r2, [pc, #404]	; (8005a1c <HAL_I2C_Master_Receive+0x4bc>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	0a1a      	lsrs	r2, r3, #8
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	00da      	lsls	r2, r3, #3
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	3b01      	subs	r3, #1
 800589c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d118      	bne.n	80058d6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80058c6:	b662      	cpsie	i
}
 80058c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e09a      	b.n	8005a0c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d1d9      	bne.n	8005898 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005926:	b662      	cpsie	i
}
 8005928:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800595c:	e042      	b.n	80059e4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800595e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 ffe4 	bl	8006930 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e04c      	b.n	8005a0c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d118      	bne.n	80059e4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f ae94 	bne.w	8005716 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005a0a:	2302      	movs	r3, #2
  }
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3728      	adds	r7, #40	; 0x28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	00010004 	.word	0x00010004
 8005a18:	20000010 	.word	0x20000010
 8005a1c:	14f8b589 	.word	0x14f8b589

08005a20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	817b      	strh	r3, [r7, #10]
 8005a32:	460b      	mov	r3, r1
 8005a34:	813b      	strh	r3, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a3a:	f7fe ffc5 	bl	80049c8 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	f040 80d9 	bne.w	8005c00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	2319      	movs	r3, #25
 8005a54:	2201      	movs	r2, #1
 8005a56:	496d      	ldr	r1, [pc, #436]	; (8005c0c <HAL_I2C_Mem_Write+0x1ec>)
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 fe11 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
 8005a66:	e0cc      	b.n	8005c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_I2C_Mem_Write+0x56>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e0c5      	b.n	8005c02 <HAL_I2C_Mem_Write+0x1e2>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d007      	beq.n	8005a9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2221      	movs	r2, #33	; 0x21
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2240      	movs	r2, #64	; 0x40
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005acc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a4d      	ldr	r2, [pc, #308]	; (8005c10 <HAL_I2C_Mem_Write+0x1f0>)
 8005adc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ade:	88f8      	ldrh	r0, [r7, #6]
 8005ae0:	893a      	ldrh	r2, [r7, #8]
 8005ae2:	8979      	ldrh	r1, [r7, #10]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	4603      	mov	r3, r0
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fc48 	bl	8006384 <I2C_RequestMemoryWrite>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d052      	beq.n	8005ba0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e081      	b.n	8005c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fe92 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00d      	beq.n	8005b2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d107      	bne.n	8005b26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e06b      	b.n	8005c02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	781a      	ldrb	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d11b      	bne.n	8005ba0 <HAL_I2C_Mem_Write+0x180>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d017      	beq.n	8005ba0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1aa      	bne.n	8005afe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 fe7e 	bl	80068ae <I2C_WaitOnBTFFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d107      	bne.n	8005bd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e016      	b.n	8005c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e000      	b.n	8005c02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c00:	2302      	movs	r3, #2
  }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	00100002 	.word	0x00100002
 8005c10:	ffff0000 	.word	0xffff0000

08005c14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	; 0x30
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	461a      	mov	r2, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	817b      	strh	r3, [r7, #10]
 8005c26:	460b      	mov	r3, r1
 8005c28:	813b      	strh	r3, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c32:	f7fe fec9 	bl	80049c8 <HAL_GetTick>
 8005c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	f040 8244 	bne.w	80060ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	2319      	movs	r3, #25
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	4982      	ldr	r1, [pc, #520]	; (8005e58 <HAL_I2C_Mem_Read+0x244>)
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fd15 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e237      	b.n	80060d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_I2C_Mem_Read+0x5a>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e230      	b.n	80060d0 <HAL_I2C_Mem_Read+0x4bc>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d007      	beq.n	8005c94 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2222      	movs	r2, #34	; 0x22
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2240      	movs	r2, #64	; 0x40
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4a62      	ldr	r2, [pc, #392]	; (8005e5c <HAL_I2C_Mem_Read+0x248>)
 8005cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cd6:	88f8      	ldrh	r0, [r7, #6]
 8005cd8:	893a      	ldrh	r2, [r7, #8]
 8005cda:	8979      	ldrh	r1, [r7, #10]
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fbe2 	bl	80064b0 <I2C_RequestMemoryRead>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e1ec      	b.n	80060d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d113      	bne.n	8005d26 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e1c0      	b.n	80060a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d11e      	bne.n	8005d6c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d3e:	b672      	cpsid	i
}
 8005d40:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d42:	2300      	movs	r3, #0
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d68:	b662      	cpsie	i
}
 8005d6a:	e035      	b.n	8005dd8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d11e      	bne.n	8005db2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d84:	b672      	cpsid	i
}
 8005d86:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005dae:	b662      	cpsie	i
}
 8005db0:	e012      	b.n	8005dd8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dc0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005dd8:	e166      	b.n	80060a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	f200 811f 	bhi.w	8006022 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d123      	bne.n	8005e34 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fd9d 	bl	8006930 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e167      	b.n	80060d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e32:	e139      	b.n	80060a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d152      	bne.n	8005ee2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	2200      	movs	r2, #0
 8005e44:	4906      	ldr	r1, [pc, #24]	; (8005e60 <HAL_I2C_Mem_Read+0x24c>)
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 fc1a 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e13c      	b.n	80060d0 <HAL_I2C_Mem_Read+0x4bc>
 8005e56:	bf00      	nop
 8005e58:	00100002 	.word	0x00100002
 8005e5c:	ffff0000 	.word	0xffff0000
 8005e60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005e64:	b672      	cpsid	i
}
 8005e66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005eaa:	b662      	cpsie	i
}
 8005eac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ee0:	e0e2      	b.n	80060a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	2200      	movs	r2, #0
 8005eea:	497b      	ldr	r1, [pc, #492]	; (80060d8 <HAL_I2C_Mem_Read+0x4c4>)
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fbc7 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0e9      	b.n	80060d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f0c:	b672      	cpsid	i
}
 8005f0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f42:	4b66      	ldr	r3, [pc, #408]	; (80060dc <HAL_I2C_Mem_Read+0x4c8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	08db      	lsrs	r3, r3, #3
 8005f48:	4a65      	ldr	r2, [pc, #404]	; (80060e0 <HAL_I2C_Mem_Read+0x4cc>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	0a1a      	lsrs	r2, r3, #8
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	00da      	lsls	r2, r3, #3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d118      	bne.n	8005f9a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	f043 0220 	orr.w	r2, r3, #32
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005f8a:	b662      	cpsie	i
}
 8005f8c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e09a      	b.n	80060d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d1d9      	bne.n	8005f5c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005fea:	b662      	cpsie	i
}
 8005fec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006020:	e042      	b.n	80060a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fc82 	bl	8006930 <I2C_WaitOnRXNEFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e04c      	b.n	80060d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b04      	cmp	r3, #4
 8006074:	d118      	bne.n	80060a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f47f ae94 	bne.w	8005dda <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e000      	b.n	80060d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
  }
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3728      	adds	r7, #40	; 0x28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	00010004 	.word	0x00010004
 80060dc:	20000010 	.word	0x20000010
 80060e0:	14f8b589 	.word	0x14f8b589

080060e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	460b      	mov	r3, r1
 80060f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d006      	beq.n	800610e <I2C_MasterRequestWrite+0x2a>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d003      	beq.n	800610e <I2C_MasterRequestWrite+0x2a>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800610c:	d108      	bne.n	8006120 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e00b      	b.n	8006138 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	2b12      	cmp	r3, #18
 8006126:	d107      	bne.n	8006138 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006136:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fa9b 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00d      	beq.n	800616c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800615e:	d103      	bne.n	8006168 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006166:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e035      	b.n	80061d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006174:	d108      	bne.n	8006188 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006176:	897b      	ldrh	r3, [r7, #10]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006184:	611a      	str	r2, [r3, #16]
 8006186:	e01b      	b.n	80061c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006188:	897b      	ldrh	r3, [r7, #10]
 800618a:	11db      	asrs	r3, r3, #7
 800618c:	b2db      	uxtb	r3, r3
 800618e:	f003 0306 	and.w	r3, r3, #6
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f063 030f 	orn	r3, r3, #15
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	490e      	ldr	r1, [pc, #56]	; (80061e0 <I2C_MasterRequestWrite+0xfc>)
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fac1 	bl	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e010      	b.n	80061d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061b6:	897b      	ldrh	r3, [r7, #10]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4907      	ldr	r1, [pc, #28]	; (80061e4 <I2C_MasterRequestWrite+0x100>)
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fab1 	bl	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	00010008 	.word	0x00010008
 80061e4:	00010002 	.word	0x00010002

080061e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	460b      	mov	r3, r1
 80061f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800620c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d006      	beq.n	8006222 <I2C_MasterRequestRead+0x3a>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d003      	beq.n	8006222 <I2C_MasterRequestRead+0x3a>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006220:	d108      	bne.n	8006234 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e00b      	b.n	800624c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	2b11      	cmp	r3, #17
 800623a:	d107      	bne.n	800624c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800624a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fa11 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00d      	beq.n	8006280 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006272:	d103      	bne.n	800627c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800627a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e079      	b.n	8006374 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006288:	d108      	bne.n	800629c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800628a:	897b      	ldrh	r3, [r7, #10]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	b2da      	uxtb	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	611a      	str	r2, [r3, #16]
 800629a:	e05f      	b.n	800635c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800629c:	897b      	ldrh	r3, [r7, #10]
 800629e:	11db      	asrs	r3, r3, #7
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	f003 0306 	and.w	r3, r3, #6
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f063 030f 	orn	r3, r3, #15
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4930      	ldr	r1, [pc, #192]	; (800637c <I2C_MasterRequestRead+0x194>)
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fa37 	bl	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e054      	b.n	8006374 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80062ca:	897b      	ldrh	r3, [r7, #10]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	4929      	ldr	r1, [pc, #164]	; (8006380 <I2C_MasterRequestRead+0x198>)
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fa27 	bl	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e044      	b.n	8006374 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	613b      	str	r3, [r7, #16]
 80062fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800630e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f9af 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00d      	beq.n	8006344 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006336:	d103      	bne.n	8006340 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800633e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e017      	b.n	8006374 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006344:	897b      	ldrh	r3, [r7, #10]
 8006346:	11db      	asrs	r3, r3, #7
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 0306 	and.w	r3, r3, #6
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f063 030e 	orn	r3, r3, #14
 8006354:	b2da      	uxtb	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	4907      	ldr	r1, [pc, #28]	; (8006380 <I2C_MasterRequestRead+0x198>)
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 f9e3 	bl	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	00010008 	.word	0x00010008
 8006380:	00010002 	.word	0x00010002

08006384 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	4608      	mov	r0, r1
 800638e:	4611      	mov	r1, r2
 8006390:	461a      	mov	r2, r3
 8006392:	4603      	mov	r3, r0
 8006394:	817b      	strh	r3, [r7, #10]
 8006396:	460b      	mov	r3, r1
 8006398:	813b      	strh	r3, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f960 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d4:	d103      	bne.n	80063de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e05f      	b.n	80064a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063e2:	897b      	ldrh	r3, [r7, #10]
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	6a3a      	ldr	r2, [r7, #32]
 80063f6:	492d      	ldr	r1, [pc, #180]	; (80064ac <I2C_RequestMemoryWrite+0x128>)
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f998 	bl	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e04c      	b.n	80064a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800641e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006420:	6a39      	ldr	r1, [r7, #32]
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 fa02 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00d      	beq.n	800644a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	2b04      	cmp	r3, #4
 8006434:	d107      	bne.n	8006446 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e02b      	b.n	80064a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d105      	bne.n	800645c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006450:	893b      	ldrh	r3, [r7, #8]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	611a      	str	r2, [r3, #16]
 800645a:	e021      	b.n	80064a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800645c:	893b      	ldrh	r3, [r7, #8]
 800645e:	0a1b      	lsrs	r3, r3, #8
 8006460:	b29b      	uxth	r3, r3
 8006462:	b2da      	uxtb	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800646a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646c:	6a39      	ldr	r1, [r7, #32]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f9dc 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00d      	beq.n	8006496 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	2b04      	cmp	r3, #4
 8006480:	d107      	bne.n	8006492 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e005      	b.n	80064a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006496:	893b      	ldrh	r3, [r7, #8]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	00010002 	.word	0x00010002

080064b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	461a      	mov	r2, r3
 80064be:	4603      	mov	r3, r0
 80064c0:	817b      	strh	r3, [r7, #10]
 80064c2:	460b      	mov	r3, r1
 80064c4:	813b      	strh	r3, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f8c2 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00d      	beq.n	800651e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006510:	d103      	bne.n	800651a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e0aa      	b.n	8006674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800651e:	897b      	ldrh	r3, [r7, #10]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800652c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	6a3a      	ldr	r2, [r7, #32]
 8006532:	4952      	ldr	r1, [pc, #328]	; (800667c <I2C_RequestMemoryRead+0x1cc>)
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f8fa 	bl	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e097      	b.n	8006674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800655a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655c:	6a39      	ldr	r1, [r7, #32]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f964 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00d      	beq.n	8006586 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	2b04      	cmp	r3, #4
 8006570:	d107      	bne.n	8006582 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006580:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e076      	b.n	8006674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d105      	bne.n	8006598 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800658c:	893b      	ldrh	r3, [r7, #8]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	611a      	str	r2, [r3, #16]
 8006596:	e021      	b.n	80065dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006598:	893b      	ldrh	r3, [r7, #8]
 800659a:	0a1b      	lsrs	r3, r3, #8
 800659c:	b29b      	uxth	r3, r3
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a8:	6a39      	ldr	r1, [r7, #32]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f93e 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d107      	bne.n	80065ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e050      	b.n	8006674 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065d2:	893b      	ldrh	r3, [r7, #8]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065de:	6a39      	ldr	r1, [r7, #32]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f923 	bl	800682c <I2C_WaitOnTXEFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00d      	beq.n	8006608 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d107      	bne.n	8006604 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006602:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e035      	b.n	8006674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006616:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	2200      	movs	r2, #0
 8006620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f82b 	bl	8006680 <I2C_WaitOnFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00d      	beq.n	800664c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663e:	d103      	bne.n	8006648 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e013      	b.n	8006674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800664c:	897b      	ldrh	r3, [r7, #10]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f043 0301 	orr.w	r3, r3, #1
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	6a3a      	ldr	r2, [r7, #32]
 8006660:	4906      	ldr	r1, [pc, #24]	; (800667c <I2C_RequestMemoryRead+0x1cc>)
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f863 	bl	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	00010002 	.word	0x00010002

08006680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006690:	e025      	b.n	80066de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006698:	d021      	beq.n	80066de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800669a:	f7fe f995 	bl	80049c8 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d302      	bcc.n	80066b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d116      	bne.n	80066de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f043 0220 	orr.w	r2, r3, #32
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e023      	b.n	8006726 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	0c1b      	lsrs	r3, r3, #16
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d10d      	bne.n	8006704 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	43da      	mvns	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf0c      	ite	eq
 80066fa:	2301      	moveq	r3, #1
 80066fc:	2300      	movne	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	e00c      	b.n	800671e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	43da      	mvns	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4013      	ands	r3, r2
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2300      	movne	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	429a      	cmp	r2, r3
 8006722:	d0b6      	beq.n	8006692 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800673c:	e051      	b.n	80067e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674c:	d123      	bne.n	8006796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800675c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006766:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f043 0204 	orr.w	r2, r3, #4
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e046      	b.n	8006824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800679c:	d021      	beq.n	80067e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679e:	f7fe f913 	bl	80049c8 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d302      	bcc.n	80067b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d116      	bne.n	80067e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f043 0220 	orr.w	r2, r3, #32
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e020      	b.n	8006824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	0c1b      	lsrs	r3, r3, #16
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d10c      	bne.n	8006806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	43da      	mvns	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4013      	ands	r3, r2
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bf14      	ite	ne
 80067fe:	2301      	movne	r3, #1
 8006800:	2300      	moveq	r3, #0
 8006802:	b2db      	uxtb	r3, r3
 8006804:	e00b      	b.n	800681e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	43da      	mvns	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4013      	ands	r3, r2
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d18d      	bne.n	800673e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006838:	e02d      	b.n	8006896 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f8ce 	bl	80069dc <I2C_IsAcknowledgeFailed>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e02d      	b.n	80068a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006850:	d021      	beq.n	8006896 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006852:	f7fe f8b9 	bl	80049c8 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d116      	bne.n	8006896 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e007      	b.n	80068a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a0:	2b80      	cmp	r3, #128	; 0x80
 80068a2:	d1ca      	bne.n	800683a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068ba:	e02d      	b.n	8006918 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f88d 	bl	80069dc <I2C_IsAcknowledgeFailed>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e02d      	b.n	8006928 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d2:	d021      	beq.n	8006918 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d4:	f7fe f878 	bl	80049c8 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d302      	bcc.n	80068ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d116      	bne.n	8006918 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	f043 0220 	orr.w	r2, r3, #32
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e007      	b.n	8006928 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b04      	cmp	r3, #4
 8006924:	d1ca      	bne.n	80068bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800693c:	e042      	b.n	80069c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b10      	cmp	r3, #16
 800694a:	d119      	bne.n	8006980 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0210 	mvn.w	r2, #16
 8006954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e029      	b.n	80069d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006980:	f7fe f822 	bl	80049c8 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	429a      	cmp	r2, r3
 800698e:	d302      	bcc.n	8006996 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d116      	bne.n	80069c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	f043 0220 	orr.w	r2, r3, #32
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e007      	b.n	80069d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d1b5      	bne.n	800693e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f2:	d11b      	bne.n	8006a2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	f043 0204 	orr.w	r2, r3, #4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006a3c:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006a48:	f000 f808 	bl	8006a5c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006a4c:	4b02      	ldr	r3, [pc, #8]	; (8006a58 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006a4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a52:	615a      	str	r2, [r3, #20]
  }
}
 8006a54:	bf00      	nop
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40010400 	.word	0x40010400

08006a5c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006a60:	bf00      	nop
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e272      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8087 	beq.w	8006b96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a88:	4b92      	ldr	r3, [pc, #584]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f003 030c 	and.w	r3, r3, #12
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d00c      	beq.n	8006aae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a94:	4b8f      	ldr	r3, [pc, #572]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f003 030c 	and.w	r3, r3, #12
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d112      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x5e>
 8006aa0:	4b8c      	ldr	r3, [pc, #560]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aac:	d10b      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aae:	4b89      	ldr	r3, [pc, #548]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d06c      	beq.n	8006b94 <HAL_RCC_OscConfig+0x12c>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d168      	bne.n	8006b94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e24c      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ace:	d106      	bne.n	8006ade <HAL_RCC_OscConfig+0x76>
 8006ad0:	4b80      	ldr	r3, [pc, #512]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a7f      	ldr	r2, [pc, #508]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	e02e      	b.n	8006b3c <HAL_RCC_OscConfig+0xd4>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10c      	bne.n	8006b00 <HAL_RCC_OscConfig+0x98>
 8006ae6:	4b7b      	ldr	r3, [pc, #492]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a7a      	ldr	r2, [pc, #488]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	4b78      	ldr	r3, [pc, #480]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a77      	ldr	r2, [pc, #476]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	e01d      	b.n	8006b3c <HAL_RCC_OscConfig+0xd4>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b08:	d10c      	bne.n	8006b24 <HAL_RCC_OscConfig+0xbc>
 8006b0a:	4b72      	ldr	r3, [pc, #456]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a71      	ldr	r2, [pc, #452]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	4b6f      	ldr	r3, [pc, #444]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a6e      	ldr	r2, [pc, #440]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	e00b      	b.n	8006b3c <HAL_RCC_OscConfig+0xd4>
 8006b24:	4b6b      	ldr	r3, [pc, #428]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a6a      	ldr	r2, [pc, #424]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	4b68      	ldr	r3, [pc, #416]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a67      	ldr	r2, [pc, #412]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d013      	beq.n	8006b6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b44:	f7fd ff40 	bl	80049c8 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b4c:	f7fd ff3c 	bl	80049c8 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b64      	cmp	r3, #100	; 0x64
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e200      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b5e:	4b5d      	ldr	r3, [pc, #372]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0f0      	beq.n	8006b4c <HAL_RCC_OscConfig+0xe4>
 8006b6a:	e014      	b.n	8006b96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6c:	f7fd ff2c 	bl	80049c8 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b74:	f7fd ff28 	bl	80049c8 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b64      	cmp	r3, #100	; 0x64
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e1ec      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b86:	4b53      	ldr	r3, [pc, #332]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1f0      	bne.n	8006b74 <HAL_RCC_OscConfig+0x10c>
 8006b92:	e000      	b.n	8006b96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d063      	beq.n	8006c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ba2:	4b4c      	ldr	r3, [pc, #304]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006bae:	4b49      	ldr	r3, [pc, #292]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d11c      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x18c>
 8006bba:	4b46      	ldr	r3, [pc, #280]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d116      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bc6:	4b43      	ldr	r3, [pc, #268]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <HAL_RCC_OscConfig+0x176>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d001      	beq.n	8006bde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e1c0      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bde:	4b3d      	ldr	r3, [pc, #244]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4939      	ldr	r1, [pc, #228]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bf2:	e03a      	b.n	8006c6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d020      	beq.n	8006c3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bfc:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <HAL_RCC_OscConfig+0x270>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c02:	f7fd fee1 	bl	80049c8 <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c0a:	f7fd fedd 	bl	80049c8 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e1a1      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1c:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f0      	beq.n	8006c0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c28:	4b2a      	ldr	r3, [pc, #168]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	4927      	ldr	r1, [pc, #156]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	600b      	str	r3, [r1, #0]
 8006c3c:	e015      	b.n	8006c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c3e:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <HAL_RCC_OscConfig+0x270>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c44:	f7fd fec0 	bl	80049c8 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c4c:	f7fd febc 	bl	80049c8 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e180      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c5e:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1f0      	bne.n	8006c4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d03a      	beq.n	8006cec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d019      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c7e:	4b17      	ldr	r3, [pc, #92]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c84:	f7fd fea0 	bl	80049c8 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c8c:	f7fd fe9c 	bl	80049c8 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e160      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <HAL_RCC_OscConfig+0x26c>)
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006caa:	2001      	movs	r0, #1
 8006cac:	f000 fb08 	bl	80072c0 <RCC_Delay>
 8006cb0:	e01c      	b.n	8006cec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <HAL_RCC_OscConfig+0x274>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cb8:	f7fd fe86 	bl	80049c8 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cbe:	e00f      	b.n	8006ce0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc0:	f7fd fe82 	bl	80049c8 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d908      	bls.n	8006ce0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e146      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
 8006cd2:	bf00      	nop
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	42420000 	.word	0x42420000
 8006cdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ce0:	4b92      	ldr	r3, [pc, #584]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e9      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80a6 	beq.w	8006e46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cfe:	4b8b      	ldr	r3, [pc, #556]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10d      	bne.n	8006d26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d0a:	4b88      	ldr	r3, [pc, #544]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	4a87      	ldr	r2, [pc, #540]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d14:	61d3      	str	r3, [r2, #28]
 8006d16:	4b85      	ldr	r3, [pc, #532]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d26:	4b82      	ldr	r3, [pc, #520]	; (8006f30 <HAL_RCC_OscConfig+0x4c8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d118      	bne.n	8006d64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d32:	4b7f      	ldr	r3, [pc, #508]	; (8006f30 <HAL_RCC_OscConfig+0x4c8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a7e      	ldr	r2, [pc, #504]	; (8006f30 <HAL_RCC_OscConfig+0x4c8>)
 8006d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d3e:	f7fd fe43 	bl	80049c8 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d46:	f7fd fe3f 	bl	80049c8 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b64      	cmp	r3, #100	; 0x64
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e103      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d58:	4b75      	ldr	r3, [pc, #468]	; (8006f30 <HAL_RCC_OscConfig+0x4c8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f0      	beq.n	8006d46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d106      	bne.n	8006d7a <HAL_RCC_OscConfig+0x312>
 8006d6c:	4b6f      	ldr	r3, [pc, #444]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	4a6e      	ldr	r2, [pc, #440]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d72:	f043 0301 	orr.w	r3, r3, #1
 8006d76:	6213      	str	r3, [r2, #32]
 8006d78:	e02d      	b.n	8006dd6 <HAL_RCC_OscConfig+0x36e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10c      	bne.n	8006d9c <HAL_RCC_OscConfig+0x334>
 8006d82:	4b6a      	ldr	r3, [pc, #424]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	4a69      	ldr	r2, [pc, #420]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	6213      	str	r3, [r2, #32]
 8006d8e:	4b67      	ldr	r3, [pc, #412]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	4a66      	ldr	r2, [pc, #408]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006d94:	f023 0304 	bic.w	r3, r3, #4
 8006d98:	6213      	str	r3, [r2, #32]
 8006d9a:	e01c      	b.n	8006dd6 <HAL_RCC_OscConfig+0x36e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b05      	cmp	r3, #5
 8006da2:	d10c      	bne.n	8006dbe <HAL_RCC_OscConfig+0x356>
 8006da4:	4b61      	ldr	r3, [pc, #388]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	4a60      	ldr	r2, [pc, #384]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006daa:	f043 0304 	orr.w	r3, r3, #4
 8006dae:	6213      	str	r3, [r2, #32]
 8006db0:	4b5e      	ldr	r3, [pc, #376]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	4a5d      	ldr	r2, [pc, #372]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006db6:	f043 0301 	orr.w	r3, r3, #1
 8006dba:	6213      	str	r3, [r2, #32]
 8006dbc:	e00b      	b.n	8006dd6 <HAL_RCC_OscConfig+0x36e>
 8006dbe:	4b5b      	ldr	r3, [pc, #364]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	4a5a      	ldr	r2, [pc, #360]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006dc4:	f023 0301 	bic.w	r3, r3, #1
 8006dc8:	6213      	str	r3, [r2, #32]
 8006dca:	4b58      	ldr	r3, [pc, #352]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	4a57      	ldr	r2, [pc, #348]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006dd0:	f023 0304 	bic.w	r3, r3, #4
 8006dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d015      	beq.n	8006e0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dde:	f7fd fdf3 	bl	80049c8 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de4:	e00a      	b.n	8006dfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de6:	f7fd fdef 	bl	80049c8 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e0b1      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dfc:	4b4b      	ldr	r3, [pc, #300]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0ee      	beq.n	8006de6 <HAL_RCC_OscConfig+0x37e>
 8006e08:	e014      	b.n	8006e34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e0a:	f7fd fddd 	bl	80049c8 <HAL_GetTick>
 8006e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e10:	e00a      	b.n	8006e28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e12:	f7fd fdd9 	bl	80049c8 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e09b      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e28:	4b40      	ldr	r3, [pc, #256]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1ee      	bne.n	8006e12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d105      	bne.n	8006e46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e3a:	4b3c      	ldr	r3, [pc, #240]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	4a3b      	ldr	r2, [pc, #236]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 8087 	beq.w	8006f5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e50:	4b36      	ldr	r3, [pc, #216]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f003 030c 	and.w	r3, r3, #12
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d061      	beq.n	8006f20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d146      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e64:	4b33      	ldr	r3, [pc, #204]	; (8006f34 <HAL_RCC_OscConfig+0x4cc>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6a:	f7fd fdad 	bl	80049c8 <HAL_GetTick>
 8006e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e72:	f7fd fda9 	bl	80049c8 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e06d      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e84:	4b29      	ldr	r3, [pc, #164]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1f0      	bne.n	8006e72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e98:	d108      	bne.n	8006eac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e9a:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	4921      	ldr	r1, [pc, #132]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eac:	4b1f      	ldr	r3, [pc, #124]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a19      	ldr	r1, [r3, #32]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	491b      	ldr	r1, [pc, #108]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ec4:	4b1b      	ldr	r3, [pc, #108]	; (8006f34 <HAL_RCC_OscConfig+0x4cc>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eca:	f7fd fd7d 	bl	80049c8 <HAL_GetTick>
 8006ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ed0:	e008      	b.n	8006ee4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed2:	f7fd fd79 	bl	80049c8 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e03d      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ee4:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f0      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x46a>
 8006ef0:	e035      	b.n	8006f5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef2:	4b10      	ldr	r3, [pc, #64]	; (8006f34 <HAL_RCC_OscConfig+0x4cc>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef8:	f7fd fd66 	bl	80049c8 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f00:	f7fd fd62 	bl	80049c8 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e026      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f12:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <HAL_RCC_OscConfig+0x4c4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f0      	bne.n	8006f00 <HAL_RCC_OscConfig+0x498>
 8006f1e:	e01e      	b.n	8006f5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d107      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e019      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
 8006f2c:	40021000 	.word	0x40021000
 8006f30:	40007000 	.word	0x40007000
 8006f34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f38:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <HAL_RCC_OscConfig+0x500>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d106      	bne.n	8006f5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d001      	beq.n	8006f5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40021000 	.word	0x40021000

08006f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0d0      	b.n	8007122 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f80:	4b6a      	ldr	r3, [pc, #424]	; (800712c <HAL_RCC_ClockConfig+0x1c0>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d910      	bls.n	8006fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8e:	4b67      	ldr	r3, [pc, #412]	; (800712c <HAL_RCC_ClockConfig+0x1c0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f023 0207 	bic.w	r2, r3, #7
 8006f96:	4965      	ldr	r1, [pc, #404]	; (800712c <HAL_RCC_ClockConfig+0x1c0>)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f9e:	4b63      	ldr	r3, [pc, #396]	; (800712c <HAL_RCC_ClockConfig+0x1c0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0b8      	b.n	8007122 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d020      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fc8:	4b59      	ldr	r3, [pc, #356]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	4a58      	ldr	r2, [pc, #352]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 8006fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006fd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fe0:	4b53      	ldr	r3, [pc, #332]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4a52      	ldr	r2, [pc, #328]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006fea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fec:	4b50      	ldr	r3, [pc, #320]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	494d      	ldr	r1, [pc, #308]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d040      	beq.n	800708c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d107      	bne.n	8007022 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007012:	4b47      	ldr	r3, [pc, #284]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d115      	bne.n	800704a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e07f      	b.n	8007122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d107      	bne.n	800703a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800702a:	4b41      	ldr	r3, [pc, #260]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e073      	b.n	8007122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800703a:	4b3d      	ldr	r3, [pc, #244]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e06b      	b.n	8007122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800704a:	4b39      	ldr	r3, [pc, #228]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f023 0203 	bic.w	r2, r3, #3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4936      	ldr	r1, [pc, #216]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 8007058:	4313      	orrs	r3, r2
 800705a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800705c:	f7fd fcb4 	bl	80049c8 <HAL_GetTick>
 8007060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007062:	e00a      	b.n	800707a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007064:	f7fd fcb0 	bl	80049c8 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e053      	b.n	8007122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707a:	4b2d      	ldr	r3, [pc, #180]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 020c 	and.w	r2, r3, #12
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	429a      	cmp	r2, r3
 800708a:	d1eb      	bne.n	8007064 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800708c:	4b27      	ldr	r3, [pc, #156]	; (800712c <HAL_RCC_ClockConfig+0x1c0>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d210      	bcs.n	80070bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800709a:	4b24      	ldr	r3, [pc, #144]	; (800712c <HAL_RCC_ClockConfig+0x1c0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 0207 	bic.w	r2, r3, #7
 80070a2:	4922      	ldr	r1, [pc, #136]	; (800712c <HAL_RCC_ClockConfig+0x1c0>)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070aa:	4b20      	ldr	r3, [pc, #128]	; (800712c <HAL_RCC_ClockConfig+0x1c0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d001      	beq.n	80070bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e032      	b.n	8007122 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070c8:	4b19      	ldr	r3, [pc, #100]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4916      	ldr	r1, [pc, #88]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070e6:	4b12      	ldr	r3, [pc, #72]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	490e      	ldr	r1, [pc, #56]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070fa:	f000 f821 	bl	8007140 <HAL_RCC_GetSysClockFreq>
 80070fe:	4602      	mov	r2, r0
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <HAL_RCC_ClockConfig+0x1c4>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	091b      	lsrs	r3, r3, #4
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	490a      	ldr	r1, [pc, #40]	; (8007134 <HAL_RCC_ClockConfig+0x1c8>)
 800710c:	5ccb      	ldrb	r3, [r1, r3]
 800710e:	fa22 f303 	lsr.w	r3, r2, r3
 8007112:	4a09      	ldr	r2, [pc, #36]	; (8007138 <HAL_RCC_ClockConfig+0x1cc>)
 8007114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <HAL_RCC_ClockConfig+0x1d0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fd fb00 	bl	8004720 <HAL_InitTick>

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40022000 	.word	0x40022000
 8007130:	40021000 	.word	0x40021000
 8007134:	0800d6d4 	.word	0x0800d6d4
 8007138:	20000010 	.word	0x20000010
 800713c:	20000014 	.word	0x20000014

08007140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007140:	b490      	push	{r4, r7}
 8007142:	b08a      	sub	sp, #40	; 0x28
 8007144:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007146:	4b29      	ldr	r3, [pc, #164]	; (80071ec <HAL_RCC_GetSysClockFreq+0xac>)
 8007148:	1d3c      	adds	r4, r7, #4
 800714a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800714c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007150:	f240 2301 	movw	r3, #513	; 0x201
 8007154:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	2300      	movs	r3, #0
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	2300      	movs	r3, #0
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800716a:	4b21      	ldr	r3, [pc, #132]	; (80071f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f003 030c 	and.w	r3, r3, #12
 8007176:	2b04      	cmp	r3, #4
 8007178:	d002      	beq.n	8007180 <HAL_RCC_GetSysClockFreq+0x40>
 800717a:	2b08      	cmp	r3, #8
 800717c:	d003      	beq.n	8007186 <HAL_RCC_GetSysClockFreq+0x46>
 800717e:	e02b      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007180:	4b1c      	ldr	r3, [pc, #112]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007182:	623b      	str	r3, [r7, #32]
      break;
 8007184:	e02b      	b.n	80071de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	0c9b      	lsrs	r3, r3, #18
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	3328      	adds	r3, #40	; 0x28
 8007190:	443b      	add	r3, r7
 8007192:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007196:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d012      	beq.n	80071c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071a2:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	0c5b      	lsrs	r3, r3, #17
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	3328      	adds	r3, #40	; 0x28
 80071ae:	443b      	add	r3, r7
 80071b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80071b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	4a0e      	ldr	r2, [pc, #56]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80071ba:	fb03 f202 	mul.w	r2, r3, r2
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
 80071c6:	e004      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4a0b      	ldr	r2, [pc, #44]	; (80071f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071cc:	fb02 f303 	mul.w	r3, r2, r3
 80071d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	623b      	str	r3, [r7, #32]
      break;
 80071d6:	e002      	b.n	80071de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80071d8:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80071da:	623b      	str	r3, [r7, #32]
      break;
 80071dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071de:	6a3b      	ldr	r3, [r7, #32]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3728      	adds	r7, #40	; 0x28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc90      	pop	{r4, r7}
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	0800d28c 	.word	0x0800d28c
 80071f0:	40021000 	.word	0x40021000
 80071f4:	007a1200 	.word	0x007a1200
 80071f8:	003d0900 	.word	0x003d0900

080071fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007200:	4b02      	ldr	r3, [pc, #8]	; (800720c <HAL_RCC_GetHCLKFreq+0x10>)
 8007202:	681b      	ldr	r3, [r3, #0]
}
 8007204:	4618      	mov	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr
 800720c:	20000010 	.word	0x20000010

08007210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007214:	f7ff fff2 	bl	80071fc <HAL_RCC_GetHCLKFreq>
 8007218:	4602      	mov	r2, r0
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	0a1b      	lsrs	r3, r3, #8
 8007220:	f003 0307 	and.w	r3, r3, #7
 8007224:	4903      	ldr	r1, [pc, #12]	; (8007234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007226:	5ccb      	ldrb	r3, [r1, r3]
 8007228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800722c:	4618      	mov	r0, r3
 800722e:	bd80      	pop	{r7, pc}
 8007230:	40021000 	.word	0x40021000
 8007234:	0800d6e4 	.word	0x0800d6e4

08007238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800723c:	f7ff ffde 	bl	80071fc <HAL_RCC_GetHCLKFreq>
 8007240:	4602      	mov	r2, r0
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	0adb      	lsrs	r3, r3, #11
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	4903      	ldr	r1, [pc, #12]	; (800725c <HAL_RCC_GetPCLK2Freq+0x24>)
 800724e:	5ccb      	ldrb	r3, [r1, r3]
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007254:	4618      	mov	r0, r3
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40021000 	.word	0x40021000
 800725c:	0800d6e4 	.word	0x0800d6e4

08007260 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	220f      	movs	r2, #15
 800726e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007270:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <HAL_RCC_GetClockConfig+0x58>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f003 0203 	and.w	r2, r3, #3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800727c:	4b0e      	ldr	r3, [pc, #56]	; (80072b8 <HAL_RCC_GetClockConfig+0x58>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_RCC_GetClockConfig+0x58>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <HAL_RCC_GetClockConfig+0x58>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	08db      	lsrs	r3, r3, #3
 800729a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072a2:	4b06      	ldr	r3, [pc, #24]	; (80072bc <HAL_RCC_GetClockConfig+0x5c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0207 	and.w	r2, r3, #7
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr
 80072b8:	40021000 	.word	0x40021000
 80072bc:	40022000 	.word	0x40022000

080072c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80072c8:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <RCC_Delay+0x34>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <RCC_Delay+0x38>)
 80072ce:	fba2 2303 	umull	r2, r3, r2, r3
 80072d2:	0a5b      	lsrs	r3, r3, #9
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80072dc:	bf00      	nop
  }
  while (Delay --);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	1e5a      	subs	r2, r3, #1
 80072e2:	60fa      	str	r2, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1f9      	bne.n	80072dc <RCC_Delay+0x1c>
}
 80072e8:	bf00      	nop
 80072ea:	bf00      	nop
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr
 80072f4:	20000010 	.word	0x20000010
 80072f8:	10624dd3 	.word	0x10624dd3

080072fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e076      	b.n	80073fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	2b00      	cmp	r3, #0
 8007314:	d108      	bne.n	8007328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800731e:	d009      	beq.n	8007334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	61da      	str	r2, [r3, #28]
 8007326:	e005      	b.n	8007334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fd f900 	bl	8004554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b8:	ea42 0103 	orr.w	r1, r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	0c1a      	lsrs	r2, r3, #16
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f002 0204 	and.w	r2, r2, #4
 80073da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69da      	ldr	r2, [r3, #28]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	4613      	mov	r3, r2
 8007412:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_SPI_Transmit+0x22>
 8007422:	2302      	movs	r3, #2
 8007424:	e126      	b.n	8007674 <HAL_SPI_Transmit+0x270>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800742e:	f7fd facb 	bl	80049c8 <HAL_GetTick>
 8007432:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	d002      	beq.n	800744a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007444:	2302      	movs	r3, #2
 8007446:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007448:	e10b      	b.n	8007662 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_SPI_Transmit+0x52>
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	77fb      	strb	r3, [r7, #31]
    goto error;
 800745a:	e102      	b.n	8007662 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2203      	movs	r2, #3
 8007460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	88fa      	ldrh	r2, [r7, #6]
 8007474:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	88fa      	ldrh	r2, [r7, #6]
 800747a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a2:	d10f      	bne.n	80074c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d007      	beq.n	80074e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ea:	d14b      	bne.n	8007584 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <HAL_SPI_Transmit+0xf6>
 80074f4:	8afb      	ldrh	r3, [r7, #22]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d13e      	bne.n	8007578 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	1c9a      	adds	r2, r3, #2
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800751e:	e02b      	b.n	8007578 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b02      	cmp	r3, #2
 800752c:	d112      	bne.n	8007554 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	881a      	ldrh	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	1c9a      	adds	r2, r3, #2
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	86da      	strh	r2, [r3, #54]	; 0x36
 8007552:	e011      	b.n	8007578 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007554:	f7fd fa38 	bl	80049c8 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d803      	bhi.n	800756c <HAL_SPI_Transmit+0x168>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800756a:	d102      	bne.n	8007572 <HAL_SPI_Transmit+0x16e>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d102      	bne.n	8007578 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007576:	e074      	b.n	8007662 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1ce      	bne.n	8007520 <HAL_SPI_Transmit+0x11c>
 8007582:	e04c      	b.n	800761e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_SPI_Transmit+0x18e>
 800758c:	8afb      	ldrh	r3, [r7, #22]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d140      	bne.n	8007614 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	330c      	adds	r3, #12
 800759c:	7812      	ldrb	r2, [r2, #0]
 800759e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075b8:	e02c      	b.n	8007614 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d113      	bne.n	80075f0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	7812      	ldrb	r2, [r2, #0]
 80075d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80075ee:	e011      	b.n	8007614 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f0:	f7fd f9ea 	bl	80049c8 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d803      	bhi.n	8007608 <HAL_SPI_Transmit+0x204>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007606:	d102      	bne.n	800760e <HAL_SPI_Transmit+0x20a>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007612:	e026      	b.n	8007662 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1cd      	bne.n	80075ba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f9b6 	bl	8007994 <SPI_EndRxTxTransaction>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	77fb      	strb	r3, [r7, #31]
 800765e:	e000      	b.n	8007662 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007660:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007672:	7ffb      	ldrb	r3, [r7, #31]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	099b      	lsrs	r3, r3, #6
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10f      	bne.n	80076c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	099b      	lsrs	r3, r3, #6
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d004      	beq.n	80076c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
    return;
 80076be:	e0be      	b.n	800783e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <HAL_SPI_IRQHandler+0x66>
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	09db      	lsrs	r3, r3, #7
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d004      	beq.n	80076e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
    return;
 80076e0:	e0ad      	b.n	800783e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_SPI_IRQHandler+0x80>
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	099b      	lsrs	r3, r3, #6
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 80a1 	beq.w	800783e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 809a 	beq.w	800783e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	099b      	lsrs	r3, r3, #6
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d023      	beq.n	800775e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b03      	cmp	r3, #3
 8007720:	d011      	beq.n	8007746 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007726:	f043 0204 	orr.w	r2, r3, #4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	e00b      	b.n	800775e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	693b      	ldr	r3, [r7, #16]
        return;
 800775c:	e06f      	b.n	800783e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d014      	beq.n	8007794 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776e:	f043 0201 	orr.w	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007798:	2b00      	cmp	r3, #0
 800779a:	d04f      	beq.n	800783c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d104      	bne.n	80077c8 <HAL_SPI_IRQHandler+0x14c>
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d034      	beq.n	8007832 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0203 	bic.w	r2, r2, #3
 80077d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d011      	beq.n	8007804 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e4:	4a17      	ldr	r2, [pc, #92]	; (8007844 <HAL_SPI_IRQHandler+0x1c8>)
 80077e6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fd fa33 	bl	8004c58 <HAL_DMA_Abort_IT>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007808:	2b00      	cmp	r3, #0
 800780a:	d016      	beq.n	800783a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007810:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <HAL_SPI_IRQHandler+0x1c8>)
 8007812:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007818:	4618      	mov	r0, r3
 800781a:	f7fd fa1d 	bl	8004c58 <HAL_DMA_Abort_IT>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007828:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007830:	e003      	b.n	800783a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f808 	bl	8007848 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007838:	e000      	b.n	800783c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800783a:	bf00      	nop
    return;
 800783c:	bf00      	nop
  }
}
 800783e:	3720      	adds	r7, #32
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	0800785b 	.word	0x0800785b

08007848 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr

0800785a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff ffe7 	bl	8007848 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007894:	f7fd f898 	bl	80049c8 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4413      	add	r3, r2
 80078a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078a4:	f7fd f890 	bl	80049c8 <HAL_GetTick>
 80078a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078aa:	4b39      	ldr	r3, [pc, #228]	; (8007990 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	015b      	lsls	r3, r3, #5
 80078b0:	0d1b      	lsrs	r3, r3, #20
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	fb02 f303 	mul.w	r3, r2, r3
 80078b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078ba:	e054      	b.n	8007966 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c2:	d050      	beq.n	8007966 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078c4:	f7fd f880 	bl	80049c8 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d902      	bls.n	80078da <SPI_WaitFlagStateUntilTimeout+0x56>
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d13d      	bne.n	8007956 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f2:	d111      	bne.n	8007918 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fc:	d004      	beq.n	8007908 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007906:	d107      	bne.n	8007918 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007916:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007920:	d10f      	bne.n	8007942 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007940:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e017      	b.n	8007986 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	3b01      	subs	r3, #1
 8007964:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4013      	ands	r3, r2
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	429a      	cmp	r2, r3
 8007974:	bf0c      	ite	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	2300      	movne	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	429a      	cmp	r2, r3
 8007982:	d19b      	bne.n	80078bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000010 	.word	0x20000010

08007994 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af02      	add	r7, sp, #8
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	2180      	movs	r1, #128	; 0x80
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f7ff ff6a 	bl	8007884 <SPI_WaitFlagStateUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	f043 0220 	orr.w	r2, r3, #32
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e000      	b.n	80079c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e041      	b.n	8007a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fc fdfe 	bl	80045f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f000 fa9e 	bl	8007f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d001      	beq.n	8007a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e03a      	b.n	8007afe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <HAL_TIM_Base_Start_IT+0x98>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00e      	beq.n	8007ac8 <HAL_TIM_Base_Start_IT+0x58>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab2:	d009      	beq.n	8007ac8 <HAL_TIM_Base_Start_IT+0x58>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a14      	ldr	r2, [pc, #80]	; (8007b0c <HAL_TIM_Base_Start_IT+0x9c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d004      	beq.n	8007ac8 <HAL_TIM_Base_Start_IT+0x58>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <HAL_TIM_Base_Start_IT+0xa0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d111      	bne.n	8007aec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b06      	cmp	r3, #6
 8007ad8:	d010      	beq.n	8007afc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aea:	e007      	b.n	8007afc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0201 	orr.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800

08007b14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0201 	bic.w	r2, r2, #1
 8007b2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b36:	4013      	ands	r3, r2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10f      	bne.n	8007b5c <HAL_TIM_Base_Stop_IT+0x48>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6a1a      	ldr	r2, [r3, #32]
 8007b42:	f240 4344 	movw	r3, #1092	; 0x444
 8007b46:	4013      	ands	r3, r2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d107      	bne.n	8007b5c <HAL_TIM_Base_Stop_IT+0x48>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bc80      	pop	{r7}
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d122      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d11b      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0202 	mvn.w	r2, #2
 8007b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f9b1 	bl	8007f1a <HAL_TIM_IC_CaptureCallback>
 8007bb8:	e005      	b.n	8007bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f9a4 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f9b3 	bl	8007f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d122      	bne.n	8007c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d11b      	bne.n	8007c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0204 	mvn.w	r2, #4
 8007bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f987 	bl	8007f1a <HAL_TIM_IC_CaptureCallback>
 8007c0c:	e005      	b.n	8007c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f97a 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f989 	bl	8007f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	d122      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d11b      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0208 	mvn.w	r2, #8
 8007c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2204      	movs	r2, #4
 8007c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f95d 	bl	8007f1a <HAL_TIM_IC_CaptureCallback>
 8007c60:	e005      	b.n	8007c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f950 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f95f 	bl	8007f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b10      	cmp	r3, #16
 8007c80:	d122      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0310 	and.w	r3, r3, #16
 8007c8c:	2b10      	cmp	r3, #16
 8007c8e:	d11b      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0210 	mvn.w	r2, #16
 8007c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2208      	movs	r2, #8
 8007c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f933 	bl	8007f1a <HAL_TIM_IC_CaptureCallback>
 8007cb4:	e005      	b.n	8007cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f926 	bl	8007f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f935 	bl	8007f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d10e      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d107      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0201 	mvn.w	r2, #1
 8007cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7fc fb0a 	bl	8004308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfe:	2b80      	cmp	r3, #128	; 0x80
 8007d00:	d10e      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0c:	2b80      	cmp	r3, #128	; 0x80
 8007d0e:	d107      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa77 	bl	800820e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2a:	2b40      	cmp	r3, #64	; 0x40
 8007d2c:	d10e      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d107      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f8f9 	bl	8007f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	d10e      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d107      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0220 	mvn.w	r2, #32
 8007d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa42 	bl	80081fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_TIM_ConfigClockSource+0x18>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e0b3      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x180>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007db6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd0:	d03e      	beq.n	8007e50 <HAL_TIM_ConfigClockSource+0xd0>
 8007dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd6:	f200 8087 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dde:	f000 8085 	beq.w	8007eec <HAL_TIM_ConfigClockSource+0x16c>
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de6:	d87f      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007de8:	2b70      	cmp	r3, #112	; 0x70
 8007dea:	d01a      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0xa2>
 8007dec:	2b70      	cmp	r3, #112	; 0x70
 8007dee:	d87b      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007df0:	2b60      	cmp	r3, #96	; 0x60
 8007df2:	d050      	beq.n	8007e96 <HAL_TIM_ConfigClockSource+0x116>
 8007df4:	2b60      	cmp	r3, #96	; 0x60
 8007df6:	d877      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007df8:	2b50      	cmp	r3, #80	; 0x50
 8007dfa:	d03c      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0xf6>
 8007dfc:	2b50      	cmp	r3, #80	; 0x50
 8007dfe:	d873      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007e00:	2b40      	cmp	r3, #64	; 0x40
 8007e02:	d058      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x136>
 8007e04:	2b40      	cmp	r3, #64	; 0x40
 8007e06:	d86f      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007e08:	2b30      	cmp	r3, #48	; 0x30
 8007e0a:	d064      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x156>
 8007e0c:	2b30      	cmp	r3, #48	; 0x30
 8007e0e:	d86b      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d060      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x156>
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d867      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d05c      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x156>
 8007e1c:	2b10      	cmp	r3, #16
 8007e1e:	d05a      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007e20:	e062      	b.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6899      	ldr	r1, [r3, #8]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f000 f966 	bl	8008102 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	609a      	str	r2, [r3, #8]
      break;
 8007e4e:	e04e      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	6899      	ldr	r1, [r3, #8]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f000 f94f 	bl	8008102 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e72:	609a      	str	r2, [r3, #8]
      break;
 8007e74:	e03b      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6859      	ldr	r1, [r3, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f000 f8c6 	bl	8008014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2150      	movs	r1, #80	; 0x50
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f91d 	bl	80080ce <TIM_ITRx_SetConfig>
      break;
 8007e94:	e02b      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6859      	ldr	r1, [r3, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f000 f8e4 	bl	8008070 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2160      	movs	r1, #96	; 0x60
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f90d 	bl	80080ce <TIM_ITRx_SetConfig>
      break;
 8007eb4:	e01b      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6859      	ldr	r1, [r3, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f000 f8a6 	bl	8008014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2140      	movs	r1, #64	; 0x40
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f8fd 	bl	80080ce <TIM_ITRx_SetConfig>
      break;
 8007ed4:	e00b      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f000 f8f4 	bl	80080ce <TIM_ITRx_SetConfig>
        break;
 8007ee6:	e002      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ee8:	bf00      	nop
 8007eea:	e000      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007eec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr

08007f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bc80      	pop	{r7}
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a29      	ldr	r2, [pc, #164]	; (8008008 <TIM_Base_SetConfig+0xb8>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00b      	beq.n	8007f80 <TIM_Base_SetConfig+0x30>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6e:	d007      	beq.n	8007f80 <TIM_Base_SetConfig+0x30>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a26      	ldr	r2, [pc, #152]	; (800800c <TIM_Base_SetConfig+0xbc>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d003      	beq.n	8007f80 <TIM_Base_SetConfig+0x30>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a25      	ldr	r2, [pc, #148]	; (8008010 <TIM_Base_SetConfig+0xc0>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d108      	bne.n	8007f92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a1c      	ldr	r2, [pc, #112]	; (8008008 <TIM_Base_SetConfig+0xb8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00b      	beq.n	8007fb2 <TIM_Base_SetConfig+0x62>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa0:	d007      	beq.n	8007fb2 <TIM_Base_SetConfig+0x62>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a19      	ldr	r2, [pc, #100]	; (800800c <TIM_Base_SetConfig+0xbc>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d003      	beq.n	8007fb2 <TIM_Base_SetConfig+0x62>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a18      	ldr	r2, [pc, #96]	; (8008010 <TIM_Base_SetConfig+0xc0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d108      	bne.n	8007fc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a07      	ldr	r2, [pc, #28]	; (8008008 <TIM_Base_SetConfig+0xb8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d103      	bne.n	8007ff8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	615a      	str	r2, [r3, #20]
}
 8007ffe:	bf00      	nop
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	bc80      	pop	{r7}
 8008006:	4770      	bx	lr
 8008008:	40012c00 	.word	0x40012c00
 800800c:	40000400 	.word	0x40000400
 8008010:	40000800 	.word	0x40000800

08008014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	f023 0201 	bic.w	r2, r3, #1
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800803e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f023 030a 	bic.w	r3, r3, #10
 8008050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	4313      	orrs	r3, r2
 8008058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr

08008070 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	f023 0210 	bic.w	r2, r3, #16
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800809a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	031b      	lsls	r3, r3, #12
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	621a      	str	r2, [r3, #32]
}
 80080c4:	bf00      	nop
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr

080080ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	f043 0307 	orr.w	r3, r3, #7
 80080f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	609a      	str	r2, [r3, #8]
}
 80080f8:	bf00      	nop
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr

08008102 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008102:	b480      	push	{r7}
 8008104:	b087      	sub	sp, #28
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	607a      	str	r2, [r7, #4]
 800810e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800811c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	021a      	lsls	r2, r3, #8
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	431a      	orrs	r2, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	4313      	orrs	r3, r2
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	4313      	orrs	r3, r2
 800812e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	609a      	str	r2, [r3, #8]
}
 8008136:	bf00      	nop
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008154:	2302      	movs	r3, #2
 8008156:	e046      	b.n	80081e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800817e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00e      	beq.n	80081ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081a4:	d009      	beq.n	80081ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a12      	ldr	r2, [pc, #72]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d004      	beq.n	80081ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a10      	ldr	r2, [pc, #64]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d10c      	bne.n	80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr
 80081f0:	40012c00 	.word	0x40012c00
 80081f4:	40000400 	.word	0x40000400
 80081f8:	40000800 	.word	0x40000800

080081fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	4770      	bx	lr

0800820e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr

08008220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e03f      	b.n	80082b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7fc fa16 	bl	8004678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2224      	movs	r2, #36	; 0x24
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fb49 	bl	80088fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	695a      	ldr	r2, [r3, #20]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08a      	sub	sp, #40	; 0x28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80082dc:	2300      	movs	r3, #0
 80082de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10d      	bne.n	800830e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	f003 0320 	and.w	r3, r3, #32
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <HAL_UART_IRQHandler+0x52>
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa4f 	bl	80087aa <UART_Receive_IT>
      return;
 800830c:	e17b      	b.n	8008606 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 80b1 	beq.w	8008478 <HAL_UART_IRQHandler+0x1bc>
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d105      	bne.n	800832c <HAL_UART_IRQHandler+0x70>
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 80a6 	beq.w	8008478 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <HAL_UART_IRQHandler+0x90>
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008344:	f043 0201 	orr.w	r2, r3, #1
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <HAL_UART_IRQHandler+0xb0>
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	f043 0202 	orr.w	r2, r3, #2
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <HAL_UART_IRQHandler+0xd0>
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	f043 0204 	orr.w	r2, r3, #4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00f      	beq.n	80083b6 <HAL_UART_IRQHandler+0xfa>
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f003 0320 	and.w	r3, r3, #32
 800839c:	2b00      	cmp	r3, #0
 800839e:	d104      	bne.n	80083aa <HAL_UART_IRQHandler+0xee>
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	f043 0208 	orr.w	r2, r3, #8
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 811e 	beq.w	80085fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d007      	beq.n	80083da <HAL_UART_IRQHandler+0x11e>
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f9e8 	bl	80087aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bf14      	ite	ne
 80083e8:	2301      	movne	r3, #1
 80083ea:	2300      	moveq	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <HAL_UART_IRQHandler+0x146>
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d031      	beq.n	8008466 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f92a 	bl	800865c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d023      	beq.n	800845e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	695a      	ldr	r2, [r3, #20]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008424:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	2b00      	cmp	r3, #0
 800842c:	d013      	beq.n	8008456 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008432:	4a76      	ldr	r2, [pc, #472]	; (800860c <HAL_UART_IRQHandler+0x350>)
 8008434:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843a:	4618      	mov	r0, r3
 800843c:	f7fc fc0c 	bl	8004c58 <HAL_DMA_Abort_IT>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d016      	beq.n	8008474 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008454:	e00e      	b.n	8008474 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f8ec 	bl	8008634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	e00a      	b.n	8008474 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f8e8 	bl	8008634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008464:	e006      	b.n	8008474 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f8e4 	bl	8008634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008472:	e0c3      	b.n	80085fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	bf00      	nop
    return;
 8008476:	e0c1      	b.n	80085fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847c:	2b01      	cmp	r3, #1
 800847e:	f040 80a1 	bne.w	80085c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 809b 	beq.w	80085c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	f003 0310 	and.w	r3, r3, #16
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 8095 	beq.w	80085c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d04e      	beq.n	800855c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80084c8:	8a3b      	ldrh	r3, [r7, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 8098 	beq.w	8008600 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084d4:	8a3a      	ldrh	r2, [r7, #16]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	f080 8092 	bcs.w	8008600 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	8a3a      	ldrh	r2, [r7, #16]
 80084e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d02b      	beq.n	8008544 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695a      	ldr	r2, [r3, #20]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0201 	bic.w	r2, r2, #1
 800850a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695a      	ldr	r2, [r3, #20]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800851a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2220      	movs	r2, #32
 8008520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0210 	bic.w	r2, r2, #16
 8008538:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	4618      	mov	r0, r3
 8008540:	f7fc fb4f 	bl	8004be2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800854c:	b29b      	uxth	r3, r3
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	b29b      	uxth	r3, r3
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f876 	bl	8008646 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800855a:	e051      	b.n	8008600 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008564:	b29b      	uxth	r3, r3
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800856e:	b29b      	uxth	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d047      	beq.n	8008604 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008574:	8a7b      	ldrh	r3, [r7, #18]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d044      	beq.n	8008604 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008588:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	695a      	ldr	r2, [r3, #20]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0201 	bic.w	r2, r2, #1
 8008598:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2220      	movs	r2, #32
 800859e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 0210 	bic.w	r2, r2, #16
 80085b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085b8:	8a7b      	ldrh	r3, [r7, #18]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f842 	bl	8008646 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80085c2:	e01f      	b.n	8008604 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d008      	beq.n	80085e0 <HAL_UART_IRQHandler+0x324>
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f87f 	bl	80086dc <UART_Transmit_IT>
    return;
 80085de:	e012      	b.n	8008606 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00d      	beq.n	8008606 <HAL_UART_IRQHandler+0x34a>
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d008      	beq.n	8008606 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f8c0 	bl	800877a <UART_EndTransmit_IT>
    return;
 80085fa:	e004      	b.n	8008606 <HAL_UART_IRQHandler+0x34a>
    return;
 80085fc:	bf00      	nop
 80085fe:	e002      	b.n	8008606 <HAL_UART_IRQHandler+0x34a>
      return;
 8008600:	bf00      	nop
 8008602:	e000      	b.n	8008606 <HAL_UART_IRQHandler+0x34a>
      return;
 8008604:	bf00      	nop
  }
}
 8008606:	3728      	adds	r7, #40	; 0x28
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	080086b5 	.word	0x080086b5

08008610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr

08008622 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr

08008634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	460b      	mov	r3, r1
 8008650:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008672:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695a      	ldr	r2, [r3, #20]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0201 	bic.w	r2, r2, #1
 8008682:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008688:	2b01      	cmp	r3, #1
 800868a:	d107      	bne.n	800869c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0210 	bic.w	r2, r2, #16
 800869a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bc80      	pop	{r7}
 80086b2:	4770      	bx	lr

080086b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7ff ffb0 	bl	8008634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b21      	cmp	r3, #33	; 0x21
 80086ee:	d13e      	bne.n	800876e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f8:	d114      	bne.n	8008724 <UART_Transmit_IT+0x48>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d110      	bne.n	8008724 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008716:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	1c9a      	adds	r2, r3, #2
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	621a      	str	r2, [r3, #32]
 8008722:	e008      	b.n	8008736 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	1c59      	adds	r1, r3, #1
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	6211      	str	r1, [r2, #32]
 800872e:	781a      	ldrb	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	b29b      	uxth	r3, r3
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	4619      	mov	r1, r3
 8008744:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10f      	bne.n	800876a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008758:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008768:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	e000      	b.n	8008770 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800876e:	2302      	movs	r3, #2
  }
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr

0800877a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008790:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2220      	movs	r2, #32
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7ff ff38 	bl	8008610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b086      	sub	sp, #24
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b22      	cmp	r3, #34	; 0x22
 80087bc:	f040 8099 	bne.w	80088f2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c8:	d117      	bne.n	80087fa <UART_Receive_IT+0x50>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d113      	bne.n	80087fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f2:	1c9a      	adds	r2, r3, #2
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	629a      	str	r2, [r3, #40]	; 0x28
 80087f8:	e026      	b.n	8008848 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008800:	2300      	movs	r3, #0
 8008802:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880c:	d007      	beq.n	800881e <UART_Receive_IT+0x74>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <UART_Receive_IT+0x82>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	b2da      	uxtb	r2, r3
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	e008      	b.n	800883e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	b2db      	uxtb	r3, r3
 8008834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008838:	b2da      	uxtb	r2, r3
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	b29b      	uxth	r3, r3
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	4619      	mov	r1, r3
 8008856:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008858:	2b00      	cmp	r3, #0
 800885a:	d148      	bne.n	80088ee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0220 	bic.w	r2, r2, #32
 800886a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800887a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695a      	ldr	r2, [r3, #20]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 0201 	bic.w	r2, r2, #1
 800888a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2220      	movs	r2, #32
 8008890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	2b01      	cmp	r3, #1
 800889a:	d123      	bne.n	80088e4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f022 0210 	bic.w	r2, r2, #16
 80088b0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	2b10      	cmp	r3, #16
 80088be:	d10a      	bne.n	80088d6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff feb2 	bl	8008646 <HAL_UARTEx_RxEventCallback>
 80088e2:	e002      	b.n	80088ea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff fe9c 	bl	8008622 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	e002      	b.n	80088f4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e000      	b.n	80088f4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80088f2:	2302      	movs	r3, #2
  }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	431a      	orrs	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	4313      	orrs	r3, r2
 800892a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008936:	f023 030c 	bic.w	r3, r3, #12
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6812      	ldr	r2, [r2, #0]
 800893e:	68b9      	ldr	r1, [r7, #8]
 8008940:	430b      	orrs	r3, r1
 8008942:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a2c      	ldr	r2, [pc, #176]	; (8008a10 <UART_SetConfig+0x114>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d103      	bne.n	800896c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008964:	f7fe fc68 	bl	8007238 <HAL_RCC_GetPCLK2Freq>
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	e002      	b.n	8008972 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800896c:	f7fe fc50 	bl	8007210 <HAL_RCC_GetPCLK1Freq>
 8008970:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	009a      	lsls	r2, r3, #2
 800897c:	441a      	add	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	fbb2 f3f3 	udiv	r3, r2, r3
 8008988:	4a22      	ldr	r2, [pc, #136]	; (8008a14 <UART_SetConfig+0x118>)
 800898a:	fba2 2303 	umull	r2, r3, r2, r3
 800898e:	095b      	lsrs	r3, r3, #5
 8008990:	0119      	lsls	r1, r3, #4
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	009a      	lsls	r2, r3, #2
 800899c:	441a      	add	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80089a8:	4b1a      	ldr	r3, [pc, #104]	; (8008a14 <UART_SetConfig+0x118>)
 80089aa:	fba3 0302 	umull	r0, r3, r3, r2
 80089ae:	095b      	lsrs	r3, r3, #5
 80089b0:	2064      	movs	r0, #100	; 0x64
 80089b2:	fb00 f303 	mul.w	r3, r0, r3
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	3332      	adds	r3, #50	; 0x32
 80089bc:	4a15      	ldr	r2, [pc, #84]	; (8008a14 <UART_SetConfig+0x118>)
 80089be:	fba2 2303 	umull	r2, r3, r2, r3
 80089c2:	095b      	lsrs	r3, r3, #5
 80089c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089c8:	4419      	add	r1, r3
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009a      	lsls	r2, r3, #2
 80089d4:	441a      	add	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80089e0:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <UART_SetConfig+0x118>)
 80089e2:	fba3 0302 	umull	r0, r3, r3, r2
 80089e6:	095b      	lsrs	r3, r3, #5
 80089e8:	2064      	movs	r0, #100	; 0x64
 80089ea:	fb00 f303 	mul.w	r3, r0, r3
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	3332      	adds	r3, #50	; 0x32
 80089f4:	4a07      	ldr	r2, [pc, #28]	; (8008a14 <UART_SetConfig+0x118>)
 80089f6:	fba2 2303 	umull	r2, r3, r2, r3
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	f003 020f 	and.w	r2, r3, #15
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	440a      	add	r2, r1
 8008a06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008a08:	bf00      	nop
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	40013800 	.word	0x40013800
 8008a14:	51eb851f 	.word	0x51eb851f

08008a18 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a1e:	f3ef 8305 	mrs	r3, IPSR
 8008a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10f      	bne.n	8008a4a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2e:	607b      	str	r3, [r7, #4]
  return(result);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d109      	bne.n	8008a4a <osKernelInitialize+0x32>
 8008a36:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <osKernelInitialize+0x60>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d109      	bne.n	8008a52 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a42:	603b      	str	r3, [r7, #0]
  return(result);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008a4a:	f06f 0305 	mvn.w	r3, #5
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	e00c      	b.n	8008a6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a52:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <osKernelInitialize+0x60>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d105      	bne.n	8008a66 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008a5a:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <osKernelInitialize+0x60>)
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e002      	b.n	8008a6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr
 8008a78:	200004e4 	.word	0x200004e4

08008a7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a82:	f3ef 8305 	mrs	r3, IPSR
 8008a86:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10f      	bne.n	8008aae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a92:	607b      	str	r3, [r7, #4]
  return(result);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d109      	bne.n	8008aae <osKernelStart+0x32>
 8008a9a:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <osKernelStart+0x64>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d109      	bne.n	8008ab6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8008aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008aae:	f06f 0305 	mvn.w	r3, #5
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	e00e      	b.n	8008ad4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ab6:	4b0a      	ldr	r3, [pc, #40]	; (8008ae0 <osKernelStart+0x64>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d107      	bne.n	8008ace <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008abe:	4b08      	ldr	r3, [pc, #32]	; (8008ae0 <osKernelStart+0x64>)
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008ac4:	f002 f910 	bl	800ace8 <vTaskStartScheduler>
      stat = osOK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	e002      	b.n	8008ad4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ad2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	200004e4 	.word	0x200004e4

08008ae4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b092      	sub	sp, #72	; 0x48
 8008ae8:	af04      	add	r7, sp, #16
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008af4:	f3ef 8305 	mrs	r3, IPSR
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f040 8094 	bne.w	8008c2a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b02:	f3ef 8310 	mrs	r3, PRIMASK
 8008b06:	623b      	str	r3, [r7, #32]
  return(result);
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f040 808d 	bne.w	8008c2a <osThreadNew+0x146>
 8008b10:	4b48      	ldr	r3, [pc, #288]	; (8008c34 <osThreadNew+0x150>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d106      	bne.n	8008b26 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b18:	f3ef 8311 	mrs	r3, BASEPRI
 8008b1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f040 8082 	bne.w	8008c2a <osThreadNew+0x146>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d07e      	beq.n	8008c2a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008b2c:	2380      	movs	r3, #128	; 0x80
 8008b2e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008b30:	2318      	movs	r3, #24
 8008b32:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008b34:	2300      	movs	r3, #0
 8008b36:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008b38:	f107 031b 	add.w	r3, r7, #27
 8008b3c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d045      	beq.n	8008bd6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <osThreadNew+0x74>
        name = attr->name;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d008      	beq.n	8008b7e <osThreadNew+0x9a>
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6e:	2b38      	cmp	r3, #56	; 0x38
 8008b70:	d805      	bhi.n	8008b7e <osThreadNew+0x9a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <osThreadNew+0x9e>
        return (NULL);
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e054      	b.n	8008c2c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d003      	beq.n	8008b92 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	089b      	lsrs	r3, r3, #2
 8008b90:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00e      	beq.n	8008bb8 <osThreadNew+0xd4>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	2bbf      	cmp	r3, #191	; 0xbf
 8008ba0:	d90a      	bls.n	8008bb8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d006      	beq.n	8008bb8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <osThreadNew+0xd4>
        mem = 1;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bb6:	e010      	b.n	8008bda <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10c      	bne.n	8008bda <osThreadNew+0xf6>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d108      	bne.n	8008bda <osThreadNew+0xf6>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <osThreadNew+0xf6>
          mem = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bd4:	e001      	b.n	8008bda <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d110      	bne.n	8008c02 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008be8:	9202      	str	r2, [sp, #8]
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f001 fd80 	bl	800a6fc <xTaskCreateStatic>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	617b      	str	r3, [r7, #20]
 8008c00:	e013      	b.n	8008c2a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d110      	bne.n	8008c2a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	f107 0314 	add.w	r3, r7, #20
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f001 fdca 	bl	800a7b4 <xTaskCreate>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d001      	beq.n	8008c2a <osThreadNew+0x146>
          hTask = NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008c2a:	697b      	ldr	r3, [r7, #20]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3738      	adds	r7, #56	; 0x38
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	200004e4 	.word	0x200004e4

08008c38 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c44:	f3ef 8305 	mrs	r3, IPSR
 8008c48:	617b      	str	r3, [r7, #20]
  return(result);
 8008c4a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10f      	bne.n	8008c70 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c50:	f3ef 8310 	mrs	r3, PRIMASK
 8008c54:	613b      	str	r3, [r7, #16]
  return(result);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d109      	bne.n	8008c70 <osThreadSuspend+0x38>
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <osThreadSuspend+0x64>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d109      	bne.n	8008c78 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c64:	f3ef 8311 	mrs	r3, BASEPRI
 8008c68:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8008c70:	f06f 0305 	mvn.w	r3, #5
 8008c74:	61fb      	str	r3, [r7, #28]
 8008c76:	e00b      	b.n	8008c90 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8008c7e:	f06f 0303 	mvn.w	r3, #3
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e004      	b.n	8008c90 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8008c8a:	69b8      	ldr	r0, [r7, #24]
 8008c8c:	f001 ff1e 	bl	800aacc <vTaskSuspend>
  }

  return (stat);
 8008c90:	69fb      	ldr	r3, [r7, #28]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3720      	adds	r7, #32
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200004e4 	.word	0x200004e4

08008ca0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cac:	f3ef 8305 	mrs	r3, IPSR
 8008cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8008cb2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10f      	bne.n	8008cd8 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8008cbc:	613b      	str	r3, [r7, #16]
  return(result);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d109      	bne.n	8008cd8 <osThreadResume+0x38>
 8008cc4:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <osThreadResume+0x64>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d109      	bne.n	8008ce0 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8008cd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <osThreadResume+0x40>
    stat = osErrorISR;
 8008cd8:	f06f 0305 	mvn.w	r3, #5
 8008cdc:	61fb      	str	r3, [r7, #28]
 8008cde:	e00b      	b.n	8008cf8 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d103      	bne.n	8008cee <osThreadResume+0x4e>
    stat = osErrorParameter;
 8008ce6:	f06f 0303 	mvn.w	r3, #3
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	e004      	b.n	8008cf8 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8008cf2:	69b8      	ldr	r0, [r7, #24]
 8008cf4:	f001 ff9a 	bl	800ac2c <vTaskResume>
  }

  return (stat);
 8008cf8:	69fb      	ldr	r3, [r7, #28]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3720      	adds	r7, #32
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	200004e4 	.word	0x200004e4

08008d08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d10:	f3ef 8305 	mrs	r3, IPSR
 8008d14:	613b      	str	r3, [r7, #16]
  return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10f      	bne.n	8008d3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d109      	bne.n	8008d3c <osDelay+0x34>
 8008d28:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <osDelay+0x58>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d109      	bne.n	8008d44 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d30:	f3ef 8311 	mrs	r3, BASEPRI
 8008d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <osDelay+0x3c>
    stat = osErrorISR;
 8008d3c:	f06f 0305 	mvn.w	r3, #5
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	e007      	b.n	8008d54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fe88 	bl	800aa64 <vTaskDelay>
    }
  }

  return (stat);
 8008d54:	697b      	ldr	r3, [r7, #20]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	200004e4 	.word	0x200004e4

08008d64 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08a      	sub	sp, #40	; 0x28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d70:	f3ef 8305 	mrs	r3, IPSR
 8008d74:	613b      	str	r3, [r7, #16]
  return(result);
 8008d76:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f040 8085 	bne.w	8008e88 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d82:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d17e      	bne.n	8008e88 <osMutexNew+0x124>
 8008d8a:	4b42      	ldr	r3, [pc, #264]	; (8008e94 <osMutexNew+0x130>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d105      	bne.n	8008d9e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d92:	f3ef 8311 	mrs	r3, BASEPRI
 8008d96:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d174      	bne.n	8008e88 <osMutexNew+0x124>
    if (attr != NULL) {
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <osMutexNew+0x48>
      type = attr->attr_bits;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	e001      	b.n	8008db0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <osMutexNew+0x5c>
      rmtx = 1U;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	61fb      	str	r3, [r7, #28]
 8008dbe:	e001      	b.n	8008dc4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	f003 0308 	and.w	r3, r3, #8
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d15c      	bne.n	8008e88 <osMutexNew+0x124>
      mem = -1;
 8008dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dd2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d015      	beq.n	8008e06 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d006      	beq.n	8008df0 <osMutexNew+0x8c>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	2b4f      	cmp	r3, #79	; 0x4f
 8008de8:	d902      	bls.n	8008df0 <osMutexNew+0x8c>
          mem = 1;
 8008dea:	2301      	movs	r3, #1
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	e00c      	b.n	8008e0a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d108      	bne.n	8008e0a <osMutexNew+0xa6>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d104      	bne.n	8008e0a <osMutexNew+0xa6>
            mem = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	e001      	b.n	8008e0a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d112      	bne.n	8008e36 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d007      	beq.n	8008e26 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	2004      	movs	r0, #4
 8008e1e:	f000 fd1d 	bl	800985c <xQueueCreateMutexStatic>
 8008e22:	6278      	str	r0, [r7, #36]	; 0x24
 8008e24:	e016      	b.n	8008e54 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	f000 fd15 	bl	800985c <xQueueCreateMutexStatic>
 8008e32:	6278      	str	r0, [r7, #36]	; 0x24
 8008e34:	e00e      	b.n	8008e54 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10b      	bne.n	8008e54 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d004      	beq.n	8008e4c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008e42:	2004      	movs	r0, #4
 8008e44:	f000 fcf2 	bl	800982c <xQueueCreateMutex>
 8008e48:	6278      	str	r0, [r7, #36]	; 0x24
 8008e4a:	e003      	b.n	8008e54 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	f000 fced 	bl	800982c <xQueueCreateMutex>
 8008e52:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00c      	beq.n	8008e74 <osMutexNew+0x110>
        if (attr != NULL) {
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <osMutexNew+0x104>
          name = attr->name;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	617b      	str	r3, [r7, #20]
 8008e66:	e001      	b.n	8008e6c <osMutexNew+0x108>
        } else {
          name = NULL;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008e6c:	6979      	ldr	r1, [r7, #20]
 8008e6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e70:	f001 fbbe 	bl	800a5f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d006      	beq.n	8008e88 <osMutexNew+0x124>
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	f043 0301 	orr.w	r3, r3, #1
 8008e86:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3728      	adds	r7, #40	; 0x28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	200004e4 	.word	0x200004e4

08008e98 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f023 0301 	bic.w	r3, r3, #1
 8008ea8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eb6:	f3ef 8305 	mrs	r3, IPSR
 8008eba:	613b      	str	r3, [r7, #16]
  return(result);
 8008ebc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10f      	bne.n	8008ee2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d109      	bne.n	8008ee2 <osMutexAcquire+0x4a>
 8008ece:	4b20      	ldr	r3, [pc, #128]	; (8008f50 <osMutexAcquire+0xb8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d109      	bne.n	8008eea <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8008eda:	60bb      	str	r3, [r7, #8]
  return(result);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008ee2:	f06f 0305 	mvn.w	r3, #5
 8008ee6:	61fb      	str	r3, [r7, #28]
 8008ee8:	e02c      	b.n	8008f44 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d103      	bne.n	8008ef8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008ef0:	f06f 0303 	mvn.w	r3, #3
 8008ef4:	61fb      	str	r3, [r7, #28]
 8008ef6:	e025      	b.n	8008f44 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d011      	beq.n	8008f22 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	69b8      	ldr	r0, [r7, #24]
 8008f02:	f000 fcfa 	bl	80098fa <xQueueTakeMutexRecursive>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d01b      	beq.n	8008f44 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008f12:	f06f 0301 	mvn.w	r3, #1
 8008f16:	61fb      	str	r3, [r7, #28]
 8008f18:	e014      	b.n	8008f44 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008f1a:	f06f 0302 	mvn.w	r3, #2
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	e010      	b.n	8008f44 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	69b8      	ldr	r0, [r7, #24]
 8008f26:	f001 f88d 	bl	800a044 <xQueueSemaphoreTake>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d009      	beq.n	8008f44 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008f36:	f06f 0301 	mvn.w	r3, #1
 8008f3a:	61fb      	str	r3, [r7, #28]
 8008f3c:	e002      	b.n	8008f44 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008f3e:	f06f 0302 	mvn.w	r3, #2
 8008f42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f44:	69fb      	ldr	r3, [r7, #28]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	200004e4 	.word	0x200004e4

08008f54 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f023 0301 	bic.w	r3, r3, #1
 8008f62:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f70:	f3ef 8305 	mrs	r3, IPSR
 8008f74:	613b      	str	r3, [r7, #16]
  return(result);
 8008f76:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10f      	bne.n	8008f9c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d109      	bne.n	8008f9c <osMutexRelease+0x48>
 8008f88:	4b19      	ldr	r3, [pc, #100]	; (8008ff0 <osMutexRelease+0x9c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d109      	bne.n	8008fa4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f90:	f3ef 8311 	mrs	r3, BASEPRI
 8008f94:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008f9c:	f06f 0305 	mvn.w	r3, #5
 8008fa0:	61fb      	str	r3, [r7, #28]
 8008fa2:	e01f      	b.n	8008fe4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d103      	bne.n	8008fb2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008faa:	f06f 0303 	mvn.w	r3, #3
 8008fae:	61fb      	str	r3, [r7, #28]
 8008fb0:	e018      	b.n	8008fe4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008fb8:	69b8      	ldr	r0, [r7, #24]
 8008fba:	f000 fc6a 	bl	8009892 <xQueueGiveMutexRecursive>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d00f      	beq.n	8008fe4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008fc4:	f06f 0302 	mvn.w	r3, #2
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	e00b      	b.n	8008fe4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008fcc:	2300      	movs	r3, #0
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	69b8      	ldr	r0, [r7, #24]
 8008fd4:	f000 fd32 	bl	8009a3c <xQueueGenericSend>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d002      	beq.n	8008fe4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008fde:	f06f 0302 	mvn.w	r3, #2
 8008fe2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008fe4:	69fb      	ldr	r3, [r7, #28]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3720      	adds	r7, #32
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	200004e4 	.word	0x200004e4

08008ff4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08c      	sub	sp, #48	; 0x30
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009000:	2300      	movs	r3, #0
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009004:	f3ef 8305 	mrs	r3, IPSR
 8009008:	61bb      	str	r3, [r7, #24]
  return(result);
 800900a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 8086 	bne.w	800911e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009012:	f3ef 8310 	mrs	r3, PRIMASK
 8009016:	617b      	str	r3, [r7, #20]
  return(result);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d17f      	bne.n	800911e <osSemaphoreNew+0x12a>
 800901e:	4b42      	ldr	r3, [pc, #264]	; (8009128 <osSemaphoreNew+0x134>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d105      	bne.n	8009032 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009026:	f3ef 8311 	mrs	r3, BASEPRI
 800902a:	613b      	str	r3, [r7, #16]
  return(result);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d175      	bne.n	800911e <osSemaphoreNew+0x12a>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d072      	beq.n	800911e <osSemaphoreNew+0x12a>
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d86e      	bhi.n	800911e <osSemaphoreNew+0x12a>
    mem = -1;
 8009040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009044:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d015      	beq.n	8009078 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <osSemaphoreNew+0x6e>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	2b4f      	cmp	r3, #79	; 0x4f
 800905a:	d902      	bls.n	8009062 <osSemaphoreNew+0x6e>
        mem = 1;
 800905c:	2301      	movs	r3, #1
 800905e:	623b      	str	r3, [r7, #32]
 8009060:	e00c      	b.n	800907c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d108      	bne.n	800907c <osSemaphoreNew+0x88>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <osSemaphoreNew+0x88>
          mem = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	623b      	str	r3, [r7, #32]
 8009076:	e001      	b.n	800907c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009082:	d04c      	beq.n	800911e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d128      	bne.n	80090dc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800908a:	6a3b      	ldr	r3, [r7, #32]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d10a      	bne.n	80090a6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	2203      	movs	r2, #3
 8009096:	9200      	str	r2, [sp, #0]
 8009098:	2200      	movs	r2, #0
 800909a:	2100      	movs	r1, #0
 800909c:	2001      	movs	r0, #1
 800909e:	f000 fad3 	bl	8009648 <xQueueGenericCreateStatic>
 80090a2:	6278      	str	r0, [r7, #36]	; 0x24
 80090a4:	e005      	b.n	80090b2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80090a6:	2203      	movs	r2, #3
 80090a8:	2100      	movs	r1, #0
 80090aa:	2001      	movs	r0, #1
 80090ac:	f000 fb43 	bl	8009736 <xQueueGenericCreate>
 80090b0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d022      	beq.n	80090fe <osSemaphoreNew+0x10a>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d01f      	beq.n	80090fe <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80090be:	2300      	movs	r3, #0
 80090c0:	2200      	movs	r2, #0
 80090c2:	2100      	movs	r1, #0
 80090c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090c6:	f000 fcb9 	bl	8009a3c <xQueueGenericSend>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d016      	beq.n	80090fe <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80090d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090d2:	f001 f943 	bl	800a35c <vQueueDelete>
            hSemaphore = NULL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
 80090da:	e010      	b.n	80090fe <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d108      	bne.n	80090f4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	461a      	mov	r2, r3
 80090e8:	68b9      	ldr	r1, [r7, #8]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 fc3b 	bl	8009966 <xQueueCreateCountingSemaphoreStatic>
 80090f0:	6278      	str	r0, [r7, #36]	; 0x24
 80090f2:	e004      	b.n	80090fe <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 fc6c 	bl	80099d4 <xQueueCreateCountingSemaphore>
 80090fc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00c      	beq.n	800911e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <osSemaphoreNew+0x11e>
          name = attr->name;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	e001      	b.n	8009116 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009116:	69f9      	ldr	r1, [r7, #28]
 8009118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800911a:	f001 fa69 	bl	800a5f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009120:	4618      	mov	r0, r3
 8009122:	3728      	adds	r7, #40	; 0x28
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	200004e4 	.word	0x200004e4

0800912c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800913a:	2300      	movs	r3, #0
 800913c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d103      	bne.n	800914c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009144:	f06f 0303 	mvn.w	r3, #3
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	e04b      	b.n	80091e4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800914c:	f3ef 8305 	mrs	r3, IPSR
 8009150:	617b      	str	r3, [r7, #20]
  return(result);
 8009152:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10f      	bne.n	8009178 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009158:	f3ef 8310 	mrs	r3, PRIMASK
 800915c:	613b      	str	r3, [r7, #16]
  return(result);
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <osSemaphoreAcquire+0x4c>
 8009164:	4b22      	ldr	r3, [pc, #136]	; (80091f0 <osSemaphoreAcquire+0xc4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b02      	cmp	r3, #2
 800916a:	d128      	bne.n	80091be <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800916c:	f3ef 8311 	mrs	r3, BASEPRI
 8009170:	60fb      	str	r3, [r7, #12]
  return(result);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d022      	beq.n	80091be <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800917e:	f06f 0303 	mvn.w	r3, #3
 8009182:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009184:	e02d      	b.n	80091e2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8009186:	2300      	movs	r3, #0
 8009188:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800918a:	f107 0308 	add.w	r3, r7, #8
 800918e:	461a      	mov	r2, r3
 8009190:	2100      	movs	r1, #0
 8009192:	69b8      	ldr	r0, [r7, #24]
 8009194:	f001 f862 	bl	800a25c <xQueueReceiveFromISR>
 8009198:	4603      	mov	r3, r0
 800919a:	2b01      	cmp	r3, #1
 800919c:	d003      	beq.n	80091a6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800919e:	f06f 0302 	mvn.w	r3, #2
 80091a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80091a4:	e01d      	b.n	80091e2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01a      	beq.n	80091e2 <osSemaphoreAcquire+0xb6>
 80091ac:	4b11      	ldr	r3, [pc, #68]	; (80091f4 <osSemaphoreAcquire+0xc8>)
 80091ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80091bc:	e011      	b.n	80091e2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	69b8      	ldr	r0, [r7, #24]
 80091c2:	f000 ff3f 	bl	800a044 <xQueueSemaphoreTake>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d00b      	beq.n	80091e4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80091d2:	f06f 0301 	mvn.w	r3, #1
 80091d6:	61fb      	str	r3, [r7, #28]
 80091d8:	e004      	b.n	80091e4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80091da:	f06f 0302 	mvn.w	r3, #2
 80091de:	61fb      	str	r3, [r7, #28]
 80091e0:	e000      	b.n	80091e4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80091e2:	bf00      	nop
      }
    }
  }

  return (stat);
 80091e4:	69fb      	ldr	r3, [r7, #28]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3720      	adds	r7, #32
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	200004e4 	.word	0x200004e4
 80091f4:	e000ed04 	.word	0xe000ed04

080091f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d103      	bne.n	8009216 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800920e:	f06f 0303 	mvn.w	r3, #3
 8009212:	61fb      	str	r3, [r7, #28]
 8009214:	e03e      	b.n	8009294 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009216:	f3ef 8305 	mrs	r3, IPSR
 800921a:	617b      	str	r3, [r7, #20]
  return(result);
 800921c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10f      	bne.n	8009242 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009222:	f3ef 8310 	mrs	r3, PRIMASK
 8009226:	613b      	str	r3, [r7, #16]
  return(result);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d109      	bne.n	8009242 <osSemaphoreRelease+0x4a>
 800922e:	4b1c      	ldr	r3, [pc, #112]	; (80092a0 <osSemaphoreRelease+0xa8>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d120      	bne.n	8009278 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009236:	f3ef 8311 	mrs	r3, BASEPRI
 800923a:	60fb      	str	r3, [r7, #12]
  return(result);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d01a      	beq.n	8009278 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8009242:	2300      	movs	r3, #0
 8009244:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009246:	f107 0308 	add.w	r3, r7, #8
 800924a:	4619      	mov	r1, r3
 800924c:	69b8      	ldr	r0, [r7, #24]
 800924e:	f000 fd8b 	bl	8009d68 <xQueueGiveFromISR>
 8009252:	4603      	mov	r3, r0
 8009254:	2b01      	cmp	r3, #1
 8009256:	d003      	beq.n	8009260 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009258:	f06f 0302 	mvn.w	r3, #2
 800925c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800925e:	e018      	b.n	8009292 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d015      	beq.n	8009292 <osSemaphoreRelease+0x9a>
 8009266:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <osSemaphoreRelease+0xac>)
 8009268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009276:	e00c      	b.n	8009292 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009278:	2300      	movs	r3, #0
 800927a:	2200      	movs	r2, #0
 800927c:	2100      	movs	r1, #0
 800927e:	69b8      	ldr	r0, [r7, #24]
 8009280:	f000 fbdc 	bl	8009a3c <xQueueGenericSend>
 8009284:	4603      	mov	r3, r0
 8009286:	2b01      	cmp	r3, #1
 8009288:	d004      	beq.n	8009294 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800928a:	f06f 0302 	mvn.w	r3, #2
 800928e:	61fb      	str	r3, [r7, #28]
 8009290:	e000      	b.n	8009294 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009292:	bf00      	nop
    }
  }

  return (stat);
 8009294:	69fb      	ldr	r3, [r7, #28]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3720      	adds	r7, #32
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	200004e4 	.word	0x200004e4
 80092a4:	e000ed04 	.word	0xe000ed04

080092a8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08c      	sub	sp, #48	; 0x30
 80092ac:	af02      	add	r7, sp, #8
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092b8:	f3ef 8305 	mrs	r3, IPSR
 80092bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80092be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d16f      	bne.n	80093a4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c4:	f3ef 8310 	mrs	r3, PRIMASK
 80092c8:	617b      	str	r3, [r7, #20]
  return(result);
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d169      	bne.n	80093a4 <osMessageQueueNew+0xfc>
 80092d0:	4b37      	ldr	r3, [pc, #220]	; (80093b0 <osMessageQueueNew+0x108>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d105      	bne.n	80092e4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092d8:	f3ef 8311 	mrs	r3, BASEPRI
 80092dc:	613b      	str	r3, [r7, #16]
  return(result);
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d15f      	bne.n	80093a4 <osMessageQueueNew+0xfc>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d05c      	beq.n	80093a4 <osMessageQueueNew+0xfc>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d059      	beq.n	80093a4 <osMessageQueueNew+0xfc>
    mem = -1;
 80092f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d029      	beq.n	8009350 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d012      	beq.n	800932a <osMessageQueueNew+0x82>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2b4f      	cmp	r3, #79	; 0x4f
 800930a:	d90e      	bls.n	800932a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	695a      	ldr	r2, [r3, #20]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	68b9      	ldr	r1, [r7, #8]
 800931c:	fb01 f303 	mul.w	r3, r1, r3
 8009320:	429a      	cmp	r2, r3
 8009322:	d302      	bcc.n	800932a <osMessageQueueNew+0x82>
        mem = 1;
 8009324:	2301      	movs	r3, #1
 8009326:	623b      	str	r3, [r7, #32]
 8009328:	e014      	b.n	8009354 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d110      	bne.n	8009354 <osMessageQueueNew+0xac>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10c      	bne.n	8009354 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800933e:	2b00      	cmp	r3, #0
 8009340:	d108      	bne.n	8009354 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d104      	bne.n	8009354 <osMessageQueueNew+0xac>
          mem = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	623b      	str	r3, [r7, #32]
 800934e:	e001      	b.n	8009354 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d10b      	bne.n	8009372 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691a      	ldr	r2, [r3, #16]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	2100      	movs	r1, #0
 8009364:	9100      	str	r1, [sp, #0]
 8009366:	68b9      	ldr	r1, [r7, #8]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f96d 	bl	8009648 <xQueueGenericCreateStatic>
 800936e:	6278      	str	r0, [r7, #36]	; 0x24
 8009370:	e008      	b.n	8009384 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d105      	bne.n	8009384 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009378:	2200      	movs	r2, #0
 800937a:	68b9      	ldr	r1, [r7, #8]
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f9da 	bl	8009736 <xQueueGenericCreate>
 8009382:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00c      	beq.n	80093a4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	61fb      	str	r3, [r7, #28]
 8009396:	e001      	b.n	800939c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009398:	2300      	movs	r3, #0
 800939a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800939c:	69f9      	ldr	r1, [r7, #28]
 800939e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093a0:	f001 f926 	bl	800a5f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3728      	adds	r7, #40	; 0x28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200004e4 	.word	0x200004e4

080093b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4a06      	ldr	r2, [pc, #24]	; (80093dc <vApplicationGetIdleTaskMemory+0x28>)
 80093c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	4a05      	ldr	r2, [pc, #20]	; (80093e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80093ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2280      	movs	r2, #128	; 0x80
 80093d0:	601a      	str	r2, [r3, #0]
}
 80093d2:	bf00      	nop
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bc80      	pop	{r7}
 80093da:	4770      	bx	lr
 80093dc:	200004e8 	.word	0x200004e8
 80093e0:	200005a8 	.word	0x200005a8

080093e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4a07      	ldr	r2, [pc, #28]	; (8009410 <vApplicationGetTimerTaskMemory+0x2c>)
 80093f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	4a06      	ldr	r2, [pc, #24]	; (8009414 <vApplicationGetTimerTaskMemory+0x30>)
 80093fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009402:	601a      	str	r2, [r3, #0]
}
 8009404:	bf00      	nop
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	bc80      	pop	{r7}
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	200007a8 	.word	0x200007a8
 8009414:	20000868 	.word	0x20000868

08009418 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f103 0208 	add.w	r2, r3, #8
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009430:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f103 0208 	add.w	r2, r3, #8
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f103 0208 	add.w	r2, r3, #8
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	bc80      	pop	{r7}
 8009454:	4770      	bx	lr

08009456 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	bc80      	pop	{r7}
 800946c:	4770      	bx	lr

0800946e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	601a      	str	r2, [r3, #0]
}
 80094aa:	bf00      	nop
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bc80      	pop	{r7}
 80094b2:	4770      	bx	lr

080094b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ca:	d103      	bne.n	80094d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	60fb      	str	r3, [r7, #12]
 80094d2:	e00c      	b.n	80094ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3308      	adds	r3, #8
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	e002      	b.n	80094e2 <vListInsert+0x2e>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d2f6      	bcs.n	80094dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	601a      	str	r2, [r3, #0]
}
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	bc80      	pop	{r7}
 8009522:	4770      	bx	lr

08009524 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	6892      	ldr	r2, [r2, #8]
 800953a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6852      	ldr	r2, [r2, #4]
 8009544:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	429a      	cmp	r2, r3
 800954e:	d103      	bne.n	8009558 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	1e5a      	subs	r2, r3, #1
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	bc80      	pop	{r7}
 8009574:	4770      	bx	lr
	...

08009578 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095a2:	f002 fdbb 	bl	800c11c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095b2:	fb01 f303 	mul.w	r3, r1, r3
 80095b6:	441a      	add	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d2:	3b01      	subs	r3, #1
 80095d4:	68f9      	ldr	r1, [r7, #12]
 80095d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095d8:	fb01 f303 	mul.w	r3, r1, r3
 80095dc:	441a      	add	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	22ff      	movs	r2, #255	; 0xff
 80095e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	22ff      	movs	r2, #255	; 0xff
 80095ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d114      	bne.n	8009622 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01a      	beq.n	8009636 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3310      	adds	r3, #16
 8009604:	4618      	mov	r0, r3
 8009606:	f001 fe2d 	bl	800b264 <xTaskRemoveFromEventList>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d012      	beq.n	8009636 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009610:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <xQueueGenericReset+0xcc>)
 8009612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	e009      	b.n	8009636 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3310      	adds	r3, #16
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff fef6 	bl	8009418 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3324      	adds	r3, #36	; 0x24
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff fef1 	bl	8009418 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009636:	f002 fda1 	bl	800c17c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800963a:	2301      	movs	r3, #1
}
 800963c:	4618      	mov	r0, r3
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08e      	sub	sp, #56	; 0x38
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10a      	bne.n	8009672 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800966e:	bf00      	nop
 8009670:	e7fe      	b.n	8009670 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10a      	bne.n	800968e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
}
 800968a:	bf00      	nop
 800968c:	e7fe      	b.n	800968c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <xQueueGenericCreateStatic+0x52>
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <xQueueGenericCreateStatic+0x56>
 800969a:	2301      	movs	r3, #1
 800969c:	e000      	b.n	80096a0 <xQueueGenericCreateStatic+0x58>
 800969e:	2300      	movs	r3, #0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10a      	bne.n	80096ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	623b      	str	r3, [r7, #32]
}
 80096b6:	bf00      	nop
 80096b8:	e7fe      	b.n	80096b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d102      	bne.n	80096c6 <xQueueGenericCreateStatic+0x7e>
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <xQueueGenericCreateStatic+0x82>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <xQueueGenericCreateStatic+0x84>
 80096ca:	2300      	movs	r3, #0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	61fb      	str	r3, [r7, #28]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096e6:	2350      	movs	r3, #80	; 0x50
 80096e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	2b50      	cmp	r3, #80	; 0x50
 80096ee:	d00a      	beq.n	8009706 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	61bb      	str	r3, [r7, #24]
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00d      	beq.n	800972c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009718:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	4613      	mov	r3, r2
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f000 f843 	bl	80097b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800972e:	4618      	mov	r0, r3
 8009730:	3730      	adds	r7, #48	; 0x30
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009736:	b580      	push	{r7, lr}
 8009738:	b08a      	sub	sp, #40	; 0x28
 800973a:	af02      	add	r7, sp, #8
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	4613      	mov	r3, r2
 8009742:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <xQueueGenericCreate+0x2a>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	613b      	str	r3, [r7, #16]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009766:	2300      	movs	r3, #0
 8009768:	61fb      	str	r3, [r7, #28]
 800976a:	e004      	b.n	8009776 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	fb02 f303 	mul.w	r3, r2, r3
 8009774:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	3350      	adds	r3, #80	; 0x50
 800977a:	4618      	mov	r0, r3
 800977c:	f002 fdce 	bl	800c31c <pvPortMalloc>
 8009780:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00f      	beq.n	80097a8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	3350      	adds	r3, #80	; 0x50
 800978c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009796:	79fa      	ldrb	r2, [r7, #7]
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4613      	mov	r3, r2
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 f805 	bl	80097b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80097a8:	69bb      	ldr	r3, [r7, #24]
	}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3720      	adds	r7, #32
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	607a      	str	r2, [r7, #4]
 80097be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d103      	bne.n	80097ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	e002      	b.n	80097d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097e0:	2101      	movs	r1, #1
 80097e2:	69b8      	ldr	r0, [r7, #24]
 80097e4:	f7ff fec8 	bl	8009578 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	78fa      	ldrb	r2, [r7, #3]
 80097ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097f0:	bf00      	nop
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00e      	beq.n	8009824 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009818:	2300      	movs	r3, #0
 800981a:	2200      	movs	r2, #0
 800981c:	2100      	movs	r1, #0
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f90c 	bl	8009a3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009836:	2301      	movs	r3, #1
 8009838:	617b      	str	r3, [r7, #20]
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	461a      	mov	r2, r3
 8009842:	6939      	ldr	r1, [r7, #16]
 8009844:	6978      	ldr	r0, [r7, #20]
 8009846:	f7ff ff76 	bl	8009736 <xQueueGenericCreate>
 800984a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff ffd3 	bl	80097f8 <prvInitialiseMutex>

		return pxNewQueue;
 8009852:	68fb      	ldr	r3, [r7, #12]
	}
 8009854:	4618      	mov	r0, r3
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800985c:	b580      	push	{r7, lr}
 800985e:	b088      	sub	sp, #32
 8009860:	af02      	add	r7, sp, #8
 8009862:	4603      	mov	r3, r0
 8009864:	6039      	str	r1, [r7, #0]
 8009866:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009868:	2301      	movs	r3, #1
 800986a:	617b      	str	r3, [r7, #20]
 800986c:	2300      	movs	r3, #0
 800986e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2200      	movs	r2, #0
 8009878:	6939      	ldr	r1, [r7, #16]
 800987a:	6978      	ldr	r0, [r7, #20]
 800987c:	f7ff fee4 	bl	8009648 <xQueueGenericCreateStatic>
 8009880:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f7ff ffb8 	bl	80097f8 <prvInitialiseMutex>

		return pxNewQueue;
 8009888:	68fb      	ldr	r3, [r7, #12]
	}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009892:	b590      	push	{r4, r7, lr}
 8009894:	b087      	sub	sp, #28
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10a      	bne.n	80098ba <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	60fb      	str	r3, [r7, #12]
}
 80098b6:	bf00      	nop
 80098b8:	e7fe      	b.n	80098b8 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	685c      	ldr	r4, [r3, #4]
 80098be:	f001 fe35 	bl	800b52c <xTaskGetCurrentTaskHandle>
 80098c2:	4603      	mov	r3, r0
 80098c4:	429c      	cmp	r4, r3
 80098c6:	d111      	bne.n	80098ec <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	1e5a      	subs	r2, r3, #1
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d105      	bne.n	80098e6 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80098da:	2300      	movs	r3, #0
 80098dc:	2200      	movs	r2, #0
 80098de:	2100      	movs	r1, #0
 80098e0:	6938      	ldr	r0, [r7, #16]
 80098e2:	f000 f8ab 	bl	8009a3c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80098e6:	2301      	movs	r3, #1
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	e001      	b.n	80098f0 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80098f0:	697b      	ldr	r3, [r7, #20]
	}
 80098f2:	4618      	mov	r0, r3
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd90      	pop	{r4, r7, pc}

080098fa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80098fa:	b590      	push	{r4, r7, lr}
 80098fc:	b087      	sub	sp, #28
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	60fb      	str	r3, [r7, #12]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	685c      	ldr	r4, [r3, #4]
 8009928:	f001 fe00 	bl	800b52c <xTaskGetCurrentTaskHandle>
 800992c:	4603      	mov	r3, r0
 800992e:	429c      	cmp	r4, r3
 8009930:	d107      	bne.n	8009942 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	e00c      	b.n	800995c <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6938      	ldr	r0, [r7, #16]
 8009946:	f000 fb7d 	bl	800a044 <xQueueSemaphoreTake>
 800994a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d004      	beq.n	800995c <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800995c:	697b      	ldr	r3, [r7, #20]
	}
 800995e:	4618      	mov	r0, r3
 8009960:	371c      	adds	r7, #28
 8009962:	46bd      	mov	sp, r7
 8009964:	bd90      	pop	{r4, r7, pc}

08009966 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009966:	b580      	push	{r7, lr}
 8009968:	b08a      	sub	sp, #40	; 0x28
 800996a:	af02      	add	r7, sp, #8
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	61bb      	str	r3, [r7, #24]
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	429a      	cmp	r2, r3
 8009994:	d90a      	bls.n	80099ac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	617b      	str	r3, [r7, #20]
}
 80099a8:	bf00      	nop
 80099aa:	e7fe      	b.n	80099aa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099ac:	2302      	movs	r3, #2
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	2100      	movs	r1, #0
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff fe46 	bl	8009648 <xQueueGenericCreateStatic>
 80099bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80099ca:	69fb      	ldr	r3, [r7, #28]
	}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3720      	adds	r7, #32
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	613b      	str	r3, [r7, #16]
}
 80099f6:	bf00      	nop
 80099f8:	e7fe      	b.n	80099f8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d90a      	bls.n	8009a18 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	60fb      	str	r3, [r7, #12]
}
 8009a14:	bf00      	nop
 8009a16:	e7fe      	b.n	8009a16 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009a18:	2202      	movs	r2, #2
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7ff fe8a 	bl	8009736 <xQueueGenericCreate>
 8009a22:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009a30:	697b      	ldr	r3, [r7, #20]
	}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08e      	sub	sp, #56	; 0x38
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10a      	bne.n	8009a6e <xQueueGenericSend+0x32>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d103      	bne.n	8009a7c <xQueueGenericSend+0x40>
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <xQueueGenericSend+0x44>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <xQueueGenericSend+0x46>
 8009a80:	2300      	movs	r3, #0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10a      	bne.n	8009a9c <xQueueGenericSend+0x60>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d103      	bne.n	8009aaa <xQueueGenericSend+0x6e>
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d101      	bne.n	8009aae <xQueueGenericSend+0x72>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e000      	b.n	8009ab0 <xQueueGenericSend+0x74>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <xQueueGenericSend+0x8e>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	623b      	str	r3, [r7, #32]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009aca:	f001 fd3d 	bl	800b548 <xTaskGetSchedulerState>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d102      	bne.n	8009ada <xQueueGenericSend+0x9e>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <xQueueGenericSend+0xa2>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e000      	b.n	8009ae0 <xQueueGenericSend+0xa4>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10a      	bne.n	8009afa <xQueueGenericSend+0xbe>
	__asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	61fb      	str	r3, [r7, #28]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009afa:	f002 fb0f 	bl	800c11c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d302      	bcc.n	8009b10 <xQueueGenericSend+0xd4>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d129      	bne.n	8009b64 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b16:	f000 fc5b 	bl	800a3d0 <prvCopyDataToQueue>
 8009b1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d010      	beq.n	8009b46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	3324      	adds	r3, #36	; 0x24
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f001 fb9b 	bl	800b264 <xTaskRemoveFromEventList>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d013      	beq.n	8009b5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b34:	4b3f      	ldr	r3, [pc, #252]	; (8009c34 <xQueueGenericSend+0x1f8>)
 8009b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	e00a      	b.n	8009b5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d007      	beq.n	8009b5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b4c:	4b39      	ldr	r3, [pc, #228]	; (8009c34 <xQueueGenericSend+0x1f8>)
 8009b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b5c:	f002 fb0e 	bl	800c17c <vPortExitCritical>
				return pdPASS;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e063      	b.n	8009c2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d103      	bne.n	8009b72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b6a:	f002 fb07 	bl	800c17c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	e05c      	b.n	8009c2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d106      	bne.n	8009b86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b78:	f107 0314 	add.w	r3, r7, #20
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f001 fbd5 	bl	800b32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b82:	2301      	movs	r3, #1
 8009b84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b86:	f002 faf9 	bl	800c17c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b8a:	f001 f921 	bl	800add0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b8e:	f002 fac5 	bl	800c11c <vPortEnterCritical>
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b98:	b25b      	sxtb	r3, r3
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b9e:	d103      	bne.n	8009ba8 <xQueueGenericSend+0x16c>
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bae:	b25b      	sxtb	r3, r3
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bb4:	d103      	bne.n	8009bbe <xQueueGenericSend+0x182>
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bbe:	f002 fadd 	bl	800c17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bc2:	1d3a      	adds	r2, r7, #4
 8009bc4:	f107 0314 	add.w	r3, r7, #20
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f001 fbc4 	bl	800b358 <xTaskCheckForTimeOut>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d124      	bne.n	8009c20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bd8:	f000 fcf2 	bl	800a5c0 <prvIsQueueFull>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d018      	beq.n	8009c14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	3310      	adds	r3, #16
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 faea 	bl	800b1c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bf2:	f000 fc7d 	bl	800a4f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009bf6:	f001 f8f9 	bl	800adec <xTaskResumeAll>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f47f af7c 	bne.w	8009afa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009c02:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <xQueueGenericSend+0x1f8>)
 8009c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c08:	601a      	str	r2, [r3, #0]
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	e772      	b.n	8009afa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c16:	f000 fc6b 	bl	800a4f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c1a:	f001 f8e7 	bl	800adec <xTaskResumeAll>
 8009c1e:	e76c      	b.n	8009afa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c22:	f000 fc65 	bl	800a4f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c26:	f001 f8e1 	bl	800adec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c2a:	2300      	movs	r3, #0
		}
	}
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3738      	adds	r7, #56	; 0x38
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	e000ed04 	.word	0xe000ed04

08009c38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08e      	sub	sp, #56	; 0x38
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d103      	bne.n	8009c74 <xQueueGenericSendFromISR+0x3c>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <xQueueGenericSendFromISR+0x40>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e000      	b.n	8009c7a <xQueueGenericSendFromISR+0x42>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10a      	bne.n	8009c94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	623b      	str	r3, [r7, #32]
}
 8009c90:	bf00      	nop
 8009c92:	e7fe      	b.n	8009c92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d103      	bne.n	8009ca2 <xQueueGenericSendFromISR+0x6a>
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d101      	bne.n	8009ca6 <xQueueGenericSendFromISR+0x6e>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e000      	b.n	8009ca8 <xQueueGenericSendFromISR+0x70>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	61fb      	str	r3, [r7, #28]
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cc2:	f002 faed 	bl	800c2a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	61ba      	str	r2, [r7, #24]
 8009cdc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009cde:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d302      	bcc.n	8009cf4 <xQueueGenericSendFromISR+0xbc>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d12c      	bne.n	8009d4e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	68b9      	ldr	r1, [r7, #8]
 8009d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d04:	f000 fb64 	bl	800a3d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d08:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d10:	d112      	bne.n	8009d38 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d016      	beq.n	8009d48 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	3324      	adds	r3, #36	; 0x24
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f001 faa0 	bl	800b264 <xTaskRemoveFromEventList>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00e      	beq.n	8009d48 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00b      	beq.n	8009d48 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	e007      	b.n	8009d48 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	b25a      	sxtb	r2, r3
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009d4c:	e001      	b.n	8009d52 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	637b      	str	r3, [r7, #52]	; 0x34
 8009d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d54:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3738      	adds	r7, #56	; 0x38
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b08e      	sub	sp, #56	; 0x38
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	623b      	str	r3, [r7, #32]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	61fb      	str	r3, [r7, #28]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d103      	bne.n	8009dc0 <xQueueGiveFromISR+0x58>
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <xQueueGiveFromISR+0x5c>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e000      	b.n	8009dc6 <xQueueGiveFromISR+0x5e>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10a      	bne.n	8009de0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	61bb      	str	r3, [r7, #24]
}
 8009ddc:	bf00      	nop
 8009dde:	e7fe      	b.n	8009dde <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009de0:	f002 fa5e 	bl	800c2a0 <vPortValidateInterruptPriority>
	__asm volatile
 8009de4:	f3ef 8211 	mrs	r2, BASEPRI
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	617a      	str	r2, [r7, #20]
 8009dfa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009dfc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e04:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d22b      	bcs.n	8009e68 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e2a:	d112      	bne.n	8009e52 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d016      	beq.n	8009e62 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	3324      	adds	r3, #36	; 0x24
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f001 fa13 	bl	800b264 <xTaskRemoveFromEventList>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00e      	beq.n	8009e62 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00b      	beq.n	8009e62 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	e007      	b.n	8009e62 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e56:	3301      	adds	r3, #1
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	b25a      	sxtb	r2, r3
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e62:	2301      	movs	r3, #1
 8009e64:	637b      	str	r3, [r7, #52]	; 0x34
 8009e66:	e001      	b.n	8009e6c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f383 8811 	msr	BASEPRI, r3
}
 8009e76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3738      	adds	r7, #56	; 0x38
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08c      	sub	sp, #48	; 0x30
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10a      	bne.n	8009eb4 <xQueueReceive+0x30>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	623b      	str	r3, [r7, #32]
}
 8009eb0:	bf00      	nop
 8009eb2:	e7fe      	b.n	8009eb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d103      	bne.n	8009ec2 <xQueueReceive+0x3e>
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <xQueueReceive+0x42>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e000      	b.n	8009ec8 <xQueueReceive+0x44>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10a      	bne.n	8009ee2 <xQueueReceive+0x5e>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	61fb      	str	r3, [r7, #28]
}
 8009ede:	bf00      	nop
 8009ee0:	e7fe      	b.n	8009ee0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ee2:	f001 fb31 	bl	800b548 <xTaskGetSchedulerState>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <xQueueReceive+0x6e>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <xQueueReceive+0x72>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e000      	b.n	8009ef8 <xQueueReceive+0x74>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10a      	bne.n	8009f12 <xQueueReceive+0x8e>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	61bb      	str	r3, [r7, #24]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f12:	f002 f903 	bl	800c11c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d01f      	beq.n	8009f62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f22:	68b9      	ldr	r1, [r7, #8]
 8009f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f26:	f000 fabd 	bl	800a4a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	1e5a      	subs	r2, r3, #1
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00f      	beq.n	8009f5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3c:	3310      	adds	r3, #16
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 f990 	bl	800b264 <xTaskRemoveFromEventList>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d007      	beq.n	8009f5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f4a:	4b3d      	ldr	r3, [pc, #244]	; (800a040 <xQueueReceive+0x1bc>)
 8009f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f5a:	f002 f90f 	bl	800c17c <vPortExitCritical>
				return pdPASS;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e069      	b.n	800a036 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d103      	bne.n	8009f70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f68:	f002 f908 	bl	800c17c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	e062      	b.n	800a036 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f76:	f107 0310 	add.w	r3, r7, #16
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 f9d6 	bl	800b32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f84:	f002 f8fa 	bl	800c17c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f88:	f000 ff22 	bl	800add0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f8c:	f002 f8c6 	bl	800c11c <vPortEnterCritical>
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f96:	b25b      	sxtb	r3, r3
 8009f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f9c:	d103      	bne.n	8009fa6 <xQueueReceive+0x122>
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fac:	b25b      	sxtb	r3, r3
 8009fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb2:	d103      	bne.n	8009fbc <xQueueReceive+0x138>
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fbc:	f002 f8de 	bl	800c17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fc0:	1d3a      	adds	r2, r7, #4
 8009fc2:	f107 0310 	add.w	r3, r7, #16
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f001 f9c5 	bl	800b358 <xTaskCheckForTimeOut>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d123      	bne.n	800a01c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fd6:	f000 fadd 	bl	800a594 <prvIsQueueEmpty>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d017      	beq.n	800a010 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	3324      	adds	r3, #36	; 0x24
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 f8eb 	bl	800b1c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ff0:	f000 fa7e 	bl	800a4f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ff4:	f000 fefa 	bl	800adec <xTaskResumeAll>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d189      	bne.n	8009f12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009ffe:	4b10      	ldr	r3, [pc, #64]	; (800a040 <xQueueReceive+0x1bc>)
 800a000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	e780      	b.n	8009f12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a012:	f000 fa6d 	bl	800a4f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a016:	f000 fee9 	bl	800adec <xTaskResumeAll>
 800a01a:	e77a      	b.n	8009f12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a01e:	f000 fa67 	bl	800a4f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a022:	f000 fee3 	bl	800adec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a028:	f000 fab4 	bl	800a594 <prvIsQueueEmpty>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f43f af6f 	beq.w	8009f12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a034:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a036:	4618      	mov	r0, r3
 800a038:	3730      	adds	r7, #48	; 0x30
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	e000ed04 	.word	0xe000ed04

0800a044 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08e      	sub	sp, #56	; 0x38
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a04e:	2300      	movs	r3, #0
 800a050:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a056:	2300      	movs	r3, #0
 800a058:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	623b      	str	r3, [r7, #32]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00a      	beq.n	800a094 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	61fb      	str	r3, [r7, #28]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a094:	f001 fa58 	bl	800b548 <xTaskGetSchedulerState>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d102      	bne.n	800a0a4 <xQueueSemaphoreTake+0x60>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <xQueueSemaphoreTake+0x64>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e000      	b.n	800a0aa <xQueueSemaphoreTake+0x66>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	61bb      	str	r3, [r7, #24]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0c4:	f002 f82a 	bl	800c11c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d024      	beq.n	800a11e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	1e5a      	subs	r2, r3, #1
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d104      	bne.n	800a0ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a0e4:	f001 fbb0 	bl	800b848 <pvTaskIncrementMutexHeldCount>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00f      	beq.n	800a116 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	3310      	adds	r3, #16
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f001 f8b2 	bl	800b264 <xTaskRemoveFromEventList>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d007      	beq.n	800a116 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a106:	4b54      	ldr	r3, [pc, #336]	; (800a258 <xQueueSemaphoreTake+0x214>)
 800a108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a116:	f002 f831 	bl	800c17c <vPortExitCritical>
				return pdPASS;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e097      	b.n	800a24e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d111      	bne.n	800a148 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00a      	beq.n	800a140 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	617b      	str	r3, [r7, #20]
}
 800a13c:	bf00      	nop
 800a13e:	e7fe      	b.n	800a13e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a140:	f002 f81c 	bl	800c17c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a144:	2300      	movs	r3, #0
 800a146:	e082      	b.n	800a24e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d106      	bne.n	800a15c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a14e:	f107 030c 	add.w	r3, r7, #12
 800a152:	4618      	mov	r0, r3
 800a154:	f001 f8ea 	bl	800b32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a15c:	f002 f80e 	bl	800c17c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a160:	f000 fe36 	bl	800add0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a164:	f001 ffda 	bl	800c11c <vPortEnterCritical>
 800a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a16e:	b25b      	sxtb	r3, r3
 800a170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a174:	d103      	bne.n	800a17e <xQueueSemaphoreTake+0x13a>
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a184:	b25b      	sxtb	r3, r3
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a18a:	d103      	bne.n	800a194 <xQueueSemaphoreTake+0x150>
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a194:	f001 fff2 	bl	800c17c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a198:	463a      	mov	r2, r7
 800a19a:	f107 030c 	add.w	r3, r7, #12
 800a19e:	4611      	mov	r1, r2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 f8d9 	bl	800b358 <xTaskCheckForTimeOut>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d132      	bne.n	800a212 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1ae:	f000 f9f1 	bl	800a594 <prvIsQueueEmpty>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d026      	beq.n	800a206 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d109      	bne.n	800a1d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a1c0:	f001 ffac 	bl	800c11c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f001 f9db 	bl	800b584 <xTaskPriorityInherit>
 800a1ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a1d0:	f001 ffd4 	bl	800c17c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	3324      	adds	r3, #36	; 0x24
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 fff1 	bl	800b1c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1e4:	f000 f984 	bl	800a4f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1e8:	f000 fe00 	bl	800adec <xTaskResumeAll>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f47f af68 	bne.w	800a0c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a1f4:	4b18      	ldr	r3, [pc, #96]	; (800a258 <xQueueSemaphoreTake+0x214>)
 800a1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	e75e      	b.n	800a0c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a206:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a208:	f000 f972 	bl	800a4f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a20c:	f000 fdee 	bl	800adec <xTaskResumeAll>
 800a210:	e758      	b.n	800a0c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a214:	f000 f96c 	bl	800a4f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a218:	f000 fde8 	bl	800adec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a21c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a21e:	f000 f9b9 	bl	800a594 <prvIsQueueEmpty>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	f43f af4d 	beq.w	800a0c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00d      	beq.n	800a24c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a230:	f001 ff74 	bl	800c11c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a236:	f000 f8b4 	bl	800a3a2 <prvGetDisinheritPriorityAfterTimeout>
 800a23a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a242:	4618      	mov	r0, r3
 800a244:	f001 fa7a 	bl	800b73c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a248:	f001 ff98 	bl	800c17c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a24c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3738      	adds	r7, #56	; 0x38
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	e000ed04 	.word	0xe000ed04

0800a25c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08e      	sub	sp, #56	; 0x38
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10a      	bne.n	800a288 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	623b      	str	r3, [r7, #32]
}
 800a284:	bf00      	nop
 800a286:	e7fe      	b.n	800a286 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d103      	bne.n	800a296 <xQueueReceiveFromISR+0x3a>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <xQueueReceiveFromISR+0x3e>
 800a296:	2301      	movs	r3, #1
 800a298:	e000      	b.n	800a29c <xQueueReceiveFromISR+0x40>
 800a29a:	2300      	movs	r3, #0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10a      	bne.n	800a2b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	61fb      	str	r3, [r7, #28]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2b6:	f001 fff3 	bl	800c2a0 <vPortValidateInterruptPriority>
	__asm volatile
 800a2ba:	f3ef 8211 	mrs	r2, BASEPRI
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	61ba      	str	r2, [r7, #24]
 800a2d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a2d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d02f      	beq.n	800a342 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2ec:	68b9      	ldr	r1, [r7, #8]
 800a2ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2f0:	f000 f8d8 	bl	800a4a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	1e5a      	subs	r2, r3, #1
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a2fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a304:	d112      	bne.n	800a32c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d016      	beq.n	800a33c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	3310      	adds	r3, #16
 800a312:	4618      	mov	r0, r3
 800a314:	f000 ffa6 	bl	800b264 <xTaskRemoveFromEventList>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00e      	beq.n	800a33c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00b      	beq.n	800a33c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	e007      	b.n	800a33c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a330:	3301      	adds	r3, #1
 800a332:	b2db      	uxtb	r3, r3
 800a334:	b25a      	sxtb	r2, r3
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a33c:	2301      	movs	r3, #1
 800a33e:	637b      	str	r3, [r7, #52]	; 0x34
 800a340:	e001      	b.n	800a346 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a342:	2300      	movs	r3, #0
 800a344:	637b      	str	r3, [r7, #52]	; 0x34
 800a346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a348:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f383 8811 	msr	BASEPRI, r3
}
 800a350:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a354:	4618      	mov	r0, r3
 800a356:	3738      	adds	r7, #56	; 0x38
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <vQueueDelete+0x28>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	60bb      	str	r3, [r7, #8]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f95b 	bl	800a640 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f002 f885 	bl	800c4a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b085      	sub	sp, #20
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d006      	beq.n	800a3c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	e001      	b.n	800a3c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
	}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bc80      	pop	{r7}
 800a3ce:	4770      	bx	lr

0800a3d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10d      	bne.n	800a40a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d14d      	bne.n	800a492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f001 f930 	bl	800b660 <xTaskPriorityDisinherit>
 800a400:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	605a      	str	r2, [r3, #4]
 800a408:	e043      	b.n	800a492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d119      	bne.n	800a444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6898      	ldr	r0, [r3, #8]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a418:	461a      	mov	r2, r3
 800a41a:	68b9      	ldr	r1, [r7, #8]
 800a41c:	f002 f982 	bl	800c724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	689a      	ldr	r2, [r3, #8]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a428:	441a      	add	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	689a      	ldr	r2, [r3, #8]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	429a      	cmp	r2, r3
 800a438:	d32b      	bcc.n	800a492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	609a      	str	r2, [r3, #8]
 800a442:	e026      	b.n	800a492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	68d8      	ldr	r0, [r3, #12]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44c:	461a      	mov	r2, r3
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	f002 f968 	bl	800c724 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	68da      	ldr	r2, [r3, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45c:	425b      	negs	r3, r3
 800a45e:	441a      	add	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	68da      	ldr	r2, [r3, #12]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d207      	bcs.n	800a480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a478:	425b      	negs	r3, r3
 800a47a:	441a      	add	r2, r3
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b02      	cmp	r3, #2
 800a484:	d105      	bne.n	800a492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	3b01      	subs	r3, #1
 800a490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	1c5a      	adds	r2, r3, #1
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a49a:	697b      	ldr	r3, [r7, #20]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d018      	beq.n	800a4e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68da      	ldr	r2, [r3, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4be:	441a      	add	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68da      	ldr	r2, [r3, #12]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d303      	bcc.n	800a4d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68d9      	ldr	r1, [r3, #12]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6838      	ldr	r0, [r7, #0]
 800a4e4:	f002 f91e 	bl	800c724 <memcpy>
	}
}
 800a4e8:	bf00      	nop
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a4f8:	f001 fe10 	bl	800c11c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a504:	e011      	b.n	800a52a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d012      	beq.n	800a534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3324      	adds	r3, #36	; 0x24
 800a512:	4618      	mov	r0, r3
 800a514:	f000 fea6 	bl	800b264 <xTaskRemoveFromEventList>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a51e:	f000 ff7d 	bl	800b41c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a522:	7bfb      	ldrb	r3, [r7, #15]
 800a524:	3b01      	subs	r3, #1
 800a526:	b2db      	uxtb	r3, r3
 800a528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	dce9      	bgt.n	800a506 <prvUnlockQueue+0x16>
 800a532:	e000      	b.n	800a536 <prvUnlockQueue+0x46>
					break;
 800a534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	22ff      	movs	r2, #255	; 0xff
 800a53a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a53e:	f001 fe1d 	bl	800c17c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a542:	f001 fdeb 	bl	800c11c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a54c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a54e:	e011      	b.n	800a574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d012      	beq.n	800a57e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3310      	adds	r3, #16
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fe81 	bl	800b264 <xTaskRemoveFromEventList>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a568:	f000 ff58 	bl	800b41c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	3b01      	subs	r3, #1
 800a570:	b2db      	uxtb	r3, r3
 800a572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	dce9      	bgt.n	800a550 <prvUnlockQueue+0x60>
 800a57c:	e000      	b.n	800a580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a57e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	22ff      	movs	r2, #255	; 0xff
 800a584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a588:	f001 fdf8 	bl	800c17c <vPortExitCritical>
}
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a59c:	f001 fdbe 	bl	800c11c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	e001      	b.n	800a5b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5b2:	f001 fde3 	bl	800c17c <vPortExitCritical>

	return xReturn;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5c8:	f001 fda8 	bl	800c11c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d102      	bne.n	800a5de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	e001      	b.n	800a5e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5e2:	f001 fdcb 	bl	800c17c <vPortExitCritical>

	return xReturn;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	e014      	b.n	800a62a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a600:	4a0e      	ldr	r2, [pc, #56]	; (800a63c <vQueueAddToRegistry+0x4c>)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10b      	bne.n	800a624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a60c:	490b      	ldr	r1, [pc, #44]	; (800a63c <vQueueAddToRegistry+0x4c>)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a616:	4a09      	ldr	r2, [pc, #36]	; (800a63c <vQueueAddToRegistry+0x4c>)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	00db      	lsls	r3, r3, #3
 800a61c:	4413      	add	r3, r2
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a622:	e006      	b.n	800a632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b07      	cmp	r3, #7
 800a62e:	d9e7      	bls.n	800a600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a630:	bf00      	nop
 800a632:	bf00      	nop
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	bc80      	pop	{r7}
 800a63a:	4770      	bx	lr
 800a63c:	20000c68 	.word	0x20000c68

0800a640 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a648:	2300      	movs	r3, #0
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	e016      	b.n	800a67c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a64e:	4a10      	ldr	r2, [pc, #64]	; (800a690 <vQueueUnregisterQueue+0x50>)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	00db      	lsls	r3, r3, #3
 800a654:	4413      	add	r3, r2
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d10b      	bne.n	800a676 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a65e:	4a0c      	ldr	r2, [pc, #48]	; (800a690 <vQueueUnregisterQueue+0x50>)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2100      	movs	r1, #0
 800a664:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a668:	4a09      	ldr	r2, [pc, #36]	; (800a690 <vQueueUnregisterQueue+0x50>)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	4413      	add	r3, r2
 800a670:	2200      	movs	r2, #0
 800a672:	605a      	str	r2, [r3, #4]
				break;
 800a674:	e006      	b.n	800a684 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	3301      	adds	r3, #1
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2b07      	cmp	r3, #7
 800a680:	d9e5      	bls.n	800a64e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	bc80      	pop	{r7}
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	20000c68 	.word	0x20000c68

0800a694 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a6a4:	f001 fd3a 	bl	800c11c <vPortEnterCritical>
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ae:	b25b      	sxtb	r3, r3
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b4:	d103      	bne.n	800a6be <vQueueWaitForMessageRestricted+0x2a>
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6c4:	b25b      	sxtb	r3, r3
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6ca:	d103      	bne.n	800a6d4 <vQueueWaitForMessageRestricted+0x40>
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6d4:	f001 fd52 	bl	800c17c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d106      	bne.n	800a6ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	3324      	adds	r3, #36	; 0x24
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	68b9      	ldr	r1, [r7, #8]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 fd8f 	bl	800b20c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a6ee:	6978      	ldr	r0, [r7, #20]
 800a6f0:	f7ff fefe 	bl	800a4f0 <prvUnlockQueue>
	}
 800a6f4:	bf00      	nop
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08e      	sub	sp, #56	; 0x38
 800a700:	af04      	add	r7, sp, #16
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	623b      	str	r3, [r7, #32]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10a      	bne.n	800a742 <xTaskCreateStatic+0x46>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	61fb      	str	r3, [r7, #28]
}
 800a73e:	bf00      	nop
 800a740:	e7fe      	b.n	800a740 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a742:	23c0      	movs	r3, #192	; 0xc0
 800a744:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	2bc0      	cmp	r3, #192	; 0xc0
 800a74a:	d00a      	beq.n	800a762 <xTaskCreateStatic+0x66>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	61bb      	str	r3, [r7, #24]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	2b00      	cmp	r3, #0
 800a766:	d01e      	beq.n	800a7a6 <xTaskCreateStatic+0xaa>
 800a768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d01b      	beq.n	800a7a6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a776:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a780:	2300      	movs	r3, #0
 800a782:	9303      	str	r3, [sp, #12]
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	9302      	str	r3, [sp, #8]
 800a788:	f107 0314 	add.w	r3, r7, #20
 800a78c:	9301      	str	r3, [sp, #4]
 800a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	68b9      	ldr	r1, [r7, #8]
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 f851 	bl	800a840 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a79e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7a0:	f000 f8f0 	bl	800a984 <prvAddNewTaskToReadyList>
 800a7a4:	e001      	b.n	800a7aa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7aa:	697b      	ldr	r3, [r7, #20]
	}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3728      	adds	r7, #40	; 0x28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08c      	sub	sp, #48	; 0x30
 800a7b8:	af04      	add	r7, sp, #16
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	603b      	str	r3, [r7, #0]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c4:	88fb      	ldrh	r3, [r7, #6]
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f001 fda7 	bl	800c31c <pvPortMalloc>
 800a7ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00e      	beq.n	800a7f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a7d6:	20c0      	movs	r0, #192	; 0xc0
 800a7d8:	f001 fda0 	bl	800c31c <pvPortMalloc>
 800a7dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	631a      	str	r2, [r3, #48]	; 0x30
 800a7ea:	e005      	b.n	800a7f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a7ec:	6978      	ldr	r0, [r7, #20]
 800a7ee:	f001 fe59 	bl	800c4a4 <vPortFree>
 800a7f2:	e001      	b.n	800a7f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d017      	beq.n	800a82e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a806:	88fa      	ldrh	r2, [r7, #6]
 800a808:	2300      	movs	r3, #0
 800a80a:	9303      	str	r3, [sp, #12]
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	9302      	str	r3, [sp, #8]
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	68b9      	ldr	r1, [r7, #8]
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f80f 	bl	800a840 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a822:	69f8      	ldr	r0, [r7, #28]
 800a824:	f000 f8ae 	bl	800a984 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a828:	2301      	movs	r3, #1
 800a82a:	61bb      	str	r3, [r7, #24]
 800a82c:	e002      	b.n	800a834 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a82e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a832:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a834:	69bb      	ldr	r3, [r7, #24]
	}
 800a836:	4618      	mov	r0, r3
 800a838:	3720      	adds	r7, #32
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	461a      	mov	r2, r3
 800a858:	21a5      	movs	r1, #165	; 0xa5
 800a85a:	f001 ff71 	bl	800c740 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a868:	3b01      	subs	r3, #1
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	f023 0307 	bic.w	r3, r3, #7
 800a876:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	f003 0307 	and.w	r3, r3, #7
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00a      	beq.n	800a898 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	617b      	str	r3, [r7, #20]
}
 800a894:	bf00      	nop
 800a896:	e7fe      	b.n	800a896 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a898:	2300      	movs	r3, #0
 800a89a:	61fb      	str	r3, [r7, #28]
 800a89c:	e012      	b.n	800a8c4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	7819      	ldrb	r1, [r3, #0]
 800a8a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	3334      	adds	r3, #52	; 0x34
 800a8ae:	460a      	mov	r2, r1
 800a8b0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d006      	beq.n	800a8cc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	61fb      	str	r3, [r7, #28]
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	2b0f      	cmp	r3, #15
 800a8c8:	d9e9      	bls.n	800a89e <prvInitialiseNewTask+0x5e>
 800a8ca:	e000      	b.n	800a8ce <prvInitialiseNewTask+0x8e>
		{
			break;
 800a8cc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	2b37      	cmp	r3, #55	; 0x37
 800a8da:	d901      	bls.n	800a8e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8dc:	2337      	movs	r3, #55	; 0x37
 800a8de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe fdad 	bl	8009456 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	3318      	adds	r3, #24
 800a900:	4618      	mov	r0, r3
 800a902:	f7fe fda8 	bl	8009456 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a90a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a91a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	2200      	movs	r2, #0
 800a920:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	2200      	movs	r2, #0
 800a926:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	3358      	adds	r3, #88	; 0x58
 800a936:	2260      	movs	r2, #96	; 0x60
 800a938:	2100      	movs	r1, #0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f001 ff00 	bl	800c740 <memset>
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	4a0d      	ldr	r2, [pc, #52]	; (800a978 <prvInitialiseNewTask+0x138>)
 800a944:	65da      	str	r2, [r3, #92]	; 0x5c
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	4a0c      	ldr	r2, [pc, #48]	; (800a97c <prvInitialiseNewTask+0x13c>)
 800a94a:	661a      	str	r2, [r3, #96]	; 0x60
 800a94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94e:	4a0c      	ldr	r2, [pc, #48]	; (800a980 <prvInitialiseNewTask+0x140>)
 800a950:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	68f9      	ldr	r1, [r7, #12]
 800a956:	69b8      	ldr	r0, [r7, #24]
 800a958:	f001 faf0 	bl	800bf3c <pxPortInitialiseStack>
 800a95c:	4602      	mov	r2, r0
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a96c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a96e:	bf00      	nop
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	0800d70c 	.word	0x0800d70c
 800a97c:	0800d72c 	.word	0x0800d72c
 800a980:	0800d6ec 	.word	0x0800d6ec

0800a984 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a98c:	f001 fbc6 	bl	800c11c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a990:	4b2d      	ldr	r3, [pc, #180]	; (800aa48 <prvAddNewTaskToReadyList+0xc4>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3301      	adds	r3, #1
 800a996:	4a2c      	ldr	r2, [pc, #176]	; (800aa48 <prvAddNewTaskToReadyList+0xc4>)
 800a998:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a99a:	4b2c      	ldr	r3, [pc, #176]	; (800aa4c <prvAddNewTaskToReadyList+0xc8>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d109      	bne.n	800a9b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9a2:	4a2a      	ldr	r2, [pc, #168]	; (800aa4c <prvAddNewTaskToReadyList+0xc8>)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9a8:	4b27      	ldr	r3, [pc, #156]	; (800aa48 <prvAddNewTaskToReadyList+0xc4>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d110      	bne.n	800a9d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9b0:	f000 fd58 	bl	800b464 <prvInitialiseTaskLists>
 800a9b4:	e00d      	b.n	800a9d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9b6:	4b26      	ldr	r3, [pc, #152]	; (800aa50 <prvAddNewTaskToReadyList+0xcc>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d109      	bne.n	800a9d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9be:	4b23      	ldr	r3, [pc, #140]	; (800aa4c <prvAddNewTaskToReadyList+0xc8>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d802      	bhi.n	800a9d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9cc:	4a1f      	ldr	r2, [pc, #124]	; (800aa4c <prvAddNewTaskToReadyList+0xc8>)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9d2:	4b20      	ldr	r3, [pc, #128]	; (800aa54 <prvAddNewTaskToReadyList+0xd0>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	4a1e      	ldr	r2, [pc, #120]	; (800aa54 <prvAddNewTaskToReadyList+0xd0>)
 800a9da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a9dc:	4b1d      	ldr	r3, [pc, #116]	; (800aa54 <prvAddNewTaskToReadyList+0xd0>)
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e8:	4b1b      	ldr	r3, [pc, #108]	; (800aa58 <prvAddNewTaskToReadyList+0xd4>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d903      	bls.n	800a9f8 <prvAddNewTaskToReadyList+0x74>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	4a18      	ldr	r2, [pc, #96]	; (800aa58 <prvAddNewTaskToReadyList+0xd4>)
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4a15      	ldr	r2, [pc, #84]	; (800aa5c <prvAddNewTaskToReadyList+0xd8>)
 800aa06:	441a      	add	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4610      	mov	r0, r2
 800aa10:	f7fe fd2d 	bl	800946e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa14:	f001 fbb2 	bl	800c17c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa18:	4b0d      	ldr	r3, [pc, #52]	; (800aa50 <prvAddNewTaskToReadyList+0xcc>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00e      	beq.n	800aa3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa20:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <prvAddNewTaskToReadyList+0xc8>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d207      	bcs.n	800aa3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa2e:	4b0c      	ldr	r3, [pc, #48]	; (800aa60 <prvAddNewTaskToReadyList+0xdc>)
 800aa30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa3e:	bf00      	nop
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20001164 	.word	0x20001164
 800aa4c:	20000ca8 	.word	0x20000ca8
 800aa50:	20001170 	.word	0x20001170
 800aa54:	20001180 	.word	0x20001180
 800aa58:	2000116c 	.word	0x2000116c
 800aa5c:	20000cac 	.word	0x20000cac
 800aa60:	e000ed04 	.word	0xe000ed04

0800aa64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d017      	beq.n	800aaa6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa76:	4b13      	ldr	r3, [pc, #76]	; (800aac4 <vTaskDelay+0x60>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <vTaskDelay+0x30>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	60bb      	str	r3, [r7, #8]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa94:	f000 f99c 	bl	800add0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa98:	2100      	movs	r1, #0
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fee8 	bl	800b870 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aaa0:	f000 f9a4 	bl	800adec <xTaskResumeAll>
 800aaa4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d107      	bne.n	800aabc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aaac:	4b06      	ldr	r3, [pc, #24]	; (800aac8 <vTaskDelay+0x64>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aabc:	bf00      	nop
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	2000118c 	.word	0x2000118c
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800aad4:	f001 fb22 	bl	800c11c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <vTaskSuspend+0x18>
 800aade:	4b30      	ldr	r3, [pc, #192]	; (800aba0 <vTaskSuspend+0xd4>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	e000      	b.n	800aae6 <vTaskSuspend+0x1a>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3304      	adds	r3, #4
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe fd19 	bl	8009524 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d004      	beq.n	800ab04 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3318      	adds	r3, #24
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe fd10 	bl	8009524 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4619      	mov	r1, r3
 800ab0a:	4826      	ldr	r0, [pc, #152]	; (800aba4 <vTaskSuspend+0xd8>)
 800ab0c:	f7fe fcaf 	bl	800946e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d103      	bne.n	800ab24 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ab24:	f001 fb2a 	bl	800c17c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ab28:	4b1f      	ldr	r3, [pc, #124]	; (800aba8 <vTaskSuspend+0xdc>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ab30:	f001 faf4 	bl	800c11c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ab34:	f000 fcd6 	bl	800b4e4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ab38:	f001 fb20 	bl	800c17c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ab3c:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <vTaskSuspend+0xd4>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d127      	bne.n	800ab96 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800ab46:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <vTaskSuspend+0xdc>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d017      	beq.n	800ab7e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ab4e:	4b17      	ldr	r3, [pc, #92]	; (800abac <vTaskSuspend+0xe0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00a      	beq.n	800ab6c <vTaskSuspend+0xa0>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	60bb      	str	r3, [r7, #8]
}
 800ab68:	bf00      	nop
 800ab6a:	e7fe      	b.n	800ab6a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ab6c:	4b10      	ldr	r3, [pc, #64]	; (800abb0 <vTaskSuspend+0xe4>)
 800ab6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab7c:	e00b      	b.n	800ab96 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800ab7e:	4b09      	ldr	r3, [pc, #36]	; (800aba4 <vTaskSuspend+0xd8>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	4b0c      	ldr	r3, [pc, #48]	; (800abb4 <vTaskSuspend+0xe8>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d103      	bne.n	800ab92 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <vTaskSuspend+0xd4>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]
	}
 800ab90:	e001      	b.n	800ab96 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800ab92:	f000 fa95 	bl	800b0c0 <vTaskSwitchContext>
	}
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000ca8 	.word	0x20000ca8
 800aba4:	20001150 	.word	0x20001150
 800aba8:	20001170 	.word	0x20001170
 800abac:	2000118c 	.word	0x2000118c
 800abb0:	e000ed04 	.word	0xe000ed04
 800abb4:	20001164 	.word	0x20001164

0800abb8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800abc0:	2300      	movs	r3, #0
 800abc2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10a      	bne.n	800abe4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	60fb      	str	r3, [r7, #12]
}
 800abe0:	bf00      	nop
 800abe2:	e7fe      	b.n	800abe2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	4a0e      	ldr	r2, [pc, #56]	; (800ac24 <prvTaskIsTaskSuspended+0x6c>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d101      	bne.n	800abf2 <prvTaskIsTaskSuspended+0x3a>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <prvTaskIsTaskSuspended+0x3c>
 800abf2:	2300      	movs	r3, #0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00f      	beq.n	800ac18 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfc:	4a0a      	ldr	r2, [pc, #40]	; (800ac28 <prvTaskIsTaskSuspended+0x70>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d00a      	beq.n	800ac18 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <prvTaskIsTaskSuspended+0x56>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <prvTaskIsTaskSuspended+0x58>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d001      	beq.n	800ac18 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800ac14:	2301      	movs	r3, #1
 800ac16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac18:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	371c      	adds	r7, #28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bc80      	pop	{r7}
 800ac22:	4770      	bx	lr
 800ac24:	20001150 	.word	0x20001150
 800ac28:	2000113c 	.word	0x2000113c

0800ac2c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10a      	bne.n	800ac54 <vTaskResume+0x28>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	60bb      	str	r3, [r7, #8]
}
 800ac50:	bf00      	nop
 800ac52:	e7fe      	b.n	800ac52 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d03a      	beq.n	800acd0 <vTaskResume+0xa4>
 800ac5a:	4b1f      	ldr	r3, [pc, #124]	; (800acd8 <vTaskResume+0xac>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d035      	beq.n	800acd0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800ac64:	f001 fa5a 	bl	800c11c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff ffa5 	bl	800abb8 <prvTaskIsTaskSuspended>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d02b      	beq.n	800accc <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fe fc53 	bl	8009524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac82:	4b16      	ldr	r3, [pc, #88]	; (800acdc <vTaskResume+0xb0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d903      	bls.n	800ac92 <vTaskResume+0x66>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8e:	4a13      	ldr	r2, [pc, #76]	; (800acdc <vTaskResume+0xb0>)
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac96:	4613      	mov	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4a10      	ldr	r2, [pc, #64]	; (800ace0 <vTaskResume+0xb4>)
 800aca0:	441a      	add	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4619      	mov	r1, r3
 800aca8:	4610      	mov	r0, r2
 800acaa:	f7fe fbe0 	bl	800946e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb2:	4b09      	ldr	r3, [pc, #36]	; (800acd8 <vTaskResume+0xac>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	429a      	cmp	r2, r3
 800acba:	d307      	bcc.n	800accc <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800acbc:	4b09      	ldr	r3, [pc, #36]	; (800ace4 <vTaskResume+0xb8>)
 800acbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800accc:	f001 fa56 	bl	800c17c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acd0:	bf00      	nop
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	20000ca8 	.word	0x20000ca8
 800acdc:	2000116c 	.word	0x2000116c
 800ace0:	20000cac 	.word	0x20000cac
 800ace4:	e000ed04 	.word	0xe000ed04

0800ace8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08a      	sub	sp, #40	; 0x28
 800acec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800acee:	2300      	movs	r3, #0
 800acf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800acf2:	2300      	movs	r3, #0
 800acf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800acf6:	463a      	mov	r2, r7
 800acf8:	1d39      	adds	r1, r7, #4
 800acfa:	f107 0308 	add.w	r3, r7, #8
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fe fb58 	bl	80093b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	9202      	str	r2, [sp, #8]
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	2300      	movs	r3, #0
 800ad14:	460a      	mov	r2, r1
 800ad16:	4925      	ldr	r1, [pc, #148]	; (800adac <vTaskStartScheduler+0xc4>)
 800ad18:	4825      	ldr	r0, [pc, #148]	; (800adb0 <vTaskStartScheduler+0xc8>)
 800ad1a:	f7ff fcef 	bl	800a6fc <xTaskCreateStatic>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	4a24      	ldr	r2, [pc, #144]	; (800adb4 <vTaskStartScheduler+0xcc>)
 800ad22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad24:	4b23      	ldr	r3, [pc, #140]	; (800adb4 <vTaskStartScheduler+0xcc>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	617b      	str	r3, [r7, #20]
 800ad30:	e001      	b.n	800ad36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d102      	bne.n	800ad42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad3c:	f000 fdec 	bl	800b918 <xTimerCreateTimerTask>
 800ad40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d11e      	bne.n	800ad86 <vTaskStartScheduler+0x9e>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	613b      	str	r3, [r7, #16]
}
 800ad5a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad5c:	4b16      	ldr	r3, [pc, #88]	; (800adb8 <vTaskStartScheduler+0xd0>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3358      	adds	r3, #88	; 0x58
 800ad62:	4a16      	ldr	r2, [pc, #88]	; (800adbc <vTaskStartScheduler+0xd4>)
 800ad64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad66:	4b16      	ldr	r3, [pc, #88]	; (800adc0 <vTaskStartScheduler+0xd8>)
 800ad68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad6e:	4b15      	ldr	r3, [pc, #84]	; (800adc4 <vTaskStartScheduler+0xdc>)
 800ad70:	2201      	movs	r2, #1
 800ad72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ad74:	4b14      	ldr	r3, [pc, #80]	; (800adc8 <vTaskStartScheduler+0xe0>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ad7a:	4b14      	ldr	r3, [pc, #80]	; (800adcc <vTaskStartScheduler+0xe4>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad80:	f001 f95a 	bl	800c038 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad84:	e00e      	b.n	800ada4 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad8c:	d10a      	bne.n	800ada4 <vTaskStartScheduler+0xbc>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	60fb      	str	r3, [r7, #12]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <vTaskStartScheduler+0xba>
}
 800ada4:	bf00      	nop
 800ada6:	3718      	adds	r7, #24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	0800d29c 	.word	0x0800d29c
 800adb0:	0800b435 	.word	0x0800b435
 800adb4:	20001188 	.word	0x20001188
 800adb8:	20000ca8 	.word	0x20000ca8
 800adbc:	20000020 	.word	0x20000020
 800adc0:	20001184 	.word	0x20001184
 800adc4:	20001170 	.word	0x20001170
 800adc8:	20001168 	.word	0x20001168
 800adcc:	200000a4 	.word	0x200000a4

0800add0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800add4:	4b04      	ldr	r3, [pc, #16]	; (800ade8 <vTaskSuspendAll+0x18>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	3301      	adds	r3, #1
 800adda:	4a03      	ldr	r2, [pc, #12]	; (800ade8 <vTaskSuspendAll+0x18>)
 800addc:	6013      	str	r3, [r2, #0]
}
 800adde:	bf00      	nop
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bc80      	pop	{r7}
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	2000118c 	.word	0x2000118c

0800adec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800adfa:	4b42      	ldr	r3, [pc, #264]	; (800af04 <xTaskResumeAll+0x118>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10a      	bne.n	800ae18 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	603b      	str	r3, [r7, #0]
}
 800ae14:	bf00      	nop
 800ae16:	e7fe      	b.n	800ae16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae18:	f001 f980 	bl	800c11c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae1c:	4b39      	ldr	r3, [pc, #228]	; (800af04 <xTaskResumeAll+0x118>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	4a38      	ldr	r2, [pc, #224]	; (800af04 <xTaskResumeAll+0x118>)
 800ae24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae26:	4b37      	ldr	r3, [pc, #220]	; (800af04 <xTaskResumeAll+0x118>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d162      	bne.n	800aef4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae2e:	4b36      	ldr	r3, [pc, #216]	; (800af08 <xTaskResumeAll+0x11c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d05e      	beq.n	800aef4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae36:	e02f      	b.n	800ae98 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ae38:	4b34      	ldr	r3, [pc, #208]	; (800af0c <xTaskResumeAll+0x120>)
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	3318      	adds	r3, #24
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7fe fb6d 	bl	8009524 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3304      	adds	r3, #4
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe fb68 	bl	8009524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae58:	4b2d      	ldr	r3, [pc, #180]	; (800af10 <xTaskResumeAll+0x124>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d903      	bls.n	800ae68 <xTaskResumeAll+0x7c>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae64:	4a2a      	ldr	r2, [pc, #168]	; (800af10 <xTaskResumeAll+0x124>)
 800ae66:	6013      	str	r3, [r2, #0]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4413      	add	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	4a27      	ldr	r2, [pc, #156]	; (800af14 <xTaskResumeAll+0x128>)
 800ae76:	441a      	add	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4610      	mov	r0, r2
 800ae80:	f7fe faf5 	bl	800946e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae88:	4b23      	ldr	r3, [pc, #140]	; (800af18 <xTaskResumeAll+0x12c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d302      	bcc.n	800ae98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ae92:	4b22      	ldr	r3, [pc, #136]	; (800af1c <xTaskResumeAll+0x130>)
 800ae94:	2201      	movs	r2, #1
 800ae96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae98:	4b1c      	ldr	r3, [pc, #112]	; (800af0c <xTaskResumeAll+0x120>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1cb      	bne.n	800ae38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aea6:	f000 fb1d 	bl	800b4e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aeaa:	4b1d      	ldr	r3, [pc, #116]	; (800af20 <xTaskResumeAll+0x134>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d010      	beq.n	800aed8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aeb6:	f000 f845 	bl	800af44 <xTaskIncrementTick>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aec0:	4b16      	ldr	r3, [pc, #88]	; (800af1c <xTaskResumeAll+0x130>)
 800aec2:	2201      	movs	r2, #1
 800aec4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3b01      	subs	r3, #1
 800aeca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1f1      	bne.n	800aeb6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800aed2:	4b13      	ldr	r3, [pc, #76]	; (800af20 <xTaskResumeAll+0x134>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aed8:	4b10      	ldr	r3, [pc, #64]	; (800af1c <xTaskResumeAll+0x130>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d009      	beq.n	800aef4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aee0:	2301      	movs	r3, #1
 800aee2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aee4:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <xTaskResumeAll+0x138>)
 800aee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aef4:	f001 f942 	bl	800c17c <vPortExitCritical>

	return xAlreadyYielded;
 800aef8:	68bb      	ldr	r3, [r7, #8]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	2000118c 	.word	0x2000118c
 800af08:	20001164 	.word	0x20001164
 800af0c:	2000113c 	.word	0x2000113c
 800af10:	2000116c 	.word	0x2000116c
 800af14:	20000cac 	.word	0x20000cac
 800af18:	20000ca8 	.word	0x20000ca8
 800af1c:	20001178 	.word	0x20001178
 800af20:	20001174 	.word	0x20001174
 800af24:	e000ed04 	.word	0xe000ed04

0800af28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af2e:	4b04      	ldr	r3, [pc, #16]	; (800af40 <xTaskGetTickCount+0x18>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af34:	687b      	ldr	r3, [r7, #4]
}
 800af36:	4618      	mov	r0, r3
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bc80      	pop	{r7}
 800af3e:	4770      	bx	lr
 800af40:	20001168 	.word	0x20001168

0800af44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af4e:	4b51      	ldr	r3, [pc, #324]	; (800b094 <xTaskIncrementTick+0x150>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f040 808e 	bne.w	800b074 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af58:	4b4f      	ldr	r3, [pc, #316]	; (800b098 <xTaskIncrementTick+0x154>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3301      	adds	r3, #1
 800af5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af60:	4a4d      	ldr	r2, [pc, #308]	; (800b098 <xTaskIncrementTick+0x154>)
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d120      	bne.n	800afae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af6c:	4b4b      	ldr	r3, [pc, #300]	; (800b09c <xTaskIncrementTick+0x158>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00a      	beq.n	800af8c <xTaskIncrementTick+0x48>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	603b      	str	r3, [r7, #0]
}
 800af88:	bf00      	nop
 800af8a:	e7fe      	b.n	800af8a <xTaskIncrementTick+0x46>
 800af8c:	4b43      	ldr	r3, [pc, #268]	; (800b09c <xTaskIncrementTick+0x158>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	4b43      	ldr	r3, [pc, #268]	; (800b0a0 <xTaskIncrementTick+0x15c>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a41      	ldr	r2, [pc, #260]	; (800b09c <xTaskIncrementTick+0x158>)
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	4a41      	ldr	r2, [pc, #260]	; (800b0a0 <xTaskIncrementTick+0x15c>)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	4b40      	ldr	r3, [pc, #256]	; (800b0a4 <xTaskIncrementTick+0x160>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3301      	adds	r3, #1
 800afa6:	4a3f      	ldr	r2, [pc, #252]	; (800b0a4 <xTaskIncrementTick+0x160>)
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	f000 fa9b 	bl	800b4e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afae:	4b3e      	ldr	r3, [pc, #248]	; (800b0a8 <xTaskIncrementTick+0x164>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d34e      	bcc.n	800b056 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afb8:	4b38      	ldr	r3, [pc, #224]	; (800b09c <xTaskIncrementTick+0x158>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <xTaskIncrementTick+0x82>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e000      	b.n	800afc8 <xTaskIncrementTick+0x84>
 800afc6:	2300      	movs	r3, #0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d004      	beq.n	800afd6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afcc:	4b36      	ldr	r3, [pc, #216]	; (800b0a8 <xTaskIncrementTick+0x164>)
 800afce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afd2:	601a      	str	r2, [r3, #0]
					break;
 800afd4:	e03f      	b.n	800b056 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800afd6:	4b31      	ldr	r3, [pc, #196]	; (800b09c <xTaskIncrementTick+0x158>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	429a      	cmp	r2, r3
 800afec:	d203      	bcs.n	800aff6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afee:	4a2e      	ldr	r2, [pc, #184]	; (800b0a8 <xTaskIncrementTick+0x164>)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6013      	str	r3, [r2, #0]
						break;
 800aff4:	e02f      	b.n	800b056 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	3304      	adds	r3, #4
 800affa:	4618      	mov	r0, r3
 800affc:	f7fe fa92 	bl	8009524 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b004:	2b00      	cmp	r3, #0
 800b006:	d004      	beq.n	800b012 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	3318      	adds	r3, #24
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fe fa89 	bl	8009524 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b016:	4b25      	ldr	r3, [pc, #148]	; (800b0ac <xTaskIncrementTick+0x168>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d903      	bls.n	800b026 <xTaskIncrementTick+0xe2>
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b022:	4a22      	ldr	r2, [pc, #136]	; (800b0ac <xTaskIncrementTick+0x168>)
 800b024:	6013      	str	r3, [r2, #0]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02a:	4613      	mov	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4a1f      	ldr	r2, [pc, #124]	; (800b0b0 <xTaskIncrementTick+0x16c>)
 800b034:	441a      	add	r2, r3
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	3304      	adds	r3, #4
 800b03a:	4619      	mov	r1, r3
 800b03c:	4610      	mov	r0, r2
 800b03e:	f7fe fa16 	bl	800946e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b046:	4b1b      	ldr	r3, [pc, #108]	; (800b0b4 <xTaskIncrementTick+0x170>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d3b3      	bcc.n	800afb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b050:	2301      	movs	r3, #1
 800b052:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b054:	e7b0      	b.n	800afb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b056:	4b17      	ldr	r3, [pc, #92]	; (800b0b4 <xTaskIncrementTick+0x170>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05c:	4914      	ldr	r1, [pc, #80]	; (800b0b0 <xTaskIncrementTick+0x16c>)
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	440b      	add	r3, r1
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d907      	bls.n	800b07e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b06e:	2301      	movs	r3, #1
 800b070:	617b      	str	r3, [r7, #20]
 800b072:	e004      	b.n	800b07e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b074:	4b10      	ldr	r3, [pc, #64]	; (800b0b8 <xTaskIncrementTick+0x174>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3301      	adds	r3, #1
 800b07a:	4a0f      	ldr	r2, [pc, #60]	; (800b0b8 <xTaskIncrementTick+0x174>)
 800b07c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b07e:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <xTaskIncrementTick+0x178>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d001      	beq.n	800b08a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b086:	2301      	movs	r3, #1
 800b088:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b08a:	697b      	ldr	r3, [r7, #20]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	2000118c 	.word	0x2000118c
 800b098:	20001168 	.word	0x20001168
 800b09c:	20001134 	.word	0x20001134
 800b0a0:	20001138 	.word	0x20001138
 800b0a4:	2000117c 	.word	0x2000117c
 800b0a8:	20001184 	.word	0x20001184
 800b0ac:	2000116c 	.word	0x2000116c
 800b0b0:	20000cac 	.word	0x20000cac
 800b0b4:	20000ca8 	.word	0x20000ca8
 800b0b8:	20001174 	.word	0x20001174
 800b0bc:	20001178 	.word	0x20001178

0800b0c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0c6:	4b36      	ldr	r3, [pc, #216]	; (800b1a0 <vTaskSwitchContext+0xe0>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d003      	beq.n	800b0d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0ce:	4b35      	ldr	r3, [pc, #212]	; (800b1a4 <vTaskSwitchContext+0xe4>)
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0d4:	e05e      	b.n	800b194 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800b0d6:	4b33      	ldr	r3, [pc, #204]	; (800b1a4 <vTaskSwitchContext+0xe4>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b0dc:	4b32      	ldr	r3, [pc, #200]	; (800b1a8 <vTaskSwitchContext+0xe8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a32      	ldr	r2, [pc, #200]	; (800b1ac <vTaskSwitchContext+0xec>)
 800b0e2:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b0e4:	4b31      	ldr	r3, [pc, #196]	; (800b1ac <vTaskSwitchContext+0xec>)
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	4b31      	ldr	r3, [pc, #196]	; (800b1b0 <vTaskSwitchContext+0xf0>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d909      	bls.n	800b104 <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b0f0:	4b30      	ldr	r3, [pc, #192]	; (800b1b4 <vTaskSwitchContext+0xf4>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0f6:	4a2d      	ldr	r2, [pc, #180]	; (800b1ac <vTaskSwitchContext+0xec>)
 800b0f8:	6810      	ldr	r0, [r2, #0]
 800b0fa:	4a2d      	ldr	r2, [pc, #180]	; (800b1b0 <vTaskSwitchContext+0xf0>)
 800b0fc:	6812      	ldr	r2, [r2, #0]
 800b0fe:	1a82      	subs	r2, r0, r2
 800b100:	440a      	add	r2, r1
 800b102:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800b104:	4b29      	ldr	r3, [pc, #164]	; (800b1ac <vTaskSwitchContext+0xec>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a29      	ldr	r2, [pc, #164]	; (800b1b0 <vTaskSwitchContext+0xf0>)
 800b10a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b10c:	4b2a      	ldr	r3, [pc, #168]	; (800b1b8 <vTaskSwitchContext+0xf8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	e010      	b.n	800b136 <vTaskSwitchContext+0x76>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <vTaskSwitchContext+0x70>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	607b      	str	r3, [r7, #4]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <vTaskSwitchContext+0x6e>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	3b01      	subs	r3, #1
 800b134:	60fb      	str	r3, [r7, #12]
 800b136:	4921      	ldr	r1, [pc, #132]	; (800b1bc <vTaskSwitchContext+0xfc>)
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4613      	mov	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	440b      	add	r3, r1
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0e4      	beq.n	800b114 <vTaskSwitchContext+0x54>
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	4613      	mov	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4a19      	ldr	r2, [pc, #100]	; (800b1bc <vTaskSwitchContext+0xfc>)
 800b156:	4413      	add	r3, r2
 800b158:	60bb      	str	r3, [r7, #8]
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	605a      	str	r2, [r3, #4]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	3308      	adds	r3, #8
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d104      	bne.n	800b17a <vTaskSwitchContext+0xba>
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	605a      	str	r2, [r3, #4]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	4a0c      	ldr	r2, [pc, #48]	; (800b1b4 <vTaskSwitchContext+0xf4>)
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	4a0c      	ldr	r2, [pc, #48]	; (800b1b8 <vTaskSwitchContext+0xf8>)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b18a:	4b0a      	ldr	r3, [pc, #40]	; (800b1b4 <vTaskSwitchContext+0xf4>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3358      	adds	r3, #88	; 0x58
 800b190:	4a0b      	ldr	r2, [pc, #44]	; (800b1c0 <vTaskSwitchContext+0x100>)
 800b192:	6013      	str	r3, [r2, #0]
}
 800b194:	bf00      	nop
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	bc80      	pop	{r7}
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	2000118c 	.word	0x2000118c
 800b1a4:	20001178 	.word	0x20001178
 800b1a8:	200000a4 	.word	0x200000a4
 800b1ac:	20001194 	.word	0x20001194
 800b1b0:	20001190 	.word	0x20001190
 800b1b4:	20000ca8 	.word	0x20000ca8
 800b1b8:	2000116c 	.word	0x2000116c
 800b1bc:	20000cac 	.word	0x20000cac
 800b1c0:	20000020 	.word	0x20000020

0800b1c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	60fb      	str	r3, [r7, #12]
}
 800b1e6:	bf00      	nop
 800b1e8:	e7fe      	b.n	800b1e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1ea:	4b07      	ldr	r3, [pc, #28]	; (800b208 <vTaskPlaceOnEventList+0x44>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3318      	adds	r3, #24
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7fe f95e 	bl	80094b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	6838      	ldr	r0, [r7, #0]
 800b1fc:	f000 fb38 	bl	800b870 <prvAddCurrentTaskToDelayedList>
}
 800b200:	bf00      	nop
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	20000ca8 	.word	0x20000ca8

0800b20c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10a      	bne.n	800b234 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	617b      	str	r3, [r7, #20]
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b234:	4b0a      	ldr	r3, [pc, #40]	; (800b260 <vTaskPlaceOnEventListRestricted+0x54>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3318      	adds	r3, #24
 800b23a:	4619      	mov	r1, r3
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f7fe f916 	bl	800946e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b24c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b24e:	6879      	ldr	r1, [r7, #4]
 800b250:	68b8      	ldr	r0, [r7, #8]
 800b252:	f000 fb0d 	bl	800b870 <prvAddCurrentTaskToDelayedList>
	}
 800b256:	bf00      	nop
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20000ca8 	.word	0x20000ca8

0800b264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10a      	bne.n	800b290 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	60fb      	str	r3, [r7, #12]
}
 800b28c:	bf00      	nop
 800b28e:	e7fe      	b.n	800b28e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	3318      	adds	r3, #24
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe f945 	bl	8009524 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b29a:	4b1e      	ldr	r3, [pc, #120]	; (800b314 <xTaskRemoveFromEventList+0xb0>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d11d      	bne.n	800b2de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe f93c 	bl	8009524 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b0:	4b19      	ldr	r3, [pc, #100]	; (800b318 <xTaskRemoveFromEventList+0xb4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d903      	bls.n	800b2c0 <xTaskRemoveFromEventList+0x5c>
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2bc:	4a16      	ldr	r2, [pc, #88]	; (800b318 <xTaskRemoveFromEventList+0xb4>)
 800b2be:	6013      	str	r3, [r2, #0]
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4413      	add	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4a13      	ldr	r2, [pc, #76]	; (800b31c <xTaskRemoveFromEventList+0xb8>)
 800b2ce:	441a      	add	r2, r3
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	f7fe f8c9 	bl	800946e <vListInsertEnd>
 800b2dc:	e005      	b.n	800b2ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	3318      	adds	r3, #24
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	480e      	ldr	r0, [pc, #56]	; (800b320 <xTaskRemoveFromEventList+0xbc>)
 800b2e6:	f7fe f8c2 	bl	800946e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ee:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <xTaskRemoveFromEventList+0xc0>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d905      	bls.n	800b304 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <xTaskRemoveFromEventList+0xc4>)
 800b2fe:	2201      	movs	r2, #1
 800b300:	601a      	str	r2, [r3, #0]
 800b302:	e001      	b.n	800b308 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b304:	2300      	movs	r3, #0
 800b306:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b308:	697b      	ldr	r3, [r7, #20]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3718      	adds	r7, #24
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	2000118c 	.word	0x2000118c
 800b318:	2000116c 	.word	0x2000116c
 800b31c:	20000cac 	.word	0x20000cac
 800b320:	2000113c 	.word	0x2000113c
 800b324:	20000ca8 	.word	0x20000ca8
 800b328:	20001178 	.word	0x20001178

0800b32c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b334:	4b06      	ldr	r3, [pc, #24]	; (800b350 <vTaskInternalSetTimeOutState+0x24>)
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b33c:	4b05      	ldr	r3, [pc, #20]	; (800b354 <vTaskInternalSetTimeOutState+0x28>)
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	605a      	str	r2, [r3, #4]
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	bc80      	pop	{r7}
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	2000117c 	.word	0x2000117c
 800b354:	20001168 	.word	0x20001168

0800b358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b088      	sub	sp, #32
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10a      	bne.n	800b37e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	613b      	str	r3, [r7, #16]
}
 800b37a:	bf00      	nop
 800b37c:	e7fe      	b.n	800b37c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	60fb      	str	r3, [r7, #12]
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b39a:	f000 febf 	bl	800c11c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b39e:	4b1d      	ldr	r3, [pc, #116]	; (800b414 <xTaskCheckForTimeOut+0xbc>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	69ba      	ldr	r2, [r7, #24]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3b6:	d102      	bne.n	800b3be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	61fb      	str	r3, [r7, #28]
 800b3bc:	e023      	b.n	800b406 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	4b15      	ldr	r3, [pc, #84]	; (800b418 <xTaskCheckForTimeOut+0xc0>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d007      	beq.n	800b3da <xTaskCheckForTimeOut+0x82>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	69ba      	ldr	r2, [r7, #24]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d302      	bcc.n	800b3da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	61fb      	str	r3, [r7, #28]
 800b3d8:	e015      	b.n	800b406 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d20b      	bcs.n	800b3fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	1ad2      	subs	r2, r2, r3
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f7ff ff9b 	bl	800b32c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	61fb      	str	r3, [r7, #28]
 800b3fa:	e004      	b.n	800b406 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b406:	f000 feb9 	bl	800c17c <vPortExitCritical>

	return xReturn;
 800b40a:	69fb      	ldr	r3, [r7, #28]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3720      	adds	r7, #32
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	20001168 	.word	0x20001168
 800b418:	2000117c 	.word	0x2000117c

0800b41c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b420:	4b03      	ldr	r3, [pc, #12]	; (800b430 <vTaskMissedYield+0x14>)
 800b422:	2201      	movs	r2, #1
 800b424:	601a      	str	r2, [r3, #0]
}
 800b426:	bf00      	nop
 800b428:	46bd      	mov	sp, r7
 800b42a:	bc80      	pop	{r7}
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	20001178 	.word	0x20001178

0800b434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b43c:	f000 f84c 	bl	800b4d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b440:	4b06      	ldr	r3, [pc, #24]	; (800b45c <prvIdleTask+0x28>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d9f9      	bls.n	800b43c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <prvIdleTask+0x2c>)
 800b44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b458:	e7f0      	b.n	800b43c <prvIdleTask+0x8>
 800b45a:	bf00      	nop
 800b45c:	20000cac 	.word	0x20000cac
 800b460:	e000ed04 	.word	0xe000ed04

0800b464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b46a:	2300      	movs	r3, #0
 800b46c:	607b      	str	r3, [r7, #4]
 800b46e:	e00c      	b.n	800b48a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	4613      	mov	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4413      	add	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4a10      	ldr	r2, [pc, #64]	; (800b4bc <prvInitialiseTaskLists+0x58>)
 800b47c:	4413      	add	r3, r2
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fd ffca 	bl	8009418 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3301      	adds	r3, #1
 800b488:	607b      	str	r3, [r7, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b37      	cmp	r3, #55	; 0x37
 800b48e:	d9ef      	bls.n	800b470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b490:	480b      	ldr	r0, [pc, #44]	; (800b4c0 <prvInitialiseTaskLists+0x5c>)
 800b492:	f7fd ffc1 	bl	8009418 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b496:	480b      	ldr	r0, [pc, #44]	; (800b4c4 <prvInitialiseTaskLists+0x60>)
 800b498:	f7fd ffbe 	bl	8009418 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b49c:	480a      	ldr	r0, [pc, #40]	; (800b4c8 <prvInitialiseTaskLists+0x64>)
 800b49e:	f7fd ffbb 	bl	8009418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4a2:	480a      	ldr	r0, [pc, #40]	; (800b4cc <prvInitialiseTaskLists+0x68>)
 800b4a4:	f7fd ffb8 	bl	8009418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4a8:	4b09      	ldr	r3, [pc, #36]	; (800b4d0 <prvInitialiseTaskLists+0x6c>)
 800b4aa:	4a05      	ldr	r2, [pc, #20]	; (800b4c0 <prvInitialiseTaskLists+0x5c>)
 800b4ac:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4ae:	4b09      	ldr	r3, [pc, #36]	; (800b4d4 <prvInitialiseTaskLists+0x70>)
 800b4b0:	4a04      	ldr	r2, [pc, #16]	; (800b4c4 <prvInitialiseTaskLists+0x60>)
 800b4b2:	601a      	str	r2, [r3, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20000cac 	.word	0x20000cac
 800b4c0:	2000110c 	.word	0x2000110c
 800b4c4:	20001120 	.word	0x20001120
 800b4c8:	2000113c 	.word	0x2000113c
 800b4cc:	20001150 	.word	0x20001150
 800b4d0:	20001134 	.word	0x20001134
 800b4d4:	20001138 	.word	0x20001138

0800b4d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b4d8:	b480      	push	{r7}
 800b4da:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4dc:	bf00      	nop
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bc80      	pop	{r7}
 800b4e2:	4770      	bx	lr

0800b4e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4ea:	4b0e      	ldr	r3, [pc, #56]	; (800b524 <prvResetNextTaskUnblockTime+0x40>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <prvResetNextTaskUnblockTime+0x14>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e000      	b.n	800b4fa <prvResetNextTaskUnblockTime+0x16>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4fe:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <prvResetNextTaskUnblockTime+0x44>)
 800b500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b504:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b506:	e008      	b.n	800b51a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b508:	4b06      	ldr	r3, [pc, #24]	; (800b524 <prvResetNextTaskUnblockTime+0x40>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	4a04      	ldr	r2, [pc, #16]	; (800b528 <prvResetNextTaskUnblockTime+0x44>)
 800b518:	6013      	str	r3, [r2, #0]
}
 800b51a:	bf00      	nop
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	bc80      	pop	{r7}
 800b522:	4770      	bx	lr
 800b524:	20001134 	.word	0x20001134
 800b528:	20001184 	.word	0x20001184

0800b52c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b532:	4b04      	ldr	r3, [pc, #16]	; (800b544 <xTaskGetCurrentTaskHandle+0x18>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b538:	687b      	ldr	r3, [r7, #4]
	}
 800b53a:	4618      	mov	r0, r3
 800b53c:	370c      	adds	r7, #12
 800b53e:	46bd      	mov	sp, r7
 800b540:	bc80      	pop	{r7}
 800b542:	4770      	bx	lr
 800b544:	20000ca8 	.word	0x20000ca8

0800b548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b54e:	4b0b      	ldr	r3, [pc, #44]	; (800b57c <xTaskGetSchedulerState+0x34>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d102      	bne.n	800b55c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b556:	2301      	movs	r3, #1
 800b558:	607b      	str	r3, [r7, #4]
 800b55a:	e008      	b.n	800b56e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b55c:	4b08      	ldr	r3, [pc, #32]	; (800b580 <xTaskGetSchedulerState+0x38>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b564:	2302      	movs	r3, #2
 800b566:	607b      	str	r3, [r7, #4]
 800b568:	e001      	b.n	800b56e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b56a:	2300      	movs	r3, #0
 800b56c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b56e:	687b      	ldr	r3, [r7, #4]
	}
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	bc80      	pop	{r7}
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	20001170 	.word	0x20001170
 800b580:	2000118c 	.word	0x2000118c

0800b584 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d056      	beq.n	800b648 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59e:	4b2d      	ldr	r3, [pc, #180]	; (800b654 <xTaskPriorityInherit+0xd0>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d246      	bcs.n	800b636 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	699b      	ldr	r3, [r3, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	db06      	blt.n	800b5be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5b0:	4b28      	ldr	r3, [pc, #160]	; (800b654 <xTaskPriorityInherit+0xd0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	6959      	ldr	r1, [r3, #20]
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4a22      	ldr	r2, [pc, #136]	; (800b658 <xTaskPriorityInherit+0xd4>)
 800b5d0:	4413      	add	r3, r2
 800b5d2:	4299      	cmp	r1, r3
 800b5d4:	d101      	bne.n	800b5da <xTaskPriorityInherit+0x56>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e000      	b.n	800b5dc <xTaskPriorityInherit+0x58>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d022      	beq.n	800b626 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fd ff9d 	bl	8009524 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5ea:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <xTaskPriorityInherit+0xd0>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f8:	4b18      	ldr	r3, [pc, #96]	; (800b65c <xTaskPriorityInherit+0xd8>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d903      	bls.n	800b608 <xTaskPriorityInherit+0x84>
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	4a15      	ldr	r2, [pc, #84]	; (800b65c <xTaskPriorityInherit+0xd8>)
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60c:	4613      	mov	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4a10      	ldr	r2, [pc, #64]	; (800b658 <xTaskPriorityInherit+0xd4>)
 800b616:	441a      	add	r2, r3
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4619      	mov	r1, r3
 800b61e:	4610      	mov	r0, r2
 800b620:	f7fd ff25 	bl	800946e <vListInsertEnd>
 800b624:	e004      	b.n	800b630 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b626:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <xTaskPriorityInherit+0xd0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b630:	2301      	movs	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	e008      	b.n	800b648 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b63a:	4b06      	ldr	r3, [pc, #24]	; (800b654 <xTaskPriorityInherit+0xd0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	429a      	cmp	r2, r3
 800b642:	d201      	bcs.n	800b648 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b644:	2301      	movs	r3, #1
 800b646:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b648:	68fb      	ldr	r3, [r7, #12]
	}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20000ca8 	.word	0x20000ca8
 800b658:	20000cac 	.word	0x20000cac
 800b65c:	2000116c 	.word	0x2000116c

0800b660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b66c:	2300      	movs	r3, #0
 800b66e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d056      	beq.n	800b724 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b676:	4b2e      	ldr	r3, [pc, #184]	; (800b730 <xTaskPriorityDisinherit+0xd0>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d00a      	beq.n	800b696 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	60fb      	str	r3, [r7, #12]
}
 800b692:	bf00      	nop
 800b694:	e7fe      	b.n	800b694 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10a      	bne.n	800b6b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	60bb      	str	r3, [r7, #8]
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b8:	1e5a      	subs	r2, r3, #1
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d02c      	beq.n	800b724 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d128      	bne.n	800b724 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fd ff24 	bl	8009524 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f4:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <xTaskPriorityDisinherit+0xd4>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d903      	bls.n	800b704 <xTaskPriorityDisinherit+0xa4>
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	4a0c      	ldr	r2, [pc, #48]	; (800b734 <xTaskPriorityDisinherit+0xd4>)
 800b702:	6013      	str	r3, [r2, #0]
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b708:	4613      	mov	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4413      	add	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4a09      	ldr	r2, [pc, #36]	; (800b738 <xTaskPriorityDisinherit+0xd8>)
 800b712:	441a      	add	r2, r3
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	3304      	adds	r3, #4
 800b718:	4619      	mov	r1, r3
 800b71a:	4610      	mov	r0, r2
 800b71c:	f7fd fea7 	bl	800946e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b720:	2301      	movs	r3, #1
 800b722:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b724:	697b      	ldr	r3, [r7, #20]
	}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20000ca8 	.word	0x20000ca8
 800b734:	2000116c 	.word	0x2000116c
 800b738:	20000cac 	.word	0x20000cac

0800b73c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b74a:	2301      	movs	r3, #1
 800b74c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d06f      	beq.n	800b834 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10a      	bne.n	800b772 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	60fb      	str	r3, [r7, #12]
}
 800b76e:	bf00      	nop
 800b770:	e7fe      	b.n	800b770 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d902      	bls.n	800b782 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	61fb      	str	r3, [r7, #28]
 800b780:	e002      	b.n	800b788 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b786:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d050      	beq.n	800b834 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d14b      	bne.n	800b834 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b79c:	4b27      	ldr	r3, [pc, #156]	; (800b83c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d10a      	bne.n	800b7bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60bb      	str	r3, [r7, #8]
}
 800b7b8:	bf00      	nop
 800b7ba:	e7fe      	b.n	800b7ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	69fa      	ldr	r2, [r7, #28]
 800b7c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	db04      	blt.n	800b7da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	6959      	ldr	r1, [r3, #20]
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4a15      	ldr	r2, [pc, #84]	; (800b840 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b7ea:	4413      	add	r3, r2
 800b7ec:	4299      	cmp	r1, r3
 800b7ee:	d101      	bne.n	800b7f4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e000      	b.n	800b7f6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d01c      	beq.n	800b834 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fd fe90 	bl	8009524 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4b0e      	ldr	r3, [pc, #56]	; (800b844 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d903      	bls.n	800b818 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b814:	4a0b      	ldr	r2, [pc, #44]	; (800b844 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	4613      	mov	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4a06      	ldr	r2, [pc, #24]	; (800b840 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b826:	441a      	add	r2, r3
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	3304      	adds	r3, #4
 800b82c:	4619      	mov	r1, r3
 800b82e:	4610      	mov	r0, r2
 800b830:	f7fd fe1d 	bl	800946e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b834:	bf00      	nop
 800b836:	3720      	adds	r7, #32
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20000ca8 	.word	0x20000ca8
 800b840:	20000cac 	.word	0x20000cac
 800b844:	2000116c 	.word	0x2000116c

0800b848 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b84c:	4b07      	ldr	r3, [pc, #28]	; (800b86c <pvTaskIncrementMutexHeldCount+0x24>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d004      	beq.n	800b85e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b854:	4b05      	ldr	r3, [pc, #20]	; (800b86c <pvTaskIncrementMutexHeldCount+0x24>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b85a:	3201      	adds	r2, #1
 800b85c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b85e:	4b03      	ldr	r3, [pc, #12]	; (800b86c <pvTaskIncrementMutexHeldCount+0x24>)
 800b860:	681b      	ldr	r3, [r3, #0]
	}
 800b862:	4618      	mov	r0, r3
 800b864:	46bd      	mov	sp, r7
 800b866:	bc80      	pop	{r7}
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	20000ca8 	.word	0x20000ca8

0800b870 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b87a:	4b21      	ldr	r3, [pc, #132]	; (800b900 <prvAddCurrentTaskToDelayedList+0x90>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b880:	4b20      	ldr	r3, [pc, #128]	; (800b904 <prvAddCurrentTaskToDelayedList+0x94>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3304      	adds	r3, #4
 800b886:	4618      	mov	r0, r3
 800b888:	f7fd fe4c 	bl	8009524 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b892:	d10a      	bne.n	800b8aa <prvAddCurrentTaskToDelayedList+0x3a>
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d007      	beq.n	800b8aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b89a:	4b1a      	ldr	r3, [pc, #104]	; (800b904 <prvAddCurrentTaskToDelayedList+0x94>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4819      	ldr	r0, [pc, #100]	; (800b908 <prvAddCurrentTaskToDelayedList+0x98>)
 800b8a4:	f7fd fde3 	bl	800946e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8a8:	e026      	b.n	800b8f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8b2:	4b14      	ldr	r3, [pc, #80]	; (800b904 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d209      	bcs.n	800b8d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8c2:	4b12      	ldr	r3, [pc, #72]	; (800b90c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	f7fd fdf0 	bl	80094b4 <vListInsert>
}
 800b8d4:	e010      	b.n	800b8f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8d6:	4b0e      	ldr	r3, [pc, #56]	; (800b910 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f7fd fde6 	bl	80094b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8e8:	4b0a      	ldr	r3, [pc, #40]	; (800b914 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d202      	bcs.n	800b8f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8f2:	4a08      	ldr	r2, [pc, #32]	; (800b914 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	6013      	str	r3, [r2, #0]
}
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20001168 	.word	0x20001168
 800b904:	20000ca8 	.word	0x20000ca8
 800b908:	20001150 	.word	0x20001150
 800b90c:	20001138 	.word	0x20001138
 800b910:	20001134 	.word	0x20001134
 800b914:	20001184 	.word	0x20001184

0800b918 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08a      	sub	sp, #40	; 0x28
 800b91c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b91e:	2300      	movs	r3, #0
 800b920:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b922:	f000 facb 	bl	800bebc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b926:	4b1c      	ldr	r3, [pc, #112]	; (800b998 <xTimerCreateTimerTask+0x80>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d021      	beq.n	800b972 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b92e:	2300      	movs	r3, #0
 800b930:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b932:	2300      	movs	r3, #0
 800b934:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b936:	1d3a      	adds	r2, r7, #4
 800b938:	f107 0108 	add.w	r1, r7, #8
 800b93c:	f107 030c 	add.w	r3, r7, #12
 800b940:	4618      	mov	r0, r3
 800b942:	f7fd fd4f 	bl	80093e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	9202      	str	r2, [sp, #8]
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	2318      	movs	r3, #24
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	2300      	movs	r3, #0
 800b956:	460a      	mov	r2, r1
 800b958:	4910      	ldr	r1, [pc, #64]	; (800b99c <xTimerCreateTimerTask+0x84>)
 800b95a:	4811      	ldr	r0, [pc, #68]	; (800b9a0 <xTimerCreateTimerTask+0x88>)
 800b95c:	f7fe fece 	bl	800a6fc <xTaskCreateStatic>
 800b960:	4603      	mov	r3, r0
 800b962:	4a10      	ldr	r2, [pc, #64]	; (800b9a4 <xTimerCreateTimerTask+0x8c>)
 800b964:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b966:	4b0f      	ldr	r3, [pc, #60]	; (800b9a4 <xTimerCreateTimerTask+0x8c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d001      	beq.n	800b972 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b96e:	2301      	movs	r3, #1
 800b970:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10a      	bne.n	800b98e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	613b      	str	r3, [r7, #16]
}
 800b98a:	bf00      	nop
 800b98c:	e7fe      	b.n	800b98c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b98e:	697b      	ldr	r3, [r7, #20]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3718      	adds	r7, #24
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	200011c8 	.word	0x200011c8
 800b99c:	0800d2cc 	.word	0x0800d2cc
 800b9a0:	0800bac5 	.word	0x0800bac5
 800b9a4:	200011cc 	.word	0x200011cc

0800b9a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08a      	sub	sp, #40	; 0x28
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	623b      	str	r3, [r7, #32]
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ba40 <xTimerGenericCommand+0x98>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d02a      	beq.n	800ba34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2b05      	cmp	r3, #5
 800b9ee:	dc18      	bgt.n	800ba22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9f0:	f7ff fdaa 	bl	800b548 <xTaskGetSchedulerState>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d109      	bne.n	800ba0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9fa:	4b11      	ldr	r3, [pc, #68]	; (800ba40 <xTimerGenericCommand+0x98>)
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f107 0110 	add.w	r1, r7, #16
 800ba02:	2300      	movs	r3, #0
 800ba04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba06:	f7fe f819 	bl	8009a3c <xQueueGenericSend>
 800ba0a:	6278      	str	r0, [r7, #36]	; 0x24
 800ba0c:	e012      	b.n	800ba34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba0e:	4b0c      	ldr	r3, [pc, #48]	; (800ba40 <xTimerGenericCommand+0x98>)
 800ba10:	6818      	ldr	r0, [r3, #0]
 800ba12:	f107 0110 	add.w	r1, r7, #16
 800ba16:	2300      	movs	r3, #0
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f7fe f80f 	bl	8009a3c <xQueueGenericSend>
 800ba1e:	6278      	str	r0, [r7, #36]	; 0x24
 800ba20:	e008      	b.n	800ba34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba22:	4b07      	ldr	r3, [pc, #28]	; (800ba40 <xTimerGenericCommand+0x98>)
 800ba24:	6818      	ldr	r0, [r3, #0]
 800ba26:	f107 0110 	add.w	r1, r7, #16
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	f7fe f903 	bl	8009c38 <xQueueGenericSendFromISR>
 800ba32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3728      	adds	r7, #40	; 0x28
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	200011c8 	.word	0x200011c8

0800ba44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af02      	add	r7, sp, #8
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba4e:	4b1c      	ldr	r3, [pc, #112]	; (800bac0 <prvProcessExpiredTimer+0x7c>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fd fd61 	bl	8009524 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d122      	bne.n	800bab0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	699a      	ldr	r2, [r3, #24]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	18d1      	adds	r1, r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	683a      	ldr	r2, [r7, #0]
 800ba76:	6978      	ldr	r0, [r7, #20]
 800ba78:	f000 f8c8 	bl	800bc0c <prvInsertTimerInActiveList>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d016      	beq.n	800bab0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba82:	2300      	movs	r3, #0
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	2300      	movs	r3, #0
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	6978      	ldr	r0, [r7, #20]
 800ba8e:	f7ff ff8b 	bl	800b9a8 <xTimerGenericCommand>
 800ba92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10a      	bne.n	800bab0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	60fb      	str	r3, [r7, #12]
}
 800baac:	bf00      	nop
 800baae:	e7fe      	b.n	800baae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab4:	6978      	ldr	r0, [r7, #20]
 800bab6:	4798      	blx	r3
}
 800bab8:	bf00      	nop
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	200011c0 	.word	0x200011c0

0800bac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bacc:	f107 0308 	add.w	r3, r7, #8
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 f857 	bl	800bb84 <prvGetNextExpireTime>
 800bad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	4619      	mov	r1, r3
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 f803 	bl	800bae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bae2:	f000 f8d5 	bl	800bc90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bae6:	e7f1      	b.n	800bacc <prvTimerTask+0x8>

0800bae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800baf2:	f7ff f96d 	bl	800add0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800baf6:	f107 0308 	add.w	r3, r7, #8
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 f866 	bl	800bbcc <prvSampleTimeNow>
 800bb00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d130      	bne.n	800bb6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10a      	bne.n	800bb24 <prvProcessTimerOrBlockTask+0x3c>
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d806      	bhi.n	800bb24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb16:	f7ff f969 	bl	800adec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb1a:	68f9      	ldr	r1, [r7, #12]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff ff91 	bl	800ba44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb22:	e024      	b.n	800bb6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d008      	beq.n	800bb3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb2a:	4b13      	ldr	r3, [pc, #76]	; (800bb78 <prvProcessTimerOrBlockTask+0x90>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	bf0c      	ite	eq
 800bb34:	2301      	moveq	r3, #1
 800bb36:	2300      	movne	r3, #0
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb3c:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <prvProcessTimerOrBlockTask+0x94>)
 800bb3e:	6818      	ldr	r0, [r3, #0]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	4619      	mov	r1, r3
 800bb4a:	f7fe fda3 	bl	800a694 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb4e:	f7ff f94d 	bl	800adec <xTaskResumeAll>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10a      	bne.n	800bb6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb58:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <prvProcessTimerOrBlockTask+0x98>)
 800bb5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb5e:	601a      	str	r2, [r3, #0]
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	f3bf 8f6f 	isb	sy
}
 800bb68:	e001      	b.n	800bb6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb6a:	f7ff f93f 	bl	800adec <xTaskResumeAll>
}
 800bb6e:	bf00      	nop
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	200011c4 	.word	0x200011c4
 800bb7c:	200011c8 	.word	0x200011c8
 800bb80:	e000ed04 	.word	0xe000ed04

0800bb84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb8c:	4b0e      	ldr	r3, [pc, #56]	; (800bbc8 <prvGetNextExpireTime+0x44>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	bf0c      	ite	eq
 800bb96:	2301      	moveq	r3, #1
 800bb98:	2300      	movne	r3, #0
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d105      	bne.n	800bbb6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbaa:	4b07      	ldr	r3, [pc, #28]	; (800bbc8 <prvGetNextExpireTime+0x44>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	e001      	b.n	800bbba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbba:	68fb      	ldr	r3, [r7, #12]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3714      	adds	r7, #20
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bc80      	pop	{r7}
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	200011c0 	.word	0x200011c0

0800bbcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbd4:	f7ff f9a8 	bl	800af28 <xTaskGetTickCount>
 800bbd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbda:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <prvSampleTimeNow+0x3c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d205      	bcs.n	800bbf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbe4:	f000 f908 	bl	800bdf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	601a      	str	r2, [r3, #0]
 800bbee:	e002      	b.n	800bbf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbf6:	4a04      	ldr	r2, [pc, #16]	; (800bc08 <prvSampleTimeNow+0x3c>)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	200011d0 	.word	0x200011d0

0800bc0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d812      	bhi.n	800bc58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	1ad2      	subs	r2, r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	699b      	ldr	r3, [r3, #24]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d302      	bcc.n	800bc46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc40:	2301      	movs	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	e01b      	b.n	800bc7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc46:	4b10      	ldr	r3, [pc, #64]	; (800bc88 <prvInsertTimerInActiveList+0x7c>)
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4619      	mov	r1, r3
 800bc50:	4610      	mov	r0, r2
 800bc52:	f7fd fc2f 	bl	80094b4 <vListInsert>
 800bc56:	e012      	b.n	800bc7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d206      	bcs.n	800bc6e <prvInsertTimerInActiveList+0x62>
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d302      	bcc.n	800bc6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	e007      	b.n	800bc7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc6e:	4b07      	ldr	r3, [pc, #28]	; (800bc8c <prvInsertTimerInActiveList+0x80>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3304      	adds	r3, #4
 800bc76:	4619      	mov	r1, r3
 800bc78:	4610      	mov	r0, r2
 800bc7a:	f7fd fc1b 	bl	80094b4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc7e:	697b      	ldr	r3, [r7, #20]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	200011c4 	.word	0x200011c4
 800bc8c:	200011c0 	.word	0x200011c0

0800bc90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08e      	sub	sp, #56	; 0x38
 800bc94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc96:	e09d      	b.n	800bdd4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	da18      	bge.n	800bcd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc9e:	1d3b      	adds	r3, r7, #4
 800bca0:	3304      	adds	r3, #4
 800bca2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10a      	bne.n	800bcc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	61fb      	str	r3, [r7, #28]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcc6:	6850      	ldr	r0, [r2, #4]
 800bcc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcca:	6892      	ldr	r2, [r2, #8]
 800bccc:	4611      	mov	r1, r2
 800bcce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	db7d      	blt.n	800bdd2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	695b      	ldr	r3, [r3, #20]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d004      	beq.n	800bcec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	3304      	adds	r3, #4
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fd fc1c 	bl	8009524 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcec:	463b      	mov	r3, r7
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff ff6c 	bl	800bbcc <prvSampleTimeNow>
 800bcf4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b09      	cmp	r3, #9
 800bcfa:	d86b      	bhi.n	800bdd4 <prvProcessReceivedCommands+0x144>
 800bcfc:	a201      	add	r2, pc, #4	; (adr r2, 800bd04 <prvProcessReceivedCommands+0x74>)
 800bcfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd02:	bf00      	nop
 800bd04:	0800bd2d 	.word	0x0800bd2d
 800bd08:	0800bd2d 	.word	0x0800bd2d
 800bd0c:	0800bd2d 	.word	0x0800bd2d
 800bd10:	0800bdd5 	.word	0x0800bdd5
 800bd14:	0800bd89 	.word	0x0800bd89
 800bd18:	0800bdc1 	.word	0x0800bdc1
 800bd1c:	0800bd2d 	.word	0x0800bd2d
 800bd20:	0800bd2d 	.word	0x0800bd2d
 800bd24:	0800bdd5 	.word	0x0800bdd5
 800bd28:	0800bd89 	.word	0x0800bd89
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	18d1      	adds	r1, r2, r3
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd3a:	f7ff ff67 	bl	800bc0c <prvInsertTimerInActiveList>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d047      	beq.n	800bdd4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd4a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4e:	69db      	ldr	r3, [r3, #28]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d13f      	bne.n	800bdd4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	699b      	ldr	r3, [r3, #24]
 800bd5a:	441a      	add	r2, r3
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	2300      	movs	r3, #0
 800bd62:	2100      	movs	r1, #0
 800bd64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd66:	f7ff fe1f 	bl	800b9a8 <xTimerGenericCommand>
 800bd6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d130      	bne.n	800bdd4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	61bb      	str	r3, [r7, #24]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10a      	bne.n	800bdac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800bd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9a:	f383 8811 	msr	BASEPRI, r3
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	617b      	str	r3, [r7, #20]
}
 800bda8:	bf00      	nop
 800bdaa:	e7fe      	b.n	800bdaa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdae:	699a      	ldr	r2, [r3, #24]
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	18d1      	adds	r1, r2, r3
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdba:	f7ff ff27 	bl	800bc0c <prvInsertTimerInActiveList>
					break;
 800bdbe:	e009      	b.n	800bdd4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d104      	bne.n	800bdd4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800bdca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdcc:	f000 fb6a 	bl	800c4a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bdd0:	e000      	b.n	800bdd4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bdd2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdd4:	4b07      	ldr	r3, [pc, #28]	; (800bdf4 <prvProcessReceivedCommands+0x164>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	1d39      	adds	r1, r7, #4
 800bdda:	2200      	movs	r2, #0
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe f851 	bl	8009e84 <xQueueReceive>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f47f af57 	bne.w	800bc98 <prvProcessReceivedCommands+0x8>
	}
}
 800bdea:	bf00      	nop
 800bdec:	bf00      	nop
 800bdee:	3730      	adds	r7, #48	; 0x30
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	200011c8 	.word	0x200011c8

0800bdf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b088      	sub	sp, #32
 800bdfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdfe:	e045      	b.n	800be8c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be00:	4b2c      	ldr	r3, [pc, #176]	; (800beb4 <prvSwitchTimerLists+0xbc>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be0a:	4b2a      	ldr	r3, [pc, #168]	; (800beb4 <prvSwitchTimerLists+0xbc>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3304      	adds	r3, #4
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fd fb83 	bl	8009524 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d12e      	bne.n	800be8c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	4413      	add	r3, r2
 800be36:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d90e      	bls.n	800be5e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	68ba      	ldr	r2, [r7, #8]
 800be44:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be4c:	4b19      	ldr	r3, [pc, #100]	; (800beb4 <prvSwitchTimerLists+0xbc>)
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	3304      	adds	r3, #4
 800be54:	4619      	mov	r1, r3
 800be56:	4610      	mov	r0, r2
 800be58:	f7fd fb2c 	bl	80094b4 <vListInsert>
 800be5c:	e016      	b.n	800be8c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be5e:	2300      	movs	r3, #0
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	2300      	movs	r3, #0
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	2100      	movs	r1, #0
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7ff fd9d 	bl	800b9a8 <xTimerGenericCommand>
 800be6e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10a      	bne.n	800be8c <prvSwitchTimerLists+0x94>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	603b      	str	r3, [r7, #0]
}
 800be88:	bf00      	nop
 800be8a:	e7fe      	b.n	800be8a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be8c:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <prvSwitchTimerLists+0xbc>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1b4      	bne.n	800be00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be96:	4b07      	ldr	r3, [pc, #28]	; (800beb4 <prvSwitchTimerLists+0xbc>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be9c:	4b06      	ldr	r3, [pc, #24]	; (800beb8 <prvSwitchTimerLists+0xc0>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a04      	ldr	r2, [pc, #16]	; (800beb4 <prvSwitchTimerLists+0xbc>)
 800bea2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bea4:	4a04      	ldr	r2, [pc, #16]	; (800beb8 <prvSwitchTimerLists+0xc0>)
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	6013      	str	r3, [r2, #0]
}
 800beaa:	bf00      	nop
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	200011c0 	.word	0x200011c0
 800beb8:	200011c4 	.word	0x200011c4

0800bebc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bec2:	f000 f92b 	bl	800c11c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bec6:	4b15      	ldr	r3, [pc, #84]	; (800bf1c <prvCheckForValidListAndQueue+0x60>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d120      	bne.n	800bf10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bece:	4814      	ldr	r0, [pc, #80]	; (800bf20 <prvCheckForValidListAndQueue+0x64>)
 800bed0:	f7fd faa2 	bl	8009418 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bed4:	4813      	ldr	r0, [pc, #76]	; (800bf24 <prvCheckForValidListAndQueue+0x68>)
 800bed6:	f7fd fa9f 	bl	8009418 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <prvCheckForValidListAndQueue+0x6c>)
 800bedc:	4a10      	ldr	r2, [pc, #64]	; (800bf20 <prvCheckForValidListAndQueue+0x64>)
 800bede:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bee0:	4b12      	ldr	r3, [pc, #72]	; (800bf2c <prvCheckForValidListAndQueue+0x70>)
 800bee2:	4a10      	ldr	r2, [pc, #64]	; (800bf24 <prvCheckForValidListAndQueue+0x68>)
 800bee4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bee6:	2300      	movs	r3, #0
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	4b11      	ldr	r3, [pc, #68]	; (800bf30 <prvCheckForValidListAndQueue+0x74>)
 800beec:	4a11      	ldr	r2, [pc, #68]	; (800bf34 <prvCheckForValidListAndQueue+0x78>)
 800beee:	2110      	movs	r1, #16
 800bef0:	200a      	movs	r0, #10
 800bef2:	f7fd fba9 	bl	8009648 <xQueueGenericCreateStatic>
 800bef6:	4603      	mov	r3, r0
 800bef8:	4a08      	ldr	r2, [pc, #32]	; (800bf1c <prvCheckForValidListAndQueue+0x60>)
 800befa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800befc:	4b07      	ldr	r3, [pc, #28]	; (800bf1c <prvCheckForValidListAndQueue+0x60>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d005      	beq.n	800bf10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf04:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <prvCheckForValidListAndQueue+0x60>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	490b      	ldr	r1, [pc, #44]	; (800bf38 <prvCheckForValidListAndQueue+0x7c>)
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe fb70 	bl	800a5f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf10:	f000 f934 	bl	800c17c <vPortExitCritical>
}
 800bf14:	bf00      	nop
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	200011c8 	.word	0x200011c8
 800bf20:	20001198 	.word	0x20001198
 800bf24:	200011ac 	.word	0x200011ac
 800bf28:	200011c0 	.word	0x200011c0
 800bf2c:	200011c4 	.word	0x200011c4
 800bf30:	20001274 	.word	0x20001274
 800bf34:	200011d4 	.word	0x200011d4
 800bf38:	0800d2d4 	.word	0x0800d2d4

0800bf3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	3b04      	subs	r3, #4
 800bf4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	3b04      	subs	r3, #4
 800bf5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	f023 0201 	bic.w	r2, r3, #1
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	3b04      	subs	r3, #4
 800bf6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf6c:	4a08      	ldr	r2, [pc, #32]	; (800bf90 <pxPortInitialiseStack+0x54>)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3b14      	subs	r3, #20
 800bf76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3b20      	subs	r3, #32
 800bf82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf84:	68fb      	ldr	r3, [r7, #12]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bc80      	pop	{r7}
 800bf8e:	4770      	bx	lr
 800bf90:	0800bf95 	.word	0x0800bf95

0800bf94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf9e:	4b12      	ldr	r3, [pc, #72]	; (800bfe8 <prvTaskExitError+0x54>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfa6:	d00a      	beq.n	800bfbe <prvTaskExitError+0x2a>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	60fb      	str	r3, [r7, #12]
}
 800bfba:	bf00      	nop
 800bfbc:	e7fe      	b.n	800bfbc <prvTaskExitError+0x28>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	60bb      	str	r3, [r7, #8]
}
 800bfd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfd2:	bf00      	nop
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d0fc      	beq.n	800bfd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfda:	bf00      	nop
 800bfdc:	bf00      	nop
 800bfde:	3714      	adds	r7, #20
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bc80      	pop	{r7}
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	2000001c 	.word	0x2000001c
 800bfec:	00000000 	.word	0x00000000

0800bff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bff0:	4b07      	ldr	r3, [pc, #28]	; (800c010 <pxCurrentTCBConst2>)
 800bff2:	6819      	ldr	r1, [r3, #0]
 800bff4:	6808      	ldr	r0, [r1, #0]
 800bff6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bffa:	f380 8809 	msr	PSP, r0
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f04f 0000 	mov.w	r0, #0
 800c006:	f380 8811 	msr	BASEPRI, r0
 800c00a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c00e:	4770      	bx	lr

0800c010 <pxCurrentTCBConst2>:
 800c010:	20000ca8 	.word	0x20000ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop

0800c018 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c018:	4806      	ldr	r0, [pc, #24]	; (800c034 <prvPortStartFirstTask+0x1c>)
 800c01a:	6800      	ldr	r0, [r0, #0]
 800c01c:	6800      	ldr	r0, [r0, #0]
 800c01e:	f380 8808 	msr	MSP, r0
 800c022:	b662      	cpsie	i
 800c024:	b661      	cpsie	f
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	df00      	svc	0
 800c030:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c032:	bf00      	nop
 800c034:	e000ed08 	.word	0xe000ed08

0800c038 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c03e:	4b32      	ldr	r3, [pc, #200]	; (800c108 <xPortStartScheduler+0xd0>)
 800c040:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	22ff      	movs	r2, #255	; 0xff
 800c04e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	b2db      	uxtb	r3, r3
 800c056:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c058:	78fb      	ldrb	r3, [r7, #3]
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c060:	b2da      	uxtb	r2, r3
 800c062:	4b2a      	ldr	r3, [pc, #168]	; (800c10c <xPortStartScheduler+0xd4>)
 800c064:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c066:	4b2a      	ldr	r3, [pc, #168]	; (800c110 <xPortStartScheduler+0xd8>)
 800c068:	2207      	movs	r2, #7
 800c06a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c06c:	e009      	b.n	800c082 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c06e:	4b28      	ldr	r3, [pc, #160]	; (800c110 <xPortStartScheduler+0xd8>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3b01      	subs	r3, #1
 800c074:	4a26      	ldr	r2, [pc, #152]	; (800c110 <xPortStartScheduler+0xd8>)
 800c076:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c078:	78fb      	ldrb	r3, [r7, #3]
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c082:	78fb      	ldrb	r3, [r7, #3]
 800c084:	b2db      	uxtb	r3, r3
 800c086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c08a:	2b80      	cmp	r3, #128	; 0x80
 800c08c:	d0ef      	beq.n	800c06e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c08e:	4b20      	ldr	r3, [pc, #128]	; (800c110 <xPortStartScheduler+0xd8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f1c3 0307 	rsb	r3, r3, #7
 800c096:	2b04      	cmp	r3, #4
 800c098:	d00a      	beq.n	800c0b0 <xPortStartScheduler+0x78>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	60bb      	str	r3, [r7, #8]
}
 800c0ac:	bf00      	nop
 800c0ae:	e7fe      	b.n	800c0ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0b0:	4b17      	ldr	r3, [pc, #92]	; (800c110 <xPortStartScheduler+0xd8>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	021b      	lsls	r3, r3, #8
 800c0b6:	4a16      	ldr	r2, [pc, #88]	; (800c110 <xPortStartScheduler+0xd8>)
 800c0b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0ba:	4b15      	ldr	r3, [pc, #84]	; (800c110 <xPortStartScheduler+0xd8>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0c2:	4a13      	ldr	r2, [pc, #76]	; (800c110 <xPortStartScheduler+0xd8>)
 800c0c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0ce:	4b11      	ldr	r3, [pc, #68]	; (800c114 <xPortStartScheduler+0xdc>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a10      	ldr	r2, [pc, #64]	; (800c114 <xPortStartScheduler+0xdc>)
 800c0d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0da:	4b0e      	ldr	r3, [pc, #56]	; (800c114 <xPortStartScheduler+0xdc>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a0d      	ldr	r2, [pc, #52]	; (800c114 <xPortStartScheduler+0xdc>)
 800c0e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0e6:	f000 f8b9 	bl	800c25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0ea:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <xPortStartScheduler+0xe0>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0f0:	f7ff ff92 	bl	800c018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0f4:	f7fe ffe4 	bl	800b0c0 <vTaskSwitchContext>
	prvTaskExitError();
 800c0f8:	f7ff ff4c 	bl	800bf94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	e000e400 	.word	0xe000e400
 800c10c:	200012c4 	.word	0x200012c4
 800c110:	200012c8 	.word	0x200012c8
 800c114:	e000ed20 	.word	0xe000ed20
 800c118:	2000001c 	.word	0x2000001c

0800c11c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	607b      	str	r3, [r7, #4]
}
 800c134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c136:	4b0f      	ldr	r3, [pc, #60]	; (800c174 <vPortEnterCritical+0x58>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	3301      	adds	r3, #1
 800c13c:	4a0d      	ldr	r2, [pc, #52]	; (800c174 <vPortEnterCritical+0x58>)
 800c13e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c140:	4b0c      	ldr	r3, [pc, #48]	; (800c174 <vPortEnterCritical+0x58>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d10f      	bne.n	800c168 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c148:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <vPortEnterCritical+0x5c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00a      	beq.n	800c168 <vPortEnterCritical+0x4c>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	603b      	str	r3, [r7, #0]
}
 800c164:	bf00      	nop
 800c166:	e7fe      	b.n	800c166 <vPortEnterCritical+0x4a>
	}
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bc80      	pop	{r7}
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	2000001c 	.word	0x2000001c
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c182:	4b11      	ldr	r3, [pc, #68]	; (800c1c8 <vPortExitCritical+0x4c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10a      	bne.n	800c1a0 <vPortExitCritical+0x24>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	607b      	str	r3, [r7, #4]
}
 800c19c:	bf00      	nop
 800c19e:	e7fe      	b.n	800c19e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1a0:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <vPortExitCritical+0x4c>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	4a08      	ldr	r2, [pc, #32]	; (800c1c8 <vPortExitCritical+0x4c>)
 800c1a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1aa:	4b07      	ldr	r3, [pc, #28]	; (800c1c8 <vPortExitCritical+0x4c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d105      	bne.n	800c1be <vPortExitCritical+0x42>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	f383 8811 	msr	BASEPRI, r3
}
 800c1bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bc80      	pop	{r7}
 800c1c6:	4770      	bx	lr
 800c1c8:	2000001c 	.word	0x2000001c
 800c1cc:	00000000 	.word	0x00000000

0800c1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1d0:	f3ef 8009 	mrs	r0, PSP
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	; (800c210 <pxCurrentTCBConst>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c1e0:	6010      	str	r0, [r2, #0]
 800c1e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c1e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1ea:	f380 8811 	msr	BASEPRI, r0
 800c1ee:	f7fe ff67 	bl	800b0c0 <vTaskSwitchContext>
 800c1f2:	f04f 0000 	mov.w	r0, #0
 800c1f6:	f380 8811 	msr	BASEPRI, r0
 800c1fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c1fe:	6819      	ldr	r1, [r3, #0]
 800c200:	6808      	ldr	r0, [r1, #0]
 800c202:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c206:	f380 8809 	msr	PSP, r0
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	4770      	bx	lr

0800c210 <pxCurrentTCBConst>:
 800c210:	20000ca8 	.word	0x20000ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop

0800c218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	607b      	str	r3, [r7, #4]
}
 800c230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c232:	f7fe fe87 	bl	800af44 <xTaskIncrementTick>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d003      	beq.n	800c244 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c23c:	4b06      	ldr	r3, [pc, #24]	; (800c258 <SysTick_Handler+0x40>)
 800c23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	2300      	movs	r3, #0
 800c246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	f383 8811 	msr	BASEPRI, r3
}
 800c24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c250:	bf00      	nop
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	e000ed04 	.word	0xe000ed04

0800c25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c25c:	b480      	push	{r7}
 800c25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c260:	4b0a      	ldr	r3, [pc, #40]	; (800c28c <vPortSetupTimerInterrupt+0x30>)
 800c262:	2200      	movs	r2, #0
 800c264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c266:	4b0a      	ldr	r3, [pc, #40]	; (800c290 <vPortSetupTimerInterrupt+0x34>)
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c26c:	4b09      	ldr	r3, [pc, #36]	; (800c294 <vPortSetupTimerInterrupt+0x38>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a09      	ldr	r2, [pc, #36]	; (800c298 <vPortSetupTimerInterrupt+0x3c>)
 800c272:	fba2 2303 	umull	r2, r3, r2, r3
 800c276:	099b      	lsrs	r3, r3, #6
 800c278:	4a08      	ldr	r2, [pc, #32]	; (800c29c <vPortSetupTimerInterrupt+0x40>)
 800c27a:	3b01      	subs	r3, #1
 800c27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c27e:	4b03      	ldr	r3, [pc, #12]	; (800c28c <vPortSetupTimerInterrupt+0x30>)
 800c280:	2207      	movs	r2, #7
 800c282:	601a      	str	r2, [r3, #0]
}
 800c284:	bf00      	nop
 800c286:	46bd      	mov	sp, r7
 800c288:	bc80      	pop	{r7}
 800c28a:	4770      	bx	lr
 800c28c:	e000e010 	.word	0xe000e010
 800c290:	e000e018 	.word	0xe000e018
 800c294:	20000010 	.word	0x20000010
 800c298:	10624dd3 	.word	0x10624dd3
 800c29c:	e000e014 	.word	0xe000e014

0800c2a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c2a6:	f3ef 8305 	mrs	r3, IPSR
 800c2aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2b0f      	cmp	r3, #15
 800c2b0:	d914      	bls.n	800c2dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2b2:	4a16      	ldr	r2, [pc, #88]	; (800c30c <vPortValidateInterruptPriority+0x6c>)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2bc:	4b14      	ldr	r3, [pc, #80]	; (800c310 <vPortValidateInterruptPriority+0x70>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	7afa      	ldrb	r2, [r7, #11]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d20a      	bcs.n	800c2dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	607b      	str	r3, [r7, #4]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2dc:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <vPortValidateInterruptPriority+0x74>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c2e4:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <vPortValidateInterruptPriority+0x78>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d90a      	bls.n	800c302 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f0:	f383 8811 	msr	BASEPRI, r3
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	603b      	str	r3, [r7, #0]
}
 800c2fe:	bf00      	nop
 800c300:	e7fe      	b.n	800c300 <vPortValidateInterruptPriority+0x60>
	}
 800c302:	bf00      	nop
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	bc80      	pop	{r7}
 800c30a:	4770      	bx	lr
 800c30c:	e000e3f0 	.word	0xe000e3f0
 800c310:	200012c4 	.word	0x200012c4
 800c314:	e000ed0c 	.word	0xe000ed0c
 800c318:	200012c8 	.word	0x200012c8

0800c31c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08a      	sub	sp, #40	; 0x28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c324:	2300      	movs	r3, #0
 800c326:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c328:	f7fe fd52 	bl	800add0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c32c:	4b58      	ldr	r3, [pc, #352]	; (800c490 <pvPortMalloc+0x174>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c334:	f000 f910 	bl	800c558 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c338:	4b56      	ldr	r3, [pc, #344]	; (800c494 <pvPortMalloc+0x178>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4013      	ands	r3, r2
 800c340:	2b00      	cmp	r3, #0
 800c342:	f040 808e 	bne.w	800c462 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01d      	beq.n	800c388 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c34c:	2208      	movs	r2, #8
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4413      	add	r3, r2
 800c352:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d014      	beq.n	800c388 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f023 0307 	bic.w	r3, r3, #7
 800c364:	3308      	adds	r3, #8
 800c366:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f003 0307 	and.w	r3, r3, #7
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00a      	beq.n	800c388 <pvPortMalloc+0x6c>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	617b      	str	r3, [r7, #20]
}
 800c384:	bf00      	nop
 800c386:	e7fe      	b.n	800c386 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d069      	beq.n	800c462 <pvPortMalloc+0x146>
 800c38e:	4b42      	ldr	r3, [pc, #264]	; (800c498 <pvPortMalloc+0x17c>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	d864      	bhi.n	800c462 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c398:	4b40      	ldr	r3, [pc, #256]	; (800c49c <pvPortMalloc+0x180>)
 800c39a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c39c:	4b3f      	ldr	r3, [pc, #252]	; (800c49c <pvPortMalloc+0x180>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3a2:	e004      	b.n	800c3ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d903      	bls.n	800c3c0 <pvPortMalloc+0xa4>
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1f1      	bne.n	800c3a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3c0:	4b33      	ldr	r3, [pc, #204]	; (800c490 <pvPortMalloc+0x174>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d04b      	beq.n	800c462 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2208      	movs	r2, #8
 800c3d0:	4413      	add	r3, r2
 800c3d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	1ad2      	subs	r2, r2, r3
 800c3e4:	2308      	movs	r3, #8
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d91f      	bls.n	800c42c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <pvPortMalloc+0xf8>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	613b      	str	r3, [r7, #16]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	1ad2      	subs	r2, r2, r3
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c426:	69b8      	ldr	r0, [r7, #24]
 800c428:	f000 f8f8 	bl	800c61c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c42c:	4b1a      	ldr	r3, [pc, #104]	; (800c498 <pvPortMalloc+0x17c>)
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	4a18      	ldr	r2, [pc, #96]	; (800c498 <pvPortMalloc+0x17c>)
 800c438:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c43a:	4b17      	ldr	r3, [pc, #92]	; (800c498 <pvPortMalloc+0x17c>)
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	4b18      	ldr	r3, [pc, #96]	; (800c4a0 <pvPortMalloc+0x184>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	429a      	cmp	r2, r3
 800c444:	d203      	bcs.n	800c44e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c446:	4b14      	ldr	r3, [pc, #80]	; (800c498 <pvPortMalloc+0x17c>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a15      	ldr	r2, [pc, #84]	; (800c4a0 <pvPortMalloc+0x184>)
 800c44c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	4b10      	ldr	r3, [pc, #64]	; (800c494 <pvPortMalloc+0x178>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	431a      	orrs	r2, r3
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c462:	f7fe fcc3 	bl	800adec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	f003 0307 	and.w	r3, r3, #7
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d00a      	beq.n	800c486 <pvPortMalloc+0x16a>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	60fb      	str	r3, [r7, #12]
}
 800c482:	bf00      	nop
 800c484:	e7fe      	b.n	800c484 <pvPortMalloc+0x168>
	return pvReturn;
 800c486:	69fb      	ldr	r3, [r7, #28]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3728      	adds	r7, #40	; 0x28
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	200038b8 	.word	0x200038b8
 800c494:	200038c4 	.word	0x200038c4
 800c498:	200038bc 	.word	0x200038bc
 800c49c:	200038b0 	.word	0x200038b0
 800c4a0:	200038c0 	.word	0x200038c0

0800c4a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d048      	beq.n	800c548 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4b6:	2308      	movs	r3, #8
 800c4b8:	425b      	negs	r3, r3
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	4413      	add	r3, r2
 800c4be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	685a      	ldr	r2, [r3, #4]
 800c4c8:	4b21      	ldr	r3, [pc, #132]	; (800c550 <vPortFree+0xac>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10a      	bne.n	800c4e8 <vPortFree+0x44>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	60fb      	str	r3, [r7, #12]
}
 800c4e4:	bf00      	nop
 800c4e6:	e7fe      	b.n	800c4e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00a      	beq.n	800c506 <vPortFree+0x62>
	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	60bb      	str	r3, [r7, #8]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	685a      	ldr	r2, [r3, #4]
 800c50a:	4b11      	ldr	r3, [pc, #68]	; (800c550 <vPortFree+0xac>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4013      	ands	r3, r2
 800c510:	2b00      	cmp	r3, #0
 800c512:	d019      	beq.n	800c548 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d115      	bne.n	800c548 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	685a      	ldr	r2, [r3, #4]
 800c520:	4b0b      	ldr	r3, [pc, #44]	; (800c550 <vPortFree+0xac>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	43db      	mvns	r3, r3
 800c526:	401a      	ands	r2, r3
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c52c:	f7fe fc50 	bl	800add0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	685a      	ldr	r2, [r3, #4]
 800c534:	4b07      	ldr	r3, [pc, #28]	; (800c554 <vPortFree+0xb0>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4413      	add	r3, r2
 800c53a:	4a06      	ldr	r2, [pc, #24]	; (800c554 <vPortFree+0xb0>)
 800c53c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c53e:	6938      	ldr	r0, [r7, #16]
 800c540:	f000 f86c 	bl	800c61c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c544:	f7fe fc52 	bl	800adec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c548:	bf00      	nop
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	200038c4 	.word	0x200038c4
 800c554:	200038bc 	.word	0x200038bc

0800c558 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c55e:	f242 53e4 	movw	r3, #9700	; 0x25e4
 800c562:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c564:	4b27      	ldr	r3, [pc, #156]	; (800c604 <prvHeapInit+0xac>)
 800c566:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f003 0307 	and.w	r3, r3, #7
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00c      	beq.n	800c58c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3307      	adds	r3, #7
 800c576:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f023 0307 	bic.w	r3, r3, #7
 800c57e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	4a1f      	ldr	r2, [pc, #124]	; (800c604 <prvHeapInit+0xac>)
 800c588:	4413      	add	r3, r2
 800c58a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c590:	4a1d      	ldr	r2, [pc, #116]	; (800c608 <prvHeapInit+0xb0>)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c596:	4b1c      	ldr	r3, [pc, #112]	; (800c608 <prvHeapInit+0xb0>)
 800c598:	2200      	movs	r2, #0
 800c59a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5a4:	2208      	movs	r2, #8
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	1a9b      	subs	r3, r3, r2
 800c5aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 0307 	bic.w	r3, r3, #7
 800c5b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4a15      	ldr	r2, [pc, #84]	; (800c60c <prvHeapInit+0xb4>)
 800c5b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5ba:	4b14      	ldr	r3, [pc, #80]	; (800c60c <prvHeapInit+0xb4>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5c2:	4b12      	ldr	r3, [pc, #72]	; (800c60c <prvHeapInit+0xb4>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	1ad2      	subs	r2, r2, r3
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <prvHeapInit+0xb4>)
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	4a0a      	ldr	r2, [pc, #40]	; (800c610 <prvHeapInit+0xb8>)
 800c5e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	4a09      	ldr	r2, [pc, #36]	; (800c614 <prvHeapInit+0xbc>)
 800c5ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5f0:	4b09      	ldr	r3, [pc, #36]	; (800c618 <prvHeapInit+0xc0>)
 800c5f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c5f6:	601a      	str	r2, [r3, #0]
}
 800c5f8:	bf00      	nop
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bc80      	pop	{r7}
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	200012cc 	.word	0x200012cc
 800c608:	200038b0 	.word	0x200038b0
 800c60c:	200038b8 	.word	0x200038b8
 800c610:	200038c0 	.word	0x200038c0
 800c614:	200038bc 	.word	0x200038bc
 800c618:	200038c4 	.word	0x200038c4

0800c61c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c624:	4b27      	ldr	r3, [pc, #156]	; (800c6c4 <prvInsertBlockIntoFreeList+0xa8>)
 800c626:	60fb      	str	r3, [r7, #12]
 800c628:	e002      	b.n	800c630 <prvInsertBlockIntoFreeList+0x14>
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	60fb      	str	r3, [r7, #12]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	429a      	cmp	r2, r3
 800c638:	d8f7      	bhi.n	800c62a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	4413      	add	r3, r2
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d108      	bne.n	800c65e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	441a      	add	r2, r3
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	441a      	add	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d118      	bne.n	800c6a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	4b14      	ldr	r3, [pc, #80]	; (800c6c8 <prvInsertBlockIntoFreeList+0xac>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d00d      	beq.n	800c69a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	441a      	add	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	e008      	b.n	800c6ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c69a:	4b0b      	ldr	r3, [pc, #44]	; (800c6c8 <prvInsertBlockIntoFreeList+0xac>)
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	601a      	str	r2, [r3, #0]
 800c6a2:	e003      	b.n	800c6ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d002      	beq.n	800c6ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6ba:	bf00      	nop
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bc80      	pop	{r7}
 800c6c2:	4770      	bx	lr
 800c6c4:	200038b0 	.word	0x200038b0
 800c6c8:	200038b8 	.word	0x200038b8

0800c6cc <__errno>:
 800c6cc:	4b01      	ldr	r3, [pc, #4]	; (800c6d4 <__errno+0x8>)
 800c6ce:	6818      	ldr	r0, [r3, #0]
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20000020 	.word	0x20000020

0800c6d8 <__libc_init_array>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	2600      	movs	r6, #0
 800c6dc:	4d0c      	ldr	r5, [pc, #48]	; (800c710 <__libc_init_array+0x38>)
 800c6de:	4c0d      	ldr	r4, [pc, #52]	; (800c714 <__libc_init_array+0x3c>)
 800c6e0:	1b64      	subs	r4, r4, r5
 800c6e2:	10a4      	asrs	r4, r4, #2
 800c6e4:	42a6      	cmp	r6, r4
 800c6e6:	d109      	bne.n	800c6fc <__libc_init_array+0x24>
 800c6e8:	f000 fcb0 	bl	800d04c <_init>
 800c6ec:	2600      	movs	r6, #0
 800c6ee:	4d0a      	ldr	r5, [pc, #40]	; (800c718 <__libc_init_array+0x40>)
 800c6f0:	4c0a      	ldr	r4, [pc, #40]	; (800c71c <__libc_init_array+0x44>)
 800c6f2:	1b64      	subs	r4, r4, r5
 800c6f4:	10a4      	asrs	r4, r4, #2
 800c6f6:	42a6      	cmp	r6, r4
 800c6f8:	d105      	bne.n	800c706 <__libc_init_array+0x2e>
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}
 800c6fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c700:	4798      	blx	r3
 800c702:	3601      	adds	r6, #1
 800c704:	e7ee      	b.n	800c6e4 <__libc_init_array+0xc>
 800c706:	f855 3b04 	ldr.w	r3, [r5], #4
 800c70a:	4798      	blx	r3
 800c70c:	3601      	adds	r6, #1
 800c70e:	e7f2      	b.n	800c6f6 <__libc_init_array+0x1e>
 800c710:	0800d788 	.word	0x0800d788
 800c714:	0800d788 	.word	0x0800d788
 800c718:	0800d788 	.word	0x0800d788
 800c71c:	0800d78c 	.word	0x0800d78c

0800c720 <__retarget_lock_acquire_recursive>:
 800c720:	4770      	bx	lr

0800c722 <__retarget_lock_release_recursive>:
 800c722:	4770      	bx	lr

0800c724 <memcpy>:
 800c724:	440a      	add	r2, r1
 800c726:	4291      	cmp	r1, r2
 800c728:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c72c:	d100      	bne.n	800c730 <memcpy+0xc>
 800c72e:	4770      	bx	lr
 800c730:	b510      	push	{r4, lr}
 800c732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c736:	4291      	cmp	r1, r2
 800c738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c73c:	d1f9      	bne.n	800c732 <memcpy+0xe>
 800c73e:	bd10      	pop	{r4, pc}

0800c740 <memset>:
 800c740:	4603      	mov	r3, r0
 800c742:	4402      	add	r2, r0
 800c744:	4293      	cmp	r3, r2
 800c746:	d100      	bne.n	800c74a <memset+0xa>
 800c748:	4770      	bx	lr
 800c74a:	f803 1b01 	strb.w	r1, [r3], #1
 800c74e:	e7f9      	b.n	800c744 <memset+0x4>

0800c750 <sbrk_aligned>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	4e0e      	ldr	r6, [pc, #56]	; (800c78c <sbrk_aligned+0x3c>)
 800c754:	460c      	mov	r4, r1
 800c756:	6831      	ldr	r1, [r6, #0]
 800c758:	4605      	mov	r5, r0
 800c75a:	b911      	cbnz	r1, 800c762 <sbrk_aligned+0x12>
 800c75c:	f000 f88c 	bl	800c878 <_sbrk_r>
 800c760:	6030      	str	r0, [r6, #0]
 800c762:	4621      	mov	r1, r4
 800c764:	4628      	mov	r0, r5
 800c766:	f000 f887 	bl	800c878 <_sbrk_r>
 800c76a:	1c43      	adds	r3, r0, #1
 800c76c:	d00a      	beq.n	800c784 <sbrk_aligned+0x34>
 800c76e:	1cc4      	adds	r4, r0, #3
 800c770:	f024 0403 	bic.w	r4, r4, #3
 800c774:	42a0      	cmp	r0, r4
 800c776:	d007      	beq.n	800c788 <sbrk_aligned+0x38>
 800c778:	1a21      	subs	r1, r4, r0
 800c77a:	4628      	mov	r0, r5
 800c77c:	f000 f87c 	bl	800c878 <_sbrk_r>
 800c780:	3001      	adds	r0, #1
 800c782:	d101      	bne.n	800c788 <sbrk_aligned+0x38>
 800c784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c788:	4620      	mov	r0, r4
 800c78a:	bd70      	pop	{r4, r5, r6, pc}
 800c78c:	200038d0 	.word	0x200038d0

0800c790 <_malloc_r>:
 800c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c794:	1ccd      	adds	r5, r1, #3
 800c796:	f025 0503 	bic.w	r5, r5, #3
 800c79a:	3508      	adds	r5, #8
 800c79c:	2d0c      	cmp	r5, #12
 800c79e:	bf38      	it	cc
 800c7a0:	250c      	movcc	r5, #12
 800c7a2:	2d00      	cmp	r5, #0
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	db01      	blt.n	800c7ac <_malloc_r+0x1c>
 800c7a8:	42a9      	cmp	r1, r5
 800c7aa:	d905      	bls.n	800c7b8 <_malloc_r+0x28>
 800c7ac:	230c      	movs	r3, #12
 800c7ae:	2600      	movs	r6, #0
 800c7b0:	603b      	str	r3, [r7, #0]
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b8:	4e2e      	ldr	r6, [pc, #184]	; (800c874 <_malloc_r+0xe4>)
 800c7ba:	f000 f8a1 	bl	800c900 <__malloc_lock>
 800c7be:	6833      	ldr	r3, [r6, #0]
 800c7c0:	461c      	mov	r4, r3
 800c7c2:	bb34      	cbnz	r4, 800c812 <_malloc_r+0x82>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	f7ff ffc2 	bl	800c750 <sbrk_aligned>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	d14d      	bne.n	800c86e <_malloc_r+0xde>
 800c7d2:	6834      	ldr	r4, [r6, #0]
 800c7d4:	4626      	mov	r6, r4
 800c7d6:	2e00      	cmp	r6, #0
 800c7d8:	d140      	bne.n	800c85c <_malloc_r+0xcc>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4638      	mov	r0, r7
 800c7e0:	eb04 0803 	add.w	r8, r4, r3
 800c7e4:	f000 f848 	bl	800c878 <_sbrk_r>
 800c7e8:	4580      	cmp	r8, r0
 800c7ea:	d13a      	bne.n	800c862 <_malloc_r+0xd2>
 800c7ec:	6821      	ldr	r1, [r4, #0]
 800c7ee:	3503      	adds	r5, #3
 800c7f0:	1a6d      	subs	r5, r5, r1
 800c7f2:	f025 0503 	bic.w	r5, r5, #3
 800c7f6:	3508      	adds	r5, #8
 800c7f8:	2d0c      	cmp	r5, #12
 800c7fa:	bf38      	it	cc
 800c7fc:	250c      	movcc	r5, #12
 800c7fe:	4638      	mov	r0, r7
 800c800:	4629      	mov	r1, r5
 800c802:	f7ff ffa5 	bl	800c750 <sbrk_aligned>
 800c806:	3001      	adds	r0, #1
 800c808:	d02b      	beq.n	800c862 <_malloc_r+0xd2>
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	442b      	add	r3, r5
 800c80e:	6023      	str	r3, [r4, #0]
 800c810:	e00e      	b.n	800c830 <_malloc_r+0xa0>
 800c812:	6822      	ldr	r2, [r4, #0]
 800c814:	1b52      	subs	r2, r2, r5
 800c816:	d41e      	bmi.n	800c856 <_malloc_r+0xc6>
 800c818:	2a0b      	cmp	r2, #11
 800c81a:	d916      	bls.n	800c84a <_malloc_r+0xba>
 800c81c:	1961      	adds	r1, r4, r5
 800c81e:	42a3      	cmp	r3, r4
 800c820:	6025      	str	r5, [r4, #0]
 800c822:	bf18      	it	ne
 800c824:	6059      	strne	r1, [r3, #4]
 800c826:	6863      	ldr	r3, [r4, #4]
 800c828:	bf08      	it	eq
 800c82a:	6031      	streq	r1, [r6, #0]
 800c82c:	5162      	str	r2, [r4, r5]
 800c82e:	604b      	str	r3, [r1, #4]
 800c830:	4638      	mov	r0, r7
 800c832:	f104 060b 	add.w	r6, r4, #11
 800c836:	f000 f869 	bl	800c90c <__malloc_unlock>
 800c83a:	f026 0607 	bic.w	r6, r6, #7
 800c83e:	1d23      	adds	r3, r4, #4
 800c840:	1af2      	subs	r2, r6, r3
 800c842:	d0b6      	beq.n	800c7b2 <_malloc_r+0x22>
 800c844:	1b9b      	subs	r3, r3, r6
 800c846:	50a3      	str	r3, [r4, r2]
 800c848:	e7b3      	b.n	800c7b2 <_malloc_r+0x22>
 800c84a:	6862      	ldr	r2, [r4, #4]
 800c84c:	42a3      	cmp	r3, r4
 800c84e:	bf0c      	ite	eq
 800c850:	6032      	streq	r2, [r6, #0]
 800c852:	605a      	strne	r2, [r3, #4]
 800c854:	e7ec      	b.n	800c830 <_malloc_r+0xa0>
 800c856:	4623      	mov	r3, r4
 800c858:	6864      	ldr	r4, [r4, #4]
 800c85a:	e7b2      	b.n	800c7c2 <_malloc_r+0x32>
 800c85c:	4634      	mov	r4, r6
 800c85e:	6876      	ldr	r6, [r6, #4]
 800c860:	e7b9      	b.n	800c7d6 <_malloc_r+0x46>
 800c862:	230c      	movs	r3, #12
 800c864:	4638      	mov	r0, r7
 800c866:	603b      	str	r3, [r7, #0]
 800c868:	f000 f850 	bl	800c90c <__malloc_unlock>
 800c86c:	e7a1      	b.n	800c7b2 <_malloc_r+0x22>
 800c86e:	6025      	str	r5, [r4, #0]
 800c870:	e7de      	b.n	800c830 <_malloc_r+0xa0>
 800c872:	bf00      	nop
 800c874:	200038cc 	.word	0x200038cc

0800c878 <_sbrk_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	2300      	movs	r3, #0
 800c87c:	4d05      	ldr	r5, [pc, #20]	; (800c894 <_sbrk_r+0x1c>)
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f8 f816 	bl	80048b4 <_sbrk>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_sbrk_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_sbrk_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	200038d4 	.word	0x200038d4

0800c898 <siprintf>:
 800c898:	b40e      	push	{r1, r2, r3}
 800c89a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c89e:	b500      	push	{lr}
 800c8a0:	b09c      	sub	sp, #112	; 0x70
 800c8a2:	ab1d      	add	r3, sp, #116	; 0x74
 800c8a4:	9002      	str	r0, [sp, #8]
 800c8a6:	9006      	str	r0, [sp, #24]
 800c8a8:	9107      	str	r1, [sp, #28]
 800c8aa:	9104      	str	r1, [sp, #16]
 800c8ac:	4808      	ldr	r0, [pc, #32]	; (800c8d0 <siprintf+0x38>)
 800c8ae:	4909      	ldr	r1, [pc, #36]	; (800c8d4 <siprintf+0x3c>)
 800c8b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8b4:	9105      	str	r1, [sp, #20]
 800c8b6:	6800      	ldr	r0, [r0, #0]
 800c8b8:	a902      	add	r1, sp, #8
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	f000 f8d0 	bl	800ca60 <_svfiprintf_r>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	9b02      	ldr	r3, [sp, #8]
 800c8c4:	701a      	strb	r2, [r3, #0]
 800c8c6:	b01c      	add	sp, #112	; 0x70
 800c8c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8cc:	b003      	add	sp, #12
 800c8ce:	4770      	bx	lr
 800c8d0:	20000020 	.word	0x20000020
 800c8d4:	ffff0208 	.word	0xffff0208

0800c8d8 <strncat>:
 800c8d8:	b530      	push	{r4, r5, lr}
 800c8da:	4604      	mov	r4, r0
 800c8dc:	7825      	ldrb	r5, [r4, #0]
 800c8de:	4623      	mov	r3, r4
 800c8e0:	3401      	adds	r4, #1
 800c8e2:	2d00      	cmp	r5, #0
 800c8e4:	d1fa      	bne.n	800c8dc <strncat+0x4>
 800c8e6:	3a01      	subs	r2, #1
 800c8e8:	d304      	bcc.n	800c8f4 <strncat+0x1c>
 800c8ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ee:	f803 4b01 	strb.w	r4, [r3], #1
 800c8f2:	b904      	cbnz	r4, 800c8f6 <strncat+0x1e>
 800c8f4:	bd30      	pop	{r4, r5, pc}
 800c8f6:	2a00      	cmp	r2, #0
 800c8f8:	d1f5      	bne.n	800c8e6 <strncat+0xe>
 800c8fa:	701a      	strb	r2, [r3, #0]
 800c8fc:	e7f3      	b.n	800c8e6 <strncat+0xe>
	...

0800c900 <__malloc_lock>:
 800c900:	4801      	ldr	r0, [pc, #4]	; (800c908 <__malloc_lock+0x8>)
 800c902:	f7ff bf0d 	b.w	800c720 <__retarget_lock_acquire_recursive>
 800c906:	bf00      	nop
 800c908:	200038c8 	.word	0x200038c8

0800c90c <__malloc_unlock>:
 800c90c:	4801      	ldr	r0, [pc, #4]	; (800c914 <__malloc_unlock+0x8>)
 800c90e:	f7ff bf08 	b.w	800c722 <__retarget_lock_release_recursive>
 800c912:	bf00      	nop
 800c914:	200038c8 	.word	0x200038c8

0800c918 <_free_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4605      	mov	r5, r0
 800c91c:	2900      	cmp	r1, #0
 800c91e:	d040      	beq.n	800c9a2 <_free_r+0x8a>
 800c920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c924:	1f0c      	subs	r4, r1, #4
 800c926:	2b00      	cmp	r3, #0
 800c928:	bfb8      	it	lt
 800c92a:	18e4      	addlt	r4, r4, r3
 800c92c:	f7ff ffe8 	bl	800c900 <__malloc_lock>
 800c930:	4a1c      	ldr	r2, [pc, #112]	; (800c9a4 <_free_r+0x8c>)
 800c932:	6813      	ldr	r3, [r2, #0]
 800c934:	b933      	cbnz	r3, 800c944 <_free_r+0x2c>
 800c936:	6063      	str	r3, [r4, #4]
 800c938:	6014      	str	r4, [r2, #0]
 800c93a:	4628      	mov	r0, r5
 800c93c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c940:	f7ff bfe4 	b.w	800c90c <__malloc_unlock>
 800c944:	42a3      	cmp	r3, r4
 800c946:	d908      	bls.n	800c95a <_free_r+0x42>
 800c948:	6820      	ldr	r0, [r4, #0]
 800c94a:	1821      	adds	r1, r4, r0
 800c94c:	428b      	cmp	r3, r1
 800c94e:	bf01      	itttt	eq
 800c950:	6819      	ldreq	r1, [r3, #0]
 800c952:	685b      	ldreq	r3, [r3, #4]
 800c954:	1809      	addeq	r1, r1, r0
 800c956:	6021      	streq	r1, [r4, #0]
 800c958:	e7ed      	b.n	800c936 <_free_r+0x1e>
 800c95a:	461a      	mov	r2, r3
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	b10b      	cbz	r3, 800c964 <_free_r+0x4c>
 800c960:	42a3      	cmp	r3, r4
 800c962:	d9fa      	bls.n	800c95a <_free_r+0x42>
 800c964:	6811      	ldr	r1, [r2, #0]
 800c966:	1850      	adds	r0, r2, r1
 800c968:	42a0      	cmp	r0, r4
 800c96a:	d10b      	bne.n	800c984 <_free_r+0x6c>
 800c96c:	6820      	ldr	r0, [r4, #0]
 800c96e:	4401      	add	r1, r0
 800c970:	1850      	adds	r0, r2, r1
 800c972:	4283      	cmp	r3, r0
 800c974:	6011      	str	r1, [r2, #0]
 800c976:	d1e0      	bne.n	800c93a <_free_r+0x22>
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	4401      	add	r1, r0
 800c97e:	6011      	str	r1, [r2, #0]
 800c980:	6053      	str	r3, [r2, #4]
 800c982:	e7da      	b.n	800c93a <_free_r+0x22>
 800c984:	d902      	bls.n	800c98c <_free_r+0x74>
 800c986:	230c      	movs	r3, #12
 800c988:	602b      	str	r3, [r5, #0]
 800c98a:	e7d6      	b.n	800c93a <_free_r+0x22>
 800c98c:	6820      	ldr	r0, [r4, #0]
 800c98e:	1821      	adds	r1, r4, r0
 800c990:	428b      	cmp	r3, r1
 800c992:	bf01      	itttt	eq
 800c994:	6819      	ldreq	r1, [r3, #0]
 800c996:	685b      	ldreq	r3, [r3, #4]
 800c998:	1809      	addeq	r1, r1, r0
 800c99a:	6021      	streq	r1, [r4, #0]
 800c99c:	6063      	str	r3, [r4, #4]
 800c99e:	6054      	str	r4, [r2, #4]
 800c9a0:	e7cb      	b.n	800c93a <_free_r+0x22>
 800c9a2:	bd38      	pop	{r3, r4, r5, pc}
 800c9a4:	200038cc 	.word	0x200038cc

0800c9a8 <__ssputs_r>:
 800c9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ac:	688e      	ldr	r6, [r1, #8]
 800c9ae:	4682      	mov	sl, r0
 800c9b0:	429e      	cmp	r6, r3
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	4690      	mov	r8, r2
 800c9b6:	461f      	mov	r7, r3
 800c9b8:	d838      	bhi.n	800ca2c <__ssputs_r+0x84>
 800c9ba:	898a      	ldrh	r2, [r1, #12]
 800c9bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9c0:	d032      	beq.n	800ca28 <__ssputs_r+0x80>
 800c9c2:	6825      	ldr	r5, [r4, #0]
 800c9c4:	6909      	ldr	r1, [r1, #16]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	eba5 0901 	sub.w	r9, r5, r1
 800c9cc:	6965      	ldr	r5, [r4, #20]
 800c9ce:	444b      	add	r3, r9
 800c9d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9d8:	106d      	asrs	r5, r5, #1
 800c9da:	429d      	cmp	r5, r3
 800c9dc:	bf38      	it	cc
 800c9de:	461d      	movcc	r5, r3
 800c9e0:	0553      	lsls	r3, r2, #21
 800c9e2:	d531      	bpl.n	800ca48 <__ssputs_r+0xa0>
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	f7ff fed3 	bl	800c790 <_malloc_r>
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	b950      	cbnz	r0, 800ca04 <__ssputs_r+0x5c>
 800c9ee:	230c      	movs	r3, #12
 800c9f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9f4:	f8ca 3000 	str.w	r3, [sl]
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9fe:	81a3      	strh	r3, [r4, #12]
 800ca00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca04:	464a      	mov	r2, r9
 800ca06:	6921      	ldr	r1, [r4, #16]
 800ca08:	f7ff fe8c 	bl	800c724 <memcpy>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca16:	81a3      	strh	r3, [r4, #12]
 800ca18:	6126      	str	r6, [r4, #16]
 800ca1a:	444e      	add	r6, r9
 800ca1c:	6026      	str	r6, [r4, #0]
 800ca1e:	463e      	mov	r6, r7
 800ca20:	6165      	str	r5, [r4, #20]
 800ca22:	eba5 0509 	sub.w	r5, r5, r9
 800ca26:	60a5      	str	r5, [r4, #8]
 800ca28:	42be      	cmp	r6, r7
 800ca2a:	d900      	bls.n	800ca2e <__ssputs_r+0x86>
 800ca2c:	463e      	mov	r6, r7
 800ca2e:	4632      	mov	r2, r6
 800ca30:	4641      	mov	r1, r8
 800ca32:	6820      	ldr	r0, [r4, #0]
 800ca34:	f000 fab8 	bl	800cfa8 <memmove>
 800ca38:	68a3      	ldr	r3, [r4, #8]
 800ca3a:	2000      	movs	r0, #0
 800ca3c:	1b9b      	subs	r3, r3, r6
 800ca3e:	60a3      	str	r3, [r4, #8]
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	4433      	add	r3, r6
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	e7db      	b.n	800ca00 <__ssputs_r+0x58>
 800ca48:	462a      	mov	r2, r5
 800ca4a:	f000 fac7 	bl	800cfdc <_realloc_r>
 800ca4e:	4606      	mov	r6, r0
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d1e1      	bne.n	800ca18 <__ssputs_r+0x70>
 800ca54:	4650      	mov	r0, sl
 800ca56:	6921      	ldr	r1, [r4, #16]
 800ca58:	f7ff ff5e 	bl	800c918 <_free_r>
 800ca5c:	e7c7      	b.n	800c9ee <__ssputs_r+0x46>
	...

0800ca60 <_svfiprintf_r>:
 800ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca64:	4698      	mov	r8, r3
 800ca66:	898b      	ldrh	r3, [r1, #12]
 800ca68:	4607      	mov	r7, r0
 800ca6a:	061b      	lsls	r3, r3, #24
 800ca6c:	460d      	mov	r5, r1
 800ca6e:	4614      	mov	r4, r2
 800ca70:	b09d      	sub	sp, #116	; 0x74
 800ca72:	d50e      	bpl.n	800ca92 <_svfiprintf_r+0x32>
 800ca74:	690b      	ldr	r3, [r1, #16]
 800ca76:	b963      	cbnz	r3, 800ca92 <_svfiprintf_r+0x32>
 800ca78:	2140      	movs	r1, #64	; 0x40
 800ca7a:	f7ff fe89 	bl	800c790 <_malloc_r>
 800ca7e:	6028      	str	r0, [r5, #0]
 800ca80:	6128      	str	r0, [r5, #16]
 800ca82:	b920      	cbnz	r0, 800ca8e <_svfiprintf_r+0x2e>
 800ca84:	230c      	movs	r3, #12
 800ca86:	603b      	str	r3, [r7, #0]
 800ca88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca8c:	e0d1      	b.n	800cc32 <_svfiprintf_r+0x1d2>
 800ca8e:	2340      	movs	r3, #64	; 0x40
 800ca90:	616b      	str	r3, [r5, #20]
 800ca92:	2300      	movs	r3, #0
 800ca94:	9309      	str	r3, [sp, #36]	; 0x24
 800ca96:	2320      	movs	r3, #32
 800ca98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca9c:	2330      	movs	r3, #48	; 0x30
 800ca9e:	f04f 0901 	mov.w	r9, #1
 800caa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800caa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cc4c <_svfiprintf_r+0x1ec>
 800caaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caae:	4623      	mov	r3, r4
 800cab0:	469a      	mov	sl, r3
 800cab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cab6:	b10a      	cbz	r2, 800cabc <_svfiprintf_r+0x5c>
 800cab8:	2a25      	cmp	r2, #37	; 0x25
 800caba:	d1f9      	bne.n	800cab0 <_svfiprintf_r+0x50>
 800cabc:	ebba 0b04 	subs.w	fp, sl, r4
 800cac0:	d00b      	beq.n	800cada <_svfiprintf_r+0x7a>
 800cac2:	465b      	mov	r3, fp
 800cac4:	4622      	mov	r2, r4
 800cac6:	4629      	mov	r1, r5
 800cac8:	4638      	mov	r0, r7
 800caca:	f7ff ff6d 	bl	800c9a8 <__ssputs_r>
 800cace:	3001      	adds	r0, #1
 800cad0:	f000 80aa 	beq.w	800cc28 <_svfiprintf_r+0x1c8>
 800cad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad6:	445a      	add	r2, fp
 800cad8:	9209      	str	r2, [sp, #36]	; 0x24
 800cada:	f89a 3000 	ldrb.w	r3, [sl]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f000 80a2 	beq.w	800cc28 <_svfiprintf_r+0x1c8>
 800cae4:	2300      	movs	r3, #0
 800cae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800caea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caee:	f10a 0a01 	add.w	sl, sl, #1
 800caf2:	9304      	str	r3, [sp, #16]
 800caf4:	9307      	str	r3, [sp, #28]
 800caf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cafa:	931a      	str	r3, [sp, #104]	; 0x68
 800cafc:	4654      	mov	r4, sl
 800cafe:	2205      	movs	r2, #5
 800cb00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb04:	4851      	ldr	r0, [pc, #324]	; (800cc4c <_svfiprintf_r+0x1ec>)
 800cb06:	f000 fa41 	bl	800cf8c <memchr>
 800cb0a:	9a04      	ldr	r2, [sp, #16]
 800cb0c:	b9d8      	cbnz	r0, 800cb46 <_svfiprintf_r+0xe6>
 800cb0e:	06d0      	lsls	r0, r2, #27
 800cb10:	bf44      	itt	mi
 800cb12:	2320      	movmi	r3, #32
 800cb14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb18:	0711      	lsls	r1, r2, #28
 800cb1a:	bf44      	itt	mi
 800cb1c:	232b      	movmi	r3, #43	; 0x2b
 800cb1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb22:	f89a 3000 	ldrb.w	r3, [sl]
 800cb26:	2b2a      	cmp	r3, #42	; 0x2a
 800cb28:	d015      	beq.n	800cb56 <_svfiprintf_r+0xf6>
 800cb2a:	4654      	mov	r4, sl
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	f04f 0c0a 	mov.w	ip, #10
 800cb32:	9a07      	ldr	r2, [sp, #28]
 800cb34:	4621      	mov	r1, r4
 800cb36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb3a:	3b30      	subs	r3, #48	; 0x30
 800cb3c:	2b09      	cmp	r3, #9
 800cb3e:	d94e      	bls.n	800cbde <_svfiprintf_r+0x17e>
 800cb40:	b1b0      	cbz	r0, 800cb70 <_svfiprintf_r+0x110>
 800cb42:	9207      	str	r2, [sp, #28]
 800cb44:	e014      	b.n	800cb70 <_svfiprintf_r+0x110>
 800cb46:	eba0 0308 	sub.w	r3, r0, r8
 800cb4a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	46a2      	mov	sl, r4
 800cb52:	9304      	str	r3, [sp, #16]
 800cb54:	e7d2      	b.n	800cafc <_svfiprintf_r+0x9c>
 800cb56:	9b03      	ldr	r3, [sp, #12]
 800cb58:	1d19      	adds	r1, r3, #4
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	9103      	str	r1, [sp, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	bfbb      	ittet	lt
 800cb62:	425b      	neglt	r3, r3
 800cb64:	f042 0202 	orrlt.w	r2, r2, #2
 800cb68:	9307      	strge	r3, [sp, #28]
 800cb6a:	9307      	strlt	r3, [sp, #28]
 800cb6c:	bfb8      	it	lt
 800cb6e:	9204      	strlt	r2, [sp, #16]
 800cb70:	7823      	ldrb	r3, [r4, #0]
 800cb72:	2b2e      	cmp	r3, #46	; 0x2e
 800cb74:	d10c      	bne.n	800cb90 <_svfiprintf_r+0x130>
 800cb76:	7863      	ldrb	r3, [r4, #1]
 800cb78:	2b2a      	cmp	r3, #42	; 0x2a
 800cb7a:	d135      	bne.n	800cbe8 <_svfiprintf_r+0x188>
 800cb7c:	9b03      	ldr	r3, [sp, #12]
 800cb7e:	3402      	adds	r4, #2
 800cb80:	1d1a      	adds	r2, r3, #4
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	9203      	str	r2, [sp, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	bfb8      	it	lt
 800cb8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cb8e:	9305      	str	r3, [sp, #20]
 800cb90:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cc50 <_svfiprintf_r+0x1f0>
 800cb94:	2203      	movs	r2, #3
 800cb96:	4650      	mov	r0, sl
 800cb98:	7821      	ldrb	r1, [r4, #0]
 800cb9a:	f000 f9f7 	bl	800cf8c <memchr>
 800cb9e:	b140      	cbz	r0, 800cbb2 <_svfiprintf_r+0x152>
 800cba0:	2340      	movs	r3, #64	; 0x40
 800cba2:	eba0 000a 	sub.w	r0, r0, sl
 800cba6:	fa03 f000 	lsl.w	r0, r3, r0
 800cbaa:	9b04      	ldr	r3, [sp, #16]
 800cbac:	3401      	adds	r4, #1
 800cbae:	4303      	orrs	r3, r0
 800cbb0:	9304      	str	r3, [sp, #16]
 800cbb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb6:	2206      	movs	r2, #6
 800cbb8:	4826      	ldr	r0, [pc, #152]	; (800cc54 <_svfiprintf_r+0x1f4>)
 800cbba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbbe:	f000 f9e5 	bl	800cf8c <memchr>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d038      	beq.n	800cc38 <_svfiprintf_r+0x1d8>
 800cbc6:	4b24      	ldr	r3, [pc, #144]	; (800cc58 <_svfiprintf_r+0x1f8>)
 800cbc8:	bb1b      	cbnz	r3, 800cc12 <_svfiprintf_r+0x1b2>
 800cbca:	9b03      	ldr	r3, [sp, #12]
 800cbcc:	3307      	adds	r3, #7
 800cbce:	f023 0307 	bic.w	r3, r3, #7
 800cbd2:	3308      	adds	r3, #8
 800cbd4:	9303      	str	r3, [sp, #12]
 800cbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd8:	4433      	add	r3, r6
 800cbda:	9309      	str	r3, [sp, #36]	; 0x24
 800cbdc:	e767      	b.n	800caae <_svfiprintf_r+0x4e>
 800cbde:	460c      	mov	r4, r1
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbe6:	e7a5      	b.n	800cb34 <_svfiprintf_r+0xd4>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f04f 0c0a 	mov.w	ip, #10
 800cbee:	4619      	mov	r1, r3
 800cbf0:	3401      	adds	r4, #1
 800cbf2:	9305      	str	r3, [sp, #20]
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbfa:	3a30      	subs	r2, #48	; 0x30
 800cbfc:	2a09      	cmp	r2, #9
 800cbfe:	d903      	bls.n	800cc08 <_svfiprintf_r+0x1a8>
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0c5      	beq.n	800cb90 <_svfiprintf_r+0x130>
 800cc04:	9105      	str	r1, [sp, #20]
 800cc06:	e7c3      	b.n	800cb90 <_svfiprintf_r+0x130>
 800cc08:	4604      	mov	r4, r0
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc10:	e7f0      	b.n	800cbf4 <_svfiprintf_r+0x194>
 800cc12:	ab03      	add	r3, sp, #12
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	462a      	mov	r2, r5
 800cc18:	4638      	mov	r0, r7
 800cc1a:	4b10      	ldr	r3, [pc, #64]	; (800cc5c <_svfiprintf_r+0x1fc>)
 800cc1c:	a904      	add	r1, sp, #16
 800cc1e:	f3af 8000 	nop.w
 800cc22:	1c42      	adds	r2, r0, #1
 800cc24:	4606      	mov	r6, r0
 800cc26:	d1d6      	bne.n	800cbd6 <_svfiprintf_r+0x176>
 800cc28:	89ab      	ldrh	r3, [r5, #12]
 800cc2a:	065b      	lsls	r3, r3, #25
 800cc2c:	f53f af2c 	bmi.w	800ca88 <_svfiprintf_r+0x28>
 800cc30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc32:	b01d      	add	sp, #116	; 0x74
 800cc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc38:	ab03      	add	r3, sp, #12
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	462a      	mov	r2, r5
 800cc3e:	4638      	mov	r0, r7
 800cc40:	4b06      	ldr	r3, [pc, #24]	; (800cc5c <_svfiprintf_r+0x1fc>)
 800cc42:	a904      	add	r1, sp, #16
 800cc44:	f000 f87c 	bl	800cd40 <_printf_i>
 800cc48:	e7eb      	b.n	800cc22 <_svfiprintf_r+0x1c2>
 800cc4a:	bf00      	nop
 800cc4c:	0800d74c 	.word	0x0800d74c
 800cc50:	0800d752 	.word	0x0800d752
 800cc54:	0800d756 	.word	0x0800d756
 800cc58:	00000000 	.word	0x00000000
 800cc5c:	0800c9a9 	.word	0x0800c9a9

0800cc60 <_printf_common>:
 800cc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc64:	4616      	mov	r6, r2
 800cc66:	4699      	mov	r9, r3
 800cc68:	688a      	ldr	r2, [r1, #8]
 800cc6a:	690b      	ldr	r3, [r1, #16]
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	bfb8      	it	lt
 800cc72:	4613      	movlt	r3, r2
 800cc74:	6033      	str	r3, [r6, #0]
 800cc76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc7a:	460c      	mov	r4, r1
 800cc7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc80:	b10a      	cbz	r2, 800cc86 <_printf_common+0x26>
 800cc82:	3301      	adds	r3, #1
 800cc84:	6033      	str	r3, [r6, #0]
 800cc86:	6823      	ldr	r3, [r4, #0]
 800cc88:	0699      	lsls	r1, r3, #26
 800cc8a:	bf42      	ittt	mi
 800cc8c:	6833      	ldrmi	r3, [r6, #0]
 800cc8e:	3302      	addmi	r3, #2
 800cc90:	6033      	strmi	r3, [r6, #0]
 800cc92:	6825      	ldr	r5, [r4, #0]
 800cc94:	f015 0506 	ands.w	r5, r5, #6
 800cc98:	d106      	bne.n	800cca8 <_printf_common+0x48>
 800cc9a:	f104 0a19 	add.w	sl, r4, #25
 800cc9e:	68e3      	ldr	r3, [r4, #12]
 800cca0:	6832      	ldr	r2, [r6, #0]
 800cca2:	1a9b      	subs	r3, r3, r2
 800cca4:	42ab      	cmp	r3, r5
 800cca6:	dc28      	bgt.n	800ccfa <_printf_common+0x9a>
 800cca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccac:	1e13      	subs	r3, r2, #0
 800ccae:	6822      	ldr	r2, [r4, #0]
 800ccb0:	bf18      	it	ne
 800ccb2:	2301      	movne	r3, #1
 800ccb4:	0692      	lsls	r2, r2, #26
 800ccb6:	d42d      	bmi.n	800cd14 <_printf_common+0xb4>
 800ccb8:	4649      	mov	r1, r9
 800ccba:	4638      	mov	r0, r7
 800ccbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccc0:	47c0      	blx	r8
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	d020      	beq.n	800cd08 <_printf_common+0xa8>
 800ccc6:	6823      	ldr	r3, [r4, #0]
 800ccc8:	68e5      	ldr	r5, [r4, #12]
 800ccca:	f003 0306 	and.w	r3, r3, #6
 800ccce:	2b04      	cmp	r3, #4
 800ccd0:	bf18      	it	ne
 800ccd2:	2500      	movne	r5, #0
 800ccd4:	6832      	ldr	r2, [r6, #0]
 800ccd6:	f04f 0600 	mov.w	r6, #0
 800ccda:	68a3      	ldr	r3, [r4, #8]
 800ccdc:	bf08      	it	eq
 800ccde:	1aad      	subeq	r5, r5, r2
 800cce0:	6922      	ldr	r2, [r4, #16]
 800cce2:	bf08      	it	eq
 800cce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cce8:	4293      	cmp	r3, r2
 800ccea:	bfc4      	itt	gt
 800ccec:	1a9b      	subgt	r3, r3, r2
 800ccee:	18ed      	addgt	r5, r5, r3
 800ccf0:	341a      	adds	r4, #26
 800ccf2:	42b5      	cmp	r5, r6
 800ccf4:	d11a      	bne.n	800cd2c <_printf_common+0xcc>
 800ccf6:	2000      	movs	r0, #0
 800ccf8:	e008      	b.n	800cd0c <_printf_common+0xac>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	4652      	mov	r2, sl
 800ccfe:	4649      	mov	r1, r9
 800cd00:	4638      	mov	r0, r7
 800cd02:	47c0      	blx	r8
 800cd04:	3001      	adds	r0, #1
 800cd06:	d103      	bne.n	800cd10 <_printf_common+0xb0>
 800cd08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd10:	3501      	adds	r5, #1
 800cd12:	e7c4      	b.n	800cc9e <_printf_common+0x3e>
 800cd14:	2030      	movs	r0, #48	; 0x30
 800cd16:	18e1      	adds	r1, r4, r3
 800cd18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd1c:	1c5a      	adds	r2, r3, #1
 800cd1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd22:	4422      	add	r2, r4
 800cd24:	3302      	adds	r3, #2
 800cd26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd2a:	e7c5      	b.n	800ccb8 <_printf_common+0x58>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	4622      	mov	r2, r4
 800cd30:	4649      	mov	r1, r9
 800cd32:	4638      	mov	r0, r7
 800cd34:	47c0      	blx	r8
 800cd36:	3001      	adds	r0, #1
 800cd38:	d0e6      	beq.n	800cd08 <_printf_common+0xa8>
 800cd3a:	3601      	adds	r6, #1
 800cd3c:	e7d9      	b.n	800ccf2 <_printf_common+0x92>
	...

0800cd40 <_printf_i>:
 800cd40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd44:	7e0f      	ldrb	r7, [r1, #24]
 800cd46:	4691      	mov	r9, r2
 800cd48:	2f78      	cmp	r7, #120	; 0x78
 800cd4a:	4680      	mov	r8, r0
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	469a      	mov	sl, r3
 800cd50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd56:	d807      	bhi.n	800cd68 <_printf_i+0x28>
 800cd58:	2f62      	cmp	r7, #98	; 0x62
 800cd5a:	d80a      	bhi.n	800cd72 <_printf_i+0x32>
 800cd5c:	2f00      	cmp	r7, #0
 800cd5e:	f000 80d9 	beq.w	800cf14 <_printf_i+0x1d4>
 800cd62:	2f58      	cmp	r7, #88	; 0x58
 800cd64:	f000 80a4 	beq.w	800ceb0 <_printf_i+0x170>
 800cd68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd70:	e03a      	b.n	800cde8 <_printf_i+0xa8>
 800cd72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd76:	2b15      	cmp	r3, #21
 800cd78:	d8f6      	bhi.n	800cd68 <_printf_i+0x28>
 800cd7a:	a101      	add	r1, pc, #4	; (adr r1, 800cd80 <_printf_i+0x40>)
 800cd7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd80:	0800cdd9 	.word	0x0800cdd9
 800cd84:	0800cded 	.word	0x0800cded
 800cd88:	0800cd69 	.word	0x0800cd69
 800cd8c:	0800cd69 	.word	0x0800cd69
 800cd90:	0800cd69 	.word	0x0800cd69
 800cd94:	0800cd69 	.word	0x0800cd69
 800cd98:	0800cded 	.word	0x0800cded
 800cd9c:	0800cd69 	.word	0x0800cd69
 800cda0:	0800cd69 	.word	0x0800cd69
 800cda4:	0800cd69 	.word	0x0800cd69
 800cda8:	0800cd69 	.word	0x0800cd69
 800cdac:	0800cefb 	.word	0x0800cefb
 800cdb0:	0800ce1d 	.word	0x0800ce1d
 800cdb4:	0800cedd 	.word	0x0800cedd
 800cdb8:	0800cd69 	.word	0x0800cd69
 800cdbc:	0800cd69 	.word	0x0800cd69
 800cdc0:	0800cf1d 	.word	0x0800cf1d
 800cdc4:	0800cd69 	.word	0x0800cd69
 800cdc8:	0800ce1d 	.word	0x0800ce1d
 800cdcc:	0800cd69 	.word	0x0800cd69
 800cdd0:	0800cd69 	.word	0x0800cd69
 800cdd4:	0800cee5 	.word	0x0800cee5
 800cdd8:	682b      	ldr	r3, [r5, #0]
 800cdda:	1d1a      	adds	r2, r3, #4
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	602a      	str	r2, [r5, #0]
 800cde0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cde4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cde8:	2301      	movs	r3, #1
 800cdea:	e0a4      	b.n	800cf36 <_printf_i+0x1f6>
 800cdec:	6820      	ldr	r0, [r4, #0]
 800cdee:	6829      	ldr	r1, [r5, #0]
 800cdf0:	0606      	lsls	r6, r0, #24
 800cdf2:	f101 0304 	add.w	r3, r1, #4
 800cdf6:	d50a      	bpl.n	800ce0e <_printf_i+0xce>
 800cdf8:	680e      	ldr	r6, [r1, #0]
 800cdfa:	602b      	str	r3, [r5, #0]
 800cdfc:	2e00      	cmp	r6, #0
 800cdfe:	da03      	bge.n	800ce08 <_printf_i+0xc8>
 800ce00:	232d      	movs	r3, #45	; 0x2d
 800ce02:	4276      	negs	r6, r6
 800ce04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce08:	230a      	movs	r3, #10
 800ce0a:	485e      	ldr	r0, [pc, #376]	; (800cf84 <_printf_i+0x244>)
 800ce0c:	e019      	b.n	800ce42 <_printf_i+0x102>
 800ce0e:	680e      	ldr	r6, [r1, #0]
 800ce10:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce14:	602b      	str	r3, [r5, #0]
 800ce16:	bf18      	it	ne
 800ce18:	b236      	sxthne	r6, r6
 800ce1a:	e7ef      	b.n	800cdfc <_printf_i+0xbc>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	6820      	ldr	r0, [r4, #0]
 800ce20:	1d19      	adds	r1, r3, #4
 800ce22:	6029      	str	r1, [r5, #0]
 800ce24:	0601      	lsls	r1, r0, #24
 800ce26:	d501      	bpl.n	800ce2c <_printf_i+0xec>
 800ce28:	681e      	ldr	r6, [r3, #0]
 800ce2a:	e002      	b.n	800ce32 <_printf_i+0xf2>
 800ce2c:	0646      	lsls	r6, r0, #25
 800ce2e:	d5fb      	bpl.n	800ce28 <_printf_i+0xe8>
 800ce30:	881e      	ldrh	r6, [r3, #0]
 800ce32:	2f6f      	cmp	r7, #111	; 0x6f
 800ce34:	bf0c      	ite	eq
 800ce36:	2308      	moveq	r3, #8
 800ce38:	230a      	movne	r3, #10
 800ce3a:	4852      	ldr	r0, [pc, #328]	; (800cf84 <_printf_i+0x244>)
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce42:	6865      	ldr	r5, [r4, #4]
 800ce44:	2d00      	cmp	r5, #0
 800ce46:	bfa8      	it	ge
 800ce48:	6821      	ldrge	r1, [r4, #0]
 800ce4a:	60a5      	str	r5, [r4, #8]
 800ce4c:	bfa4      	itt	ge
 800ce4e:	f021 0104 	bicge.w	r1, r1, #4
 800ce52:	6021      	strge	r1, [r4, #0]
 800ce54:	b90e      	cbnz	r6, 800ce5a <_printf_i+0x11a>
 800ce56:	2d00      	cmp	r5, #0
 800ce58:	d04d      	beq.n	800cef6 <_printf_i+0x1b6>
 800ce5a:	4615      	mov	r5, r2
 800ce5c:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce60:	fb03 6711 	mls	r7, r3, r1, r6
 800ce64:	5dc7      	ldrb	r7, [r0, r7]
 800ce66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce6a:	4637      	mov	r7, r6
 800ce6c:	42bb      	cmp	r3, r7
 800ce6e:	460e      	mov	r6, r1
 800ce70:	d9f4      	bls.n	800ce5c <_printf_i+0x11c>
 800ce72:	2b08      	cmp	r3, #8
 800ce74:	d10b      	bne.n	800ce8e <_printf_i+0x14e>
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	07de      	lsls	r6, r3, #31
 800ce7a:	d508      	bpl.n	800ce8e <_printf_i+0x14e>
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	6861      	ldr	r1, [r4, #4]
 800ce80:	4299      	cmp	r1, r3
 800ce82:	bfde      	ittt	le
 800ce84:	2330      	movle	r3, #48	; 0x30
 800ce86:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce8a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ce8e:	1b52      	subs	r2, r2, r5
 800ce90:	6122      	str	r2, [r4, #16]
 800ce92:	464b      	mov	r3, r9
 800ce94:	4621      	mov	r1, r4
 800ce96:	4640      	mov	r0, r8
 800ce98:	f8cd a000 	str.w	sl, [sp]
 800ce9c:	aa03      	add	r2, sp, #12
 800ce9e:	f7ff fedf 	bl	800cc60 <_printf_common>
 800cea2:	3001      	adds	r0, #1
 800cea4:	d14c      	bne.n	800cf40 <_printf_i+0x200>
 800cea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceaa:	b004      	add	sp, #16
 800ceac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb0:	4834      	ldr	r0, [pc, #208]	; (800cf84 <_printf_i+0x244>)
 800ceb2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ceb6:	6829      	ldr	r1, [r5, #0]
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	f851 6b04 	ldr.w	r6, [r1], #4
 800cebe:	6029      	str	r1, [r5, #0]
 800cec0:	061d      	lsls	r5, r3, #24
 800cec2:	d514      	bpl.n	800ceee <_printf_i+0x1ae>
 800cec4:	07df      	lsls	r7, r3, #31
 800cec6:	bf44      	itt	mi
 800cec8:	f043 0320 	orrmi.w	r3, r3, #32
 800cecc:	6023      	strmi	r3, [r4, #0]
 800cece:	b91e      	cbnz	r6, 800ced8 <_printf_i+0x198>
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	f023 0320 	bic.w	r3, r3, #32
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	2310      	movs	r3, #16
 800ceda:	e7af      	b.n	800ce3c <_printf_i+0xfc>
 800cedc:	6823      	ldr	r3, [r4, #0]
 800cede:	f043 0320 	orr.w	r3, r3, #32
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	2378      	movs	r3, #120	; 0x78
 800cee6:	4828      	ldr	r0, [pc, #160]	; (800cf88 <_printf_i+0x248>)
 800cee8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ceec:	e7e3      	b.n	800ceb6 <_printf_i+0x176>
 800ceee:	0659      	lsls	r1, r3, #25
 800cef0:	bf48      	it	mi
 800cef2:	b2b6      	uxthmi	r6, r6
 800cef4:	e7e6      	b.n	800cec4 <_printf_i+0x184>
 800cef6:	4615      	mov	r5, r2
 800cef8:	e7bb      	b.n	800ce72 <_printf_i+0x132>
 800cefa:	682b      	ldr	r3, [r5, #0]
 800cefc:	6826      	ldr	r6, [r4, #0]
 800cefe:	1d18      	adds	r0, r3, #4
 800cf00:	6961      	ldr	r1, [r4, #20]
 800cf02:	6028      	str	r0, [r5, #0]
 800cf04:	0635      	lsls	r5, r6, #24
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	d501      	bpl.n	800cf0e <_printf_i+0x1ce>
 800cf0a:	6019      	str	r1, [r3, #0]
 800cf0c:	e002      	b.n	800cf14 <_printf_i+0x1d4>
 800cf0e:	0670      	lsls	r0, r6, #25
 800cf10:	d5fb      	bpl.n	800cf0a <_printf_i+0x1ca>
 800cf12:	8019      	strh	r1, [r3, #0]
 800cf14:	2300      	movs	r3, #0
 800cf16:	4615      	mov	r5, r2
 800cf18:	6123      	str	r3, [r4, #16]
 800cf1a:	e7ba      	b.n	800ce92 <_printf_i+0x152>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	2100      	movs	r1, #0
 800cf20:	1d1a      	adds	r2, r3, #4
 800cf22:	602a      	str	r2, [r5, #0]
 800cf24:	681d      	ldr	r5, [r3, #0]
 800cf26:	6862      	ldr	r2, [r4, #4]
 800cf28:	4628      	mov	r0, r5
 800cf2a:	f000 f82f 	bl	800cf8c <memchr>
 800cf2e:	b108      	cbz	r0, 800cf34 <_printf_i+0x1f4>
 800cf30:	1b40      	subs	r0, r0, r5
 800cf32:	6060      	str	r0, [r4, #4]
 800cf34:	6863      	ldr	r3, [r4, #4]
 800cf36:	6123      	str	r3, [r4, #16]
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf3e:	e7a8      	b.n	800ce92 <_printf_i+0x152>
 800cf40:	462a      	mov	r2, r5
 800cf42:	4649      	mov	r1, r9
 800cf44:	4640      	mov	r0, r8
 800cf46:	6923      	ldr	r3, [r4, #16]
 800cf48:	47d0      	blx	sl
 800cf4a:	3001      	adds	r0, #1
 800cf4c:	d0ab      	beq.n	800cea6 <_printf_i+0x166>
 800cf4e:	6823      	ldr	r3, [r4, #0]
 800cf50:	079b      	lsls	r3, r3, #30
 800cf52:	d413      	bmi.n	800cf7c <_printf_i+0x23c>
 800cf54:	68e0      	ldr	r0, [r4, #12]
 800cf56:	9b03      	ldr	r3, [sp, #12]
 800cf58:	4298      	cmp	r0, r3
 800cf5a:	bfb8      	it	lt
 800cf5c:	4618      	movlt	r0, r3
 800cf5e:	e7a4      	b.n	800ceaa <_printf_i+0x16a>
 800cf60:	2301      	movs	r3, #1
 800cf62:	4632      	mov	r2, r6
 800cf64:	4649      	mov	r1, r9
 800cf66:	4640      	mov	r0, r8
 800cf68:	47d0      	blx	sl
 800cf6a:	3001      	adds	r0, #1
 800cf6c:	d09b      	beq.n	800cea6 <_printf_i+0x166>
 800cf6e:	3501      	adds	r5, #1
 800cf70:	68e3      	ldr	r3, [r4, #12]
 800cf72:	9903      	ldr	r1, [sp, #12]
 800cf74:	1a5b      	subs	r3, r3, r1
 800cf76:	42ab      	cmp	r3, r5
 800cf78:	dcf2      	bgt.n	800cf60 <_printf_i+0x220>
 800cf7a:	e7eb      	b.n	800cf54 <_printf_i+0x214>
 800cf7c:	2500      	movs	r5, #0
 800cf7e:	f104 0619 	add.w	r6, r4, #25
 800cf82:	e7f5      	b.n	800cf70 <_printf_i+0x230>
 800cf84:	0800d75d 	.word	0x0800d75d
 800cf88:	0800d76e 	.word	0x0800d76e

0800cf8c <memchr>:
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	b510      	push	{r4, lr}
 800cf90:	b2c9      	uxtb	r1, r1
 800cf92:	4402      	add	r2, r0
 800cf94:	4293      	cmp	r3, r2
 800cf96:	4618      	mov	r0, r3
 800cf98:	d101      	bne.n	800cf9e <memchr+0x12>
 800cf9a:	2000      	movs	r0, #0
 800cf9c:	e003      	b.n	800cfa6 <memchr+0x1a>
 800cf9e:	7804      	ldrb	r4, [r0, #0]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	428c      	cmp	r4, r1
 800cfa4:	d1f6      	bne.n	800cf94 <memchr+0x8>
 800cfa6:	bd10      	pop	{r4, pc}

0800cfa8 <memmove>:
 800cfa8:	4288      	cmp	r0, r1
 800cfaa:	b510      	push	{r4, lr}
 800cfac:	eb01 0402 	add.w	r4, r1, r2
 800cfb0:	d902      	bls.n	800cfb8 <memmove+0x10>
 800cfb2:	4284      	cmp	r4, r0
 800cfb4:	4623      	mov	r3, r4
 800cfb6:	d807      	bhi.n	800cfc8 <memmove+0x20>
 800cfb8:	1e43      	subs	r3, r0, #1
 800cfba:	42a1      	cmp	r1, r4
 800cfbc:	d008      	beq.n	800cfd0 <memmove+0x28>
 800cfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfc6:	e7f8      	b.n	800cfba <memmove+0x12>
 800cfc8:	4601      	mov	r1, r0
 800cfca:	4402      	add	r2, r0
 800cfcc:	428a      	cmp	r2, r1
 800cfce:	d100      	bne.n	800cfd2 <memmove+0x2a>
 800cfd0:	bd10      	pop	{r4, pc}
 800cfd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfda:	e7f7      	b.n	800cfcc <memmove+0x24>

0800cfdc <_realloc_r>:
 800cfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe0:	4680      	mov	r8, r0
 800cfe2:	4614      	mov	r4, r2
 800cfe4:	460e      	mov	r6, r1
 800cfe6:	b921      	cbnz	r1, 800cff2 <_realloc_r+0x16>
 800cfe8:	4611      	mov	r1, r2
 800cfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfee:	f7ff bbcf 	b.w	800c790 <_malloc_r>
 800cff2:	b92a      	cbnz	r2, 800d000 <_realloc_r+0x24>
 800cff4:	f7ff fc90 	bl	800c918 <_free_r>
 800cff8:	4625      	mov	r5, r4
 800cffa:	4628      	mov	r0, r5
 800cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d000:	f000 f81b 	bl	800d03a <_malloc_usable_size_r>
 800d004:	4284      	cmp	r4, r0
 800d006:	4607      	mov	r7, r0
 800d008:	d802      	bhi.n	800d010 <_realloc_r+0x34>
 800d00a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d00e:	d812      	bhi.n	800d036 <_realloc_r+0x5a>
 800d010:	4621      	mov	r1, r4
 800d012:	4640      	mov	r0, r8
 800d014:	f7ff fbbc 	bl	800c790 <_malloc_r>
 800d018:	4605      	mov	r5, r0
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d0ed      	beq.n	800cffa <_realloc_r+0x1e>
 800d01e:	42bc      	cmp	r4, r7
 800d020:	4622      	mov	r2, r4
 800d022:	4631      	mov	r1, r6
 800d024:	bf28      	it	cs
 800d026:	463a      	movcs	r2, r7
 800d028:	f7ff fb7c 	bl	800c724 <memcpy>
 800d02c:	4631      	mov	r1, r6
 800d02e:	4640      	mov	r0, r8
 800d030:	f7ff fc72 	bl	800c918 <_free_r>
 800d034:	e7e1      	b.n	800cffa <_realloc_r+0x1e>
 800d036:	4635      	mov	r5, r6
 800d038:	e7df      	b.n	800cffa <_realloc_r+0x1e>

0800d03a <_malloc_usable_size_r>:
 800d03a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d03e:	1f18      	subs	r0, r3, #4
 800d040:	2b00      	cmp	r3, #0
 800d042:	bfbc      	itt	lt
 800d044:	580b      	ldrlt	r3, [r1, r0]
 800d046:	18c0      	addlt	r0, r0, r3
 800d048:	4770      	bx	lr
	...

0800d04c <_init>:
 800d04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04e:	bf00      	nop
 800d050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d052:	bc08      	pop	{r3}
 800d054:	469e      	mov	lr, r3
 800d056:	4770      	bx	lr

0800d058 <_fini>:
 800d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05a:	bf00      	nop
 800d05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05e:	bc08      	pop	{r3}
 800d060:	469e      	mov	lr, r3
 800d062:	4770      	bx	lr
