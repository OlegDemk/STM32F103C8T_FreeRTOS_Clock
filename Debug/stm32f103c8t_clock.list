
stm32f103c8t_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc50  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800cd60  0800cd60  0001cd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d454  0800d454  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d454  0800d454  0001d454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d45c  0800d45c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d45c  0800d45c  0001d45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d460  0800d460  0001d460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004100  2000007c  0800d4e0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000417c  0800d4e0  0002417c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002008e  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000426c  00000000  00000000  00040133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  000443a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a0  00000000  00000000  00045eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5a0  00000000  00000000  00047850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcf9  00000000  00000000  00061df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a5ce  00000000  00000000  0007fae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a0b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a58  00000000  00000000  0011a108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cd48 	.word	0x0800cd48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	0800cd48 	.word	0x0800cd48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_f2iz>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000710:	d30f      	bcc.n	8000732 <__aeabi_f2iz+0x2a>
 8000712:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000716:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800071a:	d90d      	bls.n	8000738 <__aeabi_f2iz+0x30>
 800071c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000724:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000728:	fa23 f002 	lsr.w	r0, r3, r2
 800072c:	bf18      	it	ne
 800072e:	4240      	negne	r0, r0
 8000730:	4770      	bx	lr
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	4770      	bx	lr
 8000738:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800073c:	d101      	bne.n	8000742 <__aeabi_f2iz+0x3a>
 800073e:	0242      	lsls	r2, r0, #9
 8000740:	d105      	bne.n	800074e <__aeabi_f2iz+0x46>
 8000742:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000746:	bf08      	it	eq
 8000748:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr

08000754 <__aeabi_ldivmod>:
 8000754:	b97b      	cbnz	r3, 8000776 <__aeabi_ldivmod+0x22>
 8000756:	b972      	cbnz	r2, 8000776 <__aeabi_ldivmod+0x22>
 8000758:	2900      	cmp	r1, #0
 800075a:	bfbe      	ittt	lt
 800075c:	2000      	movlt	r0, #0
 800075e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000762:	e006      	blt.n	8000772 <__aeabi_ldivmod+0x1e>
 8000764:	bf08      	it	eq
 8000766:	2800      	cmpeq	r0, #0
 8000768:	bf1c      	itt	ne
 800076a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800076e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000772:	f000 b9a9 	b.w	8000ac8 <__aeabi_idiv0>
 8000776:	f1ad 0c08 	sub.w	ip, sp, #8
 800077a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800077e:	2900      	cmp	r1, #0
 8000780:	db09      	blt.n	8000796 <__aeabi_ldivmod+0x42>
 8000782:	2b00      	cmp	r3, #0
 8000784:	db1a      	blt.n	80007bc <__aeabi_ldivmod+0x68>
 8000786:	f000 f835 	bl	80007f4 <__udivmoddi4>
 800078a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000792:	b004      	add	sp, #16
 8000794:	4770      	bx	lr
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	db1b      	blt.n	80007d8 <__aeabi_ldivmod+0x84>
 80007a0:	f000 f828 	bl	80007f4 <__udivmoddi4>
 80007a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ac:	b004      	add	sp, #16
 80007ae:	4240      	negs	r0, r0
 80007b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b4:	4252      	negs	r2, r2
 80007b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007ba:	4770      	bx	lr
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	f000 f817 	bl	80007f4 <__udivmoddi4>
 80007c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ce:	b004      	add	sp, #16
 80007d0:	4240      	negs	r0, r0
 80007d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d6:	4770      	bx	lr
 80007d8:	4252      	negs	r2, r2
 80007da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007de:	f000 f809 	bl	80007f4 <__udivmoddi4>
 80007e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ea:	b004      	add	sp, #16
 80007ec:	4252      	negs	r2, r2
 80007ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f2:	4770      	bx	lr

080007f4 <__udivmoddi4>:
 80007f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007f8:	9e08      	ldr	r6, [sp, #32]
 80007fa:	460d      	mov	r5, r1
 80007fc:	4604      	mov	r4, r0
 80007fe:	4688      	mov	r8, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14d      	bne.n	80008a0 <__udivmoddi4+0xac>
 8000804:	428a      	cmp	r2, r1
 8000806:	4694      	mov	ip, r2
 8000808:	d968      	bls.n	80008dc <__udivmoddi4+0xe8>
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	b152      	cbz	r2, 8000826 <__udivmoddi4+0x32>
 8000810:	fa01 f302 	lsl.w	r3, r1, r2
 8000814:	f1c2 0120 	rsb	r1, r2, #32
 8000818:	fa20 f101 	lsr.w	r1, r0, r1
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	ea41 0803 	orr.w	r8, r1, r3
 8000824:	4094      	lsls	r4, r2
 8000826:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800082a:	fbb8 f7f1 	udiv	r7, r8, r1
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	fb01 8817 	mls	r8, r1, r7, r8
 8000836:	fb07 f00e 	mul.w	r0, r7, lr
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000840:	4298      	cmp	r0, r3
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x66>
 8000844:	eb1c 0303 	adds.w	r3, ip, r3
 8000848:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 800084c:	f080 811e 	bcs.w	8000a8c <__udivmoddi4+0x298>
 8000850:	4298      	cmp	r0, r3
 8000852:	f240 811b 	bls.w	8000a8c <__udivmoddi4+0x298>
 8000856:	3f02      	subs	r7, #2
 8000858:	4463      	add	r3, ip
 800085a:	1a1b      	subs	r3, r3, r0
 800085c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000860:	fb01 3310 	mls	r3, r1, r0, r3
 8000864:	fb00 fe0e 	mul.w	lr, r0, lr
 8000868:	b2a4      	uxth	r4, r4
 800086a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086e:	45a6      	cmp	lr, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x94>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800087a:	f080 8109 	bcs.w	8000a90 <__udivmoddi4+0x29c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f240 8106 	bls.w	8000a90 <__udivmoddi4+0x29c>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	2100      	movs	r1, #0
 800088a:	eba4 040e 	sub.w	r4, r4, lr
 800088e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000892:	b11e      	cbz	r6, 800089c <__udivmoddi4+0xa8>
 8000894:	2300      	movs	r3, #0
 8000896:	40d4      	lsrs	r4, r2
 8000898:	e9c6 4300 	strd	r4, r3, [r6]
 800089c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a0:	428b      	cmp	r3, r1
 80008a2:	d908      	bls.n	80008b6 <__udivmoddi4+0xc2>
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	f000 80ee 	beq.w	8000a86 <__udivmoddi4+0x292>
 80008aa:	2100      	movs	r1, #0
 80008ac:	e9c6 0500 	strd	r0, r5, [r6]
 80008b0:	4608      	mov	r0, r1
 80008b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b6:	fab3 f183 	clz	r1, r3
 80008ba:	2900      	cmp	r1, #0
 80008bc:	d14a      	bne.n	8000954 <__udivmoddi4+0x160>
 80008be:	42ab      	cmp	r3, r5
 80008c0:	d302      	bcc.n	80008c8 <__udivmoddi4+0xd4>
 80008c2:	4282      	cmp	r2, r0
 80008c4:	f200 80fc 	bhi.w	8000ac0 <__udivmoddi4+0x2cc>
 80008c8:	1a84      	subs	r4, r0, r2
 80008ca:	eb65 0303 	sbc.w	r3, r5, r3
 80008ce:	2001      	movs	r0, #1
 80008d0:	4698      	mov	r8, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d0e2      	beq.n	800089c <__udivmoddi4+0xa8>
 80008d6:	e9c6 4800 	strd	r4, r8, [r6]
 80008da:	e7df      	b.n	800089c <__udivmoddi4+0xa8>
 80008dc:	b902      	cbnz	r2, 80008e0 <__udivmoddi4+0xec>
 80008de:	deff      	udf	#255	; 0xff
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	f040 8091 	bne.w	8000a0c <__udivmoddi4+0x218>
 80008ea:	eba1 000c 	sub.w	r0, r1, ip
 80008ee:	2101      	movs	r1, #1
 80008f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f4:	fa1f fe8c 	uxth.w	lr, ip
 80008f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80008fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000900:	0c25      	lsrs	r5, r4, #16
 8000902:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000906:	fb0e f003 	mul.w	r0, lr, r3
 800090a:	42a8      	cmp	r0, r5
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x12c>
 800090e:	eb1c 0505 	adds.w	r5, ip, r5
 8000912:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x12a>
 8000918:	42a8      	cmp	r0, r5
 800091a:	f200 80ce 	bhi.w	8000aba <__udivmoddi4+0x2c6>
 800091e:	4643      	mov	r3, r8
 8000920:	1a2d      	subs	r5, r5, r0
 8000922:	fbb5 f0f7 	udiv	r0, r5, r7
 8000926:	fb07 5510 	mls	r5, r7, r0, r5
 800092a:	fb0e fe00 	mul.w	lr, lr, r0
 800092e:	b2a4      	uxth	r4, r4
 8000930:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000934:	45a6      	cmp	lr, r4
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x156>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x154>
 8000942:	45a6      	cmp	lr, r4
 8000944:	f200 80b6 	bhi.w	8000ab4 <__udivmoddi4+0x2c0>
 8000948:	4628      	mov	r0, r5
 800094a:	eba4 040e 	sub.w	r4, r4, lr
 800094e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000952:	e79e      	b.n	8000892 <__udivmoddi4+0x9e>
 8000954:	f1c1 0720 	rsb	r7, r1, #32
 8000958:	408b      	lsls	r3, r1
 800095a:	fa22 fc07 	lsr.w	ip, r2, r7
 800095e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000962:	fa25 fa07 	lsr.w	sl, r5, r7
 8000966:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096a:	fbba f8f9 	udiv	r8, sl, r9
 800096e:	fa20 f307 	lsr.w	r3, r0, r7
 8000972:	fb09 aa18 	mls	sl, r9, r8, sl
 8000976:	408d      	lsls	r5, r1
 8000978:	fa1f fe8c 	uxth.w	lr, ip
 800097c:	431d      	orrs	r5, r3
 800097e:	fa00 f301 	lsl.w	r3, r0, r1
 8000982:	fb08 f00e 	mul.w	r0, r8, lr
 8000986:	0c2c      	lsrs	r4, r5, #16
 8000988:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800098c:	42a0      	cmp	r0, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	d90b      	bls.n	80009ac <__udivmoddi4+0x1b8>
 8000994:	eb1c 0404 	adds.w	r4, ip, r4
 8000998:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800099c:	f080 8088 	bcs.w	8000ab0 <__udivmoddi4+0x2bc>
 80009a0:	42a0      	cmp	r0, r4
 80009a2:	f240 8085 	bls.w	8000ab0 <__udivmoddi4+0x2bc>
 80009a6:	f1a8 0802 	sub.w	r8, r8, #2
 80009aa:	4464      	add	r4, ip
 80009ac:	1a24      	subs	r4, r4, r0
 80009ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80009b2:	fb09 4410 	mls	r4, r9, r0, r4
 80009b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c0:	45a6      	cmp	lr, r4
 80009c2:	d908      	bls.n	80009d6 <__udivmoddi4+0x1e2>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80009cc:	d26c      	bcs.n	8000aa8 <__udivmoddi4+0x2b4>
 80009ce:	45a6      	cmp	lr, r4
 80009d0:	d96a      	bls.n	8000aa8 <__udivmoddi4+0x2b4>
 80009d2:	3802      	subs	r0, #2
 80009d4:	4464      	add	r4, ip
 80009d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009da:	fba0 9502 	umull	r9, r5, r0, r2
 80009de:	eba4 040e 	sub.w	r4, r4, lr
 80009e2:	42ac      	cmp	r4, r5
 80009e4:	46c8      	mov	r8, r9
 80009e6:	46ae      	mov	lr, r5
 80009e8:	d356      	bcc.n	8000a98 <__udivmoddi4+0x2a4>
 80009ea:	d053      	beq.n	8000a94 <__udivmoddi4+0x2a0>
 80009ec:	2e00      	cmp	r6, #0
 80009ee:	d069      	beq.n	8000ac4 <__udivmoddi4+0x2d0>
 80009f0:	ebb3 0208 	subs.w	r2, r3, r8
 80009f4:	eb64 040e 	sbc.w	r4, r4, lr
 80009f8:	fa22 f301 	lsr.w	r3, r2, r1
 80009fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000a00:	431f      	orrs	r7, r3
 8000a02:	40cc      	lsrs	r4, r1
 8000a04:	e9c6 7400 	strd	r7, r4, [r6]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	e747      	b.n	800089c <__udivmoddi4+0xa8>
 8000a0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a10:	f1c2 0120 	rsb	r1, r2, #32
 8000a14:	fa25 f301 	lsr.w	r3, r5, r1
 8000a18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000a20:	4095      	lsls	r5, r2
 8000a22:	430d      	orrs	r5, r1
 8000a24:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a28:	fb07 3311 	mls	r3, r7, r1, r3
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	0c28      	lsrs	r0, r5, #16
 8000a32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a36:	fb01 f30e 	mul.w	r3, r1, lr
 8000a3a:	4283      	cmp	r3, r0
 8000a3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x260>
 8000a42:	eb1c 0000 	adds.w	r0, ip, r0
 8000a46:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000a4a:	d22f      	bcs.n	8000aac <__udivmoddi4+0x2b8>
 8000a4c:	4283      	cmp	r3, r0
 8000a4e:	d92d      	bls.n	8000aac <__udivmoddi4+0x2b8>
 8000a50:	3902      	subs	r1, #2
 8000a52:	4460      	add	r0, ip
 8000a54:	1ac0      	subs	r0, r0, r3
 8000a56:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a5a:	fb07 0013 	mls	r0, r7, r3, r0
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a64:	fb03 f00e 	mul.w	r0, r3, lr
 8000a68:	42a8      	cmp	r0, r5
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x28a>
 8000a6c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a70:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a74:	d216      	bcs.n	8000aa4 <__udivmoddi4+0x2b0>
 8000a76:	42a8      	cmp	r0, r5
 8000a78:	d914      	bls.n	8000aa4 <__udivmoddi4+0x2b0>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4465      	add	r5, ip
 8000a7e:	1a28      	subs	r0, r5, r0
 8000a80:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a84:	e738      	b.n	80008f8 <__udivmoddi4+0x104>
 8000a86:	4631      	mov	r1, r6
 8000a88:	4630      	mov	r0, r6
 8000a8a:	e707      	b.n	800089c <__udivmoddi4+0xa8>
 8000a8c:	462f      	mov	r7, r5
 8000a8e:	e6e4      	b.n	800085a <__udivmoddi4+0x66>
 8000a90:	4618      	mov	r0, r3
 8000a92:	e6f9      	b.n	8000888 <__udivmoddi4+0x94>
 8000a94:	454b      	cmp	r3, r9
 8000a96:	d2a9      	bcs.n	80009ec <__udivmoddi4+0x1f8>
 8000a98:	ebb9 0802 	subs.w	r8, r9, r2
 8000a9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e7a3      	b.n	80009ec <__udivmoddi4+0x1f8>
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	e7ea      	b.n	8000a7e <__udivmoddi4+0x28a>
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	e794      	b.n	80009d6 <__udivmoddi4+0x1e2>
 8000aac:	4641      	mov	r1, r8
 8000aae:	e7d1      	b.n	8000a54 <__udivmoddi4+0x260>
 8000ab0:	46d0      	mov	r8, sl
 8000ab2:	e77b      	b.n	80009ac <__udivmoddi4+0x1b8>
 8000ab4:	4464      	add	r4, ip
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	e747      	b.n	800094a <__udivmoddi4+0x156>
 8000aba:	3b02      	subs	r3, #2
 8000abc:	4465      	add	r5, ip
 8000abe:	e72f      	b.n	8000920 <__udivmoddi4+0x12c>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e706      	b.n	80008d2 <__udivmoddi4+0xde>
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e6e9      	b.n	800089c <__udivmoddi4+0xa8>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000b00:	887a      	ldrh	r2, [r7, #2]
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fbe4 	bl	80002d4 <__aeabi_i2f>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fdcf 	bl	80006b8 <__aeabi_fcmplt>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000b20:	2301      	movs	r3, #1
 8000b22:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8000b2a:	883a      	ldrh	r2, [r7, #0]
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fbcf 	bl	80002d4 <__aeabi_i2f>
 8000b36:	4603      	mov	r3, r0
 8000b38:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000b3a:	f04f 0100 	mov.w	r1, #0
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff fdba 	bl	80006b8 <__aeabi_fcmplt>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000b4e:	7cfb      	ldrb	r3, [r7, #19]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d104      	bne.n	8000b5e <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8000b54:	887a      	ldrh	r2, [r7, #2]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	82fb      	strh	r3, [r7, #22]
 8000b5c:	e003      	b.n	8000b66 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8000b66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b68:	8afa      	ldrh	r2, [r7, #22]
 8000b6a:	88b9      	ldrh	r1, [r7, #4]
 8000b6c:	88f8      	ldrh	r0, [r7, #6]
 8000b6e:	f000 fd35 	bl	80015dc <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8000b72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b74:	8afa      	ldrh	r2, [r7, #22]
 8000b76:	8839      	ldrh	r1, [r7, #0]
 8000b78:	88f8      	ldrh	r0, [r7, #6]
 8000b7a:	f000 fd2f 	bl	80015dc <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000b7e:	7cbb      	ldrb	r3, [r7, #18]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8000b84:	883a      	ldrh	r2, [r7, #0]
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	82bb      	strh	r3, [r7, #20]
 8000b8c:	e003      	b.n	8000b96 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8000b8e:	88ba      	ldrh	r2, [r7, #4]
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8000b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b98:	8aba      	ldrh	r2, [r7, #20]
 8000b9a:	88b9      	ldrh	r1, [r7, #4]
 8000b9c:	88f8      	ldrh	r0, [r7, #6]
 8000b9e:	f000 fd61 	bl	8001664 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8000ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ba4:	8aba      	ldrh	r2, [r7, #20]
 8000ba6:	88b9      	ldrh	r1, [r7, #4]
 8000ba8:	8878      	ldrh	r0, [r7, #2]
 8000baa:	f000 fd5b 	bl	8001664 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8000bae:	8afb      	ldrh	r3, [r7, #22]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8000bb4:	8abb      	ldrh	r3, [r7, #20]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d005      	beq.n	8000bc6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8000bba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000bbc:	8839      	ldrh	r1, [r7, #0]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fbd3 	bl	800136c <ILI9341_Draw_Pixel>
	}
	
}
 8000bc6:	bf00      	nop
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}
	...

08000bd0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4623      	mov	r3, r4
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	4603      	mov	r3, r0
 8000be4:	71bb      	strb	r3, [r7, #6]
 8000be6:	460b      	mov	r3, r1
 8000be8:	717b      	strb	r3, [r7, #5]
 8000bea:	4613      	mov	r3, r2
 8000bec:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	2b1f      	cmp	r3, #31
 8000bf6:	d802      	bhi.n	8000bfe <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	e002      	b.n	8000c04 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	3b20      	subs	r3, #32
 8000c02:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	753b      	strb	r3, [r7, #20]
 8000c08:	e012      	b.n	8000c30 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000c0a:	7dfa      	ldrb	r2, [r7, #23]
 8000c0c:	7d38      	ldrb	r0, [r7, #20]
 8000c0e:	7d39      	ldrb	r1, [r7, #20]
 8000c10:	4c3b      	ldr	r4, [pc, #236]	; (8000d00 <ILI9341_Draw_Char+0x130>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4423      	add	r3, r4
 8000c1c:	4403      	add	r3, r0
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	f101 0318 	add.w	r3, r1, #24
 8000c24:	443b      	add	r3, r7
 8000c26:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000c2a:	7d3b      	ldrb	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	753b      	strb	r3, [r7, #20]
 8000c30:	7d3b      	ldrb	r3, [r7, #20]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d9e9      	bls.n	8000c0a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	b298      	uxth	r0, r3
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c40:	461a      	mov	r2, r3
 8000c42:	0052      	lsls	r2, r2, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	b29c      	uxth	r4, r3
 8000c50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4623      	mov	r3, r4
 8000c56:	f000 fc65 	bl	8001524 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	757b      	strb	r3, [r7, #21]
 8000c5e:	e047      	b.n	8000cf0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	75bb      	strb	r3, [r7, #22]
 8000c64:	e03e      	b.n	8000ce4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8000c66:	7d7b      	ldrb	r3, [r7, #21]
 8000c68:	3318      	adds	r3, #24
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c70:	461a      	mov	r2, r3
 8000c72:	7dbb      	ldrb	r3, [r7, #22]
 8000c74:	fa42 f303 	asr.w	r3, r2, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d02e      	beq.n	8000cde <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d110      	bne.n	8000ca8 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	7d7b      	ldrb	r3, [r7, #21]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b298      	uxth	r0, r3
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	7dbb      	ldrb	r3, [r7, #22]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f000 fb63 	bl	800136c <ILI9341_Draw_Pixel>
 8000ca6:	e01a      	b.n	8000cde <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	7d7b      	ldrb	r3, [r7, #21]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000cb2:	fb01 f303 	mul.w	r3, r1, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	b298      	uxth	r0, r3
 8000cbc:	797b      	ldrb	r3, [r7, #5]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	7dbb      	ldrb	r3, [r7, #22]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000cc6:	fb01 f303 	mul.w	r3, r1, r3
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4413      	add	r3, r2
 8000cce:	b299      	uxth	r1, r3
 8000cd0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000cd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4623      	mov	r3, r4
 8000cda:	f000 fc23 	bl	8001524 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000cde:	7dbb      	ldrb	r3, [r7, #22]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	75bb      	strb	r3, [r7, #22]
 8000ce4:	7dbb      	ldrb	r3, [r7, #22]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d9bd      	bls.n	8000c66 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000cea:	7d7b      	ldrb	r3, [r7, #21]
 8000cec:	3301      	adds	r3, #1
 8000cee:	757b      	strb	r3, [r7, #21]
 8000cf0:	7d7b      	ldrb	r3, [r7, #21]
 8000cf2:	2b05      	cmp	r3, #5
 8000cf4:	d9b4      	bls.n	8000c60 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	0800cfbc 	.word	0x0800cfbc

08000d04 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	4611      	mov	r1, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	70fb      	strb	r3, [r7, #3]
 8000d16:	460b      	mov	r3, r1
 8000d18:	70bb      	strb	r3, [r7, #2]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000d1e:	e017      	b.n	8000d50 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	7818      	ldrb	r0, [r3, #0]
 8000d28:	883c      	ldrh	r4, [r7, #0]
 8000d2a:	78ba      	ldrb	r2, [r7, #2]
 8000d2c:	78f9      	ldrb	r1, [r7, #3]
 8000d2e:	8bbb      	ldrh	r3, [r7, #28]
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	8b3b      	ldrh	r3, [r7, #24]
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	4623      	mov	r3, r4
 8000d38:	f7ff ff4a 	bl	8000bd0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000d3c:	8b3b      	ldrh	r3, [r7, #24]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	0052      	lsls	r2, r2, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e3      	bne.n	8000d20 <ILI9341_Draw_Text+0x1c>
    }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd90      	pop	{r4, r7, pc}
	...

08000d64 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
//MX_SPI1_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <ILI9341_SPI_Init+0x14>)
 8000d70:	f003 fd15 	bl	800479e <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(&hspi1, &SPI_Data, 1, 1);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <ILI9341_SPI_Send+0x20>)
 8000d8e:	f005 fecb 	bl	8006b28 <HAL_SPI_Transmit>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200004e8 	.word	0x200004e8

08000da0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <ILI9341_Write_Command+0x40>)
 8000db2:	f003 fcf4 	bl	800479e <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <ILI9341_Write_Command+0x44>)
 8000dbe:	f003 fcee 	bl	800479e <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffd9 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <ILI9341_Write_Command+0x40>)
 8000dd2:	f003 fce4 	bl	800479e <HAL_GPIO_WritePin>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40010800 	.word	0x40010800

08000de8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <ILI9341_Write_Data+0x40>)
 8000dfa:	f003 fcd0 	bl	800479e <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <ILI9341_Write_Data+0x44>)
 8000e06:	f003 fcca 	bl	800479e <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffb5 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <ILI9341_Write_Data+0x44>)
 8000e1a:	f003 fcc0 	bl	800479e <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000e4e:	202a      	movs	r0, #42	; 0x2a
 8000e50:	f7ff ffa6 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffc3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffbe 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ffb7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffb2 	bl	8000de8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000e84:	202b      	movs	r0, #43	; 0x2b
 8000e86:	f7ff ff8b 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffa8 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffa3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000ea2:	883b      	ldrh	r3, [r7, #0]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff9c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000eb0:	883b      	ldrh	r3, [r7, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff97 	bl	8000de8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000eba:	202c      	movs	r0, #44	; 0x2c
 8000ebc:	f7ff ff70 	bl	8000da0 <ILI9341_Write_Command>
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <ILI9341_Reset+0x38>)
 8000ed4:	f003 fc63 	bl	800479e <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000ed8:	20c8      	movs	r0, #200	; 0xc8
 8000eda:	f003 f911 	bl	8004100 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <ILI9341_Reset+0x3c>)
 8000ee6:	f003 fc5a 	bl	800479e <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000eea:	20c8      	movs	r0, #200	; 0xc8
 8000eec:	f003 f908 	bl	8004100 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	4802      	ldr	r0, [pc, #8]	; (8000f00 <ILI9341_Reset+0x38>)
 8000ef8:	f003 fc51 	bl	800479e <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00

08000f08 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	f7ff ff42 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f003 f8ef 	bl	8004100 <HAL_Delay>
	
switch(screen_rotation) 
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d837      	bhi.n	8000f98 <ILI9341_Set_Rotation+0x90>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <ILI9341_Set_Rotation+0x28>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f41 	.word	0x08000f41
 8000f34:	08000f57 	.word	0x08000f57
 8000f38:	08000f6d 	.word	0x08000f6d
 8000f3c:	08000f83 	.word	0x08000f83
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000f40:	2048      	movs	r0, #72	; 0x48
 8000f42:	f7ff ff51 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f48:	22f0      	movs	r2, #240	; 0xf0
 8000f4a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f52:	801a      	strh	r2, [r3, #0]
			break;
 8000f54:	e021      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000f56:	2028      	movs	r0, #40	; 0x28
 8000f58:	f7ff ff46 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f62:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f66:	22f0      	movs	r2, #240	; 0xf0
 8000f68:	801a      	strh	r2, [r3, #0]
			break;
 8000f6a:	e016      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000f6c:	2088      	movs	r0, #136	; 0x88
 8000f6e:	f7ff ff3b 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f74:	22f0      	movs	r2, #240	; 0xf0
 8000f76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f7e:	801a      	strh	r2, [r3, #0]
			break;
 8000f80:	e00b      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000f82:	20e8      	movs	r0, #232	; 0xe8
 8000f84:	f7ff ff30 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f8e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f92:	22f0      	movs	r2, #240	; 0xf0
 8000f94:	801a      	strh	r2, [r3, #0]
			break;
 8000f96:	e000      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000f98:	bf00      	nop
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000002 	.word	0x20000002
 8000fa8:	20000000 	.word	0x20000000

08000fac <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <ILI9341_Enable+0x14>)
 8000fb8:	f003 fbf1 	bl	800479e <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000fc8:	f7ff fff0 	bl	8000fac <ILI9341_Enable>
ILI9341_SPI_Init();
 8000fcc:	f7ff feca 	bl	8000d64 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000fd0:	f7ff ff7a 	bl	8000ec8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fee3 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f003 f88f 	bl	8004100 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000fe2:	20cb      	movs	r0, #203	; 0xcb
 8000fe4:	f7ff fedc 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000fe8:	2039      	movs	r0, #57	; 0x39
 8000fea:	f7ff fefd 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000fee:	202c      	movs	r0, #44	; 0x2c
 8000ff0:	f7ff fefa 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fef7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000ffa:	2034      	movs	r0, #52	; 0x34
 8000ffc:	f7ff fef4 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fef1 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001006:	20cf      	movs	r0, #207	; 0xcf
 8001008:	f7ff feca 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff feeb 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001012:	20c1      	movs	r0, #193	; 0xc1
 8001014:	f7ff fee8 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001018:	2030      	movs	r0, #48	; 0x30
 800101a:	f7ff fee5 	bl	8000de8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800101e:	20e8      	movs	r0, #232	; 0xe8
 8001020:	f7ff febe 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001024:	2085      	movs	r0, #133	; 0x85
 8001026:	f7ff fedf 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fedc 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001030:	2078      	movs	r0, #120	; 0x78
 8001032:	f7ff fed9 	bl	8000de8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001036:	20ea      	movs	r0, #234	; 0xea
 8001038:	f7ff feb2 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fed3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fed0 	bl	8000de8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001048:	20ed      	movs	r0, #237	; 0xed
 800104a:	f7ff fea9 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f7ff feca 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff fec7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800105a:	2012      	movs	r0, #18
 800105c:	f7ff fec4 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001060:	2081      	movs	r0, #129	; 0x81
 8001062:	f7ff fec1 	bl	8000de8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001066:	20f7      	movs	r0, #247	; 0xf7
 8001068:	f7ff fe9a 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800106c:	2020      	movs	r0, #32
 800106e:	f7ff febb 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001072:	20c0      	movs	r0, #192	; 0xc0
 8001074:	f7ff fe94 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001078:	2023      	movs	r0, #35	; 0x23
 800107a:	f7ff feb5 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800107e:	20c1      	movs	r0, #193	; 0xc1
 8001080:	f7ff fe8e 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001084:	2010      	movs	r0, #16
 8001086:	f7ff feaf 	bl	8000de8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800108a:	20c5      	movs	r0, #197	; 0xc5
 800108c:	f7ff fe88 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001090:	203e      	movs	r0, #62	; 0x3e
 8001092:	f7ff fea9 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	f7ff fea6 	bl	8000de8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800109c:	20c7      	movs	r0, #199	; 0xc7
 800109e:	f7ff fe7f 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80010a2:	2086      	movs	r0, #134	; 0x86
 80010a4:	f7ff fea0 	bl	8000de8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80010a8:	2036      	movs	r0, #54	; 0x36
 80010aa:	f7ff fe79 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80010ae:	2048      	movs	r0, #72	; 0x48
 80010b0:	f7ff fe9a 	bl	8000de8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80010b4:	203a      	movs	r0, #58	; 0x3a
 80010b6:	f7ff fe73 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80010ba:	2055      	movs	r0, #85	; 0x55
 80010bc:	f7ff fe94 	bl	8000de8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80010c0:	20b1      	movs	r0, #177	; 0xb1
 80010c2:	f7ff fe6d 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fe8e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80010cc:	2018      	movs	r0, #24
 80010ce:	f7ff fe8b 	bl	8000de8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80010d2:	20b6      	movs	r0, #182	; 0xb6
 80010d4:	f7ff fe64 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80010d8:	2008      	movs	r0, #8
 80010da:	f7ff fe85 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80010de:	2082      	movs	r0, #130	; 0x82
 80010e0:	f7ff fe82 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80010e4:	2027      	movs	r0, #39	; 0x27
 80010e6:	f7ff fe7f 	bl	8000de8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80010ea:	20f2      	movs	r0, #242	; 0xf2
 80010ec:	f7ff fe58 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fe79 	bl	8000de8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80010f6:	2026      	movs	r0, #38	; 0x26
 80010f8:	f7ff fe52 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff fe73 	bl	8000de8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001102:	20e0      	movs	r0, #224	; 0xe0
 8001104:	f7ff fe4c 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001108:	200f      	movs	r0, #15
 800110a:	f7ff fe6d 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800110e:	2031      	movs	r0, #49	; 0x31
 8001110:	f7ff fe6a 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001114:	202b      	movs	r0, #43	; 0x2b
 8001116:	f7ff fe67 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800111a:	200c      	movs	r0, #12
 800111c:	f7ff fe64 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001120:	200e      	movs	r0, #14
 8001122:	f7ff fe61 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001126:	2008      	movs	r0, #8
 8001128:	f7ff fe5e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800112c:	204e      	movs	r0, #78	; 0x4e
 800112e:	f7ff fe5b 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001132:	20f1      	movs	r0, #241	; 0xf1
 8001134:	f7ff fe58 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001138:	2037      	movs	r0, #55	; 0x37
 800113a:	f7ff fe55 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800113e:	2007      	movs	r0, #7
 8001140:	f7ff fe52 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001144:	2010      	movs	r0, #16
 8001146:	f7ff fe4f 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800114a:	2003      	movs	r0, #3
 800114c:	f7ff fe4c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001150:	200e      	movs	r0, #14
 8001152:	f7ff fe49 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001156:	2009      	movs	r0, #9
 8001158:	f7ff fe46 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fe43 	bl	8000de8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001162:	20e1      	movs	r0, #225	; 0xe1
 8001164:	f7ff fe1c 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fe3d 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800116e:	200e      	movs	r0, #14
 8001170:	f7ff fe3a 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001174:	2014      	movs	r0, #20
 8001176:	f7ff fe37 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800117a:	2003      	movs	r0, #3
 800117c:	f7ff fe34 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001180:	2011      	movs	r0, #17
 8001182:	f7ff fe31 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001186:	2007      	movs	r0, #7
 8001188:	f7ff fe2e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800118c:	2031      	movs	r0, #49	; 0x31
 800118e:	f7ff fe2b 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001192:	20c1      	movs	r0, #193	; 0xc1
 8001194:	f7ff fe28 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001198:	2048      	movs	r0, #72	; 0x48
 800119a:	f7ff fe25 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800119e:	2008      	movs	r0, #8
 80011a0:	f7ff fe22 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80011a4:	200f      	movs	r0, #15
 80011a6:	f7ff fe1f 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80011aa:	200c      	movs	r0, #12
 80011ac:	f7ff fe1c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80011b0:	2031      	movs	r0, #49	; 0x31
 80011b2:	f7ff fe19 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80011b6:	2036      	movs	r0, #54	; 0x36
 80011b8:	f7ff fe16 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80011bc:	200f      	movs	r0, #15
 80011be:	f7ff fe13 	bl	8000de8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80011c2:	2011      	movs	r0, #17
 80011c4:	f7ff fdec 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(120);
 80011c8:	2078      	movs	r0, #120	; 0x78
 80011ca:	f002 ff99 	bl	8004100 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80011ce:	2029      	movs	r0, #41	; 0x29
 80011d0:	f7ff fde6 	bl	8000da0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff fe97 	bl	8000f08 <ILI9341_Set_Rotation>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80011e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011e4:	b08d      	sub	sp, #52	; 0x34
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	6039      	str	r1, [r7, #0]
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	466b      	mov	r3, sp
 80011f0:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011fe:	d202      	bcs.n	8001206 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	e002      	b.n	800120c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001206:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001212:	4840      	ldr	r0, [pc, #256]	; (8001314 <ILI9341_Draw_Colour_Burst+0x134>)
 8001214:	f003 fac3 	bl	800479e <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121e:	483e      	ldr	r0, [pc, #248]	; (8001318 <ILI9341_Draw_Colour_Burst+0x138>)
 8001220:	f003 fabd 	bl	800479e <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	b29b      	uxth	r3, r3
 800122a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800122e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001230:	460b      	mov	r3, r1
 8001232:	3b01      	subs	r3, #1
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	2300      	movs	r3, #0
 8001238:	4688      	mov	r8, r1
 800123a:	4699      	mov	r9, r3
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001248:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800124c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001250:	2300      	movs	r3, #0
 8001252:	460c      	mov	r4, r1
 8001254:	461d      	mov	r5, r3
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	00eb      	lsls	r3, r5, #3
 8001260:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001264:	00e2      	lsls	r2, r4, #3
 8001266:	1dcb      	adds	r3, r1, #7
 8001268:	08db      	lsrs	r3, r3, #3
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	ebad 0d03 	sub.w	sp, sp, r3
 8001270:	466b      	mov	r3, sp
 8001272:	3300      	adds	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
 800127a:	e00e      	b.n	800129a <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001280:	4413      	add	r3, r2
 8001282:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001286:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	3301      	adds	r3, #1
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	b2d1      	uxtb	r1, r2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	3302      	adds	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
 800129a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3ec      	bcc.n	800127c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80012ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012bc:	fb01 f202 	mul.w	r2, r1, r2
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d010      	beq.n	80012ec <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ce:	e009      	b.n	80012e4 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	230a      	movs	r3, #10
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	4810      	ldr	r0, [pc, #64]	; (800131c <ILI9341_Draw_Colour_Burst+0x13c>)
 80012da:	f005 fc25 	bl	8006b28 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e0:	3301      	adds	r3, #1
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3f1      	bcc.n	80012d0 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	230a      	movs	r3, #10
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <ILI9341_Draw_Colour_Burst+0x13c>)
 80012f6:	f005 fc17 	bl	8006b28 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <ILI9341_Draw_Colour_Burst+0x138>)
 8001302:	f003 fa4c 	bl	800479e <HAL_GPIO_WritePin>
 8001306:	46b5      	mov	sp, r6
}
 8001308:	bf00      	nop
 800130a:	3734      	adds	r7, #52	; 0x34
 800130c:	46bd      	mov	sp, r7
 800130e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001312:	bf00      	nop
 8001314:	40010800 	.word	0x40010800
 8001318:	40010c00 	.word	0x40010c00
 800131c:	200004e8 	.word	0x200004e8

08001320 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <ILI9341_Fill_Screen+0x44>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <ILI9341_Fill_Screen+0x48>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fd79 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <ILI9341_Fill_Screen+0x44>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <ILI9341_Fill_Screen+0x48>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	461a      	mov	r2, r3
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff42 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000002 	.word	0x20000002
 8001368:	20000000 	.word	0x20000000

0800136c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	460b      	mov	r3, r1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800137e:	4b64      	ldr	r3, [pc, #400]	; (8001510 <ILI9341_Draw_Pixel+0x1a4>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	429a      	cmp	r2, r3
 8001388:	f080 80be 	bcs.w	8001508 <ILI9341_Draw_Pixel+0x19c>
 800138c:	4b61      	ldr	r3, [pc, #388]	; (8001514 <ILI9341_Draw_Pixel+0x1a8>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	88ba      	ldrh	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	f080 80b7 	bcs.w	8001508 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a0:	485d      	ldr	r0, [pc, #372]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 80013a2:	f003 f9fc 	bl	800479e <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ac:	485b      	ldr	r0, [pc, #364]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80013ae:	f003 f9f6 	bl	800479e <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80013b2:	202a      	movs	r0, #42	; 0x2a
 80013b4:	f7ff fce2 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013be:	4856      	ldr	r0, [pc, #344]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 80013c0:	f003 f9ed 	bl	800479e <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ca:	4854      	ldr	r0, [pc, #336]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80013cc:	f003 f9e7 	bl	800479e <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d6:	4851      	ldr	r0, [pc, #324]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80013d8:	f003 f9e1 	bl	800479e <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	753b      	strb	r3, [r7, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	757b      	strb	r3, [r7, #21]
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	3301      	adds	r3, #1
 80013f0:	121b      	asrs	r3, r3, #8
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	75bb      	strb	r3, [r7, #22]
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001400:	f107 0114 	add.w	r1, r7, #20
 8001404:	2301      	movs	r3, #1
 8001406:	2204      	movs	r2, #4
 8001408:	4845      	ldr	r0, [pc, #276]	; (8001520 <ILI9341_Draw_Pixel+0x1b4>)
 800140a:	f005 fb8d 	bl	8006b28 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001414:	4841      	ldr	r0, [pc, #260]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 8001416:	f003 f9c2 	bl	800479e <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001420:	483d      	ldr	r0, [pc, #244]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 8001422:	f003 f9bc 	bl	800479e <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	483b      	ldr	r0, [pc, #236]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 800142e:	f003 f9b6 	bl	800479e <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001432:	202b      	movs	r0, #43	; 0x2b
 8001434:	f7ff fca2 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143e:	4836      	ldr	r0, [pc, #216]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 8001440:	f003 f9ad 	bl	800479e <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144a:	4834      	ldr	r0, [pc, #208]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 800144c:	f003 f9a7 	bl	800479e <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001456:	4831      	ldr	r0, [pc, #196]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 8001458:	f003 f9a1 	bl	800479e <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b29b      	uxth	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	743b      	strb	r3, [r7, #16]
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	747b      	strb	r3, [r7, #17]
 800146c:	88bb      	ldrh	r3, [r7, #4]
 800146e:	3301      	adds	r3, #1
 8001470:	121b      	asrs	r3, r3, #8
 8001472:	b2db      	uxtb	r3, r3
 8001474:	74bb      	strb	r3, [r7, #18]
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3301      	adds	r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001480:	f107 0110 	add.w	r1, r7, #16
 8001484:	2301      	movs	r3, #1
 8001486:	2204      	movs	r2, #4
 8001488:	4825      	ldr	r0, [pc, #148]	; (8001520 <ILI9341_Draw_Pixel+0x1b4>)
 800148a:	f005 fb4d 	bl	8006b28 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001494:	4821      	ldr	r0, [pc, #132]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 8001496:	f003 f982 	bl	800479e <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a0:	481d      	ldr	r0, [pc, #116]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 80014a2:	f003 f97c 	bl	800479e <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ac:	481b      	ldr	r0, [pc, #108]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80014ae:	f003 f976 	bl	800479e <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80014b2:	202c      	movs	r0, #44	; 0x2c
 80014b4:	f7ff fc62 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014be:	4816      	ldr	r0, [pc, #88]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
 80014c0:	f003 f96d 	bl	800479e <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80014cc:	f003 f967 	bl	800479e <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d6:	4811      	ldr	r0, [pc, #68]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 80014d8:	f003 f961 	bl	800479e <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	733b      	strb	r3, [r7, #12]
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80014ec:	f107 010c 	add.w	r1, r7, #12
 80014f0:	2301      	movs	r3, #1
 80014f2:	2202      	movs	r2, #2
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <ILI9341_Draw_Pixel+0x1b4>)
 80014f6:	f005 fb17 	bl	8006b28 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
 8001502:	f003 f94c 	bl	800479e <HAL_GPIO_WritePin>
 8001506:	e000      	b.n	800150a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001508:	bf00      	nop
	
}
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000002 	.word	0x20000002
 8001514:	20000000 	.word	0x20000000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	200004e8 	.word	0x200004e8

08001524 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	4603      	mov	r3, r0
 8001538:	80bb      	strh	r3, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]
 800153e:	4613      	mov	r3, r2
 8001540:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <ILI9341_Draw_Rectangle+0xb0>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	88fa      	ldrh	r2, [r7, #6]
 800154a:	429a      	cmp	r2, r3
 800154c:	d23d      	bcs.n	80015ca <ILI9341_Draw_Rectangle+0xa6>
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <ILI9341_Draw_Rectangle+0xb4>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	88ba      	ldrh	r2, [r7, #4]
 8001556:	429a      	cmp	r2, r3
 8001558:	d237      	bcs.n	80015ca <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800155a:	88fa      	ldrh	r2, [r7, #6]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	4413      	add	r3, r2
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <ILI9341_Draw_Rectangle+0xb0>)
 8001562:	8812      	ldrh	r2, [r2, #0]
 8001564:	b292      	uxth	r2, r2
 8001566:	4293      	cmp	r3, r2
 8001568:	dd05      	ble.n	8001576 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <ILI9341_Draw_Rectangle+0xb0>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b29a      	uxth	r2, r3
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001576:	88ba      	ldrh	r2, [r7, #4]
 8001578:	883b      	ldrh	r3, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <ILI9341_Draw_Rectangle+0xb4>)
 800157e:	8812      	ldrh	r2, [r2, #0]
 8001580:	b292      	uxth	r2, r2
 8001582:	4293      	cmp	r3, r2
 8001584:	dd05      	ble.n	8001592 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <ILI9341_Draw_Rectangle+0xb4>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	b29a      	uxth	r2, r3
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	4413      	add	r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29c      	uxth	r4, r3
 800159e:	88ba      	ldrh	r2, [r7, #4]
 80015a0:	883b      	ldrh	r3, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	88b9      	ldrh	r1, [r7, #4]
 80015ac:	88f8      	ldrh	r0, [r7, #6]
 80015ae:	4622      	mov	r2, r4
 80015b0:	f7ff fc3e 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80015b4:	883b      	ldrh	r3, [r7, #0]
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	8b3b      	ldrh	r3, [r7, #24]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe0c 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
 80015c8:	e000      	b.n	80015cc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80015ca:	bf00      	nop
}
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000002 	.word	0x20000002
 80015d8:	20000000 	.word	0x20000000

080015dc <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4604      	mov	r4, r0
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	4603      	mov	r3, r0
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <ILI9341_Draw_Horizontal_Line+0x80>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	429a      	cmp	r2, r3
 8001604:	d225      	bcs.n	8001652 <ILI9341_Draw_Horizontal_Line+0x76>
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <ILI9341_Draw_Horizontal_Line+0x84>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	88ba      	ldrh	r2, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	d21f      	bcs.n	8001652 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8001612:	88fa      	ldrh	r2, [r7, #6]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4413      	add	r3, r2
 8001618:	4a10      	ldr	r2, [pc, #64]	; (800165c <ILI9341_Draw_Horizontal_Line+0x80>)
 800161a:	8812      	ldrh	r2, [r2, #0]
 800161c:	b292      	uxth	r2, r2
 800161e:	4293      	cmp	r3, r2
 8001620:	dd05      	ble.n	800162e <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <ILI9341_Draw_Horizontal_Line+0x80>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b29a      	uxth	r2, r3
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	88b9      	ldrh	r1, [r7, #4]
 800163e:	88f8      	ldrh	r0, [r7, #6]
 8001640:	f7ff fbf6 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8001644:	887a      	ldrh	r2, [r7, #2]
 8001646:	883b      	ldrh	r3, [r7, #0]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fdc8 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
 8001650:	e000      	b.n	8001654 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001652:	bf00      	nop
}
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	bf00      	nop
 800165c:	20000002 	.word	0x20000002
 8001660:	20000000 	.word	0x20000000

08001664 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	80fb      	strh	r3, [r7, #6]
 8001676:	4603      	mov	r3, r0
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	807b      	strh	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <ILI9341_Draw_Vertical_Line+0x80>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	d225      	bcs.n	80016da <ILI9341_Draw_Vertical_Line+0x76>
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <ILI9341_Draw_Vertical_Line+0x84>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	88ba      	ldrh	r2, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	d21f      	bcs.n	80016da <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800169a:	88ba      	ldrh	r2, [r7, #4]
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	4413      	add	r3, r2
 80016a0:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	b292      	uxth	r2, r2
 80016a6:	4293      	cmp	r3, r2
 80016a8:	dd05      	ble.n	80016b6 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80016b6:	88ba      	ldrh	r2, [r7, #4]
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	4413      	add	r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	88fa      	ldrh	r2, [r7, #6]
 80016c4:	88b9      	ldrh	r1, [r7, #4]
 80016c6:	88f8      	ldrh	r0, [r7, #6]
 80016c8:	f7ff fbb2 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80016cc:	887a      	ldrh	r2, [r7, #2]
 80016ce:	883b      	ldrh	r3, [r7, #0]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fd84 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
 80016d8:	e000      	b.n	80016dc <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80016da:	bf00      	nop
}
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000002 	.word	0x20000002
 80016e8:	20000000 	.word	0x20000000

080016ec <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2203      	movs	r2, #3
 80016f8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2203      	movs	r2, #3
 8001704:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2203      	movs	r2, #3
 8001716:	715a      	strb	r2, [r3, #5]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b08a      	sub	sp, #40	; 0x28
 8001726:	af04      	add	r7, sp, #16
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	460b      	mov	r3, r1
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	b29a      	uxth	r2, r3
 8001740:	8af9      	ldrh	r1, [r7, #22]
 8001742:	f241 3388 	movw	r3, #5000	; 0x1388
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2302      	movs	r3, #2
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	f003 fdf0 	bl	8005338 <HAL_I2C_Mem_Read>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10b      	bne.n	8001776 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800175e:	7d7b      	ldrb	r3, [r7, #21]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	b21a      	sxth	r2, r3
 8001764:	7d3b      	ldrb	r3, [r7, #20]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	801a      	strh	r2, [r3, #0]
		return true;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <read_register16+0x56>
	} else
		return false;
 8001776:	2300      	movs	r3, #0

}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b08b      	sub	sp, #44	; 0x2c
 8001784:	af04      	add	r7, sp, #16
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	461a      	mov	r2, r3
 800178c:	460b      	mov	r3, r1
 800178e:	72fb      	strb	r3, [r7, #11]
 8001790:	4613      	mov	r3, r2
 8001792:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	7abb      	ldrb	r3, [r7, #10]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	8af9      	ldrh	r1, [r7, #22]
 80017aa:	f241 3488 	movw	r4, #5000	; 0x1388
 80017ae:	9402      	str	r4, [sp, #8]
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	f003 fdbe 	bl	8005338 <HAL_I2C_Mem_Read>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <read_data+0x46>
		return 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <read_data+0x48>
	else
		return 1;
 80017c6:	2301      	movs	r3, #1

}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	461a      	mov	r2, r3
 80017dc:	2188      	movs	r1, #136	; 0x88
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ff9f 	bl	8001722 <read_register16>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d06f      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3302      	adds	r3, #2
 80017ee:	461a      	mov	r2, r3
 80017f0:	218a      	movs	r1, #138	; 0x8a
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff95 	bl	8001722 <read_register16>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d065      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	461a      	mov	r2, r3
 8001804:	218c      	movs	r1, #140	; 0x8c
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff8b 	bl	8001722 <read_register16>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d05b      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3306      	adds	r3, #6
 8001816:	461a      	mov	r2, r3
 8001818:	218e      	movs	r1, #142	; 0x8e
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff81 	bl	8001722 <read_register16>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d051      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3308      	adds	r3, #8
 800182a:	461a      	mov	r2, r3
 800182c:	2190      	movs	r1, #144	; 0x90
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff77 	bl	8001722 <read_register16>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d047      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	330a      	adds	r3, #10
 800183e:	461a      	mov	r2, r3
 8001840:	2192      	movs	r1, #146	; 0x92
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff6d 	bl	8001722 <read_register16>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d03d      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	330c      	adds	r3, #12
 8001852:	461a      	mov	r2, r3
 8001854:	2194      	movs	r1, #148	; 0x94
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ff63 	bl	8001722 <read_register16>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d033      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	330e      	adds	r3, #14
 8001866:	461a      	mov	r2, r3
 8001868:	2196      	movs	r1, #150	; 0x96
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ff59 	bl	8001722 <read_register16>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d029      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3310      	adds	r3, #16
 800187a:	461a      	mov	r2, r3
 800187c:	2198      	movs	r1, #152	; 0x98
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ff4f 	bl	8001722 <read_register16>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01f      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3312      	adds	r3, #18
 800188e:	461a      	mov	r2, r3
 8001890:	219a      	movs	r1, #154	; 0x9a
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff45 	bl	8001722 <read_register16>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3314      	adds	r3, #20
 80018a2:	461a      	mov	r2, r3
 80018a4:	219c      	movs	r1, #156	; 0x9c
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff3b 	bl	8001722 <read_register16>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80018b6:	461a      	mov	r2, r3
 80018b8:	219e      	movs	r1, #158	; 0x9e
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff31 	bl	8001722 <read_register16>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <read_calibration_data+0xfa>

		return true;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <read_calibration_data+0xfc>
	}

	return false;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f103 0218 	add.w	r2, r3, #24
 80018e2:	2301      	movs	r3, #1
 80018e4:	21a1      	movs	r1, #161	; 0xa1
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff4a 	bl	8001780 <read_data>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d14b      	bne.n	800198a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	331a      	adds	r3, #26
 80018f6:	461a      	mov	r2, r3
 80018f8:	21e1      	movs	r1, #225	; 0xe1
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff11 	bl	8001722 <read_register16>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d041      	beq.n	800198a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f103 021c 	add.w	r2, r3, #28
 800190c:	2301      	movs	r3, #1
 800190e:	21e3      	movs	r1, #227	; 0xe3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff35 	bl	8001780 <read_data>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d136      	bne.n	800198a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800191c:	f107 030e 	add.w	r3, r7, #14
 8001920:	461a      	mov	r2, r3
 8001922:	21e4      	movs	r1, #228	; 0xe4
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fefc 	bl	8001722 <read_register16>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02c      	beq.n	800198a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	461a      	mov	r2, r3
 8001936:	21e5      	movs	r1, #229	; 0xe5
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fef2 	bl	8001722 <read_register16>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d022      	beq.n	800198a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800194a:	2301      	movs	r3, #1
 800194c:	21e7      	movs	r1, #231	; 0xe7
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ff16 	bl	8001780 <read_data>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d117      	bne.n	800198a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	b21b      	sxth	r3, r3
 8001960:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001964:	b21a      	sxth	r2, r3
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	121b      	asrs	r3, r3, #8
 800196a:	b21b      	sxth	r3, r3
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800197a:	89bb      	ldrh	r3, [r7, #12]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	b29b      	uxth	r3, r3
 8001980:	b21a      	sxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	841a      	strh	r2, [r3, #32]

		return true;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <read_hum_calibration_data+0xb8>
	}

	return false;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
 80019a0:	4613      	mov	r3, r2
 80019a2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	89f9      	ldrh	r1, [r7, #14]
 80019b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	2301      	movs	r3, #1
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	1cbb      	adds	r3, r7, #2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2301      	movs	r3, #1
 80019c6:	f003 fbbd 	bl	8005144 <HAL_I2C_Mem_Write>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <write_register8+0x40>
		return false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <write_register8+0x42>
	else
		return true;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ec:	2b76      	cmp	r3, #118	; 0x76
 80019ee:	d005      	beq.n	80019fc <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019f4:	2b77      	cmp	r3, #119	; 0x77
 80019f6:	d001      	beq.n	80019fc <bmp280_init+0x1e>

		return false;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e099      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a02:	2301      	movs	r3, #1
 8001a04:	21d0      	movs	r1, #208	; 0xd0
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff feba 	bl	8001780 <read_data>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <bmp280_init+0x38>
		return false;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e08c      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a1c:	2b58      	cmp	r3, #88	; 0x58
 8001a1e:	d006      	beq.n	8001a2e <bmp280_init+0x50>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a26:	2b60      	cmp	r3, #96	; 0x60
 8001a28:	d001      	beq.n	8001a2e <bmp280_init+0x50>

		return false;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e080      	b.n	8001b30 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001a2e:	22b6      	movs	r2, #182	; 0xb6
 8001a30:	21e0      	movs	r1, #224	; 0xe0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffae 	bl	8001994 <write_register8>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <bmp280_init+0x64>
		return false;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e076      	b.n	8001b30 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001a42:	f107 020c 	add.w	r2, r7, #12
 8001a46:	2301      	movs	r3, #1
 8001a48:	21f3      	movs	r1, #243	; 0xf3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fe98 	bl	8001780 <read_data>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f5      	bne.n	8001a42 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001a56:	7b3b      	ldrb	r3, [r7, #12]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f0      	bne.n	8001a42 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff feb5 	bl	80017d0 <read_calibration_data>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d100      	bne.n	8001a74 <bmp280_init+0x96>
 8001a72:	e001      	b.n	8001a78 <bmp280_init+0x9a>
		return false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e05b      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a7e:	2b60      	cmp	r3, #96	; 0x60
 8001a80:	d10a      	bne.n	8001a98 <bmp280_init+0xba>
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff26 	bl	80018d4 <read_hum_calibration_data>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f083 0301 	eor.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <bmp280_init+0xba>
		return false;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e04b      	b.n	8001b30 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	795b      	ldrb	r3, [r3, #5]
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	b25a      	sxtb	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	21f5      	movs	r1, #245	; 0xf5
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff6d 	bl	8001994 <write_register8>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bmp280_init+0xe6>
		return false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e035      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	78db      	ldrb	r3, [r3, #3]
 8001ad6:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	789b      	ldrb	r3, [r3, #2]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001af0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001af8:	2b60      	cmp	r3, #96	; 0x60
 8001afa:	d10d      	bne.n	8001b18 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	791b      	ldrb	r3, [r3, #4]
 8001b00:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001b02:	7b7b      	ldrb	r3, [r7, #13]
 8001b04:	461a      	mov	r2, r3
 8001b06:	21f2      	movs	r1, #242	; 0xf2
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff43 	bl	8001994 <write_register8>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <bmp280_init+0x13a>
			return false;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e00b      	b.n	8001b30 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	21f4      	movs	r1, #244	; 0xf4
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff38 	bl	8001994 <write_register8>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <bmp280_init+0x150>
		return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <bmp280_init+0x152>
	}

	return true;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	10da      	asrs	r2, r3, #3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001b5a:	12db      	asrs	r3, r3, #11
 8001b5c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	111b      	asrs	r3, r3, #4
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	8812      	ldrh	r2, [r2, #0]
 8001b66:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	1112      	asrs	r2, r2, #4
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	8809      	ldrh	r1, [r1, #0]
 8001b70:	1a52      	subs	r2, r2, r1
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001b82:	139b      	asrs	r3, r3, #14
 8001b84:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	441a      	add	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3380      	adds	r3, #128	; 0x80
 8001b9c:	121b      	asrs	r3, r3, #8
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bac:	b0cc      	sub	sp, #304	; 0x130
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001bb4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001bb8:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001bc0:	17da      	asrs	r2, r3, #31
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	4615      	mov	r5, r2
 8001bc6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001bca:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8001bce:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001bd2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bda:	fb03 f102 	mul.w	r1, r3, r2
 8001bde:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001be2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	18ca      	adds	r2, r1, r3
 8001bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bf0:	fba3 8903 	umull	r8, r9, r3, r3
 8001bf4:	eb02 0309 	add.w	r3, r2, r9
 8001bf8:	4699      	mov	r9, r3
 8001bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bfe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	17da      	asrs	r2, r3, #31
 8001c06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c0a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c0e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001c12:	4603      	mov	r3, r0
 8001c14:	fb03 f209 	mul.w	r2, r3, r9
 8001c18:	460b      	mov	r3, r1
 8001c1a:	fb08 f303 	mul.w	r3, r8, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	4602      	mov	r2, r0
 8001c22:	fba8 2102 	umull	r2, r1, r8, r2
 8001c26:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001c2a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001c2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c32:	4413      	add	r3, r2
 8001c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c38:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001c3c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001c40:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c48:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	17da      	asrs	r2, r3, #31
 8001c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c54:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c5c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001c60:	462a      	mov	r2, r5
 8001c62:	fb02 f203 	mul.w	r2, r2, r3
 8001c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	441a      	add	r2, r3
 8001c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c76:	4621      	mov	r1, r4
 8001c78:	fba3 3101 	umull	r3, r1, r3, r1
 8001c7c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001c80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c88:	18d3      	adds	r3, r2, r3
 8001c8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c8e:	f04f 0000 	mov.w	r0, #0
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001c9a:	462b      	mov	r3, r5
 8001c9c:	0459      	lsls	r1, r3, #17
 8001c9e:	4622      	mov	r2, r4
 8001ca0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	0458      	lsls	r0, r3, #17
 8001ca8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001cac:	1814      	adds	r4, r2, r0
 8001cae:	643c      	str	r4, [r7, #64]	; 0x40
 8001cb0:	414b      	adcs	r3, r1
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001cb8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cc0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	17da      	asrs	r2, r3, #31
 8001cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ccc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001cd0:	f04f 0000 	mov.w	r0, #0
 8001cd4:	f04f 0100 	mov.w	r1, #0
 8001cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cdc:	00d9      	lsls	r1, r3, #3
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ce4:	1814      	adds	r4, r2, r0
 8001ce6:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ce8:	414b      	adcs	r3, r1
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cec:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001cf0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001cf4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cfc:	fb03 f102 	mul.w	r1, r3, r2
 8001d00:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	18ca      	adds	r2, r1, r3
 8001d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d12:	fba3 3103 	umull	r3, r1, r3, r3
 8001d16:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001d1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d22:	18d3      	adds	r3, r2, r3
 8001d24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	17da      	asrs	r2, r3, #31
 8001d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d38:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d3c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001d40:	4622      	mov	r2, r4
 8001d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d46:	4641      	mov	r1, r8
 8001d48:	fb01 f202 	mul.w	r2, r1, r2
 8001d4c:	464d      	mov	r5, r9
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4621      	mov	r1, r4
 8001d52:	4603      	mov	r3, r0
 8001d54:	fb03 f305 	mul.w	r3, r3, r5
 8001d58:	4413      	add	r3, r2
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4641      	mov	r1, r8
 8001d5e:	fba2 2101 	umull	r2, r1, r2, r1
 8001d62:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001d66:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001d6a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001d6e:	4413      	add	r3, r2
 8001d70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001d80:	4623      	mov	r3, r4
 8001d82:	0a18      	lsrs	r0, r3, #8
 8001d84:	462a      	mov	r2, r5
 8001d86:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	17da      	asrs	r2, r3, #31
 8001d9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d9e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001da6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001daa:	464a      	mov	r2, r9
 8001dac:	fb02 f203 	mul.w	r2, r2, r3
 8001db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001db4:	4644      	mov	r4, r8
 8001db6:	fb04 f303 	mul.w	r3, r4, r3
 8001dba:	441a      	add	r2, r3
 8001dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001dc0:	4644      	mov	r4, r8
 8001dc2:	fba3 3404 	umull	r3, r4, r3, r4
 8001dc6:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001dd2:	18d3      	adds	r3, r2, r3
 8001dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001de4:	464c      	mov	r4, r9
 8001de6:	0323      	lsls	r3, r4, #12
 8001de8:	46c4      	mov	ip, r8
 8001dea:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001dee:	4644      	mov	r4, r8
 8001df0:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001df2:	1884      	adds	r4, r0, r2
 8001df4:	633c      	str	r4, [r7, #48]	; 0x30
 8001df6:	eb41 0303 	adc.w	r3, r1, r3
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001e00:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001e04:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e08:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001e0c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001e10:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e18:	88db      	ldrh	r3, [r3, #6]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e22:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e26:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e30:	4641      	mov	r1, r8
 8001e32:	fb01 f202 	mul.w	r2, r1, r2
 8001e36:	464d      	mov	r5, r9
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	fb03 f305 	mul.w	r3, r3, r5
 8001e42:	4413      	add	r3, r2
 8001e44:	4602      	mov	r2, r0
 8001e46:	4641      	mov	r1, r8
 8001e48:	fba2 2101 	umull	r2, r1, r2, r1
 8001e4c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001e50:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001e54:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001e58:	4413      	add	r3, r2
 8001e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	104a      	asrs	r2, r1, #1
 8001e6e:	4629      	mov	r1, r5
 8001e70:	17cb      	asrs	r3, r1, #31
 8001e72:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001e76:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e146      	b.n	8002110 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001e82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e86:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001e8a:	17da      	asrs	r2, r3, #31
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e90:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e94:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001e98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001e9c:	105b      	asrs	r3, r3, #1
 8001e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ea2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ea6:	07db      	lsls	r3, r3, #31
 8001ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001eac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001eb0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	1aa4      	subs	r4, r4, r2
 8001eb8:	67bc      	str	r4, [r7, #120]	; 0x78
 8001eba:	eb61 0303 	sbc.w	r3, r1, r3
 8001ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ec0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	1891      	adds	r1, r2, r2
 8001eca:	6239      	str	r1, [r7, #32]
 8001ecc:	415b      	adcs	r3, r3
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	1851      	adds	r1, r2, r1
 8001ed8:	61b9      	str	r1, [r7, #24]
 8001eda:	4629      	mov	r1, r5
 8001edc:	414b      	adcs	r3, r1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001eec:	4649      	mov	r1, r9
 8001eee:	018b      	lsls	r3, r1, #6
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	018a      	lsls	r2, r1, #6
 8001efa:	4641      	mov	r1, r8
 8001efc:	1889      	adds	r1, r1, r2
 8001efe:	6139      	str	r1, [r7, #16]
 8001f00:	4649      	mov	r1, r9
 8001f02:	eb43 0101 	adc.w	r1, r3, r1
 8001f06:	6179      	str	r1, [r7, #20]
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f14:	4649      	mov	r1, r9
 8001f16:	008b      	lsls	r3, r1, #2
 8001f18:	46c4      	mov	ip, r8
 8001f1a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001f1e:	4641      	mov	r1, r8
 8001f20:	008a      	lsls	r2, r1, #2
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	4622      	mov	r2, r4
 8001f2a:	189b      	adds	r3, r3, r2
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	462a      	mov	r2, r5
 8001f32:	eb42 0303 	adc.w	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001f44:	4649      	mov	r1, r9
 8001f46:	008b      	lsls	r3, r1, #2
 8001f48:	46c4      	mov	ip, r8
 8001f4a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001f4e:	4641      	mov	r1, r8
 8001f50:	008a      	lsls	r2, r1, #2
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	4622      	mov	r2, r4
 8001f5a:	189b      	adds	r3, r3, r2
 8001f5c:	673b      	str	r3, [r7, #112]	; 0x70
 8001f5e:	462b      	mov	r3, r5
 8001f60:	460a      	mov	r2, r1
 8001f62:	eb42 0303 	adc.w	r3, r2, r3
 8001f66:	677b      	str	r3, [r7, #116]	; 0x74
 8001f68:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001f6c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001f70:	f7fe fbf0 	bl	8000754 <__aeabi_ldivmod>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f80:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	17da      	asrs	r2, r3, #31
 8001f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f8c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001f90:	f04f 0000 	mov.w	r0, #0
 8001f94:	f04f 0100 	mov.w	r1, #0
 8001f98:	0b50      	lsrs	r0, r2, #13
 8001f9a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f9e:	1359      	asrs	r1, r3, #13
 8001fa0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	fb00 f203 	mul.w	r2, r0, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	fb03 f301 	mul.w	r3, r3, r1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	fba2 2100 	umull	r2, r1, r2, r0
 8001fb8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001fbc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001fc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001fca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0b50      	lsrs	r0, r2, #13
 8001fd8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001fdc:	1359      	asrs	r1, r3, #13
 8001fde:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001fe2:	462b      	mov	r3, r5
 8001fe4:	fb00 f203 	mul.w	r2, r0, r3
 8001fe8:	4623      	mov	r3, r4
 8001fea:	fb03 f301 	mul.w	r3, r3, r1
 8001fee:	4413      	add	r3, r2
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	fba2 2100 	umull	r2, r1, r2, r0
 8001ff6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001ffa:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001ffe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002002:	4413      	add	r3, r2
 8002004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002014:	4621      	mov	r1, r4
 8002016:	0e4a      	lsrs	r2, r1, #25
 8002018:	4620      	mov	r0, r4
 800201a:	4629      	mov	r1, r5
 800201c:	460c      	mov	r4, r1
 800201e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8002022:	164b      	asrs	r3, r1, #25
 8002024:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800202c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002030:	b21b      	sxth	r3, r3
 8002032:	17da      	asrs	r2, r3, #31
 8002034:	663b      	str	r3, [r7, #96]	; 0x60
 8002036:	667a      	str	r2, [r7, #100]	; 0x64
 8002038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800203c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002040:	462a      	mov	r2, r5
 8002042:	fb02 f203 	mul.w	r2, r2, r3
 8002046:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800204a:	4621      	mov	r1, r4
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002056:	4621      	mov	r1, r4
 8002058:	fba2 2101 	umull	r2, r1, r2, r1
 800205c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8002060:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002064:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002068:	4413      	add	r3, r2
 800206a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800207a:	4621      	mov	r1, r4
 800207c:	0cca      	lsrs	r2, r1, #19
 800207e:	4620      	mov	r0, r4
 8002080:	4629      	mov	r1, r5
 8002082:	460c      	mov	r4, r1
 8002084:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8002088:	14cb      	asrs	r3, r1, #19
 800208a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800208e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002092:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002096:	1884      	adds	r4, r0, r2
 8002098:	65bc      	str	r4, [r7, #88]	; 0x58
 800209a:	eb41 0303 	adc.w	r3, r1, r3
 800209e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80020a4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80020a8:	4621      	mov	r1, r4
 80020aa:	1889      	adds	r1, r1, r2
 80020ac:	6539      	str	r1, [r7, #80]	; 0x50
 80020ae:	4629      	mov	r1, r5
 80020b0:	eb43 0101 	adc.w	r1, r3, r1
 80020b4:	6579      	str	r1, [r7, #84]	; 0x54
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80020c2:	4623      	mov	r3, r4
 80020c4:	0a18      	lsrs	r0, r3, #8
 80020c6:	462a      	mov	r2, r5
 80020c8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80020cc:	462b      	mov	r3, r5
 80020ce:	1219      	asrs	r1, r3, #8
 80020d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	17da      	asrs	r2, r3, #31
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80020de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80020ec:	464c      	mov	r4, r9
 80020ee:	0123      	lsls	r3, r4, #4
 80020f0:	46c4      	mov	ip, r8
 80020f2:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80020f6:	4644      	mov	r4, r8
 80020f8:	0122      	lsls	r2, r4, #4
 80020fa:	1884      	adds	r4, r0, r2
 80020fc:	603c      	str	r4, [r7, #0]
 80020fe:	eb41 0303 	adc.w	r3, r1, r3
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002108:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800210c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8002110:	4618      	mov	r0, r3
 8002112:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002116:	46bd      	mov	sp, r7
 8002118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800211c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800212e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	039a      	lsls	r2, r3, #14
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800213a:	051b      	lsls	r3, r3, #20
 800213c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002144:	4619      	mov	r1, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002152:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800215a:	4611      	mov	r1, r2
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	fb01 f202 	mul.w	r2, r1, r2
 8002162:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	7f09      	ldrb	r1, [r1, #28]
 8002168:	4608      	mov	r0, r1
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	fb00 f101 	mul.w	r1, r0, r1
 8002170:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002172:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002176:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800217a:	1292      	asrs	r2, r2, #10
 800217c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002186:	fb01 f202 	mul.w	r2, r1, r2
 800218a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800218e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	13db      	asrs	r3, r3, #15
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	13d2      	asrs	r2, r2, #15
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	7e12      	ldrb	r2, [r2, #24]
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021ba:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80021c2:	bfa8      	it	ge
 80021c4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80021c8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	131b      	asrs	r3, r3, #12
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80021ec:	2b60      	cmp	r3, #96	; 0x60
 80021ee:	d007      	beq.n	8002200 <bmp280_read_fixed+0x28>
		if (humidity)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <bmp280_read_fixed+0x24>
			*humidity = 0;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <bmp280_read_fixed+0x32>
 8002206:	2308      	movs	r3, #8
 8002208:	e000      	b.n	800220c <bmp280_read_fixed+0x34>
 800220a:	2306      	movs	r3, #6
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f107 0218 	add.w	r2, r7, #24
 8002216:	21f7      	movs	r1, #247	; 0xf7
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff fab1 	bl	8001780 <read_data>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <bmp280_read_fixed+0x50>
		return false;
 8002224:	2300      	movs	r3, #0
 8002226:	e038      	b.n	800229a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002228:	7e3b      	ldrb	r3, [r7, #24]
 800222a:	031a      	lsls	r2, r3, #12
 800222c:	7e7b      	ldrb	r3, [r7, #25]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4313      	orrs	r3, r2
 8002232:	7eba      	ldrb	r2, [r7, #26]
 8002234:	0912      	lsrs	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4313      	orrs	r3, r2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800223c:	7efb      	ldrb	r3, [r7, #27]
 800223e:	031a      	lsls	r2, r3, #12
 8002240:	7f3b      	ldrb	r3, [r7, #28]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4313      	orrs	r3, r2
 8002246:	7f7a      	ldrb	r2, [r7, #29]
 8002248:	0912      	lsrs	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4313      	orrs	r3, r2
 800224e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	461a      	mov	r2, r3
 8002256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff fc6d 	bl	8001b38 <compensate_temperature>
 800225e:	4602      	mov	r2, r0
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	461a      	mov	r2, r3
 8002268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7ff fc9c 	bl	8001ba8 <compensate_pressure>
 8002270:	4602      	mov	r2, r0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800227c:	7fbb      	ldrb	r3, [r7, #30]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	7ffa      	ldrb	r2, [r7, #31]
 8002282:	4313      	orrs	r3, r2
 8002284:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	461a      	mov	r2, r3
 800228a:	6a39      	ldr	r1, [r7, #32]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ff45 	bl	800211c <compensate_humidity>
 8002292:	4602      	mov	r2, r0
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	3730      	adds	r7, #48	; 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <bmp280_read_float+0x1a>
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	e000      	b.n	80022c0 <bmp280_read_float+0x1c>
 80022be:	2300      	movs	r3, #0
 80022c0:	f107 0218 	add.w	r2, r7, #24
 80022c4:	f107 011c 	add.w	r1, r7, #28
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7ff ff85 	bl	80021d8 <bmp280_read_fixed>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02d      	beq.n	8002330 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fd fffc 	bl	80002d4 <__aeabi_i2f>
 80022dc:	4603      	mov	r3, r0
 80022de:	4917      	ldr	r1, [pc, #92]	; (800233c <bmp280_read_float+0x98>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f8ff 	bl	80004e4 <__aeabi_fdiv>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fd ffeb 	bl	80002cc <__aeabi_ui2f>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f8f1 	bl	80004e4 <__aeabi_fdiv>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
		if (humidity)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fd ffda 	bl	80002cc <__aeabi_ui2f>
 8002318:	4603      	mov	r3, r0
 800231a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f8e0 	bl	80004e4 <__aeabi_fdiv>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	601a      	str	r2, [r3, #0]
		return true;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <bmp280_read_float+0x8e>
	}

	return false;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	42c80000 	.word	0x42c80000

08002340 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8002348:	4a03      	ldr	r2, [pc, #12]	; (8002358 <DS3231_Init+0x18>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000098 	.word	0x20000098

0800235c <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af02      	add	r7, sp, #8
 8002362:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2100      	movs	r1, #0
 8002372:	460a      	mov	r2, r1
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	460a      	mov	r2, r1
 8002378:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800237a:	4b35      	ldr	r3, [pc, #212]	; (8002450 <DS3231_GetTime+0xf4>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f107 020f 	add.w	r2, r7, #15
 8002382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2301      	movs	r3, #1
 800238a:	21d0      	movs	r1, #208	; 0xd0
 800238c:	f002 fb7c 	bl	8004a88 <HAL_I2C_Master_Transmit>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <DS3231_GetTime+0x3e>
 8002396:	2300      	movs	r3, #0
 8002398:	e055      	b.n	8002446 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <DS3231_GetTime+0xf4>)
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	f107 0208 	add.w	r2, r7, #8
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2307      	movs	r3, #7
 80023aa:	21d0      	movs	r1, #208	; 0xd0
 80023ac:	f002 fc6a 	bl	8004c84 <HAL_I2C_Master_Receive>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <DS3231_GetTime+0x5e>
 80023b6:	2300      	movs	r3, #0
 80023b8:	e045      	b.n	8002446 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 80023ba:	7a3b      	ldrb	r3, [r7, #8]
 80023bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f892 	bl	80024ec <B2D>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 80023d0:	7a7b      	ldrb	r3, [r7, #9]
 80023d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f887 	bl	80024ec <B2D>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 80023e6:	7abb      	ldrb	r3, [r7, #10]
 80023e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f87c 	bl	80024ec <B2D>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	b2da      	uxtb	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8002408:	7b3b      	ldrb	r3, [r7, #12]
 800240a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f86b 	bl	80024ec <B2D>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 800241e:	7b7b      	ldrb	r3, [r7, #13]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	b2db      	uxtb	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f860 	bl	80024ec <B2D>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f858 	bl	80024ec <B2D>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	701a      	strb	r2, [r3, #0]

  return true;
 8002444:	2301      	movs	r3, #1
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000098 	.word	0x20000098

08002454 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 800245c:	2300      	movs	r3, #0
 800245e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	733b      	strb	r3, [r7, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	799b      	ldrb	r3, [r3, #6]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f857 	bl	800251c <D2B>
 800246e:	4603      	mov	r3, r0
 8002470:	737b      	strb	r3, [r7, #13]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	795b      	ldrb	r3, [r3, #5]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f850 	bl	800251c <D2B>
 800247c:	4603      	mov	r3, r0
 800247e:	73bb      	strb	r3, [r7, #14]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f849 	bl	800251c <D2B>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	78db      	ldrb	r3, [r3, #3]
 8002492:	743b      	strb	r3, [r7, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	789b      	ldrb	r3, [r3, #2]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f83f 	bl	800251c <D2B>
 800249e:	4603      	mov	r3, r0
 80024a0:	747b      	strb	r3, [r7, #17]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f838 	bl	800251c <D2B>
 80024ac:	4603      	mov	r3, r0
 80024ae:	74bb      	strb	r3, [r7, #18]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f831 	bl	800251c <D2B>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <DS3231_SetTime+0x94>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	f107 020c 	add.w	r2, r7, #12
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2308      	movs	r3, #8
 80024ce:	21d0      	movs	r1, #208	; 0xd0
 80024d0:	f002 fada 	bl	8004a88 <HAL_I2C_Master_Transmit>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <DS3231_SetTime+0x8a>
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <DS3231_SetTime+0x8c>

  return true;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000098 	.word	0x20000098

080024ec <B2D>:

  return true;
}

static uint8_t B2D(uint8_t bcd)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	4413      	add	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	b2da      	uxtb	r2, r3
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4413      	add	r3, r2
 8002510:	b2db      	uxtb	r3, r3
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <D2B+0x44>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	08db      	lsrs	r3, r3, #3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	b258      	sxtb	r0, r3
 8002536:	79fa      	ldrb	r2, [r7, #7]
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <D2B+0x44>)
 800253a:	fba3 1302 	umull	r1, r3, r3, r2
 800253e:	08d9      	lsrs	r1, r3, #3
 8002540:	460b      	mov	r3, r1
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	b25b      	sxtb	r3, r3
 800254e:	4303      	orrs	r3, r0
 8002550:	b25b      	sxtb	r3, r3
 8002552:	b2db      	uxtb	r3, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	cccccccd 	.word	0xcccccccd

08002564 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN PV */


// -------------------------------------------------------------------------
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == KEY_1_Pin) || (GPIO_Pin == KEY_2_Pin) || (GPIO_Pin == KEY_3_Pin) || (GPIO_Pin == KEY_4_Pin))
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b10      	cmp	r3, #16
 8002572:	d008      	beq.n	8002586 <HAL_GPIO_EXTI_Callback+0x22>
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b08      	cmp	r3, #8
 8002578:	d005      	beq.n	8002586 <HAL_GPIO_EXTI_Callback+0x22>
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d002      	beq.n	8002586 <HAL_GPIO_EXTI_Callback+0x22>
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d15a      	bne.n	800263c <HAL_GPIO_EXTI_Callback+0xd8>
	{
		BaseType_t xHigherPriorityTaskWoken;
		uint16_t key_1 = 1;
 8002586:	2301      	movs	r3, #1
 8002588:	81fb      	strh	r3, [r7, #14]
		uint16_t key_2 = 2;
 800258a:	2302      	movs	r3, #2
 800258c:	81bb      	strh	r3, [r7, #12]
		uint16_t key_3 = 3;
 800258e:	2303      	movs	r3, #3
 8002590:	82fb      	strh	r3, [r7, #22]
		uint16_t key_4 = 4;
 8002592:	2304      	movs	r3, #4
 8002594:	817b      	strh	r3, [r7, #10]

		currentMillis = HAL_GetTick();
 8002596:	f001 fda9 	bl	80040ec <HAL_GetTick>
 800259a:	4603      	mov	r3, r0
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <HAL_GPIO_EXTI_Callback+0xe0>)
 800259e:	6013      	str	r3, [r2, #0]
		if((currentMillis - previousMillis) > 100)
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_GPIO_EXTI_Callback+0xe0>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_GPIO_EXTI_Callback+0xe4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d946      	bls.n	800263c <HAL_GPIO_EXTI_Callback+0xd8>
		{
			if(HAL_GPIO_ReadPin(GPIOA, KEY_1_Pin) == GPIO_PIN_SET)			// If first key was pressed
 80025ae:	2110      	movs	r1, #16
 80025b0:	4826      	ldr	r0, [pc, #152]	; (800264c <HAL_GPIO_EXTI_Callback+0xe8>)
 80025b2:	f002 f8dd 	bl	8004770 <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d109      	bne.n	80025d0 <HAL_GPIO_EXTI_Callback+0x6c>
			{
				if((xQueueSendFromISR( buttonQueueHandle, &key_1, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_GPIO_EXTI_Callback+0xec>)
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	f107 0210 	add.w	r2, r7, #16
 80025c4:	f107 010e 	add.w	r1, r7, #14
 80025c8:	2300      	movs	r3, #0
 80025ca:	f006 fe75 	bl	80092b8 <xQueueGenericSendFromISR>
 80025ce:	e031      	b.n	8002634 <HAL_GPIO_EXTI_Callback+0xd0>
				{
					// Error
				}
			}
			else if(HAL_GPIO_ReadPin(GPIOA, KEY_2_Pin) == GPIO_PIN_SET)
 80025d0:	2108      	movs	r1, #8
 80025d2:	481e      	ldr	r0, [pc, #120]	; (800264c <HAL_GPIO_EXTI_Callback+0xe8>)
 80025d4:	f002 f8cc 	bl	8004770 <HAL_GPIO_ReadPin>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d109      	bne.n	80025f2 <HAL_GPIO_EXTI_Callback+0x8e>
			{
				if((xQueueSendFromISR( buttonQueueHandle, &key_2, &xHigherPriorityTaskWoken )) != 1)
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_GPIO_EXTI_Callback+0xec>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	f107 0210 	add.w	r2, r7, #16
 80025e6:	f107 010c 	add.w	r1, r7, #12
 80025ea:	2300      	movs	r3, #0
 80025ec:	f006 fe64 	bl	80092b8 <xQueueGenericSendFromISR>
 80025f0:	e020      	b.n	8002634 <HAL_GPIO_EXTI_Callback+0xd0>
				{
					// Error
				}
			}
			else if(HAL_GPIO_ReadPin(GPIOA, KEY_3_Pin) == GPIO_PIN_SET)
 80025f2:	2104      	movs	r1, #4
 80025f4:	4815      	ldr	r0, [pc, #84]	; (800264c <HAL_GPIO_EXTI_Callback+0xe8>)
 80025f6:	f002 f8bb 	bl	8004770 <HAL_GPIO_ReadPin>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d109      	bne.n	8002614 <HAL_GPIO_EXTI_Callback+0xb0>
			{
				if((xQueueSendFromISR( buttonQueueHandle, &key_2, &xHigherPriorityTaskWoken )) != 1)
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_GPIO_EXTI_Callback+0xec>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	f107 0210 	add.w	r2, r7, #16
 8002608:	f107 010c 	add.w	r1, r7, #12
 800260c:	2300      	movs	r3, #0
 800260e:	f006 fe53 	bl	80092b8 <xQueueGenericSendFromISR>
 8002612:	e00f      	b.n	8002634 <HAL_GPIO_EXTI_Callback+0xd0>
				{
					// Error
				}
			}
			else if(HAL_GPIO_ReadPin(GPIOA, KEY_4_Pin) == GPIO_PIN_SET)
 8002614:	2102      	movs	r1, #2
 8002616:	480d      	ldr	r0, [pc, #52]	; (800264c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002618:	f002 f8aa 	bl	8004770 <HAL_GPIO_ReadPin>
 800261c:	4603      	mov	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d108      	bne.n	8002634 <HAL_GPIO_EXTI_Callback+0xd0>
			{
				if((xQueueSendFromISR( buttonQueueHandle, &key_4, &xHigherPriorityTaskWoken )) != 1)
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_GPIO_EXTI_Callback+0xec>)
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	f107 0210 	add.w	r2, r7, #16
 800262a:	f107 010a 	add.w	r1, r7, #10
 800262e:	2300      	movs	r3, #0
 8002630:	f006 fe42 	bl	80092b8 <xQueueGenericSendFromISR>
				{
					// Error
				}
			}
			previousMillis = currentMillis;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a03      	ldr	r2, [pc, #12]	; (8002648 <HAL_GPIO_EXTI_Callback+0xe4>)
 800263a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800263c:	bf00      	nop
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000490 	.word	0x20000490
 8002648:	2000048c 	.word	0x2000048c
 800264c:	40010800 	.word	0x40010800
 8002650:	20000e38 	.word	0x20000e38

08002654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002658:	f001 fd20 	bl	800409c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800265c:	f000 f8cc 	bl	80027f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002660:	f000 f9ea 	bl	8002a38 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002664:	f000 f93c 	bl	80028e0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002668:	f000 f90c 	bl	8002884 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800266c:	f000 f9ba 	bl	80029e4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002670:	f000 f96c 	bl	800294c <MX_TIM2_Init>
//  ILI9341_Init();
//  ILI9341_Enable();
//  ILI9341_Fill_Screen(BLACK);

  // DC3231 init
  DS3231_Init(&hi2c1);
 8002674:	483c      	ldr	r0, [pc, #240]	; (8002768 <main+0x114>)
 8002676:	f7ff fe63 	bl	8002340 <DS3231_Init>
//  HAL_TIM_Base_Start_IT(&htim1);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800267a:	f005 fd75 	bl	8008168 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of I2C_Mutex */
  I2C_MutexHandle = osMutexNew(&I2C_Mutex_attributes);
 800267e:	483b      	ldr	r0, [pc, #236]	; (800276c <main+0x118>)
 8002680:	f005 feb0 	bl	80083e4 <osMutexNew>
 8002684:	4603      	mov	r3, r0
 8002686:	4a3a      	ldr	r2, [pc, #232]	; (8002770 <main+0x11c>)
 8002688:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of LCD_Sem */
  LCD_SemHandle = osSemaphoreNew(1, 1, &LCD_Sem_attributes);
 800268a:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <main+0x120>)
 800268c:	2101      	movs	r1, #1
 800268e:	2001      	movs	r0, #1
 8002690:	f005 fff0 	bl	8008674 <osSemaphoreNew>
 8002694:	4603      	mov	r3, r0
 8002696:	4a38      	ldr	r2, [pc, #224]	; (8002778 <main+0x124>)
 8002698:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (2, sizeof(QUEUE_t), &UARTQueue_attributes);
 800269a:	4a38      	ldr	r2, [pc, #224]	; (800277c <main+0x128>)
 800269c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026a0:	2002      	movs	r0, #2
 80026a2:	f006 f941 	bl	8008928 <osMessageQueueNew>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4a35      	ldr	r2, [pc, #212]	; (8002780 <main+0x12c>)
 80026aa:	6013      	str	r3, [r2, #0]

  /* creation of buttonQueue */
  buttonQueueHandle = osMessageQueueNew (5, sizeof(uint16_t), &buttonQueue_attributes);
 80026ac:	4a35      	ldr	r2, [pc, #212]	; (8002784 <main+0x130>)
 80026ae:	2102      	movs	r1, #2
 80026b0:	2005      	movs	r0, #5
 80026b2:	f006 f939 	bl	8008928 <osMessageQueueNew>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4a33      	ldr	r2, [pc, #204]	; (8002788 <main+0x134>)
 80026ba:	6013      	str	r3, [r2, #0]

  /* creation of THPQueue */
  THPQueueHandle = osMessageQueueNew (3, sizeof(QUEUE_BME280), &THPQueue_attributes);
 80026bc:	4a33      	ldr	r2, [pc, #204]	; (800278c <main+0x138>)
 80026be:	210c      	movs	r1, #12
 80026c0:	2003      	movs	r0, #3
 80026c2:	f006 f931 	bl	8008928 <osMessageQueueNew>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4a31      	ldr	r2, [pc, #196]	; (8002790 <main+0x13c>)
 80026ca:	6013      	str	r3, [r2, #0]

  /* creation of rtc_queue */
  rtc_queueHandle = osMessageQueueNew (2, sizeof(QUEUE_RTC), &rtc_queue_attributes);
 80026cc:	4a31      	ldr	r2, [pc, #196]	; (8002794 <main+0x140>)
 80026ce:	2107      	movs	r1, #7
 80026d0:	2002      	movs	r0, #2
 80026d2:	f006 f929 	bl	8008928 <osMessageQueueNew>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4a2f      	ldr	r2, [pc, #188]	; (8002798 <main+0x144>)
 80026da:	6013      	str	r3, [r2, #0]

  /* creation of new_rtc_queue */
  new_rtc_queueHandle = osMessageQueueNew (2, sizeof(QUEUE_NEW_RTC), &new_rtc_queue_attributes);
 80026dc:	4a2f      	ldr	r2, [pc, #188]	; (800279c <main+0x148>)
 80026de:	2107      	movs	r1, #7
 80026e0:	2002      	movs	r0, #2
 80026e2:	f006 f921 	bl	8008928 <osMessageQueueNew>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4a2d      	ldr	r2, [pc, #180]	; (80027a0 <main+0x14c>)
 80026ea:	6013      	str	r3, [r2, #0]

  /* creation of nev_val_queue */
  nev_val_queueHandle = osMessageQueueNew (2, sizeof(uint8_t), &nev_val_queue_attributes);
 80026ec:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <main+0x150>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	2002      	movs	r0, #2
 80026f2:	f006 f919 	bl	8008928 <osMessageQueueNew>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4a2b      	ldr	r2, [pc, #172]	; (80027a8 <main+0x154>)
 80026fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80026fc:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <main+0x158>)
 80026fe:	2100      	movs	r1, #0
 8002700:	482b      	ldr	r0, [pc, #172]	; (80027b0 <main+0x15c>)
 8002702:	f005 fd97 	bl	8008234 <osThreadNew>
 8002706:	4603      	mov	r3, r0
 8002708:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <main+0x160>)
 800270a:	6013      	str	r3, [r2, #0]

  /* creation of RTC_DS3231_Task */
  RTC_DS3231_TaskHandle = osThreadNew(start_RTC_DS3231_Task, NULL, &RTC_DS3231_Task_attributes);
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <main+0x164>)
 800270e:	2100      	movs	r1, #0
 8002710:	482a      	ldr	r0, [pc, #168]	; (80027bc <main+0x168>)
 8002712:	f005 fd8f 	bl	8008234 <osThreadNew>
 8002716:	4603      	mov	r3, r0
 8002718:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <main+0x16c>)
 800271a:	6013      	str	r3, [r2, #0]

  /* creation of BPE280_Task */
  BPE280_TaskHandle = osThreadNew(start_BPE280_Task, NULL, &BPE280_Task_attributes);
 800271c:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <main+0x170>)
 800271e:	2100      	movs	r1, #0
 8002720:	4829      	ldr	r0, [pc, #164]	; (80027c8 <main+0x174>)
 8002722:	f005 fd87 	bl	8008234 <osThreadNew>
 8002726:	4603      	mov	r3, r0
 8002728:	4a28      	ldr	r2, [pc, #160]	; (80027cc <main+0x178>)
 800272a:	6013      	str	r3, [r2, #0]

  /* creation of SET_RTS_TASK */
  SET_RTS_TASKHandle = osThreadNew(start_SET_RTS_TASK, NULL, &SET_RTS_TASK_attributes);
 800272c:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <main+0x17c>)
 800272e:	2100      	movs	r1, #0
 8002730:	4828      	ldr	r0, [pc, #160]	; (80027d4 <main+0x180>)
 8002732:	f005 fd7f 	bl	8008234 <osThreadNew>
 8002736:	4603      	mov	r3, r0
 8002738:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <main+0x184>)
 800273a:	6013      	str	r3, [r2, #0]

  /* creation of UART_USB_Task */
  UART_USB_TaskHandle = osThreadNew(start_UART_USB_Task, NULL, &UART_USB_Task_attributes);
 800273c:	4a27      	ldr	r2, [pc, #156]	; (80027dc <main+0x188>)
 800273e:	2100      	movs	r1, #0
 8002740:	4827      	ldr	r0, [pc, #156]	; (80027e0 <main+0x18c>)
 8002742:	f005 fd77 	bl	8008234 <osThreadNew>
 8002746:	4603      	mov	r3, r0
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <main+0x190>)
 800274a:	6013      	str	r3, [r2, #0]

  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(start_LCD_Task, NULL, &LCD_Task_attributes);
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <main+0x194>)
 800274e:	2100      	movs	r1, #0
 8002750:	4826      	ldr	r0, [pc, #152]	; (80027ec <main+0x198>)
 8002752:	f005 fd6f 	bl	8008234 <osThreadNew>
 8002756:	4603      	mov	r3, r0
 8002758:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <main+0x19c>)
 800275a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  HAL_TIM_Base_Start_IT(&htim2);		//  This TIM3 using for calculate how many time all tasks was running.
 800275c:	4825      	ldr	r0, [pc, #148]	; (80027f4 <main+0x1a0>)
 800275e:	f004 fd19 	bl	8007194 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002762:	f005 fd33 	bl	80081cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002766:	e7fe      	b.n	8002766 <main+0x112>
 8002768:	20000494 	.word	0x20000494
 800276c:	0800d364 	.word	0x0800d364
 8002770:	20000fd4 	.word	0x20000fd4
 8002774:	0800d374 	.word	0x0800d374
 8002778:	20000fd8 	.word	0x20000fd8
 800277c:	0800d2d4 	.word	0x0800d2d4
 8002780:	200005e4 	.word	0x200005e4
 8002784:	0800d2ec 	.word	0x0800d2ec
 8002788:	20000e38 	.word	0x20000e38
 800278c:	0800d304 	.word	0x0800d304
 8002790:	20000e3c 	.word	0x20000e3c
 8002794:	0800d31c 	.word	0x0800d31c
 8002798:	20000eb4 	.word	0x20000eb4
 800279c:	0800d334 	.word	0x0800d334
 80027a0:	20000f18 	.word	0x20000f18
 80027a4:	0800d34c 	.word	0x0800d34c
 80027a8:	20000f7c 	.word	0x20000f7c
 80027ac:	0800d1fc 	.word	0x0800d1fc
 80027b0:	08002ba1 	.word	0x08002ba1
 80027b4:	200005cc 	.word	0x200005cc
 80027b8:	0800d220 	.word	0x0800d220
 80027bc:	08002bb5 	.word	0x08002bb5
 80027c0:	200005d0 	.word	0x200005d0
 80027c4:	0800d244 	.word	0x0800d244
 80027c8:	08002c8d 	.word	0x08002c8d
 80027cc:	200005d4 	.word	0x200005d4
 80027d0:	0800d268 	.word	0x0800d268
 80027d4:	08002d79 	.word	0x08002d79
 80027d8:	200005d8 	.word	0x200005d8
 80027dc:	0800d28c 	.word	0x0800d28c
 80027e0:	08002ded 	.word	0x08002ded
 80027e4:	200005dc 	.word	0x200005dc
 80027e8:	0800d2b0 	.word	0x0800d2b0
 80027ec:	080030a1 	.word	0x080030a1
 80027f0:	200005e0 	.word	0x200005e0
 80027f4:	20000540 	.word	0x20000540

080027f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b090      	sub	sp, #64	; 0x40
 80027fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027fe:	f107 0318 	add.w	r3, r7, #24
 8002802:	2228      	movs	r2, #40	; 0x28
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f009 fd56 	bl	800c2b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	60da      	str	r2, [r3, #12]
 8002818:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800281a:	2301      	movs	r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800281e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002828:	2301      	movs	r3, #1
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800282c:	2302      	movs	r3, #2
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002836:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283c:	f107 0318 	add.w	r3, r7, #24
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fca3 	bl	800618c <HAL_RCC_OscConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800284c:	f001 f9be 	bl	8003bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002850:	230f      	movs	r3, #15
 8002852:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002854:	2302      	movs	r3, #2
 8002856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800285c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	2102      	movs	r1, #2
 800286a:	4618      	mov	r0, r3
 800286c:	f003 ff10 	bl	8006690 <HAL_RCC_ClockConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002876:	f001 f9a9 	bl	8003bcc <Error_Handler>
  }
}
 800287a:	bf00      	nop
 800287c:	3740      	adds	r7, #64	; 0x40
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <MX_I2C1_Init+0x50>)
 800288a:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <MX_I2C1_Init+0x54>)
 800288c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <MX_I2C1_Init+0x50>)
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <MX_I2C1_Init+0x58>)
 8002892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <MX_I2C1_Init+0x50>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <MX_I2C1_Init+0x50>)
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <MX_I2C1_Init+0x50>)
 80028a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <MX_I2C1_Init+0x50>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <MX_I2C1_Init+0x50>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <MX_I2C1_Init+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <MX_I2C1_Init+0x50>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028c0:	4804      	ldr	r0, [pc, #16]	; (80028d4 <MX_I2C1_Init+0x50>)
 80028c2:	f001 ff9d 	bl	8004800 <HAL_I2C_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028cc:	f001 f97e 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000494 	.word	0x20000494
 80028d8:	40005400 	.word	0x40005400
 80028dc:	000186a0 	.word	0x000186a0

080028e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <MX_SPI1_Init+0x64>)
 80028e6:	4a18      	ldr	r2, [pc, #96]	; (8002948 <MX_SPI1_Init+0x68>)
 80028e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <MX_SPI1_Init+0x64>)
 80028ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_SPI1_Init+0x64>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <MX_SPI1_Init+0x64>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <MX_SPI1_Init+0x64>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <MX_SPI1_Init+0x64>)
 8002906:	2200      	movs	r2, #0
 8002908:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <MX_SPI1_Init+0x64>)
 800290c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002910:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <MX_SPI1_Init+0x64>)
 8002914:	2208      	movs	r2, #8
 8002916:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <MX_SPI1_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <MX_SPI1_Init+0x64>)
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <MX_SPI1_Init+0x64>)
 8002926:	2200      	movs	r2, #0
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <MX_SPI1_Init+0x64>)
 800292c:	220a      	movs	r2, #10
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002930:	4804      	ldr	r0, [pc, #16]	; (8002944 <MX_SPI1_Init+0x64>)
 8002932:	f004 f875 	bl	8006a20 <HAL_SPI_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800293c:	f001 f946 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200004e8 	.word	0x200004e8
 8002948:	40013000 	.word	0x40013000

0800294c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002960:	463b      	mov	r3, r7
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <MX_TIM2_Init+0x94>)
 800296a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800296e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <MX_TIM2_Init+0x94>)
 8002972:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <MX_TIM2_Init+0x94>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <MX_TIM2_Init+0x94>)
 8002980:	220a      	movs	r2, #10
 8002982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <MX_TIM2_Init+0x94>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <MX_TIM2_Init+0x94>)
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002990:	4813      	ldr	r0, [pc, #76]	; (80029e0 <MX_TIM2_Init+0x94>)
 8002992:	f004 fbaf 	bl	80070f4 <HAL_TIM_Base_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800299c:	f001 f916 	bl	8003bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029a6:	f107 0308 	add.w	r3, r7, #8
 80029aa:	4619      	mov	r1, r3
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <MX_TIM2_Init+0x94>)
 80029ae:	f004 fd4b 	bl	8007448 <HAL_TIM_ConfigClockSource>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029b8:	f001 f908 	bl	8003bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c4:	463b      	mov	r3, r7
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_TIM2_Init+0x94>)
 80029ca:	f004 ff1d 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029d4:	f001 f8fa 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000540 	.word	0x20000540

080029e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <MX_USART1_UART_Init+0x50>)
 80029ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 80029f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a1c:	f004 ff64 	bl	80078e8 <HAL_UART_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a26:	f001 f8d1 	bl	8003bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000588 	.word	0x20000588
 8002a34:	40013800 	.word	0x40013800

08002a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	4a4e      	ldr	r2, [pc, #312]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	6193      	str	r3, [r2, #24]
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a64:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4a48      	ldr	r2, [pc, #288]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a6a:	f043 0320 	orr.w	r3, r3, #32
 8002a6e:	6193      	str	r3, [r2, #24]
 8002a70:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7c:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4a42      	ldr	r2, [pc, #264]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	6193      	str	r3, [r2, #24]
 8002a88:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a94:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a3c      	ldr	r2, [pc, #240]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <MX_GPIO_Init+0x154>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002aac:	2201      	movs	r2, #1
 8002aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ab2:	4837      	ldr	r0, [pc, #220]	; (8002b90 <MX_GPIO_Init+0x158>)
 8002ab4:	f001 fe73 	bl	800479e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002abe:	4835      	ldr	r0, [pc, #212]	; (8002b94 <MX_GPIO_Init+0x15c>)
 8002ac0:	f001 fe6d 	bl	800479e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002aca:	4833      	ldr	r0, [pc, #204]	; (8002b98 <MX_GPIO_Init+0x160>)
 8002acc:	f001 fe67 	bl	800479e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4829      	ldr	r0, [pc, #164]	; (8002b90 <MX_GPIO_Init+0x158>)
 8002aea:	f001 fcbd 	bl	8004468 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_4_Pin KEY_3_Pin KEY_2_Pin KEY_1_Pin */
  GPIO_InitStruct.Pin = KEY_4_Pin|KEY_3_Pin|KEY_2_Pin|KEY_1_Pin;
 8002aee:	231e      	movs	r3, #30
 8002af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <MX_GPIO_Init+0x164>)
 8002af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	4619      	mov	r1, r3
 8002b00:	4825      	ldr	r0, [pc, #148]	; (8002b98 <MX_GPIO_Init+0x160>)
 8002b02:	f001 fcb1 	bl	8004468 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 0310 	add.w	r3, r7, #16
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	481d      	ldr	r0, [pc, #116]	; (8002b94 <MX_GPIO_Init+0x15c>)
 8002b20:	f001 fca2 	bl	8004468 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8002b24:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 0310 	add.w	r3, r7, #16
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4816      	ldr	r0, [pc, #88]	; (8002b98 <MX_GPIO_Init+0x160>)
 8002b3e:	f001 fc93 	bl	8004468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2105      	movs	r1, #5
 8002b46:	2007      	movs	r0, #7
 8002b48:	f001 fbb3 	bl	80042b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b4c:	2007      	movs	r0, #7
 8002b4e:	f001 fbcc 	bl	80042ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2105      	movs	r1, #5
 8002b56:	2008      	movs	r0, #8
 8002b58:	f001 fbab 	bl	80042b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b5c:	2008      	movs	r0, #8
 8002b5e:	f001 fbc4 	bl	80042ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2105      	movs	r1, #5
 8002b66:	2009      	movs	r0, #9
 8002b68:	f001 fba3 	bl	80042b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b6c:	2009      	movs	r0, #9
 8002b6e:	f001 fbbc 	bl	80042ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2105      	movs	r1, #5
 8002b76:	200a      	movs	r0, #10
 8002b78:	f001 fb9b 	bl	80042b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b7c:	200a      	movs	r0, #10
 8002b7e:	f001 fbb4 	bl	80042ea <HAL_NVIC_EnableIRQ>

}
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40011000 	.word	0x40011000
 8002b94:	40010c00 	.word	0x40010c00
 8002b98:	40010800 	.word	0x40010800
 8002b9c:	10110000 	.word	0x10110000

08002ba0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1000);
 8002ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bac:	f005 fbec 	bl	8008388 <osDelay>
 8002bb0:	e7fa      	b.n	8002ba8 <StartDefaultTask+0x8>
	...

08002bb4 <start_RTC_DS3231_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_RTC_DS3231_Task */
void start_RTC_DS3231_Task(void *argument)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

	_RTC time; 	// rtc_queueHandle

	for(;;)
	{
		if(xQueueReceive(new_rtc_queueHandle , &QUEUE_NEW_RTC_t, 0) == pdTRUE)			// Waiting to new rts time and data
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <start_RTC_DS3231_Task+0xc8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f107 0110 	add.w	r1, r7, #16
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f006 fc9c 	bl	8009504 <xQueueReceive>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d121      	bne.n	8002c16 <start_RTC_DS3231_Task+0x62>
		{
			// Set new time and data
			time.Year = QUEUE_NEW_RTC_t.Year;
 8002bd2:	7c3b      	ldrb	r3, [r7, #16]
 8002bd4:	723b      	strb	r3, [r7, #8]
			time.Month = QUEUE_NEW_RTC_t.Month;
 8002bd6:	7c7b      	ldrb	r3, [r7, #17]
 8002bd8:	727b      	strb	r3, [r7, #9]
			time.Date = QUEUE_NEW_RTC_t.Date ;
 8002bda:	7cbb      	ldrb	r3, [r7, #18]
 8002bdc:	72bb      	strb	r3, [r7, #10]
			time.DaysOfWeek = QUEUE_NEW_RTC_t.DaysOfWeek;
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	72fb      	strb	r3, [r7, #11]
			time.Hour = QUEUE_NEW_RTC_t.Hour;
 8002be2:	7d3b      	ldrb	r3, [r7, #20]
 8002be4:	733b      	strb	r3, [r7, #12]
			time.Min = QUEUE_NEW_RTC_t.Min;
 8002be6:	7d7b      	ldrb	r3, [r7, #21]
 8002be8:	737b      	strb	r3, [r7, #13]
			time.Sec = QUEUE_NEW_RTC_t.Sec;
 8002bea:	7dbb      	ldrb	r3, [r7, #22]
 8002bec:	73bb      	strb	r3, [r7, #14]

			if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <start_RTC_DS3231_Task+0xcc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f005 fc8f 	bl	8008518 <osMutexAcquire>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d104      	bne.n	8002c0a <start_RTC_DS3231_Task+0x56>
			{
				DS3231_SetTime(&time);
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fc25 	bl	8002454 <DS3231_SetTime>
			}
			osMutexRelease(I2C_MutexHandle);
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <start_RTC_DS3231_Task+0xcc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f005 fce0 	bl	80085d4 <osMutexRelease>
 8002c14:	e02d      	b.n	8002c72 <start_RTC_DS3231_Task+0xbe>

		}
		else																			// If no new data - show current time
		{
			if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <start_RTC_DS3231_Task+0xcc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f005 fc7b 	bl	8008518 <osMutexAcquire>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <start_RTC_DS3231_Task+0x7e>
			{
				DS3231_GetTime(&time);
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fb95 	bl	800235c <DS3231_GetTime>
			}
			osMutexRelease(I2C_MutexHandle);
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <start_RTC_DS3231_Task+0xcc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f005 fccc 	bl	80085d4 <osMutexRelease>

			// Fill in structure of queue
			QUEUE_RTC_t.Year = time.Year;
 8002c3c:	7a3b      	ldrb	r3, [r7, #8]
 8002c3e:	763b      	strb	r3, [r7, #24]
			QUEUE_RTC_t.Month = time.Month;
 8002c40:	7a7b      	ldrb	r3, [r7, #9]
 8002c42:	767b      	strb	r3, [r7, #25]
			QUEUE_RTC_t.Date = time.Date;
 8002c44:	7abb      	ldrb	r3, [r7, #10]
 8002c46:	76bb      	strb	r3, [r7, #26]
			QUEUE_RTC_t.DaysOfWeek = time.DaysOfWeek;
 8002c48:	7afb      	ldrb	r3, [r7, #11]
 8002c4a:	76fb      	strb	r3, [r7, #27]
			QUEUE_RTC_t.Hour = time.Hour;
 8002c4c:	7b3b      	ldrb	r3, [r7, #12]
 8002c4e:	773b      	strb	r3, [r7, #28]
			QUEUE_RTC_t.Min = time.Min;
 8002c50:	7b7b      	ldrb	r3, [r7, #13]
 8002c52:	777b      	strb	r3, [r7, #29]
			QUEUE_RTC_t.Sec = time.Sec;
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	77bb      	strb	r3, [r7, #30]

			if(xQueueSend(rtc_queueHandle, &QUEUE_RTC_t, 0) != pdPASS)					// Send current time over queue
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <start_RTC_DS3231_Task+0xd0>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	f107 0118 	add.w	r1, r7, #24
 8002c60:	2300      	movs	r3, #0
 8002c62:	2200      	movs	r2, #0
 8002c64:	f006 fa2a 	bl	80090bc <xQueueGenericSend>
			{
				// ERROR
			}
			// Give semaphore
			osSemaphoreRelease(LCD_SemHandle);		// Let print time and date on start_LCD_Task
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <start_RTC_DS3231_Task+0xd4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f005 fe03 	bl	8008878 <osSemaphoreRelease>
		}
		osDelay(1000);
 8002c72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c76:	f005 fb87 	bl	8008388 <osDelay>
		if(xQueueReceive(new_rtc_queueHandle , &QUEUE_NEW_RTC_t, 0) == pdTRUE)			// Waiting to new rts time and data
 8002c7a:	e79f      	b.n	8002bbc <start_RTC_DS3231_Task+0x8>
 8002c7c:	20000f18 	.word	0x20000f18
 8002c80:	20000fd4 	.word	0x20000fd4
 8002c84:	20000eb4 	.word	0x20000eb4
 8002c88:	20000fd8 	.word	0x20000fd8

08002c8c <start_BPE280_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_BPE280_Task */
void start_BPE280_Task(void *argument)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b098      	sub	sp, #96	; 0x60
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	QUEUE_BME280 QUEUE_BME280_t;
	BMP280_HandleTypedef bmp280;
	float pressure, temperature, humidity;

	// Init BME280
	if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <start_BPE280_Task+0xdc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f005 fc3c 	bl	8008518 <osMutexAcquire>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d122      	bne.n	8002cec <start_BPE280_Task+0x60>
	{
		bmp280_init_default_params(&bmp280.params);
 8002ca6:	f107 0318 	add.w	r3, r7, #24
 8002caa:	332c      	adds	r3, #44	; 0x2c
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe fd1d 	bl	80016ec <bmp280_init_default_params>
		bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002cb2:	2376      	movs	r3, #118	; 0x76
 8002cb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
		bmp280.i2c = &hi2c1;
 8002cb6:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <start_BPE280_Task+0xe0>)
 8002cb8:	643b      	str	r3, [r7, #64]	; 0x40

		if(bmp280_init(&bmp280, &bmp280.params) != true)
 8002cba:	f107 0318 	add.w	r3, r7, #24
 8002cbe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002cc2:	f107 0318 	add.w	r3, r7, #24
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fe88 	bl	80019de <bmp280_init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f083 0301 	eor.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d000      	beq.n	8002cdc <start_BPE280_Task+0x50>
		{
			while(1){}   								// ERROR
 8002cda:	e7fe      	b.n	8002cda <start_BPE280_Task+0x4e>
		}

		bool bme280p = bmp280.id == BME280_CHIP_ID;
 8002cdc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002ce0:	2b60      	cmp	r3, #96	; 0x60
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}
	osMutexRelease(I2C_MutexHandle);
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <start_BPE280_Task+0xdc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f005 fc6f 	bl	80085d4 <osMutexRelease>


	for(;;)
	{
		if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <start_BPE280_Task+0xdc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f005 fc0b 	bl	8008518 <osMutexAcquire>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d124      	bne.n	8002d52 <start_BPE280_Task+0xc6>
		{
			if((bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) != true)
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	f107 0214 	add.w	r2, r7, #20
 8002d10:	f107 0110 	add.w	r1, r7, #16
 8002d14:	f107 0018 	add.w	r0, r7, #24
 8002d18:	f7ff fac4 	bl	80022a4 <bmp280_read_float>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f083 0301 	eor.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d000      	beq.n	8002d2a <start_BPE280_Task+0x9e>
			{
				while(1){}								// ERROR
 8002d28:	e7fe      	b.n	8002d28 <start_BPE280_Task+0x9c>
			}
			else										// IF all okay. Send data into QUEUE to the main task
			{
				// Fill in fields of struct
				QUEUE_BME280_t.temperature = temperature;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	653b      	str	r3, [r7, #80]	; 0x50
				QUEUE_BME280_t.humidity = humidity;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	657b      	str	r3, [r7, #84]	; 0x54
				QUEUE_BME280_t.pressure = pressure;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	64fb      	str	r3, [r7, #76]	; 0x4c

				int status_queue = xQueueSend(THPQueueHandle, &QUEUE_BME280_t, 0);		// Send data into queue
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <start_BPE280_Task+0xe4>)
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2200      	movs	r2, #0
 8002d42:	f006 f9bb 	bl	80090bc <xQueueGenericSend>
 8002d46:	65b8      	str	r0, [r7, #88]	; 0x58
				if(status_queue != pdPASS)
				{
					// ERROR
				}
				// Give semaphore
				osSemaphoreRelease(LCD_SemHandle);		// Let print T, H and P on start_LCD_Task
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <start_BPE280_Task+0xe8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f005 fd93 	bl	8008878 <osSemaphoreRelease>
			}
		}
		osMutexRelease(I2C_MutexHandle);
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <start_BPE280_Task+0xdc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f005 fc3c 	bl	80085d4 <osMutexRelease>

		osDelay(5000);
 8002d5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d60:	f005 fb12 	bl	8008388 <osDelay>
		if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002d64:	e7c7      	b.n	8002cf6 <start_BPE280_Task+0x6a>
 8002d66:	bf00      	nop
 8002d68:	20000fd4 	.word	0x20000fd4
 8002d6c:	20000494 	.word	0x20000494
 8002d70:	20000e3c 	.word	0x20000e3c
 8002d74:	20000fd8 	.word	0x20000fd8

08002d78 <start_SET_RTS_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_SET_RTS_TASK */
void start_SET_RTS_TASK(void *argument)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  for(;;)
  {


	  uint16_t pressed_key, status_queue = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	83fb      	strh	r3, [r7, #30]
	  status_queue = xQueueReceive( buttonQueueHandle , &pressed_key, 0 );
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <start_SET_RTS_TASK+0x68>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f107 010a 	add.w	r1, r7, #10
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f006 fbb8 	bl	8009504 <xQueueReceive>
 8002d94:	4603      	mov	r3, r0
 8002d96:	83fb      	strh	r3, [r7, #30]
	  if (status_queue == pdTRUE)
 8002d98:	8bfb      	ldrh	r3, [r7, #30]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d11b      	bne.n	8002dd6 <start_SET_RTS_TASK+0x5e>
	  {
		  if(pressed_key == 1)
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d118      	bne.n	8002dd6 <start_SET_RTS_TASK+0x5e>
		  {
				QUEUE_NEW_RTC_t.Year = 11;
 8002da4:	230b      	movs	r3, #11
 8002da6:	733b      	strb	r3, [r7, #12]
				QUEUE_NEW_RTC_t.Month = 11;
 8002da8:	230b      	movs	r3, #11
 8002daa:	737b      	strb	r3, [r7, #13]
				QUEUE_NEW_RTC_t.Date = 11;
 8002dac:	230b      	movs	r3, #11
 8002dae:	73bb      	strb	r3, [r7, #14]
				QUEUE_NEW_RTC_t.DaysOfWeek = 11;
 8002db0:	230b      	movs	r3, #11
 8002db2:	73fb      	strb	r3, [r7, #15]
				QUEUE_NEW_RTC_t.Hour = 11;
 8002db4:	230b      	movs	r3, #11
 8002db6:	743b      	strb	r3, [r7, #16]
				QUEUE_NEW_RTC_t.Min = 11;
 8002db8:	230b      	movs	r3, #11
 8002dba:	747b      	strb	r3, [r7, #17]
				QUEUE_NEW_RTC_t.Sec = 11;
 8002dbc:	230b      	movs	r3, #11
 8002dbe:	74bb      	strb	r3, [r7, #18]

				if(xQueueSend(new_rtc_queueHandle, &QUEUE_NEW_RTC_t, 0) != pdPASS)
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <start_SET_RTS_TASK+0x6c>)
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	f107 010c 	add.w	r1, r7, #12
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f006 f976 	bl	80090bc <xQueueGenericSend>
				{
					// ERROR
				}

				print_first_time_on_lcd_flag = true;
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <start_SET_RTS_TASK+0x70>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  osDelay(1000);
 8002dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dda:	f005 fad5 	bl	8008388 <osDelay>
  {
 8002dde:	e7cf      	b.n	8002d80 <start_SET_RTS_TASK+0x8>
 8002de0:	20000e38 	.word	0x20000e38
 8002de4:	20000f18 	.word	0x20000f18
 8002de8:	20000004 	.word	0x20000004

08002dec <start_UART_USB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_UART_USB_Task */
void start_UART_USB_Task(void *argument)
{
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002df8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002dfc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN start_UART_USB_Task */
  /* Infinite loop */
  for(;;)
  {
	  char str_end_of_line[3] = {'\r','\n'};
 8002dfe:	4a9f      	ldr	r2, [pc, #636]	; (800307c <start_UART_USB_Task+0x290>)
 8002e00:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	4611      	mov	r1, r2
 8002e08:	8019      	strh	r1, [r3, #0]
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	0c12      	lsrs	r2, r2, #16
 8002e0e:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8002e10:	232d      	movs	r3, #45	; 0x2d
 8002e12:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8002e1c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8002e26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f009 fa41 	bl	800c2b8 <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8002e36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd f988 	bl	8000150 <strlen>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a8d      	ldr	r2, [pc, #564]	; (8003080 <start_UART_USB_Task+0x294>)
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	4614      	mov	r4, r2
 8002e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e52:	6028      	str	r0, [r5, #0]
 8002e54:	6069      	str	r1, [r5, #4]
 8002e56:	60aa      	str	r2, [r5, #8]
 8002e58:	60eb      	str	r3, [r5, #12]
 8002e5a:	cc03      	ldmia	r4!, {r0, r1}
 8002e5c:	6128      	str	r0, [r5, #16]
 8002e5e:	6169      	str	r1, [r5, #20]
 8002e60:	7823      	ldrb	r3, [r4, #0]
 8002e62:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8002e64:	f009 f910 	bl	800c088 <xPortGetFreeHeapSize>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b85      	ldr	r3, [pc, #532]	; (8003084 <start_UART_USB_Task+0x298>)
 8002e6e:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8002e70:	4b84      	ldr	r3, [pc, #528]	; (8003084 <start_UART_USB_Task+0x298>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002e78:	220a      	movs	r2, #10
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f009 fa0a 	bl	800c294 <itoa>
	  strcat(msg.Buf, buff);
 8002e80:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002e84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f009 fb4a 	bl	800c524 <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8002e90:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8002e94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f009 fb42 	bl	800c524 <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8002ea0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd f953 	bl	8000150 <strlen>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a74      	ldr	r2, [pc, #464]	; (8003088 <start_UART_USB_Task+0x29c>)
 8002eb6:	4614      	mov	r4, r2
 8002eb8:	469c      	mov	ip, r3
 8002eba:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002ebe:	4665      	mov	r5, ip
 8002ec0:	4626      	mov	r6, r4
 8002ec2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ec4:	6028      	str	r0, [r5, #0]
 8002ec6:	6069      	str	r1, [r5, #4]
 8002ec8:	60aa      	str	r2, [r5, #8]
 8002eca:	60eb      	str	r3, [r5, #12]
 8002ecc:	3410      	adds	r4, #16
 8002ece:	f10c 0c10 	add.w	ip, ip, #16
 8002ed2:	4574      	cmp	r4, lr
 8002ed4:	d1f3      	bne.n	8002ebe <start_UART_USB_Task+0xd2>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8002ed6:	486d      	ldr	r0, [pc, #436]	; (800308c <start_UART_USB_Task+0x2a0>)
 8002ed8:	f008 f92e 	bl	800b138 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002ee2:	e004      	b.n	8002eee <start_UART_USB_Task+0x102>
	  {
		  buffer_size ++;
 8002ee4:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002eee:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002ef2:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002ef6:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8002efa:	5cd3      	ldrb	r3, [r2, r3]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f1      	bne.n	8002ee4 <start_UART_USB_Task+0xf8>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002f0c:	e013      	b.n	8002f36 <start_UART_USB_Task+0x14a>
	  {
		  // add data to queue
		  msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002f0e:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002f12:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002f16:	4413      	add	r3, r2
 8002f18:	495c      	ldr	r1, [pc, #368]	; (800308c <start_UART_USB_Task+0x2a0>)
 8002f1a:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002f1e:	440a      	add	r2, r1
 8002f20:	7811      	ldrb	r1, [r2, #0]
 8002f22:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002f26:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8002f2a:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002f2c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002f30:	3301      	adds	r3, #1
 8002f32:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002f36:	4a55      	ldr	r2, [pc, #340]	; (800308c <start_UART_USB_Task+0x2a0>)
 8002f38:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002f3c:	4413      	add	r3, r2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e4      	bne.n	8002f0e <start_UART_USB_Task+0x122>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8002f44:	4b52      	ldr	r3, [pc, #328]	; (8003090 <start_UART_USB_Task+0x2a4>)
 8002f46:	f207 4434 	addw	r4, r7, #1076	; 0x434
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f54:	c403      	stmia	r4!, {r0, r1}
 8002f56:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8002f58:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002f5c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8002f60:	4a4c      	ldr	r2, [pc, #304]	; (8003094 <start_UART_USB_Task+0x2a8>)
 8002f62:	461c      	mov	r4, r3
 8002f64:	4615      	mov	r5, r2
 8002f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f72:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 8002f76:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8002f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f009 facf 	bl	800c524 <strcat>
	  strcat(msg.Buf, str_head_2);
 8002f86:	f107 020c 	add.w	r2, r7, #12
 8002f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f009 fac7 	bl	800c524 <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8002f96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	483b      	ldr	r0, [pc, #236]	; (800308c <start_UART_USB_Task+0x2a0>)
 8002f9e:	f009 f98b 	bl	800c2b8 <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8002fa2:	483a      	ldr	r0, [pc, #232]	; (800308c <start_UART_USB_Task+0x2a0>)
 8002fa4:	f008 f960 	bl	800b268 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 8002fa8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002fb2:	4413      	add	r3, r2
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3340      	adds	r3, #64	; 0x40
 8002fb8:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002fc2:	e013      	b.n	8002fec <start_UART_USB_Task+0x200>
	  {
		  // add data to queue
		  msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002fc4:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002fc8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002fcc:	4413      	add	r3, r2
 8002fce:	492f      	ldr	r1, [pc, #188]	; (800308c <start_UART_USB_Task+0x2a0>)
 8002fd0:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002fd4:	440a      	add	r2, r1
 8002fd6:	7811      	ldrb	r1, [r2, #0]
 8002fd8:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002fdc:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8002fe0:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002fe2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002fec:	4a27      	ldr	r2, [pc, #156]	; (800308c <start_UART_USB_Task+0x2a0>)
 8002fee:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e4      	bne.n	8002fc4 <start_UART_USB_Task+0x1d8>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8002ffa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd f8a6 	bl	8000150 <strlen>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800300c:	4413      	add	r3, r2
 800300e:	4a22      	ldr	r2, [pc, #136]	; (8003098 <start_UART_USB_Task+0x2ac>)
 8003010:	4614      	mov	r4, r2
 8003012:	469c      	mov	ip, r3
 8003014:	f104 0e20 	add.w	lr, r4, #32
 8003018:	4665      	mov	r5, ip
 800301a:	4626      	mov	r6, r4
 800301c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800301e:	6028      	str	r0, [r5, #0]
 8003020:	6069      	str	r1, [r5, #4]
 8003022:	60aa      	str	r2, [r5, #8]
 8003024:	60eb      	str	r3, [r5, #12]
 8003026:	3410      	adds	r4, #16
 8003028:	f10c 0c10 	add.w	ip, ip, #16
 800302c:	4574      	cmp	r4, lr
 800302e:	d1f3      	bne.n	8003018 <start_UART_USB_Task+0x22c>
 8003030:	4665      	mov	r5, ip
 8003032:	4623      	mov	r3, r4
 8003034:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003036:	6028      	str	r0, [r5, #0]
 8003038:	6069      	str	r1, [r5, #4]
 800303a:	60aa      	str	r2, [r5, #8]

	  buffer_size = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8003042:	e004      	b.n	800304e <start_UART_USB_Task+0x262>
	  {
		  buffer_size ++;
 8003044:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003048:	3301      	adds	r3, #1
 800304a:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 800304e:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003052:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8003056:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f1      	bne.n	8003044 <start_UART_USB_Task+0x258>
	  }
	  // Transmit over virtual comport
	  HAL_UART_Transmit_IT( &huart1, msg.Buf, buffer_size);
 8003060:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8003064:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003068:	4619      	mov	r1, r3
 800306a:	480c      	ldr	r0, [pc, #48]	; (800309c <start_UART_USB_Task+0x2b0>)
 800306c:	f004 fc89 	bl	8007982 <HAL_UART_Transmit_IT>

	  osDelay(3000);
 8003070:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003074:	f005 f988 	bl	8008388 <osDelay>
  {
 8003078:	e6c1      	b.n	8002dfe <start_UART_USB_Task+0x12>
 800307a:	bf00      	nop
 800307c:	0800ce94 	.word	0x0800ce94
 8003080:	0800ce18 	.word	0x0800ce18
 8003084:	20000488 	.word	0x20000488
 8003088:	0800ce34 	.word	0x0800ce34
 800308c:	200000a0 	.word	0x200000a0
 8003090:	0800ce98 	.word	0x0800ce98
 8003094:	0800ceb4 	.word	0x0800ceb4
 8003098:	0800ce68 	.word	0x0800ce68
 800309c:	20000588 	.word	0x20000588

080030a0 <start_LCD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_LCD_Task */
void start_LCD_Task(void *argument)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b0b4      	sub	sp, #208	; 0xd0
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]


	QUEUE_BME280 QUEUE_BME280_t;
	QUEUE_RTC QUEUE_RTC_t;

	char str_hour[4] = {0};
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	char str_minute[4] = {0};
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char str_msecond[4] = {0};
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	char str_buf[6] = {0};
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	char str_date[15] = {0};
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	f8c3 2007 	str.w	r2, [r3, #7]
	char str_time_buf[10] = {0};
 80030da:	2300      	movs	r3, #0
 80030dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	809a      	strh	r2, [r3, #4]

	bool two_point = true;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
//	static bool print_first_time_on_lcd_flag = true;

	ILI9341_Reset();
 80030ee:	f7fd feeb 	bl	8000ec8 <ILI9341_Reset>
	ILI9341_Init();
 80030f2:	f7fd ff67 	bl	8000fc4 <ILI9341_Init>
	ILI9341_Fill_Screen(BLACK);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fe f912 	bl	8001320 <ILI9341_Fill_Screen>

	osDelay(1000);
 80030fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003100:	f005 f942 	bl	8008388 <osDelay>

	// Draw static lines
	ILI9341_Draw_Hollow_Rectangle_Coord(0, 0, 319, 150, BLUE);
 8003104:	231f      	movs	r3, #31
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2396      	movs	r3, #150	; 0x96
 800310a:	f240 123f 	movw	r2, #319	; 0x13f
 800310e:	2100      	movs	r1, #0
 8003110:	2000      	movs	r0, #0
 8003112:	f7fd fcdb 	bl	8000acc <ILI9341_Draw_Hollow_Rectangle_Coord>
//
//
//		}


		osStatus_t status = osSemaphoreAcquire(LCD_SemHandle, 10);
 8003116:	4bc0      	ldr	r3, [pc, #768]	; (8003418 <start_LCD_Task+0x378>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	210a      	movs	r1, #10
 800311c:	4618      	mov	r0, r3
 800311e:	f005 fb45 	bl	80087ac <osSemaphoreAcquire>
 8003122:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
		if(status == 0)
 8003126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 850f 	bne.w	8003b4e <start_LCD_Task+0xaae>
		// If data from BME280 is ready print T, H and  P
		// Waiting semaphore from
//		osStatus_t status = osSemaphoreAcquire(print_THPSemHandle, 0);
//		if(status == 0)
//		{
			if((xQueueReceive(THPQueueHandle, &QUEUE_BME280_t, 0)) == pdTRUE)
 8003130:	4bba      	ldr	r3, [pc, #744]	; (800341c <start_LCD_Task+0x37c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003138:	2200      	movs	r2, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f006 f9e2 	bl	8009504 <xQueueReceive>
 8003140:	4603      	mov	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	f040 80d6 	bne.w	80032f4 <start_LCD_Task+0x254>
			{
				// Print T, H and  P on LCD
				char str_temperature[5] = {0};
 8003148:	2300      	movs	r3, #0
 800314a:	677b      	str	r3, [r7, #116]	; 0x74
 800314c:	2300      	movs	r3, #0
 800314e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
				char str_humidity[5] = {0};
 8003152:	2300      	movs	r3, #0
 8003154:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003156:	2300      	movs	r3, #0
 8003158:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
				char str_preassure[10] = {0};
 800315c:	2300      	movs	r3, #0
 800315e:	663b      	str	r3, [r7, #96]	; 0x60
 8003160:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	809a      	strh	r2, [r3, #4]

				//int preasure = QUEUE_BME280_t.pressure;
				sprintf(str_temperature, "%d", (int)QUEUE_BME280_t.temperature);
 800316a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd faca 	bl	8000708 <__aeabi_f2iz>
 8003174:	4602      	mov	r2, r0
 8003176:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800317a:	49a9      	ldr	r1, [pc, #676]	; (8003420 <start_LCD_Task+0x380>)
 800317c:	4618      	mov	r0, r3
 800317e:	f009 f9b1 	bl	800c4e4 <siprintf>
				char strthp_buf_t[1] = {0};
 8003182:	2300      	movs	r3, #0
 8003184:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
				strncat(strthp_buf_t, "T:", 2);
 8003188:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800318c:	4618      	mov	r0, r3
 800318e:	f7fc ffdf 	bl	8000150 <strlen>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800319a:	4413      	add	r3, r2
 800319c:	4aa1      	ldr	r2, [pc, #644]	; (8003424 <start_LCD_Task+0x384>)
 800319e:	8811      	ldrh	r1, [r2, #0]
 80031a0:	7892      	ldrb	r2, [r2, #2]
 80031a2:	8019      	strh	r1, [r3, #0]
 80031a4:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_t, str_temperature, sizeof(str_temperature));
 80031a6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80031aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031ae:	2205      	movs	r2, #5
 80031b0:	4618      	mov	r0, r3
 80031b2:	f009 f9ce 	bl	800c552 <strncat>
				strncat(strthp_buf_t, " C", 2);
 80031b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fc ffc8 	bl	8000150 <strlen>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031c8:	4413      	add	r3, r2
 80031ca:	4a97      	ldr	r2, [pc, #604]	; (8003428 <start_LCD_Task+0x388>)
 80031cc:	8811      	ldrh	r1, [r2, #0]
 80031ce:	7892      	ldrb	r2, [r2, #2]
 80031d0:	8019      	strh	r1, [r3, #0]
 80031d2:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_t, 10, 160, YELLOW, 2, BLACK);
 80031d4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80031d8:	2300      	movs	r3, #0
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	2302      	movs	r3, #2
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031e4:	22a0      	movs	r2, #160	; 0xa0
 80031e6:	210a      	movs	r1, #10
 80031e8:	f7fd fd8c 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_humidity, "%d", (int)QUEUE_BME280_t.humidity);
 80031ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd fa89 	bl	8000708 <__aeabi_f2iz>
 80031f6:	4602      	mov	r2, r0
 80031f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031fc:	4988      	ldr	r1, [pc, #544]	; (8003420 <start_LCD_Task+0x380>)
 80031fe:	4618      	mov	r0, r3
 8003200:	f009 f970 	bl	800c4e4 <siprintf>
				char strthp_buf_h[10] = {0};
 8003204:	2300      	movs	r3, #0
 8003206:	653b      	str	r3, [r7, #80]	; 0x50
 8003208:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	809a      	strh	r2, [r3, #4]
				strncat(strthp_buf_h, "H:", 2);
 8003212:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003216:	4618      	mov	r0, r3
 8003218:	f7fc ff9a 	bl	8000150 <strlen>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003224:	4413      	add	r3, r2
 8003226:	4a81      	ldr	r2, [pc, #516]	; (800342c <start_LCD_Task+0x38c>)
 8003228:	8811      	ldrh	r1, [r2, #0]
 800322a:	7892      	ldrb	r2, [r2, #2]
 800322c:	8019      	strh	r1, [r3, #0]
 800322e:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_h, str_humidity, sizeof(str_humidity));
 8003230:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003234:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003238:	2205      	movs	r2, #5
 800323a:	4618      	mov	r0, r3
 800323c:	f009 f989 	bl	800c552 <strncat>
				strncat(strthp_buf_h, " %", 2);
 8003240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003244:	4618      	mov	r0, r3
 8003246:	f7fc ff83 	bl	8000150 <strlen>
 800324a:	4603      	mov	r3, r0
 800324c:	461a      	mov	r2, r3
 800324e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003252:	4413      	add	r3, r2
 8003254:	4a76      	ldr	r2, [pc, #472]	; (8003430 <start_LCD_Task+0x390>)
 8003256:	8811      	ldrh	r1, [r2, #0]
 8003258:	7892      	ldrb	r2, [r2, #2]
 800325a:	8019      	strh	r1, [r3, #0]
 800325c:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_h, 10, 180, YELLOW, 2, BLACK);
 800325e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003262:	2300      	movs	r3, #0
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	2302      	movs	r3, #2
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800326e:	22b4      	movs	r2, #180	; 0xb4
 8003270:	210a      	movs	r1, #10
 8003272:	f7fd fd47 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_preassure, "%d", (int)QUEUE_BME280_t.pressure);
 8003276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fa44 	bl	8000708 <__aeabi_f2iz>
 8003280:	4602      	mov	r2, r0
 8003282:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003286:	4966      	ldr	r1, [pc, #408]	; (8003420 <start_LCD_Task+0x380>)
 8003288:	4618      	mov	r0, r3
 800328a:	f009 f92b 	bl	800c4e4 <siprintf>
				char strthp_buf_p[17] = {0};
 800328e:	2300      	movs	r3, #0
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003292:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	731a      	strb	r2, [r3, #12]
				strncat(strthp_buf_p, "P:", 2);
 80032a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fc ff53 	bl	8000150 <strlen>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032b2:	4413      	add	r3, r2
 80032b4:	4a5f      	ldr	r2, [pc, #380]	; (8003434 <start_LCD_Task+0x394>)
 80032b6:	8811      	ldrh	r1, [r2, #0]
 80032b8:	7892      	ldrb	r2, [r2, #2]
 80032ba:	8019      	strh	r1, [r3, #0]
 80032bc:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_p, str_preassure, sizeof(str_preassure));
 80032be:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80032c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032c6:	220a      	movs	r2, #10
 80032c8:	4618      	mov	r0, r3
 80032ca:	f009 f942 	bl	800c552 <strncat>
				strncat(strthp_buf_p, " mmRh", 4);
 80032ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032d2:	2204      	movs	r2, #4
 80032d4:	4958      	ldr	r1, [pc, #352]	; (8003438 <start_LCD_Task+0x398>)
 80032d6:	4618      	mov	r0, r3
 80032d8:	f009 f93b 	bl	800c552 <strncat>
				ILI9341_Draw_Text(strthp_buf_p, 10, 200, YELLOW, 2, BLACK);
 80032dc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80032e0:	2300      	movs	r3, #0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	2302      	movs	r3, #2
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032ec:	22c8      	movs	r2, #200	; 0xc8
 80032ee:	210a      	movs	r1, #10
 80032f0:	f7fd fd08 	bl	8000d04 <ILI9341_Draw_Text>
		// If data from RTC  is ready print it
//		status = 99;
//		status = osSemaphoreAcquire(print_RTCSemHandle, 0);
//		if(status == 0)
//		{
			if((xQueueReceive(rtc_queueHandle, &QUEUE_RTC_t, 0) == pdPASS))
 80032f4:	4b51      	ldr	r3, [pc, #324]	; (800343c <start_LCD_Task+0x39c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80032fc:	2200      	movs	r2, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f006 f900 	bl	8009504 <xQueueReceive>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	f040 8421 	bne.w	8003b4e <start_LCD_Task+0xaae>
			{
				if((print_first_time_on_lcd_flag == true) )				// If print data firsttime
 800330c:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <start_LCD_Task+0x3a0>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8208 	beq.w	8003726 <start_LCD_Task+0x686>
				{
					sprintf(str_hour, "%d", QUEUE_RTC_t.Hour);
 8003316:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800331a:	461a      	mov	r2, r3
 800331c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003320:	493f      	ldr	r1, [pc, #252]	; (8003420 <start_LCD_Task+0x380>)
 8003322:	4618      	mov	r0, r3
 8003324:	f009 f8de 	bl	800c4e4 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 8003328:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800332c:	461a      	mov	r2, r3
 800332e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003332:	493b      	ldr	r1, [pc, #236]	; (8003420 <start_LCD_Task+0x380>)
 8003334:	4618      	mov	r0, r3
 8003336:	f009 f8d5 	bl	800c4e4 <siprintf>
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 800333a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800333e:	461a      	mov	r2, r3
 8003340:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003344:	4936      	ldr	r1, [pc, #216]	; (8003420 <start_LCD_Task+0x380>)
 8003346:	4618      	mov	r0, r3
 8003348:	f009 f8cc 	bl	800c4e4 <siprintf>

					// Updating hours  on LCD
					if(QUEUE_RTC_t.Hour < 10)
 800334c:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8003350:	2b09      	cmp	r3, #9
 8003352:	d828      	bhi.n	80033a6 <start_LCD_Task+0x306>
					{
						char hour_buff[5] = {0};
 8003354:	2300      	movs	r3, #0
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
						strncat(hour_buff, "0", 1);
 800335e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003362:	4618      	mov	r0, r3
 8003364:	f7fc fef4 	bl	8000150 <strlen>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003370:	4413      	add	r3, r2
 8003372:	4934      	ldr	r1, [pc, #208]	; (8003444 <start_LCD_Task+0x3a4>)
 8003374:	461a      	mov	r2, r3
 8003376:	460b      	mov	r3, r1
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	8013      	strh	r3, [r2, #0]
						strncat(hour_buff, str_hour, sizeof(str_hour));
 800337c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003380:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003384:	2204      	movs	r2, #4
 8003386:	4618      	mov	r0, r3
 8003388:	f009 f8e3 	bl	800c552 <strncat>
						ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 800338c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003390:	2300      	movs	r3, #0
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	230a      	movs	r3, #10
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800339c:	2201      	movs	r2, #1
 800339e:	210a      	movs	r1, #10
 80033a0:	f7fd fcb0 	bl	8000d04 <ILI9341_Draw_Text>
 80033a4:	e00b      	b.n	80033be <start_LCD_Task+0x31e>
					}
					else
					{
						ILI9341_Draw_Text(str_hour, 10, 1, GREEN, 10, BLACK);
 80033a6:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80033aa:	2300      	movs	r3, #0
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	230a      	movs	r3, #10
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033b6:	2201      	movs	r2, #1
 80033b8:	210a      	movs	r1, #10
 80033ba:	f7fd fca3 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Updating minutes on LCD
					if(QUEUE_RTC_t.Min < 10)
 80033be:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80033c2:	2b09      	cmp	r3, #9
 80033c4:	d840      	bhi.n	8003448 <start_LCD_Task+0x3a8>
					{
						char min_buff[5] = {0};
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
						strncat(min_buff, "0", 1);
 80033d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fc febb 	bl	8000150 <strlen>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e2:	4413      	add	r3, r2
 80033e4:	4917      	ldr	r1, [pc, #92]	; (8003444 <start_LCD_Task+0x3a4>)
 80033e6:	461a      	mov	r2, r3
 80033e8:	460b      	mov	r3, r1
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	8013      	strh	r3, [r2, #0]
						strncat(min_buff, str_minute, sizeof(str_minute));
 80033ee:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80033f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033f6:	2204      	movs	r2, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f009 f8aa 	bl	800c552 <strncat>
						ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 80033fe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003402:	2300      	movs	r3, #0
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	230a      	movs	r3, #10
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800340e:	2201      	movs	r2, #1
 8003410:	21c3      	movs	r1, #195	; 0xc3
 8003412:	f7fd fc77 	bl	8000d04 <ILI9341_Draw_Text>
 8003416:	e023      	b.n	8003460 <start_LCD_Task+0x3c0>
 8003418:	20000fd8 	.word	0x20000fd8
 800341c:	20000e3c 	.word	0x20000e3c
 8003420:	0800cedc 	.word	0x0800cedc
 8003424:	0800cee0 	.word	0x0800cee0
 8003428:	0800cee4 	.word	0x0800cee4
 800342c:	0800cee8 	.word	0x0800cee8
 8003430:	0800ceec 	.word	0x0800ceec
 8003434:	0800cef0 	.word	0x0800cef0
 8003438:	0800cef4 	.word	0x0800cef4
 800343c:	20000eb4 	.word	0x20000eb4
 8003440:	20000004 	.word	0x20000004
 8003444:	0800cefc 	.word	0x0800cefc
					}
					else
					{
						ILI9341_Draw_Text(str_minute, 195, 1, GREEN, 10, BLACK);
 8003448:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800344c:	2300      	movs	r3, #0
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	230a      	movs	r3, #10
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003458:	2201      	movs	r2, #1
 800345a:	21c3      	movs	r1, #195	; 0xc3
 800345c:	f7fd fc52 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Updating seconds on LCD
					if(QUEUE_RTC_t.Sec == 0)
 8003460:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <start_LCD_Task+0x3de>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 8003468:	2300      	movs	r3, #0
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	2306      	movs	r3, #6
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003474:	2255      	movs	r2, #85	; 0x55
 8003476:	21d7      	movs	r1, #215	; 0xd7
 8003478:	48d1      	ldr	r0, [pc, #836]	; (80037c0 <start_LCD_Task+0x720>)
 800347a:	f7fd fc43 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 800347e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8003482:	2b09      	cmp	r3, #9
 8003484:	d828      	bhi.n	80034d8 <start_LCD_Task+0x438>
					{
						// add '0'
						char second_buff[5] = {0};
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						strncat(second_buff, "0", 1);
 8003490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003494:	4618      	mov	r0, r3
 8003496:	f7fc fe5b 	bl	8000150 <strlen>
 800349a:	4603      	mov	r3, r0
 800349c:	461a      	mov	r2, r3
 800349e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a2:	4413      	add	r3, r2
 80034a4:	49c7      	ldr	r1, [pc, #796]	; (80037c4 <start_LCD_Task+0x724>)
 80034a6:	461a      	mov	r2, r3
 80034a8:	460b      	mov	r3, r1
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 80034ae:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80034b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b6:	2204      	movs	r2, #4
 80034b8:	4618      	mov	r0, r3
 80034ba:	f009 f84a 	bl	800c552 <strncat>
						//strncat(str_time_buf, minute_buff, sizeof(minute_buff));
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 80034be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80034c2:	2300      	movs	r3, #0
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2306      	movs	r3, #6
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034ce:	2255      	movs	r2, #85	; 0x55
 80034d0:	21d7      	movs	r1, #215	; 0xd7
 80034d2:	f7fd fc17 	bl	8000d04 <ILI9341_Draw_Text>
 80034d6:	e00b      	b.n	80034f0 <start_LCD_Task+0x450>
					}
					else
					{
						ILI9341_Draw_Text(str_msecond, 215, 85, GREEN, 6, BLACK);
 80034d8:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80034dc:	2300      	movs	r3, #0
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	2306      	movs	r3, #6
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034e8:	2255      	movs	r2, #85	; 0x55
 80034ea:	21d7      	movs	r1, #215	; 0xd7
 80034ec:	f7fd fc0a 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Draw seconds line
					ILI9341_Draw_Rectangle(10, 81, (5*QUEUE_RTC_t.Sec), 4, GREEN);
 80034f0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	0092      	lsls	r2, r2, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	2304      	movs	r3, #4
 8003506:	2151      	movs	r1, #81	; 0x51
 8003508:	200a      	movs	r0, #10
 800350a:	f7fe f80b 	bl	8001524 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 800350e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <start_LCD_Task+0x488>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 8003516:	2300      	movs	r3, #0
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	2304      	movs	r3, #4
 800351c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003520:	2151      	movs	r1, #81	; 0x51
 8003522:	200a      	movs	r0, #10
 8003524:	f7fd fffe 	bl	8001524 <ILI9341_Draw_Rectangle>
					}

					// Updating blink two points on LCD
					if(two_point == true)
 8003528:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00e      	beq.n	800354e <start_LCD_Task+0x4ae>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 8003530:	2300      	movs	r3, #0
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	230a      	movs	r3, #10
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800353c:	2201      	movs	r2, #1
 800353e:	2187      	movs	r1, #135	; 0x87
 8003540:	48a1      	ldr	r0, [pc, #644]	; (80037c8 <start_LCD_Task+0x728>)
 8003542:	f7fd fbdf 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800354c:	e00d      	b.n	800356a <start_LCD_Task+0x4ca>
					}
					else
					{
						ILI9341_Draw_Text(" ", 135, 1, GREEN, 10, BLACK);
 800354e:	2300      	movs	r3, #0
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	230a      	movs	r3, #10
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800355a:	2201      	movs	r2, #1
 800355c:	2187      	movs	r1, #135	; 0x87
 800355e:	489b      	ldr	r0, [pc, #620]	; (80037cc <start_LCD_Task+0x72c>)
 8003560:	f7fd fbd0 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
					}

					// Date
					ILI9341_Draw_Text("        ", 10, 86, BLUE, 4, BLACK);
 800356a:	2300      	movs	r3, #0
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2304      	movs	r3, #4
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	231f      	movs	r3, #31
 8003574:	2256      	movs	r2, #86	; 0x56
 8003576:	210a      	movs	r1, #10
 8003578:	4895      	ldr	r0, [pc, #596]	; (80037d0 <start_LCD_Task+0x730>)
 800357a:	f7fd fbc3 	bl	8000d04 <ILI9341_Draw_Text>
					memset(str_buf, 0 , sizeof(str_buf));
 800357e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003582:	2206      	movs	r2, #6
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f008 fe96 	bl	800c2b8 <memset>
					sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 800358c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003590:	461a      	mov	r2, r3
 8003592:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003596:	498f      	ldr	r1, [pc, #572]	; (80037d4 <start_LCD_Task+0x734>)
 8003598:	4618      	mov	r0, r3
 800359a:	f008 ffa3 	bl	800c4e4 <siprintf>

					strncat(str_date, ".", 1);
 800359e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fc fdd4 	bl	8000150 <strlen>
 80035a8:	4603      	mov	r3, r0
 80035aa:	461a      	mov	r2, r3
 80035ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035b0:	4413      	add	r3, r2
 80035b2:	4989      	ldr	r1, [pc, #548]	; (80037d8 <start_LCD_Task+0x738>)
 80035b4:	461a      	mov	r2, r3
 80035b6:	460b      	mov	r3, r1
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	8013      	strh	r3, [r2, #0]
					sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 80035bc:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80035c0:	461a      	mov	r2, r3
 80035c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035c6:	4983      	ldr	r1, [pc, #524]	; (80037d4 <start_LCD_Task+0x734>)
 80035c8:	4618      	mov	r0, r3
 80035ca:	f008 ff8b 	bl	800c4e4 <siprintf>
					strncat(str_date, str_buf, sizeof(str_buf));
 80035ce:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80035d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035d6:	2206      	movs	r2, #6
 80035d8:	4618      	mov	r0, r3
 80035da:	f008 ffba 	bl	800c552 <strncat>
					memset(str_buf, 0 , sizeof(str_buf));
 80035de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035e2:	2206      	movs	r2, #6
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f008 fe66 	bl	800c2b8 <memset>
					sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 80035ec:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80035f0:	461a      	mov	r2, r3
 80035f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035f6:	4977      	ldr	r1, [pc, #476]	; (80037d4 <start_LCD_Task+0x734>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f008 ff73 	bl	800c4e4 <siprintf>
					strncat(str_date, ".", 1);
 80035fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003602:	4618      	mov	r0, r3
 8003604:	f7fc fda4 	bl	8000150 <strlen>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003610:	4413      	add	r3, r2
 8003612:	4971      	ldr	r1, [pc, #452]	; (80037d8 <start_LCD_Task+0x738>)
 8003614:	461a      	mov	r2, r3
 8003616:	460b      	mov	r3, r1
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	8013      	strh	r3, [r2, #0]
					strncat(str_date, str_buf, sizeof(str_buf));
 800361c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003620:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003624:	2206      	movs	r2, #6
 8003626:	4618      	mov	r0, r3
 8003628:	f008 ff93 	bl	800c552 <strncat>
					ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 800362c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003630:	2300      	movs	r3, #0
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	2304      	movs	r3, #4
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	231f      	movs	r3, #31
 800363a:	2256      	movs	r2, #86	; 0x56
 800363c:	210a      	movs	r1, #10
 800363e:	f7fd fb61 	bl	8000d04 <ILI9341_Draw_Text>

					ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 8003642:	2300      	movs	r3, #0
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2302      	movs	r3, #2
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	231f      	movs	r3, #31
 800364c:	2278      	movs	r2, #120	; 0x78
 800364e:	210a      	movs	r1, #10
 8003650:	4862      	ldr	r0, [pc, #392]	; (80037dc <start_LCD_Task+0x73c>)
 8003652:	f7fd fb57 	bl	8000d04 <ILI9341_Draw_Text>

					switch (QUEUE_RTC_t.DaysOfWeek)
 8003656:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800365a:	3b01      	subs	r3, #1
 800365c:	2b06      	cmp	r3, #6
 800365e:	d85e      	bhi.n	800371e <start_LCD_Task+0x67e>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <start_LCD_Task+0x5c8>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	08003685 	.word	0x08003685
 800366c:	0800369b 	.word	0x0800369b
 8003670:	080036b1 	.word	0x080036b1
 8003674:	080036c7 	.word	0x080036c7
 8003678:	080036dd 	.word	0x080036dd
 800367c:	080036f3 	.word	0x080036f3
 8003680:	08003709 	.word	0x08003709
					{
						case 1:
							ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 8003684:	2300      	movs	r3, #0
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2302      	movs	r3, #2
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	231f      	movs	r3, #31
 800368e:	2278      	movs	r2, #120	; 0x78
 8003690:	210a      	movs	r1, #10
 8003692:	4853      	ldr	r0, [pc, #332]	; (80037e0 <start_LCD_Task+0x740>)
 8003694:	f7fd fb36 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003698:	e041      	b.n	800371e <start_LCD_Task+0x67e>
						case 2:
							ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 800369a:	2300      	movs	r3, #0
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2302      	movs	r3, #2
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	231f      	movs	r3, #31
 80036a4:	2278      	movs	r2, #120	; 0x78
 80036a6:	210a      	movs	r1, #10
 80036a8:	484e      	ldr	r0, [pc, #312]	; (80037e4 <start_LCD_Task+0x744>)
 80036aa:	f7fd fb2b 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 80036ae:	e036      	b.n	800371e <start_LCD_Task+0x67e>
						case 3:
							ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 80036b0:	2300      	movs	r3, #0
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	2302      	movs	r3, #2
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	231f      	movs	r3, #31
 80036ba:	2278      	movs	r2, #120	; 0x78
 80036bc:	210a      	movs	r1, #10
 80036be:	484a      	ldr	r0, [pc, #296]	; (80037e8 <start_LCD_Task+0x748>)
 80036c0:	f7fd fb20 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 80036c4:	e02b      	b.n	800371e <start_LCD_Task+0x67e>
						case 4:
							ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 80036c6:	2300      	movs	r3, #0
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	2302      	movs	r3, #2
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	231f      	movs	r3, #31
 80036d0:	2278      	movs	r2, #120	; 0x78
 80036d2:	210a      	movs	r1, #10
 80036d4:	4845      	ldr	r0, [pc, #276]	; (80037ec <start_LCD_Task+0x74c>)
 80036d6:	f7fd fb15 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 80036da:	e020      	b.n	800371e <start_LCD_Task+0x67e>
						case 5:
							ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 80036dc:	2300      	movs	r3, #0
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	2302      	movs	r3, #2
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	231f      	movs	r3, #31
 80036e6:	2278      	movs	r2, #120	; 0x78
 80036e8:	210a      	movs	r1, #10
 80036ea:	4841      	ldr	r0, [pc, #260]	; (80037f0 <start_LCD_Task+0x750>)
 80036ec:	f7fd fb0a 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 80036f0:	e015      	b.n	800371e <start_LCD_Task+0x67e>
						case 6:
							ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 80036f2:	2300      	movs	r3, #0
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2302      	movs	r3, #2
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	231f      	movs	r3, #31
 80036fc:	2278      	movs	r2, #120	; 0x78
 80036fe:	210a      	movs	r1, #10
 8003700:	483c      	ldr	r0, [pc, #240]	; (80037f4 <start_LCD_Task+0x754>)
 8003702:	f7fd faff 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003706:	e00a      	b.n	800371e <start_LCD_Task+0x67e>
						case 7:
							ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 8003708:	2300      	movs	r3, #0
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	2302      	movs	r3, #2
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	231f      	movs	r3, #31
 8003712:	2278      	movs	r2, #120	; 0x78
 8003714:	210a      	movs	r1, #10
 8003716:	4838      	ldr	r0, [pc, #224]	; (80037f8 <start_LCD_Task+0x758>)
 8003718:	f7fd faf4 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 800371c:	bf00      	nop
					}

					print_first_time_on_lcd_flag = false;
 800371e:	4b37      	ldr	r3, [pc, #220]	; (80037fc <start_LCD_Task+0x75c>)
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e4f7      	b.n	8003116 <start_LCD_Task+0x76>

				}
				else
				{
					sprintf(str_hour, "%d", QUEUE_RTC_t.Hour);
 8003726:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800372a:	461a      	mov	r2, r3
 800372c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003730:	4928      	ldr	r1, [pc, #160]	; (80037d4 <start_LCD_Task+0x734>)
 8003732:	4618      	mov	r0, r3
 8003734:	f008 fed6 	bl	800c4e4 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 8003738:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800373c:	461a      	mov	r2, r3
 800373e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003742:	4924      	ldr	r1, [pc, #144]	; (80037d4 <start_LCD_Task+0x734>)
 8003744:	4618      	mov	r0, r3
 8003746:	f008 fecd 	bl	800c4e4 <siprintf>
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 800374a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800374e:	461a      	mov	r2, r3
 8003750:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003754:	491f      	ldr	r1, [pc, #124]	; (80037d4 <start_LCD_Task+0x734>)
 8003756:	4618      	mov	r0, r3
 8003758:	f008 fec4 	bl	800c4e4 <siprintf>

					// Updating hours and minutes on LCD
					if(QUEUE_RTC_t.Sec == 0)
 800375c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8003760:	2b00      	cmp	r3, #0
 8003762:	f040 8091 	bne.w	8003888 <start_LCD_Task+0x7e8>
					{
						if(QUEUE_RTC_t.Min < 10)
 8003766:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800376a:	2b09      	cmp	r3, #9
 800376c:	d848      	bhi.n	8003800 <start_LCD_Task+0x760>
						{
							char min_buff[5] = {0};
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	2300      	movs	r3, #0
 8003774:	f887 3020 	strb.w	r3, [r7, #32]
							strncat(min_buff, "0", 1);
 8003778:	f107 031c 	add.w	r3, r7, #28
 800377c:	4618      	mov	r0, r3
 800377e:	f7fc fce7 	bl	8000150 <strlen>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	f107 031c 	add.w	r3, r7, #28
 800378a:	4413      	add	r3, r2
 800378c:	490d      	ldr	r1, [pc, #52]	; (80037c4 <start_LCD_Task+0x724>)
 800378e:	461a      	mov	r2, r3
 8003790:	460b      	mov	r3, r1
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	8013      	strh	r3, [r2, #0]
							strncat(min_buff, str_minute, sizeof(str_minute));
 8003796:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800379a:	f107 031c 	add.w	r3, r7, #28
 800379e:	2204      	movs	r2, #4
 80037a0:	4618      	mov	r0, r3
 80037a2:	f008 fed6 	bl	800c552 <strncat>
							ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 80037a6:	f107 001c 	add.w	r0, r7, #28
 80037aa:	2300      	movs	r3, #0
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	230a      	movs	r3, #10
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037b6:	2201      	movs	r2, #1
 80037b8:	21c3      	movs	r1, #195	; 0xc3
 80037ba:	f7fd faa3 	bl	8000d04 <ILI9341_Draw_Text>
 80037be:	e02b      	b.n	8003818 <start_LCD_Task+0x778>
 80037c0:	0800cf00 	.word	0x0800cf00
 80037c4:	0800cefc 	.word	0x0800cefc
 80037c8:	0800cf04 	.word	0x0800cf04
 80037cc:	0800cf08 	.word	0x0800cf08
 80037d0:	0800cf0c 	.word	0x0800cf0c
 80037d4:	0800cedc 	.word	0x0800cedc
 80037d8:	0800cf18 	.word	0x0800cf18
 80037dc:	0800cf1c 	.word	0x0800cf1c
 80037e0:	0800cf28 	.word	0x0800cf28
 80037e4:	0800cf30 	.word	0x0800cf30
 80037e8:	0800cf38 	.word	0x0800cf38
 80037ec:	0800cf44 	.word	0x0800cf44
 80037f0:	0800cf50 	.word	0x0800cf50
 80037f4:	0800cf58 	.word	0x0800cf58
 80037f8:	0800cf64 	.word	0x0800cf64
 80037fc:	20000004 	.word	0x20000004
						}
						else
						{
							ILI9341_Draw_Text(str_minute, 195, 1, GREEN, 10, BLACK);
 8003800:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8003804:	2300      	movs	r3, #0
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	230a      	movs	r3, #10
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003810:	2201      	movs	r2, #1
 8003812:	21c3      	movs	r1, #195	; 0xc3
 8003814:	f7fd fa76 	bl	8000d04 <ILI9341_Draw_Text>
						}

						if(QUEUE_RTC_t.Hour < 10)
 8003818:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800381c:	2b09      	cmp	r3, #9
 800381e:	d827      	bhi.n	8003870 <start_LCD_Task+0x7d0>
						{
							char hour_buff[5] = {0};
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	2300      	movs	r3, #0
 8003826:	763b      	strb	r3, [r7, #24]
							strncat(hour_buff, "0", 1);
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc fc8f 	bl	8000150 <strlen>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	f107 0314 	add.w	r3, r7, #20
 800383a:	4413      	add	r3, r2
 800383c:	49c5      	ldr	r1, [pc, #788]	; (8003b54 <start_LCD_Task+0xab4>)
 800383e:	461a      	mov	r2, r3
 8003840:	460b      	mov	r3, r1
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	8013      	strh	r3, [r2, #0]
							strncat(hour_buff, str_hour, sizeof(str_hour));
 8003846:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800384a:	f107 0314 	add.w	r3, r7, #20
 800384e:	2204      	movs	r2, #4
 8003850:	4618      	mov	r0, r3
 8003852:	f008 fe7e 	bl	800c552 <strncat>
							ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 8003856:	f107 0014 	add.w	r0, r7, #20
 800385a:	2300      	movs	r3, #0
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	230a      	movs	r3, #10
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003866:	2201      	movs	r2, #1
 8003868:	210a      	movs	r1, #10
 800386a:	f7fd fa4b 	bl	8000d04 <ILI9341_Draw_Text>
 800386e:	e00b      	b.n	8003888 <start_LCD_Task+0x7e8>
						}
						else
						{
							ILI9341_Draw_Text(str_hour, 10, 1, GREEN, 10, BLACK);
 8003870:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8003874:	2300      	movs	r3, #0
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	230a      	movs	r3, #10
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003880:	2201      	movs	r2, #1
 8003882:	210a      	movs	r1, #10
 8003884:	f7fd fa3e 	bl	8000d04 <ILI9341_Draw_Text>
						}
					}

					// Updating seconds on LCD
					if(QUEUE_RTC_t.Sec == 0)
 8003888:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <start_LCD_Task+0x806>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 8003890:	2300      	movs	r3, #0
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	2306      	movs	r3, #6
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800389c:	2255      	movs	r2, #85	; 0x55
 800389e:	21d7      	movs	r1, #215	; 0xd7
 80038a0:	48ad      	ldr	r0, [pc, #692]	; (8003b58 <start_LCD_Task+0xab8>)
 80038a2:	f7fd fa2f 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 80038a6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80038aa:	2b09      	cmp	r3, #9
 80038ac:	d827      	bhi.n	80038fe <start_LCD_Task+0x85e>
					{
						// add '0'
						char second_buff[5] = {0};
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	2300      	movs	r3, #0
 80038b4:	743b      	strb	r3, [r7, #16]
						strncat(second_buff, "0", 1);
 80038b6:	f107 030c 	add.w	r3, r7, #12
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fc48 	bl	8000150 <strlen>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461a      	mov	r2, r3
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	4413      	add	r3, r2
 80038ca:	49a2      	ldr	r1, [pc, #648]	; (8003b54 <start_LCD_Task+0xab4>)
 80038cc:	461a      	mov	r2, r3
 80038ce:	460b      	mov	r3, r1
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 80038d4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80038d8:	f107 030c 	add.w	r3, r7, #12
 80038dc:	2204      	movs	r2, #4
 80038de:	4618      	mov	r0, r3
 80038e0:	f008 fe37 	bl	800c552 <strncat>
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 80038e4:	f107 000c 	add.w	r0, r7, #12
 80038e8:	2300      	movs	r3, #0
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	2306      	movs	r3, #6
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038f4:	2255      	movs	r2, #85	; 0x55
 80038f6:	21d7      	movs	r1, #215	; 0xd7
 80038f8:	f7fd fa04 	bl	8000d04 <ILI9341_Draw_Text>
 80038fc:	e00b      	b.n	8003916 <start_LCD_Task+0x876>
					}
					else
					{
						ILI9341_Draw_Text(str_msecond, 215, 85, GREEN, 6, BLACK);
 80038fe:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8003902:	2300      	movs	r3, #0
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2306      	movs	r3, #6
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800390e:	2255      	movs	r2, #85	; 0x55
 8003910:	21d7      	movs	r1, #215	; 0xd7
 8003912:	f7fd f9f7 	bl	8000d04 <ILI9341_Draw_Text>
					}

					// Draw seconds line
					ILI9341_Draw_Rectangle(10, 81, (5*QUEUE_RTC_t.Sec), 4, GREEN);
 8003916:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800391a:	b29b      	uxth	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	0092      	lsls	r2, r2, #2
 8003920:	4413      	add	r3, r2
 8003922:	b29a      	uxth	r2, r3
 8003924:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2304      	movs	r3, #4
 800392c:	2151      	movs	r1, #81	; 0x51
 800392e:	200a      	movs	r0, #10
 8003930:	f7fd fdf8 	bl	8001524 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 8003934:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d108      	bne.n	800394e <start_LCD_Task+0x8ae>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 800393c:	2300      	movs	r3, #0
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2304      	movs	r3, #4
 8003942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003946:	2151      	movs	r1, #81	; 0x51
 8003948:	200a      	movs	r0, #10
 800394a:	f7fd fdeb 	bl	8001524 <ILI9341_Draw_Rectangle>
					}

					// Updating blink two points on LCD
					if(two_point == true)
 800394e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <start_LCD_Task+0x8d4>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 8003956:	2300      	movs	r3, #0
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	230a      	movs	r3, #10
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003962:	2201      	movs	r2, #1
 8003964:	2187      	movs	r1, #135	; 0x87
 8003966:	487d      	ldr	r0, [pc, #500]	; (8003b5c <start_LCD_Task+0xabc>)
 8003968:	f7fd f9cc 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 800396c:	2300      	movs	r3, #0
 800396e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8003972:	e00d      	b.n	8003990 <start_LCD_Task+0x8f0>
					}
					else
					{
						ILI9341_Draw_Text(" ", 135, 1, GREEN, 10, BLACK);
 8003974:	2300      	movs	r3, #0
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	230a      	movs	r3, #10
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003980:	2201      	movs	r2, #1
 8003982:	2187      	movs	r1, #135	; 0x87
 8003984:	4876      	ldr	r0, [pc, #472]	; (8003b60 <start_LCD_Task+0xac0>)
 8003986:	f7fd f9bd 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
					}

					if(QUEUE_RTC_t.Sec == 0)
 8003990:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f040 80da 	bne.w	8003b4e <start_LCD_Task+0xaae>
					{
						// Date
						ILI9341_Draw_Text("        ", 10, 86, BLUE, 4, BLACK);
 800399a:	2300      	movs	r3, #0
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	2304      	movs	r3, #4
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	231f      	movs	r3, #31
 80039a4:	2256      	movs	r2, #86	; 0x56
 80039a6:	210a      	movs	r1, #10
 80039a8:	486e      	ldr	r0, [pc, #440]	; (8003b64 <start_LCD_Task+0xac4>)
 80039aa:	f7fd f9ab 	bl	8000d04 <ILI9341_Draw_Text>
						memset(str_buf, 0 , sizeof(str_buf));
 80039ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80039b2:	2206      	movs	r2, #6
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f008 fc7e 	bl	800c2b8 <memset>
						sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 80039bc:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80039c0:	461a      	mov	r2, r3
 80039c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80039c6:	4968      	ldr	r1, [pc, #416]	; (8003b68 <start_LCD_Task+0xac8>)
 80039c8:	4618      	mov	r0, r3
 80039ca:	f008 fd8b 	bl	800c4e4 <siprintf>

						strncat(str_date, ".", 1);
 80039ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fc fbbc 	bl	8000150 <strlen>
 80039d8:	4603      	mov	r3, r0
 80039da:	461a      	mov	r2, r3
 80039dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80039e0:	4413      	add	r3, r2
 80039e2:	4962      	ldr	r1, [pc, #392]	; (8003b6c <start_LCD_Task+0xacc>)
 80039e4:	461a      	mov	r2, r3
 80039e6:	460b      	mov	r3, r1
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	8013      	strh	r3, [r2, #0]
						sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 80039ec:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80039f0:	461a      	mov	r2, r3
 80039f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80039f6:	495c      	ldr	r1, [pc, #368]	; (8003b68 <start_LCD_Task+0xac8>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f008 fd73 	bl	800c4e4 <siprintf>
						strncat(str_date, str_buf, sizeof(str_buf));
 80039fe:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003a02:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a06:	2206      	movs	r2, #6
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f008 fda2 	bl	800c552 <strncat>
						memset(str_buf, 0 , sizeof(str_buf));
 8003a0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a12:	2206      	movs	r2, #6
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f008 fc4e 	bl	800c2b8 <memset>
						sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 8003a1c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8003a20:	461a      	mov	r2, r3
 8003a22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a26:	4950      	ldr	r1, [pc, #320]	; (8003b68 <start_LCD_Task+0xac8>)
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f008 fd5b 	bl	800c4e4 <siprintf>
						strncat(str_date, ".", 1);
 8003a2e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fb8c 	bl	8000150 <strlen>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a40:	4413      	add	r3, r2
 8003a42:	494a      	ldr	r1, [pc, #296]	; (8003b6c <start_LCD_Task+0xacc>)
 8003a44:	461a      	mov	r2, r3
 8003a46:	460b      	mov	r3, r1
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	8013      	strh	r3, [r2, #0]
						strncat(str_date, str_buf, sizeof(str_buf));
 8003a4c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003a50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a54:	2206      	movs	r2, #6
 8003a56:	4618      	mov	r0, r3
 8003a58:	f008 fd7b 	bl	800c552 <strncat>
						ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 8003a5c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003a60:	2300      	movs	r3, #0
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	2304      	movs	r3, #4
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	231f      	movs	r3, #31
 8003a6a:	2256      	movs	r2, #86	; 0x56
 8003a6c:	210a      	movs	r1, #10
 8003a6e:	f7fd f949 	bl	8000d04 <ILI9341_Draw_Text>

						ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 8003a72:	2300      	movs	r3, #0
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	2302      	movs	r3, #2
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	231f      	movs	r3, #31
 8003a7c:	2278      	movs	r2, #120	; 0x78
 8003a7e:	210a      	movs	r1, #10
 8003a80:	483b      	ldr	r0, [pc, #236]	; (8003b70 <start_LCD_Task+0xad0>)
 8003a82:	f7fd f93f 	bl	8000d04 <ILI9341_Draw_Text>

						switch (QUEUE_RTC_t.DaysOfWeek)
 8003a86:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	2b06      	cmp	r3, #6
 8003a8e:	f63f ab42 	bhi.w	8003116 <start_LCD_Task+0x76>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <start_LCD_Task+0x9f8>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003ab5 	.word	0x08003ab5
 8003a9c:	08003acb 	.word	0x08003acb
 8003aa0:	08003ae1 	.word	0x08003ae1
 8003aa4:	08003af7 	.word	0x08003af7
 8003aa8:	08003b0d 	.word	0x08003b0d
 8003aac:	08003b23 	.word	0x08003b23
 8003ab0:	08003b39 	.word	0x08003b39
						{
						case 1:
							ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	2302      	movs	r3, #2
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	231f      	movs	r3, #31
 8003abe:	2278      	movs	r2, #120	; 0x78
 8003ac0:	210a      	movs	r1, #10
 8003ac2:	482c      	ldr	r0, [pc, #176]	; (8003b74 <start_LCD_Task+0xad4>)
 8003ac4:	f7fd f91e 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003ac8:	e042      	b.n	8003b50 <start_LCD_Task+0xab0>
						case 2:
							ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 8003aca:	2300      	movs	r3, #0
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	2302      	movs	r3, #2
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	231f      	movs	r3, #31
 8003ad4:	2278      	movs	r2, #120	; 0x78
 8003ad6:	210a      	movs	r1, #10
 8003ad8:	4827      	ldr	r0, [pc, #156]	; (8003b78 <start_LCD_Task+0xad8>)
 8003ada:	f7fd f913 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003ade:	e037      	b.n	8003b50 <start_LCD_Task+0xab0>
						case 3:
							ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	231f      	movs	r3, #31
 8003aea:	2278      	movs	r2, #120	; 0x78
 8003aec:	210a      	movs	r1, #10
 8003aee:	4823      	ldr	r0, [pc, #140]	; (8003b7c <start_LCD_Task+0xadc>)
 8003af0:	f7fd f908 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003af4:	e02c      	b.n	8003b50 <start_LCD_Task+0xab0>
						case 4:
							ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 8003af6:	2300      	movs	r3, #0
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	2302      	movs	r3, #2
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	231f      	movs	r3, #31
 8003b00:	2278      	movs	r2, #120	; 0x78
 8003b02:	210a      	movs	r1, #10
 8003b04:	481e      	ldr	r0, [pc, #120]	; (8003b80 <start_LCD_Task+0xae0>)
 8003b06:	f7fd f8fd 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003b0a:	e021      	b.n	8003b50 <start_LCD_Task+0xab0>
						case 5:
							ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	2302      	movs	r3, #2
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	231f      	movs	r3, #31
 8003b16:	2278      	movs	r2, #120	; 0x78
 8003b18:	210a      	movs	r1, #10
 8003b1a:	481a      	ldr	r0, [pc, #104]	; (8003b84 <start_LCD_Task+0xae4>)
 8003b1c:	f7fd f8f2 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003b20:	e016      	b.n	8003b50 <start_LCD_Task+0xab0>
						case 6:
							ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 8003b22:	2300      	movs	r3, #0
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	2302      	movs	r3, #2
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	2278      	movs	r2, #120	; 0x78
 8003b2e:	210a      	movs	r1, #10
 8003b30:	4815      	ldr	r0, [pc, #84]	; (8003b88 <start_LCD_Task+0xae8>)
 8003b32:	f7fd f8e7 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003b36:	e00b      	b.n	8003b50 <start_LCD_Task+0xab0>
						case 7:
							ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	231f      	movs	r3, #31
 8003b42:	2278      	movs	r2, #120	; 0x78
 8003b44:	210a      	movs	r1, #10
 8003b46:	4811      	ldr	r0, [pc, #68]	; (8003b8c <start_LCD_Task+0xaec>)
 8003b48:	f7fd f8dc 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003b4c:	e000      	b.n	8003b50 <start_LCD_Task+0xab0>
						}

					}
 8003b4e:	bf00      	nop
	{
 8003b50:	f7ff bae1 	b.w	8003116 <start_LCD_Task+0x76>
 8003b54:	0800cefc 	.word	0x0800cefc
 8003b58:	0800cf00 	.word	0x0800cf00
 8003b5c:	0800cf04 	.word	0x0800cf04
 8003b60:	0800cf08 	.word	0x0800cf08
 8003b64:	0800cf0c 	.word	0x0800cf0c
 8003b68:	0800cedc 	.word	0x0800cedc
 8003b6c:	0800cf18 	.word	0x0800cf18
 8003b70:	0800cf1c 	.word	0x0800cf1c
 8003b74:	0800cf28 	.word	0x0800cf28
 8003b78:	0800cf30 	.word	0x0800cf30
 8003b7c:	0800cf38 	.word	0x0800cf38
 8003b80:	0800cf44 	.word	0x0800cf44
 8003b84:	0800cf50 	.word	0x0800cf50
 8003b88:	0800cf58 	.word	0x0800cf58
 8003b8c:	0800cf64 	.word	0x0800cf64

08003b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Timer for measure how many time task was running.
	if(htim->Instance == TIM2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d104      	bne.n	8003bac <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003baa:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8003bb6:	f000 fa87 	bl	80040c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000009c 	.word	0x2000009c
 8003bc8:	40000800 	.word	0x40000800

08003bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd0:	b672      	cpsid	i
}
 8003bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bd4:	e7fe      	b.n	8003bd4 <Error_Handler+0x8>
	...

08003bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <HAL_MspInit+0x78>)
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <HAL_MspInit+0x78>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6193      	str	r3, [r2, #24]
 8003bea:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <HAL_MspInit+0x78>)
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <HAL_MspInit+0x78>)
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <HAL_MspInit+0x78>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c00:	61d3      	str	r3, [r2, #28]
 8003c02:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <HAL_MspInit+0x78>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	210f      	movs	r1, #15
 8003c12:	f06f 0001 	mvn.w	r0, #1
 8003c16:	f000 fb4c 	bl	80042b2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2105      	movs	r1, #5
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f000 fb47 	bl	80042b2 <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003c24:	2001      	movs	r0, #1
 8003c26:	f000 fb60 	bl	80042ea <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_MspInit+0x7c>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_MspInit+0x7c>)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40010000 	.word	0x40010000

08003c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c60:	f107 0310 	add.w	r3, r7, #16
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <HAL_I2C_MspInit+0x70>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d123      	bne.n	8003cc0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_I2C_MspInit+0x74>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <HAL_I2C_MspInit+0x74>)
 8003c7e:	f043 0308 	orr.w	r3, r3, #8
 8003c82:	6193      	str	r3, [r2, #24]
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_I2C_MspInit+0x74>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c90:	23c0      	movs	r3, #192	; 0xc0
 8003c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c94:	2312      	movs	r3, #18
 8003c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	480b      	ldr	r0, [pc, #44]	; (8003cd0 <HAL_I2C_MspInit+0x78>)
 8003ca4:	f000 fbe0 	bl	8004468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_I2C_MspInit+0x74>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <HAL_I2C_MspInit+0x74>)
 8003cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cb2:	61d3      	str	r3, [r2, #28]
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_I2C_MspInit+0x74>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cc0:	bf00      	nop
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40005400 	.word	0x40005400
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40010c00 	.word	0x40010c00

08003cd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <HAL_SPI_MspInit+0x98>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d137      	bne.n	8003d64 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <HAL_SPI_MspInit+0x9c>)
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <HAL_SPI_MspInit+0x9c>)
 8003cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cfe:	6193      	str	r3, [r2, #24]
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_SPI_MspInit+0x9c>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <HAL_SPI_MspInit+0x9c>)
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <HAL_SPI_MspInit+0x9c>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	6193      	str	r3, [r2, #24]
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_SPI_MspInit+0x9c>)
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003d24:	23a0      	movs	r3, #160	; 0xa0
 8003d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d30:	f107 0310 	add.w	r3, r7, #16
 8003d34:	4619      	mov	r1, r3
 8003d36:	480f      	ldr	r0, [pc, #60]	; (8003d74 <HAL_SPI_MspInit+0xa0>)
 8003d38:	f000 fb96 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d3c:	2340      	movs	r3, #64	; 0x40
 8003d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d48:	f107 0310 	add.w	r3, r7, #16
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4809      	ldr	r0, [pc, #36]	; (8003d74 <HAL_SPI_MspInit+0xa0>)
 8003d50:	f000 fb8a 	bl	8004468 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003d54:	2200      	movs	r2, #0
 8003d56:	2105      	movs	r1, #5
 8003d58:	2023      	movs	r0, #35	; 0x23
 8003d5a:	f000 faaa 	bl	80042b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003d5e:	2023      	movs	r0, #35	; 0x23
 8003d60:	f000 fac3 	bl	80042ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d64:	bf00      	nop
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40013000 	.word	0x40013000
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40010800 	.word	0x40010800

08003d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d113      	bne.n	8003db2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_TIM_Base_MspInit+0x44>)
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4a0b      	ldr	r2, [pc, #44]	; (8003dbc <HAL_TIM_Base_MspInit+0x44>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	61d3      	str	r3, [r2, #28]
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_TIM_Base_MspInit+0x44>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003da2:	2200      	movs	r2, #0
 8003da4:	2105      	movs	r1, #5
 8003da6:	201c      	movs	r0, #28
 8003da8:	f000 fa83 	bl	80042b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003dac:	201c      	movs	r0, #28
 8003dae:	f000 fa9c 	bl	80042ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a20      	ldr	r2, [pc, #128]	; (8003e5c <HAL_UART_MspInit+0x9c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d139      	bne.n	8003e54 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003de0:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <HAL_UART_MspInit+0xa0>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <HAL_UART_MspInit+0xa0>)
 8003de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dea:	6193      	str	r3, [r2, #24]
 8003dec:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <HAL_UART_MspInit+0xa0>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_UART_MspInit+0xa0>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4a18      	ldr	r2, [pc, #96]	; (8003e60 <HAL_UART_MspInit+0xa0>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	6193      	str	r3, [r2, #24]
 8003e04:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <HAL_UART_MspInit+0xa0>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e16:	2302      	movs	r3, #2
 8003e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1e:	f107 0310 	add.w	r3, r7, #16
 8003e22:	4619      	mov	r1, r3
 8003e24:	480f      	ldr	r0, [pc, #60]	; (8003e64 <HAL_UART_MspInit+0xa4>)
 8003e26:	f000 fb1f 	bl	8004468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e38:	f107 0310 	add.w	r3, r7, #16
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4809      	ldr	r0, [pc, #36]	; (8003e64 <HAL_UART_MspInit+0xa4>)
 8003e40:	f000 fb12 	bl	8004468 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003e44:	2200      	movs	r2, #0
 8003e46:	2105      	movs	r1, #5
 8003e48:	2025      	movs	r0, #37	; 0x25
 8003e4a:	f000 fa32 	bl	80042b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e4e:	2025      	movs	r0, #37	; 0x25
 8003e50:	f000 fa4b 	bl	80042ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e54:	bf00      	nop
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40013800 	.word	0x40013800
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40010800 	.word	0x40010800

08003e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	; 0x30
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	201e      	movs	r0, #30
 8003e7e:	f000 fa18 	bl	80042b2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e82:	201e      	movs	r0, #30
 8003e84:	f000 fa31 	bl	80042ea <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003e88:	4b1f      	ldr	r3, [pc, #124]	; (8003f08 <HAL_InitTick+0xa0>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <HAL_InitTick+0xa0>)
 8003e8e:	f043 0304 	orr.w	r3, r3, #4
 8003e92:	61d3      	str	r3, [r2, #28]
 8003e94:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_InitTick+0xa0>)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ea0:	f107 0210 	add.w	r2, r7, #16
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f002 fd6a 	bl	8006984 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003eb0:	f002 fd40 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <HAL_InitTick+0xa4>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	0c9b      	lsrs	r3, r3, #18
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <HAL_InitTick+0xa8>)
 8003eca:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <HAL_InitTick+0xac>)
 8003ecc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_InitTick+0xa8>)
 8003ed0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003ed6:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <HAL_InitTick+0xa8>)
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_InitTick+0xa8>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_InitTick+0xa8>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003ee8:	4809      	ldr	r0, [pc, #36]	; (8003f10 <HAL_InitTick+0xa8>)
 8003eea:	f003 f903 	bl	80070f4 <HAL_TIM_Base_Init>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003ef4:	4806      	ldr	r0, [pc, #24]	; (8003f10 <HAL_InitTick+0xa8>)
 8003ef6:	f003 f94d 	bl	8007194 <HAL_TIM_Base_Start_IT>
 8003efa:	4603      	mov	r3, r0
 8003efc:	e000      	b.n	8003f00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3730      	adds	r7, #48	; 0x30
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	431bde83 	.word	0x431bde83
 8003f10:	20000fdc 	.word	0x20000fdc
 8003f14:	40000800 	.word	0x40000800

08003f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f1c:	e7fe      	b.n	8003f1c <NMI_Handler+0x4>

08003f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f22:	e7fe      	b.n	8003f22 <HardFault_Handler+0x4>

08003f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f28:	e7fe      	b.n	8003f28 <MemManage_Handler+0x4>

08003f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f2e:	e7fe      	b.n	8003f2e <BusFault_Handler+0x4>

08003f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f34:	e7fe      	b.n	8003f34 <UsageFault_Handler+0x4>

08003f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f36:	b480      	push	{r7}
 8003f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003f46:	f002 f909 	bl	800615c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_4_Pin);
 8003f52:	2002      	movs	r0, #2
 8003f54:	f000 fc3c 	bl	80047d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_3_Pin);
 8003f60:	2004      	movs	r0, #4
 8003f62:	f000 fc35 	bl	80047d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_2_Pin);
 8003f6e:	2008      	movs	r0, #8
 8003f70:	f000 fc2e 	bl	80047d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_1_Pin);
 8003f7c:	2010      	movs	r0, #16
 8003f7e:	f000 fc27 	bl	80047d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f8c:	4802      	ldr	r0, [pc, #8]	; (8003f98 <TIM2_IRQHandler+0x10>)
 8003f8e:	f003 f953 	bl	8007238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000540 	.word	0x20000540

08003f9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003fa0:	4802      	ldr	r0, [pc, #8]	; (8003fac <TIM4_IRQHandler+0x10>)
 8003fa2:	f003 f949 	bl	8007238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000fdc 	.word	0x20000fdc

08003fb0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003fb4:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <SPI1_IRQHandler+0x10>)
 8003fb6:	f002 fef3 	bl	8006da0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200004e8 	.word	0x200004e8

08003fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fc8:	4802      	ldr	r0, [pc, #8]	; (8003fd4 <USART1_IRQHandler+0x10>)
 8003fca:	f003 fd1f 	bl	8007a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000588 	.word	0x20000588

08003fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <_sbrk+0x5c>)
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <_sbrk+0x60>)
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <_sbrk+0x64>)
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <_sbrk+0x68>)
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <_sbrk+0x64>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	429a      	cmp	r2, r3
 8004006:	d207      	bcs.n	8004018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004008:	f008 f902 	bl	800c210 <__errno>
 800400c:	4603      	mov	r3, r0
 800400e:	220c      	movs	r2, #12
 8004010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004016:	e009      	b.n	800402c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <_sbrk+0x64>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <_sbrk+0x64>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <_sbrk+0x64>)
 8004028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20005000 	.word	0x20005000
 8004038:	00000400 	.word	0x00000400
 800403c:	20001024 	.word	0x20001024
 8004040:	20004180 	.word	0x20004180

08004044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004050:	480c      	ldr	r0, [pc, #48]	; (8004084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004052:	490d      	ldr	r1, [pc, #52]	; (8004088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004058:	e002      	b.n	8004060 <LoopCopyDataInit>

0800405a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800405a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800405c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800405e:	3304      	adds	r3, #4

08004060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004064:	d3f9      	bcc.n	800405a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004066:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004068:	4c0a      	ldr	r4, [pc, #40]	; (8004094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800406a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800406c:	e001      	b.n	8004072 <LoopFillZerobss>

0800406e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800406e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004070:	3204      	adds	r2, #4

08004072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004074:	d3fb      	bcc.n	800406e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004076:	f7ff ffe5 	bl	8004044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800407a:	f008 f8cf 	bl	800c21c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800407e:	f7fe fae9 	bl	8002654 <main>
  bx lr
 8004082:	4770      	bx	lr
  ldr r0, =_sdata
 8004084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004088:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800408c:	0800d464 	.word	0x0800d464
  ldr r2, =_sbss
 8004090:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004094:	2000417c 	.word	0x2000417c

08004098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004098:	e7fe      	b.n	8004098 <ADC1_2_IRQHandler>
	...

0800409c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <HAL_Init+0x28>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a07      	ldr	r2, [pc, #28]	; (80040c4 <HAL_Init+0x28>)
 80040a6:	f043 0310 	orr.w	r3, r3, #16
 80040aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ac:	2003      	movs	r0, #3
 80040ae:	f000 f8f5 	bl	800429c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040b2:	200f      	movs	r0, #15
 80040b4:	f7ff fed8 	bl	8003e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040b8:	f7ff fd8e 	bl	8003bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40022000 	.word	0x40022000

080040c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_IncTick+0x1c>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_IncTick+0x20>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4413      	add	r3, r2
 80040d8:	4a03      	ldr	r2, [pc, #12]	; (80040e8 <HAL_IncTick+0x20>)
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	20000010 	.word	0x20000010
 80040e8:	20001028 	.word	0x20001028

080040ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return uwTick;
 80040f0:	4b02      	ldr	r3, [pc, #8]	; (80040fc <HAL_GetTick+0x10>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	20001028 	.word	0x20001028

08004100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004108:	f7ff fff0 	bl	80040ec <HAL_GetTick>
 800410c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004118:	d005      	beq.n	8004126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_Delay+0x44>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004126:	bf00      	nop
 8004128:	f7ff ffe0 	bl	80040ec <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d8f7      	bhi.n	8004128 <HAL_Delay+0x28>
  {
  }
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000010 	.word	0x20000010

08004148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004164:	4013      	ands	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417a:	4a04      	ldr	r2, [pc, #16]	; (800418c <__NVIC_SetPriorityGrouping+0x44>)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	60d3      	str	r3, [r2, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	f003 0307 	and.w	r3, r3, #7
}
 800419e:	4618      	mov	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db0b      	blt.n	80041d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4906      	ldr	r1, [pc, #24]	; (80041e0 <__NVIC_EnableIRQ+0x34>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2001      	movs	r0, #1
 80041ce:	fa00 f202 	lsl.w	r2, r0, r2
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	e000e100 	.word	0xe000e100

080041e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db0a      	blt.n	800420e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	490c      	ldr	r1, [pc, #48]	; (8004230 <__NVIC_SetPriority+0x4c>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	440b      	add	r3, r1
 8004208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800420c:	e00a      	b.n	8004224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4908      	ldr	r1, [pc, #32]	; (8004234 <__NVIC_SetPriority+0x50>)
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	3b04      	subs	r3, #4
 800421c:	0112      	lsls	r2, r2, #4
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	440b      	add	r3, r1
 8004222:	761a      	strb	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000e100 	.word	0xe000e100
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f1c3 0307 	rsb	r3, r3, #7
 8004252:	2b04      	cmp	r3, #4
 8004254:	bf28      	it	cs
 8004256:	2304      	movcs	r3, #4
 8004258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3304      	adds	r3, #4
 800425e:	2b06      	cmp	r3, #6
 8004260:	d902      	bls.n	8004268 <NVIC_EncodePriority+0x30>
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3b03      	subs	r3, #3
 8004266:	e000      	b.n	800426a <NVIC_EncodePriority+0x32>
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800426c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	401a      	ands	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	43d9      	mvns	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004290:	4313      	orrs	r3, r2
         );
}
 8004292:	4618      	mov	r0, r3
 8004294:	3724      	adds	r7, #36	; 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff4f 	bl	8004148 <__NVIC_SetPriorityGrouping>
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042c4:	f7ff ff64 	bl	8004190 <__NVIC_GetPriorityGrouping>
 80042c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	6978      	ldr	r0, [r7, #20]
 80042d0:	f7ff ffb2 	bl	8004238 <NVIC_EncodePriority>
 80042d4:	4602      	mov	r2, r0
 80042d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff81 	bl	80041e4 <__NVIC_SetPriority>
}
 80042e2:	bf00      	nop
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff57 	bl	80041ac <__NVIC_EnableIRQ>
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004318:	2b02      	cmp	r3, #2
 800431a:	d008      	beq.n	800432e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2204      	movs	r2, #4
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e020      	b.n	8004370 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 020e 	bic.w	r2, r2, #14
 800433c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	2101      	movs	r1, #1
 8004358:	fa01 f202 	lsl.w	r2, r1, r2
 800435c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800436e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
	...

0800437c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800438e:	2b02      	cmp	r3, #2
 8004390:	d005      	beq.n	800439e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2204      	movs	r2, #4
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
 800439c:	e051      	b.n	8004442 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 020e 	bic.w	r2, r2, #14
 80043ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a22      	ldr	r2, [pc, #136]	; (800444c <HAL_DMA_Abort_IT+0xd0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d029      	beq.n	800441c <HAL_DMA_Abort_IT+0xa0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a20      	ldr	r2, [pc, #128]	; (8004450 <HAL_DMA_Abort_IT+0xd4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d022      	beq.n	8004418 <HAL_DMA_Abort_IT+0x9c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_DMA_Abort_IT+0xd8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d01a      	beq.n	8004412 <HAL_DMA_Abort_IT+0x96>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_DMA_Abort_IT+0xdc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d012      	beq.n	800440c <HAL_DMA_Abort_IT+0x90>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_DMA_Abort_IT+0xe0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00a      	beq.n	8004406 <HAL_DMA_Abort_IT+0x8a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_DMA_Abort_IT+0xe4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d102      	bne.n	8004400 <HAL_DMA_Abort_IT+0x84>
 80043fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043fe:	e00e      	b.n	800441e <HAL_DMA_Abort_IT+0xa2>
 8004400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004404:	e00b      	b.n	800441e <HAL_DMA_Abort_IT+0xa2>
 8004406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800440a:	e008      	b.n	800441e <HAL_DMA_Abort_IT+0xa2>
 800440c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004410:	e005      	b.n	800441e <HAL_DMA_Abort_IT+0xa2>
 8004412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004416:	e002      	b.n	800441e <HAL_DMA_Abort_IT+0xa2>
 8004418:	2310      	movs	r3, #16
 800441a:	e000      	b.n	800441e <HAL_DMA_Abort_IT+0xa2>
 800441c:	2301      	movs	r3, #1
 800441e:	4a11      	ldr	r2, [pc, #68]	; (8004464 <HAL_DMA_Abort_IT+0xe8>)
 8004420:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4798      	blx	r3
    } 
  }
  return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40020008 	.word	0x40020008
 8004450:	4002001c 	.word	0x4002001c
 8004454:	40020030 	.word	0x40020030
 8004458:	40020044 	.word	0x40020044
 800445c:	40020058 	.word	0x40020058
 8004460:	4002006c 	.word	0x4002006c
 8004464:	40020000 	.word	0x40020000

08004468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004468:	b480      	push	{r7}
 800446a:	b08b      	sub	sp, #44	; 0x2c
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004476:	2300      	movs	r3, #0
 8004478:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800447a:	e169      	b.n	8004750 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800447c:	2201      	movs	r2, #1
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	429a      	cmp	r2, r3
 8004496:	f040 8158 	bne.w	800474a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4a9a      	ldr	r2, [pc, #616]	; (8004708 <HAL_GPIO_Init+0x2a0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d05e      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044a4:	4a98      	ldr	r2, [pc, #608]	; (8004708 <HAL_GPIO_Init+0x2a0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d875      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044aa:	4a98      	ldr	r2, [pc, #608]	; (800470c <HAL_GPIO_Init+0x2a4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d058      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044b0:	4a96      	ldr	r2, [pc, #600]	; (800470c <HAL_GPIO_Init+0x2a4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d86f      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044b6:	4a96      	ldr	r2, [pc, #600]	; (8004710 <HAL_GPIO_Init+0x2a8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d052      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044bc:	4a94      	ldr	r2, [pc, #592]	; (8004710 <HAL_GPIO_Init+0x2a8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d869      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044c2:	4a94      	ldr	r2, [pc, #592]	; (8004714 <HAL_GPIO_Init+0x2ac>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04c      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044c8:	4a92      	ldr	r2, [pc, #584]	; (8004714 <HAL_GPIO_Init+0x2ac>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d863      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044ce:	4a92      	ldr	r2, [pc, #584]	; (8004718 <HAL_GPIO_Init+0x2b0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d046      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
 80044d4:	4a90      	ldr	r2, [pc, #576]	; (8004718 <HAL_GPIO_Init+0x2b0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d85d      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044da:	2b12      	cmp	r3, #18
 80044dc:	d82a      	bhi.n	8004534 <HAL_GPIO_Init+0xcc>
 80044de:	2b12      	cmp	r3, #18
 80044e0:	d859      	bhi.n	8004596 <HAL_GPIO_Init+0x12e>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <HAL_GPIO_Init+0x80>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	08004563 	.word	0x08004563
 80044ec:	0800453d 	.word	0x0800453d
 80044f0:	0800454f 	.word	0x0800454f
 80044f4:	08004591 	.word	0x08004591
 80044f8:	08004597 	.word	0x08004597
 80044fc:	08004597 	.word	0x08004597
 8004500:	08004597 	.word	0x08004597
 8004504:	08004597 	.word	0x08004597
 8004508:	08004597 	.word	0x08004597
 800450c:	08004597 	.word	0x08004597
 8004510:	08004597 	.word	0x08004597
 8004514:	08004597 	.word	0x08004597
 8004518:	08004597 	.word	0x08004597
 800451c:	08004597 	.word	0x08004597
 8004520:	08004597 	.word	0x08004597
 8004524:	08004597 	.word	0x08004597
 8004528:	08004597 	.word	0x08004597
 800452c:	08004545 	.word	0x08004545
 8004530:	08004559 	.word	0x08004559
 8004534:	4a79      	ldr	r2, [pc, #484]	; (800471c <HAL_GPIO_Init+0x2b4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800453a:	e02c      	b.n	8004596 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	623b      	str	r3, [r7, #32]
          break;
 8004542:	e029      	b.n	8004598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	3304      	adds	r3, #4
 800454a:	623b      	str	r3, [r7, #32]
          break;
 800454c:	e024      	b.n	8004598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	3308      	adds	r3, #8
 8004554:	623b      	str	r3, [r7, #32]
          break;
 8004556:	e01f      	b.n	8004598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	330c      	adds	r3, #12
 800455e:	623b      	str	r3, [r7, #32]
          break;
 8004560:	e01a      	b.n	8004598 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800456a:	2304      	movs	r3, #4
 800456c:	623b      	str	r3, [r7, #32]
          break;
 800456e:	e013      	b.n	8004598 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004578:	2308      	movs	r3, #8
 800457a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	611a      	str	r2, [r3, #16]
          break;
 8004582:	e009      	b.n	8004598 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004584:	2308      	movs	r3, #8
 8004586:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	615a      	str	r2, [r3, #20]
          break;
 800458e:	e003      	b.n	8004598 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004590:	2300      	movs	r3, #0
 8004592:	623b      	str	r3, [r7, #32]
          break;
 8004594:	e000      	b.n	8004598 <HAL_GPIO_Init+0x130>
          break;
 8004596:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2bff      	cmp	r3, #255	; 0xff
 800459c:	d801      	bhi.n	80045a2 <HAL_GPIO_Init+0x13a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	e001      	b.n	80045a6 <HAL_GPIO_Init+0x13e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2bff      	cmp	r3, #255	; 0xff
 80045ac:	d802      	bhi.n	80045b4 <HAL_GPIO_Init+0x14c>
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	e002      	b.n	80045ba <HAL_GPIO_Init+0x152>
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	3b08      	subs	r3, #8
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	210f      	movs	r1, #15
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	6a39      	ldr	r1, [r7, #32]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	431a      	orrs	r2, r3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80b1 	beq.w	800474a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045e8:	4b4d      	ldr	r3, [pc, #308]	; (8004720 <HAL_GPIO_Init+0x2b8>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	4a4c      	ldr	r2, [pc, #304]	; (8004720 <HAL_GPIO_Init+0x2b8>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6193      	str	r3, [r2, #24]
 80045f4:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <HAL_GPIO_Init+0x2b8>)
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004600:	4a48      	ldr	r2, [pc, #288]	; (8004724 <HAL_GPIO_Init+0x2bc>)
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	089b      	lsrs	r3, r3, #2
 8004606:	3302      	adds	r3, #2
 8004608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	220f      	movs	r2, #15
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a40      	ldr	r2, [pc, #256]	; (8004728 <HAL_GPIO_Init+0x2c0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_GPIO_Init+0x1ec>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3f      	ldr	r2, [pc, #252]	; (800472c <HAL_GPIO_Init+0x2c4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00d      	beq.n	8004650 <HAL_GPIO_Init+0x1e8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a3e      	ldr	r2, [pc, #248]	; (8004730 <HAL_GPIO_Init+0x2c8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <HAL_GPIO_Init+0x1e4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a3d      	ldr	r2, [pc, #244]	; (8004734 <HAL_GPIO_Init+0x2cc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_GPIO_Init+0x1e0>
 8004644:	2303      	movs	r3, #3
 8004646:	e006      	b.n	8004656 <HAL_GPIO_Init+0x1ee>
 8004648:	2304      	movs	r3, #4
 800464a:	e004      	b.n	8004656 <HAL_GPIO_Init+0x1ee>
 800464c:	2302      	movs	r3, #2
 800464e:	e002      	b.n	8004656 <HAL_GPIO_Init+0x1ee>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_GPIO_Init+0x1ee>
 8004654:	2300      	movs	r3, #0
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	f002 0203 	and.w	r2, r2, #3
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	4093      	lsls	r3, r2
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004666:	492f      	ldr	r1, [pc, #188]	; (8004724 <HAL_GPIO_Init+0x2bc>)
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	3302      	adds	r3, #2
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d006      	beq.n	800468e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004680:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	492c      	ldr	r1, [pc, #176]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800468e:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	43db      	mvns	r3, r3
 8004696:	4928      	ldr	r1, [pc, #160]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 8004698:	4013      	ands	r3, r2
 800469a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046a8:	4b23      	ldr	r3, [pc, #140]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	4922      	ldr	r1, [pc, #136]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	e006      	b.n	80046c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046b6:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	43db      	mvns	r3, r3
 80046be:	491e      	ldr	r1, [pc, #120]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d006      	beq.n	80046de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	4918      	ldr	r1, [pc, #96]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]
 80046dc:	e006      	b.n	80046ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	4914      	ldr	r1, [pc, #80]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d021      	beq.n	800473c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	490e      	ldr	r1, [pc, #56]	; (8004738 <HAL_GPIO_Init+0x2d0>)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	60cb      	str	r3, [r1, #12]
 8004704:	e021      	b.n	800474a <HAL_GPIO_Init+0x2e2>
 8004706:	bf00      	nop
 8004708:	10320000 	.word	0x10320000
 800470c:	10310000 	.word	0x10310000
 8004710:	10220000 	.word	0x10220000
 8004714:	10210000 	.word	0x10210000
 8004718:	10120000 	.word	0x10120000
 800471c:	10110000 	.word	0x10110000
 8004720:	40021000 	.word	0x40021000
 8004724:	40010000 	.word	0x40010000
 8004728:	40010800 	.word	0x40010800
 800472c:	40010c00 	.word	0x40010c00
 8004730:	40011000 	.word	0x40011000
 8004734:	40011400 	.word	0x40011400
 8004738:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_GPIO_Init+0x304>)
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	43db      	mvns	r3, r3
 8004744:	4909      	ldr	r1, [pc, #36]	; (800476c <HAL_GPIO_Init+0x304>)
 8004746:	4013      	ands	r3, r2
 8004748:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	3301      	adds	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	f47f ae8e 	bne.w	800447c <HAL_GPIO_Init+0x14>
  }
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	372c      	adds	r7, #44	; 0x2c
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr
 800476c:	40010400 	.word	0x40010400

08004770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	887b      	ldrh	r3, [r7, #2]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
 800478c:	e001      	b.n	8004792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004792:	7bfb      	ldrb	r3, [r7, #15]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	460b      	mov	r3, r1
 80047a8:	807b      	strh	r3, [r7, #2]
 80047aa:	4613      	mov	r3, r2
 80047ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047ae:	787b      	ldrb	r3, [r7, #1]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047b4:	887a      	ldrh	r2, [r7, #2]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047ba:	e003      	b.n	80047c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	041a      	lsls	r2, r3, #16
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	611a      	str	r2, [r3, #16]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
	...

080047d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047da:	4b08      	ldr	r3, [pc, #32]	; (80047fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d006      	beq.n	80047f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047e6:	4a05      	ldr	r2, [pc, #20]	; (80047fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fd feb8 	bl	8002564 <HAL_GPIO_EXTI_Callback>
  }
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40010400 	.word	0x40010400

08004800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e12b      	b.n	8004a6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fa16 	bl	8003c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2224      	movs	r2, #36	; 0x24
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004864:	f002 f866 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 8004868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4a81      	ldr	r2, [pc, #516]	; (8004a74 <HAL_I2C_Init+0x274>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d807      	bhi.n	8004884 <HAL_I2C_Init+0x84>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a80      	ldr	r2, [pc, #512]	; (8004a78 <HAL_I2C_Init+0x278>)
 8004878:	4293      	cmp	r3, r2
 800487a:	bf94      	ite	ls
 800487c:	2301      	movls	r3, #1
 800487e:	2300      	movhi	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e006      	b.n	8004892 <HAL_I2C_Init+0x92>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a7d      	ldr	r2, [pc, #500]	; (8004a7c <HAL_I2C_Init+0x27c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	bf94      	ite	ls
 800488c:	2301      	movls	r3, #1
 800488e:	2300      	movhi	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e0e7      	b.n	8004a6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a78      	ldr	r2, [pc, #480]	; (8004a80 <HAL_I2C_Init+0x280>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	0c9b      	lsrs	r3, r3, #18
 80048a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a6a      	ldr	r2, [pc, #424]	; (8004a74 <HAL_I2C_Init+0x274>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d802      	bhi.n	80048d4 <HAL_I2C_Init+0xd4>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3301      	adds	r3, #1
 80048d2:	e009      	b.n	80048e8 <HAL_I2C_Init+0xe8>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	4a69      	ldr	r2, [pc, #420]	; (8004a84 <HAL_I2C_Init+0x284>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	3301      	adds	r3, #1
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	495c      	ldr	r1, [pc, #368]	; (8004a74 <HAL_I2C_Init+0x274>)
 8004904:	428b      	cmp	r3, r1
 8004906:	d819      	bhi.n	800493c <HAL_I2C_Init+0x13c>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1e59      	subs	r1, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	fbb1 f3f3 	udiv	r3, r1, r3
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	f640 73fc 	movw	r3, #4092	; 0xffc
 800491c:	400b      	ands	r3, r1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_I2C_Init+0x138>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1e59      	subs	r1, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004930:	3301      	adds	r3, #1
 8004932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004936:	e051      	b.n	80049dc <HAL_I2C_Init+0x1dc>
 8004938:	2304      	movs	r3, #4
 800493a:	e04f      	b.n	80049dc <HAL_I2C_Init+0x1dc>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d111      	bne.n	8004968 <HAL_I2C_Init+0x168>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1e58      	subs	r0, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	440b      	add	r3, r1
 8004952:	fbb0 f3f3 	udiv	r3, r0, r3
 8004956:	3301      	adds	r3, #1
 8004958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e012      	b.n	800498e <HAL_I2C_Init+0x18e>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1e58      	subs	r0, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6859      	ldr	r1, [r3, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	0099      	lsls	r1, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	fbb0 f3f3 	udiv	r3, r0, r3
 800497e:	3301      	adds	r3, #1
 8004980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf0c      	ite	eq
 8004988:	2301      	moveq	r3, #1
 800498a:	2300      	movne	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Init+0x196>
 8004992:	2301      	movs	r3, #1
 8004994:	e022      	b.n	80049dc <HAL_I2C_Init+0x1dc>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10e      	bne.n	80049bc <HAL_I2C_Init+0x1bc>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1e58      	subs	r0, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6859      	ldr	r1, [r3, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	440b      	add	r3, r1
 80049ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b0:	3301      	adds	r3, #1
 80049b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ba:	e00f      	b.n	80049dc <HAL_I2C_Init+0x1dc>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1e58      	subs	r0, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	0099      	lsls	r1, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80049d2:	3301      	adds	r3, #1
 80049d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	6809      	ldr	r1, [r1, #0]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6911      	ldr	r1, [r2, #16]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68d2      	ldr	r2, [r2, #12]
 8004a16:	4311      	orrs	r1, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	000186a0 	.word	0x000186a0
 8004a78:	001e847f 	.word	0x001e847f
 8004a7c:	003d08ff 	.word	0x003d08ff
 8004a80:	431bde83 	.word	0x431bde83
 8004a84:	10624dd3 	.word	0x10624dd3

08004a88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	461a      	mov	r2, r3
 8004a94:	460b      	mov	r3, r1
 8004a96:	817b      	strh	r3, [r7, #10]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a9c:	f7ff fb26 	bl	80040ec <HAL_GetTick>
 8004aa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	f040 80e0 	bne.w	8004c70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2319      	movs	r3, #25
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	4970      	ldr	r1, [pc, #448]	; (8004c7c <HAL_I2C_Master_Transmit+0x1f4>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f001 f972 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e0d3      	b.n	8004c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_I2C_Master_Transmit+0x50>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e0cc      	b.n	8004c72 <HAL_I2C_Master_Transmit+0x1ea>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d007      	beq.n	8004afe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2221      	movs	r2, #33	; 0x21
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	893a      	ldrh	r2, [r7, #8]
 8004b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a50      	ldr	r2, [pc, #320]	; (8004c80 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b40:	8979      	ldrh	r1, [r7, #10]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fe5e 	bl	8005808 <I2C_MasterRequestWrite>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e08d      	b.n	8004c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b6c:	e066      	b.n	8004c3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	6a39      	ldr	r1, [r7, #32]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f001 f9ec 	bl	8005f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d107      	bne.n	8004b96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e06b      	b.n	8004c72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	781a      	ldrb	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d11b      	bne.n	8004c10 <HAL_I2C_Master_Transmit+0x188>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d017      	beq.n	8004c10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	6a39      	ldr	r1, [r7, #32]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f001 f9dc 	bl	8005fd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d107      	bne.n	8004c38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e01a      	b.n	8004c72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d194      	bne.n	8004b6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	00100002 	.word	0x00100002
 8004c80:	ffff0000 	.word	0xffff0000

08004c84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08c      	sub	sp, #48	; 0x30
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	607a      	str	r2, [r7, #4]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	460b      	mov	r3, r1
 8004c92:	817b      	strh	r3, [r7, #10]
 8004c94:	4613      	mov	r3, r2
 8004c96:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c9c:	f7ff fa26 	bl	80040ec <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	f040 823f 	bne.w	800512e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2319      	movs	r3, #25
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	497f      	ldr	r1, [pc, #508]	; (8004eb8 <HAL_I2C_Master_Receive+0x234>)
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f001 f872 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e232      	b.n	8005130 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_I2C_Master_Receive+0x54>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e22b      	b.n	8005130 <HAL_I2C_Master_Receive+0x4ac>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d007      	beq.n	8004cfe <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2222      	movs	r2, #34	; 0x22
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2210      	movs	r2, #16
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	893a      	ldrh	r2, [r7, #8]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a5f      	ldr	r2, [pc, #380]	; (8004ebc <HAL_I2C_Master_Receive+0x238>)
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d40:	8979      	ldrh	r1, [r7, #10]
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fde0 	bl	800590c <I2C_MasterRequestRead>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e1ec      	b.n	8005130 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d113      	bne.n	8004d86 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e1c0      	b.n	8005108 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d11e      	bne.n	8004dcc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d9e:	b672      	cpsid	i
}
 8004da0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dc8:	b662      	cpsie	i
}
 8004dca:	e035      	b.n	8004e38 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d11e      	bne.n	8004e12 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004de4:	b672      	cpsid	i
}
 8004de6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e0e:	b662      	cpsie	i
}
 8004e10:	e012      	b.n	8004e38 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e22:	2300      	movs	r3, #0
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e38:	e166      	b.n	8005108 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	f200 811f 	bhi.w	8005082 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d123      	bne.n	8004e94 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f001 f8ff 	bl	8006054 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e167      	b.n	8005130 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e92:	e139      	b.n	8005108 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d152      	bne.n	8004f42 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4906      	ldr	r1, [pc, #24]	; (8004ec0 <HAL_I2C_Master_Receive+0x23c>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 ff7c 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e13c      	b.n	8005130 <HAL_I2C_Master_Receive+0x4ac>
 8004eb6:	bf00      	nop
 8004eb8:	00100002 	.word	0x00100002
 8004ebc:	ffff0000 	.word	0xffff0000
 8004ec0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004ec4:	b672      	cpsid	i
}
 8004ec6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f0a:	b662      	cpsie	i
}
 8004f0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f40:	e0e2      	b.n	8005108 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	2200      	movs	r2, #0
 8004f4a:	497b      	ldr	r1, [pc, #492]	; (8005138 <HAL_I2C_Master_Receive+0x4b4>)
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 ff29 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0e9      	b.n	8005130 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f6c:	b672      	cpsid	i
}
 8004f6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fa2:	4b66      	ldr	r3, [pc, #408]	; (800513c <HAL_I2C_Master_Receive+0x4b8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	08db      	lsrs	r3, r3, #3
 8004fa8:	4a65      	ldr	r2, [pc, #404]	; (8005140 <HAL_I2C_Master_Receive+0x4bc>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	0a1a      	lsrs	r2, r3, #8
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	00da      	lsls	r2, r3, #3
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d118      	bne.n	8004ffa <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004fea:	b662      	cpsie	i
}
 8004fec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e09a      	b.n	8005130 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b04      	cmp	r3, #4
 8005006:	d1d9      	bne.n	8004fbc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800504a:	b662      	cpsie	i
}
 800504c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005080:	e042      	b.n	8005108 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 ffe4 	bl	8006054 <I2C_WaitOnRXNEFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e04c      	b.n	8005130 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d118      	bne.n	8005108 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f ae94 	bne.w	8004e3a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e000      	b.n	8005130 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800512e:	2302      	movs	r3, #2
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	; 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	00010004 	.word	0x00010004
 800513c:	20000008 	.word	0x20000008
 8005140:	14f8b589 	.word	0x14f8b589

08005144 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	4608      	mov	r0, r1
 800514e:	4611      	mov	r1, r2
 8005150:	461a      	mov	r2, r3
 8005152:	4603      	mov	r3, r0
 8005154:	817b      	strh	r3, [r7, #10]
 8005156:	460b      	mov	r3, r1
 8005158:	813b      	strh	r3, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800515e:	f7fe ffc5 	bl	80040ec <HAL_GetTick>
 8005162:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b20      	cmp	r3, #32
 800516e:	f040 80d9 	bne.w	8005324 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2319      	movs	r3, #25
 8005178:	2201      	movs	r2, #1
 800517a:	496d      	ldr	r1, [pc, #436]	; (8005330 <HAL_I2C_Mem_Write+0x1ec>)
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fe11 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
 800518a:	e0cc      	b.n	8005326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_I2C_Mem_Write+0x56>
 8005196:	2302      	movs	r3, #2
 8005198:	e0c5      	b.n	8005326 <HAL_I2C_Mem_Write+0x1e2>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d007      	beq.n	80051c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2221      	movs	r2, #33	; 0x21
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2240      	movs	r2, #64	; 0x40
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a3a      	ldr	r2, [r7, #32]
 80051ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a4d      	ldr	r2, [pc, #308]	; (8005334 <HAL_I2C_Mem_Write+0x1f0>)
 8005200:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005202:	88f8      	ldrh	r0, [r7, #6]
 8005204:	893a      	ldrh	r2, [r7, #8]
 8005206:	8979      	ldrh	r1, [r7, #10]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	4603      	mov	r3, r0
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fc48 	bl	8005aa8 <I2C_RequestMemoryWrite>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d052      	beq.n	80052c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e081      	b.n	8005326 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fe92 	bl	8005f50 <I2C_WaitOnTXEFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00d      	beq.n	800524e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	2b04      	cmp	r3, #4
 8005238:	d107      	bne.n	800524a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e06b      	b.n	8005326 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	781a      	ldrb	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b04      	cmp	r3, #4
 800528a:	d11b      	bne.n	80052c4 <HAL_I2C_Mem_Write+0x180>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1aa      	bne.n	8005222 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fe7e 	bl	8005fd2 <I2C_WaitOnBTFFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d107      	bne.n	80052f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e016      	b.n	8005326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	e000      	b.n	8005326 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005324:	2302      	movs	r3, #2
  }
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	00100002 	.word	0x00100002
 8005334:	ffff0000 	.word	0xffff0000

08005338 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08c      	sub	sp, #48	; 0x30
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	4608      	mov	r0, r1
 8005342:	4611      	mov	r1, r2
 8005344:	461a      	mov	r2, r3
 8005346:	4603      	mov	r3, r0
 8005348:	817b      	strh	r3, [r7, #10]
 800534a:	460b      	mov	r3, r1
 800534c:	813b      	strh	r3, [r7, #8]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005356:	f7fe fec9 	bl	80040ec <HAL_GetTick>
 800535a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b20      	cmp	r3, #32
 8005366:	f040 8244 	bne.w	80057f2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	2319      	movs	r3, #25
 8005370:	2201      	movs	r2, #1
 8005372:	4982      	ldr	r1, [pc, #520]	; (800557c <HAL_I2C_Mem_Read+0x244>)
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 fd15 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005380:	2302      	movs	r3, #2
 8005382:	e237      	b.n	80057f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_I2C_Mem_Read+0x5a>
 800538e:	2302      	movs	r3, #2
 8005390:	e230      	b.n	80057f4 <HAL_I2C_Mem_Read+0x4bc>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d007      	beq.n	80053b8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2222      	movs	r2, #34	; 0x22
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2240      	movs	r2, #64	; 0x40
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a62      	ldr	r2, [pc, #392]	; (8005580 <HAL_I2C_Mem_Read+0x248>)
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053fa:	88f8      	ldrh	r0, [r7, #6]
 80053fc:	893a      	ldrh	r2, [r7, #8]
 80053fe:	8979      	ldrh	r1, [r7, #10]
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	4603      	mov	r3, r0
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fbe2 	bl	8005bd4 <I2C_RequestMemoryRead>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e1ec      	b.n	80057f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541e:	2b00      	cmp	r3, #0
 8005420:	d113      	bne.n	800544a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	e1c0      	b.n	80057cc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544e:	2b01      	cmp	r3, #1
 8005450:	d11e      	bne.n	8005490 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005460:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005462:	b672      	cpsid	i
}
 8005464:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800548c:	b662      	cpsie	i
}
 800548e:	e035      	b.n	80054fc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	2b02      	cmp	r3, #2
 8005496:	d11e      	bne.n	80054d6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054a8:	b672      	cpsid	i
}
 80054aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054d2:	b662      	cpsie	i
}
 80054d4:	e012      	b.n	80054fc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80054fc:	e166      	b.n	80057cc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	2b03      	cmp	r3, #3
 8005504:	f200 811f 	bhi.w	8005746 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550c:	2b01      	cmp	r3, #1
 800550e:	d123      	bne.n	8005558 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fd9d 	bl	8006054 <I2C_WaitOnRXNEFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e167      	b.n	80057f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005556:	e139      	b.n	80057cc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555c:	2b02      	cmp	r3, #2
 800555e:	d152      	bne.n	8005606 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	2200      	movs	r2, #0
 8005568:	4906      	ldr	r1, [pc, #24]	; (8005584 <HAL_I2C_Mem_Read+0x24c>)
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fc1a 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e13c      	b.n	80057f4 <HAL_I2C_Mem_Read+0x4bc>
 800557a:	bf00      	nop
 800557c:	00100002 	.word	0x00100002
 8005580:	ffff0000 	.word	0xffff0000
 8005584:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005588:	b672      	cpsid	i
}
 800558a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80055ce:	b662      	cpsie	i
}
 80055d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005604:	e0e2      	b.n	80057cc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	497b      	ldr	r1, [pc, #492]	; (80057fc <HAL_I2C_Mem_Read+0x4c4>)
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fbc7 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0e9      	b.n	80057f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005630:	b672      	cpsid	i
}
 8005632:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005666:	4b66      	ldr	r3, [pc, #408]	; (8005800 <HAL_I2C_Mem_Read+0x4c8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	08db      	lsrs	r3, r3, #3
 800566c:	4a65      	ldr	r2, [pc, #404]	; (8005804 <HAL_I2C_Mem_Read+0x4cc>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	0a1a      	lsrs	r2, r3, #8
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	00da      	lsls	r2, r3, #3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	3b01      	subs	r3, #1
 8005684:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d118      	bne.n	80056be <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f043 0220 	orr.w	r2, r3, #32
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80056ae:	b662      	cpsie	i
}
 80056b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e09a      	b.n	80057f4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d1d9      	bne.n	8005680 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800570e:	b662      	cpsie	i
}
 8005710:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005744:	e042      	b.n	80057cc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fc82 	bl	8006054 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e04c      	b.n	80057f4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b04      	cmp	r3, #4
 8005798:	d118      	bne.n	80057cc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f47f ae94 	bne.w	80054fe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e000      	b.n	80057f4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
  }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3728      	adds	r7, #40	; 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	00010004 	.word	0x00010004
 8005800:	20000008 	.word	0x20000008
 8005804:	14f8b589 	.word	0x14f8b589

08005808 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d006      	beq.n	8005832 <I2C_MasterRequestWrite+0x2a>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d003      	beq.n	8005832 <I2C_MasterRequestWrite+0x2a>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005830:	d108      	bne.n	8005844 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e00b      	b.n	800585c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	2b12      	cmp	r3, #18
 800584a:	d107      	bne.n	800585c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fa9b 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005882:	d103      	bne.n	800588c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e035      	b.n	80058fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005898:	d108      	bne.n	80058ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800589a:	897b      	ldrh	r3, [r7, #10]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a8:	611a      	str	r2, [r3, #16]
 80058aa:	e01b      	b.n	80058e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058ac:	897b      	ldrh	r3, [r7, #10]
 80058ae:	11db      	asrs	r3, r3, #7
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f063 030f 	orn	r3, r3, #15
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	490e      	ldr	r1, [pc, #56]	; (8005904 <I2C_MasterRequestWrite+0xfc>)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fac1 	bl	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e010      	b.n	80058fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4907      	ldr	r1, [pc, #28]	; (8005908 <I2C_MasterRequestWrite+0x100>)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fab1 	bl	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	00010008 	.word	0x00010008
 8005908:	00010002 	.word	0x00010002

0800590c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	460b      	mov	r3, r1
 800591a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005930:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d006      	beq.n	8005946 <I2C_MasterRequestRead+0x3a>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d003      	beq.n	8005946 <I2C_MasterRequestRead+0x3a>
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005944:	d108      	bne.n	8005958 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e00b      	b.n	8005970 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	2b11      	cmp	r3, #17
 800595e:	d107      	bne.n	8005970 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800596e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fa11 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00d      	beq.n	80059a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005996:	d103      	bne.n	80059a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800599e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e079      	b.n	8005a98 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ac:	d108      	bne.n	80059c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059ae:	897b      	ldrh	r3, [r7, #10]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	611a      	str	r2, [r3, #16]
 80059be:	e05f      	b.n	8005a80 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059c0:	897b      	ldrh	r3, [r7, #10]
 80059c2:	11db      	asrs	r3, r3, #7
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f003 0306 	and.w	r3, r3, #6
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f063 030f 	orn	r3, r3, #15
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	4930      	ldr	r1, [pc, #192]	; (8005aa0 <I2C_MasterRequestRead+0x194>)
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fa37 	bl	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e054      	b.n	8005a98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059ee:	897b      	ldrh	r3, [r7, #10]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4929      	ldr	r1, [pc, #164]	; (8005aa4 <I2C_MasterRequestRead+0x198>)
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fa27 	bl	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e044      	b.n	8005a98 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f9af 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5a:	d103      	bne.n	8005a64 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a62:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e017      	b.n	8005a98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005a68:	897b      	ldrh	r3, [r7, #10]
 8005a6a:	11db      	asrs	r3, r3, #7
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 0306 	and.w	r3, r3, #6
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f063 030e 	orn	r3, r3, #14
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4907      	ldr	r1, [pc, #28]	; (8005aa4 <I2C_MasterRequestRead+0x198>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f9e3 	bl	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	00010008 	.word	0x00010008
 8005aa4:	00010002 	.word	0x00010002

08005aa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	817b      	strh	r3, [r7, #10]
 8005aba:	460b      	mov	r3, r1
 8005abc:	813b      	strh	r3, [r7, #8]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f960 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af8:	d103      	bne.n	8005b02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e05f      	b.n	8005bc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b06:	897b      	ldrh	r3, [r7, #10]
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	6a3a      	ldr	r2, [r7, #32]
 8005b1a:	492d      	ldr	r1, [pc, #180]	; (8005bd0 <I2C_RequestMemoryWrite+0x128>)
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f998 	bl	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e04c      	b.n	8005bc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b44:	6a39      	ldr	r1, [r7, #32]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fa02 	bl	8005f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d107      	bne.n	8005b6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e02b      	b.n	8005bc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d105      	bne.n	8005b80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b74:	893b      	ldrh	r3, [r7, #8]
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	611a      	str	r2, [r3, #16]
 8005b7e:	e021      	b.n	8005bc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b80:	893b      	ldrh	r3, [r7, #8]
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b90:	6a39      	ldr	r1, [r7, #32]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f9dc 	bl	8005f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d107      	bne.n	8005bb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e005      	b.n	8005bc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bba:	893b      	ldrh	r3, [r7, #8]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	00010002 	.word	0x00010002

08005bd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	4608      	mov	r0, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	461a      	mov	r2, r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	817b      	strh	r3, [r7, #10]
 8005be6:	460b      	mov	r3, r1
 8005be8:	813b      	strh	r3, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f8c2 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00d      	beq.n	8005c42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c34:	d103      	bne.n	8005c3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e0aa      	b.n	8005d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c42:	897b      	ldrh	r3, [r7, #10]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	6a3a      	ldr	r2, [r7, #32]
 8005c56:	4952      	ldr	r1, [pc, #328]	; (8005da0 <I2C_RequestMemoryRead+0x1cc>)
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f8fa 	bl	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e097      	b.n	8005d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c80:	6a39      	ldr	r1, [r7, #32]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f964 	bl	8005f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00d      	beq.n	8005caa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d107      	bne.n	8005ca6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e076      	b.n	8005d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d105      	bne.n	8005cbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cb0:	893b      	ldrh	r3, [r7, #8]
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	611a      	str	r2, [r3, #16]
 8005cba:	e021      	b.n	8005d00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cbc:	893b      	ldrh	r3, [r7, #8]
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ccc:	6a39      	ldr	r1, [r7, #32]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f93e 	bl	8005f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d107      	bne.n	8005cf2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e050      	b.n	8005d98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf6:	893b      	ldrh	r3, [r7, #8]
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d02:	6a39      	ldr	r1, [r7, #32]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f923 	bl	8005f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d107      	bne.n	8005d28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e035      	b.n	8005d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f82b 	bl	8005da4 <I2C_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00d      	beq.n	8005d70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d62:	d103      	bne.n	8005d6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e013      	b.n	8005d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d70:	897b      	ldrh	r3, [r7, #10]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	6a3a      	ldr	r2, [r7, #32]
 8005d84:	4906      	ldr	r1, [pc, #24]	; (8005da0 <I2C_RequestMemoryRead+0x1cc>)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f863 	bl	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	00010002 	.word	0x00010002

08005da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	4613      	mov	r3, r2
 8005db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005db4:	e025      	b.n	8005e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dbc:	d021      	beq.n	8005e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dbe:	f7fe f995 	bl	80040ec <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d302      	bcc.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d116      	bne.n	8005e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f043 0220 	orr.w	r2, r3, #32
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e023      	b.n	8005e4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	0c1b      	lsrs	r3, r3, #16
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d10d      	bne.n	8005e28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	43da      	mvns	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	e00c      	b.n	8005e42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	43da      	mvns	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4013      	ands	r3, r2
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d0b6      	beq.n	8005db6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
 8005e5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e60:	e051      	b.n	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e70:	d123      	bne.n	8005eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f043 0204 	orr.w	r2, r3, #4
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e046      	b.n	8005f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec0:	d021      	beq.n	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec2:	f7fe f913 	bl	80040ec <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d116      	bne.n	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f043 0220 	orr.w	r2, r3, #32
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e020      	b.n	8005f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10c      	bne.n	8005f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	43da      	mvns	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf14      	ite	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	2300      	moveq	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	e00b      	b.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	43da      	mvns	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4013      	ands	r3, r2
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d18d      	bne.n	8005e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f5c:	e02d      	b.n	8005fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f8ce 	bl	8006100 <I2C_IsAcknowledgeFailed>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e02d      	b.n	8005fca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f74:	d021      	beq.n	8005fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f76:	f7fe f8b9 	bl	80040ec <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d302      	bcc.n	8005f8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d116      	bne.n	8005fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f043 0220 	orr.w	r2, r3, #32
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e007      	b.n	8005fca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc4:	2b80      	cmp	r3, #128	; 0x80
 8005fc6:	d1ca      	bne.n	8005f5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fde:	e02d      	b.n	800603c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f88d 	bl	8006100 <I2C_IsAcknowledgeFailed>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e02d      	b.n	800604c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff6:	d021      	beq.n	800603c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff8:	f7fe f878 	bl	80040ec <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	429a      	cmp	r2, r3
 8006006:	d302      	bcc.n	800600e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d116      	bne.n	800603c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e007      	b.n	800604c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b04      	cmp	r3, #4
 8006048:	d1ca      	bne.n	8005fe0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006060:	e042      	b.n	80060e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d119      	bne.n	80060a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0210 	mvn.w	r2, #16
 8006078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e029      	b.n	80060f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a4:	f7fe f822 	bl	80040ec <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d302      	bcc.n	80060ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d116      	bne.n	80060e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e007      	b.n	80060f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d1b5      	bne.n	8006062 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006116:	d11b      	bne.n	8006150 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006120:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	f043 0204 	orr.w	r2, r3, #4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <HAL_PWR_PVD_IRQHandler+0x20>)
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800616c:	f000 f808 	bl	8006180 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006170:	4b02      	ldr	r3, [pc, #8]	; (800617c <HAL_PWR_PVD_IRQHandler+0x20>)
 8006172:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006176:	615a      	str	r2, [r3, #20]
  }
}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40010400 	.word	0x40010400

08006180 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e272      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8087 	beq.w	80062ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061ac:	4b92      	ldr	r3, [pc, #584]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d00c      	beq.n	80061d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061b8:	4b8f      	ldr	r3, [pc, #572]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 030c 	and.w	r3, r3, #12
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d112      	bne.n	80061ea <HAL_RCC_OscConfig+0x5e>
 80061c4:	4b8c      	ldr	r3, [pc, #560]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d0:	d10b      	bne.n	80061ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d2:	4b89      	ldr	r3, [pc, #548]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d06c      	beq.n	80062b8 <HAL_RCC_OscConfig+0x12c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d168      	bne.n	80062b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e24c      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f2:	d106      	bne.n	8006202 <HAL_RCC_OscConfig+0x76>
 80061f4:	4b80      	ldr	r3, [pc, #512]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a7f      	ldr	r2, [pc, #508]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80061fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	e02e      	b.n	8006260 <HAL_RCC_OscConfig+0xd4>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10c      	bne.n	8006224 <HAL_RCC_OscConfig+0x98>
 800620a:	4b7b      	ldr	r3, [pc, #492]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a7a      	ldr	r2, [pc, #488]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4b78      	ldr	r3, [pc, #480]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a77      	ldr	r2, [pc, #476]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800621c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	e01d      	b.n	8006260 <HAL_RCC_OscConfig+0xd4>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800622c:	d10c      	bne.n	8006248 <HAL_RCC_OscConfig+0xbc>
 800622e:	4b72      	ldr	r3, [pc, #456]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a71      	ldr	r2, [pc, #452]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	4b6f      	ldr	r3, [pc, #444]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a6e      	ldr	r2, [pc, #440]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e00b      	b.n	8006260 <HAL_RCC_OscConfig+0xd4>
 8006248:	4b6b      	ldr	r3, [pc, #428]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a6a      	ldr	r2, [pc, #424]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800624e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	4b68      	ldr	r3, [pc, #416]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a67      	ldr	r2, [pc, #412]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800625a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800625e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d013      	beq.n	8006290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006268:	f7fd ff40 	bl	80040ec <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006270:	f7fd ff3c 	bl	80040ec <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b64      	cmp	r3, #100	; 0x64
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e200      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006282:	4b5d      	ldr	r3, [pc, #372]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0xe4>
 800628e:	e014      	b.n	80062ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006290:	f7fd ff2c 	bl	80040ec <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006298:	f7fd ff28 	bl	80040ec <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	; 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e1ec      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062aa:	4b53      	ldr	r3, [pc, #332]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x10c>
 80062b6:	e000      	b.n	80062ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d063      	beq.n	800638e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062c6:	4b4c      	ldr	r3, [pc, #304]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f003 030c 	and.w	r3, r3, #12
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062d2:	4b49      	ldr	r3, [pc, #292]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f003 030c 	and.w	r3, r3, #12
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d11c      	bne.n	8006318 <HAL_RCC_OscConfig+0x18c>
 80062de:	4b46      	ldr	r3, [pc, #280]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d116      	bne.n	8006318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ea:	4b43      	ldr	r3, [pc, #268]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_RCC_OscConfig+0x176>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d001      	beq.n	8006302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e1c0      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006302:	4b3d      	ldr	r3, [pc, #244]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	4939      	ldr	r1, [pc, #228]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006316:	e03a      	b.n	800638e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006320:	4b36      	ldr	r3, [pc, #216]	; (80063fc <HAL_RCC_OscConfig+0x270>)
 8006322:	2201      	movs	r2, #1
 8006324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006326:	f7fd fee1 	bl	80040ec <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800632e:	f7fd fedd 	bl	80040ec <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e1a1      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800634c:	4b2a      	ldr	r3, [pc, #168]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4927      	ldr	r1, [pc, #156]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	600b      	str	r3, [r1, #0]
 8006360:	e015      	b.n	800638e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006362:	4b26      	ldr	r3, [pc, #152]	; (80063fc <HAL_RCC_OscConfig+0x270>)
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006368:	f7fd fec0 	bl	80040ec <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006370:	f7fd febc 	bl	80040ec <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e180      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006382:	4b1d      	ldr	r3, [pc, #116]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f0      	bne.n	8006370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d03a      	beq.n	8006410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d019      	beq.n	80063d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a2:	4b17      	ldr	r3, [pc, #92]	; (8006400 <HAL_RCC_OscConfig+0x274>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a8:	f7fd fea0 	bl	80040ec <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b0:	f7fd fe9c 	bl	80040ec <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e160      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c2:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063ce:	2001      	movs	r0, #1
 80063d0:	f000 fb08 	bl	80069e4 <RCC_Delay>
 80063d4:	e01c      	b.n	8006410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063d6:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <HAL_RCC_OscConfig+0x274>)
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063dc:	f7fd fe86 	bl	80040ec <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e2:	e00f      	b.n	8006404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063e4:	f7fd fe82 	bl	80040ec <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d908      	bls.n	8006404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e146      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
 80063f6:	bf00      	nop
 80063f8:	40021000 	.word	0x40021000
 80063fc:	42420000 	.word	0x42420000
 8006400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006404:	4b92      	ldr	r3, [pc, #584]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e9      	bne.n	80063e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80a6 	beq.w	800656a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006422:	4b8b      	ldr	r3, [pc, #556]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800642e:	4b88      	ldr	r3, [pc, #544]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4a87      	ldr	r2, [pc, #540]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006438:	61d3      	str	r3, [r2, #28]
 800643a:	4b85      	ldr	r3, [pc, #532]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800644a:	4b82      	ldr	r3, [pc, #520]	; (8006654 <HAL_RCC_OscConfig+0x4c8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d118      	bne.n	8006488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006456:	4b7f      	ldr	r3, [pc, #508]	; (8006654 <HAL_RCC_OscConfig+0x4c8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a7e      	ldr	r2, [pc, #504]	; (8006654 <HAL_RCC_OscConfig+0x4c8>)
 800645c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006462:	f7fd fe43 	bl	80040ec <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800646a:	f7fd fe3f 	bl	80040ec <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b64      	cmp	r3, #100	; 0x64
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e103      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647c:	4b75      	ldr	r3, [pc, #468]	; (8006654 <HAL_RCC_OscConfig+0x4c8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d106      	bne.n	800649e <HAL_RCC_OscConfig+0x312>
 8006490:	4b6f      	ldr	r3, [pc, #444]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	4a6e      	ldr	r2, [pc, #440]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	6213      	str	r3, [r2, #32]
 800649c:	e02d      	b.n	80064fa <HAL_RCC_OscConfig+0x36e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x334>
 80064a6:	4b6a      	ldr	r3, [pc, #424]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	4a69      	ldr	r2, [pc, #420]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	6213      	str	r3, [r2, #32]
 80064b2:	4b67      	ldr	r3, [pc, #412]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	4a66      	ldr	r2, [pc, #408]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	6213      	str	r3, [r2, #32]
 80064be:	e01c      	b.n	80064fa <HAL_RCC_OscConfig+0x36e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b05      	cmp	r3, #5
 80064c6:	d10c      	bne.n	80064e2 <HAL_RCC_OscConfig+0x356>
 80064c8:	4b61      	ldr	r3, [pc, #388]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	4a60      	ldr	r2, [pc, #384]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064ce:	f043 0304 	orr.w	r3, r3, #4
 80064d2:	6213      	str	r3, [r2, #32]
 80064d4:	4b5e      	ldr	r3, [pc, #376]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	4a5d      	ldr	r2, [pc, #372]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	6213      	str	r3, [r2, #32]
 80064e0:	e00b      	b.n	80064fa <HAL_RCC_OscConfig+0x36e>
 80064e2:	4b5b      	ldr	r3, [pc, #364]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	4a5a      	ldr	r2, [pc, #360]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	f023 0301 	bic.w	r3, r3, #1
 80064ec:	6213      	str	r3, [r2, #32]
 80064ee:	4b58      	ldr	r3, [pc, #352]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	4a57      	ldr	r2, [pc, #348]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80064f4:	f023 0304 	bic.w	r3, r3, #4
 80064f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d015      	beq.n	800652e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006502:	f7fd fdf3 	bl	80040ec <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006508:	e00a      	b.n	8006520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fd fdef 	bl	80040ec <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	4293      	cmp	r3, r2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e0b1      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006520:	4b4b      	ldr	r3, [pc, #300]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0ee      	beq.n	800650a <HAL_RCC_OscConfig+0x37e>
 800652c:	e014      	b.n	8006558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800652e:	f7fd fddd 	bl	80040ec <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006534:	e00a      	b.n	800654c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006536:	f7fd fdd9 	bl	80040ec <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	f241 3288 	movw	r2, #5000	; 0x1388
 8006544:	4293      	cmp	r3, r2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e09b      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800654c:	4b40      	ldr	r3, [pc, #256]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ee      	bne.n	8006536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d105      	bne.n	800656a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800655e:	4b3c      	ldr	r3, [pc, #240]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	4a3b      	ldr	r2, [pc, #236]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8087 	beq.w	8006682 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006574:	4b36      	ldr	r3, [pc, #216]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 030c 	and.w	r3, r3, #12
 800657c:	2b08      	cmp	r3, #8
 800657e:	d061      	beq.n	8006644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d146      	bne.n	8006616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006588:	4b33      	ldr	r3, [pc, #204]	; (8006658 <HAL_RCC_OscConfig+0x4cc>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658e:	f7fd fdad 	bl	80040ec <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006596:	f7fd fda9 	bl	80040ec <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e06d      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a8:	4b29      	ldr	r3, [pc, #164]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f0      	bne.n	8006596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065bc:	d108      	bne.n	80065d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065be:	4b24      	ldr	r3, [pc, #144]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	4921      	ldr	r1, [pc, #132]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065d0:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a19      	ldr	r1, [r3, #32]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	430b      	orrs	r3, r1
 80065e2:	491b      	ldr	r1, [pc, #108]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e8:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <HAL_RCC_OscConfig+0x4cc>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ee:	f7fd fd7d 	bl	80040ec <HAL_GetTick>
 80065f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f6:	f7fd fd79 	bl	80040ec <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e03d      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0f0      	beq.n	80065f6 <HAL_RCC_OscConfig+0x46a>
 8006614:	e035      	b.n	8006682 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <HAL_RCC_OscConfig+0x4cc>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661c:	f7fd fd66 	bl	80040ec <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006624:	f7fd fd62 	bl	80040ec <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e026      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <HAL_RCC_OscConfig+0x4c4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1f0      	bne.n	8006624 <HAL_RCC_OscConfig+0x498>
 8006642:	e01e      	b.n	8006682 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d107      	bne.n	800665c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e019      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
 8006650:	40021000 	.word	0x40021000
 8006654:	40007000 	.word	0x40007000
 8006658:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_OscConfig+0x500>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	429a      	cmp	r2, r3
 800666e:	d106      	bne.n	800667e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d001      	beq.n	8006682 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000

08006690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0d0      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066a4:	4b6a      	ldr	r3, [pc, #424]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d910      	bls.n	80066d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b2:	4b67      	ldr	r3, [pc, #412]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 0207 	bic.w	r2, r3, #7
 80066ba:	4965      	ldr	r1, [pc, #404]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	4313      	orrs	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b63      	ldr	r3, [pc, #396]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0b8      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d020      	beq.n	8006722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066ec:	4b59      	ldr	r3, [pc, #356]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4a58      	ldr	r2, [pc, #352]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006704:	4b53      	ldr	r3, [pc, #332]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4a52      	ldr	r2, [pc, #328]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800670a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800670e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006710:	4b50      	ldr	r3, [pc, #320]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	494d      	ldr	r1, [pc, #308]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d040      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d107      	bne.n	8006746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006736:	4b47      	ldr	r3, [pc, #284]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d115      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e07f      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d107      	bne.n	800675e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674e:	4b41      	ldr	r3, [pc, #260]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e073      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675e:	4b3d      	ldr	r3, [pc, #244]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e06b      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800676e:	4b39      	ldr	r3, [pc, #228]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f023 0203 	bic.w	r2, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	4936      	ldr	r1, [pc, #216]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800677c:	4313      	orrs	r3, r2
 800677e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006780:	f7fd fcb4 	bl	80040ec <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006786:	e00a      	b.n	800679e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006788:	f7fd fcb0 	bl	80040ec <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f241 3288 	movw	r2, #5000	; 0x1388
 8006796:	4293      	cmp	r3, r2
 8006798:	d901      	bls.n	800679e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e053      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679e:	4b2d      	ldr	r3, [pc, #180]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f003 020c 	and.w	r2, r3, #12
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d1eb      	bne.n	8006788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067b0:	4b27      	ldr	r3, [pc, #156]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d210      	bcs.n	80067e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067be:	4b24      	ldr	r3, [pc, #144]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f023 0207 	bic.w	r2, r3, #7
 80067c6:	4922      	ldr	r1, [pc, #136]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ce:	4b20      	ldr	r3, [pc, #128]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d001      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e032      	b.n	8006846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067ec:	4b19      	ldr	r3, [pc, #100]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4916      	ldr	r1, [pc, #88]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800680a:	4b12      	ldr	r3, [pc, #72]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	490e      	ldr	r1, [pc, #56]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 800681a:	4313      	orrs	r3, r2
 800681c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800681e:	f000 f821 	bl	8006864 <HAL_RCC_GetSysClockFreq>
 8006822:	4602      	mov	r2, r0
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	490a      	ldr	r1, [pc, #40]	; (8006858 <HAL_RCC_ClockConfig+0x1c8>)
 8006830:	5ccb      	ldrb	r3, [r1, r3]
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	4a09      	ldr	r2, [pc, #36]	; (800685c <HAL_RCC_ClockConfig+0x1cc>)
 8006838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800683a:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RCC_ClockConfig+0x1d0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fd fb12 	bl	8003e68 <HAL_InitTick>

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40022000 	.word	0x40022000
 8006854:	40021000 	.word	0x40021000
 8006858:	0800d384 	.word	0x0800d384
 800685c:	20000008 	.word	0x20000008
 8006860:	2000000c 	.word	0x2000000c

08006864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006864:	b490      	push	{r4, r7}
 8006866:	b08a      	sub	sp, #40	; 0x28
 8006868:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800686a:	4b29      	ldr	r3, [pc, #164]	; (8006910 <HAL_RCC_GetSysClockFreq+0xac>)
 800686c:	1d3c      	adds	r4, r7, #4
 800686e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006874:	f240 2301 	movw	r3, #513	; 0x201
 8006878:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f003 030c 	and.w	r3, r3, #12
 800689a:	2b04      	cmp	r3, #4
 800689c:	d002      	beq.n	80068a4 <HAL_RCC_GetSysClockFreq+0x40>
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d003      	beq.n	80068aa <HAL_RCC_GetSysClockFreq+0x46>
 80068a2:	e02b      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068a4:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068a6:	623b      	str	r3, [r7, #32]
      break;
 80068a8:	e02b      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	0c9b      	lsrs	r3, r3, #18
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	3328      	adds	r3, #40	; 0x28
 80068b4:	443b      	add	r3, r7
 80068b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d012      	beq.n	80068ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068c6:	4b13      	ldr	r3, [pc, #76]	; (8006914 <HAL_RCC_GetSysClockFreq+0xb0>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	0c5b      	lsrs	r3, r3, #17
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	3328      	adds	r3, #40	; 0x28
 80068d2:	443b      	add	r3, r7
 80068d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	4a0e      	ldr	r2, [pc, #56]	; (8006918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068de:	fb03 f202 	mul.w	r2, r3, r2
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ea:	e004      	b.n	80068f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	4a0b      	ldr	r2, [pc, #44]	; (800691c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f0:	fb02 f303 	mul.w	r3, r2, r3
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	623b      	str	r3, [r7, #32]
      break;
 80068fa:	e002      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068fc:	4b06      	ldr	r3, [pc, #24]	; (8006918 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068fe:	623b      	str	r3, [r7, #32]
      break;
 8006900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006902:	6a3b      	ldr	r3, [r7, #32]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3728      	adds	r7, #40	; 0x28
 8006908:	46bd      	mov	sp, r7
 800690a:	bc90      	pop	{r4, r7}
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	0800cf6c 	.word	0x0800cf6c
 8006914:	40021000 	.word	0x40021000
 8006918:	007a1200 	.word	0x007a1200
 800691c:	003d0900 	.word	0x003d0900

08006920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006924:	4b02      	ldr	r3, [pc, #8]	; (8006930 <HAL_RCC_GetHCLKFreq+0x10>)
 8006926:	681b      	ldr	r3, [r3, #0]
}
 8006928:	4618      	mov	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr
 8006930:	20000008 	.word	0x20000008

08006934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006938:	f7ff fff2 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 800693c:	4602      	mov	r2, r0
 800693e:	4b05      	ldr	r3, [pc, #20]	; (8006954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	4903      	ldr	r1, [pc, #12]	; (8006958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800694a:	5ccb      	ldrb	r3, [r1, r3]
 800694c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006950:	4618      	mov	r0, r3
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40021000 	.word	0x40021000
 8006958:	0800d394 	.word	0x0800d394

0800695c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006960:	f7ff ffde 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8006964:	4602      	mov	r2, r0
 8006966:	4b05      	ldr	r3, [pc, #20]	; (800697c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	0adb      	lsrs	r3, r3, #11
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	4903      	ldr	r1, [pc, #12]	; (8006980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006972:	5ccb      	ldrb	r3, [r1, r3]
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006978:	4618      	mov	r0, r3
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40021000 	.word	0x40021000
 8006980:	0800d394 	.word	0x0800d394

08006984 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	220f      	movs	r2, #15
 8006992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006994:	4b11      	ldr	r3, [pc, #68]	; (80069dc <HAL_RCC_GetClockConfig+0x58>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f003 0203 	and.w	r2, r3, #3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80069a0:	4b0e      	ldr	r3, [pc, #56]	; (80069dc <HAL_RCC_GetClockConfig+0x58>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_RCC_GetClockConfig+0x58>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <HAL_RCC_GetClockConfig+0x58>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	08db      	lsrs	r3, r3, #3
 80069be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069c6:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <HAL_RCC_GetClockConfig+0x5c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0207 	and.w	r2, r3, #7
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr
 80069dc:	40021000 	.word	0x40021000
 80069e0:	40022000 	.word	0x40022000

080069e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <RCC_Delay+0x34>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <RCC_Delay+0x38>)
 80069f2:	fba2 2303 	umull	r2, r3, r2, r3
 80069f6:	0a5b      	lsrs	r3, r3, #9
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a00:	bf00      	nop
  }
  while (Delay --);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	60fa      	str	r2, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f9      	bne.n	8006a00 <RCC_Delay+0x1c>
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr
 8006a18:	20000008 	.word	0x20000008
 8006a1c:	10624dd3 	.word	0x10624dd3

08006a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e076      	b.n	8006b20 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d108      	bne.n	8006a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a42:	d009      	beq.n	8006a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	61da      	str	r2, [r3, #28]
 8006a4a:	e005      	b.n	8006a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fd f92e 	bl	8003cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006adc:	ea42 0103 	orr.w	r1, r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	0c1a      	lsrs	r2, r3, #16
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f002 0204 	and.w	r2, r2, #4
 8006afe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	69da      	ldr	r2, [r3, #28]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	4613      	mov	r3, r2
 8006b36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_SPI_Transmit+0x22>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e126      	b.n	8006d98 <HAL_SPI_Transmit+0x270>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b52:	f7fd facb 	bl	80040ec <HAL_GetTick>
 8006b56:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b58:	88fb      	ldrh	r3, [r7, #6]
 8006b5a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d002      	beq.n	8006b6e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b6c:	e10b      	b.n	8006d86 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <HAL_SPI_Transmit+0x52>
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b7e:	e102      	b.n	8006d86 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2203      	movs	r2, #3
 8006b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	88fa      	ldrh	r2, [r7, #6]
 8006b98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	88fa      	ldrh	r2, [r7, #6]
 8006b9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc6:	d10f      	bne.n	8006be8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006be6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	d007      	beq.n	8006c06 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0e:	d14b      	bne.n	8006ca8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <HAL_SPI_Transmit+0xf6>
 8006c18:	8afb      	ldrh	r3, [r7, #22]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d13e      	bne.n	8006c9c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	881a      	ldrh	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	1c9a      	adds	r2, r3, #2
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c42:	e02b      	b.n	8006c9c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d112      	bne.n	8006c78 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	881a      	ldrh	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	1c9a      	adds	r2, r3, #2
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c76:	e011      	b.n	8006c9c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c78:	f7fd fa38 	bl	80040ec <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d803      	bhi.n	8006c90 <HAL_SPI_Transmit+0x168>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c8e:	d102      	bne.n	8006c96 <HAL_SPI_Transmit+0x16e>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c9a:	e074      	b.n	8006d86 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1ce      	bne.n	8006c44 <HAL_SPI_Transmit+0x11c>
 8006ca6:	e04c      	b.n	8006d42 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_SPI_Transmit+0x18e>
 8006cb0:	8afb      	ldrh	r3, [r7, #22]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d140      	bne.n	8006d38 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	7812      	ldrb	r2, [r2, #0]
 8006cc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cdc:	e02c      	b.n	8006d38 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d113      	bne.n	8006d14 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	7812      	ldrb	r2, [r2, #0]
 8006cf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d12:	e011      	b.n	8006d38 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d14:	f7fd f9ea 	bl	80040ec <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d803      	bhi.n	8006d2c <HAL_SPI_Transmit+0x204>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d2a:	d102      	bne.n	8006d32 <HAL_SPI_Transmit+0x20a>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d102      	bne.n	8006d38 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d36:	e026      	b.n	8006d86 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1cd      	bne.n	8006cde <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f9b6 	bl	80070b8 <SPI_EndRxTxTransaction>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2220      	movs	r2, #32
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d60:	2300      	movs	r3, #0
 8006d62:	613b      	str	r3, [r7, #16]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e000      	b.n	8006d86 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d96:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3720      	adds	r7, #32
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	099b      	lsrs	r3, r3, #6
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10f      	bne.n	8006de4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	099b      	lsrs	r3, r3, #6
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
    return;
 8006de2:	e0be      	b.n	8006f62 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <HAL_SPI_IRQHandler+0x66>
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	09db      	lsrs	r3, r3, #7
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
    return;
 8006e04:	e0ad      	b.n	8006f62 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <HAL_SPI_IRQHandler+0x80>
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	099b      	lsrs	r3, r3, #6
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80a1 	beq.w	8006f62 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 809a 	beq.w	8006f62 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	099b      	lsrs	r3, r3, #6
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d023      	beq.n	8006e82 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d011      	beq.n	8006e6a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4a:	f043 0204 	orr.w	r2, r3, #4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	e00b      	b.n	8006e82 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	613b      	str	r3, [r7, #16]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	693b      	ldr	r3, [r7, #16]
        return;
 8006e80:	e06f      	b.n	8006f62 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d014      	beq.n	8006eb8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	f043 0201 	orr.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d04f      	beq.n	8006f60 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ece:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d104      	bne.n	8006eec <HAL_SPI_IRQHandler+0x14c>
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d034      	beq.n	8006f56 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0203 	bic.w	r2, r2, #3
 8006efa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d011      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f08:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <HAL_SPI_IRQHandler+0x1c8>)
 8006f0a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fd fa33 	bl	800437c <HAL_DMA_Abort_IT>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d016      	beq.n	8006f5e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f34:	4a0c      	ldr	r2, [pc, #48]	; (8006f68 <HAL_SPI_IRQHandler+0x1c8>)
 8006f36:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fd fa1d 	bl	800437c <HAL_DMA_Abort_IT>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006f54:	e003      	b.n	8006f5e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f808 	bl	8006f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006f5c:	e000      	b.n	8006f60 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006f5e:	bf00      	nop
    return;
 8006f60:	bf00      	nop
  }
}
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	08006f7f 	.word	0x08006f7f

08006f6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bc80      	pop	{r7}
 8006f7c:	4770      	bx	lr

08006f7e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f7ff ffe7 	bl	8006f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fb8:	f7fd f898 	bl	80040ec <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fc8:	f7fd f890 	bl	80040ec <HAL_GetTick>
 8006fcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fce:	4b39      	ldr	r3, [pc, #228]	; (80070b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	015b      	lsls	r3, r3, #5
 8006fd4:	0d1b      	lsrs	r3, r3, #20
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	fb02 f303 	mul.w	r3, r2, r3
 8006fdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fde:	e054      	b.n	800708a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe6:	d050      	beq.n	800708a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fe8:	f7fd f880 	bl	80040ec <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d902      	bls.n	8006ffe <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d13d      	bne.n	800707a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800700c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007016:	d111      	bne.n	800703c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007020:	d004      	beq.n	800702c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702a:	d107      	bne.n	800703c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007044:	d10f      	bne.n	8007066 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007064:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e017      	b.n	80070aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	3b01      	subs	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4013      	ands	r3, r2
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	bf0c      	ite	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	2300      	movne	r3, #0
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d19b      	bne.n	8006fe0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000008 	.word	0x20000008

080070b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af02      	add	r7, sp, #8
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2200      	movs	r2, #0
 80070cc:	2180      	movs	r1, #128	; 0x80
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff ff6a 	bl	8006fa8 <SPI_WaitFlagStateUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070de:	f043 0220 	orr.w	r2, r3, #32
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e000      	b.n	80070ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e041      	b.n	800718a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fc fe2c 	bl	8003d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f000 fa70 	bl	8007618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d001      	beq.n	80071ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e03a      	b.n	8007222 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a18      	ldr	r2, [pc, #96]	; (800722c <HAL_TIM_Base_Start_IT+0x98>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00e      	beq.n	80071ec <HAL_TIM_Base_Start_IT+0x58>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d6:	d009      	beq.n	80071ec <HAL_TIM_Base_Start_IT+0x58>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a14      	ldr	r2, [pc, #80]	; (8007230 <HAL_TIM_Base_Start_IT+0x9c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d004      	beq.n	80071ec <HAL_TIM_Base_Start_IT+0x58>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a13      	ldr	r2, [pc, #76]	; (8007234 <HAL_TIM_Base_Start_IT+0xa0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d111      	bne.n	8007210 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b06      	cmp	r3, #6
 80071fc:	d010      	beq.n	8007220 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0201 	orr.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720e:	e007      	b.n	8007220 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr
 800722c:	40012c00 	.word	0x40012c00
 8007230:	40000400 	.word	0x40000400
 8007234:	40000800 	.word	0x40000800

08007238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b02      	cmp	r3, #2
 800724c:	d122      	bne.n	8007294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b02      	cmp	r3, #2
 800725a:	d11b      	bne.n	8007294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f06f 0202 	mvn.w	r2, #2
 8007264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9b1 	bl	80075e2 <HAL_TIM_IC_CaptureCallback>
 8007280:	e005      	b.n	800728e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f9a4 	bl	80075d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f9b3 	bl	80075f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0304 	and.w	r3, r3, #4
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d122      	bne.n	80072e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d11b      	bne.n	80072e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0204 	mvn.w	r2, #4
 80072b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2202      	movs	r2, #2
 80072be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f987 	bl	80075e2 <HAL_TIM_IC_CaptureCallback>
 80072d4:	e005      	b.n	80072e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f97a 	bl	80075d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f989 	bl	80075f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d122      	bne.n	800733c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f003 0308 	and.w	r3, r3, #8
 8007300:	2b08      	cmp	r3, #8
 8007302:	d11b      	bne.n	800733c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0208 	mvn.w	r2, #8
 800730c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2204      	movs	r2, #4
 8007312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f95d 	bl	80075e2 <HAL_TIM_IC_CaptureCallback>
 8007328:	e005      	b.n	8007336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f950 	bl	80075d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f95f 	bl	80075f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0310 	and.w	r3, r3, #16
 8007346:	2b10      	cmp	r3, #16
 8007348:	d122      	bne.n	8007390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b10      	cmp	r3, #16
 8007356:	d11b      	bne.n	8007390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f06f 0210 	mvn.w	r2, #16
 8007360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2208      	movs	r2, #8
 8007366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f933 	bl	80075e2 <HAL_TIM_IC_CaptureCallback>
 800737c:	e005      	b.n	800738a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f926 	bl	80075d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f935 	bl	80075f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	d10e      	bne.n	80073bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d107      	bne.n	80073bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0201 	mvn.w	r2, #1
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fc fbea 	bl	8003b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c6:	2b80      	cmp	r3, #128	; 0x80
 80073c8:	d10e      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d4:	2b80      	cmp	r3, #128	; 0x80
 80073d6:	d107      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa77 	bl	80078d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d10e      	bne.n	8007414 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	d107      	bne.n	8007414 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800740c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f8f9 	bl	8007606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b20      	cmp	r3, #32
 8007420:	d10e      	bne.n	8007440 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b20      	cmp	r3, #32
 800742e:	d107      	bne.n	8007440 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0220 	mvn.w	r2, #32
 8007438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa42 	bl	80078c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <HAL_TIM_ConfigClockSource+0x18>
 800745c:	2302      	movs	r3, #2
 800745e:	e0b3      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x180>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800747e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007486:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007498:	d03e      	beq.n	8007518 <HAL_TIM_ConfigClockSource+0xd0>
 800749a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749e:	f200 8087 	bhi.w	80075b0 <HAL_TIM_ConfigClockSource+0x168>
 80074a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a6:	f000 8085 	beq.w	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	d87f      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x168>
 80074b0:	2b70      	cmp	r3, #112	; 0x70
 80074b2:	d01a      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0xa2>
 80074b4:	2b70      	cmp	r3, #112	; 0x70
 80074b6:	d87b      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x168>
 80074b8:	2b60      	cmp	r3, #96	; 0x60
 80074ba:	d050      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x116>
 80074bc:	2b60      	cmp	r3, #96	; 0x60
 80074be:	d877      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x168>
 80074c0:	2b50      	cmp	r3, #80	; 0x50
 80074c2:	d03c      	beq.n	800753e <HAL_TIM_ConfigClockSource+0xf6>
 80074c4:	2b50      	cmp	r3, #80	; 0x50
 80074c6:	d873      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x168>
 80074c8:	2b40      	cmp	r3, #64	; 0x40
 80074ca:	d058      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x136>
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d86f      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x168>
 80074d0:	2b30      	cmp	r3, #48	; 0x30
 80074d2:	d064      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x156>
 80074d4:	2b30      	cmp	r3, #48	; 0x30
 80074d6:	d86b      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x168>
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d060      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x156>
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d867      	bhi.n	80075b0 <HAL_TIM_ConfigClockSource+0x168>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d05c      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x156>
 80074e4:	2b10      	cmp	r3, #16
 80074e6:	d05a      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074e8:	e062      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6899      	ldr	r1, [r3, #8]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f000 f966 	bl	80077ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800750c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	609a      	str	r2, [r3, #8]
      break;
 8007516:	e04e      	b.n	80075b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	6899      	ldr	r1, [r3, #8]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f000 f94f 	bl	80077ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800753a:	609a      	str	r2, [r3, #8]
      break;
 800753c:	e03b      	b.n	80075b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6859      	ldr	r1, [r3, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	461a      	mov	r2, r3
 800754c:	f000 f8c6 	bl	80076dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2150      	movs	r1, #80	; 0x50
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f91d 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 800755c:	e02b      	b.n	80075b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6859      	ldr	r1, [r3, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	461a      	mov	r2, r3
 800756c:	f000 f8e4 	bl	8007738 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2160      	movs	r1, #96	; 0x60
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f90d 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 800757c:	e01b      	b.n	80075b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6859      	ldr	r1, [r3, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	461a      	mov	r2, r3
 800758c:	f000 f8a6 	bl	80076dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2140      	movs	r1, #64	; 0x40
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f8fd 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 800759c:	e00b      	b.n	80075b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4619      	mov	r1, r3
 80075a8:	4610      	mov	r0, r2
 80075aa:	f000 f8f4 	bl	8007796 <TIM_ITRx_SetConfig>
        break;
 80075ae:	e002      	b.n	80075b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075b0:	bf00      	nop
 80075b2:	e000      	b.n	80075b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr

080075e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr

08007606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a29      	ldr	r2, [pc, #164]	; (80076d0 <TIM_Base_SetConfig+0xb8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00b      	beq.n	8007648 <TIM_Base_SetConfig+0x30>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007636:	d007      	beq.n	8007648 <TIM_Base_SetConfig+0x30>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a26      	ldr	r2, [pc, #152]	; (80076d4 <TIM_Base_SetConfig+0xbc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d003      	beq.n	8007648 <TIM_Base_SetConfig+0x30>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a25      	ldr	r2, [pc, #148]	; (80076d8 <TIM_Base_SetConfig+0xc0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d108      	bne.n	800765a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a1c      	ldr	r2, [pc, #112]	; (80076d0 <TIM_Base_SetConfig+0xb8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00b      	beq.n	800767a <TIM_Base_SetConfig+0x62>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007668:	d007      	beq.n	800767a <TIM_Base_SetConfig+0x62>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <TIM_Base_SetConfig+0xbc>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d003      	beq.n	800767a <TIM_Base_SetConfig+0x62>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <TIM_Base_SetConfig+0xc0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d108      	bne.n	800768c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a07      	ldr	r2, [pc, #28]	; (80076d0 <TIM_Base_SetConfig+0xb8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d103      	bne.n	80076c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	615a      	str	r2, [r3, #20]
}
 80076c6:	bf00      	nop
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bc80      	pop	{r7}
 80076ce:	4770      	bx	lr
 80076d0:	40012c00 	.word	0x40012c00
 80076d4:	40000400 	.word	0x40000400
 80076d8:	40000800 	.word	0x40000800

080076dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f023 0201 	bic.w	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f023 030a 	bic.w	r3, r3, #10
 8007718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr

08007738 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	f023 0210 	bic.w	r2, r3, #16
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007762:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	031b      	lsls	r3, r3, #12
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007774:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	621a      	str	r2, [r3, #32]
}
 800778c:	bf00      	nop
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	bc80      	pop	{r7}
 8007794:	4770      	bx	lr

08007796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007796:	b480      	push	{r7}
 8007798:	b085      	sub	sp, #20
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	f043 0307 	orr.w	r3, r3, #7
 80077b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	609a      	str	r2, [r3, #8]
}
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bc80      	pop	{r7}
 80077c8:	4770      	bx	lr

080077ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b087      	sub	sp, #28
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	021a      	lsls	r2, r3, #8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	609a      	str	r2, [r3, #8]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	bc80      	pop	{r7}
 8007806:	4770      	bx	lr

08007808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800781c:	2302      	movs	r3, #2
 800781e:	e046      	b.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a16      	ldr	r2, [pc, #88]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00e      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786c:	d009      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a12      	ldr	r2, [pc, #72]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d004      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a10      	ldr	r2, [pc, #64]	; (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d10c      	bne.n	800789c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	4313      	orrs	r3, r2
 8007892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr
 80078b8:	40012c00 	.word	0x40012c00
 80078bc:	40000400 	.word	0x40000400
 80078c0:	40000800 	.word	0x40000800

080078c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr

080078d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr

080078e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e03f      	b.n	800797a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fc fa56 	bl	8003dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2224      	movs	r2, #36	; 0x24
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800792a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fb8d 	bl	800804c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	4613      	mov	r3, r2
 800798e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b20      	cmp	r3, #32
 800799a:	d130      	bne.n	80079fe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_UART_Transmit_IT+0x26>
 80079a2:	88fb      	ldrh	r3, [r7, #6]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e029      	b.n	8007a00 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_UART_Transmit_IT+0x38>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e022      	b.n	8007a00 <HAL_UART_Transmit_IT+0x7e>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	88fa      	ldrh	r2, [r7, #6]
 80079cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2221      	movs	r2, #33	; 0x21
 80079de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e000      	b.n	8007a00 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80079fe:	2302      	movs	r3, #2
  }
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr
	...

08007a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	; 0x28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10d      	bne.n	8007a5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d008      	beq.n	8007a5e <HAL_UART_IRQHandler+0x52>
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa4f 	bl	8007efa <UART_Receive_IT>
      return;
 8007a5c:	e17b      	b.n	8007d56 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80b1 	beq.w	8007bc8 <HAL_UART_IRQHandler+0x1bc>
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d105      	bne.n	8007a7c <HAL_UART_IRQHandler+0x70>
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 80a6 	beq.w	8007bc8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <HAL_UART_IRQHandler+0x90>
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a94:	f043 0201 	orr.w	r2, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <HAL_UART_IRQHandler+0xb0>
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	f043 0202 	orr.w	r2, r3, #2
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <HAL_UART_IRQHandler+0xd0>
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	f043 0204 	orr.w	r2, r3, #4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00f      	beq.n	8007b06 <HAL_UART_IRQHandler+0xfa>
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <HAL_UART_IRQHandler+0xee>
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f043 0208 	orr.w	r2, r3, #8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 811e 	beq.w	8007d4c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <HAL_UART_IRQHandler+0x11e>
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f9e8 	bl	8007efa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bf14      	ite	ne
 8007b38:	2301      	movne	r3, #1
 8007b3a:	2300      	moveq	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <HAL_UART_IRQHandler+0x146>
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d031      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f92a 	bl	8007dac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d023      	beq.n	8007bae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695a      	ldr	r2, [r3, #20]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d013      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	4a76      	ldr	r2, [pc, #472]	; (8007d5c <HAL_UART_IRQHandler+0x350>)
 8007b84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fc fbf6 	bl	800437c <HAL_DMA_Abort_IT>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d016      	beq.n	8007bc4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	e00e      	b.n	8007bc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f8ec 	bl	8007d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bac:	e00a      	b.n	8007bc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f8e8 	bl	8007d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	e006      	b.n	8007bc4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f8e4 	bl	8007d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bc2:	e0c3      	b.n	8007d4c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc4:	bf00      	nop
    return;
 8007bc6:	e0c1      	b.n	8007d4c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	f040 80a1 	bne.w	8007d14 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 809b 	beq.w	8007d14 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 8095 	beq.w	8007d14 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d04e      	beq.n	8007cac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007c18:	8a3b      	ldrh	r3, [r7, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8098 	beq.w	8007d50 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c24:	8a3a      	ldrh	r2, [r7, #16]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	f080 8092 	bcs.w	8007d50 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8a3a      	ldrh	r2, [r7, #16]
 8007c30:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	2b20      	cmp	r3, #32
 8007c3a:	d02b      	beq.n	8007c94 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c4a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	695a      	ldr	r2, [r3, #20]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0201 	bic.w	r2, r2, #1
 8007c5a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	695a      	ldr	r2, [r3, #20]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c6a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0210 	bic.w	r2, r2, #16
 8007c88:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fc fb39 	bl	8004306 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f876 	bl	8007d96 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007caa:	e051      	b.n	8007d50 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d047      	beq.n	8007d54 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007cc4:	8a7b      	ldrh	r3, [r7, #18]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d044      	beq.n	8007d54 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007cd8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695a      	ldr	r2, [r3, #20]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0201 	bic.w	r2, r2, #1
 8007ce8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2220      	movs	r2, #32
 8007cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0210 	bic.w	r2, r2, #16
 8007d06:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d08:	8a7b      	ldrh	r3, [r7, #18]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f842 	bl	8007d96 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d12:	e01f      	b.n	8007d54 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d008      	beq.n	8007d30 <HAL_UART_IRQHandler+0x324>
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f87f 	bl	8007e2c <UART_Transmit_IT>
    return;
 8007d2e:	e012      	b.n	8007d56 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00d      	beq.n	8007d56 <HAL_UART_IRQHandler+0x34a>
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f8c0 	bl	8007eca <UART_EndTransmit_IT>
    return;
 8007d4a:	e004      	b.n	8007d56 <HAL_UART_IRQHandler+0x34a>
    return;
 8007d4c:	bf00      	nop
 8007d4e:	e002      	b.n	8007d56 <HAL_UART_IRQHandler+0x34a>
      return;
 8007d50:	bf00      	nop
 8007d52:	e000      	b.n	8007d56 <HAL_UART_IRQHandler+0x34a>
      return;
 8007d54:	bf00      	nop
  }
}
 8007d56:	3728      	adds	r7, #40	; 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	08007e05 	.word	0x08007e05

08007d60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bc80      	pop	{r7}
 8007d70:	4770      	bx	lr

08007d72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr

08007d84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr

08007d96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr

08007dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007dc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695a      	ldr	r2, [r3, #20]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0201 	bic.w	r2, r2, #1
 8007dd2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d107      	bne.n	8007dec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 0210 	bic.w	r2, r2, #16
 8007dea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff ffb0 	bl	8007d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e24:	bf00      	nop
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b21      	cmp	r3, #33	; 0x21
 8007e3e:	d13e      	bne.n	8007ebe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e48:	d114      	bne.n	8007e74 <UART_Transmit_IT+0x48>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d110      	bne.n	8007e74 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	1c9a      	adds	r2, r3, #2
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	621a      	str	r2, [r3, #32]
 8007e72:	e008      	b.n	8007e86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	1c59      	adds	r1, r3, #1
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6211      	str	r1, [r2, #32]
 8007e7e:	781a      	ldrb	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	4619      	mov	r1, r3
 8007e94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10f      	bne.n	8007eba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ea8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68da      	ldr	r2, [r3, #12]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	e000      	b.n	8007ec0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ebe:	2302      	movs	r3, #2
  }
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc80      	pop	{r7}
 8007ec8:	4770      	bx	lr

08007eca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff ff38 	bl	8007d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b086      	sub	sp, #24
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b22      	cmp	r3, #34	; 0x22
 8007f0c:	f040 8099 	bne.w	8008042 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f18:	d117      	bne.n	8007f4a <UART_Receive_IT+0x50>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d113      	bne.n	8007f4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	1c9a      	adds	r2, r3, #2
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	629a      	str	r2, [r3, #40]	; 0x28
 8007f48:	e026      	b.n	8007f98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5c:	d007      	beq.n	8007f6e <UART_Receive_IT+0x74>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <UART_Receive_IT+0x82>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	e008      	b.n	8007f8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d148      	bne.n	800803e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0220 	bic.w	r2, r2, #32
 8007fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695a      	ldr	r2, [r3, #20]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0201 	bic.w	r2, r2, #1
 8007fda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d123      	bne.n	8008034 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0210 	bic.w	r2, r2, #16
 8008000:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b10      	cmp	r3, #16
 800800e:	d10a      	bne.n	8008026 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff feb2 	bl	8007d96 <HAL_UARTEx_RxEventCallback>
 8008032:	e002      	b.n	800803a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff fe9c 	bl	8007d72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	e002      	b.n	8008044 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	e000      	b.n	8008044 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008042:	2302      	movs	r3, #2
  }
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008086:	f023 030c 	bic.w	r3, r3, #12
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	68b9      	ldr	r1, [r7, #8]
 8008090:	430b      	orrs	r3, r1
 8008092:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a2c      	ldr	r2, [pc, #176]	; (8008160 <UART_SetConfig+0x114>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d103      	bne.n	80080bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080b4:	f7fe fc52 	bl	800695c <HAL_RCC_GetPCLK2Freq>
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	e002      	b.n	80080c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80080bc:	f7fe fc3a 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 80080c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009a      	lsls	r2, r3, #2
 80080cc:	441a      	add	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d8:	4a22      	ldr	r2, [pc, #136]	; (8008164 <UART_SetConfig+0x118>)
 80080da:	fba2 2303 	umull	r2, r3, r2, r3
 80080de:	095b      	lsrs	r3, r3, #5
 80080e0:	0119      	lsls	r1, r3, #4
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009a      	lsls	r2, r3, #2
 80080ec:	441a      	add	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80080f8:	4b1a      	ldr	r3, [pc, #104]	; (8008164 <UART_SetConfig+0x118>)
 80080fa:	fba3 0302 	umull	r0, r3, r3, r2
 80080fe:	095b      	lsrs	r3, r3, #5
 8008100:	2064      	movs	r0, #100	; 0x64
 8008102:	fb00 f303 	mul.w	r3, r0, r3
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	3332      	adds	r3, #50	; 0x32
 800810c:	4a15      	ldr	r2, [pc, #84]	; (8008164 <UART_SetConfig+0x118>)
 800810e:	fba2 2303 	umull	r2, r3, r2, r3
 8008112:	095b      	lsrs	r3, r3, #5
 8008114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008118:	4419      	add	r1, r3
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	009a      	lsls	r2, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008130:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <UART_SetConfig+0x118>)
 8008132:	fba3 0302 	umull	r0, r3, r3, r2
 8008136:	095b      	lsrs	r3, r3, #5
 8008138:	2064      	movs	r0, #100	; 0x64
 800813a:	fb00 f303 	mul.w	r3, r0, r3
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	3332      	adds	r3, #50	; 0x32
 8008144:	4a07      	ldr	r2, [pc, #28]	; (8008164 <UART_SetConfig+0x118>)
 8008146:	fba2 2303 	umull	r2, r3, r2, r3
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	f003 020f 	and.w	r2, r3, #15
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	440a      	add	r2, r1
 8008156:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008158:	bf00      	nop
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	40013800 	.word	0x40013800
 8008164:	51eb851f 	.word	0x51eb851f

08008168 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800816e:	f3ef 8305 	mrs	r3, IPSR
 8008172:	60bb      	str	r3, [r7, #8]
  return(result);
 8008174:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10f      	bne.n	800819a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800817a:	f3ef 8310 	mrs	r3, PRIMASK
 800817e:	607b      	str	r3, [r7, #4]
  return(result);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d109      	bne.n	800819a <osKernelInitialize+0x32>
 8008186:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <osKernelInitialize+0x60>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d109      	bne.n	80081a2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800818e:	f3ef 8311 	mrs	r3, BASEPRI
 8008192:	603b      	str	r3, [r7, #0]
  return(result);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800819a:	f06f 0305 	mvn.w	r3, #5
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e00c      	b.n	80081bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <osKernelInitialize+0x60>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80081aa:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <osKernelInitialize+0x60>)
 80081ac:	2201      	movs	r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	e002      	b.n	80081bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80081b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80081bc:	68fb      	ldr	r3, [r7, #12]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr
 80081c8:	2000102c 	.word	0x2000102c

080081cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d2:	f3ef 8305 	mrs	r3, IPSR
 80081d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80081d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10f      	bne.n	80081fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081de:	f3ef 8310 	mrs	r3, PRIMASK
 80081e2:	607b      	str	r3, [r7, #4]
  return(result);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d109      	bne.n	80081fe <osKernelStart+0x32>
 80081ea:	4b11      	ldr	r3, [pc, #68]	; (8008230 <osKernelStart+0x64>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d109      	bne.n	8008206 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081f2:	f3ef 8311 	mrs	r3, BASEPRI
 80081f6:	603b      	str	r3, [r7, #0]
  return(result);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <osKernelStart+0x3a>
    stat = osErrorISR;
 80081fe:	f06f 0305 	mvn.w	r3, #5
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e00e      	b.n	8008224 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008206:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <osKernelStart+0x64>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d107      	bne.n	800821e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800820e:	4b08      	ldr	r3, [pc, #32]	; (8008230 <osKernelStart+0x64>)
 8008210:	2202      	movs	r2, #2
 8008212:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008214:	f001 fff4 	bl	800a200 <vTaskStartScheduler>
      stat = osOK;
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	e002      	b.n	8008224 <osKernelStart+0x58>
    } else {
      stat = osError;
 800821e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008222:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008224:	68fb      	ldr	r3, [r7, #12]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	2000102c 	.word	0x2000102c

08008234 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008234:	b580      	push	{r7, lr}
 8008236:	b092      	sub	sp, #72	; 0x48
 8008238:	af04      	add	r7, sp, #16
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008244:	f3ef 8305 	mrs	r3, IPSR
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800824c:	2b00      	cmp	r3, #0
 800824e:	f040 8094 	bne.w	800837a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008252:	f3ef 8310 	mrs	r3, PRIMASK
 8008256:	623b      	str	r3, [r7, #32]
  return(result);
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	2b00      	cmp	r3, #0
 800825c:	f040 808d 	bne.w	800837a <osThreadNew+0x146>
 8008260:	4b48      	ldr	r3, [pc, #288]	; (8008384 <osThreadNew+0x150>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d106      	bne.n	8008276 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008268:	f3ef 8311 	mrs	r3, BASEPRI
 800826c:	61fb      	str	r3, [r7, #28]
  return(result);
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f040 8082 	bne.w	800837a <osThreadNew+0x146>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d07e      	beq.n	800837a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800827c:	2380      	movs	r3, #128	; 0x80
 800827e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008280:	2318      	movs	r3, #24
 8008282:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008284:	2300      	movs	r3, #0
 8008286:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008288:	f107 031b 	add.w	r3, r7, #27
 800828c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800828e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008292:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d045      	beq.n	8008326 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <osThreadNew+0x74>
        name = attr->name;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d008      	beq.n	80082ce <osThreadNew+0x9a>
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	2b38      	cmp	r3, #56	; 0x38
 80082c0:	d805      	bhi.n	80082ce <osThreadNew+0x9a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <osThreadNew+0x9e>
        return (NULL);
 80082ce:	2300      	movs	r3, #0
 80082d0:	e054      	b.n	800837c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	089b      	lsrs	r3, r3, #2
 80082e0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00e      	beq.n	8008308 <osThreadNew+0xd4>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	2bbf      	cmp	r3, #191	; 0xbf
 80082f0:	d90a      	bls.n	8008308 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d006      	beq.n	8008308 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <osThreadNew+0xd4>
        mem = 1;
 8008302:	2301      	movs	r3, #1
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
 8008306:	e010      	b.n	800832a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10c      	bne.n	800832a <osThreadNew+0xf6>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d108      	bne.n	800832a <osThreadNew+0xf6>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d104      	bne.n	800832a <osThreadNew+0xf6>
          mem = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	62bb      	str	r3, [r7, #40]	; 0x28
 8008324:	e001      	b.n	800832a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	2b01      	cmp	r3, #1
 800832e:	d110      	bne.n	8008352 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008338:	9202      	str	r2, [sp, #8]
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008344:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f001 fd18 	bl	8009d7c <xTaskCreateStatic>
 800834c:	4603      	mov	r3, r0
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	e013      	b.n	800837a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	2b00      	cmp	r3, #0
 8008356:	d110      	bne.n	800837a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835a:	b29a      	uxth	r2, r3
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f001 fd62 	bl	8009e34 <xTaskCreate>
 8008370:	4603      	mov	r3, r0
 8008372:	2b01      	cmp	r3, #1
 8008374:	d001      	beq.n	800837a <osThreadNew+0x146>
          hTask = NULL;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800837a:	697b      	ldr	r3, [r7, #20]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3738      	adds	r7, #56	; 0x38
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	2000102c 	.word	0x2000102c

08008388 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008390:	f3ef 8305 	mrs	r3, IPSR
 8008394:	613b      	str	r3, [r7, #16]
  return(result);
 8008396:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10f      	bne.n	80083bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800839c:	f3ef 8310 	mrs	r3, PRIMASK
 80083a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d109      	bne.n	80083bc <osDelay+0x34>
 80083a8:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <osDelay+0x58>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d109      	bne.n	80083c4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083b0:	f3ef 8311 	mrs	r3, BASEPRI
 80083b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <osDelay+0x3c>
    stat = osErrorISR;
 80083bc:	f06f 0305 	mvn.w	r3, #5
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e007      	b.n	80083d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fe88 	bl	800a0e4 <vTaskDelay>
    }
  }

  return (stat);
 80083d4:	697b      	ldr	r3, [r7, #20]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	2000102c 	.word	0x2000102c

080083e4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	; 0x28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083f0:	f3ef 8305 	mrs	r3, IPSR
 80083f4:	613b      	str	r3, [r7, #16]
  return(result);
 80083f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f040 8085 	bne.w	8008508 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008402:	60fb      	str	r3, [r7, #12]
  return(result);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d17e      	bne.n	8008508 <osMutexNew+0x124>
 800840a:	4b42      	ldr	r3, [pc, #264]	; (8008514 <osMutexNew+0x130>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d105      	bne.n	800841e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008412:	f3ef 8311 	mrs	r3, BASEPRI
 8008416:	60bb      	str	r3, [r7, #8]
  return(result);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d174      	bne.n	8008508 <osMutexNew+0x124>
    if (attr != NULL) {
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <osMutexNew+0x48>
      type = attr->attr_bits;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	623b      	str	r3, [r7, #32]
 800842a:	e001      	b.n	8008430 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <osMutexNew+0x5c>
      rmtx = 1U;
 800843a:	2301      	movs	r3, #1
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	e001      	b.n	8008444 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d15c      	bne.n	8008508 <osMutexNew+0x124>
      mem = -1;
 800844e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008452:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d015      	beq.n	8008486 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d006      	beq.n	8008470 <osMutexNew+0x8c>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	2b4f      	cmp	r3, #79	; 0x4f
 8008468:	d902      	bls.n	8008470 <osMutexNew+0x8c>
          mem = 1;
 800846a:	2301      	movs	r3, #1
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	e00c      	b.n	800848a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d108      	bne.n	800848a <osMutexNew+0xa6>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d104      	bne.n	800848a <osMutexNew+0xa6>
            mem = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	61bb      	str	r3, [r7, #24]
 8008484:	e001      	b.n	800848a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d112      	bne.n	80084b6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	4619      	mov	r1, r3
 800849c:	2004      	movs	r0, #4
 800849e:	f000 fd1d 	bl	8008edc <xQueueCreateMutexStatic>
 80084a2:	6278      	str	r0, [r7, #36]	; 0x24
 80084a4:	e016      	b.n	80084d4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4619      	mov	r1, r3
 80084ac:	2001      	movs	r0, #1
 80084ae:	f000 fd15 	bl	8008edc <xQueueCreateMutexStatic>
 80084b2:	6278      	str	r0, [r7, #36]	; 0x24
 80084b4:	e00e      	b.n	80084d4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80084c2:	2004      	movs	r0, #4
 80084c4:	f000 fcf2 	bl	8008eac <xQueueCreateMutex>
 80084c8:	6278      	str	r0, [r7, #36]	; 0x24
 80084ca:	e003      	b.n	80084d4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80084cc:	2001      	movs	r0, #1
 80084ce:	f000 fced 	bl	8008eac <xQueueCreateMutex>
 80084d2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <osMutexNew+0x110>
        if (attr != NULL) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <osMutexNew+0x104>
          name = attr->name;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	e001      	b.n	80084ec <osMutexNew+0x108>
        } else {
          name = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80084ec:	6979      	ldr	r1, [r7, #20]
 80084ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084f0:	f001 fbbe 	bl	8009c70 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d006      	beq.n	8008508 <osMutexNew+0x124>
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	f043 0301 	orr.w	r3, r3, #1
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800850a:	4618      	mov	r0, r3
 800850c:	3728      	adds	r7, #40	; 0x28
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	2000102c 	.word	0x2000102c

08008518 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f023 0301 	bic.w	r3, r3, #1
 8008528:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008532:	2300      	movs	r3, #0
 8008534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008536:	f3ef 8305 	mrs	r3, IPSR
 800853a:	613b      	str	r3, [r7, #16]
  return(result);
 800853c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10f      	bne.n	8008562 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008542:	f3ef 8310 	mrs	r3, PRIMASK
 8008546:	60fb      	str	r3, [r7, #12]
  return(result);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <osMutexAcquire+0x4a>
 800854e:	4b20      	ldr	r3, [pc, #128]	; (80085d0 <osMutexAcquire+0xb8>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b02      	cmp	r3, #2
 8008554:	d109      	bne.n	800856a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008556:	f3ef 8311 	mrs	r3, BASEPRI
 800855a:	60bb      	str	r3, [r7, #8]
  return(result);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008562:	f06f 0305 	mvn.w	r3, #5
 8008566:	61fb      	str	r3, [r7, #28]
 8008568:	e02c      	b.n	80085c4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d103      	bne.n	8008578 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008570:	f06f 0303 	mvn.w	r3, #3
 8008574:	61fb      	str	r3, [r7, #28]
 8008576:	e025      	b.n	80085c4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d011      	beq.n	80085a2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	69b8      	ldr	r0, [r7, #24]
 8008582:	f000 fcfa 	bl	8008f7a <xQueueTakeMutexRecursive>
 8008586:	4603      	mov	r3, r0
 8008588:	2b01      	cmp	r3, #1
 800858a:	d01b      	beq.n	80085c4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008592:	f06f 0301 	mvn.w	r3, #1
 8008596:	61fb      	str	r3, [r7, #28]
 8008598:	e014      	b.n	80085c4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800859a:	f06f 0302 	mvn.w	r3, #2
 800859e:	61fb      	str	r3, [r7, #28]
 80085a0:	e010      	b.n	80085c4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	69b8      	ldr	r0, [r7, #24]
 80085a6:	f001 f88d 	bl	80096c4 <xQueueSemaphoreTake>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d009      	beq.n	80085c4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80085b6:	f06f 0301 	mvn.w	r3, #1
 80085ba:	61fb      	str	r3, [r7, #28]
 80085bc:	e002      	b.n	80085c4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80085be:	f06f 0302 	mvn.w	r3, #2
 80085c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80085c4:	69fb      	ldr	r3, [r7, #28]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	2000102c 	.word	0x2000102c

080085d4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f023 0301 	bic.w	r3, r3, #1
 80085e2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085f0:	f3ef 8305 	mrs	r3, IPSR
 80085f4:	613b      	str	r3, [r7, #16]
  return(result);
 80085f6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10f      	bne.n	800861c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008600:	60fb      	str	r3, [r7, #12]
  return(result);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d109      	bne.n	800861c <osMutexRelease+0x48>
 8008608:	4b19      	ldr	r3, [pc, #100]	; (8008670 <osMutexRelease+0x9c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d109      	bne.n	8008624 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008610:	f3ef 8311 	mrs	r3, BASEPRI
 8008614:	60bb      	str	r3, [r7, #8]
  return(result);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <osMutexRelease+0x50>
    stat = osErrorISR;
 800861c:	f06f 0305 	mvn.w	r3, #5
 8008620:	61fb      	str	r3, [r7, #28]
 8008622:	e01f      	b.n	8008664 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d103      	bne.n	8008632 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800862a:	f06f 0303 	mvn.w	r3, #3
 800862e:	61fb      	str	r3, [r7, #28]
 8008630:	e018      	b.n	8008664 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d009      	beq.n	800864c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008638:	69b8      	ldr	r0, [r7, #24]
 800863a:	f000 fc6a 	bl	8008f12 <xQueueGiveMutexRecursive>
 800863e:	4603      	mov	r3, r0
 8008640:	2b01      	cmp	r3, #1
 8008642:	d00f      	beq.n	8008664 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008644:	f06f 0302 	mvn.w	r3, #2
 8008648:	61fb      	str	r3, [r7, #28]
 800864a:	e00b      	b.n	8008664 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800864c:	2300      	movs	r3, #0
 800864e:	2200      	movs	r2, #0
 8008650:	2100      	movs	r1, #0
 8008652:	69b8      	ldr	r0, [r7, #24]
 8008654:	f000 fd32 	bl	80090bc <xQueueGenericSend>
 8008658:	4603      	mov	r3, r0
 800865a:	2b01      	cmp	r3, #1
 800865c:	d002      	beq.n	8008664 <osMutexRelease+0x90>
        stat = osErrorResource;
 800865e:	f06f 0302 	mvn.w	r3, #2
 8008662:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008664:	69fb      	ldr	r3, [r7, #28]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3720      	adds	r7, #32
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	2000102c 	.word	0x2000102c

08008674 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008674:	b580      	push	{r7, lr}
 8008676:	b08c      	sub	sp, #48	; 0x30
 8008678:	af02      	add	r7, sp, #8
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008680:	2300      	movs	r3, #0
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008684:	f3ef 8305 	mrs	r3, IPSR
 8008688:	61bb      	str	r3, [r7, #24]
  return(result);
 800868a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800868c:	2b00      	cmp	r3, #0
 800868e:	f040 8086 	bne.w	800879e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008692:	f3ef 8310 	mrs	r3, PRIMASK
 8008696:	617b      	str	r3, [r7, #20]
  return(result);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d17f      	bne.n	800879e <osSemaphoreNew+0x12a>
 800869e:	4b42      	ldr	r3, [pc, #264]	; (80087a8 <osSemaphoreNew+0x134>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d105      	bne.n	80086b2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086a6:	f3ef 8311 	mrs	r3, BASEPRI
 80086aa:	613b      	str	r3, [r7, #16]
  return(result);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d175      	bne.n	800879e <osSemaphoreNew+0x12a>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d072      	beq.n	800879e <osSemaphoreNew+0x12a>
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d86e      	bhi.n	800879e <osSemaphoreNew+0x12a>
    mem = -1;
 80086c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d015      	beq.n	80086f8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d006      	beq.n	80086e2 <osSemaphoreNew+0x6e>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	2b4f      	cmp	r3, #79	; 0x4f
 80086da:	d902      	bls.n	80086e2 <osSemaphoreNew+0x6e>
        mem = 1;
 80086dc:	2301      	movs	r3, #1
 80086de:	623b      	str	r3, [r7, #32]
 80086e0:	e00c      	b.n	80086fc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d108      	bne.n	80086fc <osSemaphoreNew+0x88>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d104      	bne.n	80086fc <osSemaphoreNew+0x88>
          mem = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	623b      	str	r3, [r7, #32]
 80086f6:	e001      	b.n	80086fc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008702:	d04c      	beq.n	800879e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d128      	bne.n	800875c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d10a      	bne.n	8008726 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	2203      	movs	r2, #3
 8008716:	9200      	str	r2, [sp, #0]
 8008718:	2200      	movs	r2, #0
 800871a:	2100      	movs	r1, #0
 800871c:	2001      	movs	r0, #1
 800871e:	f000 fad3 	bl	8008cc8 <xQueueGenericCreateStatic>
 8008722:	6278      	str	r0, [r7, #36]	; 0x24
 8008724:	e005      	b.n	8008732 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008726:	2203      	movs	r2, #3
 8008728:	2100      	movs	r1, #0
 800872a:	2001      	movs	r0, #1
 800872c:	f000 fb43 	bl	8008db6 <xQueueGenericCreate>
 8008730:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d022      	beq.n	800877e <osSemaphoreNew+0x10a>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d01f      	beq.n	800877e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800873e:	2300      	movs	r3, #0
 8008740:	2200      	movs	r2, #0
 8008742:	2100      	movs	r1, #0
 8008744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008746:	f000 fcb9 	bl	80090bc <xQueueGenericSend>
 800874a:	4603      	mov	r3, r0
 800874c:	2b01      	cmp	r3, #1
 800874e:	d016      	beq.n	800877e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008752:	f001 f943 	bl	80099dc <vQueueDelete>
            hSemaphore = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
 800875a:	e010      	b.n	800877e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d108      	bne.n	8008774 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	461a      	mov	r2, r3
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fc3b 	bl	8008fe6 <xQueueCreateCountingSemaphoreStatic>
 8008770:	6278      	str	r0, [r7, #36]	; 0x24
 8008772:	e004      	b.n	800877e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 fc6c 	bl	8009054 <xQueueCreateCountingSemaphore>
 800877c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00c      	beq.n	800879e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <osSemaphoreNew+0x11e>
          name = attr->name;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	e001      	b.n	8008796 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008796:	69f9      	ldr	r1, [r7, #28]
 8008798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800879a:	f001 fa69 	bl	8009c70 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3728      	adds	r7, #40	; 0x28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	2000102c 	.word	0x2000102c

080087ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d103      	bne.n	80087cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80087c4:	f06f 0303 	mvn.w	r3, #3
 80087c8:	61fb      	str	r3, [r7, #28]
 80087ca:	e04b      	b.n	8008864 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087cc:	f3ef 8305 	mrs	r3, IPSR
 80087d0:	617b      	str	r3, [r7, #20]
  return(result);
 80087d2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10f      	bne.n	80087f8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d8:	f3ef 8310 	mrs	r3, PRIMASK
 80087dc:	613b      	str	r3, [r7, #16]
  return(result);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d109      	bne.n	80087f8 <osSemaphoreAcquire+0x4c>
 80087e4:	4b22      	ldr	r3, [pc, #136]	; (8008870 <osSemaphoreAcquire+0xc4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d128      	bne.n	800883e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087ec:	f3ef 8311 	mrs	r3, BASEPRI
 80087f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d022      	beq.n	800883e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80087fe:	f06f 0303 	mvn.w	r3, #3
 8008802:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008804:	e02d      	b.n	8008862 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800880a:	f107 0308 	add.w	r3, r7, #8
 800880e:	461a      	mov	r2, r3
 8008810:	2100      	movs	r1, #0
 8008812:	69b8      	ldr	r0, [r7, #24]
 8008814:	f001 f862 	bl	80098dc <xQueueReceiveFromISR>
 8008818:	4603      	mov	r3, r0
 800881a:	2b01      	cmp	r3, #1
 800881c:	d003      	beq.n	8008826 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800881e:	f06f 0302 	mvn.w	r3, #2
 8008822:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008824:	e01d      	b.n	8008862 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d01a      	beq.n	8008862 <osSemaphoreAcquire+0xb6>
 800882c:	4b11      	ldr	r3, [pc, #68]	; (8008874 <osSemaphoreAcquire+0xc8>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800883c:	e011      	b.n	8008862 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	69b8      	ldr	r0, [r7, #24]
 8008842:	f000 ff3f 	bl	80096c4 <xQueueSemaphoreTake>
 8008846:	4603      	mov	r3, r0
 8008848:	2b01      	cmp	r3, #1
 800884a:	d00b      	beq.n	8008864 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008852:	f06f 0301 	mvn.w	r3, #1
 8008856:	61fb      	str	r3, [r7, #28]
 8008858:	e004      	b.n	8008864 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800885a:	f06f 0302 	mvn.w	r3, #2
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	e000      	b.n	8008864 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008862:	bf00      	nop
      }
    }
  }

  return (stat);
 8008864:	69fb      	ldr	r3, [r7, #28]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3720      	adds	r7, #32
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	2000102c 	.word	0x2000102c
 8008874:	e000ed04 	.word	0xe000ed04

08008878 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008884:	2300      	movs	r3, #0
 8008886:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d103      	bne.n	8008896 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800888e:	f06f 0303 	mvn.w	r3, #3
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	e03e      	b.n	8008914 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008896:	f3ef 8305 	mrs	r3, IPSR
 800889a:	617b      	str	r3, [r7, #20]
  return(result);
 800889c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10f      	bne.n	80088c2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a2:	f3ef 8310 	mrs	r3, PRIMASK
 80088a6:	613b      	str	r3, [r7, #16]
  return(result);
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d109      	bne.n	80088c2 <osSemaphoreRelease+0x4a>
 80088ae:	4b1c      	ldr	r3, [pc, #112]	; (8008920 <osSemaphoreRelease+0xa8>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d120      	bne.n	80088f8 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088b6:	f3ef 8311 	mrs	r3, BASEPRI
 80088ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01a      	beq.n	80088f8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80088c6:	f107 0308 	add.w	r3, r7, #8
 80088ca:	4619      	mov	r1, r3
 80088cc:	69b8      	ldr	r0, [r7, #24]
 80088ce:	f000 fd8b 	bl	80093e8 <xQueueGiveFromISR>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d003      	beq.n	80088e0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80088d8:	f06f 0302 	mvn.w	r3, #2
 80088dc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80088de:	e018      	b.n	8008912 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d015      	beq.n	8008912 <osSemaphoreRelease+0x9a>
 80088e6:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <osSemaphoreRelease+0xac>)
 80088e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80088f6:	e00c      	b.n	8008912 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80088f8:	2300      	movs	r3, #0
 80088fa:	2200      	movs	r2, #0
 80088fc:	2100      	movs	r1, #0
 80088fe:	69b8      	ldr	r0, [r7, #24]
 8008900:	f000 fbdc 	bl	80090bc <xQueueGenericSend>
 8008904:	4603      	mov	r3, r0
 8008906:	2b01      	cmp	r3, #1
 8008908:	d004      	beq.n	8008914 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800890a:	f06f 0302 	mvn.w	r3, #2
 800890e:	61fb      	str	r3, [r7, #28]
 8008910:	e000      	b.n	8008914 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008912:	bf00      	nop
    }
  }

  return (stat);
 8008914:	69fb      	ldr	r3, [r7, #28]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3720      	adds	r7, #32
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	2000102c 	.word	0x2000102c
 8008924:	e000ed04 	.word	0xe000ed04

08008928 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b08c      	sub	sp, #48	; 0x30
 800892c:	af02      	add	r7, sp, #8
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008934:	2300      	movs	r3, #0
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008938:	f3ef 8305 	mrs	r3, IPSR
 800893c:	61bb      	str	r3, [r7, #24]
  return(result);
 800893e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008940:	2b00      	cmp	r3, #0
 8008942:	d16f      	bne.n	8008a24 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008944:	f3ef 8310 	mrs	r3, PRIMASK
 8008948:	617b      	str	r3, [r7, #20]
  return(result);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d169      	bne.n	8008a24 <osMessageQueueNew+0xfc>
 8008950:	4b37      	ldr	r3, [pc, #220]	; (8008a30 <osMessageQueueNew+0x108>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d105      	bne.n	8008964 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008958:	f3ef 8311 	mrs	r3, BASEPRI
 800895c:	613b      	str	r3, [r7, #16]
  return(result);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d15f      	bne.n	8008a24 <osMessageQueueNew+0xfc>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d05c      	beq.n	8008a24 <osMessageQueueNew+0xfc>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d059      	beq.n	8008a24 <osMessageQueueNew+0xfc>
    mem = -1;
 8008970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008974:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d029      	beq.n	80089d0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d012      	beq.n	80089aa <osMessageQueueNew+0x82>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	2b4f      	cmp	r3, #79	; 0x4f
 800898a:	d90e      	bls.n	80089aa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00a      	beq.n	80089aa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695a      	ldr	r2, [r3, #20]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	fb01 f303 	mul.w	r3, r1, r3
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d302      	bcc.n	80089aa <osMessageQueueNew+0x82>
        mem = 1;
 80089a4:	2301      	movs	r3, #1
 80089a6:	623b      	str	r3, [r7, #32]
 80089a8:	e014      	b.n	80089d4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d110      	bne.n	80089d4 <osMessageQueueNew+0xac>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10c      	bne.n	80089d4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d108      	bne.n	80089d4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <osMessageQueueNew+0xac>
          mem = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	623b      	str	r3, [r7, #32]
 80089ce:	e001      	b.n	80089d4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d10b      	bne.n	80089f2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691a      	ldr	r2, [r3, #16]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	2100      	movs	r1, #0
 80089e4:	9100      	str	r1, [sp, #0]
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 f96d 	bl	8008cc8 <xQueueGenericCreateStatic>
 80089ee:	6278      	str	r0, [r7, #36]	; 0x24
 80089f0:	e008      	b.n	8008a04 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d105      	bne.n	8008a04 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80089f8:	2200      	movs	r2, #0
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 f9da 	bl	8008db6 <xQueueGenericCreate>
 8008a02:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00c      	beq.n	8008a24 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <osMessageQueueNew+0xf0>
        name = attr->name;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	61fb      	str	r3, [r7, #28]
 8008a16:	e001      	b.n	8008a1c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008a1c:	69f9      	ldr	r1, [r7, #28]
 8008a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a20:	f001 f926 	bl	8009c70 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3728      	adds	r7, #40	; 0x28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	2000102c 	.word	0x2000102c

08008a34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4a06      	ldr	r2, [pc, #24]	; (8008a5c <vApplicationGetIdleTaskMemory+0x28>)
 8008a44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	4a05      	ldr	r2, [pc, #20]	; (8008a60 <vApplicationGetIdleTaskMemory+0x2c>)
 8008a4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2280      	movs	r2, #128	; 0x80
 8008a50:	601a      	str	r2, [r3, #0]
}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr
 8008a5c:	20001030 	.word	0x20001030
 8008a60:	200010f0 	.word	0x200010f0

08008a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4a07      	ldr	r2, [pc, #28]	; (8008a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	4a06      	ldr	r2, [pc, #24]	; (8008a94 <vApplicationGetTimerTaskMemory+0x30>)
 8008a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a82:	601a      	str	r2, [r3, #0]
}
 8008a84:	bf00      	nop
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bc80      	pop	{r7}
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	200012f0 	.word	0x200012f0
 8008a94:	200013b0 	.word	0x200013b0

08008a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f103 0208 	add.w	r2, r3, #8
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f103 0208 	add.w	r2, r3, #8
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f103 0208 	add.w	r2, r3, #8
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr

08008ad6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr

08008aee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008aee:	b480      	push	{r7}
 8008af0:	b085      	sub	sp, #20
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	689a      	ldr	r2, [r3, #8]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr

08008b34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b4a:	d103      	bne.n	8008b54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	e00c      	b.n	8008b6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3308      	adds	r3, #8
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	e002      	b.n	8008b62 <vListInsert+0x2e>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d2f6      	bcs.n	8008b5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	601a      	str	r2, [r3, #0]
}
 8008b9a:	bf00      	nop
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bc80      	pop	{r7}
 8008ba2:	4770      	bx	lr

08008ba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6892      	ldr	r2, [r2, #8]
 8008bba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6852      	ldr	r2, [r2, #4]
 8008bc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d103      	bne.n	8008bd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	1e5a      	subs	r2, r3, #1
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr
	...

08008bf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c22:	f003 f813 	bl	800bc4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c32:	fb01 f303 	mul.w	r3, r1, r3
 8008c36:	441a      	add	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c52:	3b01      	subs	r3, #1
 8008c54:	68f9      	ldr	r1, [r7, #12]
 8008c56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c58:	fb01 f303 	mul.w	r3, r1, r3
 8008c5c:	441a      	add	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	22ff      	movs	r2, #255	; 0xff
 8008c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	22ff      	movs	r2, #255	; 0xff
 8008c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d114      	bne.n	8008ca2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01a      	beq.n	8008cb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3310      	adds	r3, #16
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 fe09 	bl	800a89c <xTaskRemoveFromEventList>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d012      	beq.n	8008cb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c90:	4b0c      	ldr	r3, [pc, #48]	; (8008cc4 <xQueueGenericReset+0xcc>)
 8008c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	e009      	b.n	8008cb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3310      	adds	r3, #16
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff fef6 	bl	8008a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3324      	adds	r3, #36	; 0x24
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff fef1 	bl	8008a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008cb6:	f002 fff9 	bl	800bcac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008cba:	2301      	movs	r3, #1
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	e000ed04 	.word	0xe000ed04

08008cc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08e      	sub	sp, #56	; 0x38
 8008ccc:	af02      	add	r7, sp, #8
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10a      	bne.n	8008cf2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cee:	bf00      	nop
 8008cf0:	e7fe      	b.n	8008cf0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d0a:	bf00      	nop
 8008d0c:	e7fe      	b.n	8008d0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <xQueueGenericCreateStatic+0x52>
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <xQueueGenericCreateStatic+0x56>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <xQueueGenericCreateStatic+0x58>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10a      	bne.n	8008d3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	623b      	str	r3, [r7, #32]
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <xQueueGenericCreateStatic+0x7e>
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <xQueueGenericCreateStatic+0x82>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e000      	b.n	8008d4c <xQueueGenericCreateStatic+0x84>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	61fb      	str	r3, [r7, #28]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d66:	2350      	movs	r3, #80	; 0x50
 8008d68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b50      	cmp	r3, #80	; 0x50
 8008d6e:	d00a      	beq.n	8008d86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	61bb      	str	r3, [r7, #24]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00d      	beq.n	8008dac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d98:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4613      	mov	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f000 f843 	bl	8008e32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3730      	adds	r7, #48	; 0x30
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b08a      	sub	sp, #40	; 0x28
 8008dba:	af02      	add	r7, sp, #8
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10a      	bne.n	8008de0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	613b      	str	r3, [r7, #16]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	61fb      	str	r3, [r7, #28]
 8008dea:	e004      	b.n	8008df6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	fb02 f303 	mul.w	r3, r2, r3
 8008df4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	3350      	adds	r3, #80	; 0x50
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f003 f826 	bl	800be4c <pvPortMalloc>
 8008e00:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00f      	beq.n	8008e28 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	3350      	adds	r3, #80	; 0x50
 8008e0c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e16:	79fa      	ldrb	r2, [r7, #7]
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 f805 	bl	8008e32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008e28:	69bb      	ldr	r3, [r7, #24]
	}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3720      	adds	r7, #32
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d103      	bne.n	8008e4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e002      	b.n	8008e54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e60:	2101      	movs	r1, #1
 8008e62:	69b8      	ldr	r0, [r7, #24]
 8008e64:	f7ff fec8 	bl	8008bf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e70:	bf00      	nop
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00e      	beq.n	8008ea4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008e98:	2300      	movs	r3, #0
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f90c 	bl	80090bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6939      	ldr	r1, [r7, #16]
 8008ec4:	6978      	ldr	r0, [r7, #20]
 8008ec6:	f7ff ff76 	bl	8008db6 <xQueueGenericCreate>
 8008eca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f7ff ffd3 	bl	8008e78 <prvInitialiseMutex>

		return pxNewQueue;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
	}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	2300      	movs	r3, #0
 8008eee:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	6939      	ldr	r1, [r7, #16]
 8008efa:	6978      	ldr	r0, [r7, #20]
 8008efc:	f7ff fee4 	bl	8008cc8 <xQueueGenericCreateStatic>
 8008f00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f7ff ffb8 	bl	8008e78 <prvInitialiseMutex>

		return pxNewQueue;
 8008f08:	68fb      	ldr	r3, [r7, #12]
	}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008f12:	b590      	push	{r4, r7, lr}
 8008f14:	b087      	sub	sp, #28
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10a      	bne.n	8008f3a <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	60fb      	str	r3, [r7, #12]
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	685c      	ldr	r4, [r3, #4]
 8008f3e:	f001 ff47 	bl	800add0 <xTaskGetCurrentTaskHandle>
 8008f42:	4603      	mov	r3, r0
 8008f44:	429c      	cmp	r4, r3
 8008f46:	d111      	bne.n	8008f6c <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	1e5a      	subs	r2, r3, #1
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d105      	bne.n	8008f66 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2100      	movs	r1, #0
 8008f60:	6938      	ldr	r0, [r7, #16]
 8008f62:	f000 f8ab 	bl	80090bc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008f66:	2301      	movs	r3, #1
 8008f68:	617b      	str	r3, [r7, #20]
 8008f6a:	e001      	b.n	8008f70 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008f70:	697b      	ldr	r3, [r7, #20]
	}
 8008f72:	4618      	mov	r0, r3
 8008f74:	371c      	adds	r7, #28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd90      	pop	{r4, r7, pc}

08008f7a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008f7a:	b590      	push	{r4, r7, lr}
 8008f7c:	b087      	sub	sp, #28
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10a      	bne.n	8008fa4 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	60fb      	str	r3, [r7, #12]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	685c      	ldr	r4, [r3, #4]
 8008fa8:	f001 ff12 	bl	800add0 <xTaskGetCurrentTaskHandle>
 8008fac:	4603      	mov	r3, r0
 8008fae:	429c      	cmp	r4, r3
 8008fb0:	d107      	bne.n	8008fc2 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	e00c      	b.n	8008fdc <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6938      	ldr	r0, [r7, #16]
 8008fc6:	f000 fb7d 	bl	80096c4 <xQueueSemaphoreTake>
 8008fca:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d004      	beq.n	8008fdc <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008fdc:	697b      	ldr	r3, [r7, #20]
	}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd90      	pop	{r4, r7, pc}

08008fe6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b08a      	sub	sp, #40	; 0x28
 8008fea:	af02      	add	r7, sp, #8
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	61bb      	str	r3, [r7, #24]
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	d90a      	bls.n	800902c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	617b      	str	r3, [r7, #20]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800902c:	2302      	movs	r3, #2
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	2100      	movs	r1, #0
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f7ff fe46 	bl	8008cc8 <xQueueGenericCreateStatic>
 800903c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800904a:	69fb      	ldr	r3, [r7, #28]
	}
 800904c:	4618      	mov	r0, r3
 800904e:	3720      	adds	r7, #32
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10a      	bne.n	800907a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	613b      	str	r3, [r7, #16]
}
 8009076:	bf00      	nop
 8009078:	e7fe      	b.n	8009078 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	429a      	cmp	r2, r3
 8009080:	d90a      	bls.n	8009098 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	60fb      	str	r3, [r7, #12]
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009098:	2202      	movs	r2, #2
 800909a:	2100      	movs	r1, #0
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff fe8a 	bl	8008db6 <xQueueGenericCreate>
 80090a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d002      	beq.n	80090b0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80090b0:	697b      	ldr	r3, [r7, #20]
	}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08e      	sub	sp, #56	; 0x38
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090ca:	2300      	movs	r3, #0
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10a      	bne.n	80090ee <xQueueGenericSend+0x32>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090ea:	bf00      	nop
 80090ec:	e7fe      	b.n	80090ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d103      	bne.n	80090fc <xQueueGenericSend+0x40>
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <xQueueGenericSend+0x44>
 80090fc:	2301      	movs	r3, #1
 80090fe:	e000      	b.n	8009102 <xQueueGenericSend+0x46>
 8009100:	2300      	movs	r3, #0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <xQueueGenericSend+0x60>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b02      	cmp	r3, #2
 8009120:	d103      	bne.n	800912a <xQueueGenericSend+0x6e>
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009126:	2b01      	cmp	r3, #1
 8009128:	d101      	bne.n	800912e <xQueueGenericSend+0x72>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <xQueueGenericSend+0x74>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <xQueueGenericSend+0x8e>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	623b      	str	r3, [r7, #32]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800914a:	f001 fe4f 	bl	800adec <xTaskGetSchedulerState>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <xQueueGenericSend+0x9e>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <xQueueGenericSend+0xa2>
 800915a:	2301      	movs	r3, #1
 800915c:	e000      	b.n	8009160 <xQueueGenericSend+0xa4>
 800915e:	2300      	movs	r3, #0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <xQueueGenericSend+0xbe>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	61fb      	str	r3, [r7, #28]
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800917a:	f002 fd67 	bl	800bc4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009186:	429a      	cmp	r2, r3
 8009188:	d302      	bcc.n	8009190 <xQueueGenericSend+0xd4>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d129      	bne.n	80091e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	68b9      	ldr	r1, [r7, #8]
 8009194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009196:	f000 fc5b 	bl	8009a50 <prvCopyDataToQueue>
 800919a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d010      	beq.n	80091c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	3324      	adds	r3, #36	; 0x24
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 fb77 	bl	800a89c <xTaskRemoveFromEventList>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d013      	beq.n	80091dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80091b4:	4b3f      	ldr	r3, [pc, #252]	; (80092b4 <xQueueGenericSend+0x1f8>)
 80091b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	e00a      	b.n	80091dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80091c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d007      	beq.n	80091dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091cc:	4b39      	ldr	r3, [pc, #228]	; (80092b4 <xQueueGenericSend+0x1f8>)
 80091ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091dc:	f002 fd66 	bl	800bcac <vPortExitCritical>
				return pdPASS;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e063      	b.n	80092ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d103      	bne.n	80091f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091ea:	f002 fd5f 	bl	800bcac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091ee:	2300      	movs	r3, #0
 80091f0:	e05c      	b.n	80092ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d106      	bne.n	8009206 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091f8:	f107 0314 	add.w	r3, r7, #20
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 fbb1 	bl	800a964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009202:	2301      	movs	r3, #1
 8009204:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009206:	f002 fd51 	bl	800bcac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800920a:	f001 f86d 	bl	800a2e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800920e:	f002 fd1d 	bl	800bc4c <vPortEnterCritical>
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009218:	b25b      	sxtb	r3, r3
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800921e:	d103      	bne.n	8009228 <xQueueGenericSend+0x16c>
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800922e:	b25b      	sxtb	r3, r3
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009234:	d103      	bne.n	800923e <xQueueGenericSend+0x182>
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800923e:	f002 fd35 	bl	800bcac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009242:	1d3a      	adds	r2, r7, #4
 8009244:	f107 0314 	add.w	r3, r7, #20
 8009248:	4611      	mov	r1, r2
 800924a:	4618      	mov	r0, r3
 800924c:	f001 fba0 	bl	800a990 <xTaskCheckForTimeOut>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d124      	bne.n	80092a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009258:	f000 fcf2 	bl	8009c40 <prvIsQueueFull>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d018      	beq.n	8009294 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	3310      	adds	r3, #16
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f001 fac6 	bl	800a7fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009272:	f000 fc7d 	bl	8009b70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009276:	f001 f845 	bl	800a304 <xTaskResumeAll>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	f47f af7c 	bne.w	800917a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009282:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <xQueueGenericSend+0x1f8>)
 8009284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	e772      	b.n	800917a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009296:	f000 fc6b 	bl	8009b70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800929a:	f001 f833 	bl	800a304 <xTaskResumeAll>
 800929e:	e76c      	b.n	800917a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80092a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092a2:	f000 fc65 	bl	8009b70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092a6:	f001 f82d 	bl	800a304 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80092aa:	2300      	movs	r3, #0
		}
	}
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3738      	adds	r7, #56	; 0x38
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	e000ed04 	.word	0xe000ed04

080092b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08e      	sub	sp, #56	; 0x38
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d103      	bne.n	80092f4 <xQueueGenericSendFromISR+0x3c>
 80092ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <xQueueGenericSendFromISR+0x40>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e000      	b.n	80092fa <xQueueGenericSendFromISR+0x42>
 80092f8:	2300      	movs	r3, #0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10a      	bne.n	8009314 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	623b      	str	r3, [r7, #32]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b02      	cmp	r3, #2
 8009318:	d103      	bne.n	8009322 <xQueueGenericSendFromISR+0x6a>
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <xQueueGenericSendFromISR+0x6e>
 8009322:	2301      	movs	r3, #1
 8009324:	e000      	b.n	8009328 <xQueueGenericSendFromISR+0x70>
 8009326:	2300      	movs	r3, #0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	61fb      	str	r3, [r7, #28]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009342:	f002 fd45 	bl	800bdd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009346:	f3ef 8211 	mrs	r2, BASEPRI
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	61ba      	str	r2, [r7, #24]
 800935c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800935e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009360:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936a:	429a      	cmp	r2, r3
 800936c:	d302      	bcc.n	8009374 <xQueueGenericSendFromISR+0xbc>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b02      	cmp	r3, #2
 8009372:	d12c      	bne.n	80093ce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800937a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009384:	f000 fb64 	bl	8009a50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009388:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800938c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009390:	d112      	bne.n	80093b8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d016      	beq.n	80093c8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939c:	3324      	adds	r3, #36	; 0x24
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fa7c 	bl	800a89c <xTaskRemoveFromEventList>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00e      	beq.n	80093c8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	e007      	b.n	80093c8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093bc:	3301      	adds	r3, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	b25a      	sxtb	r2, r3
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093c8:	2301      	movs	r3, #1
 80093ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80093cc:	e001      	b.n	80093d2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	637b      	str	r3, [r7, #52]	; 0x34
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3738      	adds	r7, #56	; 0x38
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	; 0x38
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	623b      	str	r3, [r7, #32]
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <xQueueGiveFromISR+0x48>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	61fb      	str	r3, [r7, #28]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d103      	bne.n	8009440 <xQueueGiveFromISR+0x58>
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <xQueueGiveFromISR+0x5c>
 8009440:	2301      	movs	r3, #1
 8009442:	e000      	b.n	8009446 <xQueueGiveFromISR+0x5e>
 8009444:	2300      	movs	r3, #0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10a      	bne.n	8009460 <xQueueGiveFromISR+0x78>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	61bb      	str	r3, [r7, #24]
}
 800945c:	bf00      	nop
 800945e:	e7fe      	b.n	800945e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009460:	f002 fcb6 	bl	800bdd0 <vPortValidateInterruptPriority>
	__asm volatile
 8009464:	f3ef 8211 	mrs	r2, BASEPRI
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	617a      	str	r2, [r7, #20]
 800947a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800947c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800947e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800948c:	429a      	cmp	r2, r3
 800948e:	d22b      	bcs.n	80094e8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094aa:	d112      	bne.n	80094d2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d016      	beq.n	80094e2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	3324      	adds	r3, #36	; 0x24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f001 f9ef 	bl	800a89c <xTaskRemoveFromEventList>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00e      	beq.n	80094e2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00b      	beq.n	80094e2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2201      	movs	r2, #1
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	e007      	b.n	80094e2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094d6:	3301      	adds	r3, #1
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	b25a      	sxtb	r2, r3
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094e2:	2301      	movs	r3, #1
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
 80094e6:	e001      	b.n	80094ec <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094e8:	2300      	movs	r3, #0
 80094ea:	637b      	str	r3, [r7, #52]	; 0x34
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f383 8811 	msr	BASEPRI, r3
}
 80094f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3738      	adds	r7, #56	; 0x38
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08c      	sub	sp, #48	; 0x30
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009510:	2300      	movs	r3, #0
 8009512:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <xQueueReceive+0x30>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	623b      	str	r3, [r7, #32]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d103      	bne.n	8009542 <xQueueReceive+0x3e>
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <xQueueReceive+0x42>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <xQueueReceive+0x44>
 8009546:	2300      	movs	r3, #0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <xQueueReceive+0x5e>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	61fb      	str	r3, [r7, #28]
}
 800955e:	bf00      	nop
 8009560:	e7fe      	b.n	8009560 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009562:	f001 fc43 	bl	800adec <xTaskGetSchedulerState>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <xQueueReceive+0x6e>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <xQueueReceive+0x72>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <xQueueReceive+0x74>
 8009576:	2300      	movs	r3, #0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <xQueueReceive+0x8e>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61bb      	str	r3, [r7, #24]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009592:	f002 fb5b 	bl	800bc4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d01f      	beq.n	80095e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095a2:	68b9      	ldr	r1, [r7, #8]
 80095a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a6:	f000 fabd 	bl	8009b24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	1e5a      	subs	r2, r3, #1
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00f      	beq.n	80095da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	3310      	adds	r3, #16
 80095be:	4618      	mov	r0, r3
 80095c0:	f001 f96c 	bl	800a89c <xTaskRemoveFromEventList>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d007      	beq.n	80095da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095ca:	4b3d      	ldr	r3, [pc, #244]	; (80096c0 <xQueueReceive+0x1bc>)
 80095cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095da:	f002 fb67 	bl	800bcac <vPortExitCritical>
				return pdPASS;
 80095de:	2301      	movs	r3, #1
 80095e0:	e069      	b.n	80096b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d103      	bne.n	80095f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095e8:	f002 fb60 	bl	800bcac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095ec:	2300      	movs	r3, #0
 80095ee:	e062      	b.n	80096b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095f6:	f107 0310 	add.w	r3, r7, #16
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 f9b2 	bl	800a964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009600:	2301      	movs	r3, #1
 8009602:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009604:	f002 fb52 	bl	800bcac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009608:	f000 fe6e 	bl	800a2e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800960c:	f002 fb1e 	bl	800bc4c <vPortEnterCritical>
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009616:	b25b      	sxtb	r3, r3
 8009618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800961c:	d103      	bne.n	8009626 <xQueueReceive+0x122>
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800962c:	b25b      	sxtb	r3, r3
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009632:	d103      	bne.n	800963c <xQueueReceive+0x138>
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800963c:	f002 fb36 	bl	800bcac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009640:	1d3a      	adds	r2, r7, #4
 8009642:	f107 0310 	add.w	r3, r7, #16
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f001 f9a1 	bl	800a990 <xTaskCheckForTimeOut>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d123      	bne.n	800969c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009656:	f000 fadd 	bl	8009c14 <prvIsQueueEmpty>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d017      	beq.n	8009690 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	3324      	adds	r3, #36	; 0x24
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f001 f8c7 	bl	800a7fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800966e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009670:	f000 fa7e 	bl	8009b70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009674:	f000 fe46 	bl	800a304 <xTaskResumeAll>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d189      	bne.n	8009592 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800967e:	4b10      	ldr	r3, [pc, #64]	; (80096c0 <xQueueReceive+0x1bc>)
 8009680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	e780      	b.n	8009592 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009692:	f000 fa6d 	bl	8009b70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009696:	f000 fe35 	bl	800a304 <xTaskResumeAll>
 800969a:	e77a      	b.n	8009592 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800969c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800969e:	f000 fa67 	bl	8009b70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096a2:	f000 fe2f 	bl	800a304 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a8:	f000 fab4 	bl	8009c14 <prvIsQueueEmpty>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f43f af6f 	beq.w	8009592 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3730      	adds	r7, #48	; 0x30
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08e      	sub	sp, #56	; 0x38
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	623b      	str	r3, [r7, #32]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	61fb      	str	r3, [r7, #28]
}
 8009710:	bf00      	nop
 8009712:	e7fe      	b.n	8009712 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009714:	f001 fb6a 	bl	800adec <xTaskGetSchedulerState>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d102      	bne.n	8009724 <xQueueSemaphoreTake+0x60>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <xQueueSemaphoreTake+0x64>
 8009724:	2301      	movs	r3, #1
 8009726:	e000      	b.n	800972a <xQueueSemaphoreTake+0x66>
 8009728:	2300      	movs	r3, #0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	61bb      	str	r3, [r7, #24]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009744:	f002 fa82 	bl	800bc4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	2b00      	cmp	r3, #0
 8009752:	d024      	beq.n	800979e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	1e5a      	subs	r2, r3, #1
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d104      	bne.n	800976e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009764:	f001 fe04 	bl	800b370 <pvTaskIncrementMutexHeldCount>
 8009768:	4602      	mov	r2, r0
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00f      	beq.n	8009796 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009778:	3310      	adds	r3, #16
 800977a:	4618      	mov	r0, r3
 800977c:	f001 f88e 	bl	800a89c <xTaskRemoveFromEventList>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d007      	beq.n	8009796 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009786:	4b54      	ldr	r3, [pc, #336]	; (80098d8 <xQueueSemaphoreTake+0x214>)
 8009788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009796:	f002 fa89 	bl	800bcac <vPortExitCritical>
				return pdPASS;
 800979a:	2301      	movs	r3, #1
 800979c:	e097      	b.n	80098ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d111      	bne.n	80097c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	617b      	str	r3, [r7, #20]
}
 80097bc:	bf00      	nop
 80097be:	e7fe      	b.n	80097be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80097c0:	f002 fa74 	bl	800bcac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097c4:	2300      	movs	r3, #0
 80097c6:	e082      	b.n	80098ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097ce:	f107 030c 	add.w	r3, r7, #12
 80097d2:	4618      	mov	r0, r3
 80097d4:	f001 f8c6 	bl	800a964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097d8:	2301      	movs	r3, #1
 80097da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097dc:	f002 fa66 	bl	800bcac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097e0:	f000 fd82 	bl	800a2e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097e4:	f002 fa32 	bl	800bc4c <vPortEnterCritical>
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097ee:	b25b      	sxtb	r3, r3
 80097f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f4:	d103      	bne.n	80097fe <xQueueSemaphoreTake+0x13a>
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009804:	b25b      	sxtb	r3, r3
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800980a:	d103      	bne.n	8009814 <xQueueSemaphoreTake+0x150>
 800980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009814:	f002 fa4a 	bl	800bcac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009818:	463a      	mov	r2, r7
 800981a:	f107 030c 	add.w	r3, r7, #12
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f001 f8b5 	bl	800a990 <xTaskCheckForTimeOut>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d132      	bne.n	8009892 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800982c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800982e:	f000 f9f1 	bl	8009c14 <prvIsQueueEmpty>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d026      	beq.n	8009886 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d109      	bne.n	8009854 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009840:	f002 fa04 	bl	800bc4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4618      	mov	r0, r3
 800984a:	f001 faed 	bl	800ae28 <xTaskPriorityInherit>
 800984e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009850:	f002 fa2c 	bl	800bcac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009856:	3324      	adds	r3, #36	; 0x24
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	4611      	mov	r1, r2
 800985c:	4618      	mov	r0, r3
 800985e:	f000 ffcd 	bl	800a7fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009864:	f000 f984 	bl	8009b70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009868:	f000 fd4c 	bl	800a304 <xTaskResumeAll>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	f47f af68 	bne.w	8009744 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009874:	4b18      	ldr	r3, [pc, #96]	; (80098d8 <xQueueSemaphoreTake+0x214>)
 8009876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	e75e      	b.n	8009744 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009888:	f000 f972 	bl	8009b70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800988c:	f000 fd3a 	bl	800a304 <xTaskResumeAll>
 8009890:	e758      	b.n	8009744 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009894:	f000 f96c 	bl	8009b70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009898:	f000 fd34 	bl	800a304 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800989c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800989e:	f000 f9b9 	bl	8009c14 <prvIsQueueEmpty>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f43f af4d 	beq.w	8009744 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00d      	beq.n	80098cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80098b0:	f002 f9cc 	bl	800bc4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80098b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098b6:	f000 f8b4 	bl	8009a22 <prvGetDisinheritPriorityAfterTimeout>
 80098ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80098bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098c2:	4618      	mov	r0, r3
 80098c4:	f001 fb8c 	bl	800afe0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80098c8:	f002 f9f0 	bl	800bcac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3738      	adds	r7, #56	; 0x38
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08e      	sub	sp, #56	; 0x38
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10a      	bne.n	8009908 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	623b      	str	r3, [r7, #32]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d103      	bne.n	8009916 <xQueueReceiveFromISR+0x3a>
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <xQueueReceiveFromISR+0x3e>
 8009916:	2301      	movs	r3, #1
 8009918:	e000      	b.n	800991c <xQueueReceiveFromISR+0x40>
 800991a:	2300      	movs	r3, #0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	61fb      	str	r3, [r7, #28]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009936:	f002 fa4b 	bl	800bdd0 <vPortValidateInterruptPriority>
	__asm volatile
 800993a:	f3ef 8211 	mrs	r2, BASEPRI
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	61ba      	str	r2, [r7, #24]
 8009950:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009952:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	2b00      	cmp	r3, #0
 8009960:	d02f      	beq.n	80099c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800996c:	68b9      	ldr	r1, [r7, #8]
 800996e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009970:	f000 f8d8 	bl	8009b24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	1e5a      	subs	r2, r3, #1
 8009978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800997c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009984:	d112      	bne.n	80099ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d016      	beq.n	80099bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	3310      	adds	r3, #16
 8009992:	4618      	mov	r0, r3
 8009994:	f000 ff82 	bl	800a89c <xTaskRemoveFromEventList>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00e      	beq.n	80099bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	e007      	b.n	80099bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099b0:	3301      	adds	r3, #1
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	b25a      	sxtb	r2, r3
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80099bc:	2301      	movs	r3, #1
 80099be:	637b      	str	r3, [r7, #52]	; 0x34
 80099c0:	e001      	b.n	80099c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	637b      	str	r3, [r7, #52]	; 0x34
 80099c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f383 8811 	msr	BASEPRI, r3
}
 80099d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3738      	adds	r7, #56	; 0x38
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10a      	bne.n	8009a04 <vQueueDelete+0x28>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	60bb      	str	r3, [r7, #8]
}
 8009a00:	bf00      	nop
 8009a02:	e7fe      	b.n	8009a02 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 f95b 	bl	8009cc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d102      	bne.n	8009a1a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f002 fadd 	bl	800bfd4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a22:	b480      	push	{r7}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d006      	beq.n	8009a40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	e001      	b.n	8009a44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a40:	2300      	movs	r3, #0
 8009a42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a44:	68fb      	ldr	r3, [r7, #12]
	}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bc80      	pop	{r7}
 8009a4e:	4770      	bx	lr

08009a50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10d      	bne.n	8009a8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d14d      	bne.n	8009b12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 fa42 	bl	800af04 <xTaskPriorityDisinherit>
 8009a80:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	605a      	str	r2, [r3, #4]
 8009a88:	e043      	b.n	8009b12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d119      	bne.n	8009ac4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6898      	ldr	r0, [r3, #8]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a98:	461a      	mov	r2, r3
 8009a9a:	68b9      	ldr	r1, [r7, #8]
 8009a9c:	f002 fbfe 	bl	800c29c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa8:	441a      	add	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	689a      	ldr	r2, [r3, #8]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d32b      	bcc.n	8009b12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	609a      	str	r2, [r3, #8]
 8009ac2:	e026      	b.n	8009b12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	68d8      	ldr	r0, [r3, #12]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009acc:	461a      	mov	r2, r3
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	f002 fbe4 	bl	800c29c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009adc:	425b      	negs	r3, r3
 8009ade:	441a      	add	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	68da      	ldr	r2, [r3, #12]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d207      	bcs.n	8009b00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af8:	425b      	negs	r3, r3
 8009afa:	441a      	add	r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d105      	bne.n	8009b12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b1a:	697b      	ldr	r3, [r7, #20]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d018      	beq.n	8009b68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3e:	441a      	add	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d303      	bcc.n	8009b58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68d9      	ldr	r1, [r3, #12]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b60:	461a      	mov	r2, r3
 8009b62:	6838      	ldr	r0, [r7, #0]
 8009b64:	f002 fb9a 	bl	800c29c <memcpy>
	}
}
 8009b68:	bf00      	nop
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b78:	f002 f868 	bl	800bc4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b84:	e011      	b.n	8009baa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d012      	beq.n	8009bb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3324      	adds	r3, #36	; 0x24
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fe82 	bl	800a89c <xTaskRemoveFromEventList>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b9e:	f000 ff59 	bl	800aa54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	dce9      	bgt.n	8009b86 <prvUnlockQueue+0x16>
 8009bb2:	e000      	b.n	8009bb6 <prvUnlockQueue+0x46>
					break;
 8009bb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	22ff      	movs	r2, #255	; 0xff
 8009bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bbe:	f002 f875 	bl	800bcac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bc2:	f002 f843 	bl	800bc4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bce:	e011      	b.n	8009bf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d012      	beq.n	8009bfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3310      	adds	r3, #16
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fe5d 	bl	800a89c <xTaskRemoveFromEventList>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009be8:	f000 ff34 	bl	800aa54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	dce9      	bgt.n	8009bd0 <prvUnlockQueue+0x60>
 8009bfc:	e000      	b.n	8009c00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009bfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	22ff      	movs	r2, #255	; 0xff
 8009c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c08:	f002 f850 	bl	800bcac <vPortExitCritical>
}
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c1c:	f002 f816 	bl	800bc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d102      	bne.n	8009c2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	e001      	b.n	8009c32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c32:	f002 f83b 	bl	800bcac <vPortExitCritical>

	return xReturn;
 8009c36:	68fb      	ldr	r3, [r7, #12]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c48:	f002 f800 	bl	800bc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d102      	bne.n	8009c5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	e001      	b.n	8009c62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c62:	f002 f823 	bl	800bcac <vPortExitCritical>

	return xReturn;
 8009c66:	68fb      	ldr	r3, [r7, #12]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60fb      	str	r3, [r7, #12]
 8009c7e:	e014      	b.n	8009caa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c80:	4a0e      	ldr	r2, [pc, #56]	; (8009cbc <vQueueAddToRegistry+0x4c>)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10b      	bne.n	8009ca4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c8c:	490b      	ldr	r1, [pc, #44]	; (8009cbc <vQueueAddToRegistry+0x4c>)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c96:	4a09      	ldr	r2, [pc, #36]	; (8009cbc <vQueueAddToRegistry+0x4c>)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ca2:	e006      	b.n	8009cb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60fb      	str	r3, [r7, #12]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b07      	cmp	r3, #7
 8009cae:	d9e7      	bls.n	8009c80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr
 8009cbc:	200017b0 	.word	0x200017b0

08009cc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	e016      	b.n	8009cfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009cce:	4a10      	ldr	r2, [pc, #64]	; (8009d10 <vQueueUnregisterQueue+0x50>)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d10b      	bne.n	8009cf6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009cde:	4a0c      	ldr	r2, [pc, #48]	; (8009d10 <vQueueUnregisterQueue+0x50>)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009ce8:	4a09      	ldr	r2, [pc, #36]	; (8009d10 <vQueueUnregisterQueue+0x50>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	4413      	add	r3, r2
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	605a      	str	r2, [r3, #4]
				break;
 8009cf4:	e006      	b.n	8009d04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2b07      	cmp	r3, #7
 8009d00:	d9e5      	bls.n	8009cce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bc80      	pop	{r7}
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	200017b0 	.word	0x200017b0

08009d14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d24:	f001 ff92 	bl	800bc4c <vPortEnterCritical>
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d2e:	b25b      	sxtb	r3, r3
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d34:	d103      	bne.n	8009d3e <vQueueWaitForMessageRestricted+0x2a>
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d44:	b25b      	sxtb	r3, r3
 8009d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d4a:	d103      	bne.n	8009d54 <vQueueWaitForMessageRestricted+0x40>
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d54:	f001 ffaa 	bl	800bcac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d106      	bne.n	8009d6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	3324      	adds	r3, #36	; 0x24
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	68b9      	ldr	r1, [r7, #8]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 fd6b 	bl	800a844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d6e:	6978      	ldr	r0, [r7, #20]
 8009d70:	f7ff fefe 	bl	8009b70 <prvUnlockQueue>
	}
 8009d74:	bf00      	nop
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08e      	sub	sp, #56	; 0x38
 8009d80:	af04      	add	r7, sp, #16
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	623b      	str	r3, [r7, #32]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	61fb      	str	r3, [r7, #28]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009dc2:	23c0      	movs	r3, #192	; 0xc0
 8009dc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2bc0      	cmp	r3, #192	; 0xc0
 8009dca:	d00a      	beq.n	8009de2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	61bb      	str	r3, [r7, #24]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01e      	beq.n	8009e26 <xTaskCreateStatic+0xaa>
 8009de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d01b      	beq.n	8009e26 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009df6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e00:	2300      	movs	r3, #0
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	9302      	str	r3, [sp, #8]
 8009e08:	f107 0314 	add.w	r3, r7, #20
 8009e0c:	9301      	str	r3, [sp, #4]
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 f851 	bl	8009ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e20:	f000 f8f0 	bl	800a004 <prvAddNewTaskToReadyList>
 8009e24:	e001      	b.n	8009e2a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e2a:	697b      	ldr	r3, [r7, #20]
	}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3728      	adds	r7, #40	; 0x28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08c      	sub	sp, #48	; 0x30
 8009e38:	af04      	add	r7, sp, #16
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	4613      	mov	r3, r2
 8009e42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e44:	88fb      	ldrh	r3, [r7, #6]
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f001 ffff 	bl	800be4c <pvPortMalloc>
 8009e4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00e      	beq.n	8009e74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009e56:	20c0      	movs	r0, #192	; 0xc0
 8009e58:	f001 fff8 	bl	800be4c <pvPortMalloc>
 8009e5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d003      	beq.n	8009e6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	631a      	str	r2, [r3, #48]	; 0x30
 8009e6a:	e005      	b.n	8009e78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e6c:	6978      	ldr	r0, [r7, #20]
 8009e6e:	f002 f8b1 	bl	800bfd4 <vPortFree>
 8009e72:	e001      	b.n	8009e78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e74:	2300      	movs	r3, #0
 8009e76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d017      	beq.n	8009eae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e86:	88fa      	ldrh	r2, [r7, #6]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	9303      	str	r3, [sp, #12]
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	9302      	str	r3, [sp, #8]
 8009e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e92:	9301      	str	r3, [sp, #4]
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 f80f 	bl	8009ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ea2:	69f8      	ldr	r0, [r7, #28]
 8009ea4:	f000 f8ae 	bl	800a004 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	61bb      	str	r3, [r7, #24]
 8009eac:	e002      	b.n	8009eb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009eb4:	69bb      	ldr	r3, [r7, #24]
	}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3720      	adds	r7, #32
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	21a5      	movs	r1, #165	; 0xa5
 8009eda:	f002 f9ed 	bl	800c2b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	f023 0307 	bic.w	r3, r3, #7
 8009ef6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	f003 0307 	and.w	r3, r3, #7
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	617b      	str	r3, [r7, #20]
}
 8009f14:	bf00      	nop
 8009f16:	e7fe      	b.n	8009f16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f18:	2300      	movs	r3, #0
 8009f1a:	61fb      	str	r3, [r7, #28]
 8009f1c:	e012      	b.n	8009f44 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	4413      	add	r3, r2
 8009f24:	7819      	ldrb	r1, [r3, #0]
 8009f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3334      	adds	r3, #52	; 0x34
 8009f2e:	460a      	mov	r2, r1
 8009f30:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	4413      	add	r3, r2
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d006      	beq.n	8009f4c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	3301      	adds	r3, #1
 8009f42:	61fb      	str	r3, [r7, #28]
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d9e9      	bls.n	8009f1e <prvInitialiseNewTask+0x5e>
 8009f4a:	e000      	b.n	8009f4e <prvInitialiseNewTask+0x8e>
		{
			break;
 8009f4c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	2b37      	cmp	r3, #55	; 0x37
 8009f5a:	d901      	bls.n	8009f60 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f5c:	2337      	movs	r3, #55	; 0x37
 8009f5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	2200      	movs	r2, #0
 8009f70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	3304      	adds	r3, #4
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fdad 	bl	8008ad6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	3318      	adds	r3, #24
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fe fda8 	bl	8008ad6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	3358      	adds	r3, #88	; 0x58
 8009fb6:	2260      	movs	r2, #96	; 0x60
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f002 f97c 	bl	800c2b8 <memset>
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc2:	4a0d      	ldr	r2, [pc, #52]	; (8009ff8 <prvInitialiseNewTask+0x138>)
 8009fc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	4a0c      	ldr	r2, [pc, #48]	; (8009ffc <prvInitialiseNewTask+0x13c>)
 8009fca:	661a      	str	r2, [r3, #96]	; 0x60
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	4a0c      	ldr	r2, [pc, #48]	; (800a000 <prvInitialiseNewTask+0x140>)
 8009fd0:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	68f9      	ldr	r1, [r7, #12]
 8009fd6:	69b8      	ldr	r0, [r7, #24]
 8009fd8:	f001 fd44 	bl	800ba64 <pxPortInitialiseStack>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fee:	bf00      	nop
 8009ff0:	3720      	adds	r7, #32
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	0800d3bc 	.word	0x0800d3bc
 8009ffc:	0800d3dc 	.word	0x0800d3dc
 800a000:	0800d39c 	.word	0x0800d39c

0800a004 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a00c:	f001 fe1e 	bl	800bc4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a010:	4b2d      	ldr	r3, [pc, #180]	; (800a0c8 <prvAddNewTaskToReadyList+0xc4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3301      	adds	r3, #1
 800a016:	4a2c      	ldr	r2, [pc, #176]	; (800a0c8 <prvAddNewTaskToReadyList+0xc4>)
 800a018:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a01a:	4b2c      	ldr	r3, [pc, #176]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d109      	bne.n	800a036 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a022:	4a2a      	ldr	r2, [pc, #168]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a028:	4b27      	ldr	r3, [pc, #156]	; (800a0c8 <prvAddNewTaskToReadyList+0xc4>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d110      	bne.n	800a052 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a030:	f000 fd34 	bl	800aa9c <prvInitialiseTaskLists>
 800a034:	e00d      	b.n	800a052 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a036:	4b26      	ldr	r3, [pc, #152]	; (800a0d0 <prvAddNewTaskToReadyList+0xcc>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d109      	bne.n	800a052 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a03e:	4b23      	ldr	r3, [pc, #140]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	429a      	cmp	r2, r3
 800a04a:	d802      	bhi.n	800a052 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a04c:	4a1f      	ldr	r2, [pc, #124]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a052:	4b20      	ldr	r3, [pc, #128]	; (800a0d4 <prvAddNewTaskToReadyList+0xd0>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3301      	adds	r3, #1
 800a058:	4a1e      	ldr	r2, [pc, #120]	; (800a0d4 <prvAddNewTaskToReadyList+0xd0>)
 800a05a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a05c:	4b1d      	ldr	r3, [pc, #116]	; (800a0d4 <prvAddNewTaskToReadyList+0xd0>)
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a068:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <prvAddNewTaskToReadyList+0xd4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d903      	bls.n	800a078 <prvAddNewTaskToReadyList+0x74>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	4a18      	ldr	r2, [pc, #96]	; (800a0d8 <prvAddNewTaskToReadyList+0xd4>)
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4a15      	ldr	r2, [pc, #84]	; (800a0dc <prvAddNewTaskToReadyList+0xd8>)
 800a086:	441a      	add	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7fe fd2d 	bl	8008aee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a094:	f001 fe0a 	bl	800bcac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a098:	4b0d      	ldr	r3, [pc, #52]	; (800a0d0 <prvAddNewTaskToReadyList+0xcc>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00e      	beq.n	800a0be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <prvAddNewTaskToReadyList+0xc8>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d207      	bcs.n	800a0be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <prvAddNewTaskToReadyList+0xdc>)
 800a0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0be:	bf00      	nop
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20001cc4 	.word	0x20001cc4
 800a0cc:	200017f0 	.word	0x200017f0
 800a0d0:	20001cd0 	.word	0x20001cd0
 800a0d4:	20001ce0 	.word	0x20001ce0
 800a0d8:	20001ccc 	.word	0x20001ccc
 800a0dc:	200017f4 	.word	0x200017f4
 800a0e0:	e000ed04 	.word	0xe000ed04

0800a0e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d017      	beq.n	800a126 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0f6:	4b13      	ldr	r3, [pc, #76]	; (800a144 <vTaskDelay+0x60>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <vTaskDelay+0x30>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	60bb      	str	r3, [r7, #8]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a114:	f000 f8e8 	bl	800a2e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a118:	2100      	movs	r1, #0
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f001 f93c 	bl	800b398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a120:	f000 f8f0 	bl	800a304 <xTaskResumeAll>
 800a124:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d107      	bne.n	800a13c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a12c:	4b06      	ldr	r3, [pc, #24]	; (800a148 <vTaskDelay+0x64>)
 800a12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a13c:	bf00      	nop
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20001cec 	.word	0x20001cec
 800a148:	e000ed04 	.word	0xe000ed04

0800a14c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10a      	bne.n	800a174 <eTaskGetState+0x28>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	60bb      	str	r3, [r7, #8]
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800a174:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <eTaskGetState+0xa0>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d102      	bne.n	800a184 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]
 800a182:	e02d      	b.n	800a1e0 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 800a184:	f001 fd62 	bl	800bc4c <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800a18e:	f001 fd8d 	bl	800bcac <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 800a192:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <eTaskGetState+0xa4>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d004      	beq.n	800a1a6 <eTaskGetState+0x5a>
 800a19c:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <eTaskGetState+0xa8>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d102      	bne.n	800a1ac <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	75fb      	strb	r3, [r7, #23]
 800a1aa:	e019      	b.n	800a1e0 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4a12      	ldr	r2, [pc, #72]	; (800a1f8 <eTaskGetState+0xac>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d109      	bne.n	800a1c8 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d102      	bne.n	800a1c2 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	75fb      	strb	r3, [r7, #23]
 800a1c0:	e00e      	b.n	800a1e0 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	75fb      	strb	r3, [r7, #23]
 800a1c6:	e00b      	b.n	800a1e0 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4a0c      	ldr	r2, [pc, #48]	; (800a1fc <eTaskGetState+0xb0>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d002      	beq.n	800a1d6 <eTaskGetState+0x8a>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d102      	bne.n	800a1dc <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	75fb      	strb	r3, [r7, #23]
 800a1da:	e001      	b.n	800a1e0 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200017f0 	.word	0x200017f0
 800a1f0:	20001c7c 	.word	0x20001c7c
 800a1f4:	20001c80 	.word	0x20001c80
 800a1f8:	20001cb0 	.word	0x20001cb0
 800a1fc:	20001c98 	.word	0x20001c98

0800a200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08a      	sub	sp, #40	; 0x28
 800a204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a206:	2300      	movs	r3, #0
 800a208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a20e:	463a      	mov	r2, r7
 800a210:	1d39      	adds	r1, r7, #4
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	4618      	mov	r0, r3
 800a218:	f7fe fc0c 	bl	8008a34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	9202      	str	r2, [sp, #8]
 800a224:	9301      	str	r3, [sp, #4]
 800a226:	2300      	movs	r3, #0
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	2300      	movs	r3, #0
 800a22c:	460a      	mov	r2, r1
 800a22e:	4925      	ldr	r1, [pc, #148]	; (800a2c4 <vTaskStartScheduler+0xc4>)
 800a230:	4825      	ldr	r0, [pc, #148]	; (800a2c8 <vTaskStartScheduler+0xc8>)
 800a232:	f7ff fda3 	bl	8009d7c <xTaskCreateStatic>
 800a236:	4603      	mov	r3, r0
 800a238:	4a24      	ldr	r2, [pc, #144]	; (800a2cc <vTaskStartScheduler+0xcc>)
 800a23a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a23c:	4b23      	ldr	r3, [pc, #140]	; (800a2cc <vTaskStartScheduler+0xcc>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a244:	2301      	movs	r3, #1
 800a246:	617b      	str	r3, [r7, #20]
 800a248:	e001      	b.n	800a24e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d102      	bne.n	800a25a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a254:	f001 f8f4 	bl	800b440 <xTimerCreateTimerTask>
 800a258:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d11e      	bne.n	800a29e <vTaskStartScheduler+0x9e>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	613b      	str	r3, [r7, #16]
}
 800a272:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a274:	4b16      	ldr	r3, [pc, #88]	; (800a2d0 <vTaskStartScheduler+0xd0>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3358      	adds	r3, #88	; 0x58
 800a27a:	4a16      	ldr	r2, [pc, #88]	; (800a2d4 <vTaskStartScheduler+0xd4>)
 800a27c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a27e:	4b16      	ldr	r3, [pc, #88]	; (800a2d8 <vTaskStartScheduler+0xd8>)
 800a280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a284:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a286:	4b15      	ldr	r3, [pc, #84]	; (800a2dc <vTaskStartScheduler+0xdc>)
 800a288:	2201      	movs	r2, #1
 800a28a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a28c:	4b14      	ldr	r3, [pc, #80]	; (800a2e0 <vTaskStartScheduler+0xe0>)
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a292:	4b14      	ldr	r3, [pc, #80]	; (800a2e4 <vTaskStartScheduler+0xe4>)
 800a294:	2200      	movs	r2, #0
 800a296:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a298:	f001 fc66 	bl	800bb68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a29c:	e00e      	b.n	800a2bc <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2a4:	d10a      	bne.n	800a2bc <vTaskStartScheduler+0xbc>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	60fb      	str	r3, [r7, #12]
}
 800a2b8:	bf00      	nop
 800a2ba:	e7fe      	b.n	800a2ba <vTaskStartScheduler+0xba>
}
 800a2bc:	bf00      	nop
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	0800cf7c 	.word	0x0800cf7c
 800a2c8:	0800aa6d 	.word	0x0800aa6d
 800a2cc:	20001ce8 	.word	0x20001ce8
 800a2d0:	200017f0 	.word	0x200017f0
 800a2d4:	20000018 	.word	0x20000018
 800a2d8:	20001ce4 	.word	0x20001ce4
 800a2dc:	20001cd0 	.word	0x20001cd0
 800a2e0:	20001cc8 	.word	0x20001cc8
 800a2e4:	2000009c 	.word	0x2000009c

0800a2e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a2ec:	4b04      	ldr	r3, [pc, #16]	; (800a300 <vTaskSuspendAll+0x18>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	4a03      	ldr	r2, [pc, #12]	; (800a300 <vTaskSuspendAll+0x18>)
 800a2f4:	6013      	str	r3, [r2, #0]
}
 800a2f6:	bf00      	nop
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bc80      	pop	{r7}
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20001cec 	.word	0x20001cec

0800a304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a30e:	2300      	movs	r3, #0
 800a310:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a312:	4b42      	ldr	r3, [pc, #264]	; (800a41c <xTaskResumeAll+0x118>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10a      	bne.n	800a330 <xTaskResumeAll+0x2c>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	603b      	str	r3, [r7, #0]
}
 800a32c:	bf00      	nop
 800a32e:	e7fe      	b.n	800a32e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a330:	f001 fc8c 	bl	800bc4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a334:	4b39      	ldr	r3, [pc, #228]	; (800a41c <xTaskResumeAll+0x118>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3b01      	subs	r3, #1
 800a33a:	4a38      	ldr	r2, [pc, #224]	; (800a41c <xTaskResumeAll+0x118>)
 800a33c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a33e:	4b37      	ldr	r3, [pc, #220]	; (800a41c <xTaskResumeAll+0x118>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d162      	bne.n	800a40c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a346:	4b36      	ldr	r3, [pc, #216]	; (800a420 <xTaskResumeAll+0x11c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d05e      	beq.n	800a40c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a34e:	e02f      	b.n	800a3b0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a350:	4b34      	ldr	r3, [pc, #208]	; (800a424 <xTaskResumeAll+0x120>)
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3318      	adds	r3, #24
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fe fc21 	bl	8008ba4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3304      	adds	r3, #4
 800a366:	4618      	mov	r0, r3
 800a368:	f7fe fc1c 	bl	8008ba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a370:	4b2d      	ldr	r3, [pc, #180]	; (800a428 <xTaskResumeAll+0x124>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	429a      	cmp	r2, r3
 800a376:	d903      	bls.n	800a380 <xTaskResumeAll+0x7c>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	4a2a      	ldr	r2, [pc, #168]	; (800a428 <xTaskResumeAll+0x124>)
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4a27      	ldr	r2, [pc, #156]	; (800a42c <xTaskResumeAll+0x128>)
 800a38e:	441a      	add	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3304      	adds	r3, #4
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f7fe fba9 	bl	8008aee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a0:	4b23      	ldr	r3, [pc, #140]	; (800a430 <xTaskResumeAll+0x12c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d302      	bcc.n	800a3b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a3aa:	4b22      	ldr	r3, [pc, #136]	; (800a434 <xTaskResumeAll+0x130>)
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3b0:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <xTaskResumeAll+0x120>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1cb      	bne.n	800a350 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3be:	f000 fce3 	bl	800ad88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3c2:	4b1d      	ldr	r3, [pc, #116]	; (800a438 <xTaskResumeAll+0x134>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d010      	beq.n	800a3f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3ce:	f000 f8d5 	bl	800a57c <xTaskIncrementTick>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3d8:	4b16      	ldr	r3, [pc, #88]	; (800a434 <xTaskResumeAll+0x130>)
 800a3da:	2201      	movs	r2, #1
 800a3dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1f1      	bne.n	800a3ce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a3ea:	4b13      	ldr	r3, [pc, #76]	; (800a438 <xTaskResumeAll+0x134>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3f0:	4b10      	ldr	r3, [pc, #64]	; (800a434 <xTaskResumeAll+0x130>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d009      	beq.n	800a40c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <xTaskResumeAll+0x138>)
 800a3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a40c:	f001 fc4e 	bl	800bcac <vPortExitCritical>

	return xAlreadyYielded;
 800a410:	68bb      	ldr	r3, [r7, #8]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20001cec 	.word	0x20001cec
 800a420:	20001cc4 	.word	0x20001cc4
 800a424:	20001c84 	.word	0x20001c84
 800a428:	20001ccc 	.word	0x20001ccc
 800a42c:	200017f4 	.word	0x200017f4
 800a430:	200017f0 	.word	0x200017f0
 800a434:	20001cd8 	.word	0x20001cd8
 800a438:	20001cd4 	.word	0x20001cd4
 800a43c:	e000ed04 	.word	0xe000ed04

0800a440 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a446:	4b04      	ldr	r3, [pc, #16]	; (800a458 <xTaskGetTickCount+0x18>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a44c:	687b      	ldr	r3, [r7, #4]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	bc80      	pop	{r7}
 800a456:	4770      	bx	lr
 800a458:	20001cc8 	.word	0x20001cc8

0800a45c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800a468:	2300      	movs	r3, #0
 800a46a:	617b      	str	r3, [r7, #20]
 800a46c:	2338      	movs	r3, #56	; 0x38
 800a46e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800a470:	f7ff ff3a 	bl	800a2e8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800a474:	4b3a      	ldr	r3, [pc, #232]	; (800a560 <uxTaskGetSystemState+0x104>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d369      	bcc.n	800a552 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	3b01      	subs	r3, #1
 800a482:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4613      	mov	r3, r2
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	4413      	add	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	461a      	mov	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	1898      	adds	r0, r3, r2
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	4613      	mov	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4a31      	ldr	r2, [pc, #196]	; (800a564 <uxTaskGetSystemState+0x108>)
 800a4a0:	4413      	add	r3, r2
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	f000 fbcd 	bl	800ac44 <prvListTasksWithinSingleList>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1e2      	bne.n	800a47e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	00db      	lsls	r3, r3, #3
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	4a27      	ldr	r2, [pc, #156]	; (800a568 <uxTaskGetSystemState+0x10c>)
 800a4ca:	6811      	ldr	r1, [r2, #0]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 fbb8 	bl	800ac44 <prvListTasksWithinSingleList>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	4413      	add	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	00db      	lsls	r3, r3, #3
 800a4e2:	4413      	add	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	4a1f      	ldr	r2, [pc, #124]	; (800a56c <uxTaskGetSystemState+0x110>)
 800a4ee:	6811      	ldr	r1, [r2, #0]
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 fba6 	bl	800ac44 <prvListTasksWithinSingleList>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	4613      	mov	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	461a      	mov	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	2204      	movs	r2, #4
 800a512:	4917      	ldr	r1, [pc, #92]	; (800a570 <uxTaskGetSystemState+0x114>)
 800a514:	4618      	mov	r0, r3
 800a516:	f000 fb95 	bl	800ac44 <prvListTasksWithinSingleList>
 800a51a:	4602      	mov	r2, r0
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	4413      	add	r3, r2
 800a520:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	4613      	mov	r3, r2
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	4413      	add	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	461a      	mov	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	4413      	add	r3, r2
 800a532:	2203      	movs	r2, #3
 800a534:	490f      	ldr	r1, [pc, #60]	; (800a574 <uxTaskGetSystemState+0x118>)
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fb84 	bl	800ac44 <prvListTasksWithinSingleList>
 800a53c:	4602      	mov	r2, r0
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	4413      	add	r3, r2
 800a542:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a54a:	4b0b      	ldr	r3, [pc, #44]	; (800a578 <uxTaskGetSystemState+0x11c>)
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800a552:	f7ff fed7 	bl	800a304 <xTaskResumeAll>

		return uxTask;
 800a556:	697b      	ldr	r3, [r7, #20]
	}
 800a558:	4618      	mov	r0, r3
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20001cc4 	.word	0x20001cc4
 800a564:	200017f4 	.word	0x200017f4
 800a568:	20001c7c 	.word	0x20001c7c
 800a56c:	20001c80 	.word	0x20001c80
 800a570:	20001c98 	.word	0x20001c98
 800a574:	20001cb0 	.word	0x20001cb0
 800a578:	2000009c 	.word	0x2000009c

0800a57c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a582:	2300      	movs	r3, #0
 800a584:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a586:	4b51      	ldr	r3, [pc, #324]	; (800a6cc <xTaskIncrementTick+0x150>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f040 808e 	bne.w	800a6ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a590:	4b4f      	ldr	r3, [pc, #316]	; (800a6d0 <xTaskIncrementTick+0x154>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3301      	adds	r3, #1
 800a596:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a598:	4a4d      	ldr	r2, [pc, #308]	; (800a6d0 <xTaskIncrementTick+0x154>)
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d120      	bne.n	800a5e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5a4:	4b4b      	ldr	r3, [pc, #300]	; (800a6d4 <xTaskIncrementTick+0x158>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00a      	beq.n	800a5c4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	603b      	str	r3, [r7, #0]
}
 800a5c0:	bf00      	nop
 800a5c2:	e7fe      	b.n	800a5c2 <xTaskIncrementTick+0x46>
 800a5c4:	4b43      	ldr	r3, [pc, #268]	; (800a6d4 <xTaskIncrementTick+0x158>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	4b43      	ldr	r3, [pc, #268]	; (800a6d8 <xTaskIncrementTick+0x15c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a41      	ldr	r2, [pc, #260]	; (800a6d4 <xTaskIncrementTick+0x158>)
 800a5d0:	6013      	str	r3, [r2, #0]
 800a5d2:	4a41      	ldr	r2, [pc, #260]	; (800a6d8 <xTaskIncrementTick+0x15c>)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	4b40      	ldr	r3, [pc, #256]	; (800a6dc <xTaskIncrementTick+0x160>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	4a3f      	ldr	r2, [pc, #252]	; (800a6dc <xTaskIncrementTick+0x160>)
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	f000 fbd1 	bl	800ad88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a5e6:	4b3e      	ldr	r3, [pc, #248]	; (800a6e0 <xTaskIncrementTick+0x164>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d34e      	bcc.n	800a68e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5f0:	4b38      	ldr	r3, [pc, #224]	; (800a6d4 <xTaskIncrementTick+0x158>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <xTaskIncrementTick+0x82>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e000      	b.n	800a600 <xTaskIncrementTick+0x84>
 800a5fe:	2300      	movs	r3, #0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d004      	beq.n	800a60e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a604:	4b36      	ldr	r3, [pc, #216]	; (800a6e0 <xTaskIncrementTick+0x164>)
 800a606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a60a:	601a      	str	r2, [r3, #0]
					break;
 800a60c:	e03f      	b.n	800a68e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a60e:	4b31      	ldr	r3, [pc, #196]	; (800a6d4 <xTaskIncrementTick+0x158>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	429a      	cmp	r2, r3
 800a624:	d203      	bcs.n	800a62e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a626:	4a2e      	ldr	r2, [pc, #184]	; (800a6e0 <xTaskIncrementTick+0x164>)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6013      	str	r3, [r2, #0]
						break;
 800a62c:	e02f      	b.n	800a68e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	3304      	adds	r3, #4
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fab6 	bl	8008ba4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d004      	beq.n	800a64a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	3318      	adds	r3, #24
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe faad 	bl	8008ba4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64e:	4b25      	ldr	r3, [pc, #148]	; (800a6e4 <xTaskIncrementTick+0x168>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d903      	bls.n	800a65e <xTaskIncrementTick+0xe2>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65a:	4a22      	ldr	r2, [pc, #136]	; (800a6e4 <xTaskIncrementTick+0x168>)
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4a1f      	ldr	r2, [pc, #124]	; (800a6e8 <xTaskIncrementTick+0x16c>)
 800a66c:	441a      	add	r2, r3
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	3304      	adds	r3, #4
 800a672:	4619      	mov	r1, r3
 800a674:	4610      	mov	r0, r2
 800a676:	f7fe fa3a 	bl	8008aee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a67e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ec <xTaskIncrementTick+0x170>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	429a      	cmp	r2, r3
 800a686:	d3b3      	bcc.n	800a5f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a688:	2301      	movs	r3, #1
 800a68a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a68c:	e7b0      	b.n	800a5f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a68e:	4b17      	ldr	r3, [pc, #92]	; (800a6ec <xTaskIncrementTick+0x170>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a694:	4914      	ldr	r1, [pc, #80]	; (800a6e8 <xTaskIncrementTick+0x16c>)
 800a696:	4613      	mov	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	440b      	add	r3, r1
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d907      	bls.n	800a6b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	e004      	b.n	800a6b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a6ac:	4b10      	ldr	r3, [pc, #64]	; (800a6f0 <xTaskIncrementTick+0x174>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	4a0f      	ldr	r2, [pc, #60]	; (800a6f0 <xTaskIncrementTick+0x174>)
 800a6b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a6b6:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <xTaskIncrementTick+0x178>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a6c2:	697b      	ldr	r3, [r7, #20]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3718      	adds	r7, #24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20001cec 	.word	0x20001cec
 800a6d0:	20001cc8 	.word	0x20001cc8
 800a6d4:	20001c7c 	.word	0x20001c7c
 800a6d8:	20001c80 	.word	0x20001c80
 800a6dc:	20001cdc 	.word	0x20001cdc
 800a6e0:	20001ce4 	.word	0x20001ce4
 800a6e4:	20001ccc 	.word	0x20001ccc
 800a6e8:	200017f4 	.word	0x200017f4
 800a6ec:	200017f0 	.word	0x200017f0
 800a6f0:	20001cd4 	.word	0x20001cd4
 800a6f4:	20001cd8 	.word	0x20001cd8

0800a6f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6fe:	4b36      	ldr	r3, [pc, #216]	; (800a7d8 <vTaskSwitchContext+0xe0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a706:	4b35      	ldr	r3, [pc, #212]	; (800a7dc <vTaskSwitchContext+0xe4>)
 800a708:	2201      	movs	r2, #1
 800a70a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a70c:	e05e      	b.n	800a7cc <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800a70e:	4b33      	ldr	r3, [pc, #204]	; (800a7dc <vTaskSwitchContext+0xe4>)
 800a710:	2200      	movs	r2, #0
 800a712:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a714:	4b32      	ldr	r3, [pc, #200]	; (800a7e0 <vTaskSwitchContext+0xe8>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a32      	ldr	r2, [pc, #200]	; (800a7e4 <vTaskSwitchContext+0xec>)
 800a71a:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a71c:	4b31      	ldr	r3, [pc, #196]	; (800a7e4 <vTaskSwitchContext+0xec>)
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	4b31      	ldr	r3, [pc, #196]	; (800a7e8 <vTaskSwitchContext+0xf0>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d909      	bls.n	800a73c <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a728:	4b30      	ldr	r3, [pc, #192]	; (800a7ec <vTaskSwitchContext+0xf4>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a72e:	4a2d      	ldr	r2, [pc, #180]	; (800a7e4 <vTaskSwitchContext+0xec>)
 800a730:	6810      	ldr	r0, [r2, #0]
 800a732:	4a2d      	ldr	r2, [pc, #180]	; (800a7e8 <vTaskSwitchContext+0xf0>)
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	1a82      	subs	r2, r0, r2
 800a738:	440a      	add	r2, r1
 800a73a:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800a73c:	4b29      	ldr	r3, [pc, #164]	; (800a7e4 <vTaskSwitchContext+0xec>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a29      	ldr	r2, [pc, #164]	; (800a7e8 <vTaskSwitchContext+0xf0>)
 800a742:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a744:	4b2a      	ldr	r3, [pc, #168]	; (800a7f0 <vTaskSwitchContext+0xf8>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	e010      	b.n	800a76e <vTaskSwitchContext+0x76>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10a      	bne.n	800a768 <vTaskSwitchContext+0x70>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	607b      	str	r3, [r7, #4]
}
 800a764:	bf00      	nop
 800a766:	e7fe      	b.n	800a766 <vTaskSwitchContext+0x6e>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	60fb      	str	r3, [r7, #12]
 800a76e:	4921      	ldr	r1, [pc, #132]	; (800a7f4 <vTaskSwitchContext+0xfc>)
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	440b      	add	r3, r1
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0e4      	beq.n	800a74c <vTaskSwitchContext+0x54>
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4a19      	ldr	r2, [pc, #100]	; (800a7f4 <vTaskSwitchContext+0xfc>)
 800a78e:	4413      	add	r3, r2
 800a790:	60bb      	str	r3, [r7, #8]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	605a      	str	r2, [r3, #4]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d104      	bne.n	800a7b2 <vTaskSwitchContext+0xba>
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	605a      	str	r2, [r3, #4]
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	4a0c      	ldr	r2, [pc, #48]	; (800a7ec <vTaskSwitchContext+0xf4>)
 800a7ba:	6013      	str	r3, [r2, #0]
 800a7bc:	4a0c      	ldr	r2, [pc, #48]	; (800a7f0 <vTaskSwitchContext+0xf8>)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7c2:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <vTaskSwitchContext+0xf4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3358      	adds	r3, #88	; 0x58
 800a7c8:	4a0b      	ldr	r2, [pc, #44]	; (800a7f8 <vTaskSwitchContext+0x100>)
 800a7ca:	6013      	str	r3, [r2, #0]
}
 800a7cc:	bf00      	nop
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bc80      	pop	{r7}
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	20001cec 	.word	0x20001cec
 800a7dc:	20001cd8 	.word	0x20001cd8
 800a7e0:	2000009c 	.word	0x2000009c
 800a7e4:	20001cf4 	.word	0x20001cf4
 800a7e8:	20001cf0 	.word	0x20001cf0
 800a7ec:	200017f0 	.word	0x200017f0
 800a7f0:	20001ccc 	.word	0x20001ccc
 800a7f4:	200017f4 	.word	0x200017f4
 800a7f8:	20000018 	.word	0x20000018

0800a7fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	60fb      	str	r3, [r7, #12]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a822:	4b07      	ldr	r3, [pc, #28]	; (800a840 <vTaskPlaceOnEventList+0x44>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3318      	adds	r3, #24
 800a828:	4619      	mov	r1, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f7fe f982 	bl	8008b34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a830:	2101      	movs	r1, #1
 800a832:	6838      	ldr	r0, [r7, #0]
 800a834:	f000 fdb0 	bl	800b398 <prvAddCurrentTaskToDelayedList>
}
 800a838:	bf00      	nop
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	200017f0 	.word	0x200017f0

0800a844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10a      	bne.n	800a86c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	617b      	str	r3, [r7, #20]
}
 800a868:	bf00      	nop
 800a86a:	e7fe      	b.n	800a86a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a86c:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <vTaskPlaceOnEventListRestricted+0x54>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3318      	adds	r3, #24
 800a872:	4619      	mov	r1, r3
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7fe f93a 	bl	8008aee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a884:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	68b8      	ldr	r0, [r7, #8]
 800a88a:	f000 fd85 	bl	800b398 <prvAddCurrentTaskToDelayedList>
	}
 800a88e:	bf00      	nop
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	200017f0 	.word	0x200017f0

0800a89c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10a      	bne.n	800a8c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	60fb      	str	r3, [r7, #12]
}
 800a8c4:	bf00      	nop
 800a8c6:	e7fe      	b.n	800a8c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	3318      	adds	r3, #24
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe f969 	bl	8008ba4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8d2:	4b1e      	ldr	r3, [pc, #120]	; (800a94c <xTaskRemoveFromEventList+0xb0>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d11d      	bne.n	800a916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	3304      	adds	r3, #4
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe f960 	bl	8008ba4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e8:	4b19      	ldr	r3, [pc, #100]	; (800a950 <xTaskRemoveFromEventList+0xb4>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d903      	bls.n	800a8f8 <xTaskRemoveFromEventList+0x5c>
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f4:	4a16      	ldr	r2, [pc, #88]	; (800a950 <xTaskRemoveFromEventList+0xb4>)
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4a13      	ldr	r2, [pc, #76]	; (800a954 <xTaskRemoveFromEventList+0xb8>)
 800a906:	441a      	add	r2, r3
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	3304      	adds	r3, #4
 800a90c:	4619      	mov	r1, r3
 800a90e:	4610      	mov	r0, r2
 800a910:	f7fe f8ed 	bl	8008aee <vListInsertEnd>
 800a914:	e005      	b.n	800a922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	3318      	adds	r3, #24
 800a91a:	4619      	mov	r1, r3
 800a91c:	480e      	ldr	r0, [pc, #56]	; (800a958 <xTaskRemoveFromEventList+0xbc>)
 800a91e:	f7fe f8e6 	bl	8008aee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a926:	4b0d      	ldr	r3, [pc, #52]	; (800a95c <xTaskRemoveFromEventList+0xc0>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d905      	bls.n	800a93c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a934:	4b0a      	ldr	r3, [pc, #40]	; (800a960 <xTaskRemoveFromEventList+0xc4>)
 800a936:	2201      	movs	r2, #1
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	e001      	b.n	800a940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a93c:	2300      	movs	r3, #0
 800a93e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a940:	697b      	ldr	r3, [r7, #20]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20001cec 	.word	0x20001cec
 800a950:	20001ccc 	.word	0x20001ccc
 800a954:	200017f4 	.word	0x200017f4
 800a958:	20001c84 	.word	0x20001c84
 800a95c:	200017f0 	.word	0x200017f0
 800a960:	20001cd8 	.word	0x20001cd8

0800a964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a96c:	4b06      	ldr	r3, [pc, #24]	; (800a988 <vTaskInternalSetTimeOutState+0x24>)
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <vTaskInternalSetTimeOutState+0x28>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	605a      	str	r2, [r3, #4]
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	bc80      	pop	{r7}
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20001cdc 	.word	0x20001cdc
 800a98c:	20001cc8 	.word	0x20001cc8

0800a990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	613b      	str	r3, [r7, #16]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	60fb      	str	r3, [r7, #12]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9d2:	f001 f93b 	bl	800bc4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9d6:	4b1d      	ldr	r3, [pc, #116]	; (800aa4c <xTaskCheckForTimeOut+0xbc>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ee:	d102      	bne.n	800a9f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	e023      	b.n	800aa3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <xTaskCheckForTimeOut+0xc0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d007      	beq.n	800aa12 <xTaskCheckForTimeOut+0x82>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	69ba      	ldr	r2, [r7, #24]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d302      	bcc.n	800aa12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	61fb      	str	r3, [r7, #28]
 800aa10:	e015      	b.n	800aa3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d20b      	bcs.n	800aa34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	1ad2      	subs	r2, r2, r3
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ff9b 	bl	800a964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	61fb      	str	r3, [r7, #28]
 800aa32:	e004      	b.n	800aa3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	2200      	movs	r2, #0
 800aa38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa3e:	f001 f935 	bl	800bcac <vPortExitCritical>

	return xReturn;
 800aa42:	69fb      	ldr	r3, [r7, #28]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3720      	adds	r7, #32
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20001cc8 	.word	0x20001cc8
 800aa50:	20001cdc 	.word	0x20001cdc

0800aa54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa58:	4b03      	ldr	r3, [pc, #12]	; (800aa68 <vTaskMissedYield+0x14>)
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	601a      	str	r2, [r3, #0]
}
 800aa5e:	bf00      	nop
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bc80      	pop	{r7}
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	20001cd8 	.word	0x20001cd8

0800aa6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa74:	f000 f852 	bl	800ab1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa78:	4b06      	ldr	r3, [pc, #24]	; (800aa94 <prvIdleTask+0x28>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d9f9      	bls.n	800aa74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa80:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <prvIdleTask+0x2c>)
 800aa82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa90:	e7f0      	b.n	800aa74 <prvIdleTask+0x8>
 800aa92:	bf00      	nop
 800aa94:	200017f4 	.word	0x200017f4
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	607b      	str	r3, [r7, #4]
 800aaa6:	e00c      	b.n	800aac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4a12      	ldr	r2, [pc, #72]	; (800aafc <prvInitialiseTaskLists+0x60>)
 800aab4:	4413      	add	r3, r2
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fd ffee 	bl	8008a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3301      	adds	r3, #1
 800aac0:	607b      	str	r3, [r7, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b37      	cmp	r3, #55	; 0x37
 800aac6:	d9ef      	bls.n	800aaa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aac8:	480d      	ldr	r0, [pc, #52]	; (800ab00 <prvInitialiseTaskLists+0x64>)
 800aaca:	f7fd ffe5 	bl	8008a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aace:	480d      	ldr	r0, [pc, #52]	; (800ab04 <prvInitialiseTaskLists+0x68>)
 800aad0:	f7fd ffe2 	bl	8008a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aad4:	480c      	ldr	r0, [pc, #48]	; (800ab08 <prvInitialiseTaskLists+0x6c>)
 800aad6:	f7fd ffdf 	bl	8008a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aada:	480c      	ldr	r0, [pc, #48]	; (800ab0c <prvInitialiseTaskLists+0x70>)
 800aadc:	f7fd ffdc 	bl	8008a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aae0:	480b      	ldr	r0, [pc, #44]	; (800ab10 <prvInitialiseTaskLists+0x74>)
 800aae2:	f7fd ffd9 	bl	8008a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aae6:	4b0b      	ldr	r3, [pc, #44]	; (800ab14 <prvInitialiseTaskLists+0x78>)
 800aae8:	4a05      	ldr	r2, [pc, #20]	; (800ab00 <prvInitialiseTaskLists+0x64>)
 800aaea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aaec:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <prvInitialiseTaskLists+0x7c>)
 800aaee:	4a05      	ldr	r2, [pc, #20]	; (800ab04 <prvInitialiseTaskLists+0x68>)
 800aaf0:	601a      	str	r2, [r3, #0]
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	200017f4 	.word	0x200017f4
 800ab00:	20001c54 	.word	0x20001c54
 800ab04:	20001c68 	.word	0x20001c68
 800ab08:	20001c84 	.word	0x20001c84
 800ab0c:	20001c98 	.word	0x20001c98
 800ab10:	20001cb0 	.word	0x20001cb0
 800ab14:	20001c7c 	.word	0x20001c7c
 800ab18:	20001c80 	.word	0x20001c80

0800ab1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab22:	e019      	b.n	800ab58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab24:	f001 f892 	bl	800bc4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ab28:	4b10      	ldr	r3, [pc, #64]	; (800ab6c <prvCheckTasksWaitingTermination+0x50>)
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3304      	adds	r3, #4
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe f835 	bl	8008ba4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <prvCheckTasksWaitingTermination+0x54>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	4a0b      	ldr	r2, [pc, #44]	; (800ab70 <prvCheckTasksWaitingTermination+0x54>)
 800ab42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab44:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <prvCheckTasksWaitingTermination+0x58>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	4a0a      	ldr	r2, [pc, #40]	; (800ab74 <prvCheckTasksWaitingTermination+0x58>)
 800ab4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab4e:	f001 f8ad 	bl	800bcac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f8e3 	bl	800ad1e <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab58:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <prvCheckTasksWaitingTermination+0x58>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e1      	bne.n	800ab24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab60:	bf00      	nop
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20001c98 	.word	0x20001c98
 800ab70:	20001cc4 	.word	0x20001cc4
 800ab74:	20001cac 	.word	0x20001cac

0800ab78 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
 800ab84:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d102      	bne.n	800ab92 <vTaskGetInfo+0x1a>
 800ab8c:	4b2c      	ldr	r3, [pc, #176]	; (800ac40 <vTaskGetInfo+0xc8>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	e000      	b.n	800ab94 <vTaskGetInfo+0x1c>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800abce:	78fb      	ldrb	r3, [r7, #3]
 800abd0:	2b05      	cmp	r3, #5
 800abd2:	d01a      	beq.n	800ac0a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800abd4:	4b1a      	ldr	r3, [pc, #104]	; (800ac40 <vTaskGetInfo+0xc8>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	697a      	ldr	r2, [r7, #20]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d103      	bne.n	800abe6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2200      	movs	r2, #0
 800abe2:	731a      	strb	r2, [r3, #12]
 800abe4:	e018      	b.n	800ac18 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	78fa      	ldrb	r2, [r7, #3]
 800abea:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d112      	bne.n	800ac18 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800abf2:	f7ff fb79 	bl	800a2e8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2202      	movs	r2, #2
 800ac02:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800ac04:	f7ff fb7e 	bl	800a304 <xTaskResumeAll>
 800ac08:	e006      	b.n	800ac18 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800ac0a:	6978      	ldr	r0, [r7, #20]
 800ac0c:	f7ff fa9e 	bl	800a14c <eTaskGetState>
 800ac10:	4603      	mov	r3, r0
 800ac12:	461a      	mov	r2, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d009      	beq.n	800ac32 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 f860 	bl	800ace8 <prvTaskCheckFreeStackSpace>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800ac30:	e002      	b.n	800ac38 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2200      	movs	r2, #0
 800ac36:	841a      	strh	r2, [r3, #32]
	}
 800ac38:	bf00      	nop
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	200017f0 	.word	0x200017f0

0800ac44 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08a      	sub	sp, #40	; 0x28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800ac52:	2300      	movs	r3, #0
 800ac54:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d03f      	beq.n	800acde <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	623b      	str	r3, [r7, #32]
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	685a      	ldr	r2, [r3, #4]
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	605a      	str	r2, [r3, #4]
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	3308      	adds	r3, #8
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d104      	bne.n	800ac82 <prvListTasksWithinSingleList+0x3e>
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	685a      	ldr	r2, [r3, #4]
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	605a      	str	r2, [r3, #4]
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	61bb      	str	r3, [r7, #24]
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	605a      	str	r2, [r3, #4]
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d104      	bne.n	800acae <prvListTasksWithinSingleList+0x6a>
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	605a      	str	r2, [r3, #4]
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800acb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb8:	4613      	mov	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	461a      	mov	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	1899      	adds	r1, r3, r2
 800acc6:	79fb      	ldrb	r3, [r7, #7]
 800acc8:	2201      	movs	r2, #1
 800acca:	6978      	ldr	r0, [r7, #20]
 800accc:	f7ff ff54 	bl	800ab78 <vTaskGetInfo>
				uxTask++;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	3301      	adds	r3, #1
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d1d5      	bne.n	800ac8a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3728      	adds	r7, #40	; 0x28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800acf4:	e005      	b.n	800ad02 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3301      	adds	r3, #1
 800acfa:	607b      	str	r3, [r7, #4]
			ulCount++;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3301      	adds	r3, #1
 800ad00:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2ba5      	cmp	r3, #165	; 0xa5
 800ad08:	d0f5      	beq.n	800acf6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	089b      	lsrs	r3, r3, #2
 800ad0e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	b29b      	uxth	r3, r3
	}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bc80      	pop	{r7}
 800ad1c:	4770      	bx	lr

0800ad1e <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b084      	sub	sp, #16
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	3358      	adds	r3, #88	; 0x58
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f001 fb6e 	bl	800c40c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d108      	bne.n	800ad4c <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f001 f948 	bl	800bfd4 <vPortFree>
				vPortFree( pxTCB );
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f001 f945 	bl	800bfd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad4a:	e018      	b.n	800ad7e <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d103      	bne.n	800ad5e <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 f93c 	bl	800bfd4 <vPortFree>
	}
 800ad5c:	e00f      	b.n	800ad7e <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d00a      	beq.n	800ad7e <prvDeleteTCB+0x60>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	60fb      	str	r3, [r7, #12]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <prvDeleteTCB+0x5e>
	}
 800ad7e:	bf00      	nop
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
	...

0800ad88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad8e:	4b0e      	ldr	r3, [pc, #56]	; (800adc8 <prvResetNextTaskUnblockTime+0x40>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <prvResetNextTaskUnblockTime+0x14>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e000      	b.n	800ad9e <prvResetNextTaskUnblockTime+0x16>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d004      	beq.n	800adac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ada2:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <prvResetNextTaskUnblockTime+0x44>)
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ada8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800adaa:	e008      	b.n	800adbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800adac:	4b06      	ldr	r3, [pc, #24]	; (800adc8 <prvResetNextTaskUnblockTime+0x40>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	4a04      	ldr	r2, [pc, #16]	; (800adcc <prvResetNextTaskUnblockTime+0x44>)
 800adbc:	6013      	str	r3, [r2, #0]
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bc80      	pop	{r7}
 800adc6:	4770      	bx	lr
 800adc8:	20001c7c 	.word	0x20001c7c
 800adcc:	20001ce4 	.word	0x20001ce4

0800add0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800add6:	4b04      	ldr	r3, [pc, #16]	; (800ade8 <xTaskGetCurrentTaskHandle+0x18>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	607b      	str	r3, [r7, #4]

		return xReturn;
 800addc:	687b      	ldr	r3, [r7, #4]
	}
 800adde:	4618      	mov	r0, r3
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bc80      	pop	{r7}
 800ade6:	4770      	bx	lr
 800ade8:	200017f0 	.word	0x200017f0

0800adec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adf2:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <xTaskGetSchedulerState+0x34>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d102      	bne.n	800ae00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adfa:	2301      	movs	r3, #1
 800adfc:	607b      	str	r3, [r7, #4]
 800adfe:	e008      	b.n	800ae12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae00:	4b08      	ldr	r3, [pc, #32]	; (800ae24 <xTaskGetSchedulerState+0x38>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d102      	bne.n	800ae0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	607b      	str	r3, [r7, #4]
 800ae0c:	e001      	b.n	800ae12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae12:	687b      	ldr	r3, [r7, #4]
	}
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bc80      	pop	{r7}
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	20001cd0 	.word	0x20001cd0
 800ae24:	20001cec 	.word	0x20001cec

0800ae28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ae34:	2300      	movs	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d056      	beq.n	800aeec <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae42:	4b2d      	ldr	r3, [pc, #180]	; (800aef8 <xTaskPriorityInherit+0xd0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d246      	bcs.n	800aeda <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	db06      	blt.n	800ae62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae54:	4b28      	ldr	r3, [pc, #160]	; (800aef8 <xTaskPriorityInherit+0xd0>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	6959      	ldr	r1, [r3, #20]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4a22      	ldr	r2, [pc, #136]	; (800aefc <xTaskPriorityInherit+0xd4>)
 800ae74:	4413      	add	r3, r2
 800ae76:	4299      	cmp	r1, r3
 800ae78:	d101      	bne.n	800ae7e <xTaskPriorityInherit+0x56>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <xTaskPriorityInherit+0x58>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d022      	beq.n	800aeca <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	3304      	adds	r3, #4
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fd fe8b 	bl	8008ba4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae8e:	4b1a      	ldr	r3, [pc, #104]	; (800aef8 <xTaskPriorityInherit+0xd0>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9c:	4b18      	ldr	r3, [pc, #96]	; (800af00 <xTaskPriorityInherit+0xd8>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d903      	bls.n	800aeac <xTaskPriorityInherit+0x84>
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	4a15      	ldr	r2, [pc, #84]	; (800af00 <xTaskPriorityInherit+0xd8>)
 800aeaa:	6013      	str	r3, [r2, #0]
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4413      	add	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4a10      	ldr	r2, [pc, #64]	; (800aefc <xTaskPriorityInherit+0xd4>)
 800aeba:	441a      	add	r2, r3
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	3304      	adds	r3, #4
 800aec0:	4619      	mov	r1, r3
 800aec2:	4610      	mov	r0, r2
 800aec4:	f7fd fe13 	bl	8008aee <vListInsertEnd>
 800aec8:	e004      	b.n	800aed4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aeca:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <xTaskPriorityInherit+0xd0>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aed4:	2301      	movs	r3, #1
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	e008      	b.n	800aeec <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aede:	4b06      	ldr	r3, [pc, #24]	; (800aef8 <xTaskPriorityInherit+0xd0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d201      	bcs.n	800aeec <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aee8:	2301      	movs	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aeec:	68fb      	ldr	r3, [r7, #12]
	}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	200017f0 	.word	0x200017f0
 800aefc:	200017f4 	.word	0x200017f4
 800af00:	20001ccc 	.word	0x20001ccc

0800af04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af10:	2300      	movs	r3, #0
 800af12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d056      	beq.n	800afc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af1a:	4b2e      	ldr	r3, [pc, #184]	; (800afd4 <xTaskPriorityDisinherit+0xd0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	429a      	cmp	r2, r3
 800af22:	d00a      	beq.n	800af3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	60fb      	str	r3, [r7, #12]
}
 800af36:	bf00      	nop
 800af38:	e7fe      	b.n	800af38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10a      	bne.n	800af58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	60bb      	str	r3, [r7, #8]
}
 800af54:	bf00      	nop
 800af56:	e7fe      	b.n	800af56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af5c:	1e5a      	subs	r2, r3, #1
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d02c      	beq.n	800afc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af72:	2b00      	cmp	r3, #0
 800af74:	d128      	bne.n	800afc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	3304      	adds	r3, #4
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fd fe12 	bl	8008ba4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af98:	4b0f      	ldr	r3, [pc, #60]	; (800afd8 <xTaskPriorityDisinherit+0xd4>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d903      	bls.n	800afa8 <xTaskPriorityDisinherit+0xa4>
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa4:	4a0c      	ldr	r2, [pc, #48]	; (800afd8 <xTaskPriorityDisinherit+0xd4>)
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afac:	4613      	mov	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4a09      	ldr	r2, [pc, #36]	; (800afdc <xTaskPriorityDisinherit+0xd8>)
 800afb6:	441a      	add	r2, r3
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	3304      	adds	r3, #4
 800afbc:	4619      	mov	r1, r3
 800afbe:	4610      	mov	r0, r2
 800afc0:	f7fd fd95 	bl	8008aee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afc4:	2301      	movs	r3, #1
 800afc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afc8:	697b      	ldr	r3, [r7, #20]
	}
 800afca:	4618      	mov	r0, r3
 800afcc:	3718      	adds	r7, #24
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	200017f0 	.word	0x200017f0
 800afd8:	20001ccc 	.word	0x20001ccc
 800afdc:	200017f4 	.word	0x200017f4

0800afe0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800afee:	2301      	movs	r3, #1
 800aff0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d06f      	beq.n	800b0d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10a      	bne.n	800b016 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	60fb      	str	r3, [r7, #12]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d902      	bls.n	800b026 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	61fb      	str	r3, [r7, #28]
 800b024:	e002      	b.n	800b02c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b02a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b030:	69fa      	ldr	r2, [r7, #28]
 800b032:	429a      	cmp	r2, r3
 800b034:	d050      	beq.n	800b0d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d14b      	bne.n	800b0d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b040:	4b27      	ldr	r3, [pc, #156]	; (800b0e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	429a      	cmp	r2, r3
 800b048:	d10a      	bne.n	800b060 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	60bb      	str	r3, [r7, #8]
}
 800b05c:	bf00      	nop
 800b05e:	e7fe      	b.n	800b05e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	69fa      	ldr	r2, [r7, #28]
 800b06a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	2b00      	cmp	r3, #0
 800b072:	db04      	blt.n	800b07e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	6959      	ldr	r1, [r3, #20]
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	4613      	mov	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4a15      	ldr	r2, [pc, #84]	; (800b0e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b08e:	4413      	add	r3, r2
 800b090:	4299      	cmp	r1, r3
 800b092:	d101      	bne.n	800b098 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800b094:	2301      	movs	r3, #1
 800b096:	e000      	b.n	800b09a <vTaskPriorityDisinheritAfterTimeout+0xba>
 800b098:	2300      	movs	r3, #0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d01c      	beq.n	800b0d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fd fd7e 	bl	8008ba4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ac:	4b0e      	ldr	r3, [pc, #56]	; (800b0e8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d903      	bls.n	800b0bc <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b8:	4a0b      	ldr	r2, [pc, #44]	; (800b0e8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b0ba:	6013      	str	r3, [r2, #0]
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4413      	add	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4a06      	ldr	r2, [pc, #24]	; (800b0e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b0ca:	441a      	add	r2, r3
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	f7fd fd0b 	bl	8008aee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0d8:	bf00      	nop
 800b0da:	3720      	adds	r7, #32
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	200017f0 	.word	0x200017f0
 800b0e4:	200017f4 	.word	0x200017f4
 800b0e8:	20001ccc 	.word	0x20001ccc

0800b0ec <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f001 fa22 	bl	800c542 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7f5 f826 	bl	8000150 <strlen>
 800b104:	60f8      	str	r0, [r7, #12]
 800b106:	e007      	b.n	800b118 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	4413      	add	r3, r2
 800b10e:	2220      	movs	r2, #32
 800b110:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3301      	adds	r3, #1
 800b116:	60fb      	str	r3, [r7, #12]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2b0e      	cmp	r3, #14
 800b11c:	d9f4      	bls.n	800b108 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4413      	add	r3, r2
 800b124:	2200      	movs	r2, #0
 800b126:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4413      	add	r3, r2
	}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
	...

0800b138 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800b138:	b590      	push	{r4, r7, lr}
 800b13a:	b089      	sub	sp, #36	; 0x24
 800b13c:	af02      	add	r7, sp, #8
 800b13e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800b146:	4b46      	ldr	r3, [pc, #280]	; (800b260 <vTaskList+0x128>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800b14c:	4b44      	ldr	r3, [pc, #272]	; (800b260 <vTaskList+0x128>)
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	4613      	mov	r3, r2
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 fe77 	bl	800be4c <pvPortMalloc>
 800b15e:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d078      	beq.n	800b258 <vTaskList+0x120>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	4619      	mov	r1, r3
 800b16c:	6938      	ldr	r0, [r7, #16]
 800b16e:	f7ff f975 	bl	800a45c <uxTaskGetSystemState>
 800b172:	4603      	mov	r3, r0
 800b174:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]
 800b17a:	e066      	b.n	800b24a <vTaskList+0x112>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	4413      	add	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	461a      	mov	r2, r3
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	4413      	add	r3, r2
 800b18c:	7b1b      	ldrb	r3, [r3, #12]
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d81b      	bhi.n	800b1ca <vTaskList+0x92>
 800b192:	a201      	add	r2, pc, #4	; (adr r2, 800b198 <vTaskList+0x60>)
 800b194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b198:	0800b1ad 	.word	0x0800b1ad
 800b19c:	0800b1b3 	.word	0x0800b1b3
 800b1a0:	0800b1b9 	.word	0x0800b1b9
 800b1a4:	0800b1bf 	.word	0x0800b1bf
 800b1a8:	0800b1c5 	.word	0x0800b1c5
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800b1ac:	2358      	movs	r3, #88	; 0x58
 800b1ae:	75fb      	strb	r3, [r7, #23]
										break;
 800b1b0:	e00e      	b.n	800b1d0 <vTaskList+0x98>

					case eReady:		cStatus = tskREADY_CHAR;
 800b1b2:	2352      	movs	r3, #82	; 0x52
 800b1b4:	75fb      	strb	r3, [r7, #23]
										break;
 800b1b6:	e00b      	b.n	800b1d0 <vTaskList+0x98>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800b1b8:	2342      	movs	r3, #66	; 0x42
 800b1ba:	75fb      	strb	r3, [r7, #23]
										break;
 800b1bc:	e008      	b.n	800b1d0 <vTaskList+0x98>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800b1be:	2353      	movs	r3, #83	; 0x53
 800b1c0:	75fb      	strb	r3, [r7, #23]
										break;
 800b1c2:	e005      	b.n	800b1d0 <vTaskList+0x98>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800b1c4:	2344      	movs	r3, #68	; 0x44
 800b1c6:	75fb      	strb	r3, [r7, #23]
										break;
 800b1c8:	e002      	b.n	800b1d0 <vTaskList+0x98>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	75fb      	strb	r3, [r7, #23]
										break;
 800b1ce:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	4413      	add	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	461a      	mov	r2, r3
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	4413      	add	r3, r2
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff ff81 	bl	800b0ec <prvWriteNameToBuffer>
 800b1ea:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800b1ec:	7df9      	ldrb	r1, [r7, #23]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	00db      	lsls	r3, r3, #3
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	6918      	ldr	r0, [r3, #16]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	4613      	mov	r3, r2
 800b204:	00db      	lsls	r3, r3, #3
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	461a      	mov	r2, r3
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	4413      	add	r3, r2
 800b210:	8c1b      	ldrh	r3, [r3, #32]
 800b212:	461c      	mov	r4, r3
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	4613      	mov	r3, r2
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	4413      	add	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	461a      	mov	r2, r3
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	4413      	add	r3, r2
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	9400      	str	r4, [sp, #0]
 800b22a:	4603      	mov	r3, r0
 800b22c:	460a      	mov	r2, r1
 800b22e:	490d      	ldr	r1, [pc, #52]	; (800b264 <vTaskList+0x12c>)
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f001 f957 	bl	800c4e4 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7f4 ff8a 	bl	8000150 <strlen>
 800b23c:	4602      	mov	r2, r0
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4413      	add	r3, r2
 800b242:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	3301      	adds	r3, #1
 800b248:	60bb      	str	r3, [r7, #8]
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d394      	bcc.n	800b17c <vTaskList+0x44>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800b252:	6938      	ldr	r0, [r7, #16]
 800b254:	f000 febe 	bl	800bfd4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b258:	bf00      	nop
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd90      	pop	{r4, r7, pc}
 800b260:	20001cc4 	.word	0x20001cc4
 800b264:	0800cf84 	.word	0x0800cf84

0800b268 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800b276:	4b3a      	ldr	r3, [pc, #232]	; (800b360 <vTaskGetRunTimeStats+0xf8>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	617b      	str	r3, [r7, #20]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800b27c:	4b38      	ldr	r3, [pc, #224]	; (800b360 <vTaskGetRunTimeStats+0xf8>)
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	4613      	mov	r3, r2
 800b282:	00db      	lsls	r3, r3, #3
 800b284:	4413      	add	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 fddf 	bl	800be4c <pvPortMalloc>
 800b28e:	61f8      	str	r0, [r7, #28]

		if( pxTaskStatusArray != NULL )
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d060      	beq.n	800b358 <vTaskGetRunTimeStats+0xf0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f107 020c 	add.w	r2, r7, #12
 800b29c:	4619      	mov	r1, r3
 800b29e:	69f8      	ldr	r0, [r7, #28]
 800b2a0:	f7ff f8dc 	bl	800a45c <uxTaskGetSystemState>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	617b      	str	r3, [r7, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4a2e      	ldr	r2, [pc, #184]	; (800b364 <vTaskGetRunTimeStats+0xfc>)
 800b2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b0:	095b      	lsrs	r3, r3, #5
 800b2b2:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d04b      	beq.n	800b352 <vTaskGetRunTimeStats+0xea>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	613b      	str	r3, [r7, #16]
 800b2be:	e044      	b.n	800b34a <vTaskGetRunTimeStats+0xe2>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	00db      	lsls	r3, r3, #3
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	699a      	ldr	r2, [r3, #24]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d8:	61bb      	str	r3, [r7, #24]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800b2da:	693a      	ldr	r2, [r7, #16]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	00db      	lsls	r3, r3, #3
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7ff fefc 	bl	800b0ec <prvWriteNameToBuffer>
 800b2f4:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00e      	beq.n	800b31a <vTaskGetRunTimeStats+0xb2>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	4613      	mov	r3, r2
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	461a      	mov	r2, r3
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	4413      	add	r3, r2
 800b30c:	699a      	ldr	r2, [r3, #24]
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	4915      	ldr	r1, [pc, #84]	; (800b368 <vTaskGetRunTimeStats+0x100>)
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f001 f8e6 	bl	800c4e4 <siprintf>
 800b318:	e00d      	b.n	800b336 <vTaskGetRunTimeStats+0xce>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	4613      	mov	r3, r2
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	4413      	add	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	461a      	mov	r2, r3
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	4413      	add	r3, r2
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	461a      	mov	r2, r3
 800b32e:	490f      	ldr	r1, [pc, #60]	; (800b36c <vTaskGetRunTimeStats+0x104>)
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f001 f8d7 	bl	800c4e4 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7f4 ff0a 	bl	8000150 <strlen>
 800b33c:	4602      	mov	r2, r0
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4413      	add	r3, r2
 800b342:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	3301      	adds	r3, #1
 800b348:	613b      	str	r3, [r7, #16]
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d3b6      	bcc.n	800b2c0 <vTaskGetRunTimeStats+0x58>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800b352:	69f8      	ldr	r0, [r7, #28]
 800b354:	f000 fe3e 	bl	800bfd4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b358:	bf00      	nop
 800b35a:	3720      	adds	r7, #32
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20001cc4 	.word	0x20001cc4
 800b364:	51eb851f 	.word	0x51eb851f
 800b368:	0800cf94 	.word	0x0800cf94
 800b36c:	0800cfa0 	.word	0x0800cfa0

0800b370 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b370:	b480      	push	{r7}
 800b372:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b374:	4b07      	ldr	r3, [pc, #28]	; (800b394 <pvTaskIncrementMutexHeldCount+0x24>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d004      	beq.n	800b386 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b37c:	4b05      	ldr	r3, [pc, #20]	; (800b394 <pvTaskIncrementMutexHeldCount+0x24>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b382:	3201      	adds	r2, #1
 800b384:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b386:	4b03      	ldr	r3, [pc, #12]	; (800b394 <pvTaskIncrementMutexHeldCount+0x24>)
 800b388:	681b      	ldr	r3, [r3, #0]
	}
 800b38a:	4618      	mov	r0, r3
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bc80      	pop	{r7}
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	200017f0 	.word	0x200017f0

0800b398 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3a2:	4b21      	ldr	r3, [pc, #132]	; (800b428 <prvAddCurrentTaskToDelayedList+0x90>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3a8:	4b20      	ldr	r3, [pc, #128]	; (800b42c <prvAddCurrentTaskToDelayedList+0x94>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fd fbf8 	bl	8008ba4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3ba:	d10a      	bne.n	800b3d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d007      	beq.n	800b3d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3c2:	4b1a      	ldr	r3, [pc, #104]	; (800b42c <prvAddCurrentTaskToDelayedList+0x94>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4819      	ldr	r0, [pc, #100]	; (800b430 <prvAddCurrentTaskToDelayedList+0x98>)
 800b3cc:	f7fd fb8f 	bl	8008aee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3d0:	e026      	b.n	800b420 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3da:	4b14      	ldr	r3, [pc, #80]	; (800b42c <prvAddCurrentTaskToDelayedList+0x94>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d209      	bcs.n	800b3fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3ea:	4b12      	ldr	r3, [pc, #72]	; (800b434 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <prvAddCurrentTaskToDelayedList+0x94>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f7fd fb9c 	bl	8008b34 <vListInsert>
}
 800b3fc:	e010      	b.n	800b420 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3fe:	4b0e      	ldr	r3, [pc, #56]	; (800b438 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <prvAddCurrentTaskToDelayedList+0x94>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3304      	adds	r3, #4
 800b408:	4619      	mov	r1, r3
 800b40a:	4610      	mov	r0, r2
 800b40c:	f7fd fb92 	bl	8008b34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b410:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	429a      	cmp	r2, r3
 800b418:	d202      	bcs.n	800b420 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b41a:	4a08      	ldr	r2, [pc, #32]	; (800b43c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	6013      	str	r3, [r2, #0]
}
 800b420:	bf00      	nop
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20001cc8 	.word	0x20001cc8
 800b42c:	200017f0 	.word	0x200017f0
 800b430:	20001cb0 	.word	0x20001cb0
 800b434:	20001c80 	.word	0x20001c80
 800b438:	20001c7c 	.word	0x20001c7c
 800b43c:	20001ce4 	.word	0x20001ce4

0800b440 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08a      	sub	sp, #40	; 0x28
 800b444:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b446:	2300      	movs	r3, #0
 800b448:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b44a:	f000 facb 	bl	800b9e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b44e:	4b1c      	ldr	r3, [pc, #112]	; (800b4c0 <xTimerCreateTimerTask+0x80>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d021      	beq.n	800b49a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b45e:	1d3a      	adds	r2, r7, #4
 800b460:	f107 0108 	add.w	r1, r7, #8
 800b464:	f107 030c 	add.w	r3, r7, #12
 800b468:	4618      	mov	r0, r3
 800b46a:	f7fd fafb 	bl	8008a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b46e:	6879      	ldr	r1, [r7, #4]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	9202      	str	r2, [sp, #8]
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	2318      	movs	r3, #24
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	2300      	movs	r3, #0
 800b47e:	460a      	mov	r2, r1
 800b480:	4910      	ldr	r1, [pc, #64]	; (800b4c4 <xTimerCreateTimerTask+0x84>)
 800b482:	4811      	ldr	r0, [pc, #68]	; (800b4c8 <xTimerCreateTimerTask+0x88>)
 800b484:	f7fe fc7a 	bl	8009d7c <xTaskCreateStatic>
 800b488:	4603      	mov	r3, r0
 800b48a:	4a10      	ldr	r2, [pc, #64]	; (800b4cc <xTimerCreateTimerTask+0x8c>)
 800b48c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <xTimerCreateTimerTask+0x8c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b496:	2301      	movs	r3, #1
 800b498:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10a      	bne.n	800b4b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	613b      	str	r3, [r7, #16]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4b6:	697b      	ldr	r3, [r7, #20]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20001d28 	.word	0x20001d28
 800b4c4:	0800cfac 	.word	0x0800cfac
 800b4c8:	0800b5ed 	.word	0x0800b5ed
 800b4cc:	20001d2c 	.word	0x20001d2c

0800b4d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08a      	sub	sp, #40	; 0x28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10a      	bne.n	800b4fe <xTimerGenericCommand+0x2e>
	__asm volatile
 800b4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ec:	f383 8811 	msr	BASEPRI, r3
 800b4f0:	f3bf 8f6f 	isb	sy
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	623b      	str	r3, [r7, #32]
}
 800b4fa:	bf00      	nop
 800b4fc:	e7fe      	b.n	800b4fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4fe:	4b1a      	ldr	r3, [pc, #104]	; (800b568 <xTimerGenericCommand+0x98>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d02a      	beq.n	800b55c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	2b05      	cmp	r3, #5
 800b516:	dc18      	bgt.n	800b54a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b518:	f7ff fc68 	bl	800adec <xTaskGetSchedulerState>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d109      	bne.n	800b536 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b522:	4b11      	ldr	r3, [pc, #68]	; (800b568 <xTimerGenericCommand+0x98>)
 800b524:	6818      	ldr	r0, [r3, #0]
 800b526:	f107 0110 	add.w	r1, r7, #16
 800b52a:	2300      	movs	r3, #0
 800b52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b52e:	f7fd fdc5 	bl	80090bc <xQueueGenericSend>
 800b532:	6278      	str	r0, [r7, #36]	; 0x24
 800b534:	e012      	b.n	800b55c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b536:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <xTimerGenericCommand+0x98>)
 800b538:	6818      	ldr	r0, [r3, #0]
 800b53a:	f107 0110 	add.w	r1, r7, #16
 800b53e:	2300      	movs	r3, #0
 800b540:	2200      	movs	r2, #0
 800b542:	f7fd fdbb 	bl	80090bc <xQueueGenericSend>
 800b546:	6278      	str	r0, [r7, #36]	; 0x24
 800b548:	e008      	b.n	800b55c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b54a:	4b07      	ldr	r3, [pc, #28]	; (800b568 <xTimerGenericCommand+0x98>)
 800b54c:	6818      	ldr	r0, [r3, #0]
 800b54e:	f107 0110 	add.w	r1, r7, #16
 800b552:	2300      	movs	r3, #0
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	f7fd feaf 	bl	80092b8 <xQueueGenericSendFromISR>
 800b55a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3728      	adds	r7, #40	; 0x28
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	20001d28 	.word	0x20001d28

0800b56c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af02      	add	r7, sp, #8
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b576:	4b1c      	ldr	r3, [pc, #112]	; (800b5e8 <prvProcessExpiredTimer+0x7c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	3304      	adds	r3, #4
 800b584:	4618      	mov	r0, r3
 800b586:	f7fd fb0d 	bl	8008ba4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d122      	bne.n	800b5d8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	699a      	ldr	r2, [r3, #24]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	18d1      	adds	r1, r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	6978      	ldr	r0, [r7, #20]
 800b5a0:	f000 f8c8 	bl	800b734 <prvInsertTimerInActiveList>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d016      	beq.n	800b5d8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	9300      	str	r3, [sp, #0]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	6978      	ldr	r0, [r7, #20]
 800b5b6:	f7ff ff8b 	bl	800b4d0 <xTimerGenericCommand>
 800b5ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10a      	bne.n	800b5d8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	60fb      	str	r3, [r7, #12]
}
 800b5d4:	bf00      	nop
 800b5d6:	e7fe      	b.n	800b5d6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	6978      	ldr	r0, [r7, #20]
 800b5de:	4798      	blx	r3
}
 800b5e0:	bf00      	nop
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	20001d20 	.word	0x20001d20

0800b5ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5f4:	f107 0308 	add.w	r3, r7, #8
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 f857 	bl	800b6ac <prvGetNextExpireTime>
 800b5fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	4619      	mov	r1, r3
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 f803 	bl	800b610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b60a:	f000 f8d5 	bl	800b7b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b60e:	e7f1      	b.n	800b5f4 <prvTimerTask+0x8>

0800b610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b61a:	f7fe fe65 	bl	800a2e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b61e:	f107 0308 	add.w	r3, r7, #8
 800b622:	4618      	mov	r0, r3
 800b624:	f000 f866 	bl	800b6f4 <prvSampleTimeNow>
 800b628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d130      	bne.n	800b692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10a      	bne.n	800b64c <prvProcessTimerOrBlockTask+0x3c>
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d806      	bhi.n	800b64c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b63e:	f7fe fe61 	bl	800a304 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b642:	68f9      	ldr	r1, [r7, #12]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ff91 	bl	800b56c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b64a:	e024      	b.n	800b696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d008      	beq.n	800b664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b652:	4b13      	ldr	r3, [pc, #76]	; (800b6a0 <prvProcessTimerOrBlockTask+0x90>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	bf0c      	ite	eq
 800b65c:	2301      	moveq	r3, #1
 800b65e:	2300      	movne	r3, #0
 800b660:	b2db      	uxtb	r3, r3
 800b662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b664:	4b0f      	ldr	r3, [pc, #60]	; (800b6a4 <prvProcessTimerOrBlockTask+0x94>)
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	4619      	mov	r1, r3
 800b672:	f7fe fb4f 	bl	8009d14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b676:	f7fe fe45 	bl	800a304 <xTaskResumeAll>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10a      	bne.n	800b696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b680:	4b09      	ldr	r3, [pc, #36]	; (800b6a8 <prvProcessTimerOrBlockTask+0x98>)
 800b682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
}
 800b690:	e001      	b.n	800b696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b692:	f7fe fe37 	bl	800a304 <xTaskResumeAll>
}
 800b696:	bf00      	nop
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20001d24 	.word	0x20001d24
 800b6a4:	20001d28 	.word	0x20001d28
 800b6a8:	e000ed04 	.word	0xe000ed04

0800b6ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6b4:	4b0e      	ldr	r3, [pc, #56]	; (800b6f0 <prvGetNextExpireTime+0x44>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bf0c      	ite	eq
 800b6be:	2301      	moveq	r3, #1
 800b6c0:	2300      	movne	r3, #0
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d105      	bne.n	800b6de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6d2:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <prvGetNextExpireTime+0x44>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60fb      	str	r3, [r7, #12]
 800b6dc:	e001      	b.n	800b6e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bc80      	pop	{r7}
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	20001d20 	.word	0x20001d20

0800b6f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6fc:	f7fe fea0 	bl	800a440 <xTaskGetTickCount>
 800b700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b702:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <prvSampleTimeNow+0x3c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d205      	bcs.n	800b718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b70c:	f000 f908 	bl	800b920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	e002      	b.n	800b71e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b71e:	4a04      	ldr	r2, [pc, #16]	; (800b730 <prvSampleTimeNow+0x3c>)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b724:	68fb      	ldr	r3, [r7, #12]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20001d30 	.word	0x20001d30

0800b734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b742:	2300      	movs	r3, #0
 800b744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	429a      	cmp	r2, r3
 800b758:	d812      	bhi.n	800b780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	1ad2      	subs	r2, r2, r3
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	429a      	cmp	r2, r3
 800b766:	d302      	bcc.n	800b76e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	e01b      	b.n	800b7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b76e:	4b10      	ldr	r3, [pc, #64]	; (800b7b0 <prvInsertTimerInActiveList+0x7c>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	3304      	adds	r3, #4
 800b776:	4619      	mov	r1, r3
 800b778:	4610      	mov	r0, r2
 800b77a:	f7fd f9db 	bl	8008b34 <vListInsert>
 800b77e:	e012      	b.n	800b7a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d206      	bcs.n	800b796 <prvInsertTimerInActiveList+0x62>
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d302      	bcc.n	800b796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b790:	2301      	movs	r3, #1
 800b792:	617b      	str	r3, [r7, #20]
 800b794:	e007      	b.n	800b7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b796:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <prvInsertTimerInActiveList+0x80>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3304      	adds	r3, #4
 800b79e:	4619      	mov	r1, r3
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	f7fd f9c7 	bl	8008b34 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7a6:	697b      	ldr	r3, [r7, #20]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20001d24 	.word	0x20001d24
 800b7b4:	20001d20 	.word	0x20001d20

0800b7b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08e      	sub	sp, #56	; 0x38
 800b7bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7be:	e09d      	b.n	800b8fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	da18      	bge.n	800b7f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b7c6:	1d3b      	adds	r3, r7, #4
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	61fb      	str	r3, [r7, #28]
}
 800b7e4:	bf00      	nop
 800b7e6:	e7fe      	b.n	800b7e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ee:	6850      	ldr	r0, [r2, #4]
 800b7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7f2:	6892      	ldr	r2, [r2, #8]
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	db7d      	blt.n	800b8fa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b804:	695b      	ldr	r3, [r3, #20]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d004      	beq.n	800b814 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80c:	3304      	adds	r3, #4
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fd f9c8 	bl	8008ba4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b814:	463b      	mov	r3, r7
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff ff6c 	bl	800b6f4 <prvSampleTimeNow>
 800b81c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b09      	cmp	r3, #9
 800b822:	d86b      	bhi.n	800b8fc <prvProcessReceivedCommands+0x144>
 800b824:	a201      	add	r2, pc, #4	; (adr r2, 800b82c <prvProcessReceivedCommands+0x74>)
 800b826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82a:	bf00      	nop
 800b82c:	0800b855 	.word	0x0800b855
 800b830:	0800b855 	.word	0x0800b855
 800b834:	0800b855 	.word	0x0800b855
 800b838:	0800b8fd 	.word	0x0800b8fd
 800b83c:	0800b8b1 	.word	0x0800b8b1
 800b840:	0800b8e9 	.word	0x0800b8e9
 800b844:	0800b855 	.word	0x0800b855
 800b848:	0800b855 	.word	0x0800b855
 800b84c:	0800b8fd 	.word	0x0800b8fd
 800b850:	0800b8b1 	.word	0x0800b8b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	18d1      	adds	r1, r2, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b862:	f7ff ff67 	bl	800b734 <prvInsertTimerInActiveList>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d047      	beq.n	800b8fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b872:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d13f      	bne.n	800b8fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	441a      	add	r2, r3
 800b884:	2300      	movs	r3, #0
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	2300      	movs	r3, #0
 800b88a:	2100      	movs	r1, #0
 800b88c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b88e:	f7ff fe1f 	bl	800b4d0 <xTimerGenericCommand>
 800b892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d130      	bne.n	800b8fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	61bb      	str	r3, [r7, #24]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	617b      	str	r3, [r7, #20]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	699a      	ldr	r2, [r3, #24]
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	18d1      	adds	r1, r2, r3
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8e2:	f7ff ff27 	bl	800b734 <prvInsertTimerInActiveList>
					break;
 800b8e6:	e009      	b.n	800b8fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d104      	bne.n	800b8fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800b8f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8f4:	f000 fb6e 	bl	800bfd4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8f8:	e000      	b.n	800b8fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b8fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8fc:	4b07      	ldr	r3, [pc, #28]	; (800b91c <prvProcessReceivedCommands+0x164>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	1d39      	adds	r1, r7, #4
 800b902:	2200      	movs	r2, #0
 800b904:	4618      	mov	r0, r3
 800b906:	f7fd fdfd 	bl	8009504 <xQueueReceive>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f47f af57 	bne.w	800b7c0 <prvProcessReceivedCommands+0x8>
	}
}
 800b912:	bf00      	nop
 800b914:	bf00      	nop
 800b916:	3730      	adds	r7, #48	; 0x30
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	20001d28 	.word	0x20001d28

0800b920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b926:	e045      	b.n	800b9b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b928:	4b2c      	ldr	r3, [pc, #176]	; (800b9dc <prvSwitchTimerLists+0xbc>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b932:	4b2a      	ldr	r3, [pc, #168]	; (800b9dc <prvSwitchTimerLists+0xbc>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	3304      	adds	r3, #4
 800b940:	4618      	mov	r0, r3
 800b942:	f7fd f92f 	bl	8008ba4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d12e      	bne.n	800b9b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	4413      	add	r3, r2
 800b95e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	429a      	cmp	r2, r3
 800b966:	d90e      	bls.n	800b986 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b974:	4b19      	ldr	r3, [pc, #100]	; (800b9dc <prvSwitchTimerLists+0xbc>)
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3304      	adds	r3, #4
 800b97c:	4619      	mov	r1, r3
 800b97e:	4610      	mov	r0, r2
 800b980:	f7fd f8d8 	bl	8008b34 <vListInsert>
 800b984:	e016      	b.n	800b9b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b986:	2300      	movs	r3, #0
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	2300      	movs	r3, #0
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	2100      	movs	r1, #0
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7ff fd9d 	bl	800b4d0 <xTimerGenericCommand>
 800b996:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10a      	bne.n	800b9b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	603b      	str	r3, [r7, #0]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9b4:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <prvSwitchTimerLists+0xbc>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1b4      	bne.n	800b928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9be:	4b07      	ldr	r3, [pc, #28]	; (800b9dc <prvSwitchTimerLists+0xbc>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9c4:	4b06      	ldr	r3, [pc, #24]	; (800b9e0 <prvSwitchTimerLists+0xc0>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a04      	ldr	r2, [pc, #16]	; (800b9dc <prvSwitchTimerLists+0xbc>)
 800b9ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b9cc:	4a04      	ldr	r2, [pc, #16]	; (800b9e0 <prvSwitchTimerLists+0xc0>)
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	6013      	str	r3, [r2, #0]
}
 800b9d2:	bf00      	nop
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20001d20 	.word	0x20001d20
 800b9e0:	20001d24 	.word	0x20001d24

0800b9e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9ea:	f000 f92f 	bl	800bc4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9ee:	4b15      	ldr	r3, [pc, #84]	; (800ba44 <prvCheckForValidListAndQueue+0x60>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d120      	bne.n	800ba38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9f6:	4814      	ldr	r0, [pc, #80]	; (800ba48 <prvCheckForValidListAndQueue+0x64>)
 800b9f8:	f7fd f84e 	bl	8008a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9fc:	4813      	ldr	r0, [pc, #76]	; (800ba4c <prvCheckForValidListAndQueue+0x68>)
 800b9fe:	f7fd f84b 	bl	8008a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba02:	4b13      	ldr	r3, [pc, #76]	; (800ba50 <prvCheckForValidListAndQueue+0x6c>)
 800ba04:	4a10      	ldr	r2, [pc, #64]	; (800ba48 <prvCheckForValidListAndQueue+0x64>)
 800ba06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba08:	4b12      	ldr	r3, [pc, #72]	; (800ba54 <prvCheckForValidListAndQueue+0x70>)
 800ba0a:	4a10      	ldr	r2, [pc, #64]	; (800ba4c <prvCheckForValidListAndQueue+0x68>)
 800ba0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba0e:	2300      	movs	r3, #0
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	4b11      	ldr	r3, [pc, #68]	; (800ba58 <prvCheckForValidListAndQueue+0x74>)
 800ba14:	4a11      	ldr	r2, [pc, #68]	; (800ba5c <prvCheckForValidListAndQueue+0x78>)
 800ba16:	2110      	movs	r1, #16
 800ba18:	200a      	movs	r0, #10
 800ba1a:	f7fd f955 	bl	8008cc8 <xQueueGenericCreateStatic>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	4a08      	ldr	r2, [pc, #32]	; (800ba44 <prvCheckForValidListAndQueue+0x60>)
 800ba22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba24:	4b07      	ldr	r3, [pc, #28]	; (800ba44 <prvCheckForValidListAndQueue+0x60>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d005      	beq.n	800ba38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba2c:	4b05      	ldr	r3, [pc, #20]	; (800ba44 <prvCheckForValidListAndQueue+0x60>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	490b      	ldr	r1, [pc, #44]	; (800ba60 <prvCheckForValidListAndQueue+0x7c>)
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe f91c 	bl	8009c70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba38:	f000 f938 	bl	800bcac <vPortExitCritical>
}
 800ba3c:	bf00      	nop
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20001d28 	.word	0x20001d28
 800ba48:	20001cf8 	.word	0x20001cf8
 800ba4c:	20001d0c 	.word	0x20001d0c
 800ba50:	20001d20 	.word	0x20001d20
 800ba54:	20001d24 	.word	0x20001d24
 800ba58:	20001dd4 	.word	0x20001dd4
 800ba5c:	20001d34 	.word	0x20001d34
 800ba60:	0800cfb4 	.word	0x0800cfb4

0800ba64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3b04      	subs	r3, #4
 800ba74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3b04      	subs	r3, #4
 800ba82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f023 0201 	bic.w	r2, r3, #1
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3b04      	subs	r3, #4
 800ba92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba94:	4a08      	ldr	r2, [pc, #32]	; (800bab8 <pxPortInitialiseStack+0x54>)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	3b14      	subs	r3, #20
 800ba9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3b20      	subs	r3, #32
 800baaa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800baac:	68fb      	ldr	r3, [r7, #12]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bc80      	pop	{r7}
 800bab6:	4770      	bx	lr
 800bab8:	0800babd 	.word	0x0800babd

0800babc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bac6:	4b12      	ldr	r3, [pc, #72]	; (800bb10 <prvTaskExitError+0x54>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bace:	d00a      	beq.n	800bae6 <prvTaskExitError+0x2a>
	__asm volatile
 800bad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	60fb      	str	r3, [r7, #12]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <prvTaskExitError+0x28>
	__asm volatile
 800bae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baea:	f383 8811 	msr	BASEPRI, r3
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	60bb      	str	r3, [r7, #8]
}
 800baf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bafa:	bf00      	nop
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d0fc      	beq.n	800bafc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb02:	bf00      	nop
 800bb04:	bf00      	nop
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bc80      	pop	{r7}
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20000014 	.word	0x20000014
	...

0800bb20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb20:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <pxCurrentTCBConst2>)
 800bb22:	6819      	ldr	r1, [r3, #0]
 800bb24:	6808      	ldr	r0, [r1, #0]
 800bb26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bb2a:	f380 8809 	msr	PSP, r0
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f04f 0000 	mov.w	r0, #0
 800bb36:	f380 8811 	msr	BASEPRI, r0
 800bb3a:	f04e 0e0d 	orr.w	lr, lr, #13
 800bb3e:	4770      	bx	lr

0800bb40 <pxCurrentTCBConst2>:
 800bb40:	200017f0 	.word	0x200017f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop

0800bb48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bb48:	4806      	ldr	r0, [pc, #24]	; (800bb64 <prvPortStartFirstTask+0x1c>)
 800bb4a:	6800      	ldr	r0, [r0, #0]
 800bb4c:	6800      	ldr	r0, [r0, #0]
 800bb4e:	f380 8808 	msr	MSP, r0
 800bb52:	b662      	cpsie	i
 800bb54:	b661      	cpsie	f
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	df00      	svc	0
 800bb60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb62:	bf00      	nop
 800bb64:	e000ed08 	.word	0xe000ed08

0800bb68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb6e:	4b32      	ldr	r3, [pc, #200]	; (800bc38 <xPortStartScheduler+0xd0>)
 800bb70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	22ff      	movs	r2, #255	; 0xff
 800bb7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb88:	78fb      	ldrb	r3, [r7, #3]
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	4b2a      	ldr	r3, [pc, #168]	; (800bc3c <xPortStartScheduler+0xd4>)
 800bb94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb96:	4b2a      	ldr	r3, [pc, #168]	; (800bc40 <xPortStartScheduler+0xd8>)
 800bb98:	2207      	movs	r2, #7
 800bb9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb9c:	e009      	b.n	800bbb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bb9e:	4b28      	ldr	r3, [pc, #160]	; (800bc40 <xPortStartScheduler+0xd8>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3b01      	subs	r3, #1
 800bba4:	4a26      	ldr	r2, [pc, #152]	; (800bc40 <xPortStartScheduler+0xd8>)
 800bba6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bba8:	78fb      	ldrb	r3, [r7, #3]
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbb2:	78fb      	ldrb	r3, [r7, #3]
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbba:	2b80      	cmp	r3, #128	; 0x80
 800bbbc:	d0ef      	beq.n	800bb9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbbe:	4b20      	ldr	r3, [pc, #128]	; (800bc40 <xPortStartScheduler+0xd8>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f1c3 0307 	rsb	r3, r3, #7
 800bbc6:	2b04      	cmp	r3, #4
 800bbc8:	d00a      	beq.n	800bbe0 <xPortStartScheduler+0x78>
	__asm volatile
 800bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	60bb      	str	r3, [r7, #8]
}
 800bbdc:	bf00      	nop
 800bbde:	e7fe      	b.n	800bbde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbe0:	4b17      	ldr	r3, [pc, #92]	; (800bc40 <xPortStartScheduler+0xd8>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	021b      	lsls	r3, r3, #8
 800bbe6:	4a16      	ldr	r2, [pc, #88]	; (800bc40 <xPortStartScheduler+0xd8>)
 800bbe8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbea:	4b15      	ldr	r3, [pc, #84]	; (800bc40 <xPortStartScheduler+0xd8>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbf2:	4a13      	ldr	r2, [pc, #76]	; (800bc40 <xPortStartScheduler+0xd8>)
 800bbf4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbfe:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <xPortStartScheduler+0xdc>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a10      	ldr	r2, [pc, #64]	; (800bc44 <xPortStartScheduler+0xdc>)
 800bc04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc0a:	4b0e      	ldr	r3, [pc, #56]	; (800bc44 <xPortStartScheduler+0xdc>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a0d      	ldr	r2, [pc, #52]	; (800bc44 <xPortStartScheduler+0xdc>)
 800bc10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc16:	f000 f8b9 	bl	800bd8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <xPortStartScheduler+0xe0>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc20:	f7ff ff92 	bl	800bb48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc24:	f7fe fd68 	bl	800a6f8 <vTaskSwitchContext>
	prvTaskExitError();
 800bc28:	f7ff ff48 	bl	800babc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	e000e400 	.word	0xe000e400
 800bc3c:	20001e24 	.word	0x20001e24
 800bc40:	20001e28 	.word	0x20001e28
 800bc44:	e000ed20 	.word	0xe000ed20
 800bc48:	20000014 	.word	0x20000014

0800bc4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	607b      	str	r3, [r7, #4]
}
 800bc64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <vPortEnterCritical+0x58>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	4a0d      	ldr	r2, [pc, #52]	; (800bca4 <vPortEnterCritical+0x58>)
 800bc6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc70:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <vPortEnterCritical+0x58>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d10f      	bne.n	800bc98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc78:	4b0b      	ldr	r3, [pc, #44]	; (800bca8 <vPortEnterCritical+0x5c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00a      	beq.n	800bc98 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	603b      	str	r3, [r7, #0]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <vPortEnterCritical+0x4a>
	}
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bc80      	pop	{r7}
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	20000014 	.word	0x20000014
 800bca8:	e000ed04 	.word	0xe000ed04

0800bcac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcb2:	4b11      	ldr	r3, [pc, #68]	; (800bcf8 <vPortExitCritical+0x4c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10a      	bne.n	800bcd0 <vPortExitCritical+0x24>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	607b      	str	r3, [r7, #4]
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bcd0:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <vPortExitCritical+0x4c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	4a08      	ldr	r2, [pc, #32]	; (800bcf8 <vPortExitCritical+0x4c>)
 800bcd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bcda:	4b07      	ldr	r3, [pc, #28]	; (800bcf8 <vPortExitCritical+0x4c>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d105      	bne.n	800bcee <vPortExitCritical+0x42>
 800bce2:	2300      	movs	r3, #0
 800bce4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	f383 8811 	msr	BASEPRI, r3
}
 800bcec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcee:	bf00      	nop
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bc80      	pop	{r7}
 800bcf6:	4770      	bx	lr
 800bcf8:	20000014 	.word	0x20000014
 800bcfc:	00000000 	.word	0x00000000

0800bd00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd00:	f3ef 8009 	mrs	r0, PSP
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	4b0d      	ldr	r3, [pc, #52]	; (800bd40 <pxCurrentTCBConst>)
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bd10:	6010      	str	r0, [r2, #0]
 800bd12:	e92d 4008 	stmdb	sp!, {r3, lr}
 800bd16:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd1a:	f380 8811 	msr	BASEPRI, r0
 800bd1e:	f7fe fceb 	bl	800a6f8 <vTaskSwitchContext>
 800bd22:	f04f 0000 	mov.w	r0, #0
 800bd26:	f380 8811 	msr	BASEPRI, r0
 800bd2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bd2e:	6819      	ldr	r1, [r3, #0]
 800bd30:	6808      	ldr	r0, [r1, #0]
 800bd32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bd36:	f380 8809 	msr	PSP, r0
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	4770      	bx	lr

0800bd40 <pxCurrentTCBConst>:
 800bd40:	200017f0 	.word	0x200017f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop

0800bd48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd62:	f7fe fc0b 	bl	800a57c <xTaskIncrementTick>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d003      	beq.n	800bd74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd6c:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <SysTick_Handler+0x40>)
 800bd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	2300      	movs	r3, #0
 800bd76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	f383 8811 	msr	BASEPRI, r3
}
 800bd7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd90:	4b0a      	ldr	r3, [pc, #40]	; (800bdbc <vPortSetupTimerInterrupt+0x30>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd96:	4b0a      	ldr	r3, [pc, #40]	; (800bdc0 <vPortSetupTimerInterrupt+0x34>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd9c:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <vPortSetupTimerInterrupt+0x38>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a09      	ldr	r2, [pc, #36]	; (800bdc8 <vPortSetupTimerInterrupt+0x3c>)
 800bda2:	fba2 2303 	umull	r2, r3, r2, r3
 800bda6:	099b      	lsrs	r3, r3, #6
 800bda8:	4a08      	ldr	r2, [pc, #32]	; (800bdcc <vPortSetupTimerInterrupt+0x40>)
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdae:	4b03      	ldr	r3, [pc, #12]	; (800bdbc <vPortSetupTimerInterrupt+0x30>)
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	601a      	str	r2, [r3, #0]
}
 800bdb4:	bf00      	nop
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bc80      	pop	{r7}
 800bdba:	4770      	bx	lr
 800bdbc:	e000e010 	.word	0xe000e010
 800bdc0:	e000e018 	.word	0xe000e018
 800bdc4:	20000008 	.word	0x20000008
 800bdc8:	10624dd3 	.word	0x10624dd3
 800bdcc:	e000e014 	.word	0xe000e014

0800bdd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdd6:	f3ef 8305 	mrs	r3, IPSR
 800bdda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b0f      	cmp	r3, #15
 800bde0:	d914      	bls.n	800be0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bde2:	4a16      	ldr	r2, [pc, #88]	; (800be3c <vPortValidateInterruptPriority+0x6c>)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4413      	add	r3, r2
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdec:	4b14      	ldr	r3, [pc, #80]	; (800be40 <vPortValidateInterruptPriority+0x70>)
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	7afa      	ldrb	r2, [r7, #11]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d20a      	bcs.n	800be0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	607b      	str	r3, [r7, #4]
}
 800be08:	bf00      	nop
 800be0a:	e7fe      	b.n	800be0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be0c:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <vPortValidateInterruptPriority+0x74>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be14:	4b0c      	ldr	r3, [pc, #48]	; (800be48 <vPortValidateInterruptPriority+0x78>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d90a      	bls.n	800be32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	603b      	str	r3, [r7, #0]
}
 800be2e:	bf00      	nop
 800be30:	e7fe      	b.n	800be30 <vPortValidateInterruptPriority+0x60>
	}
 800be32:	bf00      	nop
 800be34:	3714      	adds	r7, #20
 800be36:	46bd      	mov	sp, r7
 800be38:	bc80      	pop	{r7}
 800be3a:	4770      	bx	lr
 800be3c:	e000e3f0 	.word	0xe000e3f0
 800be40:	20001e24 	.word	0x20001e24
 800be44:	e000ed0c 	.word	0xe000ed0c
 800be48:	20001e28 	.word	0x20001e28

0800be4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08a      	sub	sp, #40	; 0x28
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be54:	2300      	movs	r3, #0
 800be56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be58:	f7fe fa46 	bl	800a2e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be5c:	4b58      	ldr	r3, [pc, #352]	; (800bfc0 <pvPortMalloc+0x174>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be64:	f000 f91a 	bl	800c09c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be68:	4b56      	ldr	r3, [pc, #344]	; (800bfc4 <pvPortMalloc+0x178>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4013      	ands	r3, r2
 800be70:	2b00      	cmp	r3, #0
 800be72:	f040 808e 	bne.w	800bf92 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d01d      	beq.n	800beb8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be7c:	2208      	movs	r2, #8
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4413      	add	r3, r2
 800be82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d014      	beq.n	800beb8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f023 0307 	bic.w	r3, r3, #7
 800be94:	3308      	adds	r3, #8
 800be96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f003 0307 	and.w	r3, r3, #7
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00a      	beq.n	800beb8 <pvPortMalloc+0x6c>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	617b      	str	r3, [r7, #20]
}
 800beb4:	bf00      	nop
 800beb6:	e7fe      	b.n	800beb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d069      	beq.n	800bf92 <pvPortMalloc+0x146>
 800bebe:	4b42      	ldr	r3, [pc, #264]	; (800bfc8 <pvPortMalloc+0x17c>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d864      	bhi.n	800bf92 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bec8:	4b40      	ldr	r3, [pc, #256]	; (800bfcc <pvPortMalloc+0x180>)
 800beca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800becc:	4b3f      	ldr	r3, [pc, #252]	; (800bfcc <pvPortMalloc+0x180>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bed2:	e004      	b.n	800bede <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d903      	bls.n	800bef0 <pvPortMalloc+0xa4>
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1f1      	bne.n	800bed4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bef0:	4b33      	ldr	r3, [pc, #204]	; (800bfc0 <pvPortMalloc+0x174>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d04b      	beq.n	800bf92 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800befa:	6a3b      	ldr	r3, [r7, #32]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2208      	movs	r2, #8
 800bf00:	4413      	add	r3, r2
 800bf02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	6a3b      	ldr	r3, [r7, #32]
 800bf0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	1ad2      	subs	r2, r2, r3
 800bf14:	2308      	movs	r3, #8
 800bf16:	005b      	lsls	r3, r3, #1
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d91f      	bls.n	800bf5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4413      	add	r3, r2
 800bf22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	f003 0307 	and.w	r3, r3, #7
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00a      	beq.n	800bf44 <pvPortMalloc+0xf8>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	613b      	str	r3, [r7, #16]
}
 800bf40:	bf00      	nop
 800bf42:	e7fe      	b.n	800bf42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	685a      	ldr	r2, [r3, #4]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	1ad2      	subs	r2, r2, r3
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf56:	69b8      	ldr	r0, [r7, #24]
 800bf58:	f000 f902 	bl	800c160 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf5c:	4b1a      	ldr	r3, [pc, #104]	; (800bfc8 <pvPortMalloc+0x17c>)
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	4a18      	ldr	r2, [pc, #96]	; (800bfc8 <pvPortMalloc+0x17c>)
 800bf68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf6a:	4b17      	ldr	r3, [pc, #92]	; (800bfc8 <pvPortMalloc+0x17c>)
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	4b18      	ldr	r3, [pc, #96]	; (800bfd0 <pvPortMalloc+0x184>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d203      	bcs.n	800bf7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf76:	4b14      	ldr	r3, [pc, #80]	; (800bfc8 <pvPortMalloc+0x17c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a15      	ldr	r2, [pc, #84]	; (800bfd0 <pvPortMalloc+0x184>)
 800bf7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	4b10      	ldr	r3, [pc, #64]	; (800bfc4 <pvPortMalloc+0x178>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	431a      	orrs	r2, r3
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8e:	2200      	movs	r2, #0
 800bf90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf92:	f7fe f9b7 	bl	800a304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	f003 0307 	and.w	r3, r3, #7
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00a      	beq.n	800bfb6 <pvPortMalloc+0x16a>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	60fb      	str	r3, [r7, #12]
}
 800bfb2:	bf00      	nop
 800bfb4:	e7fe      	b.n	800bfb4 <pvPortMalloc+0x168>
	return pvReturn;
 800bfb6:	69fb      	ldr	r3, [r7, #28]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3728      	adds	r7, #40	; 0x28
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	2000415c 	.word	0x2000415c
 800bfc4:	20004168 	.word	0x20004168
 800bfc8:	20004160 	.word	0x20004160
 800bfcc:	20004154 	.word	0x20004154
 800bfd0:	20004164 	.word	0x20004164

0800bfd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d048      	beq.n	800c078 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfe6:	2308      	movs	r3, #8
 800bfe8:	425b      	negs	r3, r3
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	4413      	add	r3, r2
 800bfee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	4b21      	ldr	r3, [pc, #132]	; (800c080 <vPortFree+0xac>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4013      	ands	r3, r2
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10a      	bne.n	800c018 <vPortFree+0x44>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	60fb      	str	r3, [r7, #12]
}
 800c014:	bf00      	nop
 800c016:	e7fe      	b.n	800c016 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00a      	beq.n	800c036 <vPortFree+0x62>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	60bb      	str	r3, [r7, #8]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	4b11      	ldr	r3, [pc, #68]	; (800c080 <vPortFree+0xac>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4013      	ands	r3, r2
 800c040:	2b00      	cmp	r3, #0
 800c042:	d019      	beq.n	800c078 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d115      	bne.n	800c078 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	4b0b      	ldr	r3, [pc, #44]	; (800c080 <vPortFree+0xac>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	43db      	mvns	r3, r3
 800c056:	401a      	ands	r2, r3
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c05c:	f7fe f944 	bl	800a2e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	4b07      	ldr	r3, [pc, #28]	; (800c084 <vPortFree+0xb0>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4413      	add	r3, r2
 800c06a:	4a06      	ldr	r2, [pc, #24]	; (800c084 <vPortFree+0xb0>)
 800c06c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c06e:	6938      	ldr	r0, [r7, #16]
 800c070:	f000 f876 	bl	800c160 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c074:	f7fe f946 	bl	800a304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c078:	bf00      	nop
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	20004168 	.word	0x20004168
 800c084:	20004160 	.word	0x20004160

0800c088 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c088:	b480      	push	{r7}
 800c08a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c08c:	4b02      	ldr	r3, [pc, #8]	; (800c098 <xPortGetFreeHeapSize+0x10>)
 800c08e:	681b      	ldr	r3, [r3, #0]
}
 800c090:	4618      	mov	r0, r3
 800c092:	46bd      	mov	sp, r7
 800c094:	bc80      	pop	{r7}
 800c096:	4770      	bx	lr
 800c098:	20004160 	.word	0x20004160

0800c09c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0a2:	f242 3328 	movw	r3, #9000	; 0x2328
 800c0a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0a8:	4b27      	ldr	r3, [pc, #156]	; (800c148 <prvHeapInit+0xac>)
 800c0aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f003 0307 	and.w	r3, r3, #7
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00c      	beq.n	800c0d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3307      	adds	r3, #7
 800c0ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f023 0307 	bic.w	r3, r3, #7
 800c0c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0c4:	68ba      	ldr	r2, [r7, #8]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	4a1f      	ldr	r2, [pc, #124]	; (800c148 <prvHeapInit+0xac>)
 800c0cc:	4413      	add	r3, r2
 800c0ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0d4:	4a1d      	ldr	r2, [pc, #116]	; (800c14c <prvHeapInit+0xb0>)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0da:	4b1c      	ldr	r3, [pc, #112]	; (800c14c <prvHeapInit+0xb0>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0e8:	2208      	movs	r2, #8
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	1a9b      	subs	r3, r3, r2
 800c0ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f023 0307 	bic.w	r3, r3, #7
 800c0f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	4a15      	ldr	r2, [pc, #84]	; (800c150 <prvHeapInit+0xb4>)
 800c0fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0fe:	4b14      	ldr	r3, [pc, #80]	; (800c150 <prvHeapInit+0xb4>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2200      	movs	r2, #0
 800c104:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c106:	4b12      	ldr	r3, [pc, #72]	; (800c150 <prvHeapInit+0xb4>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	1ad2      	subs	r2, r2, r3
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c11c:	4b0c      	ldr	r3, [pc, #48]	; (800c150 <prvHeapInit+0xb4>)
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	4a0a      	ldr	r2, [pc, #40]	; (800c154 <prvHeapInit+0xb8>)
 800c12a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	4a09      	ldr	r2, [pc, #36]	; (800c158 <prvHeapInit+0xbc>)
 800c132:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c134:	4b09      	ldr	r3, [pc, #36]	; (800c15c <prvHeapInit+0xc0>)
 800c136:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c13a:	601a      	str	r2, [r3, #0]
}
 800c13c:	bf00      	nop
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	bc80      	pop	{r7}
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	20001e2c 	.word	0x20001e2c
 800c14c:	20004154 	.word	0x20004154
 800c150:	2000415c 	.word	0x2000415c
 800c154:	20004164 	.word	0x20004164
 800c158:	20004160 	.word	0x20004160
 800c15c:	20004168 	.word	0x20004168

0800c160 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c168:	4b27      	ldr	r3, [pc, #156]	; (800c208 <prvInsertBlockIntoFreeList+0xa8>)
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	e002      	b.n	800c174 <prvInsertBlockIntoFreeList+0x14>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d8f7      	bhi.n	800c16e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	4413      	add	r3, r2
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d108      	bne.n	800c1a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	441a      	add	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	441a      	add	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d118      	bne.n	800c1e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	4b14      	ldr	r3, [pc, #80]	; (800c20c <prvInsertBlockIntoFreeList+0xac>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d00d      	beq.n	800c1de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	441a      	add	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	601a      	str	r2, [r3, #0]
 800c1dc:	e008      	b.n	800c1f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1de:	4b0b      	ldr	r3, [pc, #44]	; (800c20c <prvInsertBlockIntoFreeList+0xac>)
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	601a      	str	r2, [r3, #0]
 800c1e6:	e003      	b.n	800c1f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d002      	beq.n	800c1fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1fe:	bf00      	nop
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	bc80      	pop	{r7}
 800c206:	4770      	bx	lr
 800c208:	20004154 	.word	0x20004154
 800c20c:	2000415c 	.word	0x2000415c

0800c210 <__errno>:
 800c210:	4b01      	ldr	r3, [pc, #4]	; (800c218 <__errno+0x8>)
 800c212:	6818      	ldr	r0, [r3, #0]
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	20000018 	.word	0x20000018

0800c21c <__libc_init_array>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	2600      	movs	r6, #0
 800c220:	4d0c      	ldr	r5, [pc, #48]	; (800c254 <__libc_init_array+0x38>)
 800c222:	4c0d      	ldr	r4, [pc, #52]	; (800c258 <__libc_init_array+0x3c>)
 800c224:	1b64      	subs	r4, r4, r5
 800c226:	10a4      	asrs	r4, r4, #2
 800c228:	42a6      	cmp	r6, r4
 800c22a:	d109      	bne.n	800c240 <__libc_init_array+0x24>
 800c22c:	f000 fd8c 	bl	800cd48 <_init>
 800c230:	2600      	movs	r6, #0
 800c232:	4d0a      	ldr	r5, [pc, #40]	; (800c25c <__libc_init_array+0x40>)
 800c234:	4c0a      	ldr	r4, [pc, #40]	; (800c260 <__libc_init_array+0x44>)
 800c236:	1b64      	subs	r4, r4, r5
 800c238:	10a4      	asrs	r4, r4, #2
 800c23a:	42a6      	cmp	r6, r4
 800c23c:	d105      	bne.n	800c24a <__libc_init_array+0x2e>
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	f855 3b04 	ldr.w	r3, [r5], #4
 800c244:	4798      	blx	r3
 800c246:	3601      	adds	r6, #1
 800c248:	e7ee      	b.n	800c228 <__libc_init_array+0xc>
 800c24a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24e:	4798      	blx	r3
 800c250:	3601      	adds	r6, #1
 800c252:	e7f2      	b.n	800c23a <__libc_init_array+0x1e>
 800c254:	0800d45c 	.word	0x0800d45c
 800c258:	0800d45c 	.word	0x0800d45c
 800c25c:	0800d45c 	.word	0x0800d45c
 800c260:	0800d460 	.word	0x0800d460

0800c264 <__itoa>:
 800c264:	1e93      	subs	r3, r2, #2
 800c266:	2b22      	cmp	r3, #34	; 0x22
 800c268:	b510      	push	{r4, lr}
 800c26a:	460c      	mov	r4, r1
 800c26c:	d904      	bls.n	800c278 <__itoa+0x14>
 800c26e:	2300      	movs	r3, #0
 800c270:	461c      	mov	r4, r3
 800c272:	700b      	strb	r3, [r1, #0]
 800c274:	4620      	mov	r0, r4
 800c276:	bd10      	pop	{r4, pc}
 800c278:	2a0a      	cmp	r2, #10
 800c27a:	d109      	bne.n	800c290 <__itoa+0x2c>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	da07      	bge.n	800c290 <__itoa+0x2c>
 800c280:	232d      	movs	r3, #45	; 0x2d
 800c282:	700b      	strb	r3, [r1, #0]
 800c284:	2101      	movs	r1, #1
 800c286:	4240      	negs	r0, r0
 800c288:	4421      	add	r1, r4
 800c28a:	f000 f975 	bl	800c578 <__utoa>
 800c28e:	e7f1      	b.n	800c274 <__itoa+0x10>
 800c290:	2100      	movs	r1, #0
 800c292:	e7f9      	b.n	800c288 <__itoa+0x24>

0800c294 <itoa>:
 800c294:	f7ff bfe6 	b.w	800c264 <__itoa>

0800c298 <__retarget_lock_acquire_recursive>:
 800c298:	4770      	bx	lr

0800c29a <__retarget_lock_release_recursive>:
 800c29a:	4770      	bx	lr

0800c29c <memcpy>:
 800c29c:	440a      	add	r2, r1
 800c29e:	4291      	cmp	r1, r2
 800c2a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c2a4:	d100      	bne.n	800c2a8 <memcpy+0xc>
 800c2a6:	4770      	bx	lr
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2ae:	4291      	cmp	r1, r2
 800c2b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2b4:	d1f9      	bne.n	800c2aa <memcpy+0xe>
 800c2b6:	bd10      	pop	{r4, pc}

0800c2b8 <memset>:
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	4402      	add	r2, r0
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d100      	bne.n	800c2c2 <memset+0xa>
 800c2c0:	4770      	bx	lr
 800c2c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c2c6:	e7f9      	b.n	800c2bc <memset+0x4>

0800c2c8 <sbrk_aligned>:
 800c2c8:	b570      	push	{r4, r5, r6, lr}
 800c2ca:	4e0e      	ldr	r6, [pc, #56]	; (800c304 <sbrk_aligned+0x3c>)
 800c2cc:	460c      	mov	r4, r1
 800c2ce:	6831      	ldr	r1, [r6, #0]
 800c2d0:	4605      	mov	r5, r0
 800c2d2:	b911      	cbnz	r1, 800c2da <sbrk_aligned+0x12>
 800c2d4:	f000 f8f6 	bl	800c4c4 <_sbrk_r>
 800c2d8:	6030      	str	r0, [r6, #0]
 800c2da:	4621      	mov	r1, r4
 800c2dc:	4628      	mov	r0, r5
 800c2de:	f000 f8f1 	bl	800c4c4 <_sbrk_r>
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	d00a      	beq.n	800c2fc <sbrk_aligned+0x34>
 800c2e6:	1cc4      	adds	r4, r0, #3
 800c2e8:	f024 0403 	bic.w	r4, r4, #3
 800c2ec:	42a0      	cmp	r0, r4
 800c2ee:	d007      	beq.n	800c300 <sbrk_aligned+0x38>
 800c2f0:	1a21      	subs	r1, r4, r0
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	f000 f8e6 	bl	800c4c4 <_sbrk_r>
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	d101      	bne.n	800c300 <sbrk_aligned+0x38>
 800c2fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c300:	4620      	mov	r0, r4
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	20004174 	.word	0x20004174

0800c308 <_malloc_r>:
 800c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30c:	1ccd      	adds	r5, r1, #3
 800c30e:	f025 0503 	bic.w	r5, r5, #3
 800c312:	3508      	adds	r5, #8
 800c314:	2d0c      	cmp	r5, #12
 800c316:	bf38      	it	cc
 800c318:	250c      	movcc	r5, #12
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	4607      	mov	r7, r0
 800c31e:	db01      	blt.n	800c324 <_malloc_r+0x1c>
 800c320:	42a9      	cmp	r1, r5
 800c322:	d905      	bls.n	800c330 <_malloc_r+0x28>
 800c324:	230c      	movs	r3, #12
 800c326:	2600      	movs	r6, #0
 800c328:	603b      	str	r3, [r7, #0]
 800c32a:	4630      	mov	r0, r6
 800c32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c330:	4e2e      	ldr	r6, [pc, #184]	; (800c3ec <_malloc_r+0xe4>)
 800c332:	f000 f963 	bl	800c5fc <__malloc_lock>
 800c336:	6833      	ldr	r3, [r6, #0]
 800c338:	461c      	mov	r4, r3
 800c33a:	bb34      	cbnz	r4, 800c38a <_malloc_r+0x82>
 800c33c:	4629      	mov	r1, r5
 800c33e:	4638      	mov	r0, r7
 800c340:	f7ff ffc2 	bl	800c2c8 <sbrk_aligned>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	4604      	mov	r4, r0
 800c348:	d14d      	bne.n	800c3e6 <_malloc_r+0xde>
 800c34a:	6834      	ldr	r4, [r6, #0]
 800c34c:	4626      	mov	r6, r4
 800c34e:	2e00      	cmp	r6, #0
 800c350:	d140      	bne.n	800c3d4 <_malloc_r+0xcc>
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	4631      	mov	r1, r6
 800c356:	4638      	mov	r0, r7
 800c358:	eb04 0803 	add.w	r8, r4, r3
 800c35c:	f000 f8b2 	bl	800c4c4 <_sbrk_r>
 800c360:	4580      	cmp	r8, r0
 800c362:	d13a      	bne.n	800c3da <_malloc_r+0xd2>
 800c364:	6821      	ldr	r1, [r4, #0]
 800c366:	3503      	adds	r5, #3
 800c368:	1a6d      	subs	r5, r5, r1
 800c36a:	f025 0503 	bic.w	r5, r5, #3
 800c36e:	3508      	adds	r5, #8
 800c370:	2d0c      	cmp	r5, #12
 800c372:	bf38      	it	cc
 800c374:	250c      	movcc	r5, #12
 800c376:	4638      	mov	r0, r7
 800c378:	4629      	mov	r1, r5
 800c37a:	f7ff ffa5 	bl	800c2c8 <sbrk_aligned>
 800c37e:	3001      	adds	r0, #1
 800c380:	d02b      	beq.n	800c3da <_malloc_r+0xd2>
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	442b      	add	r3, r5
 800c386:	6023      	str	r3, [r4, #0]
 800c388:	e00e      	b.n	800c3a8 <_malloc_r+0xa0>
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	1b52      	subs	r2, r2, r5
 800c38e:	d41e      	bmi.n	800c3ce <_malloc_r+0xc6>
 800c390:	2a0b      	cmp	r2, #11
 800c392:	d916      	bls.n	800c3c2 <_malloc_r+0xba>
 800c394:	1961      	adds	r1, r4, r5
 800c396:	42a3      	cmp	r3, r4
 800c398:	6025      	str	r5, [r4, #0]
 800c39a:	bf18      	it	ne
 800c39c:	6059      	strne	r1, [r3, #4]
 800c39e:	6863      	ldr	r3, [r4, #4]
 800c3a0:	bf08      	it	eq
 800c3a2:	6031      	streq	r1, [r6, #0]
 800c3a4:	5162      	str	r2, [r4, r5]
 800c3a6:	604b      	str	r3, [r1, #4]
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	f104 060b 	add.w	r6, r4, #11
 800c3ae:	f000 f92b 	bl	800c608 <__malloc_unlock>
 800c3b2:	f026 0607 	bic.w	r6, r6, #7
 800c3b6:	1d23      	adds	r3, r4, #4
 800c3b8:	1af2      	subs	r2, r6, r3
 800c3ba:	d0b6      	beq.n	800c32a <_malloc_r+0x22>
 800c3bc:	1b9b      	subs	r3, r3, r6
 800c3be:	50a3      	str	r3, [r4, r2]
 800c3c0:	e7b3      	b.n	800c32a <_malloc_r+0x22>
 800c3c2:	6862      	ldr	r2, [r4, #4]
 800c3c4:	42a3      	cmp	r3, r4
 800c3c6:	bf0c      	ite	eq
 800c3c8:	6032      	streq	r2, [r6, #0]
 800c3ca:	605a      	strne	r2, [r3, #4]
 800c3cc:	e7ec      	b.n	800c3a8 <_malloc_r+0xa0>
 800c3ce:	4623      	mov	r3, r4
 800c3d0:	6864      	ldr	r4, [r4, #4]
 800c3d2:	e7b2      	b.n	800c33a <_malloc_r+0x32>
 800c3d4:	4634      	mov	r4, r6
 800c3d6:	6876      	ldr	r6, [r6, #4]
 800c3d8:	e7b9      	b.n	800c34e <_malloc_r+0x46>
 800c3da:	230c      	movs	r3, #12
 800c3dc:	4638      	mov	r0, r7
 800c3de:	603b      	str	r3, [r7, #0]
 800c3e0:	f000 f912 	bl	800c608 <__malloc_unlock>
 800c3e4:	e7a1      	b.n	800c32a <_malloc_r+0x22>
 800c3e6:	6025      	str	r5, [r4, #0]
 800c3e8:	e7de      	b.n	800c3a8 <_malloc_r+0xa0>
 800c3ea:	bf00      	nop
 800c3ec:	20004170 	.word	0x20004170

0800c3f0 <cleanup_glue>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	6809      	ldr	r1, [r1, #0]
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	b109      	cbz	r1, 800c3fe <cleanup_glue+0xe>
 800c3fa:	f7ff fff9 	bl	800c3f0 <cleanup_glue>
 800c3fe:	4621      	mov	r1, r4
 800c400:	4628      	mov	r0, r5
 800c402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c406:	f000 b905 	b.w	800c614 <_free_r>
	...

0800c40c <_reclaim_reent>:
 800c40c:	4b2c      	ldr	r3, [pc, #176]	; (800c4c0 <_reclaim_reent+0xb4>)
 800c40e:	b570      	push	{r4, r5, r6, lr}
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4604      	mov	r4, r0
 800c414:	4283      	cmp	r3, r0
 800c416:	d051      	beq.n	800c4bc <_reclaim_reent+0xb0>
 800c418:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c41a:	b143      	cbz	r3, 800c42e <_reclaim_reent+0x22>
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d14a      	bne.n	800c4b8 <_reclaim_reent+0xac>
 800c422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c424:	6819      	ldr	r1, [r3, #0]
 800c426:	b111      	cbz	r1, 800c42e <_reclaim_reent+0x22>
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 f8f3 	bl	800c614 <_free_r>
 800c42e:	6961      	ldr	r1, [r4, #20]
 800c430:	b111      	cbz	r1, 800c438 <_reclaim_reent+0x2c>
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f8ee 	bl	800c614 <_free_r>
 800c438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c43a:	b111      	cbz	r1, 800c442 <_reclaim_reent+0x36>
 800c43c:	4620      	mov	r0, r4
 800c43e:	f000 f8e9 	bl	800c614 <_free_r>
 800c442:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c444:	b111      	cbz	r1, 800c44c <_reclaim_reent+0x40>
 800c446:	4620      	mov	r0, r4
 800c448:	f000 f8e4 	bl	800c614 <_free_r>
 800c44c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c44e:	b111      	cbz	r1, 800c456 <_reclaim_reent+0x4a>
 800c450:	4620      	mov	r0, r4
 800c452:	f000 f8df 	bl	800c614 <_free_r>
 800c456:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c458:	b111      	cbz	r1, 800c460 <_reclaim_reent+0x54>
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 f8da 	bl	800c614 <_free_r>
 800c460:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c462:	b111      	cbz	r1, 800c46a <_reclaim_reent+0x5e>
 800c464:	4620      	mov	r0, r4
 800c466:	f000 f8d5 	bl	800c614 <_free_r>
 800c46a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c46c:	b111      	cbz	r1, 800c474 <_reclaim_reent+0x68>
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 f8d0 	bl	800c614 <_free_r>
 800c474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c476:	b111      	cbz	r1, 800c47e <_reclaim_reent+0x72>
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 f8cb 	bl	800c614 <_free_r>
 800c47e:	69a3      	ldr	r3, [r4, #24]
 800c480:	b1e3      	cbz	r3, 800c4bc <_reclaim_reent+0xb0>
 800c482:	4620      	mov	r0, r4
 800c484:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c486:	4798      	blx	r3
 800c488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c48a:	b1b9      	cbz	r1, 800c4bc <_reclaim_reent+0xb0>
 800c48c:	4620      	mov	r0, r4
 800c48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c492:	f7ff bfad 	b.w	800c3f0 <cleanup_glue>
 800c496:	5949      	ldr	r1, [r1, r5]
 800c498:	b941      	cbnz	r1, 800c4ac <_reclaim_reent+0xa0>
 800c49a:	3504      	adds	r5, #4
 800c49c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c49e:	2d80      	cmp	r5, #128	; 0x80
 800c4a0:	68d9      	ldr	r1, [r3, #12]
 800c4a2:	d1f8      	bne.n	800c496 <_reclaim_reent+0x8a>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f000 f8b5 	bl	800c614 <_free_r>
 800c4aa:	e7ba      	b.n	800c422 <_reclaim_reent+0x16>
 800c4ac:	680e      	ldr	r6, [r1, #0]
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f000 f8b0 	bl	800c614 <_free_r>
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	e7ef      	b.n	800c498 <_reclaim_reent+0x8c>
 800c4b8:	2500      	movs	r5, #0
 800c4ba:	e7ef      	b.n	800c49c <_reclaim_reent+0x90>
 800c4bc:	bd70      	pop	{r4, r5, r6, pc}
 800c4be:	bf00      	nop
 800c4c0:	20000018 	.word	0x20000018

0800c4c4 <_sbrk_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	4d05      	ldr	r5, [pc, #20]	; (800c4e0 <_sbrk_r+0x1c>)
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	4608      	mov	r0, r1
 800c4ce:	602b      	str	r3, [r5, #0]
 800c4d0:	f7f7 fd82 	bl	8003fd8 <_sbrk>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	d102      	bne.n	800c4de <_sbrk_r+0x1a>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	b103      	cbz	r3, 800c4de <_sbrk_r+0x1a>
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	20004178 	.word	0x20004178

0800c4e4 <siprintf>:
 800c4e4:	b40e      	push	{r1, r2, r3}
 800c4e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4ea:	b500      	push	{lr}
 800c4ec:	b09c      	sub	sp, #112	; 0x70
 800c4ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c4f0:	9002      	str	r0, [sp, #8]
 800c4f2:	9006      	str	r0, [sp, #24]
 800c4f4:	9107      	str	r1, [sp, #28]
 800c4f6:	9104      	str	r1, [sp, #16]
 800c4f8:	4808      	ldr	r0, [pc, #32]	; (800c51c <siprintf+0x38>)
 800c4fa:	4909      	ldr	r1, [pc, #36]	; (800c520 <siprintf+0x3c>)
 800c4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c500:	9105      	str	r1, [sp, #20]
 800c502:	6800      	ldr	r0, [r0, #0]
 800c504:	a902      	add	r1, sp, #8
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	f000 f928 	bl	800c75c <_svfiprintf_r>
 800c50c:	2200      	movs	r2, #0
 800c50e:	9b02      	ldr	r3, [sp, #8]
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	b01c      	add	sp, #112	; 0x70
 800c514:	f85d eb04 	ldr.w	lr, [sp], #4
 800c518:	b003      	add	sp, #12
 800c51a:	4770      	bx	lr
 800c51c:	20000018 	.word	0x20000018
 800c520:	ffff0208 	.word	0xffff0208

0800c524 <strcat>:
 800c524:	4602      	mov	r2, r0
 800c526:	b510      	push	{r4, lr}
 800c528:	7814      	ldrb	r4, [r2, #0]
 800c52a:	4613      	mov	r3, r2
 800c52c:	3201      	adds	r2, #1
 800c52e:	2c00      	cmp	r4, #0
 800c530:	d1fa      	bne.n	800c528 <strcat+0x4>
 800c532:	3b01      	subs	r3, #1
 800c534:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c538:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c53c:	2a00      	cmp	r2, #0
 800c53e:	d1f9      	bne.n	800c534 <strcat+0x10>
 800c540:	bd10      	pop	{r4, pc}

0800c542 <strcpy>:
 800c542:	4603      	mov	r3, r0
 800c544:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c548:	f803 2b01 	strb.w	r2, [r3], #1
 800c54c:	2a00      	cmp	r2, #0
 800c54e:	d1f9      	bne.n	800c544 <strcpy+0x2>
 800c550:	4770      	bx	lr

0800c552 <strncat>:
 800c552:	b530      	push	{r4, r5, lr}
 800c554:	4604      	mov	r4, r0
 800c556:	7825      	ldrb	r5, [r4, #0]
 800c558:	4623      	mov	r3, r4
 800c55a:	3401      	adds	r4, #1
 800c55c:	2d00      	cmp	r5, #0
 800c55e:	d1fa      	bne.n	800c556 <strncat+0x4>
 800c560:	3a01      	subs	r2, #1
 800c562:	d304      	bcc.n	800c56e <strncat+0x1c>
 800c564:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c568:	f803 4b01 	strb.w	r4, [r3], #1
 800c56c:	b904      	cbnz	r4, 800c570 <strncat+0x1e>
 800c56e:	bd30      	pop	{r4, r5, pc}
 800c570:	2a00      	cmp	r2, #0
 800c572:	d1f5      	bne.n	800c560 <strncat+0xe>
 800c574:	701a      	strb	r2, [r3, #0]
 800c576:	e7f3      	b.n	800c560 <strncat+0xe>

0800c578 <__utoa>:
 800c578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57a:	b08b      	sub	sp, #44	; 0x2c
 800c57c:	4605      	mov	r5, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	466e      	mov	r6, sp
 800c582:	4c1d      	ldr	r4, [pc, #116]	; (800c5f8 <__utoa+0x80>)
 800c584:	f104 0c20 	add.w	ip, r4, #32
 800c588:	4637      	mov	r7, r6
 800c58a:	6820      	ldr	r0, [r4, #0]
 800c58c:	6861      	ldr	r1, [r4, #4]
 800c58e:	3408      	adds	r4, #8
 800c590:	c703      	stmia	r7!, {r0, r1}
 800c592:	4564      	cmp	r4, ip
 800c594:	463e      	mov	r6, r7
 800c596:	d1f7      	bne.n	800c588 <__utoa+0x10>
 800c598:	7921      	ldrb	r1, [r4, #4]
 800c59a:	6820      	ldr	r0, [r4, #0]
 800c59c:	7139      	strb	r1, [r7, #4]
 800c59e:	1e91      	subs	r1, r2, #2
 800c5a0:	2922      	cmp	r1, #34	; 0x22
 800c5a2:	6038      	str	r0, [r7, #0]
 800c5a4:	f04f 0100 	mov.w	r1, #0
 800c5a8:	d904      	bls.n	800c5b4 <__utoa+0x3c>
 800c5aa:	7019      	strb	r1, [r3, #0]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	b00b      	add	sp, #44	; 0x2c
 800c5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5b4:	1e58      	subs	r0, r3, #1
 800c5b6:	4684      	mov	ip, r0
 800c5b8:	fbb5 f7f2 	udiv	r7, r5, r2
 800c5bc:	fb02 5617 	mls	r6, r2, r7, r5
 800c5c0:	3628      	adds	r6, #40	; 0x28
 800c5c2:	446e      	add	r6, sp
 800c5c4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c5ce:	462e      	mov	r6, r5
 800c5d0:	42b2      	cmp	r2, r6
 800c5d2:	463d      	mov	r5, r7
 800c5d4:	f101 0101 	add.w	r1, r1, #1
 800c5d8:	d9ee      	bls.n	800c5b8 <__utoa+0x40>
 800c5da:	2200      	movs	r2, #0
 800c5dc:	545a      	strb	r2, [r3, r1]
 800c5de:	1919      	adds	r1, r3, r4
 800c5e0:	1aa5      	subs	r5, r4, r2
 800c5e2:	42aa      	cmp	r2, r5
 800c5e4:	dae3      	bge.n	800c5ae <__utoa+0x36>
 800c5e6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c5ea:	780e      	ldrb	r6, [r1, #0]
 800c5ec:	3201      	adds	r2, #1
 800c5ee:	7006      	strb	r6, [r0, #0]
 800c5f0:	f801 5901 	strb.w	r5, [r1], #-1
 800c5f4:	e7f4      	b.n	800c5e0 <__utoa+0x68>
 800c5f6:	bf00      	nop
 800c5f8:	0800d3fc 	.word	0x0800d3fc

0800c5fc <__malloc_lock>:
 800c5fc:	4801      	ldr	r0, [pc, #4]	; (800c604 <__malloc_lock+0x8>)
 800c5fe:	f7ff be4b 	b.w	800c298 <__retarget_lock_acquire_recursive>
 800c602:	bf00      	nop
 800c604:	2000416c 	.word	0x2000416c

0800c608 <__malloc_unlock>:
 800c608:	4801      	ldr	r0, [pc, #4]	; (800c610 <__malloc_unlock+0x8>)
 800c60a:	f7ff be46 	b.w	800c29a <__retarget_lock_release_recursive>
 800c60e:	bf00      	nop
 800c610:	2000416c 	.word	0x2000416c

0800c614 <_free_r>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	4605      	mov	r5, r0
 800c618:	2900      	cmp	r1, #0
 800c61a:	d040      	beq.n	800c69e <_free_r+0x8a>
 800c61c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c620:	1f0c      	subs	r4, r1, #4
 800c622:	2b00      	cmp	r3, #0
 800c624:	bfb8      	it	lt
 800c626:	18e4      	addlt	r4, r4, r3
 800c628:	f7ff ffe8 	bl	800c5fc <__malloc_lock>
 800c62c:	4a1c      	ldr	r2, [pc, #112]	; (800c6a0 <_free_r+0x8c>)
 800c62e:	6813      	ldr	r3, [r2, #0]
 800c630:	b933      	cbnz	r3, 800c640 <_free_r+0x2c>
 800c632:	6063      	str	r3, [r4, #4]
 800c634:	6014      	str	r4, [r2, #0]
 800c636:	4628      	mov	r0, r5
 800c638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c63c:	f7ff bfe4 	b.w	800c608 <__malloc_unlock>
 800c640:	42a3      	cmp	r3, r4
 800c642:	d908      	bls.n	800c656 <_free_r+0x42>
 800c644:	6820      	ldr	r0, [r4, #0]
 800c646:	1821      	adds	r1, r4, r0
 800c648:	428b      	cmp	r3, r1
 800c64a:	bf01      	itttt	eq
 800c64c:	6819      	ldreq	r1, [r3, #0]
 800c64e:	685b      	ldreq	r3, [r3, #4]
 800c650:	1809      	addeq	r1, r1, r0
 800c652:	6021      	streq	r1, [r4, #0]
 800c654:	e7ed      	b.n	800c632 <_free_r+0x1e>
 800c656:	461a      	mov	r2, r3
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	b10b      	cbz	r3, 800c660 <_free_r+0x4c>
 800c65c:	42a3      	cmp	r3, r4
 800c65e:	d9fa      	bls.n	800c656 <_free_r+0x42>
 800c660:	6811      	ldr	r1, [r2, #0]
 800c662:	1850      	adds	r0, r2, r1
 800c664:	42a0      	cmp	r0, r4
 800c666:	d10b      	bne.n	800c680 <_free_r+0x6c>
 800c668:	6820      	ldr	r0, [r4, #0]
 800c66a:	4401      	add	r1, r0
 800c66c:	1850      	adds	r0, r2, r1
 800c66e:	4283      	cmp	r3, r0
 800c670:	6011      	str	r1, [r2, #0]
 800c672:	d1e0      	bne.n	800c636 <_free_r+0x22>
 800c674:	6818      	ldr	r0, [r3, #0]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	4401      	add	r1, r0
 800c67a:	6011      	str	r1, [r2, #0]
 800c67c:	6053      	str	r3, [r2, #4]
 800c67e:	e7da      	b.n	800c636 <_free_r+0x22>
 800c680:	d902      	bls.n	800c688 <_free_r+0x74>
 800c682:	230c      	movs	r3, #12
 800c684:	602b      	str	r3, [r5, #0]
 800c686:	e7d6      	b.n	800c636 <_free_r+0x22>
 800c688:	6820      	ldr	r0, [r4, #0]
 800c68a:	1821      	adds	r1, r4, r0
 800c68c:	428b      	cmp	r3, r1
 800c68e:	bf01      	itttt	eq
 800c690:	6819      	ldreq	r1, [r3, #0]
 800c692:	685b      	ldreq	r3, [r3, #4]
 800c694:	1809      	addeq	r1, r1, r0
 800c696:	6021      	streq	r1, [r4, #0]
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	6054      	str	r4, [r2, #4]
 800c69c:	e7cb      	b.n	800c636 <_free_r+0x22>
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	20004170 	.word	0x20004170

0800c6a4 <__ssputs_r>:
 800c6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a8:	688e      	ldr	r6, [r1, #8]
 800c6aa:	4682      	mov	sl, r0
 800c6ac:	429e      	cmp	r6, r3
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	4690      	mov	r8, r2
 800c6b2:	461f      	mov	r7, r3
 800c6b4:	d838      	bhi.n	800c728 <__ssputs_r+0x84>
 800c6b6:	898a      	ldrh	r2, [r1, #12]
 800c6b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6bc:	d032      	beq.n	800c724 <__ssputs_r+0x80>
 800c6be:	6825      	ldr	r5, [r4, #0]
 800c6c0:	6909      	ldr	r1, [r1, #16]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	eba5 0901 	sub.w	r9, r5, r1
 800c6c8:	6965      	ldr	r5, [r4, #20]
 800c6ca:	444b      	add	r3, r9
 800c6cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6d4:	106d      	asrs	r5, r5, #1
 800c6d6:	429d      	cmp	r5, r3
 800c6d8:	bf38      	it	cc
 800c6da:	461d      	movcc	r5, r3
 800c6dc:	0553      	lsls	r3, r2, #21
 800c6de:	d531      	bpl.n	800c744 <__ssputs_r+0xa0>
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	f7ff fe11 	bl	800c308 <_malloc_r>
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	b950      	cbnz	r0, 800c700 <__ssputs_r+0x5c>
 800c6ea:	230c      	movs	r3, #12
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6f0:	f8ca 3000 	str.w	r3, [sl]
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6fa:	81a3      	strh	r3, [r4, #12]
 800c6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c700:	464a      	mov	r2, r9
 800c702:	6921      	ldr	r1, [r4, #16]
 800c704:	f7ff fdca 	bl	800c29c <memcpy>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c70e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	6126      	str	r6, [r4, #16]
 800c716:	444e      	add	r6, r9
 800c718:	6026      	str	r6, [r4, #0]
 800c71a:	463e      	mov	r6, r7
 800c71c:	6165      	str	r5, [r4, #20]
 800c71e:	eba5 0509 	sub.w	r5, r5, r9
 800c722:	60a5      	str	r5, [r4, #8]
 800c724:	42be      	cmp	r6, r7
 800c726:	d900      	bls.n	800c72a <__ssputs_r+0x86>
 800c728:	463e      	mov	r6, r7
 800c72a:	4632      	mov	r2, r6
 800c72c:	4641      	mov	r1, r8
 800c72e:	6820      	ldr	r0, [r4, #0]
 800c730:	f000 fab8 	bl	800cca4 <memmove>
 800c734:	68a3      	ldr	r3, [r4, #8]
 800c736:	2000      	movs	r0, #0
 800c738:	1b9b      	subs	r3, r3, r6
 800c73a:	60a3      	str	r3, [r4, #8]
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	4433      	add	r3, r6
 800c740:	6023      	str	r3, [r4, #0]
 800c742:	e7db      	b.n	800c6fc <__ssputs_r+0x58>
 800c744:	462a      	mov	r2, r5
 800c746:	f000 fac7 	bl	800ccd8 <_realloc_r>
 800c74a:	4606      	mov	r6, r0
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1e1      	bne.n	800c714 <__ssputs_r+0x70>
 800c750:	4650      	mov	r0, sl
 800c752:	6921      	ldr	r1, [r4, #16]
 800c754:	f7ff ff5e 	bl	800c614 <_free_r>
 800c758:	e7c7      	b.n	800c6ea <__ssputs_r+0x46>
	...

0800c75c <_svfiprintf_r>:
 800c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	4698      	mov	r8, r3
 800c762:	898b      	ldrh	r3, [r1, #12]
 800c764:	4607      	mov	r7, r0
 800c766:	061b      	lsls	r3, r3, #24
 800c768:	460d      	mov	r5, r1
 800c76a:	4614      	mov	r4, r2
 800c76c:	b09d      	sub	sp, #116	; 0x74
 800c76e:	d50e      	bpl.n	800c78e <_svfiprintf_r+0x32>
 800c770:	690b      	ldr	r3, [r1, #16]
 800c772:	b963      	cbnz	r3, 800c78e <_svfiprintf_r+0x32>
 800c774:	2140      	movs	r1, #64	; 0x40
 800c776:	f7ff fdc7 	bl	800c308 <_malloc_r>
 800c77a:	6028      	str	r0, [r5, #0]
 800c77c:	6128      	str	r0, [r5, #16]
 800c77e:	b920      	cbnz	r0, 800c78a <_svfiprintf_r+0x2e>
 800c780:	230c      	movs	r3, #12
 800c782:	603b      	str	r3, [r7, #0]
 800c784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c788:	e0d1      	b.n	800c92e <_svfiprintf_r+0x1d2>
 800c78a:	2340      	movs	r3, #64	; 0x40
 800c78c:	616b      	str	r3, [r5, #20]
 800c78e:	2300      	movs	r3, #0
 800c790:	9309      	str	r3, [sp, #36]	; 0x24
 800c792:	2320      	movs	r3, #32
 800c794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c798:	2330      	movs	r3, #48	; 0x30
 800c79a:	f04f 0901 	mov.w	r9, #1
 800c79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c948 <_svfiprintf_r+0x1ec>
 800c7a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7aa:	4623      	mov	r3, r4
 800c7ac:	469a      	mov	sl, r3
 800c7ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7b2:	b10a      	cbz	r2, 800c7b8 <_svfiprintf_r+0x5c>
 800c7b4:	2a25      	cmp	r2, #37	; 0x25
 800c7b6:	d1f9      	bne.n	800c7ac <_svfiprintf_r+0x50>
 800c7b8:	ebba 0b04 	subs.w	fp, sl, r4
 800c7bc:	d00b      	beq.n	800c7d6 <_svfiprintf_r+0x7a>
 800c7be:	465b      	mov	r3, fp
 800c7c0:	4622      	mov	r2, r4
 800c7c2:	4629      	mov	r1, r5
 800c7c4:	4638      	mov	r0, r7
 800c7c6:	f7ff ff6d 	bl	800c6a4 <__ssputs_r>
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	f000 80aa 	beq.w	800c924 <_svfiprintf_r+0x1c8>
 800c7d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7d2:	445a      	add	r2, fp
 800c7d4:	9209      	str	r2, [sp, #36]	; 0x24
 800c7d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 80a2 	beq.w	800c924 <_svfiprintf_r+0x1c8>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7ea:	f10a 0a01 	add.w	sl, sl, #1
 800c7ee:	9304      	str	r3, [sp, #16]
 800c7f0:	9307      	str	r3, [sp, #28]
 800c7f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7f6:	931a      	str	r3, [sp, #104]	; 0x68
 800c7f8:	4654      	mov	r4, sl
 800c7fa:	2205      	movs	r2, #5
 800c7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c800:	4851      	ldr	r0, [pc, #324]	; (800c948 <_svfiprintf_r+0x1ec>)
 800c802:	f000 fa41 	bl	800cc88 <memchr>
 800c806:	9a04      	ldr	r2, [sp, #16]
 800c808:	b9d8      	cbnz	r0, 800c842 <_svfiprintf_r+0xe6>
 800c80a:	06d0      	lsls	r0, r2, #27
 800c80c:	bf44      	itt	mi
 800c80e:	2320      	movmi	r3, #32
 800c810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c814:	0711      	lsls	r1, r2, #28
 800c816:	bf44      	itt	mi
 800c818:	232b      	movmi	r3, #43	; 0x2b
 800c81a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c81e:	f89a 3000 	ldrb.w	r3, [sl]
 800c822:	2b2a      	cmp	r3, #42	; 0x2a
 800c824:	d015      	beq.n	800c852 <_svfiprintf_r+0xf6>
 800c826:	4654      	mov	r4, sl
 800c828:	2000      	movs	r0, #0
 800c82a:	f04f 0c0a 	mov.w	ip, #10
 800c82e:	9a07      	ldr	r2, [sp, #28]
 800c830:	4621      	mov	r1, r4
 800c832:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c836:	3b30      	subs	r3, #48	; 0x30
 800c838:	2b09      	cmp	r3, #9
 800c83a:	d94e      	bls.n	800c8da <_svfiprintf_r+0x17e>
 800c83c:	b1b0      	cbz	r0, 800c86c <_svfiprintf_r+0x110>
 800c83e:	9207      	str	r2, [sp, #28]
 800c840:	e014      	b.n	800c86c <_svfiprintf_r+0x110>
 800c842:	eba0 0308 	sub.w	r3, r0, r8
 800c846:	fa09 f303 	lsl.w	r3, r9, r3
 800c84a:	4313      	orrs	r3, r2
 800c84c:	46a2      	mov	sl, r4
 800c84e:	9304      	str	r3, [sp, #16]
 800c850:	e7d2      	b.n	800c7f8 <_svfiprintf_r+0x9c>
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	1d19      	adds	r1, r3, #4
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	9103      	str	r1, [sp, #12]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	bfbb      	ittet	lt
 800c85e:	425b      	neglt	r3, r3
 800c860:	f042 0202 	orrlt.w	r2, r2, #2
 800c864:	9307      	strge	r3, [sp, #28]
 800c866:	9307      	strlt	r3, [sp, #28]
 800c868:	bfb8      	it	lt
 800c86a:	9204      	strlt	r2, [sp, #16]
 800c86c:	7823      	ldrb	r3, [r4, #0]
 800c86e:	2b2e      	cmp	r3, #46	; 0x2e
 800c870:	d10c      	bne.n	800c88c <_svfiprintf_r+0x130>
 800c872:	7863      	ldrb	r3, [r4, #1]
 800c874:	2b2a      	cmp	r3, #42	; 0x2a
 800c876:	d135      	bne.n	800c8e4 <_svfiprintf_r+0x188>
 800c878:	9b03      	ldr	r3, [sp, #12]
 800c87a:	3402      	adds	r4, #2
 800c87c:	1d1a      	adds	r2, r3, #4
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	9203      	str	r2, [sp, #12]
 800c882:	2b00      	cmp	r3, #0
 800c884:	bfb8      	it	lt
 800c886:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c88a:	9305      	str	r3, [sp, #20]
 800c88c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c94c <_svfiprintf_r+0x1f0>
 800c890:	2203      	movs	r2, #3
 800c892:	4650      	mov	r0, sl
 800c894:	7821      	ldrb	r1, [r4, #0]
 800c896:	f000 f9f7 	bl	800cc88 <memchr>
 800c89a:	b140      	cbz	r0, 800c8ae <_svfiprintf_r+0x152>
 800c89c:	2340      	movs	r3, #64	; 0x40
 800c89e:	eba0 000a 	sub.w	r0, r0, sl
 800c8a2:	fa03 f000 	lsl.w	r0, r3, r0
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	3401      	adds	r4, #1
 800c8aa:	4303      	orrs	r3, r0
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b2:	2206      	movs	r2, #6
 800c8b4:	4826      	ldr	r0, [pc, #152]	; (800c950 <_svfiprintf_r+0x1f4>)
 800c8b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8ba:	f000 f9e5 	bl	800cc88 <memchr>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d038      	beq.n	800c934 <_svfiprintf_r+0x1d8>
 800c8c2:	4b24      	ldr	r3, [pc, #144]	; (800c954 <_svfiprintf_r+0x1f8>)
 800c8c4:	bb1b      	cbnz	r3, 800c90e <_svfiprintf_r+0x1b2>
 800c8c6:	9b03      	ldr	r3, [sp, #12]
 800c8c8:	3307      	adds	r3, #7
 800c8ca:	f023 0307 	bic.w	r3, r3, #7
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	9303      	str	r3, [sp, #12]
 800c8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d4:	4433      	add	r3, r6
 800c8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d8:	e767      	b.n	800c7aa <_svfiprintf_r+0x4e>
 800c8da:	460c      	mov	r4, r1
 800c8dc:	2001      	movs	r0, #1
 800c8de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8e2:	e7a5      	b.n	800c830 <_svfiprintf_r+0xd4>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f04f 0c0a 	mov.w	ip, #10
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	3401      	adds	r4, #1
 800c8ee:	9305      	str	r3, [sp, #20]
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8f6:	3a30      	subs	r2, #48	; 0x30
 800c8f8:	2a09      	cmp	r2, #9
 800c8fa:	d903      	bls.n	800c904 <_svfiprintf_r+0x1a8>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0c5      	beq.n	800c88c <_svfiprintf_r+0x130>
 800c900:	9105      	str	r1, [sp, #20]
 800c902:	e7c3      	b.n	800c88c <_svfiprintf_r+0x130>
 800c904:	4604      	mov	r4, r0
 800c906:	2301      	movs	r3, #1
 800c908:	fb0c 2101 	mla	r1, ip, r1, r2
 800c90c:	e7f0      	b.n	800c8f0 <_svfiprintf_r+0x194>
 800c90e:	ab03      	add	r3, sp, #12
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	462a      	mov	r2, r5
 800c914:	4638      	mov	r0, r7
 800c916:	4b10      	ldr	r3, [pc, #64]	; (800c958 <_svfiprintf_r+0x1fc>)
 800c918:	a904      	add	r1, sp, #16
 800c91a:	f3af 8000 	nop.w
 800c91e:	1c42      	adds	r2, r0, #1
 800c920:	4606      	mov	r6, r0
 800c922:	d1d6      	bne.n	800c8d2 <_svfiprintf_r+0x176>
 800c924:	89ab      	ldrh	r3, [r5, #12]
 800c926:	065b      	lsls	r3, r3, #25
 800c928:	f53f af2c 	bmi.w	800c784 <_svfiprintf_r+0x28>
 800c92c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c92e:	b01d      	add	sp, #116	; 0x74
 800c930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c934:	ab03      	add	r3, sp, #12
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	462a      	mov	r2, r5
 800c93a:	4638      	mov	r0, r7
 800c93c:	4b06      	ldr	r3, [pc, #24]	; (800c958 <_svfiprintf_r+0x1fc>)
 800c93e:	a904      	add	r1, sp, #16
 800c940:	f000 f87c 	bl	800ca3c <_printf_i>
 800c944:	e7eb      	b.n	800c91e <_svfiprintf_r+0x1c2>
 800c946:	bf00      	nop
 800c948:	0800d421 	.word	0x0800d421
 800c94c:	0800d427 	.word	0x0800d427
 800c950:	0800d42b 	.word	0x0800d42b
 800c954:	00000000 	.word	0x00000000
 800c958:	0800c6a5 	.word	0x0800c6a5

0800c95c <_printf_common>:
 800c95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c960:	4616      	mov	r6, r2
 800c962:	4699      	mov	r9, r3
 800c964:	688a      	ldr	r2, [r1, #8]
 800c966:	690b      	ldr	r3, [r1, #16]
 800c968:	4607      	mov	r7, r0
 800c96a:	4293      	cmp	r3, r2
 800c96c:	bfb8      	it	lt
 800c96e:	4613      	movlt	r3, r2
 800c970:	6033      	str	r3, [r6, #0]
 800c972:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c976:	460c      	mov	r4, r1
 800c978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c97c:	b10a      	cbz	r2, 800c982 <_printf_common+0x26>
 800c97e:	3301      	adds	r3, #1
 800c980:	6033      	str	r3, [r6, #0]
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	0699      	lsls	r1, r3, #26
 800c986:	bf42      	ittt	mi
 800c988:	6833      	ldrmi	r3, [r6, #0]
 800c98a:	3302      	addmi	r3, #2
 800c98c:	6033      	strmi	r3, [r6, #0]
 800c98e:	6825      	ldr	r5, [r4, #0]
 800c990:	f015 0506 	ands.w	r5, r5, #6
 800c994:	d106      	bne.n	800c9a4 <_printf_common+0x48>
 800c996:	f104 0a19 	add.w	sl, r4, #25
 800c99a:	68e3      	ldr	r3, [r4, #12]
 800c99c:	6832      	ldr	r2, [r6, #0]
 800c99e:	1a9b      	subs	r3, r3, r2
 800c9a0:	42ab      	cmp	r3, r5
 800c9a2:	dc28      	bgt.n	800c9f6 <_printf_common+0x9a>
 800c9a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9a8:	1e13      	subs	r3, r2, #0
 800c9aa:	6822      	ldr	r2, [r4, #0]
 800c9ac:	bf18      	it	ne
 800c9ae:	2301      	movne	r3, #1
 800c9b0:	0692      	lsls	r2, r2, #26
 800c9b2:	d42d      	bmi.n	800ca10 <_printf_common+0xb4>
 800c9b4:	4649      	mov	r1, r9
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9bc:	47c0      	blx	r8
 800c9be:	3001      	adds	r0, #1
 800c9c0:	d020      	beq.n	800ca04 <_printf_common+0xa8>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	68e5      	ldr	r5, [r4, #12]
 800c9c6:	f003 0306 	and.w	r3, r3, #6
 800c9ca:	2b04      	cmp	r3, #4
 800c9cc:	bf18      	it	ne
 800c9ce:	2500      	movne	r5, #0
 800c9d0:	6832      	ldr	r2, [r6, #0]
 800c9d2:	f04f 0600 	mov.w	r6, #0
 800c9d6:	68a3      	ldr	r3, [r4, #8]
 800c9d8:	bf08      	it	eq
 800c9da:	1aad      	subeq	r5, r5, r2
 800c9dc:	6922      	ldr	r2, [r4, #16]
 800c9de:	bf08      	it	eq
 800c9e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	bfc4      	itt	gt
 800c9e8:	1a9b      	subgt	r3, r3, r2
 800c9ea:	18ed      	addgt	r5, r5, r3
 800c9ec:	341a      	adds	r4, #26
 800c9ee:	42b5      	cmp	r5, r6
 800c9f0:	d11a      	bne.n	800ca28 <_printf_common+0xcc>
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	e008      	b.n	800ca08 <_printf_common+0xac>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	4652      	mov	r2, sl
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	47c0      	blx	r8
 800ca00:	3001      	adds	r0, #1
 800ca02:	d103      	bne.n	800ca0c <_printf_common+0xb0>
 800ca04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0c:	3501      	adds	r5, #1
 800ca0e:	e7c4      	b.n	800c99a <_printf_common+0x3e>
 800ca10:	2030      	movs	r0, #48	; 0x30
 800ca12:	18e1      	adds	r1, r4, r3
 800ca14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca18:	1c5a      	adds	r2, r3, #1
 800ca1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca1e:	4422      	add	r2, r4
 800ca20:	3302      	adds	r3, #2
 800ca22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca26:	e7c5      	b.n	800c9b4 <_printf_common+0x58>
 800ca28:	2301      	movs	r3, #1
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	4649      	mov	r1, r9
 800ca2e:	4638      	mov	r0, r7
 800ca30:	47c0      	blx	r8
 800ca32:	3001      	adds	r0, #1
 800ca34:	d0e6      	beq.n	800ca04 <_printf_common+0xa8>
 800ca36:	3601      	adds	r6, #1
 800ca38:	e7d9      	b.n	800c9ee <_printf_common+0x92>
	...

0800ca3c <_printf_i>:
 800ca3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca40:	7e0f      	ldrb	r7, [r1, #24]
 800ca42:	4691      	mov	r9, r2
 800ca44:	2f78      	cmp	r7, #120	; 0x78
 800ca46:	4680      	mov	r8, r0
 800ca48:	460c      	mov	r4, r1
 800ca4a:	469a      	mov	sl, r3
 800ca4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca52:	d807      	bhi.n	800ca64 <_printf_i+0x28>
 800ca54:	2f62      	cmp	r7, #98	; 0x62
 800ca56:	d80a      	bhi.n	800ca6e <_printf_i+0x32>
 800ca58:	2f00      	cmp	r7, #0
 800ca5a:	f000 80d9 	beq.w	800cc10 <_printf_i+0x1d4>
 800ca5e:	2f58      	cmp	r7, #88	; 0x58
 800ca60:	f000 80a4 	beq.w	800cbac <_printf_i+0x170>
 800ca64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca6c:	e03a      	b.n	800cae4 <_printf_i+0xa8>
 800ca6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca72:	2b15      	cmp	r3, #21
 800ca74:	d8f6      	bhi.n	800ca64 <_printf_i+0x28>
 800ca76:	a101      	add	r1, pc, #4	; (adr r1, 800ca7c <_printf_i+0x40>)
 800ca78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca7c:	0800cad5 	.word	0x0800cad5
 800ca80:	0800cae9 	.word	0x0800cae9
 800ca84:	0800ca65 	.word	0x0800ca65
 800ca88:	0800ca65 	.word	0x0800ca65
 800ca8c:	0800ca65 	.word	0x0800ca65
 800ca90:	0800ca65 	.word	0x0800ca65
 800ca94:	0800cae9 	.word	0x0800cae9
 800ca98:	0800ca65 	.word	0x0800ca65
 800ca9c:	0800ca65 	.word	0x0800ca65
 800caa0:	0800ca65 	.word	0x0800ca65
 800caa4:	0800ca65 	.word	0x0800ca65
 800caa8:	0800cbf7 	.word	0x0800cbf7
 800caac:	0800cb19 	.word	0x0800cb19
 800cab0:	0800cbd9 	.word	0x0800cbd9
 800cab4:	0800ca65 	.word	0x0800ca65
 800cab8:	0800ca65 	.word	0x0800ca65
 800cabc:	0800cc19 	.word	0x0800cc19
 800cac0:	0800ca65 	.word	0x0800ca65
 800cac4:	0800cb19 	.word	0x0800cb19
 800cac8:	0800ca65 	.word	0x0800ca65
 800cacc:	0800ca65 	.word	0x0800ca65
 800cad0:	0800cbe1 	.word	0x0800cbe1
 800cad4:	682b      	ldr	r3, [r5, #0]
 800cad6:	1d1a      	adds	r2, r3, #4
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	602a      	str	r2, [r5, #0]
 800cadc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cae4:	2301      	movs	r3, #1
 800cae6:	e0a4      	b.n	800cc32 <_printf_i+0x1f6>
 800cae8:	6820      	ldr	r0, [r4, #0]
 800caea:	6829      	ldr	r1, [r5, #0]
 800caec:	0606      	lsls	r6, r0, #24
 800caee:	f101 0304 	add.w	r3, r1, #4
 800caf2:	d50a      	bpl.n	800cb0a <_printf_i+0xce>
 800caf4:	680e      	ldr	r6, [r1, #0]
 800caf6:	602b      	str	r3, [r5, #0]
 800caf8:	2e00      	cmp	r6, #0
 800cafa:	da03      	bge.n	800cb04 <_printf_i+0xc8>
 800cafc:	232d      	movs	r3, #45	; 0x2d
 800cafe:	4276      	negs	r6, r6
 800cb00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb04:	230a      	movs	r3, #10
 800cb06:	485e      	ldr	r0, [pc, #376]	; (800cc80 <_printf_i+0x244>)
 800cb08:	e019      	b.n	800cb3e <_printf_i+0x102>
 800cb0a:	680e      	ldr	r6, [r1, #0]
 800cb0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	bf18      	it	ne
 800cb14:	b236      	sxthne	r6, r6
 800cb16:	e7ef      	b.n	800caf8 <_printf_i+0xbc>
 800cb18:	682b      	ldr	r3, [r5, #0]
 800cb1a:	6820      	ldr	r0, [r4, #0]
 800cb1c:	1d19      	adds	r1, r3, #4
 800cb1e:	6029      	str	r1, [r5, #0]
 800cb20:	0601      	lsls	r1, r0, #24
 800cb22:	d501      	bpl.n	800cb28 <_printf_i+0xec>
 800cb24:	681e      	ldr	r6, [r3, #0]
 800cb26:	e002      	b.n	800cb2e <_printf_i+0xf2>
 800cb28:	0646      	lsls	r6, r0, #25
 800cb2a:	d5fb      	bpl.n	800cb24 <_printf_i+0xe8>
 800cb2c:	881e      	ldrh	r6, [r3, #0]
 800cb2e:	2f6f      	cmp	r7, #111	; 0x6f
 800cb30:	bf0c      	ite	eq
 800cb32:	2308      	moveq	r3, #8
 800cb34:	230a      	movne	r3, #10
 800cb36:	4852      	ldr	r0, [pc, #328]	; (800cc80 <_printf_i+0x244>)
 800cb38:	2100      	movs	r1, #0
 800cb3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb3e:	6865      	ldr	r5, [r4, #4]
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	bfa8      	it	ge
 800cb44:	6821      	ldrge	r1, [r4, #0]
 800cb46:	60a5      	str	r5, [r4, #8]
 800cb48:	bfa4      	itt	ge
 800cb4a:	f021 0104 	bicge.w	r1, r1, #4
 800cb4e:	6021      	strge	r1, [r4, #0]
 800cb50:	b90e      	cbnz	r6, 800cb56 <_printf_i+0x11a>
 800cb52:	2d00      	cmp	r5, #0
 800cb54:	d04d      	beq.n	800cbf2 <_printf_i+0x1b6>
 800cb56:	4615      	mov	r5, r2
 800cb58:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb5c:	fb03 6711 	mls	r7, r3, r1, r6
 800cb60:	5dc7      	ldrb	r7, [r0, r7]
 800cb62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb66:	4637      	mov	r7, r6
 800cb68:	42bb      	cmp	r3, r7
 800cb6a:	460e      	mov	r6, r1
 800cb6c:	d9f4      	bls.n	800cb58 <_printf_i+0x11c>
 800cb6e:	2b08      	cmp	r3, #8
 800cb70:	d10b      	bne.n	800cb8a <_printf_i+0x14e>
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	07de      	lsls	r6, r3, #31
 800cb76:	d508      	bpl.n	800cb8a <_printf_i+0x14e>
 800cb78:	6923      	ldr	r3, [r4, #16]
 800cb7a:	6861      	ldr	r1, [r4, #4]
 800cb7c:	4299      	cmp	r1, r3
 800cb7e:	bfde      	ittt	le
 800cb80:	2330      	movle	r3, #48	; 0x30
 800cb82:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb86:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cb8a:	1b52      	subs	r2, r2, r5
 800cb8c:	6122      	str	r2, [r4, #16]
 800cb8e:	464b      	mov	r3, r9
 800cb90:	4621      	mov	r1, r4
 800cb92:	4640      	mov	r0, r8
 800cb94:	f8cd a000 	str.w	sl, [sp]
 800cb98:	aa03      	add	r2, sp, #12
 800cb9a:	f7ff fedf 	bl	800c95c <_printf_common>
 800cb9e:	3001      	adds	r0, #1
 800cba0:	d14c      	bne.n	800cc3c <_printf_i+0x200>
 800cba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cba6:	b004      	add	sp, #16
 800cba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbac:	4834      	ldr	r0, [pc, #208]	; (800cc80 <_printf_i+0x244>)
 800cbae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cbb2:	6829      	ldr	r1, [r5, #0]
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbba:	6029      	str	r1, [r5, #0]
 800cbbc:	061d      	lsls	r5, r3, #24
 800cbbe:	d514      	bpl.n	800cbea <_printf_i+0x1ae>
 800cbc0:	07df      	lsls	r7, r3, #31
 800cbc2:	bf44      	itt	mi
 800cbc4:	f043 0320 	orrmi.w	r3, r3, #32
 800cbc8:	6023      	strmi	r3, [r4, #0]
 800cbca:	b91e      	cbnz	r6, 800cbd4 <_printf_i+0x198>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	f023 0320 	bic.w	r3, r3, #32
 800cbd2:	6023      	str	r3, [r4, #0]
 800cbd4:	2310      	movs	r3, #16
 800cbd6:	e7af      	b.n	800cb38 <_printf_i+0xfc>
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	f043 0320 	orr.w	r3, r3, #32
 800cbde:	6023      	str	r3, [r4, #0]
 800cbe0:	2378      	movs	r3, #120	; 0x78
 800cbe2:	4828      	ldr	r0, [pc, #160]	; (800cc84 <_printf_i+0x248>)
 800cbe4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cbe8:	e7e3      	b.n	800cbb2 <_printf_i+0x176>
 800cbea:	0659      	lsls	r1, r3, #25
 800cbec:	bf48      	it	mi
 800cbee:	b2b6      	uxthmi	r6, r6
 800cbf0:	e7e6      	b.n	800cbc0 <_printf_i+0x184>
 800cbf2:	4615      	mov	r5, r2
 800cbf4:	e7bb      	b.n	800cb6e <_printf_i+0x132>
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	6826      	ldr	r6, [r4, #0]
 800cbfa:	1d18      	adds	r0, r3, #4
 800cbfc:	6961      	ldr	r1, [r4, #20]
 800cbfe:	6028      	str	r0, [r5, #0]
 800cc00:	0635      	lsls	r5, r6, #24
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	d501      	bpl.n	800cc0a <_printf_i+0x1ce>
 800cc06:	6019      	str	r1, [r3, #0]
 800cc08:	e002      	b.n	800cc10 <_printf_i+0x1d4>
 800cc0a:	0670      	lsls	r0, r6, #25
 800cc0c:	d5fb      	bpl.n	800cc06 <_printf_i+0x1ca>
 800cc0e:	8019      	strh	r1, [r3, #0]
 800cc10:	2300      	movs	r3, #0
 800cc12:	4615      	mov	r5, r2
 800cc14:	6123      	str	r3, [r4, #16]
 800cc16:	e7ba      	b.n	800cb8e <_printf_i+0x152>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	1d1a      	adds	r2, r3, #4
 800cc1e:	602a      	str	r2, [r5, #0]
 800cc20:	681d      	ldr	r5, [r3, #0]
 800cc22:	6862      	ldr	r2, [r4, #4]
 800cc24:	4628      	mov	r0, r5
 800cc26:	f000 f82f 	bl	800cc88 <memchr>
 800cc2a:	b108      	cbz	r0, 800cc30 <_printf_i+0x1f4>
 800cc2c:	1b40      	subs	r0, r0, r5
 800cc2e:	6060      	str	r0, [r4, #4]
 800cc30:	6863      	ldr	r3, [r4, #4]
 800cc32:	6123      	str	r3, [r4, #16]
 800cc34:	2300      	movs	r3, #0
 800cc36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc3a:	e7a8      	b.n	800cb8e <_printf_i+0x152>
 800cc3c:	462a      	mov	r2, r5
 800cc3e:	4649      	mov	r1, r9
 800cc40:	4640      	mov	r0, r8
 800cc42:	6923      	ldr	r3, [r4, #16]
 800cc44:	47d0      	blx	sl
 800cc46:	3001      	adds	r0, #1
 800cc48:	d0ab      	beq.n	800cba2 <_printf_i+0x166>
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	079b      	lsls	r3, r3, #30
 800cc4e:	d413      	bmi.n	800cc78 <_printf_i+0x23c>
 800cc50:	68e0      	ldr	r0, [r4, #12]
 800cc52:	9b03      	ldr	r3, [sp, #12]
 800cc54:	4298      	cmp	r0, r3
 800cc56:	bfb8      	it	lt
 800cc58:	4618      	movlt	r0, r3
 800cc5a:	e7a4      	b.n	800cba6 <_printf_i+0x16a>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	4632      	mov	r2, r6
 800cc60:	4649      	mov	r1, r9
 800cc62:	4640      	mov	r0, r8
 800cc64:	47d0      	blx	sl
 800cc66:	3001      	adds	r0, #1
 800cc68:	d09b      	beq.n	800cba2 <_printf_i+0x166>
 800cc6a:	3501      	adds	r5, #1
 800cc6c:	68e3      	ldr	r3, [r4, #12]
 800cc6e:	9903      	ldr	r1, [sp, #12]
 800cc70:	1a5b      	subs	r3, r3, r1
 800cc72:	42ab      	cmp	r3, r5
 800cc74:	dcf2      	bgt.n	800cc5c <_printf_i+0x220>
 800cc76:	e7eb      	b.n	800cc50 <_printf_i+0x214>
 800cc78:	2500      	movs	r5, #0
 800cc7a:	f104 0619 	add.w	r6, r4, #25
 800cc7e:	e7f5      	b.n	800cc6c <_printf_i+0x230>
 800cc80:	0800d432 	.word	0x0800d432
 800cc84:	0800d443 	.word	0x0800d443

0800cc88 <memchr>:
 800cc88:	4603      	mov	r3, r0
 800cc8a:	b510      	push	{r4, lr}
 800cc8c:	b2c9      	uxtb	r1, r1
 800cc8e:	4402      	add	r2, r0
 800cc90:	4293      	cmp	r3, r2
 800cc92:	4618      	mov	r0, r3
 800cc94:	d101      	bne.n	800cc9a <memchr+0x12>
 800cc96:	2000      	movs	r0, #0
 800cc98:	e003      	b.n	800cca2 <memchr+0x1a>
 800cc9a:	7804      	ldrb	r4, [r0, #0]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	428c      	cmp	r4, r1
 800cca0:	d1f6      	bne.n	800cc90 <memchr+0x8>
 800cca2:	bd10      	pop	{r4, pc}

0800cca4 <memmove>:
 800cca4:	4288      	cmp	r0, r1
 800cca6:	b510      	push	{r4, lr}
 800cca8:	eb01 0402 	add.w	r4, r1, r2
 800ccac:	d902      	bls.n	800ccb4 <memmove+0x10>
 800ccae:	4284      	cmp	r4, r0
 800ccb0:	4623      	mov	r3, r4
 800ccb2:	d807      	bhi.n	800ccc4 <memmove+0x20>
 800ccb4:	1e43      	subs	r3, r0, #1
 800ccb6:	42a1      	cmp	r1, r4
 800ccb8:	d008      	beq.n	800cccc <memmove+0x28>
 800ccba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccc2:	e7f8      	b.n	800ccb6 <memmove+0x12>
 800ccc4:	4601      	mov	r1, r0
 800ccc6:	4402      	add	r2, r0
 800ccc8:	428a      	cmp	r2, r1
 800ccca:	d100      	bne.n	800ccce <memmove+0x2a>
 800cccc:	bd10      	pop	{r4, pc}
 800ccce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccd6:	e7f7      	b.n	800ccc8 <memmove+0x24>

0800ccd8 <_realloc_r>:
 800ccd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccdc:	4680      	mov	r8, r0
 800ccde:	4614      	mov	r4, r2
 800cce0:	460e      	mov	r6, r1
 800cce2:	b921      	cbnz	r1, 800ccee <_realloc_r+0x16>
 800cce4:	4611      	mov	r1, r2
 800cce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccea:	f7ff bb0d 	b.w	800c308 <_malloc_r>
 800ccee:	b92a      	cbnz	r2, 800ccfc <_realloc_r+0x24>
 800ccf0:	f7ff fc90 	bl	800c614 <_free_r>
 800ccf4:	4625      	mov	r5, r4
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccfc:	f000 f81b 	bl	800cd36 <_malloc_usable_size_r>
 800cd00:	4284      	cmp	r4, r0
 800cd02:	4607      	mov	r7, r0
 800cd04:	d802      	bhi.n	800cd0c <_realloc_r+0x34>
 800cd06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd0a:	d812      	bhi.n	800cd32 <_realloc_r+0x5a>
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	4640      	mov	r0, r8
 800cd10:	f7ff fafa 	bl	800c308 <_malloc_r>
 800cd14:	4605      	mov	r5, r0
 800cd16:	2800      	cmp	r0, #0
 800cd18:	d0ed      	beq.n	800ccf6 <_realloc_r+0x1e>
 800cd1a:	42bc      	cmp	r4, r7
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	4631      	mov	r1, r6
 800cd20:	bf28      	it	cs
 800cd22:	463a      	movcs	r2, r7
 800cd24:	f7ff faba 	bl	800c29c <memcpy>
 800cd28:	4631      	mov	r1, r6
 800cd2a:	4640      	mov	r0, r8
 800cd2c:	f7ff fc72 	bl	800c614 <_free_r>
 800cd30:	e7e1      	b.n	800ccf6 <_realloc_r+0x1e>
 800cd32:	4635      	mov	r5, r6
 800cd34:	e7df      	b.n	800ccf6 <_realloc_r+0x1e>

0800cd36 <_malloc_usable_size_r>:
 800cd36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd3a:	1f18      	subs	r0, r3, #4
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	bfbc      	itt	lt
 800cd40:	580b      	ldrlt	r3, [r1, r0]
 800cd42:	18c0      	addlt	r0, r0, r3
 800cd44:	4770      	bx	lr
	...

0800cd48 <_init>:
 800cd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4a:	bf00      	nop
 800cd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4e:	bc08      	pop	{r3}
 800cd50:	469e      	mov	lr, r3
 800cd52:	4770      	bx	lr

0800cd54 <_fini>:
 800cd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd56:	bf00      	nop
 800cd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd5a:	bc08      	pop	{r3}
 800cd5c:	469e      	mov	lr, r3
 800cd5e:	4770      	bx	lr
