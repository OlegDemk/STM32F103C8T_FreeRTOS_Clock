
stm32f103c8t_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080052d0  080052d0  000152d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f8  080052f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005300  08005300  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000010  08005318  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08005318  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b198  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de4  00000000  00000000  0002b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000232d  00000000  00000000  0002e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc37  00000000  00000000  00030725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d6e  00000000  00000000  0003d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c10ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba4  00000000  00000000  000c111c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080052b8 	.word	0x080052b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080052b8 	.word	0x080052b8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_ldivmod>:
 8000608:	b97b      	cbnz	r3, 800062a <__aeabi_ldivmod+0x22>
 800060a:	b972      	cbnz	r2, 800062a <__aeabi_ldivmod+0x22>
 800060c:	2900      	cmp	r1, #0
 800060e:	bfbe      	ittt	lt
 8000610:	2000      	movlt	r0, #0
 8000612:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000616:	e006      	blt.n	8000626 <__aeabi_ldivmod+0x1e>
 8000618:	bf08      	it	eq
 800061a:	2800      	cmpeq	r0, #0
 800061c:	bf1c      	itt	ne
 800061e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000622:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000626:	f000 b9a9 	b.w	800097c <__aeabi_idiv0>
 800062a:	f1ad 0c08 	sub.w	ip, sp, #8
 800062e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000632:	2900      	cmp	r1, #0
 8000634:	db09      	blt.n	800064a <__aeabi_ldivmod+0x42>
 8000636:	2b00      	cmp	r3, #0
 8000638:	db1a      	blt.n	8000670 <__aeabi_ldivmod+0x68>
 800063a:	f000 f835 	bl	80006a8 <__udivmoddi4>
 800063e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000646:	b004      	add	sp, #16
 8000648:	4770      	bx	lr
 800064a:	4240      	negs	r0, r0
 800064c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	db1b      	blt.n	800068c <__aeabi_ldivmod+0x84>
 8000654:	f000 f828 	bl	80006a8 <__udivmoddi4>
 8000658:	f8dd e004 	ldr.w	lr, [sp, #4]
 800065c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000660:	b004      	add	sp, #16
 8000662:	4240      	negs	r0, r0
 8000664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000668:	4252      	negs	r2, r2
 800066a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800066e:	4770      	bx	lr
 8000670:	4252      	negs	r2, r2
 8000672:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000676:	f000 f817 	bl	80006a8 <__udivmoddi4>
 800067a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000682:	b004      	add	sp, #16
 8000684:	4240      	negs	r0, r0
 8000686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068a:	4770      	bx	lr
 800068c:	4252      	negs	r2, r2
 800068e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000692:	f000 f809 	bl	80006a8 <__udivmoddi4>
 8000696:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800069e:	b004      	add	sp, #16
 80006a0:	4252      	negs	r2, r2
 80006a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a6:	4770      	bx	lr

080006a8 <__udivmoddi4>:
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	9e08      	ldr	r6, [sp, #32]
 80006ae:	460d      	mov	r5, r1
 80006b0:	4604      	mov	r4, r0
 80006b2:	4688      	mov	r8, r1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d14d      	bne.n	8000754 <__udivmoddi4+0xac>
 80006b8:	428a      	cmp	r2, r1
 80006ba:	4694      	mov	ip, r2
 80006bc:	d968      	bls.n	8000790 <__udivmoddi4+0xe8>
 80006be:	fab2 f282 	clz	r2, r2
 80006c2:	b152      	cbz	r2, 80006da <__udivmoddi4+0x32>
 80006c4:	fa01 f302 	lsl.w	r3, r1, r2
 80006c8:	f1c2 0120 	rsb	r1, r2, #32
 80006cc:	fa20 f101 	lsr.w	r1, r0, r1
 80006d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80006d4:	ea41 0803 	orr.w	r8, r1, r3
 80006d8:	4094      	lsls	r4, r2
 80006da:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80006de:	fbb8 f7f1 	udiv	r7, r8, r1
 80006e2:	fa1f fe8c 	uxth.w	lr, ip
 80006e6:	fb01 8817 	mls	r8, r1, r7, r8
 80006ea:	fb07 f00e 	mul.w	r0, r7, lr
 80006ee:	0c23      	lsrs	r3, r4, #16
 80006f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006f4:	4298      	cmp	r0, r3
 80006f6:	d90a      	bls.n	800070e <__udivmoddi4+0x66>
 80006f8:	eb1c 0303 	adds.w	r3, ip, r3
 80006fc:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000700:	f080 811e 	bcs.w	8000940 <__udivmoddi4+0x298>
 8000704:	4298      	cmp	r0, r3
 8000706:	f240 811b 	bls.w	8000940 <__udivmoddi4+0x298>
 800070a:	3f02      	subs	r7, #2
 800070c:	4463      	add	r3, ip
 800070e:	1a1b      	subs	r3, r3, r0
 8000710:	fbb3 f0f1 	udiv	r0, r3, r1
 8000714:	fb01 3310 	mls	r3, r1, r0, r3
 8000718:	fb00 fe0e 	mul.w	lr, r0, lr
 800071c:	b2a4      	uxth	r4, r4
 800071e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000722:	45a6      	cmp	lr, r4
 8000724:	d90a      	bls.n	800073c <__udivmoddi4+0x94>
 8000726:	eb1c 0404 	adds.w	r4, ip, r4
 800072a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800072e:	f080 8109 	bcs.w	8000944 <__udivmoddi4+0x29c>
 8000732:	45a6      	cmp	lr, r4
 8000734:	f240 8106 	bls.w	8000944 <__udivmoddi4+0x29c>
 8000738:	4464      	add	r4, ip
 800073a:	3802      	subs	r0, #2
 800073c:	2100      	movs	r1, #0
 800073e:	eba4 040e 	sub.w	r4, r4, lr
 8000742:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000746:	b11e      	cbz	r6, 8000750 <__udivmoddi4+0xa8>
 8000748:	2300      	movs	r3, #0
 800074a:	40d4      	lsrs	r4, r2
 800074c:	e9c6 4300 	strd	r4, r3, [r6]
 8000750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000754:	428b      	cmp	r3, r1
 8000756:	d908      	bls.n	800076a <__udivmoddi4+0xc2>
 8000758:	2e00      	cmp	r6, #0
 800075a:	f000 80ee 	beq.w	800093a <__udivmoddi4+0x292>
 800075e:	2100      	movs	r1, #0
 8000760:	e9c6 0500 	strd	r0, r5, [r6]
 8000764:	4608      	mov	r0, r1
 8000766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076a:	fab3 f183 	clz	r1, r3
 800076e:	2900      	cmp	r1, #0
 8000770:	d14a      	bne.n	8000808 <__udivmoddi4+0x160>
 8000772:	42ab      	cmp	r3, r5
 8000774:	d302      	bcc.n	800077c <__udivmoddi4+0xd4>
 8000776:	4282      	cmp	r2, r0
 8000778:	f200 80fc 	bhi.w	8000974 <__udivmoddi4+0x2cc>
 800077c:	1a84      	subs	r4, r0, r2
 800077e:	eb65 0303 	sbc.w	r3, r5, r3
 8000782:	2001      	movs	r0, #1
 8000784:	4698      	mov	r8, r3
 8000786:	2e00      	cmp	r6, #0
 8000788:	d0e2      	beq.n	8000750 <__udivmoddi4+0xa8>
 800078a:	e9c6 4800 	strd	r4, r8, [r6]
 800078e:	e7df      	b.n	8000750 <__udivmoddi4+0xa8>
 8000790:	b902      	cbnz	r2, 8000794 <__udivmoddi4+0xec>
 8000792:	deff      	udf	#255	; 0xff
 8000794:	fab2 f282 	clz	r2, r2
 8000798:	2a00      	cmp	r2, #0
 800079a:	f040 8091 	bne.w	80008c0 <__udivmoddi4+0x218>
 800079e:	eba1 000c 	sub.w	r0, r1, ip
 80007a2:	2101      	movs	r1, #1
 80007a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007a8:	fa1f fe8c 	uxth.w	lr, ip
 80007ac:	fbb0 f3f7 	udiv	r3, r0, r7
 80007b0:	fb07 0013 	mls	r0, r7, r3, r0
 80007b4:	0c25      	lsrs	r5, r4, #16
 80007b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80007ba:	fb0e f003 	mul.w	r0, lr, r3
 80007be:	42a8      	cmp	r0, r5
 80007c0:	d908      	bls.n	80007d4 <__udivmoddi4+0x12c>
 80007c2:	eb1c 0505 	adds.w	r5, ip, r5
 80007c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x12a>
 80007cc:	42a8      	cmp	r0, r5
 80007ce:	f200 80ce 	bhi.w	800096e <__udivmoddi4+0x2c6>
 80007d2:	4643      	mov	r3, r8
 80007d4:	1a2d      	subs	r5, r5, r0
 80007d6:	fbb5 f0f7 	udiv	r0, r5, r7
 80007da:	fb07 5510 	mls	r5, r7, r0, r5
 80007de:	fb0e fe00 	mul.w	lr, lr, r0
 80007e2:	b2a4      	uxth	r4, r4
 80007e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007e8:	45a6      	cmp	lr, r4
 80007ea:	d908      	bls.n	80007fe <__udivmoddi4+0x156>
 80007ec:	eb1c 0404 	adds.w	r4, ip, r4
 80007f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80007f4:	d202      	bcs.n	80007fc <__udivmoddi4+0x154>
 80007f6:	45a6      	cmp	lr, r4
 80007f8:	f200 80b6 	bhi.w	8000968 <__udivmoddi4+0x2c0>
 80007fc:	4628      	mov	r0, r5
 80007fe:	eba4 040e 	sub.w	r4, r4, lr
 8000802:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000806:	e79e      	b.n	8000746 <__udivmoddi4+0x9e>
 8000808:	f1c1 0720 	rsb	r7, r1, #32
 800080c:	408b      	lsls	r3, r1
 800080e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000812:	ea4c 0c03 	orr.w	ip, ip, r3
 8000816:	fa25 fa07 	lsr.w	sl, r5, r7
 800081a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800081e:	fbba f8f9 	udiv	r8, sl, r9
 8000822:	fa20 f307 	lsr.w	r3, r0, r7
 8000826:	fb09 aa18 	mls	sl, r9, r8, sl
 800082a:	408d      	lsls	r5, r1
 800082c:	fa1f fe8c 	uxth.w	lr, ip
 8000830:	431d      	orrs	r5, r3
 8000832:	fa00 f301 	lsl.w	r3, r0, r1
 8000836:	fb08 f00e 	mul.w	r0, r8, lr
 800083a:	0c2c      	lsrs	r4, r5, #16
 800083c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000840:	42a0      	cmp	r0, r4
 8000842:	fa02 f201 	lsl.w	r2, r2, r1
 8000846:	d90b      	bls.n	8000860 <__udivmoddi4+0x1b8>
 8000848:	eb1c 0404 	adds.w	r4, ip, r4
 800084c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000850:	f080 8088 	bcs.w	8000964 <__udivmoddi4+0x2bc>
 8000854:	42a0      	cmp	r0, r4
 8000856:	f240 8085 	bls.w	8000964 <__udivmoddi4+0x2bc>
 800085a:	f1a8 0802 	sub.w	r8, r8, #2
 800085e:	4464      	add	r4, ip
 8000860:	1a24      	subs	r4, r4, r0
 8000862:	fbb4 f0f9 	udiv	r0, r4, r9
 8000866:	fb09 4410 	mls	r4, r9, r0, r4
 800086a:	fb00 fe0e 	mul.w	lr, r0, lr
 800086e:	b2ad      	uxth	r5, r5
 8000870:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000874:	45a6      	cmp	lr, r4
 8000876:	d908      	bls.n	800088a <__udivmoddi4+0x1e2>
 8000878:	eb1c 0404 	adds.w	r4, ip, r4
 800087c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000880:	d26c      	bcs.n	800095c <__udivmoddi4+0x2b4>
 8000882:	45a6      	cmp	lr, r4
 8000884:	d96a      	bls.n	800095c <__udivmoddi4+0x2b4>
 8000886:	3802      	subs	r0, #2
 8000888:	4464      	add	r4, ip
 800088a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800088e:	fba0 9502 	umull	r9, r5, r0, r2
 8000892:	eba4 040e 	sub.w	r4, r4, lr
 8000896:	42ac      	cmp	r4, r5
 8000898:	46c8      	mov	r8, r9
 800089a:	46ae      	mov	lr, r5
 800089c:	d356      	bcc.n	800094c <__udivmoddi4+0x2a4>
 800089e:	d053      	beq.n	8000948 <__udivmoddi4+0x2a0>
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d069      	beq.n	8000978 <__udivmoddi4+0x2d0>
 80008a4:	ebb3 0208 	subs.w	r2, r3, r8
 80008a8:	eb64 040e 	sbc.w	r4, r4, lr
 80008ac:	fa22 f301 	lsr.w	r3, r2, r1
 80008b0:	fa04 f707 	lsl.w	r7, r4, r7
 80008b4:	431f      	orrs	r7, r3
 80008b6:	40cc      	lsrs	r4, r1
 80008b8:	e9c6 7400 	strd	r7, r4, [r6]
 80008bc:	2100      	movs	r1, #0
 80008be:	e747      	b.n	8000750 <__udivmoddi4+0xa8>
 80008c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c4:	f1c2 0120 	rsb	r1, r2, #32
 80008c8:	fa25 f301 	lsr.w	r3, r5, r1
 80008cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d0:	fa20 f101 	lsr.w	r1, r0, r1
 80008d4:	4095      	lsls	r5, r2
 80008d6:	430d      	orrs	r5, r1
 80008d8:	fbb3 f1f7 	udiv	r1, r3, r7
 80008dc:	fb07 3311 	mls	r3, r7, r1, r3
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	0c28      	lsrs	r0, r5, #16
 80008e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008ea:	fb01 f30e 	mul.w	r3, r1, lr
 80008ee:	4283      	cmp	r3, r0
 80008f0:	fa04 f402 	lsl.w	r4, r4, r2
 80008f4:	d908      	bls.n	8000908 <__udivmoddi4+0x260>
 80008f6:	eb1c 0000 	adds.w	r0, ip, r0
 80008fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80008fe:	d22f      	bcs.n	8000960 <__udivmoddi4+0x2b8>
 8000900:	4283      	cmp	r3, r0
 8000902:	d92d      	bls.n	8000960 <__udivmoddi4+0x2b8>
 8000904:	3902      	subs	r1, #2
 8000906:	4460      	add	r0, ip
 8000908:	1ac0      	subs	r0, r0, r3
 800090a:	fbb0 f3f7 	udiv	r3, r0, r7
 800090e:	fb07 0013 	mls	r0, r7, r3, r0
 8000912:	b2ad      	uxth	r5, r5
 8000914:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000918:	fb03 f00e 	mul.w	r0, r3, lr
 800091c:	42a8      	cmp	r0, r5
 800091e:	d908      	bls.n	8000932 <__udivmoddi4+0x28a>
 8000920:	eb1c 0505 	adds.w	r5, ip, r5
 8000924:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000928:	d216      	bcs.n	8000958 <__udivmoddi4+0x2b0>
 800092a:	42a8      	cmp	r0, r5
 800092c:	d914      	bls.n	8000958 <__udivmoddi4+0x2b0>
 800092e:	3b02      	subs	r3, #2
 8000930:	4465      	add	r5, ip
 8000932:	1a28      	subs	r0, r5, r0
 8000934:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000938:	e738      	b.n	80007ac <__udivmoddi4+0x104>
 800093a:	4631      	mov	r1, r6
 800093c:	4630      	mov	r0, r6
 800093e:	e707      	b.n	8000750 <__udivmoddi4+0xa8>
 8000940:	462f      	mov	r7, r5
 8000942:	e6e4      	b.n	800070e <__udivmoddi4+0x66>
 8000944:	4618      	mov	r0, r3
 8000946:	e6f9      	b.n	800073c <__udivmoddi4+0x94>
 8000948:	454b      	cmp	r3, r9
 800094a:	d2a9      	bcs.n	80008a0 <__udivmoddi4+0x1f8>
 800094c:	ebb9 0802 	subs.w	r8, r9, r2
 8000950:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000954:	3801      	subs	r0, #1
 8000956:	e7a3      	b.n	80008a0 <__udivmoddi4+0x1f8>
 8000958:	4643      	mov	r3, r8
 800095a:	e7ea      	b.n	8000932 <__udivmoddi4+0x28a>
 800095c:	4628      	mov	r0, r5
 800095e:	e794      	b.n	800088a <__udivmoddi4+0x1e2>
 8000960:	4641      	mov	r1, r8
 8000962:	e7d1      	b.n	8000908 <__udivmoddi4+0x260>
 8000964:	46d0      	mov	r8, sl
 8000966:	e77b      	b.n	8000860 <__udivmoddi4+0x1b8>
 8000968:	4464      	add	r4, ip
 800096a:	3802      	subs	r0, #2
 800096c:	e747      	b.n	80007fe <__udivmoddi4+0x156>
 800096e:	3b02      	subs	r3, #2
 8000970:	4465      	add	r5, ip
 8000972:	e72f      	b.n	80007d4 <__udivmoddi4+0x12c>
 8000974:	4608      	mov	r0, r1
 8000976:	e706      	b.n	8000786 <__udivmoddi4+0xde>
 8000978:	4631      	mov	r1, r6
 800097a:	e6e9      	b.n	8000750 <__udivmoddi4+0xa8>

0800097c <__aeabi_idiv0>:
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
//MX_SPI1_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098a:	4802      	ldr	r0, [pc, #8]	; (8000994 <ILI9341_SPI_Init+0x14>)
 800098c:	f002 f818 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010c00 	.word	0x40010c00

08000998 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(&hspi1, &SPI_Data, 1, 1);
 80009a2:	1df9      	adds	r1, r7, #7
 80009a4:	2301      	movs	r3, #1
 80009a6:	2201      	movs	r2, #1
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <ILI9341_SPI_Send+0x20>)
 80009aa:	f004 f973 	bl	8004c94 <HAL_SPI_Transmit>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000c4 	.word	0x200000c4

080009bc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <ILI9341_Write_Command+0x40>)
 80009ce:	f001 fff7 	bl	80029c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <ILI9341_Write_Command+0x44>)
 80009da:	f001 fff1 	bl	80029c0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffd9 	bl	8000998 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <ILI9341_Write_Command+0x40>)
 80009ee:	f001 ffe7 	bl	80029c0 <HAL_GPIO_WritePin>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	40010800 	.word	0x40010800

08000a04 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <ILI9341_Write_Data+0x40>)
 8000a16:	f001 ffd3 	bl	80029c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <ILI9341_Write_Data+0x44>)
 8000a22:	f001 ffcd 	bl	80029c0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ffb5 	bl	8000998 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <ILI9341_Write_Data+0x44>)
 8000a36:	f001 ffc3 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00

08000a4c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4604      	mov	r4, r0
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4623      	mov	r3, r4
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	807b      	strh	r3, [r7, #2]
 8000a66:	4613      	mov	r3, r2
 8000a68:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000a6a:	202a      	movs	r0, #42	; 0x2a
 8000a6c:	f7ff ffa6 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffc3 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ffbe 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffb7 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffb2 	bl	8000a04 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000aa0:	202b      	movs	r0, #43	; 0x2b
 8000aa2:	f7ff ff8b 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ffa8 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000ab4:	88bb      	ldrh	r3, [r7, #4]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffa3 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000abe:	883b      	ldrh	r3, [r7, #0]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff9c 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000acc:	883b      	ldrh	r3, [r7, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff97 	bl	8000a04 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000ad6:	202c      	movs	r0, #44	; 0x2c
 8000ad8:	f7ff ff70 	bl	80009bc <ILI9341_Write_Command>
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd90      	pop	{r4, r7, pc}

08000ae4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <ILI9341_Reset+0x38>)
 8000af0:	f001 ff66 	bl	80029c0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000af4:	20c8      	movs	r0, #200	; 0xc8
 8000af6:	f001 fc37 	bl	8002368 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <ILI9341_Reset+0x3c>)
 8000b02:	f001 ff5d 	bl	80029c0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b06:	20c8      	movs	r0, #200	; 0xc8
 8000b08:	f001 fc2e 	bl	8002368 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b12:	4802      	ldr	r0, [pc, #8]	; (8000b1c <ILI9341_Reset+0x38>)
 8000b14:	f001 ff54 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00

08000b24 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000b32:	2036      	movs	r0, #54	; 0x36
 8000b34:	f7ff ff42 	bl	80009bc <ILI9341_Write_Command>
HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f001 fc15 	bl	8002368 <HAL_Delay>
	
switch(screen_rotation) 
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d837      	bhi.n	8000bb4 <ILI9341_Set_Rotation+0x90>
 8000b44:	a201      	add	r2, pc, #4	; (adr r2, 8000b4c <ILI9341_Set_Rotation+0x28>)
 8000b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4a:	bf00      	nop
 8000b4c:	08000b5d 	.word	0x08000b5d
 8000b50:	08000b73 	.word	0x08000b73
 8000b54:	08000b89 	.word	0x08000b89
 8000b58:	08000b9f 	.word	0x08000b9f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000b5c:	2048      	movs	r0, #72	; 0x48
 8000b5e:	f7ff ff51 	bl	8000a04 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <ILI9341_Set_Rotation+0x9c>)
 8000b64:	22f0      	movs	r2, #240	; 0xf0
 8000b66:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <ILI9341_Set_Rotation+0xa0>)
 8000b6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b6e:	801a      	strh	r2, [r3, #0]
			break;
 8000b70:	e021      	b.n	8000bb6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000b72:	2028      	movs	r0, #40	; 0x28
 8000b74:	f7ff ff46 	bl	8000a04 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <ILI9341_Set_Rotation+0x9c>)
 8000b7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b7e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <ILI9341_Set_Rotation+0xa0>)
 8000b82:	22f0      	movs	r2, #240	; 0xf0
 8000b84:	801a      	strh	r2, [r3, #0]
			break;
 8000b86:	e016      	b.n	8000bb6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000b88:	2088      	movs	r0, #136	; 0x88
 8000b8a:	f7ff ff3b 	bl	8000a04 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <ILI9341_Set_Rotation+0x9c>)
 8000b90:	22f0      	movs	r2, #240	; 0xf0
 8000b92:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <ILI9341_Set_Rotation+0xa0>)
 8000b96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b9a:	801a      	strh	r2, [r3, #0]
			break;
 8000b9c:	e00b      	b.n	8000bb6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000b9e:	20e8      	movs	r0, #232	; 0xe8
 8000ba0:	f7ff ff30 	bl	8000a04 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <ILI9341_Set_Rotation+0x9c>)
 8000ba6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000baa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <ILI9341_Set_Rotation+0xa0>)
 8000bae:	22f0      	movs	r2, #240	; 0xf0
 8000bb0:	801a      	strh	r2, [r3, #0]
			break;
 8000bb2:	e000      	b.n	8000bb6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000bb4:	bf00      	nop
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000002 	.word	0x20000002
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <ILI9341_Enable+0x14>)
 8000bd4:	f001 fef4 	bl	80029c0 <HAL_GPIO_WritePin>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010800 	.word	0x40010800

08000be0 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000be4:	f7ff fff0 	bl	8000bc8 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000be8:	f7ff feca 	bl	8000980 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000bec:	f7ff ff7a 	bl	8000ae4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f7ff fee3 	bl	80009bc <ILI9341_Write_Command>
HAL_Delay(1000);
 8000bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bfa:	f001 fbb5 	bl	8002368 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000bfe:	20cb      	movs	r0, #203	; 0xcb
 8000c00:	f7ff fedc 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000c04:	2039      	movs	r0, #57	; 0x39
 8000c06:	f7ff fefd 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000c0a:	202c      	movs	r0, #44	; 0x2c
 8000c0c:	f7ff fefa 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff fef7 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000c16:	2034      	movs	r0, #52	; 0x34
 8000c18:	f7ff fef4 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f7ff fef1 	bl	8000a04 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000c22:	20cf      	movs	r0, #207	; 0xcf
 8000c24:	f7ff feca 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff feeb 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000c2e:	20c1      	movs	r0, #193	; 0xc1
 8000c30:	f7ff fee8 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000c34:	2030      	movs	r0, #48	; 0x30
 8000c36:	f7ff fee5 	bl	8000a04 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000c3a:	20e8      	movs	r0, #232	; 0xe8
 8000c3c:	f7ff febe 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000c40:	2085      	movs	r0, #133	; 0x85
 8000c42:	f7ff fedf 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff fedc 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000c4c:	2078      	movs	r0, #120	; 0x78
 8000c4e:	f7ff fed9 	bl	8000a04 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000c52:	20ea      	movs	r0, #234	; 0xea
 8000c54:	f7ff feb2 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fed3 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fed0 	bl	8000a04 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000c64:	20ed      	movs	r0, #237	; 0xed
 8000c66:	f7ff fea9 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	f7ff feca 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f7ff fec7 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000c76:	2012      	movs	r0, #18
 8000c78:	f7ff fec4 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000c7c:	2081      	movs	r0, #129	; 0x81
 8000c7e:	f7ff fec1 	bl	8000a04 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000c82:	20f7      	movs	r0, #247	; 0xf7
 8000c84:	f7ff fe9a 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000c88:	2020      	movs	r0, #32
 8000c8a:	f7ff febb 	bl	8000a04 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000c8e:	20c0      	movs	r0, #192	; 0xc0
 8000c90:	f7ff fe94 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000c94:	2023      	movs	r0, #35	; 0x23
 8000c96:	f7ff feb5 	bl	8000a04 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000c9a:	20c1      	movs	r0, #193	; 0xc1
 8000c9c:	f7ff fe8e 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000ca0:	2010      	movs	r0, #16
 8000ca2:	f7ff feaf 	bl	8000a04 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000ca6:	20c5      	movs	r0, #197	; 0xc5
 8000ca8:	f7ff fe88 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000cac:	203e      	movs	r0, #62	; 0x3e
 8000cae:	f7ff fea9 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000cb2:	2028      	movs	r0, #40	; 0x28
 8000cb4:	f7ff fea6 	bl	8000a04 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000cb8:	20c7      	movs	r0, #199	; 0xc7
 8000cba:	f7ff fe7f 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000cbe:	2086      	movs	r0, #134	; 0x86
 8000cc0:	f7ff fea0 	bl	8000a04 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f7ff fe79 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000cca:	2048      	movs	r0, #72	; 0x48
 8000ccc:	f7ff fe9a 	bl	8000a04 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000cd0:	203a      	movs	r0, #58	; 0x3a
 8000cd2:	f7ff fe73 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000cd6:	2055      	movs	r0, #85	; 0x55
 8000cd8:	f7ff fe94 	bl	8000a04 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000cdc:	20b1      	movs	r0, #177	; 0xb1
 8000cde:	f7ff fe6d 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff fe8e 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000ce8:	2018      	movs	r0, #24
 8000cea:	f7ff fe8b 	bl	8000a04 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000cee:	20b6      	movs	r0, #182	; 0xb6
 8000cf0:	f7ff fe64 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000cf4:	2008      	movs	r0, #8
 8000cf6:	f7ff fe85 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000cfa:	2082      	movs	r0, #130	; 0x82
 8000cfc:	f7ff fe82 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000d00:	2027      	movs	r0, #39	; 0x27
 8000d02:	f7ff fe7f 	bl	8000a04 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000d06:	20f2      	movs	r0, #242	; 0xf2
 8000d08:	f7ff fe58 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fe79 	bl	8000a04 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000d12:	2026      	movs	r0, #38	; 0x26
 8000d14:	f7ff fe52 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff fe73 	bl	8000a04 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000d1e:	20e0      	movs	r0, #224	; 0xe0
 8000d20:	f7ff fe4c 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000d24:	200f      	movs	r0, #15
 8000d26:	f7ff fe6d 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000d2a:	2031      	movs	r0, #49	; 0x31
 8000d2c:	f7ff fe6a 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000d30:	202b      	movs	r0, #43	; 0x2b
 8000d32:	f7ff fe67 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000d36:	200c      	movs	r0, #12
 8000d38:	f7ff fe64 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d3c:	200e      	movs	r0, #14
 8000d3e:	f7ff fe61 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000d42:	2008      	movs	r0, #8
 8000d44:	f7ff fe5e 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000d48:	204e      	movs	r0, #78	; 0x4e
 8000d4a:	f7ff fe5b 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000d4e:	20f1      	movs	r0, #241	; 0xf1
 8000d50:	f7ff fe58 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000d54:	2037      	movs	r0, #55	; 0x37
 8000d56:	f7ff fe55 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f7ff fe52 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000d60:	2010      	movs	r0, #16
 8000d62:	f7ff fe4f 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d66:	2003      	movs	r0, #3
 8000d68:	f7ff fe4c 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d6c:	200e      	movs	r0, #14
 8000d6e:	f7ff fe49 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000d72:	2009      	movs	r0, #9
 8000d74:	f7ff fe46 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fe43 	bl	8000a04 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000d7e:	20e1      	movs	r0, #225	; 0xe1
 8000d80:	f7ff fe1c 	bl	80009bc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff fe3d 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d8a:	200e      	movs	r0, #14
 8000d8c:	f7ff fe3a 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000d90:	2014      	movs	r0, #20
 8000d92:	f7ff fe37 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f7ff fe34 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000d9c:	2011      	movs	r0, #17
 8000d9e:	f7ff fe31 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000da2:	2007      	movs	r0, #7
 8000da4:	f7ff fe2e 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000da8:	2031      	movs	r0, #49	; 0x31
 8000daa:	f7ff fe2b 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000dae:	20c1      	movs	r0, #193	; 0xc1
 8000db0:	f7ff fe28 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000db4:	2048      	movs	r0, #72	; 0x48
 8000db6:	f7ff fe25 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000dba:	2008      	movs	r0, #8
 8000dbc:	f7ff fe22 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f7ff fe1f 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000dc6:	200c      	movs	r0, #12
 8000dc8:	f7ff fe1c 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000dcc:	2031      	movs	r0, #49	; 0x31
 8000dce:	f7ff fe19 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000dd2:	2036      	movs	r0, #54	; 0x36
 8000dd4:	f7ff fe16 	bl	8000a04 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000dd8:	200f      	movs	r0, #15
 8000dda:	f7ff fe13 	bl	8000a04 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000dde:	2011      	movs	r0, #17
 8000de0:	f7ff fdec 	bl	80009bc <ILI9341_Write_Command>
HAL_Delay(120);
 8000de4:	2078      	movs	r0, #120	; 0x78
 8000de6:	f001 fabf 	bl	8002368 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000dea:	2029      	movs	r0, #41	; 0x29
 8000dec:	f7ff fde6 	bl	80009bc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fe97 	bl	8000b24 <ILI9341_Set_Rotation>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e00:	b08d      	sub	sp, #52	; 0x34
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	6039      	str	r1, [r7, #0]
 8000e08:	80fb      	strh	r3, [r7, #6]
 8000e0a:	466b      	mov	r3, sp
 8000e0c:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e1a:	d202      	bcs.n	8000e22 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e20:	e002      	b.n	8000e28 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000e22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e2e:	4840      	ldr	r0, [pc, #256]	; (8000f30 <ILI9341_Draw_Colour_Burst+0x134>)
 8000e30:	f001 fdc6 	bl	80029c0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3a:	483e      	ldr	r0, [pc, #248]	; (8000f34 <ILI9341_Draw_Colour_Burst+0x138>)
 8000e3c:	f001 fdc0 	bl	80029c0 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	2300      	movs	r3, #0
 8000e54:	4688      	mov	r8, r1
 8000e56:	4699      	mov	r9, r3
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	460c      	mov	r4, r1
 8000e70:	461d      	mov	r5, r3
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	f04f 0300 	mov.w	r3, #0
 8000e7a:	00eb      	lsls	r3, r5, #3
 8000e7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e80:	00e2      	lsls	r2, r4, #3
 8000e82:	1dcb      	adds	r3, r1, #7
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	ebad 0d03 	sub.w	sp, sp, r3
 8000e8c:	466b      	mov	r3, sp
 8000e8e:	3300      	adds	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e96:	e00e      	b.n	8000eb6 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ea2:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	b2d1      	uxtb	r1, r2
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3ec      	bcc.n	8000e98 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ecc:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ed8:	fb01 f202 	mul.w	r2, r1, r2
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d010      	beq.n	8000f08 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eea:	e009      	b.n	8000f00 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	69b9      	ldr	r1, [r7, #24]
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <ILI9341_Draw_Colour_Burst+0x13c>)
 8000ef6:	f003 fecd 	bl	8004c94 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efc:	3301      	adds	r3, #1
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d3f1      	bcc.n	8000eec <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	69b9      	ldr	r1, [r7, #24]
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <ILI9341_Draw_Colour_Burst+0x13c>)
 8000f12:	f003 febf 	bl	8004c94 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <ILI9341_Draw_Colour_Burst+0x138>)
 8000f1e:	f001 fd4f 	bl	80029c0 <HAL_GPIO_WritePin>
 8000f22:	46b5      	mov	sp, r6
}
 8000f24:	bf00      	nop
 8000f26:	3734      	adds	r7, #52	; 0x34
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f2e:	bf00      	nop
 8000f30:	40010800 	.word	0x40010800
 8000f34:	40010c00 	.word	0x40010c00
 8000f38:	200000c4 	.word	0x200000c4

08000f3c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <ILI9341_Fill_Screen+0x44>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <ILI9341_Fill_Screen+0x48>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fd79 	bl	8000a4c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <ILI9341_Fill_Screen+0x44>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <ILI9341_Fill_Screen+0x48>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff42 	bl	8000dfc <ILI9341_Draw_Colour_Burst>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000002 	.word	0x20000002
 8000f84:	20000000 	.word	0x20000000

08000f88 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2203      	movs	r2, #3
 8000f94:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	715a      	strb	r2, [r3, #5]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b08a      	sub	sp, #40	; 0x28
 8000fc2:	af04      	add	r7, sp, #16
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fd8:	7afb      	ldrb	r3, [r7, #11]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	8af9      	ldrh	r1, [r7, #22]
 8000fde:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f002 fab4 	bl	800355c <HAL_I2C_Mem_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10b      	bne.n	8001012 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000ffa:	7d7b      	ldrb	r3, [r7, #21]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	7d3b      	ldrb	r3, [r7, #20]
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b21b      	sxth	r3, r3
 8001008:	b29a      	uxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	801a      	strh	r2, [r3, #0]
		return true;
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <read_register16+0x56>
	} else
		return false;
 8001012:	2300      	movs	r3, #0

}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b08b      	sub	sp, #44	; 0x2c
 8001020:	af04      	add	r7, sp, #16
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	461a      	mov	r2, r3
 8001028:	460b      	mov	r3, r1
 800102a:	72fb      	strb	r3, [r7, #11]
 800102c:	4613      	mov	r3, r2
 800102e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800103c:	7afb      	ldrb	r3, [r7, #11]
 800103e:	b29a      	uxth	r2, r3
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	b29b      	uxth	r3, r3
 8001044:	8af9      	ldrh	r1, [r7, #22]
 8001046:	f241 3488 	movw	r4, #5000	; 0x1388
 800104a:	9402      	str	r4, [sp, #8]
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	f002 fa82 	bl	800355c <HAL_I2C_Mem_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <read_data+0x46>
		return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <read_data+0x48>
	else
		return 1;
 8001062:	2301      	movs	r3, #1

}
 8001064:	4618      	mov	r0, r3
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}

0800106c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	461a      	mov	r2, r3
 8001078:	2188      	movs	r1, #136	; 0x88
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff9f 	bl	8000fbe <read_register16>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d06f      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3302      	adds	r3, #2
 800108a:	461a      	mov	r2, r3
 800108c:	218a      	movs	r1, #138	; 0x8a
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff95 	bl	8000fbe <read_register16>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d065      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3304      	adds	r3, #4
 800109e:	461a      	mov	r2, r3
 80010a0:	218c      	movs	r1, #140	; 0x8c
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff8b 	bl	8000fbe <read_register16>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d05b      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3306      	adds	r3, #6
 80010b2:	461a      	mov	r2, r3
 80010b4:	218e      	movs	r1, #142	; 0x8e
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff81 	bl	8000fbe <read_register16>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d051      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3308      	adds	r3, #8
 80010c6:	461a      	mov	r2, r3
 80010c8:	2190      	movs	r1, #144	; 0x90
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff77 	bl	8000fbe <read_register16>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d047      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	330a      	adds	r3, #10
 80010da:	461a      	mov	r2, r3
 80010dc:	2192      	movs	r1, #146	; 0x92
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff6d 	bl	8000fbe <read_register16>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d03d      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	330c      	adds	r3, #12
 80010ee:	461a      	mov	r2, r3
 80010f0:	2194      	movs	r1, #148	; 0x94
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff63 	bl	8000fbe <read_register16>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d033      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	330e      	adds	r3, #14
 8001102:	461a      	mov	r2, r3
 8001104:	2196      	movs	r1, #150	; 0x96
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff59 	bl	8000fbe <read_register16>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d029      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3310      	adds	r3, #16
 8001116:	461a      	mov	r2, r3
 8001118:	2198      	movs	r1, #152	; 0x98
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff4f 	bl	8000fbe <read_register16>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d01f      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3312      	adds	r3, #18
 800112a:	461a      	mov	r2, r3
 800112c:	219a      	movs	r1, #154	; 0x9a
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff45 	bl	8000fbe <read_register16>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d015      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3314      	adds	r3, #20
 800113e:	461a      	mov	r2, r3
 8001140:	219c      	movs	r1, #156	; 0x9c
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff3b 	bl	8000fbe <read_register16>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001152:	461a      	mov	r2, r3
 8001154:	219e      	movs	r1, #158	; 0x9e
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff31 	bl	8000fbe <read_register16>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <read_calibration_data+0xfa>

		return true;
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <read_calibration_data+0xfc>
	}

	return false;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f103 0218 	add.w	r2, r3, #24
 800117e:	2301      	movs	r3, #1
 8001180:	21a1      	movs	r1, #161	; 0xa1
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff4a 	bl	800101c <read_data>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d14b      	bne.n	8001226 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	331a      	adds	r3, #26
 8001192:	461a      	mov	r2, r3
 8001194:	21e1      	movs	r1, #225	; 0xe1
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff11 	bl	8000fbe <read_register16>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d041      	beq.n	8001226 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f103 021c 	add.w	r2, r3, #28
 80011a8:	2301      	movs	r3, #1
 80011aa:	21e3      	movs	r1, #227	; 0xe3
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff35 	bl	800101c <read_data>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d136      	bne.n	8001226 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80011b8:	f107 030e 	add.w	r3, r7, #14
 80011bc:	461a      	mov	r2, r3
 80011be:	21e4      	movs	r1, #228	; 0xe4
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fefc 	bl	8000fbe <read_register16>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d02c      	beq.n	8001226 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	461a      	mov	r2, r3
 80011d2:	21e5      	movs	r1, #229	; 0xe5
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fef2 	bl	8000fbe <read_register16>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d022      	beq.n	8001226 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80011e6:	2301      	movs	r3, #1
 80011e8:	21e7      	movs	r1, #231	; 0xe7
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff16 	bl	800101c <read_data>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d117      	bne.n	8001226 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001200:	b21a      	sxth	r2, r3
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	121b      	asrs	r3, r3, #8
 8001206:	b21b      	sxth	r3, r3
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21a      	sxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001216:	89bb      	ldrh	r3, [r7, #12]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	b29b      	uxth	r3, r3
 800121c:	b21a      	sxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	841a      	strh	r2, [r3, #32]

		return true;
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	4613      	mov	r3, r2
 800123e:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	b29a      	uxth	r2, r3
 8001250:	89f9      	ldrh	r1, [r7, #14]
 8001252:	f242 7310 	movw	r3, #10000	; 0x2710
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2301      	movs	r3, #1
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	1cbb      	adds	r3, r7, #2
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	f002 f881 	bl	8003368 <HAL_I2C_Mem_Write>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <write_register8+0x40>
		return false;
 800126c:	2300      	movs	r3, #0
 800126e:	e000      	b.n	8001272 <write_register8+0x42>
	else
		return true;
 8001270:	2301      	movs	r3, #1
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001288:	2b76      	cmp	r3, #118	; 0x76
 800128a:	d005      	beq.n	8001298 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001290:	2b77      	cmp	r3, #119	; 0x77
 8001292:	d001      	beq.n	8001298 <bmp280_init+0x1e>

		return false;
 8001294:	2300      	movs	r3, #0
 8001296:	e099      	b.n	80013cc <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800129e:	2301      	movs	r3, #1
 80012a0:	21d0      	movs	r1, #208	; 0xd0
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff feba 	bl	800101c <read_data>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <bmp280_init+0x38>
		return false;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e08c      	b.n	80013cc <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012b8:	2b58      	cmp	r3, #88	; 0x58
 80012ba:	d006      	beq.n	80012ca <bmp280_init+0x50>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012c2:	2b60      	cmp	r3, #96	; 0x60
 80012c4:	d001      	beq.n	80012ca <bmp280_init+0x50>

		return false;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e080      	b.n	80013cc <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80012ca:	22b6      	movs	r2, #182	; 0xb6
 80012cc:	21e0      	movs	r1, #224	; 0xe0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffae 	bl	8001230 <write_register8>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <bmp280_init+0x64>
		return false;
 80012da:	2300      	movs	r3, #0
 80012dc:	e076      	b.n	80013cc <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80012de:	f107 020c 	add.w	r2, r7, #12
 80012e2:	2301      	movs	r3, #1
 80012e4:	21f3      	movs	r1, #243	; 0xf3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fe98 	bl	800101c <read_data>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f5      	bne.n	80012de <bmp280_init+0x64>
				&& (status & 1) == 0)
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f0      	bne.n	80012de <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff feb5 	bl	800106c <read_calibration_data>
 8001302:	4603      	mov	r3, r0
 8001304:	f083 0301 	eor.w	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d100      	bne.n	8001310 <bmp280_init+0x96>
 800130e:	e001      	b.n	8001314 <bmp280_init+0x9a>
		return false;
 8001310:	2300      	movs	r3, #0
 8001312:	e05b      	b.n	80013cc <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800131a:	2b60      	cmp	r3, #96	; 0x60
 800131c:	d10a      	bne.n	8001334 <bmp280_init+0xba>
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ff26 	bl	8001170 <read_hum_calibration_data>
 8001324:	4603      	mov	r3, r0
 8001326:	f083 0301 	eor.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <bmp280_init+0xba>
		return false;
 8001330:	2300      	movs	r3, #0
 8001332:	e04b      	b.n	80013cc <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	795b      	ldrb	r3, [r3, #5]
 8001338:	015b      	lsls	r3, r3, #5
 800133a:	b25a      	sxtb	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	b25b      	sxtb	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b25b      	sxtb	r3, r3
 8001348:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	461a      	mov	r2, r3
 800134e:	21f5      	movs	r1, #245	; 0xf5
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff6d 	bl	8001230 <write_register8>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <bmp280_init+0xe6>
		return false;
 800135c:	2300      	movs	r3, #0
 800135e:	e035      	b.n	80013cc <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d102      	bne.n	800136e <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	78db      	ldrb	r3, [r3, #3]
 8001372:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001374:	b25a      	sxtb	r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	789b      	ldrb	r3, [r3, #2]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	b25b      	sxtb	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b25a      	sxtb	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25b      	sxtb	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800138c:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001394:	2b60      	cmp	r3, #96	; 0x60
 8001396:	d10d      	bne.n	80013b4 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	461a      	mov	r2, r3
 80013a2:	21f2      	movs	r1, #242	; 0xf2
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff43 	bl	8001230 <write_register8>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <bmp280_init+0x13a>
			return false;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e00b      	b.n	80013cc <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
 80013b6:	461a      	mov	r2, r3
 80013b8:	21f4      	movs	r1, #244	; 0xf4
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff38 	bl	8001230 <write_register8>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <bmp280_init+0x150>
		return false;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <bmp280_init+0x152>
	}

	return true;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	10da      	asrs	r2, r3, #3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013f6:	12db      	asrs	r3, r3, #11
 80013f8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	111b      	asrs	r3, r3, #4
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	8812      	ldrh	r2, [r2, #0]
 8001402:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	1112      	asrs	r2, r2, #4
 8001408:	68f9      	ldr	r1, [r7, #12]
 800140a:	8809      	ldrh	r1, [r1, #0]
 800140c:	1a52      	subs	r2, r2, r1
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800141a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800141e:	139b      	asrs	r3, r3, #14
 8001420:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	441a      	add	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	3380      	adds	r3, #128	; 0x80
 8001438:	121b      	asrs	r3, r3, #8
}
 800143a:	4618      	mov	r0, r3
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001448:	b0cc      	sub	sp, #304	; 0x130
 800144a:	af00      	add	r7, sp, #0
 800144c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001450:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001454:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800145c:	17da      	asrs	r2, r3, #31
 800145e:	461c      	mov	r4, r3
 8001460:	4615      	mov	r5, r2
 8001462:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001466:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 800146a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800146e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001472:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001476:	fb03 f102 	mul.w	r1, r3, r2
 800147a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800147e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	18ca      	adds	r2, r1, r3
 8001488:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800148c:	fba3 8903 	umull	r8, r9, r3, r3
 8001490:	eb02 0309 	add.w	r3, r2, r9
 8001494:	4699      	mov	r9, r3
 8001496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800149a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	17da      	asrs	r2, r3, #31
 80014a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014a6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014aa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014ae:	4603      	mov	r3, r0
 80014b0:	fb03 f209 	mul.w	r2, r3, r9
 80014b4:	460b      	mov	r3, r1
 80014b6:	fb08 f303 	mul.w	r3, r8, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	4602      	mov	r2, r0
 80014be:	fba8 2102 	umull	r2, r1, r8, r2
 80014c2:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80014c6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80014ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80014ce:	4413      	add	r3, r2
 80014d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80014d4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80014d8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80014dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80014e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	17da      	asrs	r2, r3, #31
 80014ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014f0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80014f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014f8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80014fc:	462a      	mov	r2, r5
 80014fe:	fb02 f203 	mul.w	r2, r2, r3
 8001502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001506:	4621      	mov	r1, r4
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	441a      	add	r2, r3
 800150e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001512:	4621      	mov	r1, r4
 8001514:	fba3 3101 	umull	r3, r1, r3, r1
 8001518:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800151c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	f04f 0100 	mov.w	r1, #0
 8001532:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001536:	462b      	mov	r3, r5
 8001538:	0459      	lsls	r1, r3, #17
 800153a:	4622      	mov	r2, r4
 800153c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001540:	4623      	mov	r3, r4
 8001542:	0458      	lsls	r0, r3, #17
 8001544:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001548:	1814      	adds	r4, r2, r0
 800154a:	643c      	str	r4, [r7, #64]	; 0x40
 800154c:	414b      	adcs	r3, r1
 800154e:	647b      	str	r3, [r7, #68]	; 0x44
 8001550:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001554:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800155c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001560:	b21b      	sxth	r3, r3
 8001562:	17da      	asrs	r2, r3, #31
 8001564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001568:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800156c:	f04f 0000 	mov.w	r0, #0
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001578:	00d9      	lsls	r1, r3, #3
 800157a:	2000      	movs	r0, #0
 800157c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001580:	1814      	adds	r4, r2, r0
 8001582:	63bc      	str	r4, [r7, #56]	; 0x38
 8001584:	414b      	adcs	r3, r1
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001588:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800158c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001590:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001594:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001598:	fb03 f102 	mul.w	r1, r3, r2
 800159c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	18ca      	adds	r2, r1, r3
 80015aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015ae:	fba3 3103 	umull	r3, r1, r3, r3
 80015b2:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80015b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015be:	18d3      	adds	r3, r2, r3
 80015c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	17da      	asrs	r2, r3, #31
 80015d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015d4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80015d8:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80015dc:	4622      	mov	r2, r4
 80015de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80015e2:	4641      	mov	r1, r8
 80015e4:	fb01 f202 	mul.w	r2, r1, r2
 80015e8:	464d      	mov	r5, r9
 80015ea:	4618      	mov	r0, r3
 80015ec:	4621      	mov	r1, r4
 80015ee:	4603      	mov	r3, r0
 80015f0:	fb03 f305 	mul.w	r3, r3, r5
 80015f4:	4413      	add	r3, r2
 80015f6:	4602      	mov	r2, r0
 80015f8:	4641      	mov	r1, r8
 80015fa:	fba2 2101 	umull	r2, r1, r2, r1
 80015fe:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001602:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001606:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800160a:	4413      	add	r3, r2
 800160c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800161c:	4623      	mov	r3, r4
 800161e:	0a18      	lsrs	r0, r3, #8
 8001620:	462a      	mov	r2, r5
 8001622:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001626:	462b      	mov	r3, r5
 8001628:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800162a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800162e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001632:	b21b      	sxth	r3, r3
 8001634:	17da      	asrs	r2, r3, #31
 8001636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800163a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800163e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001642:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001646:	464a      	mov	r2, r9
 8001648:	fb02 f203 	mul.w	r2, r2, r3
 800164c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001650:	4644      	mov	r4, r8
 8001652:	fb04 f303 	mul.w	r3, r4, r3
 8001656:	441a      	add	r2, r3
 8001658:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800165c:	4644      	mov	r4, r8
 800165e:	fba3 3404 	umull	r3, r4, r3, r4
 8001662:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800166a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800166e:	18d3      	adds	r3, r2, r3
 8001670:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001680:	464c      	mov	r4, r9
 8001682:	0323      	lsls	r3, r4, #12
 8001684:	46c4      	mov	ip, r8
 8001686:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 800168a:	4644      	mov	r4, r8
 800168c:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800168e:	1884      	adds	r4, r0, r2
 8001690:	633c      	str	r4, [r7, #48]	; 0x30
 8001692:	eb41 0303 	adc.w	r3, r1, r3
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
 8001698:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800169c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80016a0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80016a4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016a8:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016b4:	88db      	ldrh	r3, [r3, #6]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	2200      	movs	r2, #0
 80016ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016be:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016c2:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80016c6:	4622      	mov	r2, r4
 80016c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80016cc:	4641      	mov	r1, r8
 80016ce:	fb01 f202 	mul.w	r2, r1, r2
 80016d2:	464d      	mov	r5, r9
 80016d4:	4618      	mov	r0, r3
 80016d6:	4621      	mov	r1, r4
 80016d8:	4603      	mov	r3, r0
 80016da:	fb03 f305 	mul.w	r3, r3, r5
 80016de:	4413      	add	r3, r2
 80016e0:	4602      	mov	r2, r0
 80016e2:	4641      	mov	r1, r8
 80016e4:	fba2 2101 	umull	r2, r1, r2, r1
 80016e8:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80016ec:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80016f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80016f4:	4413      	add	r3, r2
 80016f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001706:	4629      	mov	r1, r5
 8001708:	104a      	asrs	r2, r1, #1
 800170a:	4629      	mov	r1, r5
 800170c:	17cb      	asrs	r3, r1, #31
 800170e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001712:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001716:	4313      	orrs	r3, r2
 8001718:	d101      	bne.n	800171e <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 800171a:	2300      	movs	r3, #0
 800171c:	e146      	b.n	80019ac <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 800171e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001722:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001726:	17da      	asrs	r2, r3, #31
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
 800172a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800172c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001730:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001734:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001738:	105b      	asrs	r3, r3, #1
 800173a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800173e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001742:	07db      	lsls	r3, r3, #31
 8001744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001748:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800174c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001750:	4604      	mov	r4, r0
 8001752:	1aa4      	subs	r4, r4, r2
 8001754:	67bc      	str	r4, [r7, #120]	; 0x78
 8001756:	eb61 0303 	sbc.w	r3, r1, r3
 800175a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800175c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001760:	4622      	mov	r2, r4
 8001762:	462b      	mov	r3, r5
 8001764:	1891      	adds	r1, r2, r2
 8001766:	6239      	str	r1, [r7, #32]
 8001768:	415b      	adcs	r3, r3
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
 800176c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001770:	4621      	mov	r1, r4
 8001772:	1851      	adds	r1, r2, r1
 8001774:	61b9      	str	r1, [r7, #24]
 8001776:	4629      	mov	r1, r5
 8001778:	414b      	adcs	r3, r1
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001788:	4649      	mov	r1, r9
 800178a:	018b      	lsls	r3, r1, #6
 800178c:	4641      	mov	r1, r8
 800178e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001792:	4641      	mov	r1, r8
 8001794:	018a      	lsls	r2, r1, #6
 8001796:	4641      	mov	r1, r8
 8001798:	1889      	adds	r1, r1, r2
 800179a:	6139      	str	r1, [r7, #16]
 800179c:	4649      	mov	r1, r9
 800179e:	eb43 0101 	adc.w	r1, r3, r1
 80017a2:	6179      	str	r1, [r7, #20]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017b0:	4649      	mov	r1, r9
 80017b2:	008b      	lsls	r3, r1, #2
 80017b4:	46c4      	mov	ip, r8
 80017b6:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80017ba:	4641      	mov	r1, r8
 80017bc:	008a      	lsls	r2, r1, #2
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	4622      	mov	r2, r4
 80017c6:	189b      	adds	r3, r3, r2
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	460b      	mov	r3, r1
 80017cc:	462a      	mov	r2, r5
 80017ce:	eb42 0303 	adc.w	r3, r2, r3
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017e0:	4649      	mov	r1, r9
 80017e2:	008b      	lsls	r3, r1, #2
 80017e4:	46c4      	mov	ip, r8
 80017e6:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80017ea:	4641      	mov	r1, r8
 80017ec:	008a      	lsls	r2, r1, #2
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	4622      	mov	r2, r4
 80017f6:	189b      	adds	r3, r3, r2
 80017f8:	673b      	str	r3, [r7, #112]	; 0x70
 80017fa:	462b      	mov	r3, r5
 80017fc:	460a      	mov	r2, r1
 80017fe:	eb42 0303 	adc.w	r3, r2, r3
 8001802:	677b      	str	r3, [r7, #116]	; 0x74
 8001804:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001808:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800180c:	f7fe fefc 	bl	8000608 <__aeabi_ldivmod>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800181c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001820:	b21b      	sxth	r3, r3
 8001822:	17da      	asrs	r2, r3, #31
 8001824:	66bb      	str	r3, [r7, #104]	; 0x68
 8001826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001828:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800182c:	f04f 0000 	mov.w	r0, #0
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	0b50      	lsrs	r0, r2, #13
 8001836:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800183a:	1359      	asrs	r1, r3, #13
 800183c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001840:	462b      	mov	r3, r5
 8001842:	fb00 f203 	mul.w	r2, r0, r3
 8001846:	4623      	mov	r3, r4
 8001848:	fb03 f301 	mul.w	r3, r3, r1
 800184c:	4413      	add	r3, r2
 800184e:	4622      	mov	r2, r4
 8001850:	fba2 2100 	umull	r2, r1, r2, r0
 8001854:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001858:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800185c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001860:	4413      	add	r3, r2
 8001862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001866:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	0b50      	lsrs	r0, r2, #13
 8001874:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001878:	1359      	asrs	r1, r3, #13
 800187a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800187e:	462b      	mov	r3, r5
 8001880:	fb00 f203 	mul.w	r2, r0, r3
 8001884:	4623      	mov	r3, r4
 8001886:	fb03 f301 	mul.w	r3, r3, r1
 800188a:	4413      	add	r3, r2
 800188c:	4622      	mov	r2, r4
 800188e:	fba2 2100 	umull	r2, r1, r2, r0
 8001892:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001896:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800189a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800189e:	4413      	add	r3, r2
 80018a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018b0:	4621      	mov	r1, r4
 80018b2:	0e4a      	lsrs	r2, r1, #25
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	460c      	mov	r4, r1
 80018ba:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80018be:	164b      	asrs	r3, r1, #25
 80018c0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80018c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	17da      	asrs	r2, r3, #31
 80018d0:	663b      	str	r3, [r7, #96]	; 0x60
 80018d2:	667a      	str	r2, [r7, #100]	; 0x64
 80018d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018dc:	462a      	mov	r2, r5
 80018de:	fb02 f203 	mul.w	r2, r2, r3
 80018e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018e6:	4621      	mov	r1, r4
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018f2:	4621      	mov	r1, r4
 80018f4:	fba2 2101 	umull	r2, r1, r2, r1
 80018f8:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80018fc:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001900:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001904:	4413      	add	r3, r2
 8001906:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001916:	4621      	mov	r1, r4
 8001918:	0cca      	lsrs	r2, r1, #19
 800191a:	4620      	mov	r0, r4
 800191c:	4629      	mov	r1, r5
 800191e:	460c      	mov	r4, r1
 8001920:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001924:	14cb      	asrs	r3, r1, #19
 8001926:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800192a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800192e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001932:	1884      	adds	r4, r0, r2
 8001934:	65bc      	str	r4, [r7, #88]	; 0x58
 8001936:	eb41 0303 	adc.w	r3, r1, r3
 800193a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800193c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001940:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001944:	4621      	mov	r1, r4
 8001946:	1889      	adds	r1, r1, r2
 8001948:	6539      	str	r1, [r7, #80]	; 0x50
 800194a:	4629      	mov	r1, r5
 800194c:	eb43 0101 	adc.w	r1, r3, r1
 8001950:	6579      	str	r1, [r7, #84]	; 0x54
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800195e:	4623      	mov	r3, r4
 8001960:	0a18      	lsrs	r0, r3, #8
 8001962:	462a      	mov	r2, r5
 8001964:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001968:	462b      	mov	r3, r5
 800196a:	1219      	asrs	r1, r3, #8
 800196c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001970:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001974:	b21b      	sxth	r3, r3
 8001976:	17da      	asrs	r2, r3, #31
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
 800197a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001988:	464c      	mov	r4, r9
 800198a:	0123      	lsls	r3, r4, #4
 800198c:	46c4      	mov	ip, r8
 800198e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001992:	4644      	mov	r4, r8
 8001994:	0122      	lsls	r2, r4, #4
 8001996:	1884      	adds	r4, r0, r2
 8001998:	603c      	str	r4, [r7, #0]
 800199a:	eb41 0303 	adc.w	r3, r1, r3
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 80019a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80019b2:	46bd      	mov	sp, r7
 80019b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019b8 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80019ca:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	039a      	lsls	r2, r3, #14
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019d6:	051b      	lsls	r3, r3, #20
 80019d8:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019e0:	4619      	mov	r1, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019ee:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019f6:	4611      	mov	r1, r2
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	fb01 f202 	mul.w	r2, r1, r2
 80019fe:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a00:	68f9      	ldr	r1, [r7, #12]
 8001a02:	7f09      	ldrb	r1, [r1, #28]
 8001a04:	4608      	mov	r0, r1
 8001a06:	6979      	ldr	r1, [r7, #20]
 8001a08:	fb00 f101 	mul.w	r1, r0, r1
 8001a0c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a0e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a12:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a16:	1292      	asrs	r2, r2, #10
 8001a18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a22:	fb01 f202 	mul.w	r2, r1, r2
 8001a26:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001a2a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	13db      	asrs	r3, r3, #15
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	13d2      	asrs	r2, r2, #15
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	7e12      	ldrb	r2, [r2, #24]
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a56:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a5e:	bfa8      	it	ge
 8001a60:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a64:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	131b      	asrs	r3, r3, #12
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a88:	2b60      	cmp	r3, #96	; 0x60
 8001a8a:	d007      	beq.n	8001a9c <bmp280_read_fixed+0x28>
		if (humidity)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <bmp280_read_fixed+0x32>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e000      	b.n	8001aa8 <bmp280_read_fixed+0x34>
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	21f7      	movs	r1, #247	; 0xf7
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fab1 	bl	800101c <read_data>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bmp280_read_fixed+0x50>
		return false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e038      	b.n	8001b36 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ac4:	7e3b      	ldrb	r3, [r7, #24]
 8001ac6:	031a      	lsls	r2, r3, #12
 8001ac8:	7e7b      	ldrb	r3, [r7, #25]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4313      	orrs	r3, r2
 8001ace:	7eba      	ldrb	r2, [r7, #26]
 8001ad0:	0912      	lsrs	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001ad8:	7efb      	ldrb	r3, [r7, #27]
 8001ada:	031a      	lsls	r2, r3, #12
 8001adc:	7f3b      	ldrb	r3, [r7, #28]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	7f7a      	ldrb	r2, [r7, #29]
 8001ae4:	0912      	lsrs	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	461a      	mov	r2, r3
 8001af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fc6d 	bl	80013d4 <compensate_temperature>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	461a      	mov	r2, r3
 8001b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fc9c 	bl	8001444 <compensate_pressure>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00d      	beq.n	8001b34 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b18:	7fbb      	ldrb	r3, [r7, #30]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	7ffa      	ldrb	r2, [r7, #31]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	461a      	mov	r2, r3
 8001b26:	6a39      	ldr	r1, [r7, #32]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff ff45 	bl	80019b8 <compensate_humidity>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3730      	adds	r7, #48	; 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <bmp280_read_float+0x1a>
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	e000      	b.n	8001b5c <bmp280_read_float+0x1c>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f107 0218 	add.w	r2, r7, #24
 8001b60:	f107 011c 	add.w	r1, r7, #28
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff ff85 	bl	8001a74 <bmp280_read_fixed>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d02d      	beq.n	8001bcc <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fba4 	bl	80002c0 <__aeabi_i2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4917      	ldr	r1, [pc, #92]	; (8001bd8 <bmp280_read_float+0x98>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fca7 	bl	80004d0 <__aeabi_fdiv>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fb93 	bl	80002b8 <__aeabi_ui2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fc99 	bl	80004d0 <__aeabi_fdiv>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00d      	beq.n	8001bc8 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fb82 	bl	80002b8 <__aeabi_ui2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc88 	bl	80004d0 <__aeabi_fdiv>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	601a      	str	r2, [r3, #0]
		return true;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <bmp280_read_float+0x8e>
	}

	return false;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	42c80000 	.word	0x42c80000

08001bdc <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <DS3231_Init+0x18>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	2000002c 	.word	0x2000002c

08001bf8 <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	460a      	mov	r2, r1
 8001c10:	801a      	strh	r2, [r3, #0]
 8001c12:	460a      	mov	r2, r1
 8001c14:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8001c16:	4b35      	ldr	r3, [pc, #212]	; (8001cec <DS3231_GetTime+0xf4>)
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	f107 020f 	add.w	r2, r7, #15
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2301      	movs	r3, #1
 8001c26:	21d0      	movs	r1, #208	; 0xd0
 8001c28:	f001 f840 	bl	8002cac <HAL_I2C_Master_Transmit>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <DS3231_GetTime+0x3e>
 8001c32:	2300      	movs	r3, #0
 8001c34:	e055      	b.n	8001ce2 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <DS3231_GetTime+0xf4>)
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	f107 0208 	add.w	r2, r7, #8
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2307      	movs	r3, #7
 8001c46:	21d0      	movs	r1, #208	; 0xd0
 8001c48:	f001 f92e 	bl	8002ea8 <HAL_I2C_Master_Receive>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <DS3231_GetTime+0x5e>
 8001c52:	2300      	movs	r3, #0
 8001c54:	e045      	b.n	8001ce2 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 8001c56:	7a3b      	ldrb	r3, [r7, #8]
 8001c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f846 	bl	8001cf0 <B2D>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8001c6c:	7a7b      	ldrb	r3, [r7, #9]
 8001c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f83b 	bl	8001cf0 <B2D>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 8001c82:	7abb      	ldrb	r3, [r7, #10]
 8001c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f830 	bl	8001cf0 <B2D>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8001c98:	7afb      	ldrb	r3, [r7, #11]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8001ca4:	7b3b      	ldrb	r3, [r7, #12]
 8001ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f81f 	bl	8001cf0 <B2D>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8001cba:	7b7b      	ldrb	r3, [r7, #13]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f814 	bl	8001cf0 <B2D>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8001cd0:	7bbb      	ldrb	r3, [r7, #14]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f80c 	bl	8001cf0 <B2D>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	701a      	strb	r2, [r3, #0]

  return true;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000002c 	.word	0x2000002c

08001cf0 <B2D>:

  return true;
}

static uint8_t B2D(uint8_t bcd)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	b2db      	uxtb	r3, r3
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d26:	f000 fabd 	bl	80022a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2a:	f000 f865 	bl	8001df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d2e:	f000 f90d 	bl	8001f4c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d32:	f000 f8d5 	bl	8001ee0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001d36:	f000 f8a5 	bl	8001e84 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Init LCD
  ILI9341_SPI_Init();
 8001d3a:	f7fe fe21 	bl	8000980 <ILI9341_SPI_Init>
  ILI9341_Init();
 8001d3e:	f7fe ff4f 	bl	8000be0 <ILI9341_Init>
  ILI9341_Enable();
 8001d42:	f7fe ff41 	bl	8000bc8 <ILI9341_Enable>
  ILI9341_Fill_Screen(BLACK);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff f8f8 	bl	8000f3c <ILI9341_Fill_Screen>

  // DC3231 init
  DS3231_Init(&hi2c1);
 8001d4c:	4823      	ldr	r0, [pc, #140]	; (8001ddc <main+0xbc>)
 8001d4e:	f7ff ff45 	bl	8001bdc <DS3231_Init>

  // Init BME280
  bmp280_init_default_params(&bmp280.params);
 8001d52:	4823      	ldr	r0, [pc, #140]	; (8001de0 <main+0xc0>)
 8001d54:	f7ff f918 	bl	8000f88 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <main+0xc4>)
 8001d5a:	2276      	movs	r2, #118	; 0x76
 8001d5c:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <main+0xc4>)
 8001d60:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <main+0xbc>)
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
  if(bmp280_init(&bmp280, &bmp280.params) != true)
 8001d64:	491e      	ldr	r1, [pc, #120]	; (8001de0 <main+0xc0>)
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <main+0xc4>)
 8001d68:	f7ff fa87 	bl	800127a <bmp280_init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f083 0301 	eor.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d000      	beq.n	8001d7a <main+0x5a>
  {
	  // error
	  while(1){}
 8001d78:	e7fe      	b.n	8001d78 <main+0x58>
  }
  bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <main+0xc4>)
 8001d7c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d80:	2b60      	cmp	r3, #96	; 0x60
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Test of LCD
	  ILI9341_Fill_Screen(BLUE);
 8001d8a:	201f      	movs	r0, #31
 8001d8c:	f7ff f8d6 	bl	8000f3c <ILI9341_Fill_Screen>
	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 8001d90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d94:	4814      	ldr	r0, [pc, #80]	; (8001de8 <main+0xc8>)
 8001d96:	f000 fe2b 	bl	80029f0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001d9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d9e:	f000 fae3 	bl	8002368 <HAL_Delay>
	  ILI9341_Fill_Screen(YELLOW);
 8001da2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001da6:	f7ff f8c9 	bl	8000f3c <ILI9341_Fill_Screen>
	  HAL_Delay(500);
 8001daa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dae:	f000 fadb 	bl	8002368 <HAL_Delay>

	  // Test Clock dc3231
	  _RTC time;
	  DS3231_GetTime(&time);
 8001db2:	463b      	mov	r3, r7
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff1f 	bl	8001bf8 <DS3231_GetTime>

	  // Test BME280
	  if((bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) != true)
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <main+0xcc>)
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <main+0xd0>)
 8001dbe:	490d      	ldr	r1, [pc, #52]	; (8001df4 <main+0xd4>)
 8001dc0:	4808      	ldr	r0, [pc, #32]	; (8001de4 <main+0xc4>)
 8001dc2:	f7ff febd 	bl	8001b40 <bmp280_read_float>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d000      	beq.n	8001dd4 <main+0xb4>
	  {
		  // Error
		  while(1){}
 8001dd2:	e7fe      	b.n	8001dd2 <main+0xb2>
	  }


	  int ggg = 99;
 8001dd4:	2363      	movs	r3, #99	; 0x63
 8001dd6:	60bb      	str	r3, [r7, #8]
  {
 8001dd8:	e7d7      	b.n	8001d8a <main+0x6a>
 8001dda:	bf00      	nop
 8001ddc:	20000070 	.word	0x20000070
 8001de0:	2000005c 	.word	0x2000005c
 8001de4:	20000030 	.word	0x20000030
 8001de8:	40011000 	.word	0x40011000
 8001dec:	2000006c 	.word	0x2000006c
 8001df0:	20000064 	.word	0x20000064
 8001df4:	20000068 	.word	0x20000068

08001df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b090      	sub	sp, #64	; 0x40
 8001dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	2228      	movs	r2, #40	; 0x28
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 fa4e 	bl	80052a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3c:	f107 0318 	add.w	r3, r7, #24
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 fa9d 	bl	8004380 <HAL_RCC_OscConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e4c:	f000 f904 	bl	8002058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e50:	230f      	movs	r3, #15
 8001e52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e54:	2302      	movs	r3, #2
 8001e56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 fd0a 	bl	8004884 <HAL_RCC_ClockConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e76:	f000 f8ef 	bl	8002058 <Error_Handler>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3740      	adds	r7, #64	; 0x40
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001e8a:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <MX_I2C1_Init+0x54>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001e90:	4a12      	ldr	r2, [pc, #72]	; (8001edc <MX_I2C1_Init+0x58>)
 8001e92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <MX_I2C1_Init+0x50>)
 8001ec2:	f000 fdaf 	bl	8002a24 <HAL_I2C_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ecc:	f000 f8c4 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000070 	.word	0x20000070
 8001ed8:	40005400 	.word	0x40005400
 8001edc:	000186a0 	.word	0x000186a0

08001ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <MX_SPI1_Init+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f14:	2208      	movs	r2, #8
 8001f16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f2c:	220a      	movs	r2, #10
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <MX_SPI1_Init+0x64>)
 8001f32:	f002 fe2b 	bl	8004b8c <HAL_SPI_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f3c:	f000 f88c 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200000c4 	.word	0x200000c4
 8001f48:	40013000 	.word	0x40013000

08001f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	f107 0310 	add.w	r3, r7, #16
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f60:	4b39      	ldr	r3, [pc, #228]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a38      	ldr	r2, [pc, #224]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a32      	ldr	r2, [pc, #200]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f7e:	f043 0320 	orr.w	r3, r3, #32
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a2c      	ldr	r2, [pc, #176]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a26      	ldr	r2, [pc, #152]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001fae:	f043 0308 	orr.w	r3, r3, #8
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b24      	ldr	r3, [pc, #144]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fc6:	4821      	ldr	r0, [pc, #132]	; (800204c <MX_GPIO_Init+0x100>)
 8001fc8:	f000 fcfa 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd2:	481f      	ldr	r0, [pc, #124]	; (8002050 <MX_GPIO_Init+0x104>)
 8001fd4:	f000 fcf4 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8001fde:	481d      	ldr	r0, [pc, #116]	; (8002054 <MX_GPIO_Init+0x108>)
 8001fe0:	f000 fcee 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fea:	2301      	movs	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4813      	ldr	r0, [pc, #76]	; (800204c <MX_GPIO_Init+0x100>)
 8001ffe:	f000 fb5b 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <MX_GPIO_Init+0x104>)
 800201c:	f000 fb4c 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8002020:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4619      	mov	r1, r3
 8002038:	4806      	ldr	r0, [pc, #24]	; (8002054 <MX_GPIO_Init+0x108>)
 800203a:	f000 fb3d 	bl	80026b8 <HAL_GPIO_Init>

}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40011000 	.word	0x40011000
 8002050:	40010c00 	.word	0x40010c00
 8002054:	40010800 	.word	0x40010800

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
}
 800205e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002060:	e7fe      	b.n	8002060 <Error_Handler+0x8>
	...

08002064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_MspInit+0x5c>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_MspInit+0x5c>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6193      	str	r3, [r2, #24]
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_MspInit+0x5c>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_MspInit+0x5c>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <HAL_MspInit+0x5c>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_MspInit+0x5c>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_MspInit+0x60>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_MspInit+0x60>)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000

080020c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a15      	ldr	r2, [pc, #84]	; (8002138 <HAL_I2C_MspInit+0x70>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d123      	bne.n	8002130 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_I2C_MspInit+0x74>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a13      	ldr	r2, [pc, #76]	; (800213c <HAL_I2C_MspInit+0x74>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_I2C_MspInit+0x74>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002100:	23c0      	movs	r3, #192	; 0xc0
 8002102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002104:	2312      	movs	r3, #18
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4619      	mov	r1, r3
 8002112:	480b      	ldr	r0, [pc, #44]	; (8002140 <HAL_I2C_MspInit+0x78>)
 8002114:	f000 fad0 	bl	80026b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_I2C_MspInit+0x74>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_I2C_MspInit+0x74>)
 800211e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002122:	61d3      	str	r3, [r2, #28]
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_I2C_MspInit+0x74>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002130:	bf00      	nop
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40005400 	.word	0x40005400
 800213c:	40021000 	.word	0x40021000
 8002140:	40010c00 	.word	0x40010c00

08002144 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_SPI_MspInit+0x98>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d137      	bne.n	80021d4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002164:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_SPI_MspInit+0x9c>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <HAL_SPI_MspInit+0x9c>)
 800216a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_SPI_MspInit+0x9c>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_SPI_MspInit+0x9c>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_SPI_MspInit+0x9c>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_SPI_MspInit+0x9c>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002194:	23a0      	movs	r3, #160	; 0xa0
 8002196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4619      	mov	r1, r3
 80021a6:	480f      	ldr	r0, [pc, #60]	; (80021e4 <HAL_SPI_MspInit+0xa0>)
 80021a8:	f000 fa86 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021ac:	2340      	movs	r3, #64	; 0x40
 80021ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	4619      	mov	r1, r3
 80021be:	4809      	ldr	r0, [pc, #36]	; (80021e4 <HAL_SPI_MspInit+0xa0>)
 80021c0:	f000 fa7a 	bl	80026b8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	2023      	movs	r0, #35	; 0x23
 80021ca:	f000 f9c8 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80021ce:	2023      	movs	r0, #35	; 0x23
 80021d0:	f000 f9e1 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40013000 	.word	0x40013000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40010800 	.word	0x40010800

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800222e:	f000 f87f 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <SPI1_IRQHandler+0x10>)
 800223e:	f002 fe65 	bl	8004f0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200000c4 	.word	0x200000c4

0800224c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800225a:	490d      	ldr	r1, [pc, #52]	; (8002290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800227e:	f7ff ffe5 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002282:	f002 ffed 	bl	8005260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002286:	f7ff fd4b 	bl	8001d20 <main>
  bx lr
 800228a:	4770      	bx	lr
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002290:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002294:	08005308 	.word	0x08005308
  ldr r2, =_sbss
 8002298:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800229c:	20000120 	.word	0x20000120

080022a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC1_2_IRQHandler>
	...

080022a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_Init+0x28>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_Init+0x28>)
 80022ae:	f043 0310 	orr.w	r3, r3, #16
 80022b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f000 f947 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ba:	200f      	movs	r0, #15
 80022bc:	f000 f808 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c0:	f7ff fed0 	bl	8002064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x54>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f95f 	bl	80025b2 <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800230c:	f000 f927 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_InitTick+0x5c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000004 	.word	0x20000004
 8002328:	2000000c 	.word	0x2000000c
 800232c:	20000008 	.word	0x20000008

08002330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x1c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_IncTick+0x20>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <HAL_IncTick+0x20>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	2000000c 	.word	0x2000000c
 8002350:	2000011c 	.word	0x2000011c

08002354 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_GetTick+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	2000011c 	.word	0x2000011c

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fff0 	bl	8002354 <HAL_GetTick>
 8002374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_Delay+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238e:	bf00      	nop
 8002390:	f7ff ffe0 	bl	8002354 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000000c 	.word	0x2000000c

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4906      	ldr	r1, [pc, #24]	; (8002448 <__NVIC_EnableIRQ+0x34>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002528:	f7ff ff90 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff2d 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff42 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff90 	bl	80024a0 <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5f 	bl	800244c <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff35 	bl	8002414 <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d005      	beq.n	80025ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e051      	b.n	8002692 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020e 	bic.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_DMA_Abort_IT+0xd0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d029      	beq.n	800266c <HAL_DMA_Abort_IT+0xa0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a20      	ldr	r2, [pc, #128]	; (80026a0 <HAL_DMA_Abort_IT+0xd4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d022      	beq.n	8002668 <HAL_DMA_Abort_IT+0x9c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_DMA_Abort_IT+0xd8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d01a      	beq.n	8002662 <HAL_DMA_Abort_IT+0x96>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_DMA_Abort_IT+0xdc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d012      	beq.n	800265c <HAL_DMA_Abort_IT+0x90>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_DMA_Abort_IT+0xe0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00a      	beq.n	8002656 <HAL_DMA_Abort_IT+0x8a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <HAL_DMA_Abort_IT+0xe4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d102      	bne.n	8002650 <HAL_DMA_Abort_IT+0x84>
 800264a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800264e:	e00e      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 8002650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002654:	e00b      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 8002656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265a:	e008      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 800265c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002660:	e005      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 8002662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002666:	e002      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 8002668:	2310      	movs	r3, #16
 800266a:	e000      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 800266c:	2301      	movs	r3, #1
 800266e:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_DMA_Abort_IT+0xe8>)
 8002670:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
    } 
  }
  return status;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40020008 	.word	0x40020008
 80026a0:	4002001c 	.word	0x4002001c
 80026a4:	40020030 	.word	0x40020030
 80026a8:	40020044 	.word	0x40020044
 80026ac:	40020058 	.word	0x40020058
 80026b0:	4002006c 	.word	0x4002006c
 80026b4:	40020000 	.word	0x40020000

080026b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b08b      	sub	sp, #44	; 0x2c
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ca:	e169      	b.n	80029a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026cc:	2201      	movs	r2, #1
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8158 	bne.w	800299a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a9a      	ldr	r2, [pc, #616]	; (8002958 <HAL_GPIO_Init+0x2a0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d05e      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 80026f4:	4a98      	ldr	r2, [pc, #608]	; (8002958 <HAL_GPIO_Init+0x2a0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d875      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 80026fa:	4a98      	ldr	r2, [pc, #608]	; (800295c <HAL_GPIO_Init+0x2a4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d058      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002700:	4a96      	ldr	r2, [pc, #600]	; (800295c <HAL_GPIO_Init+0x2a4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d86f      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002706:	4a96      	ldr	r2, [pc, #600]	; (8002960 <HAL_GPIO_Init+0x2a8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d052      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 800270c:	4a94      	ldr	r2, [pc, #592]	; (8002960 <HAL_GPIO_Init+0x2a8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d869      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002712:	4a94      	ldr	r2, [pc, #592]	; (8002964 <HAL_GPIO_Init+0x2ac>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04c      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002718:	4a92      	ldr	r2, [pc, #584]	; (8002964 <HAL_GPIO_Init+0x2ac>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d863      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 800271e:	4a92      	ldr	r2, [pc, #584]	; (8002968 <HAL_GPIO_Init+0x2b0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d046      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002724:	4a90      	ldr	r2, [pc, #576]	; (8002968 <HAL_GPIO_Init+0x2b0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d85d      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 800272a:	2b12      	cmp	r3, #18
 800272c:	d82a      	bhi.n	8002784 <HAL_GPIO_Init+0xcc>
 800272e:	2b12      	cmp	r3, #18
 8002730:	d859      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <HAL_GPIO_Init+0x80>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	080027b3 	.word	0x080027b3
 800273c:	0800278d 	.word	0x0800278d
 8002740:	0800279f 	.word	0x0800279f
 8002744:	080027e1 	.word	0x080027e1
 8002748:	080027e7 	.word	0x080027e7
 800274c:	080027e7 	.word	0x080027e7
 8002750:	080027e7 	.word	0x080027e7
 8002754:	080027e7 	.word	0x080027e7
 8002758:	080027e7 	.word	0x080027e7
 800275c:	080027e7 	.word	0x080027e7
 8002760:	080027e7 	.word	0x080027e7
 8002764:	080027e7 	.word	0x080027e7
 8002768:	080027e7 	.word	0x080027e7
 800276c:	080027e7 	.word	0x080027e7
 8002770:	080027e7 	.word	0x080027e7
 8002774:	080027e7 	.word	0x080027e7
 8002778:	080027e7 	.word	0x080027e7
 800277c:	08002795 	.word	0x08002795
 8002780:	080027a9 	.word	0x080027a9
 8002784:	4a79      	ldr	r2, [pc, #484]	; (800296c <HAL_GPIO_Init+0x2b4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800278a:	e02c      	b.n	80027e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e029      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	3304      	adds	r3, #4
 800279a:	623b      	str	r3, [r7, #32]
          break;
 800279c:	e024      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	3308      	adds	r3, #8
 80027a4:	623b      	str	r3, [r7, #32]
          break;
 80027a6:	e01f      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	330c      	adds	r3, #12
 80027ae:	623b      	str	r3, [r7, #32]
          break;
 80027b0:	e01a      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ba:	2304      	movs	r3, #4
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e013      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c8:	2308      	movs	r3, #8
 80027ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	611a      	str	r2, [r3, #16]
          break;
 80027d2:	e009      	b.n	80027e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d4:	2308      	movs	r3, #8
 80027d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	615a      	str	r2, [r3, #20]
          break;
 80027de:	e003      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
          break;
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          break;
 80027e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2bff      	cmp	r3, #255	; 0xff
 80027ec:	d801      	bhi.n	80027f2 <HAL_GPIO_Init+0x13a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_Init+0x13e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	d802      	bhi.n	8002804 <HAL_GPIO_Init+0x14c>
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	e002      	b.n	800280a <HAL_GPIO_Init+0x152>
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	3b08      	subs	r3, #8
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	210f      	movs	r1, #15
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	401a      	ands	r2, r3
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	431a      	orrs	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80b1 	beq.w	800299a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002838:	4b4d      	ldr	r3, [pc, #308]	; (8002970 <HAL_GPIO_Init+0x2b8>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a4c      	ldr	r2, [pc, #304]	; (8002970 <HAL_GPIO_Init+0x2b8>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <HAL_GPIO_Init+0x2b8>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002850:	4a48      	ldr	r2, [pc, #288]	; (8002974 <HAL_GPIO_Init+0x2bc>)
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a40      	ldr	r2, [pc, #256]	; (8002978 <HAL_GPIO_Init+0x2c0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_GPIO_Init+0x1ec>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a3f      	ldr	r2, [pc, #252]	; (800297c <HAL_GPIO_Init+0x2c4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00d      	beq.n	80028a0 <HAL_GPIO_Init+0x1e8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3e      	ldr	r2, [pc, #248]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d007      	beq.n	800289c <HAL_GPIO_Init+0x1e4>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3d      	ldr	r2, [pc, #244]	; (8002984 <HAL_GPIO_Init+0x2cc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_GPIO_Init+0x1e0>
 8002894:	2303      	movs	r3, #3
 8002896:	e006      	b.n	80028a6 <HAL_GPIO_Init+0x1ee>
 8002898:	2304      	movs	r3, #4
 800289a:	e004      	b.n	80028a6 <HAL_GPIO_Init+0x1ee>
 800289c:	2302      	movs	r3, #2
 800289e:	e002      	b.n	80028a6 <HAL_GPIO_Init+0x1ee>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_GPIO_Init+0x1ee>
 80028a4:	2300      	movs	r3, #0
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	f002 0203 	and.w	r2, r2, #3
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	4093      	lsls	r3, r2
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028b6:	492f      	ldr	r1, [pc, #188]	; (8002974 <HAL_GPIO_Init+0x2bc>)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3302      	adds	r3, #2
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028d0:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	492c      	ldr	r1, [pc, #176]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4928      	ldr	r1, [pc, #160]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4922      	ldr	r1, [pc, #136]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	491e      	ldr	r1, [pc, #120]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 8002910:	4013      	ands	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4918      	ldr	r1, [pc, #96]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	43db      	mvns	r3, r3
 8002936:	4914      	ldr	r1, [pc, #80]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 8002938:	4013      	ands	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d021      	beq.n	800298c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	490e      	ldr	r1, [pc, #56]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	60cb      	str	r3, [r1, #12]
 8002954:	e021      	b.n	800299a <HAL_GPIO_Init+0x2e2>
 8002956:	bf00      	nop
 8002958:	10320000 	.word	0x10320000
 800295c:	10310000 	.word	0x10310000
 8002960:	10220000 	.word	0x10220000
 8002964:	10210000 	.word	0x10210000
 8002968:	10120000 	.word	0x10120000
 800296c:	10110000 	.word	0x10110000
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	40010800 	.word	0x40010800
 800297c:	40010c00 	.word	0x40010c00
 8002980:	40011000 	.word	0x40011000
 8002984:	40011400 	.word	0x40011400
 8002988:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_GPIO_Init+0x304>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	43db      	mvns	r3, r3
 8002994:	4909      	ldr	r1, [pc, #36]	; (80029bc <HAL_GPIO_Init+0x304>)
 8002996:	4013      	ands	r3, r2
 8002998:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	3301      	adds	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f47f ae8e 	bne.w	80026cc <HAL_GPIO_Init+0x14>
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	372c      	adds	r7, #44	; 0x2c
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40010400 	.word	0x40010400

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	041a      	lsls	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	041a      	lsls	r2, r3, #16
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43d9      	mvns	r1, r3
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	400b      	ands	r3, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	611a      	str	r2, [r3, #16]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e12b      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff fb3c 	bl	80020c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	; 0x24
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a88:	f002 f84e 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a81      	ldr	r2, [pc, #516]	; (8002c98 <HAL_I2C_Init+0x274>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d807      	bhi.n	8002aa8 <HAL_I2C_Init+0x84>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a80      	ldr	r2, [pc, #512]	; (8002c9c <HAL_I2C_Init+0x278>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e006      	b.n	8002ab6 <HAL_I2C_Init+0x92>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a7d      	ldr	r2, [pc, #500]	; (8002ca0 <HAL_I2C_Init+0x27c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0e7      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a78      	ldr	r2, [pc, #480]	; (8002ca4 <HAL_I2C_Init+0x280>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0c9b      	lsrs	r3, r3, #18
 8002ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	; (8002c98 <HAL_I2C_Init+0x274>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d802      	bhi.n	8002af8 <HAL_I2C_Init+0xd4>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3301      	adds	r3, #1
 8002af6:	e009      	b.n	8002b0c <HAL_I2C_Init+0xe8>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	4a69      	ldr	r2, [pc, #420]	; (8002ca8 <HAL_I2C_Init+0x284>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	495c      	ldr	r1, [pc, #368]	; (8002c98 <HAL_I2C_Init+0x274>)
 8002b28:	428b      	cmp	r3, r1
 8002b2a:	d819      	bhi.n	8002b60 <HAL_I2C_Init+0x13c>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e59      	subs	r1, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b40:	400b      	ands	r3, r1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_I2C_Init+0x138>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1e59      	subs	r1, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5a:	e051      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	e04f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d111      	bne.n	8002b8c <HAL_I2C_Init+0x168>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	440b      	add	r3, r1
 8002b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e012      	b.n	8002bb2 <HAL_I2C_Init+0x18e>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	0099      	lsls	r1, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Init+0x196>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e022      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10e      	bne.n	8002be0 <HAL_I2C_Init+0x1bc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1e58      	subs	r0, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	440b      	add	r3, r1
 8002bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bde:	e00f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	0099      	lsls	r1, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	6809      	ldr	r1, [r1, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6911      	ldr	r1, [r2, #16]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68d2      	ldr	r2, [r2, #12]
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	000186a0 	.word	0x000186a0
 8002c9c:	001e847f 	.word	0x001e847f
 8002ca0:	003d08ff 	.word	0x003d08ff
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	10624dd3 	.word	0x10624dd3

08002cac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7ff fb48 	bl	8002354 <HAL_GetTick>
 8002cc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 80e0 	bne.w	8002e94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4970      	ldr	r1, [pc, #448]	; (8002ea0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f001 f972 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0d3      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_Master_Transmit+0x50>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0cc      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d007      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2221      	movs	r2, #33	; 0x21
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	893a      	ldrh	r2, [r7, #8]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a50      	ldr	r2, [pc, #320]	; (8002ea4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fe5e 	bl	8003a2c <I2C_MasterRequestWrite>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e08d      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d90:	e066      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	6a39      	ldr	r1, [r7, #32]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f001 f9ec 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11b      	bne.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d017      	beq.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6a39      	ldr	r1, [r7, #32]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f001 f9dc 	bl	80041f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d107      	bne.n	8002e5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01a      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d194      	bne.n	8002d92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	00100002 	.word	0x00100002
 8002ea4:	ffff0000 	.word	0xffff0000

08002ea8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff fa48 	bl	8002354 <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	f040 823f 	bne.w	8003352 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2319      	movs	r3, #25
 8002eda:	2201      	movs	r2, #1
 8002edc:	497f      	ldr	r1, [pc, #508]	; (80030dc <HAL_I2C_Master_Receive+0x234>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f001 f872 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	e232      	b.n	8003354 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_I2C_Master_Receive+0x54>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e22b      	b.n	8003354 <HAL_I2C_Master_Receive+0x4ac>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d007      	beq.n	8002f22 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2222      	movs	r2, #34	; 0x22
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	893a      	ldrh	r2, [r7, #8]
 8002f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a5f      	ldr	r2, [pc, #380]	; (80030e0 <HAL_I2C_Master_Receive+0x238>)
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fde0 	bl	8003b30 <I2C_MasterRequestRead>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1ec      	b.n	8003354 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d113      	bne.n	8002faa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e1c0      	b.n	800332c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d11e      	bne.n	8002ff0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc2:	b672      	cpsid	i
}
 8002fc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fec:	b662      	cpsie	i
}
 8002fee:	e035      	b.n	800305c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11e      	bne.n	8003036 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003006:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003008:	b672      	cpsid	i
}
 800300a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003032:	b662      	cpsie	i
}
 8003034:	e012      	b.n	800305c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800305c:	e166      	b.n	800332c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	2b03      	cmp	r3, #3
 8003064:	f200 811f 	bhi.w	80032a6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	2b01      	cmp	r3, #1
 800306e:	d123      	bne.n	80030b8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f001 f8ff 	bl	8004278 <I2C_WaitOnRXNEFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e167      	b.n	8003354 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b6:	e139      	b.n	800332c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d152      	bne.n	8003166 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	2200      	movs	r2, #0
 80030c8:	4906      	ldr	r1, [pc, #24]	; (80030e4 <HAL_I2C_Master_Receive+0x23c>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 ff7c 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e13c      	b.n	8003354 <HAL_I2C_Master_Receive+0x4ac>
 80030da:	bf00      	nop
 80030dc:	00100002 	.word	0x00100002
 80030e0:	ffff0000 	.word	0xffff0000
 80030e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800312e:	b662      	cpsie	i
}
 8003130:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003164:	e0e2      	b.n	800332c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	2200      	movs	r2, #0
 800316e:	497b      	ldr	r1, [pc, #492]	; (800335c <HAL_I2C_Master_Receive+0x4b4>)
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 ff29 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0e9      	b.n	8003354 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003190:	b672      	cpsid	i
}
 8003192:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031c6:	4b66      	ldr	r3, [pc, #408]	; (8003360 <HAL_I2C_Master_Receive+0x4b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	08db      	lsrs	r3, r3, #3
 80031cc:	4a65      	ldr	r2, [pc, #404]	; (8003364 <HAL_I2C_Master_Receive+0x4bc>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a1a      	lsrs	r2, r3, #8
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00da      	lsls	r2, r3, #3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d118      	bne.n	800321e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800320e:	b662      	cpsie	i
}
 8003210:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e09a      	b.n	8003354 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d1d9      	bne.n	80031e0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800326e:	b662      	cpsie	i
}
 8003270:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032a4:	e042      	b.n	800332c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 ffe4 	bl	8004278 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e04c      	b.n	8003354 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d118      	bne.n	800332c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f ae94 	bne.w	800305e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e000      	b.n	8003354 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
  }
}
 8003354:	4618      	mov	r0, r3
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00010004 	.word	0x00010004
 8003360:	20000004 	.word	0x20000004
 8003364:	14f8b589 	.word	0x14f8b589

08003368 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	4603      	mov	r3, r0
 8003378:	817b      	strh	r3, [r7, #10]
 800337a:	460b      	mov	r3, r1
 800337c:	813b      	strh	r3, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003382:	f7fe ffe7 	bl	8002354 <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b20      	cmp	r3, #32
 8003392:	f040 80d9 	bne.w	8003548 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	2319      	movs	r3, #25
 800339c:	2201      	movs	r2, #1
 800339e:	496d      	ldr	r1, [pc, #436]	; (8003554 <HAL_I2C_Mem_Write+0x1ec>)
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fe11 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0cc      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_I2C_Mem_Write+0x56>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0c5      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d007      	beq.n	80033e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2221      	movs	r2, #33	; 0x21
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2240      	movs	r2, #64	; 0x40
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a3a      	ldr	r2, [r7, #32]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a4d      	ldr	r2, [pc, #308]	; (8003558 <HAL_I2C_Mem_Write+0x1f0>)
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003426:	88f8      	ldrh	r0, [r7, #6]
 8003428:	893a      	ldrh	r2, [r7, #8]
 800342a:	8979      	ldrh	r1, [r7, #10]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4603      	mov	r3, r0
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fc48 	bl	8003ccc <I2C_RequestMemoryWrite>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d052      	beq.n	80034e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e081      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fe92 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b04      	cmp	r3, #4
 800345c:	d107      	bne.n	800346e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06b      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d11b      	bne.n	80034e8 <HAL_I2C_Mem_Write+0x180>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d017      	beq.n	80034e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1aa      	bne.n	8003446 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fe7e 	bl	80041f6 <I2C_WaitOnBTFFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	2b04      	cmp	r3, #4
 8003506:	d107      	bne.n	8003518 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e016      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	00100002 	.word	0x00100002
 8003558:	ffff0000 	.word	0xffff0000

0800355c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	4603      	mov	r3, r0
 800356c:	817b      	strh	r3, [r7, #10]
 800356e:	460b      	mov	r3, r1
 8003570:	813b      	strh	r3, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800357a:	f7fe feeb 	bl	8002354 <HAL_GetTick>
 800357e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b20      	cmp	r3, #32
 800358a:	f040 8244 	bne.w	8003a16 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2319      	movs	r3, #25
 8003594:	2201      	movs	r2, #1
 8003596:	4982      	ldr	r1, [pc, #520]	; (80037a0 <HAL_I2C_Mem_Read+0x244>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fd15 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
 80035a6:	e237      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Mem_Read+0x5a>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e230      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4bc>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d007      	beq.n	80035dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2222      	movs	r2, #34	; 0x22
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2240      	movs	r2, #64	; 0x40
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800360c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a62      	ldr	r2, [pc, #392]	; (80037a4 <HAL_I2C_Mem_Read+0x248>)
 800361c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800361e:	88f8      	ldrh	r0, [r7, #6]
 8003620:	893a      	ldrh	r2, [r7, #8]
 8003622:	8979      	ldrh	r1, [r7, #10]
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	4603      	mov	r3, r0
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fbe2 	bl	8003df8 <I2C_RequestMemoryRead>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1ec      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e1c0      	b.n	80039f0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	2b01      	cmp	r3, #1
 8003674:	d11e      	bne.n	80036b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003684:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003686:	b672      	cpsid	i
}
 8003688:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036b0:	b662      	cpsie	i
}
 80036b2:	e035      	b.n	8003720 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d11e      	bne.n	80036fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036cc:	b672      	cpsid	i
}
 80036ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036f6:	b662      	cpsie	i
}
 80036f8:	e012      	b.n	8003720 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003708:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003720:	e166      	b.n	80039f0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	2b03      	cmp	r3, #3
 8003728:	f200 811f 	bhi.w	800396a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	2b01      	cmp	r3, #1
 8003732:	d123      	bne.n	800377c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fd9d 	bl	8004278 <I2C_WaitOnRXNEFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e167      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
 800377a:	e139      	b.n	80039f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	2b02      	cmp	r3, #2
 8003782:	d152      	bne.n	800382a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	2200      	movs	r2, #0
 800378c:	4906      	ldr	r1, [pc, #24]	; (80037a8 <HAL_I2C_Mem_Read+0x24c>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fc1a 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e13c      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4bc>
 800379e:	bf00      	nop
 80037a0:	00100002 	.word	0x00100002
 80037a4:	ffff0000 	.word	0xffff0000
 80037a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80037ac:	b672      	cpsid	i
}
 80037ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037f2:	b662      	cpsie	i
}
 80037f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003828:	e0e2      	b.n	80039f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	2200      	movs	r2, #0
 8003832:	497b      	ldr	r1, [pc, #492]	; (8003a20 <HAL_I2C_Mem_Read+0x4c4>)
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fbc7 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0e9      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003852:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003854:	b672      	cpsid	i
}
 8003856:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800388a:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <HAL_I2C_Mem_Read+0x4c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	08db      	lsrs	r3, r3, #3
 8003890:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <HAL_I2C_Mem_Read+0x4cc>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	0a1a      	lsrs	r2, r3, #8
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00da      	lsls	r2, r3, #3
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d118      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038d2:	b662      	cpsie	i
}
 80038d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e09a      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d1d9      	bne.n	80038a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003932:	b662      	cpsie	i
}
 8003934:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003968:	e042      	b.n	80039f0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fc82 	bl	8004278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e04c      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d118      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f47f ae94 	bne.w	8003722 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	00010004 	.word	0x00010004
 8003a24:	20000004 	.word	0x20000004
 8003a28:	14f8b589 	.word	0x14f8b589

08003a2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d006      	beq.n	8003a56 <I2C_MasterRequestWrite+0x2a>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d003      	beq.n	8003a56 <I2C_MasterRequestWrite+0x2a>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a54:	d108      	bne.n	8003a68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e00b      	b.n	8003a80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	2b12      	cmp	r3, #18
 8003a6e:	d107      	bne.n	8003a80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fa9b 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa6:	d103      	bne.n	8003ab0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e035      	b.n	8003b20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003abc:	d108      	bne.n	8003ad0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	e01b      	b.n	8003b08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ad0:	897b      	ldrh	r3, [r7, #10]
 8003ad2:	11db      	asrs	r3, r3, #7
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0306 	and.w	r3, r3, #6
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f063 030f 	orn	r3, r3, #15
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	490e      	ldr	r1, [pc, #56]	; (8003b28 <I2C_MasterRequestWrite+0xfc>)
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fac1 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e010      	b.n	8003b20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4907      	ldr	r1, [pc, #28]	; (8003b2c <I2C_MasterRequestWrite+0x100>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fab1 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	00010008 	.word	0x00010008
 8003b2c:	00010002 	.word	0x00010002

08003b30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d006      	beq.n	8003b6a <I2C_MasterRequestRead+0x3a>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d003      	beq.n	8003b6a <I2C_MasterRequestRead+0x3a>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b68:	d108      	bne.n	8003b7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e00b      	b.n	8003b94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	2b11      	cmp	r3, #17
 8003b82:	d107      	bne.n	8003b94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fa11 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bba:	d103      	bne.n	8003bc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e079      	b.n	8003cbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd0:	d108      	bne.n	8003be4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bd2:	897b      	ldrh	r3, [r7, #10]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	611a      	str	r2, [r3, #16]
 8003be2:	e05f      	b.n	8003ca4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003be4:	897b      	ldrh	r3, [r7, #10]
 8003be6:	11db      	asrs	r3, r3, #7
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f003 0306 	and.w	r3, r3, #6
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f063 030f 	orn	r3, r3, #15
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4930      	ldr	r1, [pc, #192]	; (8003cc4 <I2C_MasterRequestRead+0x194>)
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fa37 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e054      	b.n	8003cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c12:	897b      	ldrh	r3, [r7, #10]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4929      	ldr	r1, [pc, #164]	; (8003cc8 <I2C_MasterRequestRead+0x198>)
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fa27 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e044      	b.n	8003cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f9af 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7e:	d103      	bne.n	8003c88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e017      	b.n	8003cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	11db      	asrs	r3, r3, #7
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 0306 	and.w	r3, r3, #6
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f063 030e 	orn	r3, r3, #14
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4907      	ldr	r1, [pc, #28]	; (8003cc8 <I2C_MasterRequestRead+0x198>)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f9e3 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	00010008 	.word	0x00010008
 8003cc8:	00010002 	.word	0x00010002

08003ccc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	813b      	strh	r3, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f960 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1c:	d103      	bne.n	8003d26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e05f      	b.n	8003dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	492d      	ldr	r1, [pc, #180]	; (8003df4 <I2C_RequestMemoryWrite+0x128>)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f998 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e04c      	b.n	8003dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	6a39      	ldr	r1, [r7, #32]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fa02 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d107      	bne.n	8003d8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e02b      	b.n	8003dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d98:	893b      	ldrh	r3, [r7, #8]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	611a      	str	r2, [r3, #16]
 8003da2:	e021      	b.n	8003de8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	6a39      	ldr	r1, [r7, #32]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f9dc 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d107      	bne.n	8003dda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e005      	b.n	8003dea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dde:	893b      	ldrh	r3, [r7, #8]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	00010002 	.word	0x00010002

08003df8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	817b      	strh	r3, [r7, #10]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	813b      	strh	r3, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f8c2 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00d      	beq.n	8003e66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e58:	d103      	bne.n	8003e62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e0aa      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e66:	897b      	ldrh	r3, [r7, #10]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	4952      	ldr	r1, [pc, #328]	; (8003fc4 <I2C_RequestMemoryRead+0x1cc>)
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f8fa 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e097      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	6a39      	ldr	r1, [r7, #32]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f964 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d107      	bne.n	8003eca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e076      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d105      	bne.n	8003ee0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]
 8003ede:	e021      	b.n	8003f24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee0:	893b      	ldrh	r3, [r7, #8]
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	6a39      	ldr	r1, [r7, #32]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f93e 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d107      	bne.n	8003f16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e050      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f1a:	893b      	ldrh	r3, [r7, #8]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f26:	6a39      	ldr	r1, [r7, #32]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f923 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00d      	beq.n	8003f50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d107      	bne.n	8003f4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e035      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f82b 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00d      	beq.n	8003f94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f86:	d103      	bne.n	8003f90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e013      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f94:	897b      	ldrh	r3, [r7, #10]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	4906      	ldr	r1, [pc, #24]	; (8003fc4 <I2C_RequestMemoryRead+0x1cc>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f863 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	00010002 	.word	0x00010002

08003fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fd8:	e025      	b.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe0:	d021      	beq.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe2:	f7fe f9b7 	bl	8002354 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d116      	bne.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0220 	orr.w	r2, r3, #32
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e023      	b.n	800406e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10d      	bne.n	800404c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	43da      	mvns	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	e00c      	b.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf0c      	ite	eq
 800405e:	2301      	moveq	r3, #1
 8004060:	2300      	movne	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	429a      	cmp	r2, r3
 800406a:	d0b6      	beq.n	8003fda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004084:	e051      	b.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004094:	d123      	bne.n	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e046      	b.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e4:	d021      	beq.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7fe f935 	bl	8002354 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d116      	bne.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e020      	b.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d10c      	bne.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e00b      	b.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	43da      	mvns	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d18d      	bne.n	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004180:	e02d      	b.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f8ce 	bl	8004324 <I2C_IsAcknowledgeFailed>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e02d      	b.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004198:	d021      	beq.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe f8db 	bl	8002354 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d116      	bne.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e007      	b.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b80      	cmp	r3, #128	; 0x80
 80041ea:	d1ca      	bne.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004202:	e02d      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f88d 	bl	8004324 <I2C_IsAcknowledgeFailed>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e02d      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800421a:	d021      	beq.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421c:	f7fe f89a 	bl	8002354 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d116      	bne.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f043 0220 	orr.w	r2, r3, #32
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e007      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d1ca      	bne.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004284:	e042      	b.n	800430c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b10      	cmp	r3, #16
 8004292:	d119      	bne.n	80042c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0210 	mvn.w	r2, #16
 800429c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e029      	b.n	800431c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c8:	f7fe f844 	bl	8002354 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d116      	bne.n	800430c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e007      	b.n	800431c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d1b5      	bne.n	8004286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d11b      	bne.n	8004374 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004344:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0204 	orr.w	r2, r3, #4
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e272      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 8087 	beq.w	80044ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043a0:	4b92      	ldr	r3, [pc, #584]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d00c      	beq.n	80043c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043ac:	4b8f      	ldr	r3, [pc, #572]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d112      	bne.n	80043de <HAL_RCC_OscConfig+0x5e>
 80043b8:	4b8c      	ldr	r3, [pc, #560]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d10b      	bne.n	80043de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c6:	4b89      	ldr	r3, [pc, #548]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d06c      	beq.n	80044ac <HAL_RCC_OscConfig+0x12c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d168      	bne.n	80044ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e24c      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0x76>
 80043e8:	4b80      	ldr	r3, [pc, #512]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a7f      	ldr	r2, [pc, #508]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80043ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	e02e      	b.n	8004454 <HAL_RCC_OscConfig+0xd4>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0x98>
 80043fe:	4b7b      	ldr	r3, [pc, #492]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a7a      	ldr	r2, [pc, #488]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b78      	ldr	r3, [pc, #480]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a77      	ldr	r2, [pc, #476]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e01d      	b.n	8004454 <HAL_RCC_OscConfig+0xd4>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0xbc>
 8004422:	4b72      	ldr	r3, [pc, #456]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a71      	ldr	r2, [pc, #452]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6e      	ldr	r2, [pc, #440]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e00b      	b.n	8004454 <HAL_RCC_OscConfig+0xd4>
 800443c:	4b6b      	ldr	r3, [pc, #428]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6a      	ldr	r2, [pc, #424]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b68      	ldr	r3, [pc, #416]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a67      	ldr	r2, [pc, #412]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 800444e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d013      	beq.n	8004484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fd ff7a 	bl	8002354 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004464:	f7fd ff76 	bl	8002354 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e200      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b5d      	ldr	r3, [pc, #372]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0xe4>
 8004482:	e014      	b.n	80044ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fd ff66 	bl	8002354 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800448c:	f7fd ff62 	bl	8002354 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e1ec      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449e:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x10c>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d063      	beq.n	8004582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ba:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044c6:	4b49      	ldr	r3, [pc, #292]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d11c      	bne.n	800450c <HAL_RCC_OscConfig+0x18c>
 80044d2:	4b46      	ldr	r3, [pc, #280]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d116      	bne.n	800450c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044de:	4b43      	ldr	r3, [pc, #268]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_RCC_OscConfig+0x176>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d001      	beq.n	80044f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1c0      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4939      	ldr	r1, [pc, #228]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450a:	e03a      	b.n	8004582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004514:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451a:	f7fd ff1b 	bl	8002354 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004522:	f7fd ff17 	bl	8002354 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e1a1      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	4b2d      	ldr	r3, [pc, #180]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4927      	ldr	r1, [pc, #156]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
 8004554:	e015      	b.n	8004582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004556:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fd fefa 	bl	8002354 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004564:	f7fd fef6 	bl	8002354 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e180      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d03a      	beq.n	8004604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d019      	beq.n	80045ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004596:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <HAL_RCC_OscConfig+0x274>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459c:	f7fd feda 	bl	8002354 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fd fed6 	bl	8002354 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e160      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <HAL_RCC_OscConfig+0x26c>)
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f000 fac4 	bl	8004b50 <RCC_Delay>
 80045c8:	e01c      	b.n	8004604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_RCC_OscConfig+0x274>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d0:	f7fd fec0 	bl	8002354 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d6:	e00f      	b.n	80045f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d8:	f7fd febc 	bl	8002354 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d908      	bls.n	80045f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e146      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	42420000 	.word	0x42420000
 80045f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	4b92      	ldr	r3, [pc, #584]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e9      	bne.n	80045d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80a6 	beq.w	800475e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004616:	4b8b      	ldr	r3, [pc, #556]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10d      	bne.n	800463e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	4b88      	ldr	r3, [pc, #544]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	4a87      	ldr	r2, [pc, #540]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462c:	61d3      	str	r3, [r2, #28]
 800462e:	4b85      	ldr	r3, [pc, #532]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463e:	4b82      	ldr	r3, [pc, #520]	; (8004848 <HAL_RCC_OscConfig+0x4c8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464a:	4b7f      	ldr	r3, [pc, #508]	; (8004848 <HAL_RCC_OscConfig+0x4c8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7e      	ldr	r2, [pc, #504]	; (8004848 <HAL_RCC_OscConfig+0x4c8>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004656:	f7fd fe7d 	bl	8002354 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fd fe79 	bl	8002354 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b64      	cmp	r3, #100	; 0x64
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e103      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b75      	ldr	r3, [pc, #468]	; (8004848 <HAL_RCC_OscConfig+0x4c8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x312>
 8004684:	4b6f      	ldr	r3, [pc, #444]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	4a6e      	ldr	r2, [pc, #440]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6213      	str	r3, [r2, #32]
 8004690:	e02d      	b.n	80046ee <HAL_RCC_OscConfig+0x36e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x334>
 800469a:	4b6a      	ldr	r3, [pc, #424]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	4a69      	ldr	r2, [pc, #420]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6213      	str	r3, [r2, #32]
 80046a6:	4b67      	ldr	r3, [pc, #412]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	4a66      	ldr	r2, [pc, #408]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	f023 0304 	bic.w	r3, r3, #4
 80046b0:	6213      	str	r3, [r2, #32]
 80046b2:	e01c      	b.n	80046ee <HAL_RCC_OscConfig+0x36e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	d10c      	bne.n	80046d6 <HAL_RCC_OscConfig+0x356>
 80046bc:	4b61      	ldr	r3, [pc, #388]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	4a60      	ldr	r2, [pc, #384]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	f043 0304 	orr.w	r3, r3, #4
 80046c6:	6213      	str	r3, [r2, #32]
 80046c8:	4b5e      	ldr	r3, [pc, #376]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	4a5d      	ldr	r2, [pc, #372]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6213      	str	r3, [r2, #32]
 80046d4:	e00b      	b.n	80046ee <HAL_RCC_OscConfig+0x36e>
 80046d6:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	4a5a      	ldr	r2, [pc, #360]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6213      	str	r3, [r2, #32]
 80046e2:	4b58      	ldr	r3, [pc, #352]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	4a57      	ldr	r2, [pc, #348]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d015      	beq.n	8004722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f6:	f7fd fe2d 	bl	8002354 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fd fe29 	bl	8002354 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e0b1      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004714:	4b4b      	ldr	r3, [pc, #300]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ee      	beq.n	80046fe <HAL_RCC_OscConfig+0x37e>
 8004720:	e014      	b.n	800474c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004722:	f7fd fe17 	bl	8002354 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fd fe13 	bl	8002354 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e09b      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004740:	4b40      	ldr	r3, [pc, #256]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ee      	bne.n	800472a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004752:	4b3c      	ldr	r3, [pc, #240]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	4a3b      	ldr	r2, [pc, #236]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8087 	beq.w	8004876 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004768:	4b36      	ldr	r3, [pc, #216]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b08      	cmp	r3, #8
 8004772:	d061      	beq.n	8004838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d146      	bne.n	800480a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477c:	4b33      	ldr	r3, [pc, #204]	; (800484c <HAL_RCC_OscConfig+0x4cc>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004782:	f7fd fde7 	bl	8002354 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478a:	f7fd fde3 	bl	8002354 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e06d      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479c:	4b29      	ldr	r3, [pc, #164]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b0:	d108      	bne.n	80047c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047b2:	4b24      	ldr	r3, [pc, #144]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	4921      	ldr	r1, [pc, #132]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c4:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a19      	ldr	r1, [r3, #32]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	430b      	orrs	r3, r1
 80047d6:	491b      	ldr	r1, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_OscConfig+0x4cc>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fd fdb7 	bl	8002354 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ea:	f7fd fdb3 	bl	8002354 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e03d      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x46a>
 8004808:	e035      	b.n	8004876 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480a:	4b10      	ldr	r3, [pc, #64]	; (800484c <HAL_RCC_OscConfig+0x4cc>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fd fda0 	bl	8002354 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fd fd9c 	bl	8002354 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e026      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_OscConfig+0x4c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x498>
 8004836:	e01e      	b.n	8004876 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d107      	bne.n	8004850 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e019      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
 8004844:	40021000 	.word	0x40021000
 8004848:	40007000 	.word	0x40007000
 800484c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_OscConfig+0x500>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	429a      	cmp	r2, r3
 8004862:	d106      	bne.n	8004872 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d001      	beq.n	8004876 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0d0      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004898:	4b6a      	ldr	r3, [pc, #424]	; (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d910      	bls.n	80048c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b67      	ldr	r3, [pc, #412]	; (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 0207 	bic.w	r2, r3, #7
 80048ae:	4965      	ldr	r1, [pc, #404]	; (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0b8      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d020      	beq.n	8004916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e0:	4b59      	ldr	r3, [pc, #356]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4a58      	ldr	r2, [pc, #352]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f8:	4b53      	ldr	r3, [pc, #332]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a52      	ldr	r2, [pc, #328]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004904:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	494d      	ldr	r1, [pc, #308]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004912:	4313      	orrs	r3, r2
 8004914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d040      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d115      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e07f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d107      	bne.n	8004952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e073      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004952:	4b3d      	ldr	r3, [pc, #244]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e06b      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004962:	4b39      	ldr	r3, [pc, #228]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f023 0203 	bic.w	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4936      	ldr	r1, [pc, #216]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	4313      	orrs	r3, r2
 8004972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004974:	f7fd fcee 	bl	8002354 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	e00a      	b.n	8004992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800497c:	f7fd fcea 	bl	8002354 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	; 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e053      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004992:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 020c 	and.w	r2, r3, #12
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d1eb      	bne.n	800497c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049a4:	4b27      	ldr	r3, [pc, #156]	; (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d210      	bcs.n	80049d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 0207 	bic.w	r2, r3, #7
 80049ba:	4922      	ldr	r1, [pc, #136]	; (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e032      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e0:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4916      	ldr	r1, [pc, #88]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	490e      	ldr	r1, [pc, #56]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a12:	f000 f821 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004a16:	4602      	mov	r2, r0
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	490a      	ldr	r1, [pc, #40]	; (8004a4c <HAL_RCC_ClockConfig+0x1c8>)
 8004a24:	5ccb      	ldrb	r3, [r1, r3]
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <HAL_RCC_ClockConfig+0x1cc>)
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCC_ClockConfig+0x1d0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd fc4c 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40022000 	.word	0x40022000
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	080052e0 	.word	0x080052e0
 8004a50:	20000004 	.word	0x20000004
 8004a54:	20000008 	.word	0x20000008

08004a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	b490      	push	{r4, r7}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a5e:	4b29      	ldr	r3, [pc, #164]	; (8004b04 <HAL_RCC_GetSysClockFreq+0xac>)
 8004a60:	1d3c      	adds	r4, r7, #4
 8004a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a68:	f240 2301 	movw	r3, #513	; 0x201
 8004a6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	2300      	movs	r3, #0
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d002      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x40>
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x46>
 8004a96:	e02b      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a98:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a9a:	623b      	str	r3, [r7, #32]
      break;
 8004a9c:	e02b      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	0c9b      	lsrs	r3, r3, #18
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	3328      	adds	r3, #40	; 0x28
 8004aa8:	443b      	add	r3, r7
 8004aaa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004aae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d012      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004aba:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	0c5b      	lsrs	r3, r3, #17
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	3328      	adds	r3, #40	; 0x28
 8004ac6:	443b      	add	r3, r7
 8004ac8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004acc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ad2:	fb03 f202 	mul.w	r2, r3, r2
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	e004      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae4:	fb02 f303 	mul.w	r3, r2, r3
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	623b      	str	r3, [r7, #32]
      break;
 8004aee:	e002      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004af0:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004af2:	623b      	str	r3, [r7, #32]
      break;
 8004af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004af6:	6a3b      	ldr	r3, [r7, #32]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3728      	adds	r7, #40	; 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc90      	pop	{r4, r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	080052d0 	.word	0x080052d0
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	007a1200 	.word	0x007a1200
 8004b10:	003d0900 	.word	0x003d0900

08004b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b18:	4b02      	ldr	r3, [pc, #8]	; (8004b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr
 8004b24:	20000004 	.word	0x20000004

08004b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b2c:	f7ff fff2 	bl	8004b14 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	0a1b      	lsrs	r3, r3, #8
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4903      	ldr	r1, [pc, #12]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	080052f0 	.word	0x080052f0

08004b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <RCC_Delay+0x34>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <RCC_Delay+0x38>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	0a5b      	lsrs	r3, r3, #9
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	fb02 f303 	mul.w	r3, r2, r3
 8004b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b6c:	bf00      	nop
  }
  while (Delay --);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1e5a      	subs	r2, r3, #1
 8004b72:	60fa      	str	r2, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f9      	bne.n	8004b6c <RCC_Delay+0x1c>
}
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr
 8004b84:	20000004 	.word	0x20000004
 8004b88:	10624dd3 	.word	0x10624dd3

08004b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e076      	b.n	8004c8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d108      	bne.n	8004bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bae:	d009      	beq.n	8004bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61da      	str	r2, [r3, #28]
 8004bb6:	e005      	b.n	8004bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fd fab0 	bl	8002144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	ea42 0103 	orr.w	r1, r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	0c1a      	lsrs	r2, r3, #16
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f002 0204 	and.w	r2, r2, #4
 8004c6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_SPI_Transmit+0x22>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e126      	b.n	8004f04 <HAL_SPI_Transmit+0x270>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cbe:	f7fd fb49 	bl	8002354 <HAL_GetTick>
 8004cc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd8:	e10b      	b.n	8004ef2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_SPI_Transmit+0x52>
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cea:	e102      	b.n	8004ef2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d32:	d10f      	bne.n	8004d54 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d007      	beq.n	8004d72 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7a:	d14b      	bne.n	8004e14 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_SPI_Transmit+0xf6>
 8004d84:	8afb      	ldrh	r3, [r7, #22]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d13e      	bne.n	8004e08 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dae:	e02b      	b.n	8004e08 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d112      	bne.n	8004de4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004de2:	e011      	b.n	8004e08 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de4:	f7fd fab6 	bl	8002354 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d803      	bhi.n	8004dfc <HAL_SPI_Transmit+0x168>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfa:	d102      	bne.n	8004e02 <HAL_SPI_Transmit+0x16e>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e06:	e074      	b.n	8004ef2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1ce      	bne.n	8004db0 <HAL_SPI_Transmit+0x11c>
 8004e12:	e04c      	b.n	8004eae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_Transmit+0x18e>
 8004e1c:	8afb      	ldrh	r3, [r7, #22]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d140      	bne.n	8004ea4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e48:	e02c      	b.n	8004ea4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d113      	bne.n	8004e80 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e7e:	e011      	b.n	8004ea4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e80:	f7fd fa68 	bl	8002354 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d803      	bhi.n	8004e98 <HAL_SPI_Transmit+0x204>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e96:	d102      	bne.n	8004e9e <HAL_SPI_Transmit+0x20a>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ea2:	e026      	b.n	8004ef2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1cd      	bne.n	8004e4a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f9b6 	bl	8005224 <SPI_EndRxTxTransaction>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e000      	b.n	8004ef2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004ef0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10f      	bne.n	8004f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
    return;
 8004f4e:	e0be      	b.n	80050ce <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_SPI_IRQHandler+0x66>
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	09db      	lsrs	r3, r3, #7
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
    return;
 8004f70:	e0ad      	b.n	80050ce <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_SPI_IRQHandler+0x80>
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	099b      	lsrs	r3, r3, #6
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 80a1 	beq.w	80050ce <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 809a 	beq.w	80050ce <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	099b      	lsrs	r3, r3, #6
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d023      	beq.n	8004fee <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d011      	beq.n	8004fd6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb6:	f043 0204 	orr.w	r2, r3, #4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	e00b      	b.n	8004fee <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	693b      	ldr	r3, [r7, #16]
        return;
 8004fec:	e06f      	b.n	80050ce <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d014      	beq.n	8005024 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	2b00      	cmp	r3, #0
 800502a:	d04f      	beq.n	80050cc <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800503a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <HAL_SPI_IRQHandler+0x14c>
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d034      	beq.n	80050c2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0203 	bic.w	r2, r2, #3
 8005066:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d011      	beq.n	8005094 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005074:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <HAL_SPI_IRQHandler+0x1c8>)
 8005076:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507c:	4618      	mov	r0, r3
 800507e:	f7fd faa5 	bl	80025cc <HAL_DMA_Abort_IT>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005098:	2b00      	cmp	r3, #0
 800509a:	d016      	beq.n	80050ca <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a0:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <HAL_SPI_IRQHandler+0x1c8>)
 80050a2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fd fa8f 	bl	80025cc <HAL_DMA_Abort_IT>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80050c0:	e003      	b.n	80050ca <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f808 	bl	80050d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050c8:	e000      	b.n	80050cc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80050ca:	bf00      	nop
    return;
 80050cc:	bf00      	nop
  }
}
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	080050eb 	.word	0x080050eb

080050d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ffe7 	bl	80050d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005124:	f7fd f916 	bl	8002354 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	1a9b      	subs	r3, r3, r2
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	4413      	add	r3, r2
 8005132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005134:	f7fd f90e 	bl	8002354 <HAL_GetTick>
 8005138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800513a:	4b39      	ldr	r3, [pc, #228]	; (8005220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	015b      	lsls	r3, r3, #5
 8005140:	0d1b      	lsrs	r3, r3, #20
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	fb02 f303 	mul.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800514a:	e054      	b.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005152:	d050      	beq.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005154:	f7fd f8fe 	bl	8002354 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	429a      	cmp	r2, r3
 8005162:	d902      	bls.n	800516a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d13d      	bne.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005182:	d111      	bne.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518c:	d004      	beq.n	8005198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005196:	d107      	bne.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b0:	d10f      	bne.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e017      	b.n	8005216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4013      	ands	r3, r2
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	429a      	cmp	r2, r3
 8005212:	d19b      	bne.n	800514c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000004 	.word	0x20000004

08005224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af02      	add	r7, sp, #8
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7ff ff6a 	bl	8005114 <SPI_WaitFlagStateUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e000      	b.n	8005258 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <__libc_init_array>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	2600      	movs	r6, #0
 8005264:	4d0c      	ldr	r5, [pc, #48]	; (8005298 <__libc_init_array+0x38>)
 8005266:	4c0d      	ldr	r4, [pc, #52]	; (800529c <__libc_init_array+0x3c>)
 8005268:	1b64      	subs	r4, r4, r5
 800526a:	10a4      	asrs	r4, r4, #2
 800526c:	42a6      	cmp	r6, r4
 800526e:	d109      	bne.n	8005284 <__libc_init_array+0x24>
 8005270:	f000 f822 	bl	80052b8 <_init>
 8005274:	2600      	movs	r6, #0
 8005276:	4d0a      	ldr	r5, [pc, #40]	; (80052a0 <__libc_init_array+0x40>)
 8005278:	4c0a      	ldr	r4, [pc, #40]	; (80052a4 <__libc_init_array+0x44>)
 800527a:	1b64      	subs	r4, r4, r5
 800527c:	10a4      	asrs	r4, r4, #2
 800527e:	42a6      	cmp	r6, r4
 8005280:	d105      	bne.n	800528e <__libc_init_array+0x2e>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	f855 3b04 	ldr.w	r3, [r5], #4
 8005288:	4798      	blx	r3
 800528a:	3601      	adds	r6, #1
 800528c:	e7ee      	b.n	800526c <__libc_init_array+0xc>
 800528e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005292:	4798      	blx	r3
 8005294:	3601      	adds	r6, #1
 8005296:	e7f2      	b.n	800527e <__libc_init_array+0x1e>
 8005298:	08005300 	.word	0x08005300
 800529c:	08005300 	.word	0x08005300
 80052a0:	08005300 	.word	0x08005300
 80052a4:	08005304 	.word	0x08005304

080052a8 <memset>:
 80052a8:	4603      	mov	r3, r0
 80052aa:	4402      	add	r2, r0
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d100      	bne.n	80052b2 <memset+0xa>
 80052b0:	4770      	bx	lr
 80052b2:	f803 1b01 	strb.w	r1, [r3], #1
 80052b6:	e7f9      	b.n	80052ac <memset+0x4>

080052b8 <_init>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr

080052c4 <_fini>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	bf00      	nop
 80052c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ca:	bc08      	pop	{r3}
 80052cc:	469e      	mov	lr, r3
 80052ce:	4770      	bx	lr
