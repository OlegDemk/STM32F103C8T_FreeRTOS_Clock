
stm32f103c8t_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a84c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800a95c  0800a95c  0001a95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acc0  0800acc0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acc8  0800acc8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acc8  0800acc8  0001acc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800accc  0800accc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800acd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003bb8  20000078  0800ad48  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c30  0800ad48  00023c30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e949  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ffd  00000000  00000000  0003e9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  000429e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001970  00000000  00000000  000444b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004674  00000000  00000000  00045e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfd3  00000000  00000000  0004a49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a160  00000000  00000000  0006746f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001015cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007860  00000000  00000000  00101620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a944 	.word	0x0800a944

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800a944 	.word	0x0800a944

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__aeabi_ldivmod>:
 800061c:	b97b      	cbnz	r3, 800063e <__aeabi_ldivmod+0x22>
 800061e:	b972      	cbnz	r2, 800063e <__aeabi_ldivmod+0x22>
 8000620:	2900      	cmp	r1, #0
 8000622:	bfbe      	ittt	lt
 8000624:	2000      	movlt	r0, #0
 8000626:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800062a:	e006      	blt.n	800063a <__aeabi_ldivmod+0x1e>
 800062c:	bf08      	it	eq
 800062e:	2800      	cmpeq	r0, #0
 8000630:	bf1c      	itt	ne
 8000632:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000636:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800063a:	f000 b9a9 	b.w	8000990 <__aeabi_idiv0>
 800063e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000642:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000646:	2900      	cmp	r1, #0
 8000648:	db09      	blt.n	800065e <__aeabi_ldivmod+0x42>
 800064a:	2b00      	cmp	r3, #0
 800064c:	db1a      	blt.n	8000684 <__aeabi_ldivmod+0x68>
 800064e:	f000 f835 	bl	80006bc <__udivmoddi4>
 8000652:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800065a:	b004      	add	sp, #16
 800065c:	4770      	bx	lr
 800065e:	4240      	negs	r0, r0
 8000660:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	db1b      	blt.n	80006a0 <__aeabi_ldivmod+0x84>
 8000668:	f000 f828 	bl	80006bc <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4240      	negs	r0, r0
 8000678:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800067c:	4252      	negs	r2, r2
 800067e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000682:	4770      	bx	lr
 8000684:	4252      	negs	r2, r2
 8000686:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800068a:	f000 f817 	bl	80006bc <__udivmoddi4>
 800068e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000696:	b004      	add	sp, #16
 8000698:	4240      	negs	r0, r0
 800069a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800069e:	4770      	bx	lr
 80006a0:	4252      	negs	r2, r2
 80006a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a6:	f000 f809 	bl	80006bc <__udivmoddi4>
 80006aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b2:	b004      	add	sp, #16
 80006b4:	4252      	negs	r2, r2
 80006b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ba:	4770      	bx	lr

080006bc <__udivmoddi4>:
 80006bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c0:	9e08      	ldr	r6, [sp, #32]
 80006c2:	460d      	mov	r5, r1
 80006c4:	4604      	mov	r4, r0
 80006c6:	4688      	mov	r8, r1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d14d      	bne.n	8000768 <__udivmoddi4+0xac>
 80006cc:	428a      	cmp	r2, r1
 80006ce:	4694      	mov	ip, r2
 80006d0:	d968      	bls.n	80007a4 <__udivmoddi4+0xe8>
 80006d2:	fab2 f282 	clz	r2, r2
 80006d6:	b152      	cbz	r2, 80006ee <__udivmoddi4+0x32>
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	f1c2 0120 	rsb	r1, r2, #32
 80006e0:	fa20 f101 	lsr.w	r1, r0, r1
 80006e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80006e8:	ea41 0803 	orr.w	r8, r1, r3
 80006ec:	4094      	lsls	r4, r2
 80006ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80006f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80006f6:	fa1f fe8c 	uxth.w	lr, ip
 80006fa:	fb01 8817 	mls	r8, r1, r7, r8
 80006fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000702:	0c23      	lsrs	r3, r4, #16
 8000704:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000708:	4298      	cmp	r0, r3
 800070a:	d90a      	bls.n	8000722 <__udivmoddi4+0x66>
 800070c:	eb1c 0303 	adds.w	r3, ip, r3
 8000710:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000714:	f080 811e 	bcs.w	8000954 <__udivmoddi4+0x298>
 8000718:	4298      	cmp	r0, r3
 800071a:	f240 811b 	bls.w	8000954 <__udivmoddi4+0x298>
 800071e:	3f02      	subs	r7, #2
 8000720:	4463      	add	r3, ip
 8000722:	1a1b      	subs	r3, r3, r0
 8000724:	fbb3 f0f1 	udiv	r0, r3, r1
 8000728:	fb01 3310 	mls	r3, r1, r0, r3
 800072c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000730:	b2a4      	uxth	r4, r4
 8000732:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000736:	45a6      	cmp	lr, r4
 8000738:	d90a      	bls.n	8000750 <__udivmoddi4+0x94>
 800073a:	eb1c 0404 	adds.w	r4, ip, r4
 800073e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000742:	f080 8109 	bcs.w	8000958 <__udivmoddi4+0x29c>
 8000746:	45a6      	cmp	lr, r4
 8000748:	f240 8106 	bls.w	8000958 <__udivmoddi4+0x29c>
 800074c:	4464      	add	r4, ip
 800074e:	3802      	subs	r0, #2
 8000750:	2100      	movs	r1, #0
 8000752:	eba4 040e 	sub.w	r4, r4, lr
 8000756:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800075a:	b11e      	cbz	r6, 8000764 <__udivmoddi4+0xa8>
 800075c:	2300      	movs	r3, #0
 800075e:	40d4      	lsrs	r4, r2
 8000760:	e9c6 4300 	strd	r4, r3, [r6]
 8000764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000768:	428b      	cmp	r3, r1
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0xc2>
 800076c:	2e00      	cmp	r6, #0
 800076e:	f000 80ee 	beq.w	800094e <__udivmoddi4+0x292>
 8000772:	2100      	movs	r1, #0
 8000774:	e9c6 0500 	strd	r0, r5, [r6]
 8000778:	4608      	mov	r0, r1
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	fab3 f183 	clz	r1, r3
 8000782:	2900      	cmp	r1, #0
 8000784:	d14a      	bne.n	800081c <__udivmoddi4+0x160>
 8000786:	42ab      	cmp	r3, r5
 8000788:	d302      	bcc.n	8000790 <__udivmoddi4+0xd4>
 800078a:	4282      	cmp	r2, r0
 800078c:	f200 80fc 	bhi.w	8000988 <__udivmoddi4+0x2cc>
 8000790:	1a84      	subs	r4, r0, r2
 8000792:	eb65 0303 	sbc.w	r3, r5, r3
 8000796:	2001      	movs	r0, #1
 8000798:	4698      	mov	r8, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d0e2      	beq.n	8000764 <__udivmoddi4+0xa8>
 800079e:	e9c6 4800 	strd	r4, r8, [r6]
 80007a2:	e7df      	b.n	8000764 <__udivmoddi4+0xa8>
 80007a4:	b902      	cbnz	r2, 80007a8 <__udivmoddi4+0xec>
 80007a6:	deff      	udf	#255	; 0xff
 80007a8:	fab2 f282 	clz	r2, r2
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	f040 8091 	bne.w	80008d4 <__udivmoddi4+0x218>
 80007b2:	eba1 000c 	sub.w	r0, r1, ip
 80007b6:	2101      	movs	r1, #1
 80007b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007bc:	fa1f fe8c 	uxth.w	lr, ip
 80007c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80007c4:	fb07 0013 	mls	r0, r7, r3, r0
 80007c8:	0c25      	lsrs	r5, r4, #16
 80007ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80007ce:	fb0e f003 	mul.w	r0, lr, r3
 80007d2:	42a8      	cmp	r0, r5
 80007d4:	d908      	bls.n	80007e8 <__udivmoddi4+0x12c>
 80007d6:	eb1c 0505 	adds.w	r5, ip, r5
 80007da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80007de:	d202      	bcs.n	80007e6 <__udivmoddi4+0x12a>
 80007e0:	42a8      	cmp	r0, r5
 80007e2:	f200 80ce 	bhi.w	8000982 <__udivmoddi4+0x2c6>
 80007e6:	4643      	mov	r3, r8
 80007e8:	1a2d      	subs	r5, r5, r0
 80007ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80007ee:	fb07 5510 	mls	r5, r7, r0, r5
 80007f2:	fb0e fe00 	mul.w	lr, lr, r0
 80007f6:	b2a4      	uxth	r4, r4
 80007f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007fc:	45a6      	cmp	lr, r4
 80007fe:	d908      	bls.n	8000812 <__udivmoddi4+0x156>
 8000800:	eb1c 0404 	adds.w	r4, ip, r4
 8000804:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000808:	d202      	bcs.n	8000810 <__udivmoddi4+0x154>
 800080a:	45a6      	cmp	lr, r4
 800080c:	f200 80b6 	bhi.w	800097c <__udivmoddi4+0x2c0>
 8000810:	4628      	mov	r0, r5
 8000812:	eba4 040e 	sub.w	r4, r4, lr
 8000816:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800081a:	e79e      	b.n	800075a <__udivmoddi4+0x9e>
 800081c:	f1c1 0720 	rsb	r7, r1, #32
 8000820:	408b      	lsls	r3, r1
 8000822:	fa22 fc07 	lsr.w	ip, r2, r7
 8000826:	ea4c 0c03 	orr.w	ip, ip, r3
 800082a:	fa25 fa07 	lsr.w	sl, r5, r7
 800082e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000832:	fbba f8f9 	udiv	r8, sl, r9
 8000836:	fa20 f307 	lsr.w	r3, r0, r7
 800083a:	fb09 aa18 	mls	sl, r9, r8, sl
 800083e:	408d      	lsls	r5, r1
 8000840:	fa1f fe8c 	uxth.w	lr, ip
 8000844:	431d      	orrs	r5, r3
 8000846:	fa00 f301 	lsl.w	r3, r0, r1
 800084a:	fb08 f00e 	mul.w	r0, r8, lr
 800084e:	0c2c      	lsrs	r4, r5, #16
 8000850:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000854:	42a0      	cmp	r0, r4
 8000856:	fa02 f201 	lsl.w	r2, r2, r1
 800085a:	d90b      	bls.n	8000874 <__udivmoddi4+0x1b8>
 800085c:	eb1c 0404 	adds.w	r4, ip, r4
 8000860:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000864:	f080 8088 	bcs.w	8000978 <__udivmoddi4+0x2bc>
 8000868:	42a0      	cmp	r0, r4
 800086a:	f240 8085 	bls.w	8000978 <__udivmoddi4+0x2bc>
 800086e:	f1a8 0802 	sub.w	r8, r8, #2
 8000872:	4464      	add	r4, ip
 8000874:	1a24      	subs	r4, r4, r0
 8000876:	fbb4 f0f9 	udiv	r0, r4, r9
 800087a:	fb09 4410 	mls	r4, r9, r0, r4
 800087e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000882:	b2ad      	uxth	r5, r5
 8000884:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000888:	45a6      	cmp	lr, r4
 800088a:	d908      	bls.n	800089e <__udivmoddi4+0x1e2>
 800088c:	eb1c 0404 	adds.w	r4, ip, r4
 8000890:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000894:	d26c      	bcs.n	8000970 <__udivmoddi4+0x2b4>
 8000896:	45a6      	cmp	lr, r4
 8000898:	d96a      	bls.n	8000970 <__udivmoddi4+0x2b4>
 800089a:	3802      	subs	r0, #2
 800089c:	4464      	add	r4, ip
 800089e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008a2:	fba0 9502 	umull	r9, r5, r0, r2
 80008a6:	eba4 040e 	sub.w	r4, r4, lr
 80008aa:	42ac      	cmp	r4, r5
 80008ac:	46c8      	mov	r8, r9
 80008ae:	46ae      	mov	lr, r5
 80008b0:	d356      	bcc.n	8000960 <__udivmoddi4+0x2a4>
 80008b2:	d053      	beq.n	800095c <__udivmoddi4+0x2a0>
 80008b4:	2e00      	cmp	r6, #0
 80008b6:	d069      	beq.n	800098c <__udivmoddi4+0x2d0>
 80008b8:	ebb3 0208 	subs.w	r2, r3, r8
 80008bc:	eb64 040e 	sbc.w	r4, r4, lr
 80008c0:	fa22 f301 	lsr.w	r3, r2, r1
 80008c4:	fa04 f707 	lsl.w	r7, r4, r7
 80008c8:	431f      	orrs	r7, r3
 80008ca:	40cc      	lsrs	r4, r1
 80008cc:	e9c6 7400 	strd	r7, r4, [r6]
 80008d0:	2100      	movs	r1, #0
 80008d2:	e747      	b.n	8000764 <__udivmoddi4+0xa8>
 80008d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d8:	f1c2 0120 	rsb	r1, r2, #32
 80008dc:	fa25 f301 	lsr.w	r3, r5, r1
 80008e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e4:	fa20 f101 	lsr.w	r1, r0, r1
 80008e8:	4095      	lsls	r5, r2
 80008ea:	430d      	orrs	r5, r1
 80008ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80008f0:	fb07 3311 	mls	r3, r7, r1, r3
 80008f4:	fa1f fe8c 	uxth.w	lr, ip
 80008f8:	0c28      	lsrs	r0, r5, #16
 80008fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000902:	4283      	cmp	r3, r0
 8000904:	fa04 f402 	lsl.w	r4, r4, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x260>
 800090a:	eb1c 0000 	adds.w	r0, ip, r0
 800090e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000912:	d22f      	bcs.n	8000974 <__udivmoddi4+0x2b8>
 8000914:	4283      	cmp	r3, r0
 8000916:	d92d      	bls.n	8000974 <__udivmoddi4+0x2b8>
 8000918:	3902      	subs	r1, #2
 800091a:	4460      	add	r0, ip
 800091c:	1ac0      	subs	r0, r0, r3
 800091e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000922:	fb07 0013 	mls	r0, r7, r3, r0
 8000926:	b2ad      	uxth	r5, r5
 8000928:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800092c:	fb03 f00e 	mul.w	r0, r3, lr
 8000930:	42a8      	cmp	r0, r5
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x28a>
 8000934:	eb1c 0505 	adds.w	r5, ip, r5
 8000938:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800093c:	d216      	bcs.n	800096c <__udivmoddi4+0x2b0>
 800093e:	42a8      	cmp	r0, r5
 8000940:	d914      	bls.n	800096c <__udivmoddi4+0x2b0>
 8000942:	3b02      	subs	r3, #2
 8000944:	4465      	add	r5, ip
 8000946:	1a28      	subs	r0, r5, r0
 8000948:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800094c:	e738      	b.n	80007c0 <__udivmoddi4+0x104>
 800094e:	4631      	mov	r1, r6
 8000950:	4630      	mov	r0, r6
 8000952:	e707      	b.n	8000764 <__udivmoddi4+0xa8>
 8000954:	462f      	mov	r7, r5
 8000956:	e6e4      	b.n	8000722 <__udivmoddi4+0x66>
 8000958:	4618      	mov	r0, r3
 800095a:	e6f9      	b.n	8000750 <__udivmoddi4+0x94>
 800095c:	454b      	cmp	r3, r9
 800095e:	d2a9      	bcs.n	80008b4 <__udivmoddi4+0x1f8>
 8000960:	ebb9 0802 	subs.w	r8, r9, r2
 8000964:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000968:	3801      	subs	r0, #1
 800096a:	e7a3      	b.n	80008b4 <__udivmoddi4+0x1f8>
 800096c:	4643      	mov	r3, r8
 800096e:	e7ea      	b.n	8000946 <__udivmoddi4+0x28a>
 8000970:	4628      	mov	r0, r5
 8000972:	e794      	b.n	800089e <__udivmoddi4+0x1e2>
 8000974:	4641      	mov	r1, r8
 8000976:	e7d1      	b.n	800091c <__udivmoddi4+0x260>
 8000978:	46d0      	mov	r8, sl
 800097a:	e77b      	b.n	8000874 <__udivmoddi4+0x1b8>
 800097c:	4464      	add	r4, ip
 800097e:	3802      	subs	r0, #2
 8000980:	e747      	b.n	8000812 <__udivmoddi4+0x156>
 8000982:	3b02      	subs	r3, #2
 8000984:	4465      	add	r5, ip
 8000986:	e72f      	b.n	80007e8 <__udivmoddi4+0x12c>
 8000988:	4608      	mov	r0, r1
 800098a:	e706      	b.n	800079a <__udivmoddi4+0xde>
 800098c:	4631      	mov	r1, r6
 800098e:	e6e9      	b.n	8000764 <__udivmoddi4+0xa8>

08000990 <__aeabi_idiv0>:
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
//MX_SPI1_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099e:	4802      	ldr	r0, [pc, #8]	; (80009a8 <ILI9341_SPI_Init+0x14>)
 80009a0:	f002 fc6a 	bl	8003278 <HAL_GPIO_WritePin>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40010c00 	.word	0x40010c00

080009ac <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(&hspi1, &SPI_Data, 1, 1);
 80009b6:	1df9      	adds	r1, r7, #7
 80009b8:	2301      	movs	r3, #1
 80009ba:	2201      	movs	r2, #1
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <ILI9341_SPI_Send+0x20>)
 80009be:	f004 fe1f 	bl	8005600 <HAL_SPI_Transmit>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200004dc 	.word	0x200004dc

080009d0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <ILI9341_Write_Command+0x40>)
 80009e2:	f002 fc49 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <ILI9341_Write_Command+0x44>)
 80009ee:	f002 fc43 	bl	8003278 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffd9 	bl	80009ac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <ILI9341_Write_Command+0x40>)
 8000a02:	f002 fc39 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40010c00 	.word	0x40010c00
 8000a14:	40010800 	.word	0x40010800

08000a18 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <ILI9341_Write_Data+0x40>)
 8000a2a:	f002 fc25 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <ILI9341_Write_Data+0x44>)
 8000a36:	f002 fc1f 	bl	8003278 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffb5 	bl	80009ac <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <ILI9341_Write_Data+0x44>)
 8000a4a:	f002 fc15 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4604      	mov	r4, r0
 8000a68:	4608      	mov	r0, r1
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4623      	mov	r3, r4
 8000a70:	80fb      	strh	r3, [r7, #6]
 8000a72:	4603      	mov	r3, r0
 8000a74:	80bb      	strh	r3, [r7, #4]
 8000a76:	460b      	mov	r3, r1
 8000a78:	807b      	strh	r3, [r7, #2]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000a7e:	202a      	movs	r0, #42	; 0x2a
 8000a80:	f7ff ffa6 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	0a1b      	lsrs	r3, r3, #8
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ffc3 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ffbe 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffb7 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ffb2 	bl	8000a18 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000ab4:	202b      	movs	r0, #43	; 0x2b
 8000ab6:	f7ff ff8b 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000aba:	88bb      	ldrh	r3, [r7, #4]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ffa8 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ffa3 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000ad2:	883b      	ldrh	r3, [r7, #0]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff9c 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff97 	bl	8000a18 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000aea:	202c      	movs	r0, #44	; 0x2c
 8000aec:	f7ff ff70 	bl	80009d0 <ILI9341_Write_Command>
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	480b      	ldr	r0, [pc, #44]	; (8000b30 <ILI9341_Reset+0x38>)
 8000b04:	f002 fbb8 	bl	8003278 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b08:	20c8      	movs	r0, #200	; 0xc8
 8000b0a:	f002 f87d 	bl	8002c08 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <ILI9341_Reset+0x3c>)
 8000b16:	f002 fbaf 	bl	8003278 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b1a:	20c8      	movs	r0, #200	; 0xc8
 8000b1c:	f002 f874 	bl	8002c08 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b26:	4802      	ldr	r0, [pc, #8]	; (8000b30 <ILI9341_Reset+0x38>)
 8000b28:	f002 fba6 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40010800 	.word	0x40010800
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000b46:	2036      	movs	r0, #54	; 0x36
 8000b48:	f7ff ff42 	bl	80009d0 <ILI9341_Write_Command>
HAL_Delay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f002 f85b 	bl	8002c08 <HAL_Delay>
	
switch(screen_rotation) 
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d837      	bhi.n	8000bc8 <ILI9341_Set_Rotation+0x90>
 8000b58:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <ILI9341_Set_Rotation+0x28>)
 8000b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5e:	bf00      	nop
 8000b60:	08000b71 	.word	0x08000b71
 8000b64:	08000b87 	.word	0x08000b87
 8000b68:	08000b9d 	.word	0x08000b9d
 8000b6c:	08000bb3 	.word	0x08000bb3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000b70:	2048      	movs	r0, #72	; 0x48
 8000b72:	f7ff ff51 	bl	8000a18 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <ILI9341_Set_Rotation+0x9c>)
 8000b78:	22f0      	movs	r2, #240	; 0xf0
 8000b7a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <ILI9341_Set_Rotation+0xa0>)
 8000b7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b82:	801a      	strh	r2, [r3, #0]
			break;
 8000b84:	e021      	b.n	8000bca <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000b86:	2028      	movs	r0, #40	; 0x28
 8000b88:	f7ff ff46 	bl	8000a18 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <ILI9341_Set_Rotation+0x9c>)
 8000b8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b92:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <ILI9341_Set_Rotation+0xa0>)
 8000b96:	22f0      	movs	r2, #240	; 0xf0
 8000b98:	801a      	strh	r2, [r3, #0]
			break;
 8000b9a:	e016      	b.n	8000bca <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000b9c:	2088      	movs	r0, #136	; 0x88
 8000b9e:	f7ff ff3b 	bl	8000a18 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <ILI9341_Set_Rotation+0x9c>)
 8000ba4:	22f0      	movs	r2, #240	; 0xf0
 8000ba6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <ILI9341_Set_Rotation+0xa0>)
 8000baa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bae:	801a      	strh	r2, [r3, #0]
			break;
 8000bb0:	e00b      	b.n	8000bca <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000bb2:	20e8      	movs	r0, #232	; 0xe8
 8000bb4:	f7ff ff30 	bl	8000a18 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <ILI9341_Set_Rotation+0x9c>)
 8000bba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bbe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <ILI9341_Set_Rotation+0xa0>)
 8000bc2:	22f0      	movs	r2, #240	; 0xf0
 8000bc4:	801a      	strh	r2, [r3, #0]
			break;
 8000bc6:	e000      	b.n	8000bca <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000bc8:	bf00      	nop
	}
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000002 	.word	0x20000002
 8000bd8:	20000000 	.word	0x20000000

08000bdc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be6:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <ILI9341_Enable+0x14>)
 8000be8:	f002 fb46 	bl	8003278 <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40010800 	.word	0x40010800

08000bf4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000bf8:	f7ff fff0 	bl	8000bdc <ILI9341_Enable>
ILI9341_SPI_Init();
 8000bfc:	f7ff feca 	bl	8000994 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000c00:	f7ff ff7a 	bl	8000af8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fee3 	bl	80009d0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0e:	f001 fffb 	bl	8002c08 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000c12:	20cb      	movs	r0, #203	; 0xcb
 8000c14:	f7ff fedc 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000c18:	2039      	movs	r0, #57	; 0x39
 8000c1a:	f7ff fefd 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000c1e:	202c      	movs	r0, #44	; 0x2c
 8000c20:	f7ff fefa 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fef7 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000c2a:	2034      	movs	r0, #52	; 0x34
 8000c2c:	f7ff fef4 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000c30:	2002      	movs	r0, #2
 8000c32:	f7ff fef1 	bl	8000a18 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000c36:	20cf      	movs	r0, #207	; 0xcf
 8000c38:	f7ff feca 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff feeb 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000c42:	20c1      	movs	r0, #193	; 0xc1
 8000c44:	f7ff fee8 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000c48:	2030      	movs	r0, #48	; 0x30
 8000c4a:	f7ff fee5 	bl	8000a18 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000c4e:	20e8      	movs	r0, #232	; 0xe8
 8000c50:	f7ff febe 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000c54:	2085      	movs	r0, #133	; 0x85
 8000c56:	f7ff fedf 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fedc 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000c60:	2078      	movs	r0, #120	; 0x78
 8000c62:	f7ff fed9 	bl	8000a18 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000c66:	20ea      	movs	r0, #234	; 0xea
 8000c68:	f7ff feb2 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fed3 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fed0 	bl	8000a18 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000c78:	20ed      	movs	r0, #237	; 0xed
 8000c7a:	f7ff fea9 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000c7e:	2064      	movs	r0, #100	; 0x64
 8000c80:	f7ff feca 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f7ff fec7 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000c8a:	2012      	movs	r0, #18
 8000c8c:	f7ff fec4 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000c90:	2081      	movs	r0, #129	; 0x81
 8000c92:	f7ff fec1 	bl	8000a18 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000c96:	20f7      	movs	r0, #247	; 0xf7
 8000c98:	f7ff fe9a 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f7ff febb 	bl	8000a18 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000ca2:	20c0      	movs	r0, #192	; 0xc0
 8000ca4:	f7ff fe94 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000ca8:	2023      	movs	r0, #35	; 0x23
 8000caa:	f7ff feb5 	bl	8000a18 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000cae:	20c1      	movs	r0, #193	; 0xc1
 8000cb0:	f7ff fe8e 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000cb4:	2010      	movs	r0, #16
 8000cb6:	f7ff feaf 	bl	8000a18 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000cba:	20c5      	movs	r0, #197	; 0xc5
 8000cbc:	f7ff fe88 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000cc0:	203e      	movs	r0, #62	; 0x3e
 8000cc2:	f7ff fea9 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000cc6:	2028      	movs	r0, #40	; 0x28
 8000cc8:	f7ff fea6 	bl	8000a18 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000ccc:	20c7      	movs	r0, #199	; 0xc7
 8000cce:	f7ff fe7f 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000cd2:	2086      	movs	r0, #134	; 0x86
 8000cd4:	f7ff fea0 	bl	8000a18 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000cd8:	2036      	movs	r0, #54	; 0x36
 8000cda:	f7ff fe79 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000cde:	2048      	movs	r0, #72	; 0x48
 8000ce0:	f7ff fe9a 	bl	8000a18 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000ce4:	203a      	movs	r0, #58	; 0x3a
 8000ce6:	f7ff fe73 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000cea:	2055      	movs	r0, #85	; 0x55
 8000cec:	f7ff fe94 	bl	8000a18 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000cf0:	20b1      	movs	r0, #177	; 0xb1
 8000cf2:	f7ff fe6d 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff fe8e 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000cfc:	2018      	movs	r0, #24
 8000cfe:	f7ff fe8b 	bl	8000a18 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000d02:	20b6      	movs	r0, #182	; 0xb6
 8000d04:	f7ff fe64 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000d08:	2008      	movs	r0, #8
 8000d0a:	f7ff fe85 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000d0e:	2082      	movs	r0, #130	; 0x82
 8000d10:	f7ff fe82 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000d14:	2027      	movs	r0, #39	; 0x27
 8000d16:	f7ff fe7f 	bl	8000a18 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000d1a:	20f2      	movs	r0, #242	; 0xf2
 8000d1c:	f7ff fe58 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fe79 	bl	8000a18 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f7ff fe52 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fe73 	bl	8000a18 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000d32:	20e0      	movs	r0, #224	; 0xe0
 8000d34:	f7ff fe4c 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000d38:	200f      	movs	r0, #15
 8000d3a:	f7ff fe6d 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000d3e:	2031      	movs	r0, #49	; 0x31
 8000d40:	f7ff fe6a 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000d44:	202b      	movs	r0, #43	; 0x2b
 8000d46:	f7ff fe67 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000d4a:	200c      	movs	r0, #12
 8000d4c:	f7ff fe64 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d50:	200e      	movs	r0, #14
 8000d52:	f7ff fe61 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000d56:	2008      	movs	r0, #8
 8000d58:	f7ff fe5e 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000d5c:	204e      	movs	r0, #78	; 0x4e
 8000d5e:	f7ff fe5b 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000d62:	20f1      	movs	r0, #241	; 0xf1
 8000d64:	f7ff fe58 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000d68:	2037      	movs	r0, #55	; 0x37
 8000d6a:	f7ff fe55 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000d6e:	2007      	movs	r0, #7
 8000d70:	f7ff fe52 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000d74:	2010      	movs	r0, #16
 8000d76:	f7ff fe4f 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f7ff fe4c 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d80:	200e      	movs	r0, #14
 8000d82:	f7ff fe49 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000d86:	2009      	movs	r0, #9
 8000d88:	f7ff fe46 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fe43 	bl	8000a18 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000d92:	20e1      	movs	r0, #225	; 0xe1
 8000d94:	f7ff fe1c 	bl	80009d0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff fe3d 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d9e:	200e      	movs	r0, #14
 8000da0:	f7ff fe3a 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000da4:	2014      	movs	r0, #20
 8000da6:	f7ff fe37 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f7ff fe34 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000db0:	2011      	movs	r0, #17
 8000db2:	f7ff fe31 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000db6:	2007      	movs	r0, #7
 8000db8:	f7ff fe2e 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000dbc:	2031      	movs	r0, #49	; 0x31
 8000dbe:	f7ff fe2b 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000dc2:	20c1      	movs	r0, #193	; 0xc1
 8000dc4:	f7ff fe28 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000dc8:	2048      	movs	r0, #72	; 0x48
 8000dca:	f7ff fe25 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000dce:	2008      	movs	r0, #8
 8000dd0:	f7ff fe22 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000dd4:	200f      	movs	r0, #15
 8000dd6:	f7ff fe1f 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000dda:	200c      	movs	r0, #12
 8000ddc:	f7ff fe1c 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000de0:	2031      	movs	r0, #49	; 0x31
 8000de2:	f7ff fe19 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000de6:	2036      	movs	r0, #54	; 0x36
 8000de8:	f7ff fe16 	bl	8000a18 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000dec:	200f      	movs	r0, #15
 8000dee:	f7ff fe13 	bl	8000a18 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000df2:	2011      	movs	r0, #17
 8000df4:	f7ff fdec 	bl	80009d0 <ILI9341_Write_Command>
HAL_Delay(120);
 8000df8:	2078      	movs	r0, #120	; 0x78
 8000dfa:	f001 ff05 	bl	8002c08 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000dfe:	2029      	movs	r0, #41	; 0x29
 8000e00:	f7ff fde6 	bl	80009d0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fe97 	bl	8000b38 <ILI9341_Set_Rotation>
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e14:	b08d      	sub	sp, #52	; 0x34
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	6039      	str	r1, [r7, #0]
 8000e1c:	80fb      	strh	r3, [r7, #6]
 8000e1e:	466b      	mov	r3, sp
 8000e20:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e2e:	d202      	bcs.n	8000e36 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
 8000e34:	e002      	b.n	8000e3c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000e36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	4840      	ldr	r0, [pc, #256]	; (8000f44 <ILI9341_Draw_Colour_Burst+0x134>)
 8000e44:	f002 fa18 	bl	8003278 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4e:	483e      	ldr	r0, [pc, #248]	; (8000f48 <ILI9341_Draw_Colour_Burst+0x138>)
 8000e50:	f002 fa12 	bl	8003278 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e60:	460b      	mov	r3, r1
 8000e62:	3b01      	subs	r3, #1
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	2300      	movs	r3, #0
 8000e68:	4688      	mov	r8, r1
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e80:	2300      	movs	r3, #0
 8000e82:	460c      	mov	r4, r1
 8000e84:	461d      	mov	r5, r3
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	00eb      	lsls	r3, r5, #3
 8000e90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e94:	00e2      	lsls	r2, r4, #3
 8000e96:	1dcb      	adds	r3, r1, #7
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea0:	466b      	mov	r3, sp
 8000ea2:	3300      	adds	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eaa:	e00e      	b.n	8000eca <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000eb6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eba:	3301      	adds	r3, #1
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	b2d1      	uxtb	r1, r2
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3ec      	bcc.n	8000eac <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000eec:	fb01 f202 	mul.w	r2, r1, r2
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d010      	beq.n	8000f1c <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000efe:	e009      	b.n	8000f14 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	230a      	movs	r3, #10
 8000f06:	69b9      	ldr	r1, [r7, #24]
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <ILI9341_Draw_Colour_Burst+0x13c>)
 8000f0a:	f004 fb79 	bl	8005600 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	3301      	adds	r3, #1
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d3f1      	bcc.n	8000f00 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	230a      	movs	r3, #10
 8000f22:	69b9      	ldr	r1, [r7, #24]
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <ILI9341_Draw_Colour_Burst+0x13c>)
 8000f26:	f004 fb6b 	bl	8005600 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <ILI9341_Draw_Colour_Burst+0x138>)
 8000f32:	f002 f9a1 	bl	8003278 <HAL_GPIO_WritePin>
 8000f36:	46b5      	mov	sp, r6
}
 8000f38:	bf00      	nop
 8000f3a:	3734      	adds	r7, #52	; 0x34
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f42:	bf00      	nop
 8000f44:	40010800 	.word	0x40010800
 8000f48:	40010c00 	.word	0x40010c00
 8000f4c:	200004dc 	.word	0x200004dc

08000f50 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <ILI9341_Fill_Screen+0x44>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <ILI9341_Fill_Screen+0x48>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fd79 	bl	8000a60 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <ILI9341_Fill_Screen+0x44>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <ILI9341_Fill_Screen+0x48>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	fb02 f303 	mul.w	r3, r2, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff42 	bl	8000e10 <ILI9341_Draw_Colour_Burst>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000002 	.word	0x20000002
 8000f98:	20000000 	.word	0x20000000

08000f9c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2203      	movs	r2, #3
 8000fba:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	715a      	strb	r2, [r3, #5]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b08a      	sub	sp, #40	; 0x28
 8000fd6:	af04      	add	r7, sp, #16
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fec:	7afb      	ldrb	r3, [r7, #11]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	8af9      	ldrh	r1, [r7, #22]
 8000ff2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	f002 ff04 	bl	8003e10 <HAL_I2C_Mem_Read>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10b      	bne.n	8001026 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800100e:	7d7b      	ldrb	r3, [r7, #21]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	7d3b      	ldrb	r3, [r7, #20]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29a      	uxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	801a      	strh	r2, [r3, #0]
		return true;
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <read_register16+0x56>
	} else
		return false;
 8001026:	2300      	movs	r3, #0

}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b08b      	sub	sp, #44	; 0x2c
 8001034:	af04      	add	r7, sp, #16
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	461a      	mov	r2, r3
 800103c:	460b      	mov	r3, r1
 800103e:	72fb      	strb	r3, [r7, #11]
 8001040:	4613      	mov	r3, r2
 8001042:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	b29a      	uxth	r2, r3
 8001054:	7abb      	ldrb	r3, [r7, #10]
 8001056:	b29b      	uxth	r3, r3
 8001058:	8af9      	ldrh	r1, [r7, #22]
 800105a:	f241 3488 	movw	r4, #5000	; 0x1388
 800105e:	9402      	str	r4, [sp, #8]
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	f002 fed2 	bl	8003e10 <HAL_I2C_Mem_Read>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <read_data+0x46>
		return 0;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <read_data+0x48>
	else
		return 1;
 8001076:	2301      	movs	r3, #1

}
 8001078:	4618      	mov	r0, r3
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}

08001080 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	461a      	mov	r2, r3
 800108c:	2188      	movs	r1, #136	; 0x88
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff9f 	bl	8000fd2 <read_register16>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d06f      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3302      	adds	r3, #2
 800109e:	461a      	mov	r2, r3
 80010a0:	218a      	movs	r1, #138	; 0x8a
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff95 	bl	8000fd2 <read_register16>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d065      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3304      	adds	r3, #4
 80010b2:	461a      	mov	r2, r3
 80010b4:	218c      	movs	r1, #140	; 0x8c
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff8b 	bl	8000fd2 <read_register16>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d05b      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3306      	adds	r3, #6
 80010c6:	461a      	mov	r2, r3
 80010c8:	218e      	movs	r1, #142	; 0x8e
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff81 	bl	8000fd2 <read_register16>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d051      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3308      	adds	r3, #8
 80010da:	461a      	mov	r2, r3
 80010dc:	2190      	movs	r1, #144	; 0x90
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff77 	bl	8000fd2 <read_register16>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d047      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	330a      	adds	r3, #10
 80010ee:	461a      	mov	r2, r3
 80010f0:	2192      	movs	r1, #146	; 0x92
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff6d 	bl	8000fd2 <read_register16>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d03d      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	330c      	adds	r3, #12
 8001102:	461a      	mov	r2, r3
 8001104:	2194      	movs	r1, #148	; 0x94
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff63 	bl	8000fd2 <read_register16>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d033      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	330e      	adds	r3, #14
 8001116:	461a      	mov	r2, r3
 8001118:	2196      	movs	r1, #150	; 0x96
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff59 	bl	8000fd2 <read_register16>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d029      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3310      	adds	r3, #16
 800112a:	461a      	mov	r2, r3
 800112c:	2198      	movs	r1, #152	; 0x98
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4f 	bl	8000fd2 <read_register16>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d01f      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3312      	adds	r3, #18
 800113e:	461a      	mov	r2, r3
 8001140:	219a      	movs	r1, #154	; 0x9a
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff45 	bl	8000fd2 <read_register16>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d015      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3314      	adds	r3, #20
 8001152:	461a      	mov	r2, r3
 8001154:	219c      	movs	r1, #156	; 0x9c
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff3b 	bl	8000fd2 <read_register16>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001166:	461a      	mov	r2, r3
 8001168:	219e      	movs	r1, #158	; 0x9e
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff31 	bl	8000fd2 <read_register16>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <read_calibration_data+0xfa>

		return true;
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <read_calibration_data+0xfc>
	}

	return false;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f103 0218 	add.w	r2, r3, #24
 8001192:	2301      	movs	r3, #1
 8001194:	21a1      	movs	r1, #161	; 0xa1
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff4a 	bl	8001030 <read_data>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d14b      	bne.n	800123a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	331a      	adds	r3, #26
 80011a6:	461a      	mov	r2, r3
 80011a8:	21e1      	movs	r1, #225	; 0xe1
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff11 	bl	8000fd2 <read_register16>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d041      	beq.n	800123a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f103 021c 	add.w	r2, r3, #28
 80011bc:	2301      	movs	r3, #1
 80011be:	21e3      	movs	r1, #227	; 0xe3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff35 	bl	8001030 <read_data>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d136      	bne.n	800123a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80011cc:	f107 030e 	add.w	r3, r7, #14
 80011d0:	461a      	mov	r2, r3
 80011d2:	21e4      	movs	r1, #228	; 0xe4
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fefc 	bl	8000fd2 <read_register16>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d02c      	beq.n	800123a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	461a      	mov	r2, r3
 80011e6:	21e5      	movs	r1, #229	; 0xe5
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fef2 	bl	8000fd2 <read_register16>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d022      	beq.n	800123a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80011fa:	2301      	movs	r3, #1
 80011fc:	21e7      	movs	r1, #231	; 0xe7
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff16 	bl	8001030 <read_data>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d117      	bne.n	800123a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	b21b      	sxth	r3, r3
 8001210:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001214:	b21a      	sxth	r2, r3
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	121b      	asrs	r3, r3, #8
 800121a:	b21b      	sxth	r3, r3
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800122a:	89bb      	ldrh	r3, [r7, #12]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	b29b      	uxth	r3, r3
 8001230:	b21a      	sxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	841a      	strh	r2, [r3, #32]

		return true;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <read_hum_calibration_data+0xb8>
	}

	return false;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af04      	add	r7, sp, #16
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
 8001250:	4613      	mov	r3, r2
 8001252:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	b29a      	uxth	r2, r3
 8001264:	89f9      	ldrh	r1, [r7, #14]
 8001266:	f242 7310 	movw	r3, #10000	; 0x2710
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2301      	movs	r3, #1
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	1cbb      	adds	r3, r7, #2
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	f002 fcd1 	bl	8003c1c <HAL_I2C_Mem_Write>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <write_register8+0x40>
		return false;
 8001280:	2300      	movs	r3, #0
 8001282:	e000      	b.n	8001286 <write_register8+0x42>
	else
		return true;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800129c:	2b76      	cmp	r3, #118	; 0x76
 800129e:	d005      	beq.n	80012ac <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012a4:	2b77      	cmp	r3, #119	; 0x77
 80012a6:	d001      	beq.n	80012ac <bmp280_init+0x1e>

		return false;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e099      	b.n	80013e0 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80012b2:	2301      	movs	r3, #1
 80012b4:	21d0      	movs	r1, #208	; 0xd0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff feba 	bl	8001030 <read_data>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <bmp280_init+0x38>
		return false;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e08c      	b.n	80013e0 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012cc:	2b58      	cmp	r3, #88	; 0x58
 80012ce:	d006      	beq.n	80012de <bmp280_init+0x50>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012d6:	2b60      	cmp	r3, #96	; 0x60
 80012d8:	d001      	beq.n	80012de <bmp280_init+0x50>

		return false;
 80012da:	2300      	movs	r3, #0
 80012dc:	e080      	b.n	80013e0 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80012de:	22b6      	movs	r2, #182	; 0xb6
 80012e0:	21e0      	movs	r1, #224	; 0xe0
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffae 	bl	8001244 <write_register8>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <bmp280_init+0x64>
		return false;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e076      	b.n	80013e0 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80012f2:	f107 020c 	add.w	r2, r7, #12
 80012f6:	2301      	movs	r3, #1
 80012f8:	21f3      	movs	r1, #243	; 0xf3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fe98 	bl	8001030 <read_data>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f5      	bne.n	80012f2 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f0      	bne.n	80012f2 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff feb5 	bl	8001080 <read_calibration_data>
 8001316:	4603      	mov	r3, r0
 8001318:	f083 0301 	eor.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d100      	bne.n	8001324 <bmp280_init+0x96>
 8001322:	e001      	b.n	8001328 <bmp280_init+0x9a>
		return false;
 8001324:	2300      	movs	r3, #0
 8001326:	e05b      	b.n	80013e0 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800132e:	2b60      	cmp	r3, #96	; 0x60
 8001330:	d10a      	bne.n	8001348 <bmp280_init+0xba>
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff26 	bl	8001184 <read_hum_calibration_data>
 8001338:	4603      	mov	r3, r0
 800133a:	f083 0301 	eor.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <bmp280_init+0xba>
		return false;
 8001344:	2300      	movs	r3, #0
 8001346:	e04b      	b.n	80013e0 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	795b      	ldrb	r3, [r3, #5]
 800134c:	015b      	lsls	r3, r3, #5
 800134e:	b25a      	sxtb	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	785b      	ldrb	r3, [r3, #1]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	b25b      	sxtb	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b25b      	sxtb	r3, r3
 800135c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	461a      	mov	r2, r3
 8001362:	21f5      	movs	r1, #245	; 0xf5
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff6d 	bl	8001244 <write_register8>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <bmp280_init+0xe6>
		return false;
 8001370:	2300      	movs	r3, #0
 8001372:	e035      	b.n	80013e0 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	78db      	ldrb	r3, [r3, #3]
 8001386:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001388:	b25a      	sxtb	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	789b      	ldrb	r3, [r3, #2]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	b25b      	sxtb	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b25a      	sxtb	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80013a0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013a8:	2b60      	cmp	r3, #96	; 0x60
 80013aa:	d10d      	bne.n	80013c8 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	791b      	ldrb	r3, [r3, #4]
 80013b0:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80013b2:	7b7b      	ldrb	r3, [r7, #13]
 80013b4:	461a      	mov	r2, r3
 80013b6:	21f2      	movs	r1, #242	; 0xf2
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff43 	bl	8001244 <write_register8>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <bmp280_init+0x13a>
			return false;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e00b      	b.n	80013e0 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	461a      	mov	r2, r3
 80013cc:	21f4      	movs	r1, #244	; 0xf4
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff38 	bl	8001244 <write_register8>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <bmp280_init+0x150>
		return false;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <bmp280_init+0x152>
	}

	return true;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	10da      	asrs	r2, r3, #3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001406:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800140a:	12db      	asrs	r3, r3, #11
 800140c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	111b      	asrs	r3, r3, #4
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	8812      	ldrh	r2, [r2, #0]
 8001416:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	1112      	asrs	r2, r2, #4
 800141c:	68f9      	ldr	r1, [r7, #12]
 800141e:	8809      	ldrh	r1, [r1, #0]
 8001420:	1a52      	subs	r2, r2, r1
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800142e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001432:	139b      	asrs	r3, r3, #14
 8001434:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	441a      	add	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3380      	adds	r3, #128	; 0x80
 800144c:	121b      	asrs	r3, r3, #8
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800145c:	b0cc      	sub	sp, #304	; 0x130
 800145e:	af00      	add	r7, sp, #0
 8001460:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001464:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001468:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800146c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001470:	17da      	asrs	r2, r3, #31
 8001472:	461c      	mov	r4, r3
 8001474:	4615      	mov	r5, r2
 8001476:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800147a:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 800147e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001482:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001486:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800148a:	fb03 f102 	mul.w	r1, r3, r2
 800148e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001492:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	18ca      	adds	r2, r1, r3
 800149c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014a0:	fba3 8903 	umull	r8, r9, r3, r3
 80014a4:	eb02 0309 	add.w	r3, r2, r9
 80014a8:	4699      	mov	r9, r3
 80014aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014ae:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	17da      	asrs	r2, r3, #31
 80014b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014ba:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014be:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014c2:	4603      	mov	r3, r0
 80014c4:	fb03 f209 	mul.w	r2, r3, r9
 80014c8:	460b      	mov	r3, r1
 80014ca:	fb08 f303 	mul.w	r3, r8, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	4602      	mov	r2, r0
 80014d2:	fba8 2102 	umull	r2, r1, r8, r2
 80014d6:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80014da:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80014de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80014e2:	4413      	add	r3, r2
 80014e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80014e8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80014ec:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80014f0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80014f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	17da      	asrs	r2, r3, #31
 8001500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001504:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800150c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001510:	462a      	mov	r2, r5
 8001512:	fb02 f203 	mul.w	r2, r2, r3
 8001516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800151a:	4621      	mov	r1, r4
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	441a      	add	r2, r3
 8001522:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001526:	4621      	mov	r1, r4
 8001528:	fba3 3101 	umull	r3, r1, r3, r1
 800152c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001530:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001538:	18d3      	adds	r3, r2, r3
 800153a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800154a:	462b      	mov	r3, r5
 800154c:	0459      	lsls	r1, r3, #17
 800154e:	4622      	mov	r2, r4
 8001550:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001554:	4623      	mov	r3, r4
 8001556:	0458      	lsls	r0, r3, #17
 8001558:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800155c:	1814      	adds	r4, r2, r0
 800155e:	643c      	str	r4, [r7, #64]	; 0x40
 8001560:	414b      	adcs	r3, r1
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
 8001564:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001568:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800156c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001570:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001574:	b21b      	sxth	r3, r3
 8001576:	17da      	asrs	r2, r3, #31
 8001578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800157c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001580:	f04f 0000 	mov.w	r0, #0
 8001584:	f04f 0100 	mov.w	r1, #0
 8001588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800158c:	00d9      	lsls	r1, r3, #3
 800158e:	2000      	movs	r0, #0
 8001590:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001594:	1814      	adds	r4, r2, r0
 8001596:	63bc      	str	r4, [r7, #56]	; 0x38
 8001598:	414b      	adcs	r3, r1
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800159c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015a0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80015a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015ac:	fb03 f102 	mul.w	r1, r3, r2
 80015b0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	18ca      	adds	r2, r1, r3
 80015be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015c2:	fba3 3103 	umull	r3, r1, r3, r3
 80015c6:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80015ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015d2:	18d3      	adds	r3, r2, r3
 80015d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	17da      	asrs	r2, r3, #31
 80015e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015e8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80015ec:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80015f0:	4622      	mov	r2, r4
 80015f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80015f6:	4641      	mov	r1, r8
 80015f8:	fb01 f202 	mul.w	r2, r1, r2
 80015fc:	464d      	mov	r5, r9
 80015fe:	4618      	mov	r0, r3
 8001600:	4621      	mov	r1, r4
 8001602:	4603      	mov	r3, r0
 8001604:	fb03 f305 	mul.w	r3, r3, r5
 8001608:	4413      	add	r3, r2
 800160a:	4602      	mov	r2, r0
 800160c:	4641      	mov	r1, r8
 800160e:	fba2 2101 	umull	r2, r1, r2, r1
 8001612:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001616:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800161a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001624:	f04f 0000 	mov.w	r0, #0
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001630:	4623      	mov	r3, r4
 8001632:	0a18      	lsrs	r0, r3, #8
 8001634:	462a      	mov	r2, r5
 8001636:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800163a:	462b      	mov	r3, r5
 800163c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800163e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001642:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001646:	b21b      	sxth	r3, r3
 8001648:	17da      	asrs	r2, r3, #31
 800164a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800164e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001656:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800165a:	464a      	mov	r2, r9
 800165c:	fb02 f203 	mul.w	r2, r2, r3
 8001660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001664:	4644      	mov	r4, r8
 8001666:	fb04 f303 	mul.w	r3, r4, r3
 800166a:	441a      	add	r2, r3
 800166c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001670:	4644      	mov	r4, r8
 8001672:	fba3 3404 	umull	r3, r4, r3, r4
 8001676:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 800167a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800167e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001682:	18d3      	adds	r3, r2, r3
 8001684:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001694:	464c      	mov	r4, r9
 8001696:	0323      	lsls	r3, r4, #12
 8001698:	46c4      	mov	ip, r8
 800169a:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 800169e:	4644      	mov	r4, r8
 80016a0:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016a2:	1884      	adds	r4, r0, r2
 80016a4:	633c      	str	r4, [r7, #48]	; 0x30
 80016a6:	eb41 0303 	adc.w	r3, r1, r3
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
 80016ac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016b0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80016b4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80016b8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016bc:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016c8:	88db      	ldrh	r3, [r3, #6]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016d2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016d6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80016da:	4622      	mov	r2, r4
 80016dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80016e0:	4641      	mov	r1, r8
 80016e2:	fb01 f202 	mul.w	r2, r1, r2
 80016e6:	464d      	mov	r5, r9
 80016e8:	4618      	mov	r0, r3
 80016ea:	4621      	mov	r1, r4
 80016ec:	4603      	mov	r3, r0
 80016ee:	fb03 f305 	mul.w	r3, r3, r5
 80016f2:	4413      	add	r3, r2
 80016f4:	4602      	mov	r2, r0
 80016f6:	4641      	mov	r1, r8
 80016f8:	fba2 2101 	umull	r2, r1, r2, r1
 80016fc:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001700:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001704:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001708:	4413      	add	r3, r2
 800170a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800171a:	4629      	mov	r1, r5
 800171c:	104a      	asrs	r2, r1, #1
 800171e:	4629      	mov	r1, r5
 8001720:	17cb      	asrs	r3, r1, #31
 8001722:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001726:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800172a:	4313      	orrs	r3, r2
 800172c:	d101      	bne.n	8001732 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 800172e:	2300      	movs	r3, #0
 8001730:	e146      	b.n	80019c0 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001732:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001736:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800173a:	17da      	asrs	r2, r3, #31
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
 800173e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001740:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001744:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001748:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800174c:	105b      	asrs	r3, r3, #1
 800174e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001752:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800175c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001760:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001764:	4604      	mov	r4, r0
 8001766:	1aa4      	subs	r4, r4, r2
 8001768:	67bc      	str	r4, [r7, #120]	; 0x78
 800176a:	eb61 0303 	sbc.w	r3, r1, r3
 800176e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001770:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001774:	4622      	mov	r2, r4
 8001776:	462b      	mov	r3, r5
 8001778:	1891      	adds	r1, r2, r2
 800177a:	6239      	str	r1, [r7, #32]
 800177c:	415b      	adcs	r3, r3
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
 8001780:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001784:	4621      	mov	r1, r4
 8001786:	1851      	adds	r1, r2, r1
 8001788:	61b9      	str	r1, [r7, #24]
 800178a:	4629      	mov	r1, r5
 800178c:	414b      	adcs	r3, r1
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800179c:	4649      	mov	r1, r9
 800179e:	018b      	lsls	r3, r1, #6
 80017a0:	4641      	mov	r1, r8
 80017a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a6:	4641      	mov	r1, r8
 80017a8:	018a      	lsls	r2, r1, #6
 80017aa:	4641      	mov	r1, r8
 80017ac:	1889      	adds	r1, r1, r2
 80017ae:	6139      	str	r1, [r7, #16]
 80017b0:	4649      	mov	r1, r9
 80017b2:	eb43 0101 	adc.w	r1, r3, r1
 80017b6:	6179      	str	r1, [r7, #20]
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017c4:	4649      	mov	r1, r9
 80017c6:	008b      	lsls	r3, r1, #2
 80017c8:	46c4      	mov	ip, r8
 80017ca:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80017ce:	4641      	mov	r1, r8
 80017d0:	008a      	lsls	r2, r1, #2
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	4622      	mov	r2, r4
 80017da:	189b      	adds	r3, r3, r2
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	460b      	mov	r3, r1
 80017e0:	462a      	mov	r2, r5
 80017e2:	eb42 0303 	adc.w	r3, r2, r3
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017f4:	4649      	mov	r1, r9
 80017f6:	008b      	lsls	r3, r1, #2
 80017f8:	46c4      	mov	ip, r8
 80017fa:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80017fe:	4641      	mov	r1, r8
 8001800:	008a      	lsls	r2, r1, #2
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	4603      	mov	r3, r0
 8001808:	4622      	mov	r2, r4
 800180a:	189b      	adds	r3, r3, r2
 800180c:	673b      	str	r3, [r7, #112]	; 0x70
 800180e:	462b      	mov	r3, r5
 8001810:	460a      	mov	r2, r1
 8001812:	eb42 0303 	adc.w	r3, r2, r3
 8001816:	677b      	str	r3, [r7, #116]	; 0x74
 8001818:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800181c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001820:	f7fe fefc 	bl	800061c <__aeabi_ldivmod>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800182c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001830:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001834:	b21b      	sxth	r3, r3
 8001836:	17da      	asrs	r2, r3, #31
 8001838:	66bb      	str	r3, [r7, #104]	; 0x68
 800183a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800183c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001840:	f04f 0000 	mov.w	r0, #0
 8001844:	f04f 0100 	mov.w	r1, #0
 8001848:	0b50      	lsrs	r0, r2, #13
 800184a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800184e:	1359      	asrs	r1, r3, #13
 8001850:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001854:	462b      	mov	r3, r5
 8001856:	fb00 f203 	mul.w	r2, r0, r3
 800185a:	4623      	mov	r3, r4
 800185c:	fb03 f301 	mul.w	r3, r3, r1
 8001860:	4413      	add	r3, r2
 8001862:	4622      	mov	r2, r4
 8001864:	fba2 2100 	umull	r2, r1, r2, r0
 8001868:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800186c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001870:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001874:	4413      	add	r3, r2
 8001876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800187a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	0b50      	lsrs	r0, r2, #13
 8001888:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800188c:	1359      	asrs	r1, r3, #13
 800188e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001892:	462b      	mov	r3, r5
 8001894:	fb00 f203 	mul.w	r2, r0, r3
 8001898:	4623      	mov	r3, r4
 800189a:	fb03 f301 	mul.w	r3, r3, r1
 800189e:	4413      	add	r3, r2
 80018a0:	4622      	mov	r2, r4
 80018a2:	fba2 2100 	umull	r2, r1, r2, r0
 80018a6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80018aa:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018ae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018b2:	4413      	add	r3, r2
 80018b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018c4:	4621      	mov	r1, r4
 80018c6:	0e4a      	lsrs	r2, r1, #25
 80018c8:	4620      	mov	r0, r4
 80018ca:	4629      	mov	r1, r5
 80018cc:	460c      	mov	r4, r1
 80018ce:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80018d2:	164b      	asrs	r3, r1, #25
 80018d4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80018d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	17da      	asrs	r2, r3, #31
 80018e4:	663b      	str	r3, [r7, #96]	; 0x60
 80018e6:	667a      	str	r2, [r7, #100]	; 0x64
 80018e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018f0:	462a      	mov	r2, r5
 80018f2:	fb02 f203 	mul.w	r2, r2, r3
 80018f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018fa:	4621      	mov	r1, r4
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001906:	4621      	mov	r1, r4
 8001908:	fba2 2101 	umull	r2, r1, r2, r1
 800190c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001910:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001914:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001918:	4413      	add	r3, r2
 800191a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800192a:	4621      	mov	r1, r4
 800192c:	0cca      	lsrs	r2, r1, #19
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	460c      	mov	r4, r1
 8001934:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001938:	14cb      	asrs	r3, r1, #19
 800193a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800193e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001942:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001946:	1884      	adds	r4, r0, r2
 8001948:	65bc      	str	r4, [r7, #88]	; 0x58
 800194a:	eb41 0303 	adc.w	r3, r1, r3
 800194e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001950:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001954:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001958:	4621      	mov	r1, r4
 800195a:	1889      	adds	r1, r1, r2
 800195c:	6539      	str	r1, [r7, #80]	; 0x50
 800195e:	4629      	mov	r1, r5
 8001960:	eb43 0101 	adc.w	r1, r3, r1
 8001964:	6579      	str	r1, [r7, #84]	; 0x54
 8001966:	f04f 0000 	mov.w	r0, #0
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001972:	4623      	mov	r3, r4
 8001974:	0a18      	lsrs	r0, r3, #8
 8001976:	462a      	mov	r2, r5
 8001978:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800197c:	462b      	mov	r3, r5
 800197e:	1219      	asrs	r1, r3, #8
 8001980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001984:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001988:	b21b      	sxth	r3, r3
 800198a:	17da      	asrs	r2, r3, #31
 800198c:	64bb      	str	r3, [r7, #72]	; 0x48
 800198e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800199c:	464c      	mov	r4, r9
 800199e:	0123      	lsls	r3, r4, #4
 80019a0:	46c4      	mov	ip, r8
 80019a2:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80019a6:	4644      	mov	r4, r8
 80019a8:	0122      	lsls	r2, r4, #4
 80019aa:	1884      	adds	r4, r0, r2
 80019ac:	603c      	str	r4, [r7, #0]
 80019ae:	eb41 0303 	adc.w	r3, r1, r3
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 80019bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80019c6:	46bd      	mov	sp, r7
 80019c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019cc <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80019de:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	039a      	lsls	r2, r3, #14
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019ea:	051b      	lsls	r3, r3, #20
 80019ec:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019f4:	4619      	mov	r1, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a02:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	fb01 f202 	mul.w	r2, r1, r2
 8001a12:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	7f09      	ldrb	r1, [r1, #28]
 8001a18:	4608      	mov	r0, r1
 8001a1a:	6979      	ldr	r1, [r7, #20]
 8001a1c:	fb00 f101 	mul.w	r1, r0, r1
 8001a20:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a22:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a26:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a2a:	1292      	asrs	r2, r2, #10
 8001a2c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a36:	fb01 f202 	mul.w	r2, r1, r2
 8001a3a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001a3e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	13db      	asrs	r3, r3, #15
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	13d2      	asrs	r2, r2, #15
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	7e12      	ldrb	r2, [r2, #24]
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a6a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a72:	bfa8      	it	ge
 8001a74:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a78:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	131b      	asrs	r3, r3, #12
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a9c:	2b60      	cmp	r3, #96	; 0x60
 8001a9e:	d007      	beq.n	8001ab0 <bmp280_read_fixed+0x28>
		if (humidity)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <bmp280_read_fixed+0x32>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e000      	b.n	8001abc <bmp280_read_fixed+0x34>
 8001aba:	2306      	movs	r3, #6
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f107 0218 	add.w	r2, r7, #24
 8001ac6:	21f7      	movs	r1, #247	; 0xf7
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fab1 	bl	8001030 <read_data>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <bmp280_read_fixed+0x50>
		return false;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e038      	b.n	8001b4a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ad8:	7e3b      	ldrb	r3, [r7, #24]
 8001ada:	031a      	lsls	r2, r3, #12
 8001adc:	7e7b      	ldrb	r3, [r7, #25]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	7eba      	ldrb	r2, [r7, #26]
 8001ae4:	0912      	lsrs	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001aec:	7efb      	ldrb	r3, [r7, #27]
 8001aee:	031a      	lsls	r2, r3, #12
 8001af0:	7f3b      	ldrb	r3, [r7, #28]
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4313      	orrs	r3, r2
 8001af6:	7f7a      	ldrb	r2, [r7, #29]
 8001af8:	0912      	lsrs	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	4313      	orrs	r3, r2
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	461a      	mov	r2, r3
 8001b06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7ff fc6d 	bl	80013e8 <compensate_temperature>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	461a      	mov	r2, r3
 8001b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fc9c 	bl	8001458 <compensate_pressure>
 8001b20:	4602      	mov	r2, r0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00d      	beq.n	8001b48 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b2c:	7fbb      	ldrb	r3, [r7, #30]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	7ffa      	ldrb	r2, [r7, #31]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7ff ff45 	bl	80019cc <compensate_humidity>
 8001b42:	4602      	mov	r2, r0
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3730      	adds	r7, #48	; 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <bmp280_read_float+0x1a>
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	e000      	b.n	8001b70 <bmp280_read_float+0x1c>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f107 0218 	add.w	r2, r7, #24
 8001b74:	f107 011c 	add.w	r1, r7, #28
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff ff85 	bl	8001a88 <bmp280_read_fixed>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d02d      	beq.n	8001be0 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fba4 	bl	80002d4 <__aeabi_i2f>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4917      	ldr	r1, [pc, #92]	; (8001bec <bmp280_read_float+0x98>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fca7 	bl	80004e4 <__aeabi_fdiv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fb93 	bl	80002cc <__aeabi_ui2f>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fc99 	bl	80004e4 <__aeabi_fdiv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00d      	beq.n	8001bdc <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fb82 	bl	80002cc <__aeabi_ui2f>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fc88 	bl	80004e4 <__aeabi_fdiv>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	601a      	str	r2, [r3, #0]
		return true;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <bmp280_read_float+0x8e>
	}

	return false;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	42c80000 	.word	0x42c80000

08001bf0 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <DS3231_Init+0x18>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000094 	.word	0x20000094

08001c0c <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2100      	movs	r1, #0
 8001c22:	460a      	mov	r2, r1
 8001c24:	801a      	strh	r2, [r3, #0]
 8001c26:	460a      	mov	r2, r1
 8001c28:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8001c2a:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <DS3231_GetTime+0xf4>)
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	f107 020f 	add.w	r2, r7, #15
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	21d0      	movs	r1, #208	; 0xd0
 8001c3c:	f001 fc90 	bl	8003560 <HAL_I2C_Master_Transmit>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <DS3231_GetTime+0x3e>
 8001c46:	2300      	movs	r3, #0
 8001c48:	e055      	b.n	8001cf6 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <DS3231_GetTime+0xf4>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f107 0208 	add.w	r2, r7, #8
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2307      	movs	r3, #7
 8001c5a:	21d0      	movs	r1, #208	; 0xd0
 8001c5c:	f001 fd7e 	bl	800375c <HAL_I2C_Master_Receive>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <DS3231_GetTime+0x5e>
 8001c66:	2300      	movs	r3, #0
 8001c68:	e045      	b.n	8001cf6 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 8001c6a:	7a3b      	ldrb	r3, [r7, #8]
 8001c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f846 	bl	8001d04 <B2D>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8001c80:	7a7b      	ldrb	r3, [r7, #9]
 8001c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f83b 	bl	8001d04 <B2D>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 8001c96:	7abb      	ldrb	r3, [r7, #10]
 8001c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f830 	bl	8001d04 <B2D>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8001cb8:	7b3b      	ldrb	r3, [r7, #12]
 8001cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f81f 	bl	8001d04 <B2D>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8001cce:	7b7b      	ldrb	r3, [r7, #13]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f814 	bl	8001d04 <B2D>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f80c 	bl	8001d04 <B2D>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	701a      	strb	r2, [r3, #0]

  return true;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000094 	.word	0x20000094

08001d04 <B2D>:

  return true;
}

static uint8_t B2D(uint8_t bcd)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	b2db      	uxtb	r3, r3
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN PV */


// -------------------------------------------------------------------------
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]

		// Make delay

//		xTaskNotifyFromISR(Buttons_TaskHandle, 0, eNoAction, 0);
	}
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4c:	f000 ff2a 	bl	8002ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d50:	f000 f894 	bl	8001e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d54:	f000 fa04 	bl	8002160 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d58:	f000 f904 	bl	8001f64 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001d5c:	f000 f8d4 	bl	8001f08 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001d60:	f000 f936 	bl	8001fd0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001d64:	f000 f9d2 	bl	800210c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001d68:	f000 f984 	bl	8002074 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Init LCD
  ILI9341_SPI_Init();
 8001d6c:	f7fe fe12 	bl	8000994 <ILI9341_SPI_Init>
  ILI9341_Init();
 8001d70:	f7fe ff40 	bl	8000bf4 <ILI9341_Init>
  ILI9341_Enable();
 8001d74:	f7fe ff32 	bl	8000bdc <ILI9341_Enable>
  ILI9341_Fill_Screen(BLACK);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff f8e9 	bl	8000f50 <ILI9341_Fill_Screen>

  // DC3231 init
  DS3231_Init(&hi2c1);
 8001d7e:	4826      	ldr	r0, [pc, #152]	; (8001e18 <main+0xd0>)
 8001d80:	f7ff ff36 	bl	8001bf0 <DS3231_Init>
//  HAL_TIM_Base_Start_IT(&htim1);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d84:	f004 ff5c 	bl	8006c40 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (2, sizeof(QUEUE_t), &UARTQueue_attributes);
 8001d88:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <main+0xd4>)
 8001d8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d8e:	2002      	movs	r0, #2
 8001d90:	f005 f894 	bl	8006ebc <osMessageQueueNew>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <main+0xd8>)
 8001d98:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d9a:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <main+0xdc>)
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4822      	ldr	r0, [pc, #136]	; (8001e28 <main+0xe0>)
 8001da0:	f004 ffb4 	bl	8006d0c <osThreadNew>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <main+0xe4>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* creation of RTC_DS3231_Task */
  RTC_DS3231_TaskHandle = osThreadNew(start_RTC_DS3231_Task, NULL, &RTC_DS3231_Task_attributes);
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <main+0xe8>)
 8001dac:	2100      	movs	r1, #0
 8001dae:	4821      	ldr	r0, [pc, #132]	; (8001e34 <main+0xec>)
 8001db0:	f004 ffac 	bl	8006d0c <osThreadNew>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <main+0xf0>)
 8001db8:	6013      	str	r3, [r2, #0]

  /* creation of BPE280_Task */
  BPE280_TaskHandle = osThreadNew(start_BPE280_Task, NULL, &BPE280_Task_attributes);
 8001dba:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <main+0xf4>)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4820      	ldr	r0, [pc, #128]	; (8001e40 <main+0xf8>)
 8001dc0:	f004 ffa4 	bl	8006d0c <osThreadNew>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <main+0xfc>)
 8001dc8:	6013      	str	r3, [r2, #0]

  /* creation of MAIN_TASK */
  MAIN_TASKHandle = osThreadNew(start_MAIN_TASK, NULL, &MAIN_TASK_attributes);
 8001dca:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <main+0x100>)
 8001dcc:	2100      	movs	r1, #0
 8001dce:	481f      	ldr	r0, [pc, #124]	; (8001e4c <main+0x104>)
 8001dd0:	f004 ff9c 	bl	8006d0c <osThreadNew>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <main+0x108>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* creation of UART_USB_Task */
  UART_USB_TaskHandle = osThreadNew(start_UART_USB_Task, NULL, &UART_USB_Task_attributes);
 8001dda:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <main+0x10c>)
 8001ddc:	2100      	movs	r1, #0
 8001dde:	481e      	ldr	r0, [pc, #120]	; (8001e58 <main+0x110>)
 8001de0:	f004 ff94 	bl	8006d0c <osThreadNew>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <main+0x114>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* creation of Buttons_Task */
  Buttons_TaskHandle = osThreadNew(start_Buttons_Task, NULL, &Buttons_Task_attributes);
 8001dea:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <main+0x118>)
 8001dec:	2100      	movs	r1, #0
 8001dee:	481d      	ldr	r0, [pc, #116]	; (8001e64 <main+0x11c>)
 8001df0:	f004 ff8c 	bl	8006d0c <osThreadNew>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <main+0x120>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(start_LCD_Task, NULL, &LCD_Task_attributes);
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <main+0x124>)
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	481c      	ldr	r0, [pc, #112]	; (8001e70 <main+0x128>)
 8001e00:	f004 ff84 	bl	8006d0c <osThreadNew>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <main+0x12c>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  HAL_TIM_Base_Start_IT(&htim2);		//  This TIM3 using for calculate how many time all tasks was running.
 8001e0a:	481b      	ldr	r0, [pc, #108]	; (8001e78 <main+0x130>)
 8001e0c:	f003 ff2e 	bl	8005c6c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e10:	f004 ff48 	bl	8006ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <main+0xcc>
 8001e16:	bf00      	nop
 8001e18:	20000488 	.word	0x20000488
 8001e1c:	0800abd8 	.word	0x0800abd8
 8001e20:	20000624 	.word	0x20000624
 8001e24:	0800aadc 	.word	0x0800aadc
 8001e28:	080022c9 	.word	0x080022c9
 8001e2c:	20000608 	.word	0x20000608
 8001e30:	0800ab00 	.word	0x0800ab00
 8001e34:	080022fb 	.word	0x080022fb
 8001e38:	2000060c 	.word	0x2000060c
 8001e3c:	0800ab24 	.word	0x0800ab24
 8001e40:	0800230d 	.word	0x0800230d
 8001e44:	20000610 	.word	0x20000610
 8001e48:	0800ab48 	.word	0x0800ab48
 8001e4c:	0800238d 	.word	0x0800238d
 8001e50:	20000614 	.word	0x20000614
 8001e54:	0800ab6c 	.word	0x0800ab6c
 8001e58:	0800239d 	.word	0x0800239d
 8001e5c:	20000618 	.word	0x20000618
 8001e60:	0800ab90 	.word	0x0800ab90
 8001e64:	08002651 	.word	0x08002651
 8001e68:	2000061c 	.word	0x2000061c
 8001e6c:	0800abb4 	.word	0x0800abb4
 8001e70:	08002661 	.word	0x08002661
 8001e74:	20000620 	.word	0x20000620
 8001e78:	2000057c 	.word	0x2000057c

08001e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b090      	sub	sp, #64	; 0x40
 8001e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e82:	f107 0318 	add.w	r3, r7, #24
 8001e86:	2228      	movs	r2, #40	; 0x28
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f008 f824 	bl	8009ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eac:	2301      	movs	r3, #1
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 0318 	add.w	r3, r7, #24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 fecd 	bl	8004c64 <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ed0:	f000 fbec 	bl	80026ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2102      	movs	r1, #2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 f93a 	bl	8005168 <HAL_RCC_ClockConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001efa:	f000 fbd7 	bl	80026ac <Error_Handler>
  }
}
 8001efe:	bf00      	nop
 8001f00:	3740      	adds	r7, #64	; 0x40
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <MX_I2C1_Init+0x54>)
 8001f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <MX_I2C1_Init+0x58>)
 8001f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_I2C1_Init+0x50>)
 8001f46:	f001 f9c7 	bl	80032d8 <HAL_I2C_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f50:	f000 fbac 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000488 	.word	0x20000488
 8001f5c:	40005400 	.word	0x40005400
 8001f60:	000186a0 	.word	0x000186a0

08001f64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <MX_SPI1_Init+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f98:	2208      	movs	r2, #8
 8001f9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001fb0:	220a      	movs	r2, #10
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <MX_SPI1_Init+0x64>)
 8001fb6:	f003 fa9f 	bl	80054f8 <HAL_SPI_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fc0:	f000 fb74 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200004dc 	.word	0x200004dc
 8001fcc:	40013000 	.word	0x40013000

08001fd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <MX_TIM1_Init+0x9c>)
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <MX_TIM1_Init+0xa0>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_TIM1_Init+0x9c>)
 8001ff4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ff8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <MX_TIM1_Init+0x9c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <MX_TIM1_Init+0x9c>)
 8002002:	f242 7210 	movw	r2, #10000	; 0x2710
 8002006:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_TIM1_Init+0x9c>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <MX_TIM1_Init+0x9c>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_TIM1_Init+0x9c>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800201a:	4814      	ldr	r0, [pc, #80]	; (800206c <MX_TIM1_Init+0x9c>)
 800201c:	f003 fdd6 	bl	8005bcc <HAL_TIM_Base_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002026:	f000 fb41 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	4619      	mov	r1, r3
 8002036:	480d      	ldr	r0, [pc, #52]	; (800206c <MX_TIM1_Init+0x9c>)
 8002038:	f003 ff72 	bl	8005f20 <HAL_TIM_ConfigClockSource>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002042:	f000 fb33 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800204e:	463b      	mov	r3, r7
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <MX_TIM1_Init+0x9c>)
 8002054:	f004 f944 	bl	80062e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800205e:	f000 fb25 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000534 	.word	0x20000534
 8002070:	40012c00 	.word	0x40012c00

08002074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	463b      	mov	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM2_Init+0x94>)
 8002092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_TIM2_Init+0x94>)
 800209a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800209e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <MX_TIM2_Init+0x94>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_TIM2_Init+0x94>)
 80020a8:	220a      	movs	r2, #10
 80020aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_TIM2_Init+0x94>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_TIM2_Init+0x94>)
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020b8:	4813      	ldr	r0, [pc, #76]	; (8002108 <MX_TIM2_Init+0x94>)
 80020ba:	f003 fd87 	bl	8005bcc <HAL_TIM_Base_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020c4:	f000 faf2 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	4619      	mov	r1, r3
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <MX_TIM2_Init+0x94>)
 80020d6:	f003 ff23 	bl	8005f20 <HAL_TIM_ConfigClockSource>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020e0:	f000 fae4 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ec:	463b      	mov	r3, r7
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_TIM2_Init+0x94>)
 80020f2:	f004 f8f5 	bl	80062e0 <HAL_TIMEx_MasterConfigSynchronization>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020fc:	f000 fad6 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2000057c 	.word	0x2000057c

0800210c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_USART1_UART_Init+0x50>)
 8002114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002144:	f004 f93c 	bl	80063c0 <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800214e:	f000 faad 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200005c4 	.word	0x200005c4
 800215c:	40013800 	.word	0x40013800

08002160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002174:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <MX_GPIO_Init+0x154>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <MX_GPIO_Init+0x154>)
 800217a:	f043 0310 	orr.w	r3, r3, #16
 800217e:	6193      	str	r3, [r2, #24]
 8002180:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <MX_GPIO_Init+0x154>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218c:	4b49      	ldr	r3, [pc, #292]	; (80022b4 <MX_GPIO_Init+0x154>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <MX_GPIO_Init+0x154>)
 8002192:	f043 0320 	orr.w	r3, r3, #32
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <MX_GPIO_Init+0x154>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <MX_GPIO_Init+0x154>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a42      	ldr	r2, [pc, #264]	; (80022b4 <MX_GPIO_Init+0x154>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <MX_GPIO_Init+0x154>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021bc:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <MX_GPIO_Init+0x154>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a3c      	ldr	r2, [pc, #240]	; (80022b4 <MX_GPIO_Init+0x154>)
 80021c2:	f043 0308 	orr.w	r3, r3, #8
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <MX_GPIO_Init+0x154>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021da:	4837      	ldr	r0, [pc, #220]	; (80022b8 <MX_GPIO_Init+0x158>)
 80021dc:	f001 f84c 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e6:	4835      	ldr	r0, [pc, #212]	; (80022bc <MX_GPIO_Init+0x15c>)
 80021e8:	f001 f846 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80021f2:	4833      	ldr	r0, [pc, #204]	; (80022c0 <MX_GPIO_Init+0x160>)
 80021f4:	f001 f840 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2302      	movs	r3, #2
 8002208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4619      	mov	r1, r3
 8002210:	4829      	ldr	r0, [pc, #164]	; (80022b8 <MX_GPIO_Init+0x158>)
 8002212:	f000 fead 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_4_Pin KEY_3_Pin KEY_2_Pin KEY_1_Pin */
  GPIO_InitStruct.Pin = KEY_4_Pin|KEY_3_Pin|KEY_2_Pin|KEY_1_Pin;
 8002216:	231e      	movs	r3, #30
 8002218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <MX_GPIO_Init+0x164>)
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	4619      	mov	r1, r3
 8002228:	4825      	ldr	r0, [pc, #148]	; (80022c0 <MX_GPIO_Init+0x160>)
 800222a:	f000 fea1 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800222e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002234:	2301      	movs	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	4619      	mov	r1, r3
 8002246:	481d      	ldr	r0, [pc, #116]	; (80022bc <MX_GPIO_Init+0x15c>)
 8002248:	f000 fe92 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 800224c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002252:	2301      	movs	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4619      	mov	r1, r3
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <MX_GPIO_Init+0x160>)
 8002266:	f000 fe83 	bl	8002f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2105      	movs	r1, #5
 800226e:	2007      	movs	r0, #7
 8002270:	f000 fda3 	bl	8002dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002274:	2007      	movs	r0, #7
 8002276:	f000 fdbc 	bl	8002df2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2105      	movs	r1, #5
 800227e:	2008      	movs	r0, #8
 8002280:	f000 fd9b 	bl	8002dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002284:	2008      	movs	r0, #8
 8002286:	f000 fdb4 	bl	8002df2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2105      	movs	r1, #5
 800228e:	2009      	movs	r0, #9
 8002290:	f000 fd93 	bl	8002dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002294:	2009      	movs	r0, #9
 8002296:	f000 fdac 	bl	8002df2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2105      	movs	r1, #5
 800229e:	200a      	movs	r0, #10
 80022a0:	f000 fd8b 	bl	8002dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022a4:	200a      	movs	r0, #10
 80022a6:	f000 fda4 	bl	8002df2 <HAL_NVIC_EnableIRQ>

}
 80022aa:	bf00      	nop
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40011000 	.word	0x40011000
 80022bc:	40010c00 	.word	0x40010c00
 80022c0:	40010800 	.word	0x40010800
 80022c4:	10110000 	.word	0x10110000

080022c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 ILI9341_Fill_Screen(BLUE);
 80022d0:	201f      	movs	r0, #31
 80022d2:	f7fe fe3d 	bl	8000f50 <ILI9341_Fill_Screen>
//	 HAL_GPIO_TogglePin(GPIOC, LED_Pin);
	 	 osDelay(500);
 80022d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022da:	f004 fdc1 	bl	8006e60 <osDelay>
	 	  ILI9341_Fill_Screen(YELLOW);
 80022de:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80022e2:	f7fe fe35 	bl	8000f50 <ILI9341_Fill_Screen>
	 	 osDelay(500);
 80022e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022ea:	f004 fdb9 	bl	8006e60 <osDelay>

	 	  // Test Clock dc3231
	 	  _RTC time;
	 	  DS3231_GetTime(&time);
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fc8a 	bl	8001c0c <DS3231_GetTime>
  {
 80022f8:	e7ea      	b.n	80022d0 <StartDefaultTask+0x8>

080022fa <start_RTC_DS3231_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_RTC_DS3231_Task */
void start_RTC_DS3231_Task(void *argument)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_RTC_DS3231_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002302:	2001      	movs	r0, #1
 8002304:	f004 fdac 	bl	8006e60 <osDelay>
 8002308:	e7fb      	b.n	8002302 <start_RTC_DS3231_Task+0x8>
	...

0800230c <start_BPE280_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_BPE280_Task */
void start_BPE280_Task(void *argument)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b094      	sub	sp, #80	; 0x50
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	BMP280_HandleTypedef bmp280;
	float pressure, temperature, humidity;

	// Init BME280
	bmp280_init_default_params(&bmp280.params);
 8002314:	f107 0318 	add.w	r3, r7, #24
 8002318:	332c      	adds	r3, #44	; 0x2c
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fe3e 	bl	8000f9c <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002320:	2376      	movs	r3, #118	; 0x76
 8002322:	87bb      	strh	r3, [r7, #60]	; 0x3c
	bmp280.i2c = &hi2c1;
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <start_BPE280_Task+0x7c>)
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
	if(bmp280_init(&bmp280, &bmp280.params) != true)
 8002328:	f107 0318 	add.w	r3, r7, #24
 800232c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe ffa9 	bl	800128e <bmp280_init>
 800233c:	4603      	mov	r3, r0
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d000      	beq.n	800234a <start_BPE280_Task+0x3e>
	{
		while(1){}   			// ERROR
 8002348:	e7fe      	b.n	8002348 <start_BPE280_Task+0x3c>
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 800234a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800234e:	2b60      	cmp	r3, #96	; 0x60
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	for(;;)
	{
		if((bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) != true)
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	f107 0214 	add.w	r2, r7, #20
 8002362:	f107 0110 	add.w	r1, r7, #16
 8002366:	f107 0018 	add.w	r0, r7, #24
 800236a:	f7ff fbf3 	bl	8001b54 <bmp280_read_float>
 800236e:	4603      	mov	r3, r0
 8002370:	f083 0301 	eor.w	r3, r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d000      	beq.n	800237c <start_BPE280_Task+0x70>
		{
			while(1) {}			// ERROR
 800237a:	e7fe      	b.n	800237a <start_BPE280_Task+0x6e>
		}
		else
		{
			// Send data into QUEU to the main task <<<<<<<<<<<<<<<<<<<<<<<<<<
		}
		osDelay(2000);
 800237c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002380:	f004 fd6e 	bl	8006e60 <osDelay>
		if((bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) != true)
 8002384:	e7e9      	b.n	800235a <start_BPE280_Task+0x4e>
 8002386:	bf00      	nop
 8002388:	20000488 	.word	0x20000488

0800238c <start_MAIN_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_MAIN_TASK */
void start_MAIN_TASK(void *argument)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_MAIN_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002394:	2001      	movs	r0, #1
 8002396:	f004 fd63 	bl	8006e60 <osDelay>
 800239a:	e7fb      	b.n	8002394 <start_MAIN_TASK+0x8>

0800239c <start_UART_USB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_UART_USB_Task */
void start_UART_USB_Task(void *argument)
{
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80023a8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80023ac:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN start_UART_USB_Task */
  /* Infinite loop */
  for(;;)
  {
	  char str_end_of_line[3] = {'\r','\n'};
 80023ae:	4a9f      	ldr	r2, [pc, #636]	; (800262c <start_UART_USB_Task+0x290>)
 80023b0:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	4611      	mov	r1, r2
 80023b8:	8019      	strh	r1, [r3, #0]
 80023ba:	3302      	adds	r3, #2
 80023bc:	0c12      	lsrs	r2, r2, #16
 80023be:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 80023c0:	232d      	movs	r3, #45	; 0x2d
 80023c2:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80023cc:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 80023d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f007 fd79 	bl	8009ed8 <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 80023e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fd feb0 	bl	8000150 <strlen>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023f8:	4413      	add	r3, r2
 80023fa:	4a8d      	ldr	r2, [pc, #564]	; (8002630 <start_UART_USB_Task+0x294>)
 80023fc:	461d      	mov	r5, r3
 80023fe:	4614      	mov	r4, r2
 8002400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002402:	6028      	str	r0, [r5, #0]
 8002404:	6069      	str	r1, [r5, #4]
 8002406:	60aa      	str	r2, [r5, #8]
 8002408:	60eb      	str	r3, [r5, #12]
 800240a:	cc03      	ldmia	r4!, {r0, r1}
 800240c:	6128      	str	r0, [r5, #16]
 800240e:	6169      	str	r1, [r5, #20]
 8002410:	7823      	ldrb	r3, [r4, #0]
 8002412:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8002414:	f007 fc48 	bl	8009ca8 <xPortGetFreeHeapSize>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	4b85      	ldr	r3, [pc, #532]	; (8002634 <start_UART_USB_Task+0x298>)
 800241e:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8002420:	4b84      	ldr	r3, [pc, #528]	; (8002634 <start_UART_USB_Task+0x298>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8002428:	220a      	movs	r2, #10
 800242a:	4618      	mov	r0, r3
 800242c:	f007 fd42 	bl	8009eb4 <itoa>
	  strcat(msg.Buf, buff);
 8002430:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002434:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f007 fe82 	bl	800a144 <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8002440:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8002444:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f007 fe7a 	bl	800a144 <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8002450:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002454:	4618      	mov	r0, r3
 8002456:	f7fd fe7b 	bl	8000150 <strlen>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002462:	4413      	add	r3, r2
 8002464:	4a74      	ldr	r2, [pc, #464]	; (8002638 <start_UART_USB_Task+0x29c>)
 8002466:	4614      	mov	r4, r2
 8002468:	469c      	mov	ip, r3
 800246a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800246e:	4665      	mov	r5, ip
 8002470:	4626      	mov	r6, r4
 8002472:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002474:	6028      	str	r0, [r5, #0]
 8002476:	6069      	str	r1, [r5, #4]
 8002478:	60aa      	str	r2, [r5, #8]
 800247a:	60eb      	str	r3, [r5, #12]
 800247c:	3410      	adds	r4, #16
 800247e:	f10c 0c10 	add.w	ip, ip, #16
 8002482:	4574      	cmp	r4, lr
 8002484:	d1f3      	bne.n	800246e <start_UART_USB_Task+0xd2>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8002486:	486d      	ldr	r0, [pc, #436]	; (800263c <start_UART_USB_Task+0x2a0>)
 8002488:	f006 fc7e 	bl	8008d88 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8002492:	e004      	b.n	800249e <start_UART_USB_Task+0x102>
	  {
		  buffer_size ++;
 8002494:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002498:	3301      	adds	r3, #1
 800249a:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 800249e:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 80024a2:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80024a6:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f1      	bne.n	8002494 <start_UART_USB_Task+0xf8>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80024bc:	e013      	b.n	80024e6 <start_UART_USB_Task+0x14a>
	  {
		  // add data to queue
		  msg.Buf[buffer_size + i] = str_management_memory_str[i];
 80024be:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 80024c2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80024c6:	4413      	add	r3, r2
 80024c8:	495c      	ldr	r1, [pc, #368]	; (800263c <start_UART_USB_Task+0x2a0>)
 80024ca:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80024ce:	440a      	add	r2, r1
 80024d0:	7811      	ldrb	r1, [r2, #0]
 80024d2:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80024d6:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 80024da:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 80024dc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80024e0:	3301      	adds	r3, #1
 80024e2:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80024e6:	4a55      	ldr	r2, [pc, #340]	; (800263c <start_UART_USB_Task+0x2a0>)
 80024e8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80024ec:	4413      	add	r3, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e4      	bne.n	80024be <start_UART_USB_Task+0x122>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 80024f4:	4b52      	ldr	r3, [pc, #328]	; (8002640 <start_UART_USB_Task+0x2a4>)
 80024f6:	f207 4434 	addw	r4, r7, #1076	; 0x434
 80024fa:	461d      	mov	r5, r3
 80024fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002500:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002504:	c403      	stmia	r4!, {r0, r1}
 8002506:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8002508:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800250c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8002510:	4a4c      	ldr	r2, [pc, #304]	; (8002644 <start_UART_USB_Task+0x2a8>)
 8002512:	461c      	mov	r4, r3
 8002514:	4615      	mov	r5, r2
 8002516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800251c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002522:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 8002526:	f207 4234 	addw	r2, r7, #1076	; 0x434
 800252a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f007 fe07 	bl	800a144 <strcat>
	  strcat(msg.Buf, str_head_2);
 8002536:	f107 020c 	add.w	r2, r7, #12
 800253a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f007 fdff 	bl	800a144 <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8002546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800254a:	2100      	movs	r1, #0
 800254c:	483b      	ldr	r0, [pc, #236]	; (800263c <start_UART_USB_Task+0x2a0>)
 800254e:	f007 fcc3 	bl	8009ed8 <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8002552:	483a      	ldr	r0, [pc, #232]	; (800263c <start_UART_USB_Task+0x2a0>)
 8002554:	f006 fcb0 	bl	8008eb8 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 8002558:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800255c:	b29a      	uxth	r2, r3
 800255e:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002562:	4413      	add	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	3340      	adds	r3, #64	; 0x40
 8002568:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8002572:	e013      	b.n	800259c <start_UART_USB_Task+0x200>
	  {
		  // add data to queue
		  msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002574:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002578:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800257c:	4413      	add	r3, r2
 800257e:	492f      	ldr	r1, [pc, #188]	; (800263c <start_UART_USB_Task+0x2a0>)
 8002580:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8002584:	440a      	add	r2, r1
 8002586:	7811      	ldrb	r1, [r2, #0]
 8002588:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800258c:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8002590:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002592:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8002596:	3301      	adds	r3, #1
 8002598:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800259c:	4a27      	ldr	r2, [pc, #156]	; (800263c <start_UART_USB_Task+0x2a0>)
 800259e:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80025a2:	4413      	add	r3, r2
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1e4      	bne.n	8002574 <start_UART_USB_Task+0x1d8>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 80025aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd fdce 	bl	8000150 <strlen>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025bc:	4413      	add	r3, r2
 80025be:	4a22      	ldr	r2, [pc, #136]	; (8002648 <start_UART_USB_Task+0x2ac>)
 80025c0:	4614      	mov	r4, r2
 80025c2:	469c      	mov	ip, r3
 80025c4:	f104 0e20 	add.w	lr, r4, #32
 80025c8:	4665      	mov	r5, ip
 80025ca:	4626      	mov	r6, r4
 80025cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80025ce:	6028      	str	r0, [r5, #0]
 80025d0:	6069      	str	r1, [r5, #4]
 80025d2:	60aa      	str	r2, [r5, #8]
 80025d4:	60eb      	str	r3, [r5, #12]
 80025d6:	3410      	adds	r4, #16
 80025d8:	f10c 0c10 	add.w	ip, ip, #16
 80025dc:	4574      	cmp	r4, lr
 80025de:	d1f3      	bne.n	80025c8 <start_UART_USB_Task+0x22c>
 80025e0:	4665      	mov	r5, ip
 80025e2:	4623      	mov	r3, r4
 80025e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025e6:	6028      	str	r0, [r5, #0]
 80025e8:	6069      	str	r1, [r5, #4]
 80025ea:	60aa      	str	r2, [r5, #8]

	  buffer_size = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 80025f2:	e004      	b.n	80025fe <start_UART_USB_Task+0x262>
	  {
		  buffer_size ++;
 80025f4:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 80025f8:	3301      	adds	r3, #1
 80025fa:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 80025fe:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002602:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002606:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f1      	bne.n	80025f4 <start_UART_USB_Task+0x258>
	  }
	  // Transmit over virtual comport
	  HAL_UART_Transmit_IT( &huart1, msg.Buf, buffer_size);
 8002610:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8002614:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002618:	4619      	mov	r1, r3
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <start_UART_USB_Task+0x2b0>)
 800261c:	f003 ff1d 	bl	800645a <HAL_UART_Transmit_IT>

	  osDelay(3000);
 8002620:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002624:	f004 fc1c 	bl	8006e60 <osDelay>
  {
 8002628:	e6c1      	b.n	80023ae <start_UART_USB_Task+0x12>
 800262a:	bf00      	nop
 800262c:	0800aa44 	.word	0x0800aa44
 8002630:	0800a9c8 	.word	0x0800a9c8
 8002634:	20000484 	.word	0x20000484
 8002638:	0800a9e4 	.word	0x0800a9e4
 800263c:	2000009c 	.word	0x2000009c
 8002640:	0800aa48 	.word	0x0800aa48
 8002644:	0800aa64 	.word	0x0800aa64
 8002648:	0800aa18 	.word	0x0800aa18
 800264c:	200005c4 	.word	0x200005c4

08002650 <start_Buttons_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_Buttons_Task */
void start_Buttons_Task(void *argument)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
//	  		}
//	  		if(HAL_GPIO_ReadPin(GPIOA, KEY_4_Pin) == GPIO_PIN_SET)
//	  		{
//	  			HAL_GPIO_TogglePin(GPIOC, LED_Pin);
//	  		}
    osDelay(1);
 8002658:	2001      	movs	r0, #1
 800265a:	f004 fc01 	bl	8006e60 <osDelay>
 800265e:	e7fb      	b.n	8002658 <start_Buttons_Task+0x8>

08002660 <start_LCD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_LCD_Task */
void start_LCD_Task(void *argument)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_LCD_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002668:	2001      	movs	r0, #1
 800266a:	f004 fbf9 	bl	8006e60 <osDelay>
 800266e:	e7fb      	b.n	8002668 <start_LCD_Task+0x8>

08002670 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
//	if(i == 100000000)
//	{
//		i = 0;
//	}

	if(htim->Instance == TIM2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002680:	d104      	bne.n	800268c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800268a:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8002696:	f000 fa9b 	bl	8002bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000098 	.word	0x20000098
 80026a8:	40000800 	.word	0x40000800

080026ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <Error_Handler+0x8>
	...

080026b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <HAL_MspInit+0x78>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <HAL_MspInit+0x78>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6193      	str	r3, [r2, #24]
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_MspInit+0x78>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_MspInit+0x78>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a15      	ldr	r2, [pc, #84]	; (8002730 <HAL_MspInit+0x78>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_MspInit+0x78>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	210f      	movs	r1, #15
 80026f2:	f06f 0001 	mvn.w	r0, #1
 80026f6:	f000 fb60 	bl	8002dba <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2105      	movs	r1, #5
 80026fe:	2001      	movs	r0, #1
 8002700:	f000 fb5b 	bl	8002dba <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002704:	2001      	movs	r0, #1
 8002706:	f000 fb74 	bl	8002df2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_MspInit+0x7c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <HAL_MspInit+0x7c>)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	40010000 	.word	0x40010000

08002738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_I2C_MspInit+0x70>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d123      	bne.n	80027a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <HAL_I2C_MspInit+0x74>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a13      	ldr	r2, [pc, #76]	; (80027ac <HAL_I2C_MspInit+0x74>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_I2C_MspInit+0x74>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002774:	2312      	movs	r3, #18
 8002776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002778:	2303      	movs	r3, #3
 800277a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4619      	mov	r1, r3
 8002782:	480b      	ldr	r0, [pc, #44]	; (80027b0 <HAL_I2C_MspInit+0x78>)
 8002784:	f000 fbf4 	bl	8002f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_I2C_MspInit+0x74>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_I2C_MspInit+0x74>)
 800278e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002792:	61d3      	str	r3, [r2, #28]
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_I2C_MspInit+0x74>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027a0:	bf00      	nop
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40005400 	.word	0x40005400
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010c00 	.word	0x40010c00

080027b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1f      	ldr	r2, [pc, #124]	; (800284c <HAL_SPI_MspInit+0x98>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d137      	bne.n	8002844 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_SPI_MspInit+0x9c>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_SPI_MspInit+0x9c>)
 80027da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_SPI_MspInit+0x9c>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <HAL_SPI_MspInit+0x9c>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_SPI_MspInit+0x9c>)
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	6193      	str	r3, [r2, #24]
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_SPI_MspInit+0x9c>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002804:	23a0      	movs	r3, #160	; 0xa0
 8002806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	4619      	mov	r1, r3
 8002816:	480f      	ldr	r0, [pc, #60]	; (8002854 <HAL_SPI_MspInit+0xa0>)
 8002818:	f000 fbaa 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800281c:	2340      	movs	r3, #64	; 0x40
 800281e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	4619      	mov	r1, r3
 800282e:	4809      	ldr	r0, [pc, #36]	; (8002854 <HAL_SPI_MspInit+0xa0>)
 8002830:	f000 fb9e 	bl	8002f70 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002834:	2200      	movs	r2, #0
 8002836:	2105      	movs	r1, #5
 8002838:	2023      	movs	r0, #35	; 0x23
 800283a:	f000 fabe 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800283e:	2023      	movs	r0, #35	; 0x23
 8002840:	f000 fad7 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002844:	bf00      	nop
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40013000 	.word	0x40013000
 8002850:	40021000 	.word	0x40021000
 8002854:	40010800 	.word	0x40010800

08002858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <HAL_TIM_Base_MspInit+0x68>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10c      	bne.n	8002884 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800286a:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 8002870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002874:	6193      	str	r3, [r2, #24]
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002882:	e018      	b.n	80028b6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288c:	d113      	bne.n	80028b6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	61d3      	str	r3, [r2, #28]
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2105      	movs	r1, #5
 80028aa:	201c      	movs	r0, #28
 80028ac:	f000 fa85 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028b0:	201c      	movs	r0, #28
 80028b2:	f000 fa9e 	bl	8002df2 <HAL_NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a20      	ldr	r2, [pc, #128]	; (8002964 <HAL_UART_MspInit+0x9c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d139      	bne.n	800295c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028e8:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <HAL_UART_MspInit+0xa0>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_UART_MspInit+0xa0>)
 80028ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_UART_MspInit+0xa0>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_UART_MspInit+0xa0>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_UART_MspInit+0xa0>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	6193      	str	r3, [r2, #24]
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_UART_MspInit+0xa0>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002926:	f107 0310 	add.w	r3, r7, #16
 800292a:	4619      	mov	r1, r3
 800292c:	480f      	ldr	r0, [pc, #60]	; (800296c <HAL_UART_MspInit+0xa4>)
 800292e:	f000 fb1f 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	4619      	mov	r1, r3
 8002946:	4809      	ldr	r0, [pc, #36]	; (800296c <HAL_UART_MspInit+0xa4>)
 8002948:	f000 fb12 	bl	8002f70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2105      	movs	r1, #5
 8002950:	2025      	movs	r0, #37	; 0x25
 8002952:	f000 fa32 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002956:	2025      	movs	r0, #37	; 0x25
 8002958:	f000 fa4b 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800295c:	bf00      	nop
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40013800 	.word	0x40013800
 8002968:	40021000 	.word	0x40021000
 800296c:	40010800 	.word	0x40010800

08002970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	; 0x30
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002980:	2200      	movs	r2, #0
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	201e      	movs	r0, #30
 8002986:	f000 fa18 	bl	8002dba <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800298a:	201e      	movs	r0, #30
 800298c:	f000 fa31 	bl	8002df2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_InitTick+0xa0>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_InitTick+0xa0>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	61d3      	str	r3, [r2, #28]
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <HAL_InitTick+0xa0>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a8:	f107 0210 	add.w	r2, r7, #16
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 fd52 	bl	800545c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029b8:	f002 fd28 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 80029bc:	4603      	mov	r3, r0
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_InitTick+0xa4>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0c9b      	lsrs	r3, r3, #18
 80029cc:	3b01      	subs	r3, #1
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_InitTick+0xa8>)
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <HAL_InitTick+0xac>)
 80029d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_InitTick+0xa8>)
 80029d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029dc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_InitTick+0xa8>)
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_InitTick+0xa8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_InitTick+0xa8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80029f0:	4809      	ldr	r0, [pc, #36]	; (8002a18 <HAL_InitTick+0xa8>)
 80029f2:	f003 f8eb 	bl	8005bcc <HAL_TIM_Base_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80029fc:	4806      	ldr	r0, [pc, #24]	; (8002a18 <HAL_InitTick+0xa8>)
 80029fe:	f003 f935 	bl	8005c6c <HAL_TIM_Base_Start_IT>
 8002a02:	4603      	mov	r3, r0
 8002a04:	e000      	b.n	8002a08 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3730      	adds	r7, #48	; 0x30
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	431bde83 	.word	0x431bde83
 8002a18:	20000e78 	.word	0x20000e78
 8002a1c:	40000800 	.word	0x40000800

08002a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <NMI_Handler+0x4>

08002a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2a:	e7fe      	b.n	8002a2a <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <MemManage_Handler+0x4>

08002a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <BusFault_Handler+0x4>

08002a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <UsageFault_Handler+0x4>

08002a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002a4e:	f002 f8f1 	bl	8004c34 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_4_Pin);
 8002a5a:	2002      	movs	r0, #2
 8002a5c:	f000 fc24 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_3_Pin);
 8002a68:	2004      	movs	r0, #4
 8002a6a:	f000 fc1d 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_2_Pin);
 8002a76:	2008      	movs	r0, #8
 8002a78:	f000 fc16 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_1_Pin);
 8002a84:	2010      	movs	r0, #16
 8002a86:	f000 fc0f 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <TIM2_IRQHandler+0x10>)
 8002a96:	f003 f93b 	bl	8005d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000057c 	.word	0x2000057c

08002aa4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <TIM4_IRQHandler+0x10>)
 8002aaa:	f003 f931 	bl	8005d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000e78 	.word	0x20000e78

08002ab8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <SPI1_IRQHandler+0x10>)
 8002abe:	f002 fedb 	bl	8005878 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200004dc 	.word	0x200004dc

08002acc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <USART1_IRQHandler+0x10>)
 8002ad2:	f003 fd07 	bl	80064e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200005c4 	.word	0x200005c4

08002ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <_sbrk+0x5c>)
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <_sbrk+0x60>)
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <_sbrk+0x64>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <_sbrk+0x64>)
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <_sbrk+0x68>)
 8002b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <_sbrk+0x64>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d207      	bcs.n	8002b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b10:	f007 f98e 	bl	8009e30 <__errno>
 8002b14:	4603      	mov	r3, r0
 8002b16:	220c      	movs	r2, #12
 8002b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b1e:	e009      	b.n	8002b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <_sbrk+0x64>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <_sbrk+0x64>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <_sbrk+0x64>)
 8002b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20005000 	.word	0x20005000
 8002b40:	00000400 	.word	0x00000400
 8002b44:	20000ec0 	.word	0x20000ec0
 8002b48:	20003c30 	.word	0x20003c30

08002b4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b58:	480c      	ldr	r0, [pc, #48]	; (8002b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b5a:	490d      	ldr	r1, [pc, #52]	; (8002b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b60:	e002      	b.n	8002b68 <LoopCopyDataInit>

08002b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b66:	3304      	adds	r3, #4

08002b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b6c:	d3f9      	bcc.n	8002b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b70:	4c0a      	ldr	r4, [pc, #40]	; (8002b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b74:	e001      	b.n	8002b7a <LoopFillZerobss>

08002b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b78:	3204      	adds	r2, #4

08002b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b7c:	d3fb      	bcc.n	8002b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b7e:	f7ff ffe5 	bl	8002b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b82:	f007 f95b 	bl	8009e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b86:	f7ff f8df 	bl	8001d48 <main>
  bx lr
 8002b8a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b90:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002b94:	0800acd0 	.word	0x0800acd0
  ldr r2, =_sbss
 8002b98:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002b9c:	20003c30 	.word	0x20003c30

08002ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ba0:	e7fe      	b.n	8002ba0 <ADC1_2_IRQHandler>
	...

08002ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_Init+0x28>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <HAL_Init+0x28>)
 8002bae:	f043 0310 	orr.w	r3, r3, #16
 8002bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb4:	2003      	movs	r0, #3
 8002bb6:	f000 f8f5 	bl	8002da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bba:	200f      	movs	r0, #15
 8002bbc:	f7ff fed8 	bl	8002970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc0:	f7ff fd7a 	bl	80026b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000

08002bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_IncTick+0x1c>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_IncTick+0x20>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	4a03      	ldr	r2, [pc, #12]	; (8002bf0 <HAL_IncTick+0x20>)
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	2000000c 	.word	0x2000000c
 8002bf0:	20000ec4 	.word	0x20000ec4

08002bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <HAL_GetTick+0x10>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	20000ec4 	.word	0x20000ec4

08002c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff fff0 	bl	8002bf4 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c20:	d005      	beq.n	8002c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_Delay+0x44>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c2e:	bf00      	nop
 8002c30:	f7ff ffe0 	bl	8002bf4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f7      	bhi.n	8002c30 <HAL_Delay+0x28>
  {
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000000c 	.word	0x2000000c

08002c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60d3      	str	r3, [r2, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4906      	ldr	r1, [pc, #24]	; (8002ce8 <__NVIC_EnableIRQ+0x34>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100

08002cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db0a      	blt.n	8002d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	490c      	ldr	r1, [pc, #48]	; (8002d38 <__NVIC_SetPriority+0x4c>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	0112      	lsls	r2, r2, #4
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d14:	e00a      	b.n	8002d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4908      	ldr	r1, [pc, #32]	; (8002d3c <__NVIC_SetPriority+0x50>)
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3b04      	subs	r3, #4
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	440b      	add	r3, r1
 8002d2a:	761a      	strb	r2, [r3, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f1c3 0307 	rsb	r3, r3, #7
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	bf28      	it	cs
 8002d5e:	2304      	movcs	r3, #4
 8002d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d902      	bls.n	8002d70 <NVIC_EncodePriority+0x30>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3b03      	subs	r3, #3
 8002d6e:	e000      	b.n	8002d72 <NVIC_EncodePriority+0x32>
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	401a      	ands	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	43d9      	mvns	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	4313      	orrs	r3, r2
         );
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff4f 	bl	8002c50 <__NVIC_SetPriorityGrouping>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dcc:	f7ff ff64 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f7ff ffb2 	bl	8002d40 <NVIC_EncodePriority>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff81 	bl	8002cec <__NVIC_SetPriority>
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff57 	bl	8002cb4 <__NVIC_EnableIRQ>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d008      	beq.n	8002e36 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2204      	movs	r2, #4
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e020      	b.n	8002e78 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 020e 	bic.w	r2, r2, #14
 8002e44:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d005      	beq.n	8002ea6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e051      	b.n	8002f4a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 020e 	bic.w	r2, r2, #14
 8002eb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_DMA_Abort_IT+0xd0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d029      	beq.n	8002f24 <HAL_DMA_Abort_IT+0xa0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <HAL_DMA_Abort_IT+0xd4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d022      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x9c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_DMA_Abort_IT+0xd8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d01a      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x96>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_DMA_Abort_IT+0xdc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d012      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x90>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <HAL_DMA_Abort_IT+0xe0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00a      	beq.n	8002f0e <HAL_DMA_Abort_IT+0x8a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <HAL_DMA_Abort_IT+0xe4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d102      	bne.n	8002f08 <HAL_DMA_Abort_IT+0x84>
 8002f02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f06:	e00e      	b.n	8002f26 <HAL_DMA_Abort_IT+0xa2>
 8002f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f0c:	e00b      	b.n	8002f26 <HAL_DMA_Abort_IT+0xa2>
 8002f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f12:	e008      	b.n	8002f26 <HAL_DMA_Abort_IT+0xa2>
 8002f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f18:	e005      	b.n	8002f26 <HAL_DMA_Abort_IT+0xa2>
 8002f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f1e:	e002      	b.n	8002f26 <HAL_DMA_Abort_IT+0xa2>
 8002f20:	2310      	movs	r3, #16
 8002f22:	e000      	b.n	8002f26 <HAL_DMA_Abort_IT+0xa2>
 8002f24:	2301      	movs	r3, #1
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <HAL_DMA_Abort_IT+0xe8>)
 8002f28:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
    } 
  }
  return status;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40020008 	.word	0x40020008
 8002f58:	4002001c 	.word	0x4002001c
 8002f5c:	40020030 	.word	0x40020030
 8002f60:	40020044 	.word	0x40020044
 8002f64:	40020058 	.word	0x40020058
 8002f68:	4002006c 	.word	0x4002006c
 8002f6c:	40020000 	.word	0x40020000

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b08b      	sub	sp, #44	; 0x2c
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f82:	e169      	b.n	8003258 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f84:	2201      	movs	r2, #1
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f040 8158 	bne.w	8003252 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4a9a      	ldr	r2, [pc, #616]	; (8003210 <HAL_GPIO_Init+0x2a0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d05e      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fac:	4a98      	ldr	r2, [pc, #608]	; (8003210 <HAL_GPIO_Init+0x2a0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d875      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fb2:	4a98      	ldr	r2, [pc, #608]	; (8003214 <HAL_GPIO_Init+0x2a4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d058      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fb8:	4a96      	ldr	r2, [pc, #600]	; (8003214 <HAL_GPIO_Init+0x2a4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d86f      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fbe:	4a96      	ldr	r2, [pc, #600]	; (8003218 <HAL_GPIO_Init+0x2a8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d052      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fc4:	4a94      	ldr	r2, [pc, #592]	; (8003218 <HAL_GPIO_Init+0x2a8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d869      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fca:	4a94      	ldr	r2, [pc, #592]	; (800321c <HAL_GPIO_Init+0x2ac>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d04c      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fd0:	4a92      	ldr	r2, [pc, #584]	; (800321c <HAL_GPIO_Init+0x2ac>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d863      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fd6:	4a92      	ldr	r2, [pc, #584]	; (8003220 <HAL_GPIO_Init+0x2b0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d046      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fdc:	4a90      	ldr	r2, [pc, #576]	; (8003220 <HAL_GPIO_Init+0x2b0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d85d      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fe2:	2b12      	cmp	r3, #18
 8002fe4:	d82a      	bhi.n	800303c <HAL_GPIO_Init+0xcc>
 8002fe6:	2b12      	cmp	r3, #18
 8002fe8:	d859      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <HAL_GPIO_Init+0x80>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	0800306b 	.word	0x0800306b
 8002ff4:	08003045 	.word	0x08003045
 8002ff8:	08003057 	.word	0x08003057
 8002ffc:	08003099 	.word	0x08003099
 8003000:	0800309f 	.word	0x0800309f
 8003004:	0800309f 	.word	0x0800309f
 8003008:	0800309f 	.word	0x0800309f
 800300c:	0800309f 	.word	0x0800309f
 8003010:	0800309f 	.word	0x0800309f
 8003014:	0800309f 	.word	0x0800309f
 8003018:	0800309f 	.word	0x0800309f
 800301c:	0800309f 	.word	0x0800309f
 8003020:	0800309f 	.word	0x0800309f
 8003024:	0800309f 	.word	0x0800309f
 8003028:	0800309f 	.word	0x0800309f
 800302c:	0800309f 	.word	0x0800309f
 8003030:	0800309f 	.word	0x0800309f
 8003034:	0800304d 	.word	0x0800304d
 8003038:	08003061 	.word	0x08003061
 800303c:	4a79      	ldr	r2, [pc, #484]	; (8003224 <HAL_GPIO_Init+0x2b4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003042:	e02c      	b.n	800309e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	623b      	str	r3, [r7, #32]
          break;
 800304a:	e029      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	3304      	adds	r3, #4
 8003052:	623b      	str	r3, [r7, #32]
          break;
 8003054:	e024      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	3308      	adds	r3, #8
 800305c:	623b      	str	r3, [r7, #32]
          break;
 800305e:	e01f      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	330c      	adds	r3, #12
 8003066:	623b      	str	r3, [r7, #32]
          break;
 8003068:	e01a      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003072:	2304      	movs	r3, #4
 8003074:	623b      	str	r3, [r7, #32]
          break;
 8003076:	e013      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003080:	2308      	movs	r3, #8
 8003082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	611a      	str	r2, [r3, #16]
          break;
 800308a:	e009      	b.n	80030a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800308c:	2308      	movs	r3, #8
 800308e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	615a      	str	r2, [r3, #20]
          break;
 8003096:	e003      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003098:	2300      	movs	r3, #0
 800309a:	623b      	str	r3, [r7, #32]
          break;
 800309c:	e000      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          break;
 800309e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2bff      	cmp	r3, #255	; 0xff
 80030a4:	d801      	bhi.n	80030aa <HAL_GPIO_Init+0x13a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	e001      	b.n	80030ae <HAL_GPIO_Init+0x13e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2bff      	cmp	r3, #255	; 0xff
 80030b4:	d802      	bhi.n	80030bc <HAL_GPIO_Init+0x14c>
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	e002      	b.n	80030c2 <HAL_GPIO_Init+0x152>
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	3b08      	subs	r3, #8
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	210f      	movs	r1, #15
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	401a      	ands	r2, r3
 80030d4:	6a39      	ldr	r1, [r7, #32]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	431a      	orrs	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80b1 	beq.w	8003252 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030f0:	4b4d      	ldr	r3, [pc, #308]	; (8003228 <HAL_GPIO_Init+0x2b8>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4a4c      	ldr	r2, [pc, #304]	; (8003228 <HAL_GPIO_Init+0x2b8>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6193      	str	r3, [r2, #24]
 80030fc:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <HAL_GPIO_Init+0x2b8>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003108:	4a48      	ldr	r2, [pc, #288]	; (800322c <HAL_GPIO_Init+0x2bc>)
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003114:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4013      	ands	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_GPIO_Init+0x2c0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_GPIO_Init+0x1ec>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3f      	ldr	r2, [pc, #252]	; (8003234 <HAL_GPIO_Init+0x2c4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00d      	beq.n	8003158 <HAL_GPIO_Init+0x1e8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3e      	ldr	r2, [pc, #248]	; (8003238 <HAL_GPIO_Init+0x2c8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <HAL_GPIO_Init+0x1e4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3d      	ldr	r2, [pc, #244]	; (800323c <HAL_GPIO_Init+0x2cc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d101      	bne.n	8003150 <HAL_GPIO_Init+0x1e0>
 800314c:	2303      	movs	r3, #3
 800314e:	e006      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 8003150:	2304      	movs	r3, #4
 8003152:	e004      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 8003154:	2302      	movs	r3, #2
 8003156:	e002      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 800315c:	2300      	movs	r3, #0
 800315e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003160:	f002 0203 	and.w	r2, r2, #3
 8003164:	0092      	lsls	r2, r2, #2
 8003166:	4093      	lsls	r3, r2
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800316e:	492f      	ldr	r1, [pc, #188]	; (800322c <HAL_GPIO_Init+0x2bc>)
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d006      	beq.n	8003196 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003188:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	492c      	ldr	r1, [pc, #176]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
 8003194:	e006      	b.n	80031a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003196:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	43db      	mvns	r3, r3
 800319e:	4928      	ldr	r1, [pc, #160]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031b0:	4b23      	ldr	r3, [pc, #140]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4922      	ldr	r1, [pc, #136]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	491e      	ldr	r1, [pc, #120]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	4918      	ldr	r1, [pc, #96]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031e6:	4b16      	ldr	r3, [pc, #88]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	4914      	ldr	r1, [pc, #80]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d021      	beq.n	8003244 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
 800320c:	e021      	b.n	8003252 <HAL_GPIO_Init+0x2e2>
 800320e:	bf00      	nop
 8003210:	10320000 	.word	0x10320000
 8003214:	10310000 	.word	0x10310000
 8003218:	10220000 	.word	0x10220000
 800321c:	10210000 	.word	0x10210000
 8003220:	10120000 	.word	0x10120000
 8003224:	10110000 	.word	0x10110000
 8003228:	40021000 	.word	0x40021000
 800322c:	40010000 	.word	0x40010000
 8003230:	40010800 	.word	0x40010800
 8003234:	40010c00 	.word	0x40010c00
 8003238:	40011000 	.word	0x40011000
 800323c:	40011400 	.word	0x40011400
 8003240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_GPIO_Init+0x304>)
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	43db      	mvns	r3, r3
 800324c:	4909      	ldr	r1, [pc, #36]	; (8003274 <HAL_GPIO_Init+0x304>)
 800324e:	4013      	ands	r3, r2
 8003250:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	3301      	adds	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	f47f ae8e 	bne.w	8002f84 <HAL_GPIO_Init+0x14>
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	372c      	adds	r7, #44	; 0x2c
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003294:	e003      	b.n	800329e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	041a      	lsls	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	611a      	str	r2, [r3, #16]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032be:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fd34 	bl	8001d34 <HAL_GPIO_EXTI_Callback>
  }
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40010400 	.word	0x40010400

080032d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e12b      	b.n	8003542 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff fa1a 	bl	8002738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	; 0x24
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800332a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800333a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800333c:	f002 f866 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 8003340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4a81      	ldr	r2, [pc, #516]	; (800354c <HAL_I2C_Init+0x274>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d807      	bhi.n	800335c <HAL_I2C_Init+0x84>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a80      	ldr	r2, [pc, #512]	; (8003550 <HAL_I2C_Init+0x278>)
 8003350:	4293      	cmp	r3, r2
 8003352:	bf94      	ite	ls
 8003354:	2301      	movls	r3, #1
 8003356:	2300      	movhi	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e006      	b.n	800336a <HAL_I2C_Init+0x92>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a7d      	ldr	r2, [pc, #500]	; (8003554 <HAL_I2C_Init+0x27c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	bf94      	ite	ls
 8003364:	2301      	movls	r3, #1
 8003366:	2300      	movhi	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0e7      	b.n	8003542 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a78      	ldr	r2, [pc, #480]	; (8003558 <HAL_I2C_Init+0x280>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0c9b      	lsrs	r3, r3, #18
 800337c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a6a      	ldr	r2, [pc, #424]	; (800354c <HAL_I2C_Init+0x274>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d802      	bhi.n	80033ac <HAL_I2C_Init+0xd4>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3301      	adds	r3, #1
 80033aa:	e009      	b.n	80033c0 <HAL_I2C_Init+0xe8>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	4a69      	ldr	r2, [pc, #420]	; (800355c <HAL_I2C_Init+0x284>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	3301      	adds	r3, #1
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	495c      	ldr	r1, [pc, #368]	; (800354c <HAL_I2C_Init+0x274>)
 80033dc:	428b      	cmp	r3, r1
 80033de:	d819      	bhi.n	8003414 <HAL_I2C_Init+0x13c>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e59      	subs	r1, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ee:	1c59      	adds	r1, r3, #1
 80033f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033f4:	400b      	ands	r3, r1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_I2C_Init+0x138>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1e59      	subs	r1, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fbb1 f3f3 	udiv	r3, r1, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340e:	e051      	b.n	80034b4 <HAL_I2C_Init+0x1dc>
 8003410:	2304      	movs	r3, #4
 8003412:	e04f      	b.n	80034b4 <HAL_I2C_Init+0x1dc>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d111      	bne.n	8003440 <HAL_I2C_Init+0x168>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	440b      	add	r3, r1
 800342a:	fbb0 f3f3 	udiv	r3, r0, r3
 800342e:	3301      	adds	r3, #1
 8003430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf0c      	ite	eq
 8003438:	2301      	moveq	r3, #1
 800343a:	2300      	movne	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e012      	b.n	8003466 <HAL_I2C_Init+0x18e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1e58      	subs	r0, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	0099      	lsls	r1, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	fbb0 f3f3 	udiv	r3, r0, r3
 8003456:	3301      	adds	r3, #1
 8003458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Init+0x196>
 800346a:	2301      	movs	r3, #1
 800346c:	e022      	b.n	80034b4 <HAL_I2C_Init+0x1dc>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10e      	bne.n	8003494 <HAL_I2C_Init+0x1bc>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1e58      	subs	r0, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6859      	ldr	r1, [r3, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	440b      	add	r3, r1
 8003484:	fbb0 f3f3 	udiv	r3, r0, r3
 8003488:	3301      	adds	r3, #1
 800348a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003492:	e00f      	b.n	80034b4 <HAL_I2C_Init+0x1dc>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1e58      	subs	r0, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	0099      	lsls	r1, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034aa:	3301      	adds	r3, #1
 80034ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	6809      	ldr	r1, [r1, #0]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6911      	ldr	r1, [r2, #16]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68d2      	ldr	r2, [r2, #12]
 80034ee:	4311      	orrs	r1, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	000186a0 	.word	0x000186a0
 8003550:	001e847f 	.word	0x001e847f
 8003554:	003d08ff 	.word	0x003d08ff
 8003558:	431bde83 	.word	0x431bde83
 800355c:	10624dd3 	.word	0x10624dd3

08003560 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	461a      	mov	r2, r3
 800356c:	460b      	mov	r3, r1
 800356e:	817b      	strh	r3, [r7, #10]
 8003570:	4613      	mov	r3, r2
 8003572:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003574:	f7ff fb3e 	bl	8002bf4 <HAL_GetTick>
 8003578:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b20      	cmp	r3, #32
 8003584:	f040 80e0 	bne.w	8003748 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2319      	movs	r3, #25
 800358e:	2201      	movs	r2, #1
 8003590:	4970      	ldr	r1, [pc, #448]	; (8003754 <HAL_I2C_Master_Transmit+0x1f4>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f001 f972 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800359e:	2302      	movs	r3, #2
 80035a0:	e0d3      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_I2C_Master_Transmit+0x50>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0cc      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d007      	beq.n	80035d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2221      	movs	r2, #33	; 0x21
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2210      	movs	r2, #16
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	893a      	ldrh	r2, [r7, #8]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a50      	ldr	r2, [pc, #320]	; (8003758 <HAL_I2C_Master_Transmit+0x1f8>)
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003618:	8979      	ldrh	r1, [r7, #10]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	6a3a      	ldr	r2, [r7, #32]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fe5e 	bl	80042e0 <I2C_MasterRequestWrite>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e08d      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003644:	e066      	b.n	8003714 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	6a39      	ldr	r1, [r7, #32]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f001 f9ec 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2b04      	cmp	r3, #4
 800365c:	d107      	bne.n	800366e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_I2C_Master_Transmit+0x188>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d017      	beq.n	80036e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6a39      	ldr	r1, [r7, #32]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f001 f9dc 	bl	8004aaa <I2C_WaitOnBTFFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d107      	bne.n	8003710 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e01a      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d194      	bne.n	8003646 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00100002 	.word	0x00100002
 8003758:	ffff0000 	.word	0xffff0000

0800375c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	; 0x30
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	461a      	mov	r2, r3
 8003768:	460b      	mov	r3, r1
 800376a:	817b      	strh	r3, [r7, #10]
 800376c:	4613      	mov	r3, r2
 800376e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003774:	f7ff fa3e 	bl	8002bf4 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	f040 823f 	bne.w	8003c06 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2319      	movs	r3, #25
 800378e:	2201      	movs	r2, #1
 8003790:	497f      	ldr	r1, [pc, #508]	; (8003990 <HAL_I2C_Master_Receive+0x234>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f001 f872 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	e232      	b.n	8003c08 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_I2C_Master_Receive+0x54>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e22b      	b.n	8003c08 <HAL_I2C_Master_Receive+0x4ac>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d007      	beq.n	80037d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2222      	movs	r2, #34	; 0x22
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2210      	movs	r2, #16
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	893a      	ldrh	r2, [r7, #8]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a5f      	ldr	r2, [pc, #380]	; (8003994 <HAL_I2C_Master_Receive+0x238>)
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003818:	8979      	ldrh	r1, [r7, #10]
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fde0 	bl	80043e4 <I2C_MasterRequestRead>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1ec      	b.n	8003c08 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d113      	bne.n	800385e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e1c0      	b.n	8003be0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	2b01      	cmp	r3, #1
 8003864:	d11e      	bne.n	80038a4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003874:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003876:	b672      	cpsid	i
}
 8003878:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038a0:	b662      	cpsie	i
}
 80038a2:	e035      	b.n	8003910 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d11e      	bne.n	80038ea <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038bc:	b672      	cpsid	i
}
 80038be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038e6:	b662      	cpsie	i
}
 80038e8:	e012      	b.n	8003910 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003910:	e166      	b.n	8003be0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	2b03      	cmp	r3, #3
 8003918:	f200 811f 	bhi.w	8003b5a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	2b01      	cmp	r3, #1
 8003922:	d123      	bne.n	800396c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f001 f8ff 	bl	8004b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e167      	b.n	8003c08 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a
 800396a:	e139      	b.n	8003be0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	2b02      	cmp	r3, #2
 8003972:	d152      	bne.n	8003a1a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	2200      	movs	r2, #0
 800397c:	4906      	ldr	r1, [pc, #24]	; (8003998 <HAL_I2C_Master_Receive+0x23c>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 ff7c 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e13c      	b.n	8003c08 <HAL_I2C_Master_Receive+0x4ac>
 800398e:	bf00      	nop
 8003990:	00100002 	.word	0x00100002
 8003994:	ffff0000 	.word	0xffff0000
 8003998:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800399c:	b672      	cpsid	i
}
 800399e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039e2:	b662      	cpsie	i
}
 80039e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a18:	e0e2      	b.n	8003be0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2200      	movs	r2, #0
 8003a22:	497b      	ldr	r1, [pc, #492]	; (8003c10 <HAL_I2C_Master_Receive+0x4b4>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 ff29 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0e9      	b.n	8003c08 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a44:	b672      	cpsid	i
}
 8003a46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a7a:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_I2C_Master_Receive+0x4b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	08db      	lsrs	r3, r3, #3
 8003a80:	4a65      	ldr	r2, [pc, #404]	; (8003c18 <HAL_I2C_Master_Receive+0x4bc>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	0a1a      	lsrs	r2, r3, #8
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	00da      	lsls	r2, r3, #3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d118      	bne.n	8003ad2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0220 	orr.w	r2, r3, #32
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ac2:	b662      	cpsie	i
}
 8003ac4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e09a      	b.n	8003c08 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d1d9      	bne.n	8003a94 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b22:	b662      	cpsie	i
}
 8003b24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b58:	e042      	b.n	8003be0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 ffe4 	bl	8004b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e04c      	b.n	8003c08 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d118      	bne.n	8003be0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f47f ae94 	bne.w	8003912 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3728      	adds	r7, #40	; 0x28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	00010004 	.word	0x00010004
 8003c14:	20000004 	.word	0x20000004
 8003c18:	14f8b589 	.word	0x14f8b589

08003c1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	817b      	strh	r3, [r7, #10]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	813b      	strh	r3, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c36:	f7fe ffdd 	bl	8002bf4 <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	f040 80d9 	bne.w	8003dfc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	2319      	movs	r3, #25
 8003c50:	2201      	movs	r2, #1
 8003c52:	496d      	ldr	r1, [pc, #436]	; (8003e08 <HAL_I2C_Mem_Write+0x1ec>)
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fe11 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
 8003c62:	e0cc      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2C_Mem_Write+0x56>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e0c5      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d007      	beq.n	8003c98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2221      	movs	r2, #33	; 0x21
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a4d      	ldr	r2, [pc, #308]	; (8003e0c <HAL_I2C_Mem_Write+0x1f0>)
 8003cd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cda:	88f8      	ldrh	r0, [r7, #6]
 8003cdc:	893a      	ldrh	r2, [r7, #8]
 8003cde:	8979      	ldrh	r1, [r7, #10]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	4603      	mov	r3, r0
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fc48 	bl	8004580 <I2C_RequestMemoryWrite>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d052      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e081      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fe92 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d107      	bne.n	8003d22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06b      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	781a      	ldrb	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d11b      	bne.n	8003d9c <HAL_I2C_Mem_Write+0x180>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d017      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1aa      	bne.n	8003cfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fe7e 	bl	8004aaa <I2C_WaitOnBTFFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d107      	bne.n	8003dcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e016      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	00100002 	.word	0x00100002
 8003e0c:	ffff0000 	.word	0xffff0000

08003e10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08c      	sub	sp, #48	; 0x30
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	460b      	mov	r3, r1
 8003e24:	813b      	strh	r3, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2e:	f7fe fee1 	bl	8002bf4 <HAL_GetTick>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 8244 	bne.w	80042ca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2319      	movs	r3, #25
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4982      	ldr	r1, [pc, #520]	; (8004054 <HAL_I2C_Mem_Read+0x244>)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fd15 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e237      	b.n	80042cc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Mem_Read+0x5a>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e230      	b.n	80042cc <HAL_I2C_Mem_Read+0x4bc>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d007      	beq.n	8003e90 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2222      	movs	r2, #34	; 0x22
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a62      	ldr	r2, [pc, #392]	; (8004058 <HAL_I2C_Mem_Read+0x248>)
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ed2:	88f8      	ldrh	r0, [r7, #6]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	8979      	ldrh	r1, [r7, #10]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fbe2 	bl	80046ac <I2C_RequestMemoryRead>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e1ec      	b.n	80042cc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d113      	bne.n	8003f22 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e1c0      	b.n	80042a4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d11e      	bne.n	8003f68 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f3a:	b672      	cpsid	i
}
 8003f3c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f64:	b662      	cpsie	i
}
 8003f66:	e035      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d11e      	bne.n	8003fae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f80:	b672      	cpsid	i
}
 8003f82:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003faa:	b662      	cpsie	i
}
 8003fac:	e012      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fbc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fd4:	e166      	b.n	80042a4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	f200 811f 	bhi.w	800421e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d123      	bne.n	8004030 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fd9d 	bl	8004b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e167      	b.n	80042cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800402e:	e139      	b.n	80042a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	2b02      	cmp	r3, #2
 8004036:	d152      	bne.n	80040de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403e:	2200      	movs	r2, #0
 8004040:	4906      	ldr	r1, [pc, #24]	; (800405c <HAL_I2C_Mem_Read+0x24c>)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fc1a 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e13c      	b.n	80042cc <HAL_I2C_Mem_Read+0x4bc>
 8004052:	bf00      	nop
 8004054:	00100002 	.word	0x00100002
 8004058:	ffff0000 	.word	0xffff0000
 800405c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004060:	b672      	cpsid	i
}
 8004062:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040a6:	b662      	cpsie	i
}
 80040a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040dc:	e0e2      	b.n	80042a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2200      	movs	r2, #0
 80040e6:	497b      	ldr	r1, [pc, #492]	; (80042d4 <HAL_I2C_Mem_Read+0x4c4>)
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fbc7 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0e9      	b.n	80042cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004106:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004108:	b672      	cpsid	i
}
 800410a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800413e:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <HAL_I2C_Mem_Read+0x4c8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	08db      	lsrs	r3, r3, #3
 8004144:	4a65      	ldr	r2, [pc, #404]	; (80042dc <HAL_I2C_Mem_Read+0x4cc>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	0a1a      	lsrs	r2, r3, #8
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	00da      	lsls	r2, r3, #3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	3b01      	subs	r3, #1
 800415c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d118      	bne.n	8004196 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004186:	b662      	cpsie	i
}
 8004188:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e09a      	b.n	80042cc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d1d9      	bne.n	8004158 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041e6:	b662      	cpsie	i
}
 80041e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800421c:	e042      	b.n	80042a4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004220:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fc82 	bl	8004b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e04c      	b.n	80042cc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b04      	cmp	r3, #4
 8004270:	d118      	bne.n	80042a4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f47f ae94 	bne.w	8003fd6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80042ca:	2302      	movs	r3, #2
  }
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3728      	adds	r7, #40	; 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	00010004 	.word	0x00010004
 80042d8:	20000004 	.word	0x20000004
 80042dc:	14f8b589 	.word	0x14f8b589

080042e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	460b      	mov	r3, r1
 80042ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d006      	beq.n	800430a <I2C_MasterRequestWrite+0x2a>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d003      	beq.n	800430a <I2C_MasterRequestWrite+0x2a>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004308:	d108      	bne.n	800431c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	e00b      	b.n	8004334 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	2b12      	cmp	r3, #18
 8004322:	d107      	bne.n	8004334 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004332:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fa9b 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435a:	d103      	bne.n	8004364 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e035      	b.n	80043d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004370:	d108      	bne.n	8004384 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004372:	897b      	ldrh	r3, [r7, #10]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004380:	611a      	str	r2, [r3, #16]
 8004382:	e01b      	b.n	80043bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004384:	897b      	ldrh	r3, [r7, #10]
 8004386:	11db      	asrs	r3, r3, #7
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f063 030f 	orn	r3, r3, #15
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	490e      	ldr	r1, [pc, #56]	; (80043dc <I2C_MasterRequestWrite+0xfc>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fac1 	bl	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e010      	b.n	80043d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043b2:	897b      	ldrh	r3, [r7, #10]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4907      	ldr	r1, [pc, #28]	; (80043e0 <I2C_MasterRequestWrite+0x100>)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fab1 	bl	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	00010008 	.word	0x00010008
 80043e0:	00010002 	.word	0x00010002

080043e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	460b      	mov	r3, r1
 80043f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004408:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b08      	cmp	r3, #8
 800440e:	d006      	beq.n	800441e <I2C_MasterRequestRead+0x3a>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d003      	beq.n	800441e <I2C_MasterRequestRead+0x3a>
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800441c:	d108      	bne.n	8004430 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e00b      	b.n	8004448 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	2b11      	cmp	r3, #17
 8004436:	d107      	bne.n	8004448 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004446:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fa11 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00d      	beq.n	800447c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446e:	d103      	bne.n	8004478 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e079      	b.n	8004570 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004484:	d108      	bne.n	8004498 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004486:	897b      	ldrh	r3, [r7, #10]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	611a      	str	r2, [r3, #16]
 8004496:	e05f      	b.n	8004558 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004498:	897b      	ldrh	r3, [r7, #10]
 800449a:	11db      	asrs	r3, r3, #7
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 0306 	and.w	r3, r3, #6
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f063 030f 	orn	r3, r3, #15
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4930      	ldr	r1, [pc, #192]	; (8004578 <I2C_MasterRequestRead+0x194>)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa37 	bl	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e054      	b.n	8004570 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044c6:	897b      	ldrh	r3, [r7, #10]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4929      	ldr	r1, [pc, #164]	; (800457c <I2C_MasterRequestRead+0x198>)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa27 	bl	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e044      	b.n	8004570 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800450a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f9af 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004532:	d103      	bne.n	800453c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e017      	b.n	8004570 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004540:	897b      	ldrh	r3, [r7, #10]
 8004542:	11db      	asrs	r3, r3, #7
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0306 	and.w	r3, r3, #6
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f063 030e 	orn	r3, r3, #14
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4907      	ldr	r1, [pc, #28]	; (800457c <I2C_MasterRequestRead+0x198>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f9e3 	bl	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	00010008 	.word	0x00010008
 800457c:	00010002 	.word	0x00010002

08004580 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	4608      	mov	r0, r1
 800458a:	4611      	mov	r1, r2
 800458c:	461a      	mov	r2, r3
 800458e:	4603      	mov	r3, r0
 8004590:	817b      	strh	r3, [r7, #10]
 8004592:	460b      	mov	r3, r1
 8004594:	813b      	strh	r3, [r7, #8]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f960 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d0:	d103      	bne.n	80045da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e05f      	b.n	800469e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045de:	897b      	ldrh	r3, [r7, #10]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	492d      	ldr	r1, [pc, #180]	; (80046a8 <I2C_RequestMemoryWrite+0x128>)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f998 	bl	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e04c      	b.n	800469e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461c:	6a39      	ldr	r1, [r7, #32]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa02 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00d      	beq.n	8004646 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2b04      	cmp	r3, #4
 8004630:	d107      	bne.n	8004642 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e02b      	b.n	800469e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800464c:	893b      	ldrh	r3, [r7, #8]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	611a      	str	r2, [r3, #16]
 8004656:	e021      	b.n	800469c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004658:	893b      	ldrh	r3, [r7, #8]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	b29b      	uxth	r3, r3
 800465e:	b2da      	uxtb	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004668:	6a39      	ldr	r1, [r7, #32]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f9dc 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	2b04      	cmp	r3, #4
 800467c:	d107      	bne.n	800468e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800468c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e005      	b.n	800469e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004692:	893b      	ldrh	r3, [r7, #8]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	00010002 	.word	0x00010002

080046ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	817b      	strh	r3, [r7, #10]
 80046be:	460b      	mov	r3, r1
 80046c0:	813b      	strh	r3, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f8c2 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470c:	d103      	bne.n	8004716 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e0aa      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800471a:	897b      	ldrh	r3, [r7, #10]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	6a3a      	ldr	r2, [r7, #32]
 800472e:	4952      	ldr	r1, [pc, #328]	; (8004878 <I2C_RequestMemoryRead+0x1cc>)
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f8fa 	bl	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e097      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004758:	6a39      	ldr	r1, [r7, #32]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f964 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b04      	cmp	r3, #4
 800476c:	d107      	bne.n	800477e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e076      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004788:	893b      	ldrh	r3, [r7, #8]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	611a      	str	r2, [r3, #16]
 8004792:	e021      	b.n	80047d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	b29b      	uxth	r3, r3
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a4:	6a39      	ldr	r1, [r7, #32]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f93e 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00d      	beq.n	80047ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d107      	bne.n	80047ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e050      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ce:	893b      	ldrh	r3, [r7, #8]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	6a39      	ldr	r1, [r7, #32]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f923 	bl	8004a28 <I2C_WaitOnTXEFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d107      	bne.n	8004800 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e035      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004812:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	2200      	movs	r2, #0
 800481c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f82b 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00d      	beq.n	8004848 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483a:	d103      	bne.n	8004844 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e013      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004848:	897b      	ldrh	r3, [r7, #10]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	6a3a      	ldr	r2, [r7, #32]
 800485c:	4906      	ldr	r1, [pc, #24]	; (8004878 <I2C_RequestMemoryRead+0x1cc>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f863 	bl	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	00010002 	.word	0x00010002

0800487c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800488c:	e025      	b.n	80048da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004894:	d021      	beq.n	80048da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fe f9ad 	bl	8002bf4 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d116      	bne.n	80048da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e023      	b.n	8004922 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d10d      	bne.n	8004900 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	43da      	mvns	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	e00c      	b.n	800491a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	43da      	mvns	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4013      	ands	r3, r2
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf0c      	ite	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	2300      	movne	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	461a      	mov	r2, r3
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	429a      	cmp	r2, r3
 800491e:	d0b6      	beq.n	800488e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004938:	e051      	b.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004948:	d123      	bne.n	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004958:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004962:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0204 	orr.w	r2, r3, #4
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e046      	b.n	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004998:	d021      	beq.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fe f92b 	bl	8002bf4 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d116      	bne.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e020      	b.n	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10c      	bne.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	43da      	mvns	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4013      	ands	r3, r2
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	bf14      	ite	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	2300      	moveq	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	e00b      	b.n	8004a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	43da      	mvns	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d18d      	bne.n	800493a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a34:	e02d      	b.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f8ce 	bl	8004bd8 <I2C_IsAcknowledgeFailed>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e02d      	b.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a4c:	d021      	beq.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4e:	f7fe f8d1 	bl	8002bf4 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d116      	bne.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e007      	b.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b80      	cmp	r3, #128	; 0x80
 8004a9e:	d1ca      	bne.n	8004a36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ab6:	e02d      	b.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f88d 	bl	8004bd8 <I2C_IsAcknowledgeFailed>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e02d      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ace:	d021      	beq.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad0:	f7fe f890 	bl	8002bf4 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d302      	bcc.n	8004ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d116      	bne.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e007      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d1ca      	bne.n	8004ab8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b38:	e042      	b.n	8004bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d119      	bne.n	8004b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0210 	mvn.w	r2, #16
 8004b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e029      	b.n	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7c:	f7fe f83a 	bl	8002bf4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d116      	bne.n	8004bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e007      	b.n	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d1b5      	bne.n	8004b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bee:	d11b      	bne.n	8004c28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	f043 0204 	orr.w	r2, r3, #4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004c44:	f000 f808 	bl	8004c58 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004c4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c4e:	615a      	str	r2, [r3, #20]
  }
}
 8004c50:	bf00      	nop
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40010400 	.word	0x40010400

08004c58 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e272      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8087 	beq.w	8004d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c84:	4b92      	ldr	r3, [pc, #584]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d00c      	beq.n	8004caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c90:	4b8f      	ldr	r3, [pc, #572]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d112      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x5e>
 8004c9c:	4b8c      	ldr	r3, [pc, #560]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004caa:	4b89      	ldr	r3, [pc, #548]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d06c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x12c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d168      	bne.n	8004d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e24c      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x76>
 8004ccc:	4b80      	ldr	r3, [pc, #512]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a7f      	ldr	r2, [pc, #508]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e02e      	b.n	8004d38 <HAL_RCC_OscConfig+0xd4>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x98>
 8004ce2:	4b7b      	ldr	r3, [pc, #492]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7a      	ldr	r2, [pc, #488]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b78      	ldr	r3, [pc, #480]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a77      	ldr	r2, [pc, #476]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xd4>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0xbc>
 8004d06:	4b72      	ldr	r3, [pc, #456]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a71      	ldr	r2, [pc, #452]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b6f      	ldr	r3, [pc, #444]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6e      	ldr	r2, [pc, #440]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xd4>
 8004d20:	4b6b      	ldr	r3, [pc, #428]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6a      	ldr	r2, [pc, #424]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b68      	ldr	r3, [pc, #416]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a67      	ldr	r2, [pc, #412]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fd ff58 	bl	8002bf4 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd ff54 	bl	8002bf4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e200      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b5d      	ldr	r3, [pc, #372]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xe4>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fd ff44 	bl	8002bf4 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fd ff40 	bl	8002bf4 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e1ec      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	4b53      	ldr	r3, [pc, #332]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x10c>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d063      	beq.n	8004e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d9e:	4b4c      	ldr	r3, [pc, #304]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004daa:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x18c>
 8004db6:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x176>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e1c0      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4939      	ldr	r1, [pc, #228]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e03a      	b.n	8004e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d020      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df8:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fd fef9 	bl	8002bf4 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e06:	f7fd fef5 	bl	8002bf4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e1a1      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4927      	ldr	r1, [pc, #156]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
 8004e38:	e015      	b.n	8004e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3a:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd fed8 	bl	8002bf4 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e48:	f7fd fed4 	bl	8002bf4 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e180      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d03a      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d019      	beq.n	8004eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e80:	f7fd feb8 	bl	8002bf4 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fd feb4 	bl	8002bf4 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e160      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	f000 fb08 	bl	80054bc <RCC_Delay>
 8004eac:	e01c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb4:	f7fd fe9e 	bl	8002bf4 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eba:	e00f      	b.n	8004edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebc:	f7fd fe9a 	bl	8002bf4 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d908      	bls.n	8004edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e146      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	42420000 	.word	0x42420000
 8004ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004edc:	4b92      	ldr	r3, [pc, #584]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e9      	bne.n	8004ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80a6 	beq.w	8005042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efa:	4b8b      	ldr	r3, [pc, #556]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10d      	bne.n	8004f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	4b88      	ldr	r3, [pc, #544]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	4a87      	ldr	r2, [pc, #540]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f10:	61d3      	str	r3, [r2, #28]
 8004f12:	4b85      	ldr	r3, [pc, #532]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b82      	ldr	r3, [pc, #520]	; (800512c <HAL_RCC_OscConfig+0x4c8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b7f      	ldr	r3, [pc, #508]	; (800512c <HAL_RCC_OscConfig+0x4c8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a7e      	ldr	r2, [pc, #504]	; (800512c <HAL_RCC_OscConfig+0x4c8>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fd fe5b 	bl	8002bf4 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fd fe57 	bl	8002bf4 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b64      	cmp	r3, #100	; 0x64
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e103      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b75      	ldr	r3, [pc, #468]	; (800512c <HAL_RCC_OscConfig+0x4c8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x312>
 8004f68:	4b6f      	ldr	r3, [pc, #444]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4a6e      	ldr	r2, [pc, #440]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6213      	str	r3, [r2, #32]
 8004f74:	e02d      	b.n	8004fd2 <HAL_RCC_OscConfig+0x36e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x334>
 8004f7e:	4b6a      	ldr	r3, [pc, #424]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	4a69      	ldr	r2, [pc, #420]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	6213      	str	r3, [r2, #32]
 8004f8a:	4b67      	ldr	r3, [pc, #412]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	4a66      	ldr	r2, [pc, #408]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004f90:	f023 0304 	bic.w	r3, r3, #4
 8004f94:	6213      	str	r3, [r2, #32]
 8004f96:	e01c      	b.n	8004fd2 <HAL_RCC_OscConfig+0x36e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b05      	cmp	r3, #5
 8004f9e:	d10c      	bne.n	8004fba <HAL_RCC_OscConfig+0x356>
 8004fa0:	4b61      	ldr	r3, [pc, #388]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	4a60      	ldr	r2, [pc, #384]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	f043 0304 	orr.w	r3, r3, #4
 8004faa:	6213      	str	r3, [r2, #32]
 8004fac:	4b5e      	ldr	r3, [pc, #376]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4a5d      	ldr	r2, [pc, #372]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6213      	str	r3, [r2, #32]
 8004fb8:	e00b      	b.n	8004fd2 <HAL_RCC_OscConfig+0x36e>
 8004fba:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4a5a      	ldr	r2, [pc, #360]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	6213      	str	r3, [r2, #32]
 8004fc6:	4b58      	ldr	r3, [pc, #352]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	4a57      	ldr	r2, [pc, #348]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	f023 0304 	bic.w	r3, r3, #4
 8004fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d015      	beq.n	8005006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fda:	f7fd fe0b 	bl	8002bf4 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe2:	f7fd fe07 	bl	8002bf4 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0b1      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ee      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x37e>
 8005004:	e014      	b.n	8005030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005006:	f7fd fdf5 	bl	8002bf4 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800500c:	e00a      	b.n	8005024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fd fdf1 	bl	8002bf4 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e09b      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005024:	4b40      	ldr	r3, [pc, #256]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1ee      	bne.n	800500e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d105      	bne.n	8005042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005036:	4b3c      	ldr	r3, [pc, #240]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	4a3b      	ldr	r2, [pc, #236]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 800503c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8087 	beq.w	800515a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f003 030c 	and.w	r3, r3, #12
 8005054:	2b08      	cmp	r3, #8
 8005056:	d061      	beq.n	800511c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d146      	bne.n	80050ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005060:	4b33      	ldr	r3, [pc, #204]	; (8005130 <HAL_RCC_OscConfig+0x4cc>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005066:	f7fd fdc5 	bl	8002bf4 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506e:	f7fd fdc1 	bl	8002bf4 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e06d      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005080:	4b29      	ldr	r3, [pc, #164]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f0      	bne.n	800506e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d108      	bne.n	80050a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4921      	ldr	r1, [pc, #132]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050a8:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a19      	ldr	r1, [r3, #32]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	430b      	orrs	r3, r1
 80050ba:	491b      	ldr	r1, [pc, #108]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_RCC_OscConfig+0x4cc>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c6:	f7fd fd95 	bl	8002bf4 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ce:	f7fd fd91 	bl	8002bf4 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e03d      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e0:	4b11      	ldr	r3, [pc, #68]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x46a>
 80050ec:	e035      	b.n	800515a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <HAL_RCC_OscConfig+0x4cc>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fd fd7e 	bl	8002bf4 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fd fd7a 	bl	8002bf4 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e026      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCC_OscConfig+0x4c4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x498>
 800511a:	e01e      	b.n	800515a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d107      	bne.n	8005134 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e019      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
 8005128:	40021000 	.word	0x40021000
 800512c:	40007000 	.word	0x40007000
 8005130:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCC_OscConfig+0x500>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	429a      	cmp	r2, r3
 8005146:	d106      	bne.n	8005156 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005152:	429a      	cmp	r2, r3
 8005154:	d001      	beq.n	800515a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000

08005168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0d0      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800517c:	4b6a      	ldr	r3, [pc, #424]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d910      	bls.n	80051ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b67      	ldr	r3, [pc, #412]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 0207 	bic.w	r2, r3, #7
 8005192:	4965      	ldr	r1, [pc, #404]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b63      	ldr	r3, [pc, #396]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0b8      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d020      	beq.n	80051fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051c4:	4b59      	ldr	r3, [pc, #356]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a58      	ldr	r2, [pc, #352]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051dc:	4b53      	ldr	r3, [pc, #332]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a52      	ldr	r2, [pc, #328]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80051e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e8:	4b50      	ldr	r3, [pc, #320]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	494d      	ldr	r1, [pc, #308]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d040      	beq.n	8005288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d115      	bne.n	8005246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e07f      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d107      	bne.n	8005236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005226:	4b41      	ldr	r3, [pc, #260]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e073      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005236:	4b3d      	ldr	r3, [pc, #244]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e06b      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005246:	4b39      	ldr	r3, [pc, #228]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f023 0203 	bic.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4936      	ldr	r1, [pc, #216]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	4313      	orrs	r3, r2
 8005256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005258:	f7fd fccc 	bl	8002bf4 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	e00a      	b.n	8005276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005260:	f7fd fcc8 	bl	8002bf4 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	; 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e053      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 020c 	and.w	r2, r3, #12
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	429a      	cmp	r2, r3
 8005286:	d1eb      	bne.n	8005260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005288:	4b27      	ldr	r3, [pc, #156]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d210      	bcs.n	80052b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 0207 	bic.w	r2, r3, #7
 800529e:	4922      	ldr	r1, [pc, #136]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a6:	4b20      	ldr	r3, [pc, #128]	; (8005328 <HAL_RCC_ClockConfig+0x1c0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e032      	b.n	800531e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c4:	4b19      	ldr	r3, [pc, #100]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4916      	ldr	r1, [pc, #88]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	490e      	ldr	r1, [pc, #56]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052f6:	f000 f821 	bl	800533c <HAL_RCC_GetSysClockFreq>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCC_ClockConfig+0x1c4>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	490a      	ldr	r1, [pc, #40]	; (8005330 <HAL_RCC_ClockConfig+0x1c8>)
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	fa22 f303 	lsr.w	r3, r2, r3
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <HAL_RCC_ClockConfig+0x1cc>)
 8005310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <HAL_RCC_ClockConfig+0x1d0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fd fb2a 	bl	8002970 <HAL_InitTick>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40022000 	.word	0x40022000
 800532c:	40021000 	.word	0x40021000
 8005330:	0800abf0 	.word	0x0800abf0
 8005334:	20000004 	.word	0x20000004
 8005338:	20000008 	.word	0x20000008

0800533c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800533c:	b490      	push	{r4, r7}
 800533e:	b08a      	sub	sp, #40	; 0x28
 8005340:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005342:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005344:	1d3c      	adds	r4, r7, #4
 8005346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800534c:	f240 2301 	movw	r3, #513	; 0x201
 8005350:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	2300      	movs	r3, #0
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005366:	4b21      	ldr	r3, [pc, #132]	; (80053ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b04      	cmp	r3, #4
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x40>
 8005376:	2b08      	cmp	r3, #8
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x46>
 800537a:	e02b      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800537e:	623b      	str	r3, [r7, #32]
      break;
 8005380:	e02b      	b.n	80053da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	0c9b      	lsrs	r3, r3, #18
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	3328      	adds	r3, #40	; 0x28
 800538c:	443b      	add	r3, r7
 800538e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005392:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d012      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	0c5b      	lsrs	r3, r3, #17
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	3328      	adds	r3, #40	; 0x28
 80053aa:	443b      	add	r3, r7
 80053ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4a0e      	ldr	r2, [pc, #56]	; (80053f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053b6:	fb03 f202 	mul.w	r2, r3, r2
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
 80053c2:	e004      	b.n	80053ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4a0b      	ldr	r2, [pc, #44]	; (80053f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	623b      	str	r3, [r7, #32]
      break;
 80053d2:	e002      	b.n	80053da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053d6:	623b      	str	r3, [r7, #32]
      break;
 80053d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053da:	6a3b      	ldr	r3, [r7, #32]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3728      	adds	r7, #40	; 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc90      	pop	{r4, r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	0800aa8c 	.word	0x0800aa8c
 80053ec:	40021000 	.word	0x40021000
 80053f0:	007a1200 	.word	0x007a1200
 80053f4:	003d0900 	.word	0x003d0900

080053f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <HAL_RCC_GetHCLKFreq+0x10>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	20000004 	.word	0x20000004

0800540c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005410:	f7ff fff2 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000
 8005430:	0800ac00 	.word	0x0800ac00

08005434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005438:	f7ff ffde 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 800543c:	4602      	mov	r2, r0
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	0adb      	lsrs	r3, r3, #11
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	4903      	ldr	r1, [pc, #12]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800544a:	5ccb      	ldrb	r3, [r1, r3]
 800544c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005450:	4618      	mov	r0, r3
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000
 8005458:	0800ac00 	.word	0x0800ac00

0800545c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	220f      	movs	r2, #15
 800546a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_RCC_GetClockConfig+0x58>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 0203 	and.w	r2, r3, #3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005478:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <HAL_RCC_GetClockConfig+0x58>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <HAL_RCC_GetClockConfig+0x58>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005490:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <HAL_RCC_GetClockConfig+0x58>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	08db      	lsrs	r3, r3, #3
 8005496:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_RCC_GetClockConfig+0x5c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0207 	and.w	r2, r3, #7
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40022000 	.word	0x40022000

080054bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <RCC_Delay+0x34>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <RCC_Delay+0x38>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	0a5b      	lsrs	r3, r3, #9
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054d8:	bf00      	nop
  }
  while (Delay --);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1e5a      	subs	r2, r3, #1
 80054de:	60fa      	str	r2, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1f9      	bne.n	80054d8 <RCC_Delay+0x1c>
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	20000004 	.word	0x20000004
 80054f4:	10624dd3 	.word	0x10624dd3

080054f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e076      	b.n	80055f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	d108      	bne.n	8005524 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551a:	d009      	beq.n	8005530 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	61da      	str	r2, [r3, #28]
 8005522:	e005      	b.n	8005530 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fd f932 	bl	80027b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005566:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	ea42 0103 	orr.w	r1, r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	0c1a      	lsrs	r2, r3, #16
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f002 0204 	and.w	r2, r2, #4
 80055d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_SPI_Transmit+0x22>
 800561e:	2302      	movs	r3, #2
 8005620:	e126      	b.n	8005870 <HAL_SPI_Transmit+0x270>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562a:	f7fd fae3 	bl	8002bf4 <HAL_GetTick>
 800562e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d002      	beq.n	8005646 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005640:	2302      	movs	r3, #2
 8005642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005644:	e10b      	b.n	800585e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_SPI_Transmit+0x52>
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005656:	e102      	b.n	800585e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2203      	movs	r2, #3
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	88fa      	ldrh	r2, [r7, #6]
 8005676:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569e:	d10f      	bne.n	80056c0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d007      	beq.n	80056de <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e6:	d14b      	bne.n	8005780 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <HAL_SPI_Transmit+0xf6>
 80056f0:	8afb      	ldrh	r3, [r7, #22]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d13e      	bne.n	8005774 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	881a      	ldrh	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	1c9a      	adds	r2, r3, #2
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800571a:	e02b      	b.n	8005774 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	d112      	bne.n	8005750 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	881a      	ldrh	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	1c9a      	adds	r2, r3, #2
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	86da      	strh	r2, [r3, #54]	; 0x36
 800574e:	e011      	b.n	8005774 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005750:	f7fd fa50 	bl	8002bf4 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d803      	bhi.n	8005768 <HAL_SPI_Transmit+0x168>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005766:	d102      	bne.n	800576e <HAL_SPI_Transmit+0x16e>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005772:	e074      	b.n	800585e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1ce      	bne.n	800571c <HAL_SPI_Transmit+0x11c>
 800577e:	e04c      	b.n	800581a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_SPI_Transmit+0x18e>
 8005788:	8afb      	ldrh	r3, [r7, #22]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d140      	bne.n	8005810 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057b4:	e02c      	b.n	8005810 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d113      	bne.n	80057ec <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	330c      	adds	r3, #12
 80057ce:	7812      	ldrb	r2, [r2, #0]
 80057d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80057ea:	e011      	b.n	8005810 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ec:	f7fd fa02 	bl	8002bf4 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d803      	bhi.n	8005804 <HAL_SPI_Transmit+0x204>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005802:	d102      	bne.n	800580a <HAL_SPI_Transmit+0x20a>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800580e:	e026      	b.n	800585e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1cd      	bne.n	80057b6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f9b6 	bl	8005b90 <SPI_EndRxTxTransaction>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e000      	b.n	800585e <HAL_SPI_Transmit+0x25e>
  }

error:
 800585c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800586e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	099b      	lsrs	r3, r3, #6
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10f      	bne.n	80058bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	099b      	lsrs	r3, r3, #6
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	4798      	blx	r3
    return;
 80058ba:	e0be      	b.n	8005a3a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <HAL_SPI_IRQHandler+0x66>
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	09db      	lsrs	r3, r3, #7
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	4798      	blx	r3
    return;
 80058dc:	e0ad      	b.n	8005a3a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_SPI_IRQHandler+0x80>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	099b      	lsrs	r3, r3, #6
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80a1 	beq.w	8005a3a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 809a 	beq.w	8005a3a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	099b      	lsrs	r3, r3, #6
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d023      	beq.n	800595a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b03      	cmp	r3, #3
 800591c:	d011      	beq.n	8005942 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f043 0204 	orr.w	r2, r3, #4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	e00b      	b.n	800595a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005942:	2300      	movs	r3, #0
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	693b      	ldr	r3, [r7, #16]
        return;
 8005958:	e06f      	b.n	8005a3a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596a:	f043 0201 	orr.w	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005994:	2b00      	cmp	r3, #0
 8005996:	d04f      	beq.n	8005a38 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <HAL_SPI_IRQHandler+0x14c>
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d034      	beq.n	8005a2e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0203 	bic.w	r2, r2, #3
 80059d2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d011      	beq.n	8005a00 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e0:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <HAL_SPI_IRQHandler+0x1c8>)
 80059e2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fd fa4b 	bl	8002e84 <HAL_DMA_Abort_IT>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d016      	beq.n	8005a36 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a0c:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <HAL_SPI_IRQHandler+0x1c8>)
 8005a0e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fd fa35 	bl	8002e84 <HAL_DMA_Abort_IT>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005a2c:	e003      	b.n	8005a36 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f808 	bl	8005a44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a34:	e000      	b.n	8005a38 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005a36:	bf00      	nop
    return;
 8005a38:	bf00      	nop
  }
}
 8005a3a:	3720      	adds	r7, #32
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	08005a57 	.word	0x08005a57

08005a44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff ffe7 	bl	8005a44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a90:	f7fd f8b0 	bl	8002bf4 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005aa0:	f7fd f8a8 	bl	8002bf4 <HAL_GetTick>
 8005aa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aa6:	4b39      	ldr	r3, [pc, #228]	; (8005b8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	015b      	lsls	r3, r3, #5
 8005aac:	0d1b      	lsrs	r3, r3, #20
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	fb02 f303 	mul.w	r3, r2, r3
 8005ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ab6:	e054      	b.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005abe:	d050      	beq.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ac0:	f7fd f898 	bl	8002bf4 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d902      	bls.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d13d      	bne.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aee:	d111      	bne.n	8005b14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af8:	d004      	beq.n	8005b04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b02:	d107      	bne.n	8005b14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1c:	d10f      	bne.n	8005b3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e017      	b.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d19b      	bne.n	8005ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000004 	.word	0x20000004

08005b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2180      	movs	r1, #128	; 0x80
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff ff6a 	bl	8005a80 <SPI_WaitFlagStateUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e000      	b.n	8005bc4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e041      	b.n	8005c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fc fe30 	bl	8002858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f000 fa70 	bl	80060f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d001      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e03a      	b.n	8005cfa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <HAL_TIM_Base_Start_IT+0x98>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x58>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cae:	d009      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x58>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <HAL_TIM_Base_Start_IT+0x9c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x58>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <HAL_TIM_Base_Start_IT+0xa0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d111      	bne.n	8005ce8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d010      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce6:	e007      	b.n	8005cf8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr
 8005d04:	40012c00 	.word	0x40012c00
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800

08005d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d122      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d11b      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0202 	mvn.w	r2, #2
 8005d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f9b1 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f9a4 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f9b3 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d122      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d11b      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0204 	mvn.w	r2, #4
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f987 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f97a 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f989 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d122      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0308 	and.w	r3, r3, #8
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d11b      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0208 	mvn.w	r2, #8
 8005de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2204      	movs	r2, #4
 8005dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f95d 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005e00:	e005      	b.n	8005e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f950 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f95f 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b10      	cmp	r3, #16
 8005e20:	d122      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d11b      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0210 	mvn.w	r2, #16
 8005e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f933 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f926 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f935 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10e      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d107      	bne.n	8005e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0201 	mvn.w	r2, #1
 8005e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fc fbee 	bl	8002670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b80      	cmp	r3, #128	; 0x80
 8005ea0:	d10e      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eac:	2b80      	cmp	r3, #128	; 0x80
 8005eae:	d107      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa77 	bl	80063ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d10e      	bne.n	8005eec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d107      	bne.n	8005eec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f8f9 	bl	80060de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d10e      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d107      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0220 	mvn.w	r2, #32
 8005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fa42 	bl	800639c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_TIM_ConfigClockSource+0x18>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e0b3      	b.n	80060a0 <HAL_TIM_ConfigClockSource+0x180>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f70:	d03e      	beq.n	8005ff0 <HAL_TIM_ConfigClockSource+0xd0>
 8005f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f76:	f200 8087 	bhi.w	8006088 <HAL_TIM_ConfigClockSource+0x168>
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7e:	f000 8085 	beq.w	800608c <HAL_TIM_ConfigClockSource+0x16c>
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d87f      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x168>
 8005f88:	2b70      	cmp	r3, #112	; 0x70
 8005f8a:	d01a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0xa2>
 8005f8c:	2b70      	cmp	r3, #112	; 0x70
 8005f8e:	d87b      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x168>
 8005f90:	2b60      	cmp	r3, #96	; 0x60
 8005f92:	d050      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x116>
 8005f94:	2b60      	cmp	r3, #96	; 0x60
 8005f96:	d877      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x168>
 8005f98:	2b50      	cmp	r3, #80	; 0x50
 8005f9a:	d03c      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0xf6>
 8005f9c:	2b50      	cmp	r3, #80	; 0x50
 8005f9e:	d873      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x168>
 8005fa0:	2b40      	cmp	r3, #64	; 0x40
 8005fa2:	d058      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x136>
 8005fa4:	2b40      	cmp	r3, #64	; 0x40
 8005fa6:	d86f      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x168>
 8005fa8:	2b30      	cmp	r3, #48	; 0x30
 8005faa:	d064      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x156>
 8005fac:	2b30      	cmp	r3, #48	; 0x30
 8005fae:	d86b      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x168>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d060      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x156>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d867      	bhi.n	8006088 <HAL_TIM_ConfigClockSource+0x168>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05c      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x156>
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d05a      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005fc0:	e062      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6899      	ldr	r1, [r3, #8]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f000 f966 	bl	80062a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fe4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	609a      	str	r2, [r3, #8]
      break;
 8005fee:	e04e      	b.n	800608e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6899      	ldr	r1, [r3, #8]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f000 f94f 	bl	80062a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006012:	609a      	str	r2, [r3, #8]
      break;
 8006014:	e03b      	b.n	800608e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	461a      	mov	r2, r3
 8006024:	f000 f8c6 	bl	80061b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2150      	movs	r1, #80	; 0x50
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f91d 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8006034:	e02b      	b.n	800608e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6859      	ldr	r1, [r3, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	461a      	mov	r2, r3
 8006044:	f000 f8e4 	bl	8006210 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2160      	movs	r1, #96	; 0x60
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f90d 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8006054:	e01b      	b.n	800608e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6859      	ldr	r1, [r3, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	461a      	mov	r2, r3
 8006064:	f000 f8a6 	bl	80061b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2140      	movs	r1, #64	; 0x40
 800606e:	4618      	mov	r0, r3
 8006070:	f000 f8fd 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8006074:	e00b      	b.n	800608e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f000 f8f4 	bl	800626e <TIM_ITRx_SetConfig>
        break;
 8006086:	e002      	b.n	800608e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006088:	bf00      	nop
 800608a:	e000      	b.n	800608e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800608c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr

080060de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr

080060f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a29      	ldr	r2, [pc, #164]	; (80061a8 <TIM_Base_SetConfig+0xb8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00b      	beq.n	8006120 <TIM_Base_SetConfig+0x30>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d007      	beq.n	8006120 <TIM_Base_SetConfig+0x30>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a26      	ldr	r2, [pc, #152]	; (80061ac <TIM_Base_SetConfig+0xbc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_Base_SetConfig+0x30>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <TIM_Base_SetConfig+0xc0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d108      	bne.n	8006132 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1c      	ldr	r2, [pc, #112]	; (80061a8 <TIM_Base_SetConfig+0xb8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <TIM_Base_SetConfig+0x62>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006140:	d007      	beq.n	8006152 <TIM_Base_SetConfig+0x62>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a19      	ldr	r2, [pc, #100]	; (80061ac <TIM_Base_SetConfig+0xbc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_Base_SetConfig+0x62>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <TIM_Base_SetConfig+0xc0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <TIM_Base_SetConfig+0xb8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d103      	bne.n	8006198 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	615a      	str	r2, [r3, #20]
}
 800619e:	bf00      	nop
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800

080061b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f023 0201 	bic.w	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 030a 	bic.w	r3, r3, #10
 80061f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f023 0210 	bic.w	r2, r3, #16
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800623a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	031b      	lsls	r3, r3, #12
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800624c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr

0800626e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	f043 0307 	orr.w	r3, r3, #7
 8006290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	bc80      	pop	{r7}
 80062a0:	4770      	bx	lr

080062a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b087      	sub	sp, #28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	021a      	lsls	r2, r3, #8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	609a      	str	r2, [r3, #8]
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e046      	b.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a16      	ldr	r2, [pc, #88]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d009      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a10      	ldr	r2, [pc, #64]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10c      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4313      	orrs	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800

0800639c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e03f      	b.n	8006452 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fc fa6e 	bl	80028c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2224      	movs	r2, #36	; 0x24
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fb8d 	bl	8006b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695a      	ldr	r2, [r3, #20]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	4613      	mov	r3, r2
 8006466:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b20      	cmp	r3, #32
 8006472:	d130      	bne.n	80064d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_UART_Transmit_IT+0x26>
 800647a:	88fb      	ldrh	r3, [r7, #6]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e029      	b.n	80064d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_UART_Transmit_IT+0x38>
 800648e:	2302      	movs	r3, #2
 8006490:	e022      	b.n	80064d8 <HAL_UART_Transmit_IT+0x7e>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2221      	movs	r2, #33	; 0x21
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e000      	b.n	80064d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr
	...

080064e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006504:	2300      	movs	r3, #0
 8006506:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10d      	bne.n	8006536 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <HAL_UART_IRQHandler+0x52>
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa4f 	bl	80069d2 <UART_Receive_IT>
      return;
 8006534:	e17b      	b.n	800682e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80b1 	beq.w	80066a0 <HAL_UART_IRQHandler+0x1bc>
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d105      	bne.n	8006554 <HAL_UART_IRQHandler+0x70>
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80a6 	beq.w	80066a0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_UART_IRQHandler+0x90>
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f043 0201 	orr.w	r2, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <HAL_UART_IRQHandler+0xb0>
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f043 0202 	orr.w	r2, r3, #2
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_UART_IRQHandler+0xd0>
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	f043 0204 	orr.w	r2, r3, #4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00f      	beq.n	80065de <HAL_UART_IRQHandler+0xfa>
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <HAL_UART_IRQHandler+0xee>
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f043 0208 	orr.w	r2, r3, #8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 811e 	beq.w	8006824 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <HAL_UART_IRQHandler+0x11e>
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f9e8 	bl	80069d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <HAL_UART_IRQHandler+0x146>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d031      	beq.n	800668e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f92a 	bl	8006884 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d023      	beq.n	8006686 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	2b00      	cmp	r3, #0
 8006654:	d013      	beq.n	800667e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	4a76      	ldr	r2, [pc, #472]	; (8006834 <HAL_UART_IRQHandler+0x350>)
 800665c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	4618      	mov	r0, r3
 8006664:	f7fc fc0e 	bl	8002e84 <HAL_DMA_Abort_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	e00e      	b.n	800669c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f8ec 	bl	800685c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	e00a      	b.n	800669c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8e8 	bl	800685c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	e006      	b.n	800669c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f8e4 	bl	800685c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800669a:	e0c3      	b.n	8006824 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	bf00      	nop
    return;
 800669e:	e0c1      	b.n	8006824 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	f040 80a1 	bne.w	80067ec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 809b 	beq.w	80067ec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8095 	beq.w	80067ec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d04e      	beq.n	8006784 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80066f0:	8a3b      	ldrh	r3, [r7, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8098 	beq.w	8006828 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066fc:	8a3a      	ldrh	r2, [r7, #16]
 80066fe:	429a      	cmp	r2, r3
 8006700:	f080 8092 	bcs.w	8006828 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8a3a      	ldrh	r2, [r7, #16]
 8006708:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	2b20      	cmp	r3, #32
 8006712:	d02b      	beq.n	800676c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006722:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695a      	ldr	r2, [r3, #20]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0201 	bic.w	r2, r2, #1
 8006732:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006742:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0210 	bic.w	r2, r2, #16
 8006760:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	4618      	mov	r0, r3
 8006768:	f7fc fb51 	bl	8002e0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006774:	b29b      	uxth	r3, r3
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	b29b      	uxth	r3, r3
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f876 	bl	800686e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006782:	e051      	b.n	8006828 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800678c:	b29b      	uxth	r3, r3
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d047      	beq.n	800682c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800679c:	8a7b      	ldrh	r3, [r7, #18]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d044      	beq.n	800682c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067b0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695a      	ldr	r2, [r3, #20]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0201 	bic.w	r2, r2, #1
 80067c0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0210 	bic.w	r2, r2, #16
 80067de:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e0:	8a7b      	ldrh	r3, [r7, #18]
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f842 	bl	800686e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067ea:	e01f      	b.n	800682c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_UART_IRQHandler+0x324>
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f87f 	bl	8006904 <UART_Transmit_IT>
    return;
 8006806:	e012      	b.n	800682e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00d      	beq.n	800682e <HAL_UART_IRQHandler+0x34a>
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f8c0 	bl	80069a2 <UART_EndTransmit_IT>
    return;
 8006822:	e004      	b.n	800682e <HAL_UART_IRQHandler+0x34a>
    return;
 8006824:	bf00      	nop
 8006826:	e002      	b.n	800682e <HAL_UART_IRQHandler+0x34a>
      return;
 8006828:	bf00      	nop
 800682a:	e000      	b.n	800682e <HAL_UART_IRQHandler+0x34a>
      return;
 800682c:	bf00      	nop
  }
}
 800682e:	3728      	adds	r7, #40	; 0x28
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	080068dd 	.word	0x080068dd

08006838 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	bc80      	pop	{r7}
 800685a:	4770      	bx	lr

0800685c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	4770      	bx	lr

0800686e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	460b      	mov	r3, r1
 8006878:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr

08006884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800689a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695a      	ldr	r2, [r3, #20]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d107      	bne.n	80068c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0210 	bic.w	r2, r2, #16
 80068c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff ffb0 	bl	800685c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b21      	cmp	r3, #33	; 0x21
 8006916:	d13e      	bne.n	8006996 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006920:	d114      	bne.n	800694c <UART_Transmit_IT+0x48>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d110      	bne.n	800694c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800693e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	1c9a      	adds	r2, r3, #2
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	621a      	str	r2, [r3, #32]
 800694a:	e008      	b.n	800695e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	1c59      	adds	r1, r3, #1
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6211      	str	r1, [r2, #32]
 8006956:	781a      	ldrb	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29b      	uxth	r3, r3
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4619      	mov	r1, r3
 800696c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10f      	bne.n	8006992 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006980:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006990:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e000      	b.n	8006998 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006996:	2302      	movs	r3, #2
  }
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr

080069a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff38 	bl	8006838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b086      	sub	sp, #24
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b22      	cmp	r3, #34	; 0x22
 80069e4:	f040 8099 	bne.w	8006b1a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f0:	d117      	bne.n	8006a22 <UART_Receive_IT+0x50>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d113      	bne.n	8006a22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	1c9a      	adds	r2, r3, #2
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a20:	e026      	b.n	8006a70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a34:	d007      	beq.n	8006a46 <UART_Receive_IT+0x74>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <UART_Receive_IT+0x82>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	e008      	b.n	8006a66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d148      	bne.n	8006b16 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0220 	bic.w	r2, r2, #32
 8006a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695a      	ldr	r2, [r3, #20]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d123      	bne.n	8006b0c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0210 	bic.w	r2, r2, #16
 8006ad8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	d10a      	bne.n	8006afe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff feb2 	bl	800686e <HAL_UARTEx_RxEventCallback>
 8006b0a:	e002      	b.n	8006b12 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff fe9c 	bl	800684a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e002      	b.n	8006b1c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e000      	b.n	8006b1c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b5e:	f023 030c 	bic.w	r3, r3, #12
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a2c      	ldr	r2, [pc, #176]	; (8006c38 <UART_SetConfig+0x114>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d103      	bne.n	8006b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b8c:	f7fe fc52 	bl	8005434 <HAL_RCC_GetPCLK2Freq>
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	e002      	b.n	8006b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b94:	f7fe fc3a 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 8006b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009a      	lsls	r2, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb0:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <UART_SetConfig+0x118>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	0119      	lsls	r1, r3, #4
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009a      	lsls	r2, r3, #2
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bd0:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <UART_SetConfig+0x118>)
 8006bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	2064      	movs	r0, #100	; 0x64
 8006bda:	fb00 f303 	mul.w	r3, r0, r3
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	3332      	adds	r3, #50	; 0x32
 8006be4:	4a15      	ldr	r2, [pc, #84]	; (8006c3c <UART_SetConfig+0x118>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bf0:	4419      	add	r1, r3
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009a      	lsls	r2, r3, #2
 8006bfc:	441a      	add	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <UART_SetConfig+0x118>)
 8006c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	2064      	movs	r0, #100	; 0x64
 8006c12:	fb00 f303 	mul.w	r3, r0, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	3332      	adds	r3, #50	; 0x32
 8006c1c:	4a07      	ldr	r2, [pc, #28]	; (8006c3c <UART_SetConfig+0x118>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	f003 020f 	and.w	r2, r3, #15
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40013800 	.word	0x40013800
 8006c3c:	51eb851f 	.word	0x51eb851f

08006c40 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c46:	f3ef 8305 	mrs	r3, IPSR
 8006c4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10f      	bne.n	8006c72 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c52:	f3ef 8310 	mrs	r3, PRIMASK
 8006c56:	607b      	str	r3, [r7, #4]
  return(result);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <osKernelInitialize+0x32>
 8006c5e:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <osKernelInitialize+0x60>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d109      	bne.n	8006c7a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c66:	f3ef 8311 	mrs	r3, BASEPRI
 8006c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006c72:	f06f 0305 	mvn.w	r3, #5
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e00c      	b.n	8006c94 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c7a:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <osKernelInitialize+0x60>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d105      	bne.n	8006c8e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006c82:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <osKernelInitialize+0x60>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	e002      	b.n	8006c94 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006c94:	68fb      	ldr	r3, [r7, #12]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr
 8006ca0:	20000ec8 	.word	0x20000ec8

08006ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006caa:	f3ef 8305 	mrs	r3, IPSR
 8006cae:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10f      	bne.n	8006cd6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cba:	607b      	str	r3, [r7, #4]
  return(result);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <osKernelStart+0x32>
 8006cc2:	4b11      	ldr	r3, [pc, #68]	; (8006d08 <osKernelStart+0x64>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d109      	bne.n	8006cde <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cca:	f3ef 8311 	mrs	r3, BASEPRI
 8006cce:	603b      	str	r3, [r7, #0]
  return(result);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <osKernelStart+0x3a>
    stat = osErrorISR;
 8006cd6:	f06f 0305 	mvn.w	r3, #5
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	e00e      	b.n	8006cfc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <osKernelStart+0x64>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d107      	bne.n	8006cf6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <osKernelStart+0x64>)
 8006ce8:	2202      	movs	r2, #2
 8006cea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006cec:	f001 f9b2 	bl	8008054 <vTaskStartScheduler>
      stat = osOK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e002      	b.n	8006cfc <osKernelStart+0x58>
    } else {
      stat = osError;
 8006cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cfa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000ec8 	.word	0x20000ec8

08006d0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b092      	sub	sp, #72	; 0x48
 8006d10:	af04      	add	r7, sp, #16
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d1c:	f3ef 8305 	mrs	r3, IPSR
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f040 8094 	bne.w	8006e52 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d2e:	623b      	str	r3, [r7, #32]
  return(result);
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f040 808d 	bne.w	8006e52 <osThreadNew+0x146>
 8006d38:	4b48      	ldr	r3, [pc, #288]	; (8006e5c <osThreadNew+0x150>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d106      	bne.n	8006d4e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d40:	f3ef 8311 	mrs	r3, BASEPRI
 8006d44:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f040 8082 	bne.w	8006e52 <osThreadNew+0x146>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d07e      	beq.n	8006e52 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006d54:	2380      	movs	r3, #128	; 0x80
 8006d56:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006d58:	2318      	movs	r3, #24
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006d60:	f107 031b 	add.w	r3, r7, #27
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d6a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d045      	beq.n	8006dfe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <osThreadNew+0x74>
        name = attr->name;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <osThreadNew+0x9a>
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	2b38      	cmp	r3, #56	; 0x38
 8006d98:	d805      	bhi.n	8006da6 <osThreadNew+0x9a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <osThreadNew+0x9e>
        return (NULL);
 8006da6:	2300      	movs	r3, #0
 8006da8:	e054      	b.n	8006e54 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	089b      	lsrs	r3, r3, #2
 8006db8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <osThreadNew+0xd4>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2bbf      	cmp	r3, #191	; 0xbf
 8006dc8:	d90a      	bls.n	8006de0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d006      	beq.n	8006de0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <osThreadNew+0xd4>
        mem = 1;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dde:	e010      	b.n	8006e02 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10c      	bne.n	8006e02 <osThreadNew+0xf6>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d108      	bne.n	8006e02 <osThreadNew+0xf6>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <osThreadNew+0xf6>
          mem = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dfc:	e001      	b.n	8006e02 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d110      	bne.n	8006e2a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e10:	9202      	str	r2, [sp, #8]
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 fed6 	bl	8007bd0 <xTaskCreateStatic>
 8006e24:	4603      	mov	r3, r0
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e013      	b.n	8006e52 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d110      	bne.n	8006e52 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	f107 0314 	add.w	r3, r7, #20
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 ff20 	bl	8007c88 <xTaskCreate>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d001      	beq.n	8006e52 <osThreadNew+0x146>
          hTask = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e52:	697b      	ldr	r3, [r7, #20]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3738      	adds	r7, #56	; 0x38
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20000ec8 	.word	0x20000ec8

08006e60 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e68:	f3ef 8305 	mrs	r3, IPSR
 8006e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8006e6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10f      	bne.n	8006e94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e74:	f3ef 8310 	mrs	r3, PRIMASK
 8006e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <osDelay+0x34>
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <osDelay+0x58>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d109      	bne.n	8006e9c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e88:	f3ef 8311 	mrs	r3, BASEPRI
 8006e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <osDelay+0x3c>
    stat = osErrorISR;
 8006e94:	f06f 0305 	mvn.w	r3, #5
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	e007      	b.n	8006eac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <osDelay+0x4c>
      vTaskDelay(ticks);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 f846 	bl	8007f38 <vTaskDelay>
    }
  }

  return (stat);
 8006eac:	697b      	ldr	r3, [r7, #20]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000ec8 	.word	0x20000ec8

08006ebc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08c      	sub	sp, #48	; 0x30
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ecc:	f3ef 8305 	mrs	r3, IPSR
 8006ed0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ed2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d16f      	bne.n	8006fb8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8006edc:	617b      	str	r3, [r7, #20]
  return(result);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d169      	bne.n	8006fb8 <osMessageQueueNew+0xfc>
 8006ee4:	4b37      	ldr	r3, [pc, #220]	; (8006fc4 <osMessageQueueNew+0x108>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d105      	bne.n	8006ef8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006eec:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef0:	613b      	str	r3, [r7, #16]
  return(result);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d15f      	bne.n	8006fb8 <osMessageQueueNew+0xfc>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d05c      	beq.n	8006fb8 <osMessageQueueNew+0xfc>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d059      	beq.n	8006fb8 <osMessageQueueNew+0xfc>
    mem = -1;
 8006f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f08:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d029      	beq.n	8006f64 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d012      	beq.n	8006f3e <osMessageQueueNew+0x82>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	2b4f      	cmp	r3, #79	; 0x4f
 8006f1e:	d90e      	bls.n	8006f3e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	695a      	ldr	r2, [r3, #20]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	fb01 f303 	mul.w	r3, r1, r3
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d302      	bcc.n	8006f3e <osMessageQueueNew+0x82>
        mem = 1;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	623b      	str	r3, [r7, #32]
 8006f3c:	e014      	b.n	8006f68 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d110      	bne.n	8006f68 <osMessageQueueNew+0xac>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10c      	bne.n	8006f68 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d108      	bne.n	8006f68 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <osMessageQueueNew+0xac>
          mem = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	623b      	str	r3, [r7, #32]
 8006f62:	e001      	b.n	8006f68 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d10b      	bne.n	8006f86 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2100      	movs	r1, #0
 8006f78:	9100      	str	r1, [sp, #0]
 8006f7a:	68b9      	ldr	r1, [r7, #8]
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f96d 	bl	800725c <xQueueGenericCreateStatic>
 8006f82:	6278      	str	r0, [r7, #36]	; 0x24
 8006f84:	e008      	b.n	8006f98 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d105      	bne.n	8006f98 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f9da 	bl	800734a <xQueueGenericCreate>
 8006f96:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00c      	beq.n	8006fb8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <osMessageQueueNew+0xf0>
        name = attr->name;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	e001      	b.n	8006fb0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fb4:	f000 fdb0 	bl	8007b18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3728      	adds	r7, #40	; 0x28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000ec8 	.word	0x20000ec8

08006fc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a06      	ldr	r2, [pc, #24]	; (8006ff0 <vApplicationGetIdleTaskMemory+0x28>)
 8006fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4a05      	ldr	r2, [pc, #20]	; (8006ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2280      	movs	r2, #128	; 0x80
 8006fe4:	601a      	str	r2, [r3, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr
 8006ff0:	20000ecc 	.word	0x20000ecc
 8006ff4:	20000f8c 	.word	0x20000f8c

08006ff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4a07      	ldr	r2, [pc, #28]	; (8007024 <vApplicationGetTimerTaskMemory+0x2c>)
 8007008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4a06      	ldr	r2, [pc, #24]	; (8007028 <vApplicationGetTimerTaskMemory+0x30>)
 800700e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007016:	601a      	str	r2, [r3, #0]
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	2000118c 	.word	0x2000118c
 8007028:	2000124c 	.word	0x2000124c

0800702c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f103 0208 	add.w	r2, r3, #8
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f103 0208 	add.w	r2, r3, #8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f103 0208 	add.w	r2, r3, #8
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr

0800706a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr

08007082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070de:	d103      	bne.n	80070e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	e00c      	b.n	8007102 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3308      	adds	r3, #8
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	e002      	b.n	80070f6 <vListInsert+0x2e>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d2f6      	bcs.n	80070f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6892      	ldr	r2, [r2, #8]
 800714e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6852      	ldr	r2, [r2, #4]
 8007158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d103      	bne.n	800716c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr
	...

0800718c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071b6:	f002 fb59 	bl	800986c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c2:	68f9      	ldr	r1, [r7, #12]
 80071c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071c6:	fb01 f303 	mul.w	r3, r1, r3
 80071ca:	441a      	add	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	3b01      	subs	r3, #1
 80071e8:	68f9      	ldr	r1, [r7, #12]
 80071ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071ec:	fb01 f303 	mul.w	r3, r1, r3
 80071f0:	441a      	add	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	22ff      	movs	r2, #255	; 0xff
 80071fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	22ff      	movs	r2, #255	; 0xff
 8007202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d114      	bne.n	8007236 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01a      	beq.n	800724a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3310      	adds	r3, #16
 8007218:	4618      	mov	r0, r3
 800721a:	f001 fa69 	bl	80086f0 <xTaskRemoveFromEventList>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d012      	beq.n	800724a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007224:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <xQueueGenericReset+0xcc>)
 8007226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	e009      	b.n	800724a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3310      	adds	r3, #16
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff fef6 	bl	800702c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3324      	adds	r3, #36	; 0x24
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff fef1 	bl	800702c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800724a:	f002 fb3f 	bl	80098cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800724e:	2301      	movs	r3, #1
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08e      	sub	sp, #56	; 0x38
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <xQueueGenericCreateStatic+0x52>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <xQueueGenericCreateStatic+0x56>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <xQueueGenericCreateStatic+0x58>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	623b      	str	r3, [r7, #32]
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <xQueueGenericCreateStatic+0x7e>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <xQueueGenericCreateStatic+0x82>
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <xQueueGenericCreateStatic+0x84>
 80072de:	2300      	movs	r3, #0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	61fb      	str	r3, [r7, #28]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072fa:	2350      	movs	r3, #80	; 0x50
 80072fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b50      	cmp	r3, #80	; 0x50
 8007302:	d00a      	beq.n	800731a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	61bb      	str	r3, [r7, #24]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00d      	beq.n	8007340 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800732c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	4613      	mov	r3, r2
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 f843 	bl	80073c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007342:	4618      	mov	r0, r3
 8007344:	3730      	adds	r7, #48	; 0x30
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800734a:	b580      	push	{r7, lr}
 800734c:	b08a      	sub	sp, #40	; 0x28
 800734e:	af02      	add	r7, sp, #8
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	4613      	mov	r3, r2
 8007356:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <xQueueGenericCreate+0x2a>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	613b      	str	r3, [r7, #16]
}
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800737a:	2300      	movs	r3, #0
 800737c:	61fb      	str	r3, [r7, #28]
 800737e:	e004      	b.n	800738a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	fb02 f303 	mul.w	r3, r2, r3
 8007388:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3350      	adds	r3, #80	; 0x50
 800738e:	4618      	mov	r0, r3
 8007390:	f002 fb6c 	bl	8009a6c <pvPortMalloc>
 8007394:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00f      	beq.n	80073bc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	3350      	adds	r3, #80	; 0x50
 80073a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073aa:	79fa      	ldrb	r2, [r7, #7]
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	4613      	mov	r3, r2
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f805 	bl	80073c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80073bc:	69bb      	ldr	r3, [r7, #24]
	}
 80073be:	4618      	mov	r0, r3
 80073c0:	3720      	adds	r7, #32
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	e002      	b.n	80073e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073f4:	2101      	movs	r1, #1
 80073f6:	69b8      	ldr	r0, [r7, #24]
 80073f8:	f7ff fec8 	bl	800718c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08e      	sub	sp, #56	; 0x38
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800741a:	2300      	movs	r3, #0
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xQueueGenericSend+0x32>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <xQueueGenericSend+0x40>
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <xQueueGenericSend+0x44>
 800744c:	2301      	movs	r3, #1
 800744e:	e000      	b.n	8007452 <xQueueGenericSend+0x46>
 8007450:	2300      	movs	r3, #0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <xQueueGenericSend+0x60>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007468:	bf00      	nop
 800746a:	e7fe      	b.n	800746a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d103      	bne.n	800747a <xQueueGenericSend+0x6e>
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <xQueueGenericSend+0x72>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <xQueueGenericSend+0x74>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <xQueueGenericSend+0x8e>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	623b      	str	r3, [r7, #32]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800749a:	f001 fbc3 	bl	8008c24 <xTaskGetSchedulerState>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <xQueueGenericSend+0x9e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <xQueueGenericSend+0xa2>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e000      	b.n	80074b0 <xQueueGenericSend+0xa4>
 80074ae:	2300      	movs	r3, #0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <xQueueGenericSend+0xbe>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	61fb      	str	r3, [r7, #28]
}
 80074c6:	bf00      	nop
 80074c8:	e7fe      	b.n	80074c8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ca:	f002 f9cf 	bl	800986c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <xQueueGenericSend+0xd4>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d129      	bne.n	8007534 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e6:	f000 fa07 	bl	80078f8 <prvCopyDataToQueue>
 80074ea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d010      	beq.n	8007516 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	3324      	adds	r3, #36	; 0x24
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 f8f9 	bl	80086f0 <xTaskRemoveFromEventList>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d013      	beq.n	800752c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007504:	4b3f      	ldr	r3, [pc, #252]	; (8007604 <xQueueGenericSend+0x1f8>)
 8007506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	e00a      	b.n	800752c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800751c:	4b39      	ldr	r3, [pc, #228]	; (8007604 <xQueueGenericSend+0x1f8>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800752c:	f002 f9ce 	bl	80098cc <vPortExitCritical>
				return pdPASS;
 8007530:	2301      	movs	r3, #1
 8007532:	e063      	b.n	80075fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800753a:	f002 f9c7 	bl	80098cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800753e:	2300      	movs	r3, #0
 8007540:	e05c      	b.n	80075fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007548:	f107 0314 	add.w	r3, r7, #20
 800754c:	4618      	mov	r0, r3
 800754e:	f001 f933 	bl	80087b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007552:	2301      	movs	r3, #1
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007556:	f002 f9b9 	bl	80098cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800755a:	f000 fdef 	bl	800813c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800755e:	f002 f985 	bl	800986c <vPortEnterCritical>
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007568:	b25b      	sxtb	r3, r3
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800756e:	d103      	bne.n	8007578 <xQueueGenericSend+0x16c>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800757e:	b25b      	sxtb	r3, r3
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007584:	d103      	bne.n	800758e <xQueueGenericSend+0x182>
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800758e:	f002 f99d 	bl	80098cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007592:	1d3a      	adds	r2, r7, #4
 8007594:	f107 0314 	add.w	r3, r7, #20
 8007598:	4611      	mov	r1, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f001 f922 	bl	80087e4 <xTaskCheckForTimeOut>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d124      	bne.n	80075f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075a8:	f000 fa9e 	bl	8007ae8 <prvIsQueueFull>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d018      	beq.n	80075e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	3310      	adds	r3, #16
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 f848 	bl	8008650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c2:	f000 fa29 	bl	8007a18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075c6:	f000 fdc7 	bl	8008158 <xTaskResumeAll>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f47f af7c 	bne.w	80074ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <xQueueGenericSend+0x1f8>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	e772      	b.n	80074ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e6:	f000 fa17 	bl	8007a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ea:	f000 fdb5 	bl	8008158 <xTaskResumeAll>
 80075ee:	e76c      	b.n	80074ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f2:	f000 fa11 	bl	8007a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075f6:	f000 fdaf 	bl	8008158 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075fa:	2300      	movs	r3, #0
		}
	}
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3738      	adds	r7, #56	; 0x38
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	e000ed04 	.word	0xe000ed04

08007608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08e      	sub	sp, #56	; 0x38
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <xQueueGenericSendFromISR+0x3c>
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <xQueueGenericSendFromISR+0x40>
 8007644:	2301      	movs	r3, #1
 8007646:	e000      	b.n	800764a <xQueueGenericSendFromISR+0x42>
 8007648:	2300      	movs	r3, #0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	623b      	str	r3, [r7, #32]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d103      	bne.n	8007672 <xQueueGenericSendFromISR+0x6a>
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	2b01      	cmp	r3, #1
 8007670:	d101      	bne.n	8007676 <xQueueGenericSendFromISR+0x6e>
 8007672:	2301      	movs	r3, #1
 8007674:	e000      	b.n	8007678 <xQueueGenericSendFromISR+0x70>
 8007676:	2300      	movs	r3, #0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	61fb      	str	r3, [r7, #28]
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007692:	f002 f9ad 	bl	80099f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007696:	f3ef 8211 	mrs	r2, BASEPRI
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	61ba      	str	r2, [r7, #24]
 80076ac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076ae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d302      	bcc.n	80076c4 <xQueueGenericSendFromISR+0xbc>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d12c      	bne.n	800771e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076d4:	f000 f910 	bl	80078f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e0:	d112      	bne.n	8007708 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d016      	beq.n	8007718 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	3324      	adds	r3, #36	; 0x24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fffe 	bl	80086f0 <xTaskRemoveFromEventList>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00e      	beq.n	8007718 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	e007      	b.n	8007718 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007708:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800770c:	3301      	adds	r3, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	b25a      	sxtb	r2, r3
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007718:	2301      	movs	r3, #1
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800771c:	e001      	b.n	8007722 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800771e:	2300      	movs	r3, #0
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800772c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800772e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007730:	4618      	mov	r0, r3
 8007732:	3738      	adds	r7, #56	; 0x38
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08c      	sub	sp, #48	; 0x30
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007744:	2300      	movs	r3, #0
 8007746:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <xQueueReceive+0x30>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	623b      	str	r3, [r7, #32]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d103      	bne.n	8007776 <xQueueReceive+0x3e>
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <xQueueReceive+0x42>
 8007776:	2301      	movs	r3, #1
 8007778:	e000      	b.n	800777c <xQueueReceive+0x44>
 800777a:	2300      	movs	r3, #0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <xQueueReceive+0x5e>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	61fb      	str	r3, [r7, #28]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007796:	f001 fa45 	bl	8008c24 <xTaskGetSchedulerState>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <xQueueReceive+0x6e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <xQueueReceive+0x72>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e000      	b.n	80077ac <xQueueReceive+0x74>
 80077aa:	2300      	movs	r3, #0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <xQueueReceive+0x8e>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	61bb      	str	r3, [r7, #24]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80077c6:	f002 f851 	bl	800986c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d01f      	beq.n	8007816 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077da:	f000 f8f7 	bl	80079cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	1e5a      	subs	r2, r3, #1
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00f      	beq.n	800780e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	3310      	adds	r3, #16
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 ff7c 	bl	80086f0 <xTaskRemoveFromEventList>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d007      	beq.n	800780e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077fe:	4b3d      	ldr	r3, [pc, #244]	; (80078f4 <xQueueReceive+0x1bc>)
 8007800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800780e:	f002 f85d 	bl	80098cc <vPortExitCritical>
				return pdPASS;
 8007812:	2301      	movs	r3, #1
 8007814:	e069      	b.n	80078ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d103      	bne.n	8007824 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800781c:	f002 f856 	bl	80098cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007820:	2300      	movs	r3, #0
 8007822:	e062      	b.n	80078ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800782a:	f107 0310 	add.w	r3, r7, #16
 800782e:	4618      	mov	r0, r3
 8007830:	f000 ffc2 	bl	80087b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007834:	2301      	movs	r3, #1
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007838:	f002 f848 	bl	80098cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800783c:	f000 fc7e 	bl	800813c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007840:	f002 f814 	bl	800986c <vPortEnterCritical>
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800784a:	b25b      	sxtb	r3, r3
 800784c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007850:	d103      	bne.n	800785a <xQueueReceive+0x122>
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007860:	b25b      	sxtb	r3, r3
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007866:	d103      	bne.n	8007870 <xQueueReceive+0x138>
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007870:	f002 f82c 	bl	80098cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007874:	1d3a      	adds	r2, r7, #4
 8007876:	f107 0310 	add.w	r3, r7, #16
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f000 ffb1 	bl	80087e4 <xTaskCheckForTimeOut>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d123      	bne.n	80078d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800788a:	f000 f917 	bl	8007abc <prvIsQueueEmpty>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d017      	beq.n	80078c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	3324      	adds	r3, #36	; 0x24
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	4611      	mov	r1, r2
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fed7 	bl	8008650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078a4:	f000 f8b8 	bl	8007a18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078a8:	f000 fc56 	bl	8008158 <xTaskResumeAll>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d189      	bne.n	80077c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078b2:	4b10      	ldr	r3, [pc, #64]	; (80078f4 <xQueueReceive+0x1bc>)
 80078b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	e780      	b.n	80077c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c6:	f000 f8a7 	bl	8007a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078ca:	f000 fc45 	bl	8008158 <xTaskResumeAll>
 80078ce:	e77a      	b.n	80077c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d2:	f000 f8a1 	bl	8007a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078d6:	f000 fc3f 	bl	8008158 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078dc:	f000 f8ee 	bl	8007abc <prvIsQueueEmpty>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f43f af6f 	beq.w	80077c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3730      	adds	r7, #48	; 0x30
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	e000ed04 	.word	0xe000ed04

080078f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10d      	bne.n	8007932 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d14d      	bne.n	80079ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	4618      	mov	r0, r3
 8007924:	f001 f99c 	bl	8008c60 <xTaskPriorityDisinherit>
 8007928:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	605a      	str	r2, [r3, #4]
 8007930:	e043      	b.n	80079ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d119      	bne.n	800796c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6898      	ldr	r0, [r3, #8]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	461a      	mov	r2, r3
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	f002 faba 	bl	8009ebc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	429a      	cmp	r2, r3
 8007960:	d32b      	bcc.n	80079ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	609a      	str	r2, [r3, #8]
 800796a:	e026      	b.n	80079ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	68d8      	ldr	r0, [r3, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	461a      	mov	r2, r3
 8007976:	68b9      	ldr	r1, [r7, #8]
 8007978:	f002 faa0 	bl	8009ebc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	425b      	negs	r3, r3
 8007986:	441a      	add	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	429a      	cmp	r2, r3
 8007996:	d207      	bcs.n	80079a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	425b      	negs	r3, r3
 80079a2:	441a      	add	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d105      	bne.n	80079ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079c2:	697b      	ldr	r3, [r7, #20]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d018      	beq.n	8007a10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	441a      	add	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d303      	bcc.n	8007a00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68d9      	ldr	r1, [r3, #12]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6838      	ldr	r0, [r7, #0]
 8007a0c:	f002 fa56 	bl	8009ebc <memcpy>
	}
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a20:	f001 ff24 	bl	800986c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a2c:	e011      	b.n	8007a52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d012      	beq.n	8007a5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3324      	adds	r3, #36	; 0x24
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fe58 	bl	80086f0 <xTaskRemoveFromEventList>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a46:	f000 ff2f 	bl	80088a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dce9      	bgt.n	8007a2e <prvUnlockQueue+0x16>
 8007a5a:	e000      	b.n	8007a5e <prvUnlockQueue+0x46>
					break;
 8007a5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	22ff      	movs	r2, #255	; 0xff
 8007a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a66:	f001 ff31 	bl	80098cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a6a:	f001 feff 	bl	800986c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a76:	e011      	b.n	8007a9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d012      	beq.n	8007aa6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3310      	adds	r3, #16
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fe33 	bl	80086f0 <xTaskRemoveFromEventList>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a90:	f000 ff0a 	bl	80088a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dce9      	bgt.n	8007a78 <prvUnlockQueue+0x60>
 8007aa4:	e000      	b.n	8007aa8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007aa6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	22ff      	movs	r2, #255	; 0xff
 8007aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ab0:	f001 ff0c 	bl	80098cc <vPortExitCritical>
}
 8007ab4:	bf00      	nop
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ac4:	f001 fed2 	bl	800986c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d102      	bne.n	8007ad6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e001      	b.n	8007ada <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ada:	f001 fef7 	bl	80098cc <vPortExitCritical>

	return xReturn;
 8007ade:	68fb      	ldr	r3, [r7, #12]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007af0:	f001 febc 	bl	800986c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d102      	bne.n	8007b06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e001      	b.n	8007b0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b0a:	f001 fedf 	bl	80098cc <vPortExitCritical>

	return xReturn;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	e014      	b.n	8007b52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b28:	4a0e      	ldr	r2, [pc, #56]	; (8007b64 <vQueueAddToRegistry+0x4c>)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b34:	490b      	ldr	r1, [pc, #44]	; (8007b64 <vQueueAddToRegistry+0x4c>)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b3e:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <vQueueAddToRegistry+0x4c>)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	4413      	add	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b4a:	e006      	b.n	8007b5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b07      	cmp	r3, #7
 8007b56:	d9e7      	bls.n	8007b28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr
 8007b64:	2000164c 	.word	0x2000164c

08007b68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b78:	f001 fe78 	bl	800986c <vPortEnterCritical>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b82:	b25b      	sxtb	r3, r3
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b88:	d103      	bne.n	8007b92 <vQueueWaitForMessageRestricted+0x2a>
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b98:	b25b      	sxtb	r3, r3
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b9e:	d103      	bne.n	8007ba8 <vQueueWaitForMessageRestricted+0x40>
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ba8:	f001 fe90 	bl	80098cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d106      	bne.n	8007bc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	3324      	adds	r3, #36	; 0x24
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fd6b 	bl	8008698 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007bc2:	6978      	ldr	r0, [r7, #20]
 8007bc4:	f7ff ff28 	bl	8007a18 <prvUnlockQueue>
	}
 8007bc8:	bf00      	nop
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08e      	sub	sp, #56	; 0x38
 8007bd4:	af04      	add	r7, sp, #16
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10a      	bne.n	8007bfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	623b      	str	r3, [r7, #32]
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <xTaskCreateStatic+0x46>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	61fb      	str	r3, [r7, #28]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c16:	23c0      	movs	r3, #192	; 0xc0
 8007c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2bc0      	cmp	r3, #192	; 0xc0
 8007c1e:	d00a      	beq.n	8007c36 <xTaskCreateStatic+0x66>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	61bb      	str	r3, [r7, #24]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01e      	beq.n	8007c7a <xTaskCreateStatic+0xaa>
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d01b      	beq.n	8007c7a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c4a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c54:	2300      	movs	r3, #0
 8007c56:	9303      	str	r3, [sp, #12]
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	9302      	str	r3, [sp, #8]
 8007c5c:	f107 0314 	add.w	r3, r7, #20
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f851 	bl	8007d14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c74:	f000 f8f0 	bl	8007e58 <prvAddNewTaskToReadyList>
 8007c78:	e001      	b.n	8007c7e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c7e:	697b      	ldr	r3, [r7, #20]
	}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3728      	adds	r7, #40	; 0x28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08c      	sub	sp, #48	; 0x30
 8007c8c:	af04      	add	r7, sp, #16
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	4613      	mov	r3, r2
 8007c96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 fee5 	bl	8009a6c <pvPortMalloc>
 8007ca2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00e      	beq.n	8007cc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007caa:	20c0      	movs	r0, #192	; 0xc0
 8007cac:	f001 fede 	bl	8009a6c <pvPortMalloc>
 8007cb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8007cbe:	e005      	b.n	8007ccc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007cc0:	6978      	ldr	r0, [r7, #20]
 8007cc2:	f001 ff97 	bl	8009bf4 <vPortFree>
 8007cc6:	e001      	b.n	8007ccc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d017      	beq.n	8007d02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007cda:	88fa      	ldrh	r2, [r7, #6]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9303      	str	r3, [sp, #12]
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	9302      	str	r3, [sp, #8]
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f80f 	bl	8007d14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cf6:	69f8      	ldr	r0, [r7, #28]
 8007cf8:	f000 f8ae 	bl	8007e58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	e002      	b.n	8007d08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d08:	69bb      	ldr	r3, [r7, #24]
	}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3720      	adds	r7, #32
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	21a5      	movs	r1, #165	; 0xa5
 8007d2e:	f002 f8d3 	bl	8009ed8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	f023 0307 	bic.w	r3, r3, #7
 8007d4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	617b      	str	r3, [r7, #20]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61fb      	str	r3, [r7, #28]
 8007d70:	e012      	b.n	8007d98 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	4413      	add	r3, r2
 8007d78:	7819      	ldrb	r1, [r3, #0]
 8007d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	4413      	add	r3, r2
 8007d80:	3334      	adds	r3, #52	; 0x34
 8007d82:	460a      	mov	r2, r1
 8007d84:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d006      	beq.n	8007da0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	3301      	adds	r3, #1
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2b0f      	cmp	r3, #15
 8007d9c:	d9e9      	bls.n	8007d72 <prvInitialiseNewTask+0x5e>
 8007d9e:	e000      	b.n	8007da2 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007da0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dac:	2b37      	cmp	r3, #55	; 0x37
 8007dae:	d901      	bls.n	8007db4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007db0:	2337      	movs	r3, #55	; 0x37
 8007db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff f94d 	bl	800706a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	3318      	adds	r3, #24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff f948 	bl	800706a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	2200      	movs	r2, #0
 8007df4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	3358      	adds	r3, #88	; 0x58
 8007e0a:	2260      	movs	r2, #96	; 0x60
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f002 f862 	bl	8009ed8 <memset>
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	4a0d      	ldr	r2, [pc, #52]	; (8007e4c <prvInitialiseNewTask+0x138>)
 8007e18:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	4a0c      	ldr	r2, [pc, #48]	; (8007e50 <prvInitialiseNewTask+0x13c>)
 8007e1e:	661a      	str	r2, [r3, #96]	; 0x60
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	4a0c      	ldr	r2, [pc, #48]	; (8007e54 <prvInitialiseNewTask+0x140>)
 8007e24:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	68f9      	ldr	r1, [r7, #12]
 8007e2a:	69b8      	ldr	r0, [r7, #24]
 8007e2c:	f001 fc2e 	bl	800968c <pxPortInitialiseStack>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e42:	bf00      	nop
 8007e44:	3720      	adds	r7, #32
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	0800ac28 	.word	0x0800ac28
 8007e50:	0800ac48 	.word	0x0800ac48
 8007e54:	0800ac08 	.word	0x0800ac08

08007e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e60:	f001 fd04 	bl	800986c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e64:	4b2d      	ldr	r3, [pc, #180]	; (8007f1c <prvAddNewTaskToReadyList+0xc4>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	4a2c      	ldr	r2, [pc, #176]	; (8007f1c <prvAddNewTaskToReadyList+0xc4>)
 8007e6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e6e:	4b2c      	ldr	r3, [pc, #176]	; (8007f20 <prvAddNewTaskToReadyList+0xc8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d109      	bne.n	8007e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e76:	4a2a      	ldr	r2, [pc, #168]	; (8007f20 <prvAddNewTaskToReadyList+0xc8>)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e7c:	4b27      	ldr	r3, [pc, #156]	; (8007f1c <prvAddNewTaskToReadyList+0xc4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d110      	bne.n	8007ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e84:	f000 fd34 	bl	80088f0 <prvInitialiseTaskLists>
 8007e88:	e00d      	b.n	8007ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e8a:	4b26      	ldr	r3, [pc, #152]	; (8007f24 <prvAddNewTaskToReadyList+0xcc>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e92:	4b23      	ldr	r3, [pc, #140]	; (8007f20 <prvAddNewTaskToReadyList+0xc8>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d802      	bhi.n	8007ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ea0:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <prvAddNewTaskToReadyList+0xc8>)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ea6:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <prvAddNewTaskToReadyList+0xd0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	4a1e      	ldr	r2, [pc, #120]	; (8007f28 <prvAddNewTaskToReadyList+0xd0>)
 8007eae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007eb0:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <prvAddNewTaskToReadyList+0xd0>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebc:	4b1b      	ldr	r3, [pc, #108]	; (8007f2c <prvAddNewTaskToReadyList+0xd4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d903      	bls.n	8007ecc <prvAddNewTaskToReadyList+0x74>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	4a18      	ldr	r2, [pc, #96]	; (8007f2c <prvAddNewTaskToReadyList+0xd4>)
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <prvAddNewTaskToReadyList+0xd8>)
 8007eda:	441a      	add	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	f7ff f8cd 	bl	8007082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ee8:	f001 fcf0 	bl	80098cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007eec:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <prvAddNewTaskToReadyList+0xcc>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00e      	beq.n	8007f12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <prvAddNewTaskToReadyList+0xc8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d207      	bcs.n	8007f12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <prvAddNewTaskToReadyList+0xdc>)
 8007f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20001b60 	.word	0x20001b60
 8007f20:	2000168c 	.word	0x2000168c
 8007f24:	20001b6c 	.word	0x20001b6c
 8007f28:	20001b7c 	.word	0x20001b7c
 8007f2c:	20001b68 	.word	0x20001b68
 8007f30:	20001690 	.word	0x20001690
 8007f34:	e000ed04 	.word	0xe000ed04

08007f38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d017      	beq.n	8007f7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f4a:	4b13      	ldr	r3, [pc, #76]	; (8007f98 <vTaskDelay+0x60>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <vTaskDelay+0x30>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	60bb      	str	r3, [r7, #8]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f68:	f000 f8e8 	bl	800813c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 f826 	bl	8008fc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f74:	f000 f8f0 	bl	8008158 <xTaskResumeAll>
 8007f78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d107      	bne.n	8007f90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f80:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <vTaskDelay+0x64>)
 8007f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20001b88 	.word	0x20001b88
 8007f9c:	e000ed04 	.word	0xe000ed04

08007fa0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10a      	bne.n	8007fc8 <eTaskGetState+0x28>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	60bb      	str	r3, [r7, #8]
}
 8007fc4:	bf00      	nop
 8007fc6:	e7fe      	b.n	8007fc6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007fc8:	4b1d      	ldr	r3, [pc, #116]	; (8008040 <eTaskGetState+0xa0>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d102      	bne.n	8007fd8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]
 8007fd6:	e02d      	b.n	8008034 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 8007fd8:	f001 fc48 	bl	800986c <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007fe2:	f001 fc73 	bl	80098cc <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8007fe6:	4b17      	ldr	r3, [pc, #92]	; (8008044 <eTaskGetState+0xa4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d004      	beq.n	8007ffa <eTaskGetState+0x5a>
 8007ff0:	4b15      	ldr	r3, [pc, #84]	; (8008048 <eTaskGetState+0xa8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d102      	bne.n	8008000 <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	75fb      	strb	r3, [r7, #23]
 8007ffe:	e019      	b.n	8008034 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a12      	ldr	r2, [pc, #72]	; (800804c <eTaskGetState+0xac>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d109      	bne.n	800801c <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 8008010:	2303      	movs	r3, #3
 8008012:	75fb      	strb	r3, [r7, #23]
 8008014:	e00e      	b.n	8008034 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 8008016:	2302      	movs	r3, #2
 8008018:	75fb      	strb	r3, [r7, #23]
 800801a:	e00b      	b.n	8008034 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a0c      	ldr	r2, [pc, #48]	; (8008050 <eTaskGetState+0xb0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d002      	beq.n	800802a <eTaskGetState+0x8a>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800802a:	2304      	movs	r3, #4
 800802c:	75fb      	strb	r3, [r7, #23]
 800802e:	e001      	b.n	8008034 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	2000168c 	.word	0x2000168c
 8008044:	20001b18 	.word	0x20001b18
 8008048:	20001b1c 	.word	0x20001b1c
 800804c:	20001b4c 	.word	0x20001b4c
 8008050:	20001b34 	.word	0x20001b34

08008054 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08a      	sub	sp, #40	; 0x28
 8008058:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008062:	463a      	mov	r2, r7
 8008064:	1d39      	adds	r1, r7, #4
 8008066:	f107 0308 	add.w	r3, r7, #8
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe ffac 	bl	8006fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	9202      	str	r2, [sp, #8]
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	2300      	movs	r3, #0
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	2300      	movs	r3, #0
 8008080:	460a      	mov	r2, r1
 8008082:	4925      	ldr	r1, [pc, #148]	; (8008118 <vTaskStartScheduler+0xc4>)
 8008084:	4825      	ldr	r0, [pc, #148]	; (800811c <vTaskStartScheduler+0xc8>)
 8008086:	f7ff fda3 	bl	8007bd0 <xTaskCreateStatic>
 800808a:	4603      	mov	r3, r0
 800808c:	4a24      	ldr	r2, [pc, #144]	; (8008120 <vTaskStartScheduler+0xcc>)
 800808e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008090:	4b23      	ldr	r3, [pc, #140]	; (8008120 <vTaskStartScheduler+0xcc>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008098:	2301      	movs	r3, #1
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	e001      	b.n	80080a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800809e:	2300      	movs	r3, #0
 80080a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d102      	bne.n	80080ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080a8:	f000 ffde 	bl	8009068 <xTimerCreateTimerTask>
 80080ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d11e      	bne.n	80080f2 <vTaskStartScheduler+0x9e>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	613b      	str	r3, [r7, #16]
}
 80080c6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080c8:	4b16      	ldr	r3, [pc, #88]	; (8008124 <vTaskStartScheduler+0xd0>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3358      	adds	r3, #88	; 0x58
 80080ce:	4a16      	ldr	r2, [pc, #88]	; (8008128 <vTaskStartScheduler+0xd4>)
 80080d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080d2:	4b16      	ldr	r3, [pc, #88]	; (800812c <vTaskStartScheduler+0xd8>)
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080da:	4b15      	ldr	r3, [pc, #84]	; (8008130 <vTaskStartScheduler+0xdc>)
 80080dc:	2201      	movs	r2, #1
 80080de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80080e0:	4b14      	ldr	r3, [pc, #80]	; (8008134 <vTaskStartScheduler+0xe0>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <vTaskStartScheduler+0xe4>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080ec:	f001 fb4c 	bl	8009788 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080f0:	e00e      	b.n	8008110 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f8:	d10a      	bne.n	8008110 <vTaskStartScheduler+0xbc>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	60fb      	str	r3, [r7, #12]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <vTaskStartScheduler+0xba>
}
 8008110:	bf00      	nop
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	0800aa9c 	.word	0x0800aa9c
 800811c:	080088c1 	.word	0x080088c1
 8008120:	20001b84 	.word	0x20001b84
 8008124:	2000168c 	.word	0x2000168c
 8008128:	20000014 	.word	0x20000014
 800812c:	20001b80 	.word	0x20001b80
 8008130:	20001b6c 	.word	0x20001b6c
 8008134:	20001b64 	.word	0x20001b64
 8008138:	20000098 	.word	0x20000098

0800813c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <vTaskSuspendAll+0x18>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3301      	adds	r3, #1
 8008146:	4a03      	ldr	r2, [pc, #12]	; (8008154 <vTaskSuspendAll+0x18>)
 8008148:	6013      	str	r3, [r2, #0]
}
 800814a:	bf00      	nop
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20001b88 	.word	0x20001b88

08008158 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008162:	2300      	movs	r3, #0
 8008164:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008166:	4b42      	ldr	r3, [pc, #264]	; (8008270 <xTaskResumeAll+0x118>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10a      	bne.n	8008184 <xTaskResumeAll+0x2c>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	603b      	str	r3, [r7, #0]
}
 8008180:	bf00      	nop
 8008182:	e7fe      	b.n	8008182 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008184:	f001 fb72 	bl	800986c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008188:	4b39      	ldr	r3, [pc, #228]	; (8008270 <xTaskResumeAll+0x118>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3b01      	subs	r3, #1
 800818e:	4a38      	ldr	r2, [pc, #224]	; (8008270 <xTaskResumeAll+0x118>)
 8008190:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008192:	4b37      	ldr	r3, [pc, #220]	; (8008270 <xTaskResumeAll+0x118>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d162      	bne.n	8008260 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800819a:	4b36      	ldr	r3, [pc, #216]	; (8008274 <xTaskResumeAll+0x11c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d05e      	beq.n	8008260 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081a2:	e02f      	b.n	8008204 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80081a4:	4b34      	ldr	r3, [pc, #208]	; (8008278 <xTaskResumeAll+0x120>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3318      	adds	r3, #24
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe ffc1 	bl	8007138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe ffbc 	bl	8007138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	4b2d      	ldr	r3, [pc, #180]	; (800827c <xTaskResumeAll+0x124>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d903      	bls.n	80081d4 <xTaskResumeAll+0x7c>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	4a2a      	ldr	r2, [pc, #168]	; (800827c <xTaskResumeAll+0x124>)
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4a27      	ldr	r2, [pc, #156]	; (8008280 <xTaskResumeAll+0x128>)
 80081e2:	441a      	add	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4610      	mov	r0, r2
 80081ec:	f7fe ff49 	bl	8007082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f4:	4b23      	ldr	r3, [pc, #140]	; (8008284 <xTaskResumeAll+0x12c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d302      	bcc.n	8008204 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80081fe:	4b22      	ldr	r3, [pc, #136]	; (8008288 <xTaskResumeAll+0x130>)
 8008200:	2201      	movs	r2, #1
 8008202:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008204:	4b1c      	ldr	r3, [pc, #112]	; (8008278 <xTaskResumeAll+0x120>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1cb      	bne.n	80081a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008212:	f000 fce3 	bl	8008bdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008216:	4b1d      	ldr	r3, [pc, #116]	; (800828c <xTaskResumeAll+0x134>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d010      	beq.n	8008244 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008222:	f000 f8d5 	bl	80083d0 <xTaskIncrementTick>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800822c:	4b16      	ldr	r3, [pc, #88]	; (8008288 <xTaskResumeAll+0x130>)
 800822e:	2201      	movs	r2, #1
 8008230:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3b01      	subs	r3, #1
 8008236:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1f1      	bne.n	8008222 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800823e:	4b13      	ldr	r3, [pc, #76]	; (800828c <xTaskResumeAll+0x134>)
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008244:	4b10      	ldr	r3, [pc, #64]	; (8008288 <xTaskResumeAll+0x130>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d009      	beq.n	8008260 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008250:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <xTaskResumeAll+0x138>)
 8008252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008260:	f001 fb34 	bl	80098cc <vPortExitCritical>

	return xAlreadyYielded;
 8008264:	68bb      	ldr	r3, [r7, #8]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20001b88 	.word	0x20001b88
 8008274:	20001b60 	.word	0x20001b60
 8008278:	20001b20 	.word	0x20001b20
 800827c:	20001b68 	.word	0x20001b68
 8008280:	20001690 	.word	0x20001690
 8008284:	2000168c 	.word	0x2000168c
 8008288:	20001b74 	.word	0x20001b74
 800828c:	20001b70 	.word	0x20001b70
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800829a:	4b04      	ldr	r3, [pc, #16]	; (80082ac <xTaskGetTickCount+0x18>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082a0:	687b      	ldr	r3, [r7, #4]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr
 80082ac:	20001b64 	.word	0x20001b64

080082b0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	2338      	movs	r3, #56	; 0x38
 80082c2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80082c4:	f7ff ff3a 	bl	800813c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80082c8:	4b3a      	ldr	r3, [pc, #232]	; (80083b4 <uxTaskGetSystemState+0x104>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d369      	bcc.n	80083a6 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4613      	mov	r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	461a      	mov	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	1898      	adds	r0, r3, r2
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a31      	ldr	r2, [pc, #196]	; (80083b8 <uxTaskGetSystemState+0x108>)
 80082f4:	4413      	add	r3, r2
 80082f6:	2201      	movs	r2, #1
 80082f8:	4619      	mov	r1, r3
 80082fa:	f000 fbcd 	bl	8008a98 <prvListTasksWithinSingleList>
 80082fe:	4602      	mov	r2, r0
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	4413      	add	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e2      	bne.n	80082d2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4613      	mov	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	461a      	mov	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	4a27      	ldr	r2, [pc, #156]	; (80083bc <uxTaskGetSystemState+0x10c>)
 800831e:	6811      	ldr	r1, [r2, #0]
 8008320:	2202      	movs	r2, #2
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fbb8 	bl	8008a98 <prvListTasksWithinSingleList>
 8008328:	4602      	mov	r2, r0
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	4413      	add	r3, r2
 800832e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4613      	mov	r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	461a      	mov	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	4a1f      	ldr	r2, [pc, #124]	; (80083c0 <uxTaskGetSystemState+0x110>)
 8008342:	6811      	ldr	r1, [r2, #0]
 8008344:	2202      	movs	r2, #2
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fba6 	bl	8008a98 <prvListTasksWithinSingleList>
 800834c:	4602      	mov	r2, r0
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	4413      	add	r3, r2
 8008352:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	4613      	mov	r3, r2
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	4413      	add	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	461a      	mov	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	2204      	movs	r2, #4
 8008366:	4917      	ldr	r1, [pc, #92]	; (80083c4 <uxTaskGetSystemState+0x114>)
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fb95 	bl	8008a98 <prvListTasksWithinSingleList>
 800836e:	4602      	mov	r2, r0
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	4413      	add	r3, r2
 8008374:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	4613      	mov	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	461a      	mov	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	2203      	movs	r2, #3
 8008388:	490f      	ldr	r1, [pc, #60]	; (80083c8 <uxTaskGetSystemState+0x118>)
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fb84 	bl	8008a98 <prvListTasksWithinSingleList>
 8008390:	4602      	mov	r2, r0
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	4413      	add	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800839e:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <uxTaskGetSystemState+0x11c>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80083a6:	f7ff fed7 	bl	8008158 <xTaskResumeAll>

		return uxTask;
 80083aa:	697b      	ldr	r3, [r7, #20]
	}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20001b60 	.word	0x20001b60
 80083b8:	20001690 	.word	0x20001690
 80083bc:	20001b18 	.word	0x20001b18
 80083c0:	20001b1c 	.word	0x20001b1c
 80083c4:	20001b34 	.word	0x20001b34
 80083c8:	20001b4c 	.word	0x20001b4c
 80083cc:	20000098 	.word	0x20000098

080083d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083da:	4b51      	ldr	r3, [pc, #324]	; (8008520 <xTaskIncrementTick+0x150>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f040 808e 	bne.w	8008500 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083e4:	4b4f      	ldr	r3, [pc, #316]	; (8008524 <xTaskIncrementTick+0x154>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3301      	adds	r3, #1
 80083ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083ec:	4a4d      	ldr	r2, [pc, #308]	; (8008524 <xTaskIncrementTick+0x154>)
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d120      	bne.n	800843a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083f8:	4b4b      	ldr	r3, [pc, #300]	; (8008528 <xTaskIncrementTick+0x158>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <xTaskIncrementTick+0x48>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	603b      	str	r3, [r7, #0]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <xTaskIncrementTick+0x46>
 8008418:	4b43      	ldr	r3, [pc, #268]	; (8008528 <xTaskIncrementTick+0x158>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	4b43      	ldr	r3, [pc, #268]	; (800852c <xTaskIncrementTick+0x15c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a41      	ldr	r2, [pc, #260]	; (8008528 <xTaskIncrementTick+0x158>)
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	4a41      	ldr	r2, [pc, #260]	; (800852c <xTaskIncrementTick+0x15c>)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	4b40      	ldr	r3, [pc, #256]	; (8008530 <xTaskIncrementTick+0x160>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3301      	adds	r3, #1
 8008432:	4a3f      	ldr	r2, [pc, #252]	; (8008530 <xTaskIncrementTick+0x160>)
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	f000 fbd1 	bl	8008bdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800843a:	4b3e      	ldr	r3, [pc, #248]	; (8008534 <xTaskIncrementTick+0x164>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	429a      	cmp	r2, r3
 8008442:	d34e      	bcc.n	80084e2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008444:	4b38      	ldr	r3, [pc, #224]	; (8008528 <xTaskIncrementTick+0x158>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <xTaskIncrementTick+0x82>
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <xTaskIncrementTick+0x84>
 8008452:	2300      	movs	r3, #0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008458:	4b36      	ldr	r3, [pc, #216]	; (8008534 <xTaskIncrementTick+0x164>)
 800845a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800845e:	601a      	str	r2, [r3, #0]
					break;
 8008460:	e03f      	b.n	80084e2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008462:	4b31      	ldr	r3, [pc, #196]	; (8008528 <xTaskIncrementTick+0x158>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	429a      	cmp	r2, r3
 8008478:	d203      	bcs.n	8008482 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800847a:	4a2e      	ldr	r2, [pc, #184]	; (8008534 <xTaskIncrementTick+0x164>)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6013      	str	r3, [r2, #0]
						break;
 8008480:	e02f      	b.n	80084e2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	3304      	adds	r3, #4
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fe56 	bl	8007138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	2b00      	cmp	r3, #0
 8008492:	d004      	beq.n	800849e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	3318      	adds	r3, #24
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe fe4d 	bl	8007138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a2:	4b25      	ldr	r3, [pc, #148]	; (8008538 <xTaskIncrementTick+0x168>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d903      	bls.n	80084b2 <xTaskIncrementTick+0xe2>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	4a22      	ldr	r2, [pc, #136]	; (8008538 <xTaskIncrementTick+0x168>)
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4a1f      	ldr	r2, [pc, #124]	; (800853c <xTaskIncrementTick+0x16c>)
 80084c0:	441a      	add	r2, r3
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f7fe fdda 	bl	8007082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d2:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <xTaskIncrementTick+0x170>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	429a      	cmp	r2, r3
 80084da:	d3b3      	bcc.n	8008444 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084dc:	2301      	movs	r3, #1
 80084de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e0:	e7b0      	b.n	8008444 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084e2:	4b17      	ldr	r3, [pc, #92]	; (8008540 <xTaskIncrementTick+0x170>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4914      	ldr	r1, [pc, #80]	; (800853c <xTaskIncrementTick+0x16c>)
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	440b      	add	r3, r1
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d907      	bls.n	800850a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084fa:	2301      	movs	r3, #1
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	e004      	b.n	800850a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008500:	4b10      	ldr	r3, [pc, #64]	; (8008544 <xTaskIncrementTick+0x174>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	4a0f      	ldr	r2, [pc, #60]	; (8008544 <xTaskIncrementTick+0x174>)
 8008508:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <xTaskIncrementTick+0x178>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008512:	2301      	movs	r3, #1
 8008514:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008516:	697b      	ldr	r3, [r7, #20]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20001b88 	.word	0x20001b88
 8008524:	20001b64 	.word	0x20001b64
 8008528:	20001b18 	.word	0x20001b18
 800852c:	20001b1c 	.word	0x20001b1c
 8008530:	20001b78 	.word	0x20001b78
 8008534:	20001b80 	.word	0x20001b80
 8008538:	20001b68 	.word	0x20001b68
 800853c:	20001690 	.word	0x20001690
 8008540:	2000168c 	.word	0x2000168c
 8008544:	20001b70 	.word	0x20001b70
 8008548:	20001b74 	.word	0x20001b74

0800854c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008552:	4b36      	ldr	r3, [pc, #216]	; (800862c <vTaskSwitchContext+0xe0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800855a:	4b35      	ldr	r3, [pc, #212]	; (8008630 <vTaskSwitchContext+0xe4>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008560:	e05e      	b.n	8008620 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8008562:	4b33      	ldr	r3, [pc, #204]	; (8008630 <vTaskSwitchContext+0xe4>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008568:	4b32      	ldr	r3, [pc, #200]	; (8008634 <vTaskSwitchContext+0xe8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a32      	ldr	r2, [pc, #200]	; (8008638 <vTaskSwitchContext+0xec>)
 800856e:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008570:	4b31      	ldr	r3, [pc, #196]	; (8008638 <vTaskSwitchContext+0xec>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	4b31      	ldr	r3, [pc, #196]	; (800863c <vTaskSwitchContext+0xf0>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	d909      	bls.n	8008590 <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800857c:	4b30      	ldr	r3, [pc, #192]	; (8008640 <vTaskSwitchContext+0xf4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008582:	4a2d      	ldr	r2, [pc, #180]	; (8008638 <vTaskSwitchContext+0xec>)
 8008584:	6810      	ldr	r0, [r2, #0]
 8008586:	4a2d      	ldr	r2, [pc, #180]	; (800863c <vTaskSwitchContext+0xf0>)
 8008588:	6812      	ldr	r2, [r2, #0]
 800858a:	1a82      	subs	r2, r0, r2
 800858c:	440a      	add	r2, r1
 800858e:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8008590:	4b29      	ldr	r3, [pc, #164]	; (8008638 <vTaskSwitchContext+0xec>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a29      	ldr	r2, [pc, #164]	; (800863c <vTaskSwitchContext+0xf0>)
 8008596:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008598:	4b2a      	ldr	r3, [pc, #168]	; (8008644 <vTaskSwitchContext+0xf8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	e010      	b.n	80085c2 <vTaskSwitchContext+0x76>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10a      	bne.n	80085bc <vTaskSwitchContext+0x70>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	607b      	str	r3, [r7, #4]
}
 80085b8:	bf00      	nop
 80085ba:	e7fe      	b.n	80085ba <vTaskSwitchContext+0x6e>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3b01      	subs	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	4921      	ldr	r1, [pc, #132]	; (8008648 <vTaskSwitchContext+0xfc>)
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	440b      	add	r3, r1
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0e4      	beq.n	80085a0 <vTaskSwitchContext+0x54>
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4a19      	ldr	r2, [pc, #100]	; (8008648 <vTaskSwitchContext+0xfc>)
 80085e2:	4413      	add	r3, r2
 80085e4:	60bb      	str	r3, [r7, #8]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	605a      	str	r2, [r3, #4]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	3308      	adds	r3, #8
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d104      	bne.n	8008606 <vTaskSwitchContext+0xba>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	605a      	str	r2, [r3, #4]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	4a0c      	ldr	r2, [pc, #48]	; (8008640 <vTaskSwitchContext+0xf4>)
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	4a0c      	ldr	r2, [pc, #48]	; (8008644 <vTaskSwitchContext+0xf8>)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008616:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <vTaskSwitchContext+0xf4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3358      	adds	r3, #88	; 0x58
 800861c:	4a0b      	ldr	r2, [pc, #44]	; (800864c <vTaskSwitchContext+0x100>)
 800861e:	6013      	str	r3, [r2, #0]
}
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20001b88 	.word	0x20001b88
 8008630:	20001b74 	.word	0x20001b74
 8008634:	20000098 	.word	0x20000098
 8008638:	20001b90 	.word	0x20001b90
 800863c:	20001b8c 	.word	0x20001b8c
 8008640:	2000168c 	.word	0x2000168c
 8008644:	20001b68 	.word	0x20001b68
 8008648:	20001690 	.word	0x20001690
 800864c:	20000014 	.word	0x20000014

08008650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	60fb      	str	r3, [r7, #12]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008676:	4b07      	ldr	r3, [pc, #28]	; (8008694 <vTaskPlaceOnEventList+0x44>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3318      	adds	r3, #24
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fe fd22 	bl	80070c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008684:	2101      	movs	r1, #1
 8008686:	6838      	ldr	r0, [r7, #0]
 8008688:	f000 fc9a 	bl	8008fc0 <prvAddCurrentTaskToDelayedList>
}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	2000168c 	.word	0x2000168c

08008698 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	617b      	str	r3, [r7, #20]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <vTaskPlaceOnEventListRestricted+0x54>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3318      	adds	r3, #24
 80086c6:	4619      	mov	r1, r3
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7fe fcda 	bl	8007082 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80086d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	68b8      	ldr	r0, [r7, #8]
 80086de:	f000 fc6f 	bl	8008fc0 <prvAddCurrentTaskToDelayedList>
	}
 80086e2:	bf00      	nop
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	2000168c 	.word	0x2000168c

080086f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	60fb      	str	r3, [r7, #12]
}
 8008718:	bf00      	nop
 800871a:	e7fe      	b.n	800871a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	3318      	adds	r3, #24
 8008720:	4618      	mov	r0, r3
 8008722:	f7fe fd09 	bl	8007138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008726:	4b1e      	ldr	r3, [pc, #120]	; (80087a0 <xTaskRemoveFromEventList+0xb0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d11d      	bne.n	800876a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3304      	adds	r3, #4
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fd00 	bl	8007138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873c:	4b19      	ldr	r3, [pc, #100]	; (80087a4 <xTaskRemoveFromEventList+0xb4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	429a      	cmp	r2, r3
 8008742:	d903      	bls.n	800874c <xTaskRemoveFromEventList+0x5c>
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	4a16      	ldr	r2, [pc, #88]	; (80087a4 <xTaskRemoveFromEventList+0xb4>)
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4a13      	ldr	r2, [pc, #76]	; (80087a8 <xTaskRemoveFromEventList+0xb8>)
 800875a:	441a      	add	r2, r3
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	3304      	adds	r3, #4
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f7fe fc8d 	bl	8007082 <vListInsertEnd>
 8008768:	e005      	b.n	8008776 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3318      	adds	r3, #24
 800876e:	4619      	mov	r1, r3
 8008770:	480e      	ldr	r0, [pc, #56]	; (80087ac <xTaskRemoveFromEventList+0xbc>)
 8008772:	f7fe fc86 	bl	8007082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <xTaskRemoveFromEventList+0xc0>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	429a      	cmp	r2, r3
 8008782:	d905      	bls.n	8008790 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008784:	2301      	movs	r3, #1
 8008786:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008788:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <xTaskRemoveFromEventList+0xc4>)
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	e001      	b.n	8008794 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008790:	2300      	movs	r3, #0
 8008792:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008794:	697b      	ldr	r3, [r7, #20]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20001b88 	.word	0x20001b88
 80087a4:	20001b68 	.word	0x20001b68
 80087a8:	20001690 	.word	0x20001690
 80087ac:	20001b20 	.word	0x20001b20
 80087b0:	2000168c 	.word	0x2000168c
 80087b4:	20001b74 	.word	0x20001b74

080087b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <vTaskInternalSetTimeOutState+0x24>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087c8:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <vTaskInternalSetTimeOutState+0x28>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	605a      	str	r2, [r3, #4]
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20001b78 	.word	0x20001b78
 80087e0:	20001b64 	.word	0x20001b64

080087e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	613b      	str	r3, [r7, #16]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	60fb      	str	r3, [r7, #12]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008826:	f001 f821 	bl	800986c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800882a:	4b1d      	ldr	r3, [pc, #116]	; (80088a0 <xTaskCheckForTimeOut+0xbc>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008842:	d102      	bne.n	800884a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008844:	2300      	movs	r3, #0
 8008846:	61fb      	str	r3, [r7, #28]
 8008848:	e023      	b.n	8008892 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <xTaskCheckForTimeOut+0xc0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d007      	beq.n	8008866 <xTaskCheckForTimeOut+0x82>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	429a      	cmp	r2, r3
 800885e:	d302      	bcc.n	8008866 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008860:	2301      	movs	r3, #1
 8008862:	61fb      	str	r3, [r7, #28]
 8008864:	e015      	b.n	8008892 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	429a      	cmp	r2, r3
 800886e:	d20b      	bcs.n	8008888 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	1ad2      	subs	r2, r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff ff9b 	bl	80087b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	61fb      	str	r3, [r7, #28]
 8008886:	e004      	b.n	8008892 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2200      	movs	r2, #0
 800888c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800888e:	2301      	movs	r3, #1
 8008890:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008892:	f001 f81b 	bl	80098cc <vPortExitCritical>

	return xReturn;
 8008896:	69fb      	ldr	r3, [r7, #28]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20001b64 	.word	0x20001b64
 80088a4:	20001b78 	.word	0x20001b78

080088a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088ac:	4b03      	ldr	r3, [pc, #12]	; (80088bc <vTaskMissedYield+0x14>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
}
 80088b2:	bf00      	nop
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bc80      	pop	{r7}
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20001b74 	.word	0x20001b74

080088c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088c8:	f000 f852 	bl	8008970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088cc:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <prvIdleTask+0x28>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d9f9      	bls.n	80088c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <prvIdleTask+0x2c>)
 80088d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088e4:	e7f0      	b.n	80088c8 <prvIdleTask+0x8>
 80088e6:	bf00      	nop
 80088e8:	20001690 	.word	0x20001690
 80088ec:	e000ed04 	.word	0xe000ed04

080088f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088f6:	2300      	movs	r3, #0
 80088f8:	607b      	str	r3, [r7, #4]
 80088fa:	e00c      	b.n	8008916 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4a12      	ldr	r2, [pc, #72]	; (8008950 <prvInitialiseTaskLists+0x60>)
 8008908:	4413      	add	r3, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fb8e 	bl	800702c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3301      	adds	r3, #1
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b37      	cmp	r3, #55	; 0x37
 800891a:	d9ef      	bls.n	80088fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800891c:	480d      	ldr	r0, [pc, #52]	; (8008954 <prvInitialiseTaskLists+0x64>)
 800891e:	f7fe fb85 	bl	800702c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008922:	480d      	ldr	r0, [pc, #52]	; (8008958 <prvInitialiseTaskLists+0x68>)
 8008924:	f7fe fb82 	bl	800702c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008928:	480c      	ldr	r0, [pc, #48]	; (800895c <prvInitialiseTaskLists+0x6c>)
 800892a:	f7fe fb7f 	bl	800702c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800892e:	480c      	ldr	r0, [pc, #48]	; (8008960 <prvInitialiseTaskLists+0x70>)
 8008930:	f7fe fb7c 	bl	800702c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008934:	480b      	ldr	r0, [pc, #44]	; (8008964 <prvInitialiseTaskLists+0x74>)
 8008936:	f7fe fb79 	bl	800702c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800893a:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <prvInitialiseTaskLists+0x78>)
 800893c:	4a05      	ldr	r2, [pc, #20]	; (8008954 <prvInitialiseTaskLists+0x64>)
 800893e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008940:	4b0a      	ldr	r3, [pc, #40]	; (800896c <prvInitialiseTaskLists+0x7c>)
 8008942:	4a05      	ldr	r2, [pc, #20]	; (8008958 <prvInitialiseTaskLists+0x68>)
 8008944:	601a      	str	r2, [r3, #0]
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20001690 	.word	0x20001690
 8008954:	20001af0 	.word	0x20001af0
 8008958:	20001b04 	.word	0x20001b04
 800895c:	20001b20 	.word	0x20001b20
 8008960:	20001b34 	.word	0x20001b34
 8008964:	20001b4c 	.word	0x20001b4c
 8008968:	20001b18 	.word	0x20001b18
 800896c:	20001b1c 	.word	0x20001b1c

08008970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008976:	e019      	b.n	80089ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008978:	f000 ff78 	bl	800986c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800897c:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <prvCheckTasksWaitingTermination+0x50>)
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3304      	adds	r3, #4
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe fbd5 	bl	8007138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800898e:	4b0d      	ldr	r3, [pc, #52]	; (80089c4 <prvCheckTasksWaitingTermination+0x54>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3b01      	subs	r3, #1
 8008994:	4a0b      	ldr	r2, [pc, #44]	; (80089c4 <prvCheckTasksWaitingTermination+0x54>)
 8008996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008998:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <prvCheckTasksWaitingTermination+0x58>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3b01      	subs	r3, #1
 800899e:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <prvCheckTasksWaitingTermination+0x58>)
 80089a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089a2:	f000 ff93 	bl	80098cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f8e3 	bl	8008b72 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089ac:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <prvCheckTasksWaitingTermination+0x58>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e1      	bne.n	8008978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20001b34 	.word	0x20001b34
 80089c4:	20001b60 	.word	0x20001b60
 80089c8:	20001b48 	.word	0x20001b48

080089cc <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d102      	bne.n	80089e6 <vTaskGetInfo+0x1a>
 80089e0:	4b2c      	ldr	r3, [pc, #176]	; (8008a94 <vTaskGetInfo+0xc8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	e000      	b.n	80089e8 <vTaskGetInfo+0x1c>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d01a      	beq.n	8008a5e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8008a28:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <vTaskGetInfo+0xc8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d103      	bne.n	8008a3a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	731a      	strb	r2, [r3, #12]
 8008a38:	e018      	b.n	8008a6c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d112      	bne.n	8008a6c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8008a46:	f7ff fb79 	bl	800813c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2202      	movs	r2, #2
 8008a56:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8008a58:	f7ff fb7e 	bl	8008158 <xTaskResumeAll>
 8008a5c:	e006      	b.n	8008a6c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8008a5e:	6978      	ldr	r0, [r7, #20]
 8008a60:	f7ff fa9e 	bl	8007fa0 <eTaskGetState>
 8008a64:	4603      	mov	r3, r0
 8008a66:	461a      	mov	r2, r3
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d009      	beq.n	8008a86 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f860 	bl	8008b3c <prvTaskCheckFreeStackSpace>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	461a      	mov	r2, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8008a84:	e002      	b.n	8008a8c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	841a      	strh	r2, [r3, #32]
	}
 8008a8c:	bf00      	nop
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	2000168c 	.word	0x2000168c

08008a98 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	; 0x28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d03f      	beq.n	8008b32 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	623b      	str	r3, [r7, #32]
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	605a      	str	r2, [r3, #4]
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d104      	bne.n	8008ad6 <prvListTasksWithinSingleList+0x3e>
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	605a      	str	r2, [r3, #4]
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	61bb      	str	r3, [r7, #24]
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	605a      	str	r2, [r3, #4]
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	3308      	adds	r3, #8
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d104      	bne.n	8008b02 <prvListTasksWithinSingleList+0x6a>
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8008b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	461a      	mov	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	1899      	adds	r1, r3, r2
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	6978      	ldr	r0, [r7, #20]
 8008b20:	f7ff ff54 	bl	80089cc <vTaskGetInfo>
				uxTask++;
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	3301      	adds	r3, #1
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d1d5      	bne.n	8008ade <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3728      	adds	r7, #40	; 0x28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008b48:	e005      	b.n	8008b56 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3301      	adds	r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2ba5      	cmp	r3, #165	; 0xa5
 8008b5c:	d0f5      	beq.n	8008b4a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	089b      	lsrs	r3, r3, #2
 8008b62:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	b29b      	uxth	r3, r3
	}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr

08008b72 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3358      	adds	r3, #88	; 0x58
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 fa54 	bl	800a02c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d108      	bne.n	8008ba0 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	4618      	mov	r0, r3
 8008b94:	f001 f82e 	bl	8009bf4 <vPortFree>
				vPortFree( pxTCB );
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 f82b 	bl	8009bf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b9e:	e018      	b.n	8008bd2 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d103      	bne.n	8008bb2 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 f822 	bl	8009bf4 <vPortFree>
	}
 8008bb0:	e00f      	b.n	8008bd2 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d00a      	beq.n	8008bd2 <prvDeleteTCB+0x60>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	60fb      	str	r3, [r7, #12]
}
 8008bce:	bf00      	nop
 8008bd0:	e7fe      	b.n	8008bd0 <prvDeleteTCB+0x5e>
	}
 8008bd2:	bf00      	nop
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008be2:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <prvResetNextTaskUnblockTime+0x40>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <prvResetNextTaskUnblockTime+0x14>
 8008bec:	2301      	movs	r3, #1
 8008bee:	e000      	b.n	8008bf2 <prvResetNextTaskUnblockTime+0x16>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d004      	beq.n	8008c00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bf6:	4b0a      	ldr	r3, [pc, #40]	; (8008c20 <prvResetNextTaskUnblockTime+0x44>)
 8008bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bfc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bfe:	e008      	b.n	8008c12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <prvResetNextTaskUnblockTime+0x40>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	4a04      	ldr	r2, [pc, #16]	; (8008c20 <prvResetNextTaskUnblockTime+0x44>)
 8008c10:	6013      	str	r3, [r2, #0]
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bc80      	pop	{r7}
 8008c1a:	4770      	bx	lr
 8008c1c:	20001b18 	.word	0x20001b18
 8008c20:	20001b80 	.word	0x20001b80

08008c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c2a:	4b0b      	ldr	r3, [pc, #44]	; (8008c58 <xTaskGetSchedulerState+0x34>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c32:	2301      	movs	r3, #1
 8008c34:	607b      	str	r3, [r7, #4]
 8008c36:	e008      	b.n	8008c4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c38:	4b08      	ldr	r3, [pc, #32]	; (8008c5c <xTaskGetSchedulerState+0x38>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d102      	bne.n	8008c46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c40:	2302      	movs	r3, #2
 8008c42:	607b      	str	r3, [r7, #4]
 8008c44:	e001      	b.n	8008c4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c46:	2300      	movs	r3, #0
 8008c48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c4a:	687b      	ldr	r3, [r7, #4]
	}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	20001b6c 	.word	0x20001b6c
 8008c5c:	20001b88 	.word	0x20001b88

08008c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d056      	beq.n	8008d24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c76:	4b2e      	ldr	r3, [pc, #184]	; (8008d30 <xTaskPriorityDisinherit+0xd0>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d00a      	beq.n	8008c96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	60fb      	str	r3, [r7, #12]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	60bb      	str	r3, [r7, #8]
}
 8008cb0:	bf00      	nop
 8008cb2:	e7fe      	b.n	8008cb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb8:	1e5a      	subs	r2, r3, #1
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d02c      	beq.n	8008d24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d128      	bne.n	8008d24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fa2e 	bl	8007138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <xTaskPriorityDisinherit+0xd4>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d903      	bls.n	8008d04 <xTaskPriorityDisinherit+0xa4>
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	4a0c      	ldr	r2, [pc, #48]	; (8008d34 <xTaskPriorityDisinherit+0xd4>)
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4a09      	ldr	r2, [pc, #36]	; (8008d38 <xTaskPriorityDisinherit+0xd8>)
 8008d12:	441a      	add	r2, r3
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f7fe f9b1 	bl	8007082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d20:	2301      	movs	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d24:	697b      	ldr	r3, [r7, #20]
	}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	2000168c 	.word	0x2000168c
 8008d34:	20001b68 	.word	0x20001b68
 8008d38:	20001690 	.word	0x20001690

08008d3c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 fa0a 	bl	800a162 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7f7 f9fe 	bl	8000150 <strlen>
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	e007      	b.n	8008d68 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	2220      	movs	r2, #32
 8008d60:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b0e      	cmp	r3, #14
 8008d6c:	d9f4      	bls.n	8008d58 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	2200      	movs	r2, #0
 8008d76:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4413      	add	r3, r2
	}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8008d88:	b590      	push	{r4, r7, lr}
 8008d8a:	b089      	sub	sp, #36	; 0x24
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8008d96:	4b46      	ldr	r3, [pc, #280]	; (8008eb0 <vTaskList+0x128>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8008d9c:	4b44      	ldr	r3, [pc, #272]	; (8008eb0 <vTaskList+0x128>)
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	4613      	mov	r3, r2
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fe5f 	bl	8009a6c <pvPortMalloc>
 8008dae:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d078      	beq.n	8008ea8 <vTaskList+0x120>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6938      	ldr	r0, [r7, #16]
 8008dbe:	f7ff fa77 	bl	80082b0 <uxTaskGetSystemState>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60bb      	str	r3, [r7, #8]
 8008dca:	e066      	b.n	8008e9a <vTaskList+0x112>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	4413      	add	r3, r2
 8008ddc:	7b1b      	ldrb	r3, [r3, #12]
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d81b      	bhi.n	8008e1a <vTaskList+0x92>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <vTaskList+0x60>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008dfd 	.word	0x08008dfd
 8008dec:	08008e03 	.word	0x08008e03
 8008df0:	08008e09 	.word	0x08008e09
 8008df4:	08008e0f 	.word	0x08008e0f
 8008df8:	08008e15 	.word	0x08008e15
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8008dfc:	2358      	movs	r3, #88	; 0x58
 8008dfe:	75fb      	strb	r3, [r7, #23]
										break;
 8008e00:	e00e      	b.n	8008e20 <vTaskList+0x98>

					case eReady:		cStatus = tskREADY_CHAR;
 8008e02:	2352      	movs	r3, #82	; 0x52
 8008e04:	75fb      	strb	r3, [r7, #23]
										break;
 8008e06:	e00b      	b.n	8008e20 <vTaskList+0x98>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8008e08:	2342      	movs	r3, #66	; 0x42
 8008e0a:	75fb      	strb	r3, [r7, #23]
										break;
 8008e0c:	e008      	b.n	8008e20 <vTaskList+0x98>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8008e0e:	2353      	movs	r3, #83	; 0x53
 8008e10:	75fb      	strb	r3, [r7, #23]
										break;
 8008e12:	e005      	b.n	8008e20 <vTaskList+0x98>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8008e14:	2344      	movs	r3, #68	; 0x44
 8008e16:	75fb      	strb	r3, [r7, #23]
										break;
 8008e18:	e002      	b.n	8008e20 <vTaskList+0x98>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]
										break;
 8008e1e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	4613      	mov	r3, r2
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	4413      	add	r3, r2
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ff81 	bl	8008d3c <prvWriteNameToBuffer>
 8008e3a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8008e3c:	7df9      	ldrb	r1, [r7, #23]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	4613      	mov	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	461a      	mov	r2, r3
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	6918      	ldr	r0, [r3, #16]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	4613      	mov	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	4413      	add	r3, r2
 8008e60:	8c1b      	ldrh	r3, [r3, #32]
 8008e62:	461c      	mov	r4, r3
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	4613      	mov	r3, r2
 8008e68:	00db      	lsls	r3, r3, #3
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	461a      	mov	r2, r3
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	4413      	add	r3, r2
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	9400      	str	r4, [sp, #0]
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	460a      	mov	r2, r1
 8008e7e:	490d      	ldr	r1, [pc, #52]	; (8008eb4 <vTaskList+0x12c>)
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 f93f 	bl	800a104 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7f7 f962 	bl	8000150 <strlen>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4413      	add	r3, r2
 8008e92:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60bb      	str	r3, [r7, #8]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d394      	bcc.n	8008dcc <vTaskList+0x44>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8008ea2:	6938      	ldr	r0, [r7, #16]
 8008ea4:	f000 fea6 	bl	8009bf4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ea8:	bf00      	nop
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd90      	pop	{r4, r7, pc}
 8008eb0:	20001b60 	.word	0x20001b60
 8008eb4:	0800aaa4 	.word	0x0800aaa4

08008eb8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8008ec6:	4b3a      	ldr	r3, [pc, #232]	; (8008fb0 <vTaskGetRunTimeStats+0xf8>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	617b      	str	r3, [r7, #20]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8008ecc:	4b38      	ldr	r3, [pc, #224]	; (8008fb0 <vTaskGetRunTimeStats+0xf8>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fdc7 	bl	8009a6c <pvPortMalloc>
 8008ede:	61f8      	str	r0, [r7, #28]

		if( pxTaskStatusArray != NULL )
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d060      	beq.n	8008fa8 <vTaskGetRunTimeStats+0xf0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f107 020c 	add.w	r2, r7, #12
 8008eec:	4619      	mov	r1, r3
 8008eee:	69f8      	ldr	r0, [r7, #28]
 8008ef0:	f7ff f9de 	bl	80082b0 <uxTaskGetSystemState>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	617b      	str	r3, [r7, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4a2e      	ldr	r2, [pc, #184]	; (8008fb4 <vTaskGetRunTimeStats+0xfc>)
 8008efc:	fba2 2303 	umull	r2, r3, r2, r3
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d04b      	beq.n	8008fa2 <vTaskGetRunTimeStats+0xea>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	613b      	str	r3, [r7, #16]
 8008f0e:	e044      	b.n	8008f9a <vTaskGetRunTimeStats+0xe2>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	4613      	mov	r3, r2
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	4413      	add	r3, r2
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f28:	61bb      	str	r3, [r7, #24]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	4413      	add	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	461a      	mov	r2, r3
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	4413      	add	r3, r2
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff fefc 	bl	8008d3c <prvWriteNameToBuffer>
 8008f44:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00e      	beq.n	8008f6a <vTaskGetRunTimeStats+0xb2>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	461a      	mov	r2, r3
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	4915      	ldr	r1, [pc, #84]	; (8008fb8 <vTaskGetRunTimeStats+0x100>)
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 f8ce 	bl	800a104 <siprintf>
 8008f68:	e00d      	b.n	8008f86 <vTaskGetRunTimeStats+0xce>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	461a      	mov	r2, r3
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4413      	add	r3, r2
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	490f      	ldr	r1, [pc, #60]	; (8008fbc <vTaskGetRunTimeStats+0x104>)
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 f8bf 	bl	800a104 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7f7 f8e2 	bl	8000150 <strlen>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4413      	add	r3, r2
 8008f92:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	3301      	adds	r3, #1
 8008f98:	613b      	str	r3, [r7, #16]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d3b6      	bcc.n	8008f10 <vTaskGetRunTimeStats+0x58>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8008fa2:	69f8      	ldr	r0, [r7, #28]
 8008fa4:	f000 fe26 	bl	8009bf4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fa8:	bf00      	nop
 8008faa:	3720      	adds	r7, #32
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20001b60 	.word	0x20001b60
 8008fb4:	51eb851f 	.word	0x51eb851f
 8008fb8:	0800aab4 	.word	0x0800aab4
 8008fbc:	0800aac0 	.word	0x0800aac0

08008fc0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fca:	4b21      	ldr	r3, [pc, #132]	; (8009050 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fd0:	4b20      	ldr	r3, [pc, #128]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe f8ae 	bl	8007138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe2:	d10a      	bne.n	8008ffa <prvAddCurrentTaskToDelayedList+0x3a>
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d007      	beq.n	8008ffa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fea:	4b1a      	ldr	r3, [pc, #104]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4819      	ldr	r0, [pc, #100]	; (8009058 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ff4:	f7fe f845 	bl	8007082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ff8:	e026      	b.n	8009048 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4413      	add	r3, r2
 8009000:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009002:	4b14      	ldr	r3, [pc, #80]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	429a      	cmp	r2, r3
 8009010:	d209      	bcs.n	8009026 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009012:	4b12      	ldr	r3, [pc, #72]	; (800905c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3304      	adds	r3, #4
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f7fe f852 	bl	80070c8 <vListInsert>
}
 8009024:	e010      	b.n	8009048 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009026:	4b0e      	ldr	r3, [pc, #56]	; (8009060 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4b0a      	ldr	r3, [pc, #40]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3304      	adds	r3, #4
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f7fe f848 	bl	80070c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009038:	4b0a      	ldr	r3, [pc, #40]	; (8009064 <prvAddCurrentTaskToDelayedList+0xa4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	429a      	cmp	r2, r3
 8009040:	d202      	bcs.n	8009048 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009042:	4a08      	ldr	r2, [pc, #32]	; (8009064 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	6013      	str	r3, [r2, #0]
}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	20001b64 	.word	0x20001b64
 8009054:	2000168c 	.word	0x2000168c
 8009058:	20001b4c 	.word	0x20001b4c
 800905c:	20001b1c 	.word	0x20001b1c
 8009060:	20001b18 	.word	0x20001b18
 8009064:	20001b80 	.word	0x20001b80

08009068 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	; 0x28
 800906c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800906e:	2300      	movs	r3, #0
 8009070:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009072:	f000 facb 	bl	800960c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009076:	4b1c      	ldr	r3, [pc, #112]	; (80090e8 <xTimerCreateTimerTask+0x80>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d021      	beq.n	80090c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009086:	1d3a      	adds	r2, r7, #4
 8009088:	f107 0108 	add.w	r1, r7, #8
 800908c:	f107 030c 	add.w	r3, r7, #12
 8009090:	4618      	mov	r0, r3
 8009092:	f7fd ffb1 	bl	8006ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	9202      	str	r2, [sp, #8]
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	2318      	movs	r3, #24
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2300      	movs	r3, #0
 80090a6:	460a      	mov	r2, r1
 80090a8:	4910      	ldr	r1, [pc, #64]	; (80090ec <xTimerCreateTimerTask+0x84>)
 80090aa:	4811      	ldr	r0, [pc, #68]	; (80090f0 <xTimerCreateTimerTask+0x88>)
 80090ac:	f7fe fd90 	bl	8007bd0 <xTaskCreateStatic>
 80090b0:	4603      	mov	r3, r0
 80090b2:	4a10      	ldr	r2, [pc, #64]	; (80090f4 <xTimerCreateTimerTask+0x8c>)
 80090b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090b6:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <xTimerCreateTimerTask+0x8c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090be:	2301      	movs	r3, #1
 80090c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	613b      	str	r3, [r7, #16]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80090de:	697b      	ldr	r3, [r7, #20]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20001bc4 	.word	0x20001bc4
 80090ec:	0800aacc 	.word	0x0800aacc
 80090f0:	08009215 	.word	0x08009215
 80090f4:	20001bc8 	.word	0x20001bc8

080090f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	; 0x28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009106:	2300      	movs	r3, #0
 8009108:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	623b      	str	r3, [r7, #32]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009126:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <xTimerGenericCommand+0x98>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d02a      	beq.n	8009184 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b05      	cmp	r3, #5
 800913e:	dc18      	bgt.n	8009172 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009140:	f7ff fd70 	bl	8008c24 <xTaskGetSchedulerState>
 8009144:	4603      	mov	r3, r0
 8009146:	2b02      	cmp	r3, #2
 8009148:	d109      	bne.n	800915e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800914a:	4b11      	ldr	r3, [pc, #68]	; (8009190 <xTimerGenericCommand+0x98>)
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	f107 0110 	add.w	r1, r7, #16
 8009152:	2300      	movs	r3, #0
 8009154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009156:	f7fe f959 	bl	800740c <xQueueGenericSend>
 800915a:	6278      	str	r0, [r7, #36]	; 0x24
 800915c:	e012      	b.n	8009184 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800915e:	4b0c      	ldr	r3, [pc, #48]	; (8009190 <xTimerGenericCommand+0x98>)
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	f107 0110 	add.w	r1, r7, #16
 8009166:	2300      	movs	r3, #0
 8009168:	2200      	movs	r2, #0
 800916a:	f7fe f94f 	bl	800740c <xQueueGenericSend>
 800916e:	6278      	str	r0, [r7, #36]	; 0x24
 8009170:	e008      	b.n	8009184 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009172:	4b07      	ldr	r3, [pc, #28]	; (8009190 <xTimerGenericCommand+0x98>)
 8009174:	6818      	ldr	r0, [r3, #0]
 8009176:	f107 0110 	add.w	r1, r7, #16
 800917a:	2300      	movs	r3, #0
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	f7fe fa43 	bl	8007608 <xQueueGenericSendFromISR>
 8009182:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009186:	4618      	mov	r0, r3
 8009188:	3728      	adds	r7, #40	; 0x28
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20001bc4 	.word	0x20001bc4

08009194 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af02      	add	r7, sp, #8
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800919e:	4b1c      	ldr	r3, [pc, #112]	; (8009210 <prvProcessExpiredTimer+0x7c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fd ffc3 	bl	8007138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d122      	bne.n	8009200 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	699a      	ldr	r2, [r3, #24]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	18d1      	adds	r1, r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	6978      	ldr	r0, [r7, #20]
 80091c8:	f000 f8c8 	bl	800935c <prvInsertTimerInActiveList>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d016      	beq.n	8009200 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091d2:	2300      	movs	r3, #0
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2300      	movs	r3, #0
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	2100      	movs	r1, #0
 80091dc:	6978      	ldr	r0, [r7, #20]
 80091de:	f7ff ff8b 	bl	80090f8 <xTimerGenericCommand>
 80091e2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10a      	bne.n	8009200 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	60fb      	str	r3, [r7, #12]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	6978      	ldr	r0, [r7, #20]
 8009206:	4798      	blx	r3
}
 8009208:	bf00      	nop
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20001bbc 	.word	0x20001bbc

08009214 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800921c:	f107 0308 	add.w	r3, r7, #8
 8009220:	4618      	mov	r0, r3
 8009222:	f000 f857 	bl	80092d4 <prvGetNextExpireTime>
 8009226:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	4619      	mov	r1, r3
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f803 	bl	8009238 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009232:	f000 f8d5 	bl	80093e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009236:	e7f1      	b.n	800921c <prvTimerTask+0x8>

08009238 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009242:	f7fe ff7b 	bl	800813c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009246:	f107 0308 	add.w	r3, r7, #8
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f866 	bl	800931c <prvSampleTimeNow>
 8009250:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d130      	bne.n	80092ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <prvProcessTimerOrBlockTask+0x3c>
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	429a      	cmp	r2, r3
 8009264:	d806      	bhi.n	8009274 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009266:	f7fe ff77 	bl	8008158 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff ff91 	bl	8009194 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009272:	e024      	b.n	80092be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d008      	beq.n	800928c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800927a:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <prvProcessTimerOrBlockTask+0x90>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	bf0c      	ite	eq
 8009284:	2301      	moveq	r3, #1
 8009286:	2300      	movne	r3, #0
 8009288:	b2db      	uxtb	r3, r3
 800928a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800928c:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <prvProcessTimerOrBlockTask+0x94>)
 800928e:	6818      	ldr	r0, [r3, #0]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	4619      	mov	r1, r3
 800929a:	f7fe fc65 	bl	8007b68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800929e:	f7fe ff5b 	bl	8008158 <xTaskResumeAll>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092a8:	4b09      	ldr	r3, [pc, #36]	; (80092d0 <prvProcessTimerOrBlockTask+0x98>)
 80092aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	f3bf 8f6f 	isb	sy
}
 80092b8:	e001      	b.n	80092be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092ba:	f7fe ff4d 	bl	8008158 <xTaskResumeAll>
}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20001bc0 	.word	0x20001bc0
 80092cc:	20001bc4 	.word	0x20001bc4
 80092d0:	e000ed04 	.word	0xe000ed04

080092d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092dc:	4b0e      	ldr	r3, [pc, #56]	; (8009318 <prvGetNextExpireTime+0x44>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bf0c      	ite	eq
 80092e6:	2301      	moveq	r3, #1
 80092e8:	2300      	movne	r3, #0
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	461a      	mov	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d105      	bne.n	8009306 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092fa:	4b07      	ldr	r3, [pc, #28]	; (8009318 <prvGetNextExpireTime+0x44>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e001      	b.n	800930a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800930a:	68fb      	ldr	r3, [r7, #12]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	20001bbc 	.word	0x20001bbc

0800931c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009324:	f7fe ffb6 	bl	8008294 <xTaskGetTickCount>
 8009328:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800932a:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <prvSampleTimeNow+0x3c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	429a      	cmp	r2, r3
 8009332:	d205      	bcs.n	8009340 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009334:	f000 f908 	bl	8009548 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	e002      	b.n	8009346 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009346:	4a04      	ldr	r2, [pc, #16]	; (8009358 <prvSampleTimeNow+0x3c>)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800934c:	68fb      	ldr	r3, [r7, #12]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20001bcc 	.word	0x20001bcc

0800935c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800936a:	2300      	movs	r3, #0
 800936c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	d812      	bhi.n	80093a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	429a      	cmp	r2, r3
 800938e:	d302      	bcc.n	8009396 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009390:	2301      	movs	r3, #1
 8009392:	617b      	str	r3, [r7, #20]
 8009394:	e01b      	b.n	80093ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009396:	4b10      	ldr	r3, [pc, #64]	; (80093d8 <prvInsertTimerInActiveList+0x7c>)
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3304      	adds	r3, #4
 800939e:	4619      	mov	r1, r3
 80093a0:	4610      	mov	r0, r2
 80093a2:	f7fd fe91 	bl	80070c8 <vListInsert>
 80093a6:	e012      	b.n	80093ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d206      	bcs.n	80093be <prvInsertTimerInActiveList+0x62>
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d302      	bcc.n	80093be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093b8:	2301      	movs	r3, #1
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	e007      	b.n	80093ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093be:	4b07      	ldr	r3, [pc, #28]	; (80093dc <prvInsertTimerInActiveList+0x80>)
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4619      	mov	r1, r3
 80093c8:	4610      	mov	r0, r2
 80093ca:	f7fd fe7d 	bl	80070c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093ce:	697b      	ldr	r3, [r7, #20]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	20001bc0 	.word	0x20001bc0
 80093dc:	20001bbc 	.word	0x20001bbc

080093e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08e      	sub	sp, #56	; 0x38
 80093e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093e6:	e09d      	b.n	8009524 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	da18      	bge.n	8009420 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093ee:	1d3b      	adds	r3, r7, #4
 80093f0:	3304      	adds	r3, #4
 80093f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	61fb      	str	r3, [r7, #28]
}
 800940c:	bf00      	nop
 800940e:	e7fe      	b.n	800940e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009416:	6850      	ldr	r0, [r2, #4]
 8009418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800941a:	6892      	ldr	r2, [r2, #8]
 800941c:	4611      	mov	r1, r2
 800941e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	db7d      	blt.n	8009522 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d004      	beq.n	800943c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	3304      	adds	r3, #4
 8009436:	4618      	mov	r0, r3
 8009438:	f7fd fe7e 	bl	8007138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800943c:	463b      	mov	r3, r7
 800943e:	4618      	mov	r0, r3
 8009440:	f7ff ff6c 	bl	800931c <prvSampleTimeNow>
 8009444:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b09      	cmp	r3, #9
 800944a:	d86b      	bhi.n	8009524 <prvProcessReceivedCommands+0x144>
 800944c:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <prvProcessReceivedCommands+0x74>)
 800944e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009452:	bf00      	nop
 8009454:	0800947d 	.word	0x0800947d
 8009458:	0800947d 	.word	0x0800947d
 800945c:	0800947d 	.word	0x0800947d
 8009460:	08009525 	.word	0x08009525
 8009464:	080094d9 	.word	0x080094d9
 8009468:	08009511 	.word	0x08009511
 800946c:	0800947d 	.word	0x0800947d
 8009470:	0800947d 	.word	0x0800947d
 8009474:	08009525 	.word	0x08009525
 8009478:	080094d9 	.word	0x080094d9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	18d1      	adds	r1, r2, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800948a:	f7ff ff67 	bl	800935c <prvInsertTimerInActiveList>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d047      	beq.n	8009524 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800949a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d13f      	bne.n	8009524 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	441a      	add	r2, r3
 80094ac:	2300      	movs	r3, #0
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	2300      	movs	r3, #0
 80094b2:	2100      	movs	r1, #0
 80094b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b6:	f7ff fe1f 	bl	80090f8 <xTimerGenericCommand>
 80094ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d130      	bne.n	8009524 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	61bb      	str	r3, [r7, #24]
}
 80094d4:	bf00      	nop
 80094d6:	e7fe      	b.n	80094d6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10a      	bne.n	80094fc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	617b      	str	r3, [r7, #20]
}
 80094f8:	bf00      	nop
 80094fa:	e7fe      	b.n	80094fa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	699a      	ldr	r2, [r3, #24]
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	18d1      	adds	r1, r2, r3
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800950a:	f7ff ff27 	bl	800935c <prvInsertTimerInActiveList>
					break;
 800950e:	e009      	b.n	8009524 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d104      	bne.n	8009524 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800951a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800951c:	f000 fb6a 	bl	8009bf4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009520:	e000      	b.n	8009524 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009522:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009524:	4b07      	ldr	r3, [pc, #28]	; (8009544 <prvProcessReceivedCommands+0x164>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	1d39      	adds	r1, r7, #4
 800952a:	2200      	movs	r2, #0
 800952c:	4618      	mov	r0, r3
 800952e:	f7fe f903 	bl	8007738 <xQueueReceive>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	f47f af57 	bne.w	80093e8 <prvProcessReceivedCommands+0x8>
	}
}
 800953a:	bf00      	nop
 800953c:	bf00      	nop
 800953e:	3730      	adds	r7, #48	; 0x30
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20001bc4 	.word	0x20001bc4

08009548 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800954e:	e045      	b.n	80095dc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009550:	4b2c      	ldr	r3, [pc, #176]	; (8009604 <prvSwitchTimerLists+0xbc>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800955a:	4b2a      	ldr	r3, [pc, #168]	; (8009604 <prvSwitchTimerLists+0xbc>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3304      	adds	r3, #4
 8009568:	4618      	mov	r0, r3
 800956a:	f7fd fde5 	bl	8007138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d12e      	bne.n	80095dc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	4413      	add	r3, r2
 8009586:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	429a      	cmp	r2, r3
 800958e:	d90e      	bls.n	80095ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800959c:	4b19      	ldr	r3, [pc, #100]	; (8009604 <prvSwitchTimerLists+0xbc>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3304      	adds	r3, #4
 80095a4:	4619      	mov	r1, r3
 80095a6:	4610      	mov	r0, r2
 80095a8:	f7fd fd8e 	bl	80070c8 <vListInsert>
 80095ac:	e016      	b.n	80095dc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095ae:	2300      	movs	r3, #0
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	2300      	movs	r3, #0
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	2100      	movs	r1, #0
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff fd9d 	bl	80090f8 <xTimerGenericCommand>
 80095be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <prvSwitchTimerLists+0x94>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	603b      	str	r3, [r7, #0]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095dc:	4b09      	ldr	r3, [pc, #36]	; (8009604 <prvSwitchTimerLists+0xbc>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1b4      	bne.n	8009550 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095e6:	4b07      	ldr	r3, [pc, #28]	; (8009604 <prvSwitchTimerLists+0xbc>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095ec:	4b06      	ldr	r3, [pc, #24]	; (8009608 <prvSwitchTimerLists+0xc0>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a04      	ldr	r2, [pc, #16]	; (8009604 <prvSwitchTimerLists+0xbc>)
 80095f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80095f4:	4a04      	ldr	r2, [pc, #16]	; (8009608 <prvSwitchTimerLists+0xc0>)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	6013      	str	r3, [r2, #0]
}
 80095fa:	bf00      	nop
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	20001bbc 	.word	0x20001bbc
 8009608:	20001bc0 	.word	0x20001bc0

0800960c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009612:	f000 f92b 	bl	800986c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009616:	4b15      	ldr	r3, [pc, #84]	; (800966c <prvCheckForValidListAndQueue+0x60>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d120      	bne.n	8009660 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800961e:	4814      	ldr	r0, [pc, #80]	; (8009670 <prvCheckForValidListAndQueue+0x64>)
 8009620:	f7fd fd04 	bl	800702c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009624:	4813      	ldr	r0, [pc, #76]	; (8009674 <prvCheckForValidListAndQueue+0x68>)
 8009626:	f7fd fd01 	bl	800702c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800962a:	4b13      	ldr	r3, [pc, #76]	; (8009678 <prvCheckForValidListAndQueue+0x6c>)
 800962c:	4a10      	ldr	r2, [pc, #64]	; (8009670 <prvCheckForValidListAndQueue+0x64>)
 800962e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009630:	4b12      	ldr	r3, [pc, #72]	; (800967c <prvCheckForValidListAndQueue+0x70>)
 8009632:	4a10      	ldr	r2, [pc, #64]	; (8009674 <prvCheckForValidListAndQueue+0x68>)
 8009634:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009636:	2300      	movs	r3, #0
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	4b11      	ldr	r3, [pc, #68]	; (8009680 <prvCheckForValidListAndQueue+0x74>)
 800963c:	4a11      	ldr	r2, [pc, #68]	; (8009684 <prvCheckForValidListAndQueue+0x78>)
 800963e:	2110      	movs	r1, #16
 8009640:	200a      	movs	r0, #10
 8009642:	f7fd fe0b 	bl	800725c <xQueueGenericCreateStatic>
 8009646:	4603      	mov	r3, r0
 8009648:	4a08      	ldr	r2, [pc, #32]	; (800966c <prvCheckForValidListAndQueue+0x60>)
 800964a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800964c:	4b07      	ldr	r3, [pc, #28]	; (800966c <prvCheckForValidListAndQueue+0x60>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <prvCheckForValidListAndQueue+0x60>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	490b      	ldr	r1, [pc, #44]	; (8009688 <prvCheckForValidListAndQueue+0x7c>)
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fa5c 	bl	8007b18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009660:	f000 f934 	bl	80098cc <vPortExitCritical>
}
 8009664:	bf00      	nop
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20001bc4 	.word	0x20001bc4
 8009670:	20001b94 	.word	0x20001b94
 8009674:	20001ba8 	.word	0x20001ba8
 8009678:	20001bbc 	.word	0x20001bbc
 800967c:	20001bc0 	.word	0x20001bc0
 8009680:	20001c70 	.word	0x20001c70
 8009684:	20001bd0 	.word	0x20001bd0
 8009688:	0800aad4 	.word	0x0800aad4

0800968c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3b04      	subs	r3, #4
 800969c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3b04      	subs	r3, #4
 80096aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	f023 0201 	bic.w	r2, r3, #1
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096bc:	4a08      	ldr	r2, [pc, #32]	; (80096e0 <pxPortInitialiseStack+0x54>)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3b14      	subs	r3, #20
 80096c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3b20      	subs	r3, #32
 80096d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096d4:	68fb      	ldr	r3, [r7, #12]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr
 80096e0:	080096e5 	.word	0x080096e5

080096e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096ee:	4b12      	ldr	r3, [pc, #72]	; (8009738 <prvTaskExitError+0x54>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096f6:	d00a      	beq.n	800970e <prvTaskExitError+0x2a>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	60fb      	str	r3, [r7, #12]
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <prvTaskExitError+0x28>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	60bb      	str	r3, [r7, #8]
}
 8009720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009722:	bf00      	nop
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0fc      	beq.n	8009724 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800972a:	bf00      	nop
 800972c:	bf00      	nop
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20000010 	.word	0x20000010
 800973c:	00000000 	.word	0x00000000

08009740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <pxCurrentTCBConst2>)
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	6808      	ldr	r0, [r1, #0]
 8009746:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800974a:	f380 8809 	msr	PSP, r0
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8811 	msr	BASEPRI, r0
 800975a:	f04e 0e0d 	orr.w	lr, lr, #13
 800975e:	4770      	bx	lr

08009760 <pxCurrentTCBConst2>:
 8009760:	2000168c 	.word	0x2000168c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop

08009768 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009768:	4806      	ldr	r0, [pc, #24]	; (8009784 <prvPortStartFirstTask+0x1c>)
 800976a:	6800      	ldr	r0, [r0, #0]
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f380 8808 	msr	MSP, r0
 8009772:	b662      	cpsie	i
 8009774:	b661      	cpsie	f
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	df00      	svc	0
 8009780:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009782:	bf00      	nop
 8009784:	e000ed08 	.word	0xe000ed08

08009788 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800978e:	4b32      	ldr	r3, [pc, #200]	; (8009858 <xPortStartScheduler+0xd0>)
 8009790:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	22ff      	movs	r2, #255	; 0xff
 800979e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	4b2a      	ldr	r3, [pc, #168]	; (800985c <xPortStartScheduler+0xd4>)
 80097b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097b6:	4b2a      	ldr	r3, [pc, #168]	; (8009860 <xPortStartScheduler+0xd8>)
 80097b8:	2207      	movs	r2, #7
 80097ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097bc:	e009      	b.n	80097d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097be:	4b28      	ldr	r3, [pc, #160]	; (8009860 <xPortStartScheduler+0xd8>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	4a26      	ldr	r2, [pc, #152]	; (8009860 <xPortStartScheduler+0xd8>)
 80097c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097da:	2b80      	cmp	r3, #128	; 0x80
 80097dc:	d0ef      	beq.n	80097be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097de:	4b20      	ldr	r3, [pc, #128]	; (8009860 <xPortStartScheduler+0xd8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f1c3 0307 	rsb	r3, r3, #7
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d00a      	beq.n	8009800 <xPortStartScheduler+0x78>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	60bb      	str	r3, [r7, #8]
}
 80097fc:	bf00      	nop
 80097fe:	e7fe      	b.n	80097fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009800:	4b17      	ldr	r3, [pc, #92]	; (8009860 <xPortStartScheduler+0xd8>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	021b      	lsls	r3, r3, #8
 8009806:	4a16      	ldr	r2, [pc, #88]	; (8009860 <xPortStartScheduler+0xd8>)
 8009808:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800980a:	4b15      	ldr	r3, [pc, #84]	; (8009860 <xPortStartScheduler+0xd8>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009812:	4a13      	ldr	r2, [pc, #76]	; (8009860 <xPortStartScheduler+0xd8>)
 8009814:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	b2da      	uxtb	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800981e:	4b11      	ldr	r3, [pc, #68]	; (8009864 <xPortStartScheduler+0xdc>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a10      	ldr	r2, [pc, #64]	; (8009864 <xPortStartScheduler+0xdc>)
 8009824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800982a:	4b0e      	ldr	r3, [pc, #56]	; (8009864 <xPortStartScheduler+0xdc>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a0d      	ldr	r2, [pc, #52]	; (8009864 <xPortStartScheduler+0xdc>)
 8009830:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009834:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009836:	f000 f8b9 	bl	80099ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800983a:	4b0b      	ldr	r3, [pc, #44]	; (8009868 <xPortStartScheduler+0xe0>)
 800983c:	2200      	movs	r2, #0
 800983e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009840:	f7ff ff92 	bl	8009768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009844:	f7fe fe82 	bl	800854c <vTaskSwitchContext>
	prvTaskExitError();
 8009848:	f7ff ff4c 	bl	80096e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	e000e400 	.word	0xe000e400
 800985c:	20001cc0 	.word	0x20001cc0
 8009860:	20001cc4 	.word	0x20001cc4
 8009864:	e000ed20 	.word	0xe000ed20
 8009868:	20000010 	.word	0x20000010

0800986c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	607b      	str	r3, [r7, #4]
}
 8009884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009886:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <vPortEnterCritical+0x58>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3301      	adds	r3, #1
 800988c:	4a0d      	ldr	r2, [pc, #52]	; (80098c4 <vPortEnterCritical+0x58>)
 800988e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009890:	4b0c      	ldr	r3, [pc, #48]	; (80098c4 <vPortEnterCritical+0x58>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d10f      	bne.n	80098b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009898:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <vPortEnterCritical+0x5c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00a      	beq.n	80098b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	603b      	str	r3, [r7, #0]
}
 80098b4:	bf00      	nop
 80098b6:	e7fe      	b.n	80098b6 <vPortEnterCritical+0x4a>
	}
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	bc80      	pop	{r7}
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	20000010 	.word	0x20000010
 80098c8:	e000ed04 	.word	0xe000ed04

080098cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098d2:	4b11      	ldr	r3, [pc, #68]	; (8009918 <vPortExitCritical+0x4c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <vPortExitCritical+0x24>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	607b      	str	r3, [r7, #4]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098f0:	4b09      	ldr	r3, [pc, #36]	; (8009918 <vPortExitCritical+0x4c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	4a08      	ldr	r2, [pc, #32]	; (8009918 <vPortExitCritical+0x4c>)
 80098f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098fa:	4b07      	ldr	r3, [pc, #28]	; (8009918 <vPortExitCritical+0x4c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d105      	bne.n	800990e <vPortExitCritical+0x42>
 8009902:	2300      	movs	r3, #0
 8009904:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	f383 8811 	msr	BASEPRI, r3
}
 800990c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr
 8009918:	20000010 	.word	0x20000010
 800991c:	00000000 	.word	0x00000000

08009920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009920:	f3ef 8009 	mrs	r0, PSP
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <pxCurrentTCBConst>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009930:	6010      	str	r0, [r2, #0]
 8009932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009936:	f04f 0050 	mov.w	r0, #80	; 0x50
 800993a:	f380 8811 	msr	BASEPRI, r0
 800993e:	f7fe fe05 	bl	800854c <vTaskSwitchContext>
 8009942:	f04f 0000 	mov.w	r0, #0
 8009946:	f380 8811 	msr	BASEPRI, r0
 800994a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	6808      	ldr	r0, [r1, #0]
 8009952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009956:	f380 8809 	msr	PSP, r0
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	4770      	bx	lr

08009960 <pxCurrentTCBConst>:
 8009960:	2000168c 	.word	0x2000168c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop

08009968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	607b      	str	r3, [r7, #4]
}
 8009980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009982:	f7fe fd25 	bl	80083d0 <xTaskIncrementTick>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <SysTick_Handler+0x40>)
 800998e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	f383 8811 	msr	BASEPRI, r3
}
 800999e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	e000ed04 	.word	0xe000ed04

080099ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099b0:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <vPortSetupTimerInterrupt+0x30>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099b6:	4b0a      	ldr	r3, [pc, #40]	; (80099e0 <vPortSetupTimerInterrupt+0x34>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099bc:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <vPortSetupTimerInterrupt+0x38>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a09      	ldr	r2, [pc, #36]	; (80099e8 <vPortSetupTimerInterrupt+0x3c>)
 80099c2:	fba2 2303 	umull	r2, r3, r2, r3
 80099c6:	099b      	lsrs	r3, r3, #6
 80099c8:	4a08      	ldr	r2, [pc, #32]	; (80099ec <vPortSetupTimerInterrupt+0x40>)
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ce:	4b03      	ldr	r3, [pc, #12]	; (80099dc <vPortSetupTimerInterrupt+0x30>)
 80099d0:	2207      	movs	r2, #7
 80099d2:	601a      	str	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bc80      	pop	{r7}
 80099da:	4770      	bx	lr
 80099dc:	e000e010 	.word	0xe000e010
 80099e0:	e000e018 	.word	0xe000e018
 80099e4:	20000004 	.word	0x20000004
 80099e8:	10624dd3 	.word	0x10624dd3
 80099ec:	e000e014 	.word	0xe000e014

080099f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099f6:	f3ef 8305 	mrs	r3, IPSR
 80099fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2b0f      	cmp	r3, #15
 8009a00:	d914      	bls.n	8009a2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a02:	4a16      	ldr	r2, [pc, #88]	; (8009a5c <vPortValidateInterruptPriority+0x6c>)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a0c:	4b14      	ldr	r3, [pc, #80]	; (8009a60 <vPortValidateInterruptPriority+0x70>)
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	7afa      	ldrb	r2, [r7, #11]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d20a      	bcs.n	8009a2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	607b      	str	r3, [r7, #4]
}
 8009a28:	bf00      	nop
 8009a2a:	e7fe      	b.n	8009a2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a2c:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <vPortValidateInterruptPriority+0x74>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a34:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <vPortValidateInterruptPriority+0x78>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d90a      	bls.n	8009a52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	603b      	str	r3, [r7, #0]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <vPortValidateInterruptPriority+0x60>
	}
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc80      	pop	{r7}
 8009a5a:	4770      	bx	lr
 8009a5c:	e000e3f0 	.word	0xe000e3f0
 8009a60:	20001cc0 	.word	0x20001cc0
 8009a64:	e000ed0c 	.word	0xe000ed0c
 8009a68:	20001cc4 	.word	0x20001cc4

08009a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	; 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a78:	f7fe fb60 	bl	800813c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a7c:	4b58      	ldr	r3, [pc, #352]	; (8009be0 <pvPortMalloc+0x174>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a84:	f000 f91a 	bl	8009cbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a88:	4b56      	ldr	r3, [pc, #344]	; (8009be4 <pvPortMalloc+0x178>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f040 808e 	bne.w	8009bb2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01d      	beq.n	8009ad8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a9c:	2208      	movs	r2, #8
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d014      	beq.n	8009ad8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f023 0307 	bic.w	r3, r3, #7
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f003 0307 	and.w	r3, r3, #7
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00a      	beq.n	8009ad8 <pvPortMalloc+0x6c>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	617b      	str	r3, [r7, #20]
}
 8009ad4:	bf00      	nop
 8009ad6:	e7fe      	b.n	8009ad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d069      	beq.n	8009bb2 <pvPortMalloc+0x146>
 8009ade:	4b42      	ldr	r3, [pc, #264]	; (8009be8 <pvPortMalloc+0x17c>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d864      	bhi.n	8009bb2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ae8:	4b40      	ldr	r3, [pc, #256]	; (8009bec <pvPortMalloc+0x180>)
 8009aea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009aec:	4b3f      	ldr	r3, [pc, #252]	; (8009bec <pvPortMalloc+0x180>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009af2:	e004      	b.n	8009afe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d903      	bls.n	8009b10 <pvPortMalloc+0xa4>
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1f1      	bne.n	8009af4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b10:	4b33      	ldr	r3, [pc, #204]	; (8009be0 <pvPortMalloc+0x174>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d04b      	beq.n	8009bb2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2208      	movs	r2, #8
 8009b20:	4413      	add	r3, r2
 8009b22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	1ad2      	subs	r2, r2, r3
 8009b34:	2308      	movs	r3, #8
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d91f      	bls.n	8009b7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4413      	add	r3, r2
 8009b42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <pvPortMalloc+0xf8>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	613b      	str	r3, [r7, #16]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	1ad2      	subs	r2, r2, r3
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b76:	69b8      	ldr	r0, [r7, #24]
 8009b78:	f000 f902 	bl	8009d80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b7c:	4b1a      	ldr	r3, [pc, #104]	; (8009be8 <pvPortMalloc+0x17c>)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	4a18      	ldr	r2, [pc, #96]	; (8009be8 <pvPortMalloc+0x17c>)
 8009b88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b8a:	4b17      	ldr	r3, [pc, #92]	; (8009be8 <pvPortMalloc+0x17c>)
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	4b18      	ldr	r3, [pc, #96]	; (8009bf0 <pvPortMalloc+0x184>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d203      	bcs.n	8009b9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b96:	4b14      	ldr	r3, [pc, #80]	; (8009be8 <pvPortMalloc+0x17c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a15      	ldr	r2, [pc, #84]	; (8009bf0 <pvPortMalloc+0x184>)
 8009b9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	4b10      	ldr	r3, [pc, #64]	; (8009be4 <pvPortMalloc+0x178>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bb2:	f7fe fad1 	bl	8008158 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	f003 0307 	and.w	r3, r3, #7
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00a      	beq.n	8009bd6 <pvPortMalloc+0x16a>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	60fb      	str	r3, [r7, #12]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <pvPortMalloc+0x168>
	return pvReturn;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3728      	adds	r7, #40	; 0x28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20003c10 	.word	0x20003c10
 8009be4:	20003c1c 	.word	0x20003c1c
 8009be8:	20003c14 	.word	0x20003c14
 8009bec:	20003c08 	.word	0x20003c08
 8009bf0:	20003c18 	.word	0x20003c18

08009bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d048      	beq.n	8009c98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c06:	2308      	movs	r3, #8
 8009c08:	425b      	negs	r3, r3
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	4b21      	ldr	r3, [pc, #132]	; (8009ca0 <vPortFree+0xac>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <vPortFree+0x44>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	60fb      	str	r3, [r7, #12]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00a      	beq.n	8009c56 <vPortFree+0x62>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	60bb      	str	r3, [r7, #8]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	4b11      	ldr	r3, [pc, #68]	; (8009ca0 <vPortFree+0xac>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4013      	ands	r3, r2
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d019      	beq.n	8009c98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d115      	bne.n	8009c98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	4b0b      	ldr	r3, [pc, #44]	; (8009ca0 <vPortFree+0xac>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	43db      	mvns	r3, r3
 8009c76:	401a      	ands	r2, r3
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c7c:	f7fe fa5e 	bl	800813c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <vPortFree+0xb0>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4413      	add	r3, r2
 8009c8a:	4a06      	ldr	r2, [pc, #24]	; (8009ca4 <vPortFree+0xb0>)
 8009c8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c8e:	6938      	ldr	r0, [r7, #16]
 8009c90:	f000 f876 	bl	8009d80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c94:	f7fe fa60 	bl	8008158 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c98:	bf00      	nop
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	20003c1c 	.word	0x20003c1c
 8009ca4:	20003c14 	.word	0x20003c14

08009ca8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8009ca8:	b480      	push	{r7}
 8009caa:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <xPortGetFreeHeapSize+0x10>)
 8009cae:	681b      	ldr	r3, [r3, #0]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bc80      	pop	{r7}
 8009cb6:	4770      	bx	lr
 8009cb8:	20003c14 	.word	0x20003c14

08009cbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cc2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8009cc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cc8:	4b27      	ldr	r3, [pc, #156]	; (8009d68 <prvHeapInit+0xac>)
 8009cca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f003 0307 	and.w	r3, r3, #7
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00c      	beq.n	8009cf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3307      	adds	r3, #7
 8009cda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f023 0307 	bic.w	r3, r3, #7
 8009ce2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	4a1f      	ldr	r2, [pc, #124]	; (8009d68 <prvHeapInit+0xac>)
 8009cec:	4413      	add	r3, r2
 8009cee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cf4:	4a1d      	ldr	r2, [pc, #116]	; (8009d6c <prvHeapInit+0xb0>)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cfa:	4b1c      	ldr	r3, [pc, #112]	; (8009d6c <prvHeapInit+0xb0>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	4413      	add	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d08:	2208      	movs	r2, #8
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	1a9b      	subs	r3, r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 0307 	bic.w	r3, r3, #7
 8009d16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4a15      	ldr	r2, [pc, #84]	; (8009d70 <prvHeapInit+0xb4>)
 8009d1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d1e:	4b14      	ldr	r3, [pc, #80]	; (8009d70 <prvHeapInit+0xb4>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2200      	movs	r2, #0
 8009d24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d26:	4b12      	ldr	r3, [pc, #72]	; (8009d70 <prvHeapInit+0xb4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d3c:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <prvHeapInit+0xb4>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	4a0a      	ldr	r2, [pc, #40]	; (8009d74 <prvHeapInit+0xb8>)
 8009d4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	4a09      	ldr	r2, [pc, #36]	; (8009d78 <prvHeapInit+0xbc>)
 8009d52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d54:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <prvHeapInit+0xc0>)
 8009d56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d5a:	601a      	str	r2, [r3, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20001cc8 	.word	0x20001cc8
 8009d6c:	20003c08 	.word	0x20003c08
 8009d70:	20003c10 	.word	0x20003c10
 8009d74:	20003c18 	.word	0x20003c18
 8009d78:	20003c14 	.word	0x20003c14
 8009d7c:	20003c1c 	.word	0x20003c1c

08009d80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d88:	4b27      	ldr	r3, [pc, #156]	; (8009e28 <prvInsertBlockIntoFreeList+0xa8>)
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	e002      	b.n	8009d94 <prvInsertBlockIntoFreeList+0x14>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d8f7      	bhi.n	8009d8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	4413      	add	r3, r2
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d108      	bne.n	8009dc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	441a      	add	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	441a      	add	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d118      	bne.n	8009e08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	4b14      	ldr	r3, [pc, #80]	; (8009e2c <prvInsertBlockIntoFreeList+0xac>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d00d      	beq.n	8009dfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	441a      	add	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	e008      	b.n	8009e10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dfe:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <prvInsertBlockIntoFreeList+0xac>)
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	e003      	b.n	8009e10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d002      	beq.n	8009e1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e1e:	bf00      	nop
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bc80      	pop	{r7}
 8009e26:	4770      	bx	lr
 8009e28:	20003c08 	.word	0x20003c08
 8009e2c:	20003c10 	.word	0x20003c10

08009e30 <__errno>:
 8009e30:	4b01      	ldr	r3, [pc, #4]	; (8009e38 <__errno+0x8>)
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	20000014 	.word	0x20000014

08009e3c <__libc_init_array>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	2600      	movs	r6, #0
 8009e40:	4d0c      	ldr	r5, [pc, #48]	; (8009e74 <__libc_init_array+0x38>)
 8009e42:	4c0d      	ldr	r4, [pc, #52]	; (8009e78 <__libc_init_array+0x3c>)
 8009e44:	1b64      	subs	r4, r4, r5
 8009e46:	10a4      	asrs	r4, r4, #2
 8009e48:	42a6      	cmp	r6, r4
 8009e4a:	d109      	bne.n	8009e60 <__libc_init_array+0x24>
 8009e4c:	f000 fd7a 	bl	800a944 <_init>
 8009e50:	2600      	movs	r6, #0
 8009e52:	4d0a      	ldr	r5, [pc, #40]	; (8009e7c <__libc_init_array+0x40>)
 8009e54:	4c0a      	ldr	r4, [pc, #40]	; (8009e80 <__libc_init_array+0x44>)
 8009e56:	1b64      	subs	r4, r4, r5
 8009e58:	10a4      	asrs	r4, r4, #2
 8009e5a:	42a6      	cmp	r6, r4
 8009e5c:	d105      	bne.n	8009e6a <__libc_init_array+0x2e>
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e64:	4798      	blx	r3
 8009e66:	3601      	adds	r6, #1
 8009e68:	e7ee      	b.n	8009e48 <__libc_init_array+0xc>
 8009e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6e:	4798      	blx	r3
 8009e70:	3601      	adds	r6, #1
 8009e72:	e7f2      	b.n	8009e5a <__libc_init_array+0x1e>
 8009e74:	0800acc8 	.word	0x0800acc8
 8009e78:	0800acc8 	.word	0x0800acc8
 8009e7c:	0800acc8 	.word	0x0800acc8
 8009e80:	0800accc 	.word	0x0800accc

08009e84 <__itoa>:
 8009e84:	1e93      	subs	r3, r2, #2
 8009e86:	2b22      	cmp	r3, #34	; 0x22
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	d904      	bls.n	8009e98 <__itoa+0x14>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	461c      	mov	r4, r3
 8009e92:	700b      	strb	r3, [r1, #0]
 8009e94:	4620      	mov	r0, r4
 8009e96:	bd10      	pop	{r4, pc}
 8009e98:	2a0a      	cmp	r2, #10
 8009e9a:	d109      	bne.n	8009eb0 <__itoa+0x2c>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	da07      	bge.n	8009eb0 <__itoa+0x2c>
 8009ea0:	232d      	movs	r3, #45	; 0x2d
 8009ea2:	700b      	strb	r3, [r1, #0]
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	4240      	negs	r0, r0
 8009ea8:	4421      	add	r1, r4
 8009eaa:	f000 f963 	bl	800a174 <__utoa>
 8009eae:	e7f1      	b.n	8009e94 <__itoa+0x10>
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	e7f9      	b.n	8009ea8 <__itoa+0x24>

08009eb4 <itoa>:
 8009eb4:	f7ff bfe6 	b.w	8009e84 <__itoa>

08009eb8 <__retarget_lock_acquire_recursive>:
 8009eb8:	4770      	bx	lr

08009eba <__retarget_lock_release_recursive>:
 8009eba:	4770      	bx	lr

08009ebc <memcpy>:
 8009ebc:	440a      	add	r2, r1
 8009ebe:	4291      	cmp	r1, r2
 8009ec0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009ec4:	d100      	bne.n	8009ec8 <memcpy+0xc>
 8009ec6:	4770      	bx	lr
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ece:	4291      	cmp	r1, r2
 8009ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ed4:	d1f9      	bne.n	8009eca <memcpy+0xe>
 8009ed6:	bd10      	pop	{r4, pc}

08009ed8 <memset>:
 8009ed8:	4603      	mov	r3, r0
 8009eda:	4402      	add	r2, r0
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d100      	bne.n	8009ee2 <memset+0xa>
 8009ee0:	4770      	bx	lr
 8009ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ee6:	e7f9      	b.n	8009edc <memset+0x4>

08009ee8 <sbrk_aligned>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	4e0e      	ldr	r6, [pc, #56]	; (8009f24 <sbrk_aligned+0x3c>)
 8009eec:	460c      	mov	r4, r1
 8009eee:	6831      	ldr	r1, [r6, #0]
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	b911      	cbnz	r1, 8009efa <sbrk_aligned+0x12>
 8009ef4:	f000 f8f6 	bl	800a0e4 <_sbrk_r>
 8009ef8:	6030      	str	r0, [r6, #0]
 8009efa:	4621      	mov	r1, r4
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 f8f1 	bl	800a0e4 <_sbrk_r>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d00a      	beq.n	8009f1c <sbrk_aligned+0x34>
 8009f06:	1cc4      	adds	r4, r0, #3
 8009f08:	f024 0403 	bic.w	r4, r4, #3
 8009f0c:	42a0      	cmp	r0, r4
 8009f0e:	d007      	beq.n	8009f20 <sbrk_aligned+0x38>
 8009f10:	1a21      	subs	r1, r4, r0
 8009f12:	4628      	mov	r0, r5
 8009f14:	f000 f8e6 	bl	800a0e4 <_sbrk_r>
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d101      	bne.n	8009f20 <sbrk_aligned+0x38>
 8009f1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f20:	4620      	mov	r0, r4
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	20003c28 	.word	0x20003c28

08009f28 <_malloc_r>:
 8009f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	1ccd      	adds	r5, r1, #3
 8009f2e:	f025 0503 	bic.w	r5, r5, #3
 8009f32:	3508      	adds	r5, #8
 8009f34:	2d0c      	cmp	r5, #12
 8009f36:	bf38      	it	cc
 8009f38:	250c      	movcc	r5, #12
 8009f3a:	2d00      	cmp	r5, #0
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	db01      	blt.n	8009f44 <_malloc_r+0x1c>
 8009f40:	42a9      	cmp	r1, r5
 8009f42:	d905      	bls.n	8009f50 <_malloc_r+0x28>
 8009f44:	230c      	movs	r3, #12
 8009f46:	2600      	movs	r6, #0
 8009f48:	603b      	str	r3, [r7, #0]
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f50:	4e2e      	ldr	r6, [pc, #184]	; (800a00c <_malloc_r+0xe4>)
 8009f52:	f000 f951 	bl	800a1f8 <__malloc_lock>
 8009f56:	6833      	ldr	r3, [r6, #0]
 8009f58:	461c      	mov	r4, r3
 8009f5a:	bb34      	cbnz	r4, 8009faa <_malloc_r+0x82>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4638      	mov	r0, r7
 8009f60:	f7ff ffc2 	bl	8009ee8 <sbrk_aligned>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	4604      	mov	r4, r0
 8009f68:	d14d      	bne.n	800a006 <_malloc_r+0xde>
 8009f6a:	6834      	ldr	r4, [r6, #0]
 8009f6c:	4626      	mov	r6, r4
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	d140      	bne.n	8009ff4 <_malloc_r+0xcc>
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	4631      	mov	r1, r6
 8009f76:	4638      	mov	r0, r7
 8009f78:	eb04 0803 	add.w	r8, r4, r3
 8009f7c:	f000 f8b2 	bl	800a0e4 <_sbrk_r>
 8009f80:	4580      	cmp	r8, r0
 8009f82:	d13a      	bne.n	8009ffa <_malloc_r+0xd2>
 8009f84:	6821      	ldr	r1, [r4, #0]
 8009f86:	3503      	adds	r5, #3
 8009f88:	1a6d      	subs	r5, r5, r1
 8009f8a:	f025 0503 	bic.w	r5, r5, #3
 8009f8e:	3508      	adds	r5, #8
 8009f90:	2d0c      	cmp	r5, #12
 8009f92:	bf38      	it	cc
 8009f94:	250c      	movcc	r5, #12
 8009f96:	4638      	mov	r0, r7
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7ff ffa5 	bl	8009ee8 <sbrk_aligned>
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	d02b      	beq.n	8009ffa <_malloc_r+0xd2>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	442b      	add	r3, r5
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	e00e      	b.n	8009fc8 <_malloc_r+0xa0>
 8009faa:	6822      	ldr	r2, [r4, #0]
 8009fac:	1b52      	subs	r2, r2, r5
 8009fae:	d41e      	bmi.n	8009fee <_malloc_r+0xc6>
 8009fb0:	2a0b      	cmp	r2, #11
 8009fb2:	d916      	bls.n	8009fe2 <_malloc_r+0xba>
 8009fb4:	1961      	adds	r1, r4, r5
 8009fb6:	42a3      	cmp	r3, r4
 8009fb8:	6025      	str	r5, [r4, #0]
 8009fba:	bf18      	it	ne
 8009fbc:	6059      	strne	r1, [r3, #4]
 8009fbe:	6863      	ldr	r3, [r4, #4]
 8009fc0:	bf08      	it	eq
 8009fc2:	6031      	streq	r1, [r6, #0]
 8009fc4:	5162      	str	r2, [r4, r5]
 8009fc6:	604b      	str	r3, [r1, #4]
 8009fc8:	4638      	mov	r0, r7
 8009fca:	f104 060b 	add.w	r6, r4, #11
 8009fce:	f000 f919 	bl	800a204 <__malloc_unlock>
 8009fd2:	f026 0607 	bic.w	r6, r6, #7
 8009fd6:	1d23      	adds	r3, r4, #4
 8009fd8:	1af2      	subs	r2, r6, r3
 8009fda:	d0b6      	beq.n	8009f4a <_malloc_r+0x22>
 8009fdc:	1b9b      	subs	r3, r3, r6
 8009fde:	50a3      	str	r3, [r4, r2]
 8009fe0:	e7b3      	b.n	8009f4a <_malloc_r+0x22>
 8009fe2:	6862      	ldr	r2, [r4, #4]
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	bf0c      	ite	eq
 8009fe8:	6032      	streq	r2, [r6, #0]
 8009fea:	605a      	strne	r2, [r3, #4]
 8009fec:	e7ec      	b.n	8009fc8 <_malloc_r+0xa0>
 8009fee:	4623      	mov	r3, r4
 8009ff0:	6864      	ldr	r4, [r4, #4]
 8009ff2:	e7b2      	b.n	8009f5a <_malloc_r+0x32>
 8009ff4:	4634      	mov	r4, r6
 8009ff6:	6876      	ldr	r6, [r6, #4]
 8009ff8:	e7b9      	b.n	8009f6e <_malloc_r+0x46>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	f000 f900 	bl	800a204 <__malloc_unlock>
 800a004:	e7a1      	b.n	8009f4a <_malloc_r+0x22>
 800a006:	6025      	str	r5, [r4, #0]
 800a008:	e7de      	b.n	8009fc8 <_malloc_r+0xa0>
 800a00a:	bf00      	nop
 800a00c:	20003c24 	.word	0x20003c24

0800a010 <cleanup_glue>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	460c      	mov	r4, r1
 800a014:	6809      	ldr	r1, [r1, #0]
 800a016:	4605      	mov	r5, r0
 800a018:	b109      	cbz	r1, 800a01e <cleanup_glue+0xe>
 800a01a:	f7ff fff9 	bl	800a010 <cleanup_glue>
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a026:	f000 b8f3 	b.w	800a210 <_free_r>
	...

0800a02c <_reclaim_reent>:
 800a02c:	4b2c      	ldr	r3, [pc, #176]	; (800a0e0 <_reclaim_reent+0xb4>)
 800a02e:	b570      	push	{r4, r5, r6, lr}
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4604      	mov	r4, r0
 800a034:	4283      	cmp	r3, r0
 800a036:	d051      	beq.n	800a0dc <_reclaim_reent+0xb0>
 800a038:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a03a:	b143      	cbz	r3, 800a04e <_reclaim_reent+0x22>
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d14a      	bne.n	800a0d8 <_reclaim_reent+0xac>
 800a042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a044:	6819      	ldr	r1, [r3, #0]
 800a046:	b111      	cbz	r1, 800a04e <_reclaim_reent+0x22>
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 f8e1 	bl	800a210 <_free_r>
 800a04e:	6961      	ldr	r1, [r4, #20]
 800a050:	b111      	cbz	r1, 800a058 <_reclaim_reent+0x2c>
 800a052:	4620      	mov	r0, r4
 800a054:	f000 f8dc 	bl	800a210 <_free_r>
 800a058:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a05a:	b111      	cbz	r1, 800a062 <_reclaim_reent+0x36>
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 f8d7 	bl	800a210 <_free_r>
 800a062:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a064:	b111      	cbz	r1, 800a06c <_reclaim_reent+0x40>
 800a066:	4620      	mov	r0, r4
 800a068:	f000 f8d2 	bl	800a210 <_free_r>
 800a06c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a06e:	b111      	cbz	r1, 800a076 <_reclaim_reent+0x4a>
 800a070:	4620      	mov	r0, r4
 800a072:	f000 f8cd 	bl	800a210 <_free_r>
 800a076:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a078:	b111      	cbz	r1, 800a080 <_reclaim_reent+0x54>
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 f8c8 	bl	800a210 <_free_r>
 800a080:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a082:	b111      	cbz	r1, 800a08a <_reclaim_reent+0x5e>
 800a084:	4620      	mov	r0, r4
 800a086:	f000 f8c3 	bl	800a210 <_free_r>
 800a08a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a08c:	b111      	cbz	r1, 800a094 <_reclaim_reent+0x68>
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 f8be 	bl	800a210 <_free_r>
 800a094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a096:	b111      	cbz	r1, 800a09e <_reclaim_reent+0x72>
 800a098:	4620      	mov	r0, r4
 800a09a:	f000 f8b9 	bl	800a210 <_free_r>
 800a09e:	69a3      	ldr	r3, [r4, #24]
 800a0a0:	b1e3      	cbz	r3, 800a0dc <_reclaim_reent+0xb0>
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a0a6:	4798      	blx	r3
 800a0a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a0aa:	b1b9      	cbz	r1, 800a0dc <_reclaim_reent+0xb0>
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0b2:	f7ff bfad 	b.w	800a010 <cleanup_glue>
 800a0b6:	5949      	ldr	r1, [r1, r5]
 800a0b8:	b941      	cbnz	r1, 800a0cc <_reclaim_reent+0xa0>
 800a0ba:	3504      	adds	r5, #4
 800a0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0be:	2d80      	cmp	r5, #128	; 0x80
 800a0c0:	68d9      	ldr	r1, [r3, #12]
 800a0c2:	d1f8      	bne.n	800a0b6 <_reclaim_reent+0x8a>
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f000 f8a3 	bl	800a210 <_free_r>
 800a0ca:	e7ba      	b.n	800a042 <_reclaim_reent+0x16>
 800a0cc:	680e      	ldr	r6, [r1, #0]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 f89e 	bl	800a210 <_free_r>
 800a0d4:	4631      	mov	r1, r6
 800a0d6:	e7ef      	b.n	800a0b8 <_reclaim_reent+0x8c>
 800a0d8:	2500      	movs	r5, #0
 800a0da:	e7ef      	b.n	800a0bc <_reclaim_reent+0x90>
 800a0dc:	bd70      	pop	{r4, r5, r6, pc}
 800a0de:	bf00      	nop
 800a0e0:	20000014 	.word	0x20000014

0800a0e4 <_sbrk_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	4d05      	ldr	r5, [pc, #20]	; (800a100 <_sbrk_r+0x1c>)
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	4608      	mov	r0, r1
 800a0ee:	602b      	str	r3, [r5, #0]
 800a0f0:	f7f8 fcf6 	bl	8002ae0 <_sbrk>
 800a0f4:	1c43      	adds	r3, r0, #1
 800a0f6:	d102      	bne.n	800a0fe <_sbrk_r+0x1a>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	b103      	cbz	r3, 800a0fe <_sbrk_r+0x1a>
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	20003c2c 	.word	0x20003c2c

0800a104 <siprintf>:
 800a104:	b40e      	push	{r1, r2, r3}
 800a106:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a10a:	b500      	push	{lr}
 800a10c:	b09c      	sub	sp, #112	; 0x70
 800a10e:	ab1d      	add	r3, sp, #116	; 0x74
 800a110:	9002      	str	r0, [sp, #8]
 800a112:	9006      	str	r0, [sp, #24]
 800a114:	9107      	str	r1, [sp, #28]
 800a116:	9104      	str	r1, [sp, #16]
 800a118:	4808      	ldr	r0, [pc, #32]	; (800a13c <siprintf+0x38>)
 800a11a:	4909      	ldr	r1, [pc, #36]	; (800a140 <siprintf+0x3c>)
 800a11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a120:	9105      	str	r1, [sp, #20]
 800a122:	6800      	ldr	r0, [r0, #0]
 800a124:	a902      	add	r1, sp, #8
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	f000 f916 	bl	800a358 <_svfiprintf_r>
 800a12c:	2200      	movs	r2, #0
 800a12e:	9b02      	ldr	r3, [sp, #8]
 800a130:	701a      	strb	r2, [r3, #0]
 800a132:	b01c      	add	sp, #112	; 0x70
 800a134:	f85d eb04 	ldr.w	lr, [sp], #4
 800a138:	b003      	add	sp, #12
 800a13a:	4770      	bx	lr
 800a13c:	20000014 	.word	0x20000014
 800a140:	ffff0208 	.word	0xffff0208

0800a144 <strcat>:
 800a144:	4602      	mov	r2, r0
 800a146:	b510      	push	{r4, lr}
 800a148:	7814      	ldrb	r4, [r2, #0]
 800a14a:	4613      	mov	r3, r2
 800a14c:	3201      	adds	r2, #1
 800a14e:	2c00      	cmp	r4, #0
 800a150:	d1fa      	bne.n	800a148 <strcat+0x4>
 800a152:	3b01      	subs	r3, #1
 800a154:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a158:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	d1f9      	bne.n	800a154 <strcat+0x10>
 800a160:	bd10      	pop	{r4, pc}

0800a162 <strcpy>:
 800a162:	4603      	mov	r3, r0
 800a164:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a168:	f803 2b01 	strb.w	r2, [r3], #1
 800a16c:	2a00      	cmp	r2, #0
 800a16e:	d1f9      	bne.n	800a164 <strcpy+0x2>
 800a170:	4770      	bx	lr
	...

0800a174 <__utoa>:
 800a174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a176:	b08b      	sub	sp, #44	; 0x2c
 800a178:	4605      	mov	r5, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	466e      	mov	r6, sp
 800a17e:	4c1d      	ldr	r4, [pc, #116]	; (800a1f4 <__utoa+0x80>)
 800a180:	f104 0c20 	add.w	ip, r4, #32
 800a184:	4637      	mov	r7, r6
 800a186:	6820      	ldr	r0, [r4, #0]
 800a188:	6861      	ldr	r1, [r4, #4]
 800a18a:	3408      	adds	r4, #8
 800a18c:	c703      	stmia	r7!, {r0, r1}
 800a18e:	4564      	cmp	r4, ip
 800a190:	463e      	mov	r6, r7
 800a192:	d1f7      	bne.n	800a184 <__utoa+0x10>
 800a194:	7921      	ldrb	r1, [r4, #4]
 800a196:	6820      	ldr	r0, [r4, #0]
 800a198:	7139      	strb	r1, [r7, #4]
 800a19a:	1e91      	subs	r1, r2, #2
 800a19c:	2922      	cmp	r1, #34	; 0x22
 800a19e:	6038      	str	r0, [r7, #0]
 800a1a0:	f04f 0100 	mov.w	r1, #0
 800a1a4:	d904      	bls.n	800a1b0 <__utoa+0x3c>
 800a1a6:	7019      	strb	r1, [r3, #0]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	b00b      	add	sp, #44	; 0x2c
 800a1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1b0:	1e58      	subs	r0, r3, #1
 800a1b2:	4684      	mov	ip, r0
 800a1b4:	fbb5 f7f2 	udiv	r7, r5, r2
 800a1b8:	fb02 5617 	mls	r6, r2, r7, r5
 800a1bc:	3628      	adds	r6, #40	; 0x28
 800a1be:	446e      	add	r6, sp
 800a1c0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a1ca:	462e      	mov	r6, r5
 800a1cc:	42b2      	cmp	r2, r6
 800a1ce:	463d      	mov	r5, r7
 800a1d0:	f101 0101 	add.w	r1, r1, #1
 800a1d4:	d9ee      	bls.n	800a1b4 <__utoa+0x40>
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	545a      	strb	r2, [r3, r1]
 800a1da:	1919      	adds	r1, r3, r4
 800a1dc:	1aa5      	subs	r5, r4, r2
 800a1de:	42aa      	cmp	r2, r5
 800a1e0:	dae3      	bge.n	800a1aa <__utoa+0x36>
 800a1e2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a1e6:	780e      	ldrb	r6, [r1, #0]
 800a1e8:	3201      	adds	r2, #1
 800a1ea:	7006      	strb	r6, [r0, #0]
 800a1ec:	f801 5901 	strb.w	r5, [r1], #-1
 800a1f0:	e7f4      	b.n	800a1dc <__utoa+0x68>
 800a1f2:	bf00      	nop
 800a1f4:	0800ac68 	.word	0x0800ac68

0800a1f8 <__malloc_lock>:
 800a1f8:	4801      	ldr	r0, [pc, #4]	; (800a200 <__malloc_lock+0x8>)
 800a1fa:	f7ff be5d 	b.w	8009eb8 <__retarget_lock_acquire_recursive>
 800a1fe:	bf00      	nop
 800a200:	20003c20 	.word	0x20003c20

0800a204 <__malloc_unlock>:
 800a204:	4801      	ldr	r0, [pc, #4]	; (800a20c <__malloc_unlock+0x8>)
 800a206:	f7ff be58 	b.w	8009eba <__retarget_lock_release_recursive>
 800a20a:	bf00      	nop
 800a20c:	20003c20 	.word	0x20003c20

0800a210 <_free_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4605      	mov	r5, r0
 800a214:	2900      	cmp	r1, #0
 800a216:	d040      	beq.n	800a29a <_free_r+0x8a>
 800a218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a21c:	1f0c      	subs	r4, r1, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	bfb8      	it	lt
 800a222:	18e4      	addlt	r4, r4, r3
 800a224:	f7ff ffe8 	bl	800a1f8 <__malloc_lock>
 800a228:	4a1c      	ldr	r2, [pc, #112]	; (800a29c <_free_r+0x8c>)
 800a22a:	6813      	ldr	r3, [r2, #0]
 800a22c:	b933      	cbnz	r3, 800a23c <_free_r+0x2c>
 800a22e:	6063      	str	r3, [r4, #4]
 800a230:	6014      	str	r4, [r2, #0]
 800a232:	4628      	mov	r0, r5
 800a234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a238:	f7ff bfe4 	b.w	800a204 <__malloc_unlock>
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	d908      	bls.n	800a252 <_free_r+0x42>
 800a240:	6820      	ldr	r0, [r4, #0]
 800a242:	1821      	adds	r1, r4, r0
 800a244:	428b      	cmp	r3, r1
 800a246:	bf01      	itttt	eq
 800a248:	6819      	ldreq	r1, [r3, #0]
 800a24a:	685b      	ldreq	r3, [r3, #4]
 800a24c:	1809      	addeq	r1, r1, r0
 800a24e:	6021      	streq	r1, [r4, #0]
 800a250:	e7ed      	b.n	800a22e <_free_r+0x1e>
 800a252:	461a      	mov	r2, r3
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	b10b      	cbz	r3, 800a25c <_free_r+0x4c>
 800a258:	42a3      	cmp	r3, r4
 800a25a:	d9fa      	bls.n	800a252 <_free_r+0x42>
 800a25c:	6811      	ldr	r1, [r2, #0]
 800a25e:	1850      	adds	r0, r2, r1
 800a260:	42a0      	cmp	r0, r4
 800a262:	d10b      	bne.n	800a27c <_free_r+0x6c>
 800a264:	6820      	ldr	r0, [r4, #0]
 800a266:	4401      	add	r1, r0
 800a268:	1850      	adds	r0, r2, r1
 800a26a:	4283      	cmp	r3, r0
 800a26c:	6011      	str	r1, [r2, #0]
 800a26e:	d1e0      	bne.n	800a232 <_free_r+0x22>
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	4401      	add	r1, r0
 800a276:	6011      	str	r1, [r2, #0]
 800a278:	6053      	str	r3, [r2, #4]
 800a27a:	e7da      	b.n	800a232 <_free_r+0x22>
 800a27c:	d902      	bls.n	800a284 <_free_r+0x74>
 800a27e:	230c      	movs	r3, #12
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	e7d6      	b.n	800a232 <_free_r+0x22>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	1821      	adds	r1, r4, r0
 800a288:	428b      	cmp	r3, r1
 800a28a:	bf01      	itttt	eq
 800a28c:	6819      	ldreq	r1, [r3, #0]
 800a28e:	685b      	ldreq	r3, [r3, #4]
 800a290:	1809      	addeq	r1, r1, r0
 800a292:	6021      	streq	r1, [r4, #0]
 800a294:	6063      	str	r3, [r4, #4]
 800a296:	6054      	str	r4, [r2, #4]
 800a298:	e7cb      	b.n	800a232 <_free_r+0x22>
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	20003c24 	.word	0x20003c24

0800a2a0 <__ssputs_r>:
 800a2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a4:	688e      	ldr	r6, [r1, #8]
 800a2a6:	4682      	mov	sl, r0
 800a2a8:	429e      	cmp	r6, r3
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	4690      	mov	r8, r2
 800a2ae:	461f      	mov	r7, r3
 800a2b0:	d838      	bhi.n	800a324 <__ssputs_r+0x84>
 800a2b2:	898a      	ldrh	r2, [r1, #12]
 800a2b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2b8:	d032      	beq.n	800a320 <__ssputs_r+0x80>
 800a2ba:	6825      	ldr	r5, [r4, #0]
 800a2bc:	6909      	ldr	r1, [r1, #16]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	eba5 0901 	sub.w	r9, r5, r1
 800a2c4:	6965      	ldr	r5, [r4, #20]
 800a2c6:	444b      	add	r3, r9
 800a2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2d0:	106d      	asrs	r5, r5, #1
 800a2d2:	429d      	cmp	r5, r3
 800a2d4:	bf38      	it	cc
 800a2d6:	461d      	movcc	r5, r3
 800a2d8:	0553      	lsls	r3, r2, #21
 800a2da:	d531      	bpl.n	800a340 <__ssputs_r+0xa0>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	f7ff fe23 	bl	8009f28 <_malloc_r>
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	b950      	cbnz	r0, 800a2fc <__ssputs_r+0x5c>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2ec:	f8ca 3000 	str.w	r3, [sl]
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2fc:	464a      	mov	r2, r9
 800a2fe:	6921      	ldr	r1, [r4, #16]
 800a300:	f7ff fddc 	bl	8009ebc <memcpy>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	6126      	str	r6, [r4, #16]
 800a312:	444e      	add	r6, r9
 800a314:	6026      	str	r6, [r4, #0]
 800a316:	463e      	mov	r6, r7
 800a318:	6165      	str	r5, [r4, #20]
 800a31a:	eba5 0509 	sub.w	r5, r5, r9
 800a31e:	60a5      	str	r5, [r4, #8]
 800a320:	42be      	cmp	r6, r7
 800a322:	d900      	bls.n	800a326 <__ssputs_r+0x86>
 800a324:	463e      	mov	r6, r7
 800a326:	4632      	mov	r2, r6
 800a328:	4641      	mov	r1, r8
 800a32a:	6820      	ldr	r0, [r4, #0]
 800a32c:	f000 fab8 	bl	800a8a0 <memmove>
 800a330:	68a3      	ldr	r3, [r4, #8]
 800a332:	2000      	movs	r0, #0
 800a334:	1b9b      	subs	r3, r3, r6
 800a336:	60a3      	str	r3, [r4, #8]
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	4433      	add	r3, r6
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	e7db      	b.n	800a2f8 <__ssputs_r+0x58>
 800a340:	462a      	mov	r2, r5
 800a342:	f000 fac7 	bl	800a8d4 <_realloc_r>
 800a346:	4606      	mov	r6, r0
 800a348:	2800      	cmp	r0, #0
 800a34a:	d1e1      	bne.n	800a310 <__ssputs_r+0x70>
 800a34c:	4650      	mov	r0, sl
 800a34e:	6921      	ldr	r1, [r4, #16]
 800a350:	f7ff ff5e 	bl	800a210 <_free_r>
 800a354:	e7c7      	b.n	800a2e6 <__ssputs_r+0x46>
	...

0800a358 <_svfiprintf_r>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	4698      	mov	r8, r3
 800a35e:	898b      	ldrh	r3, [r1, #12]
 800a360:	4607      	mov	r7, r0
 800a362:	061b      	lsls	r3, r3, #24
 800a364:	460d      	mov	r5, r1
 800a366:	4614      	mov	r4, r2
 800a368:	b09d      	sub	sp, #116	; 0x74
 800a36a:	d50e      	bpl.n	800a38a <_svfiprintf_r+0x32>
 800a36c:	690b      	ldr	r3, [r1, #16]
 800a36e:	b963      	cbnz	r3, 800a38a <_svfiprintf_r+0x32>
 800a370:	2140      	movs	r1, #64	; 0x40
 800a372:	f7ff fdd9 	bl	8009f28 <_malloc_r>
 800a376:	6028      	str	r0, [r5, #0]
 800a378:	6128      	str	r0, [r5, #16]
 800a37a:	b920      	cbnz	r0, 800a386 <_svfiprintf_r+0x2e>
 800a37c:	230c      	movs	r3, #12
 800a37e:	603b      	str	r3, [r7, #0]
 800a380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a384:	e0d1      	b.n	800a52a <_svfiprintf_r+0x1d2>
 800a386:	2340      	movs	r3, #64	; 0x40
 800a388:	616b      	str	r3, [r5, #20]
 800a38a:	2300      	movs	r3, #0
 800a38c:	9309      	str	r3, [sp, #36]	; 0x24
 800a38e:	2320      	movs	r3, #32
 800a390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a394:	2330      	movs	r3, #48	; 0x30
 800a396:	f04f 0901 	mov.w	r9, #1
 800a39a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a39e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a544 <_svfiprintf_r+0x1ec>
 800a3a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3a6:	4623      	mov	r3, r4
 800a3a8:	469a      	mov	sl, r3
 800a3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ae:	b10a      	cbz	r2, 800a3b4 <_svfiprintf_r+0x5c>
 800a3b0:	2a25      	cmp	r2, #37	; 0x25
 800a3b2:	d1f9      	bne.n	800a3a8 <_svfiprintf_r+0x50>
 800a3b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b8:	d00b      	beq.n	800a3d2 <_svfiprintf_r+0x7a>
 800a3ba:	465b      	mov	r3, fp
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	f7ff ff6d 	bl	800a2a0 <__ssputs_r>
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	f000 80aa 	beq.w	800a520 <_svfiprintf_r+0x1c8>
 800a3cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ce:	445a      	add	r2, fp
 800a3d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 80a2 	beq.w	800a520 <_svfiprintf_r+0x1c8>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e6:	f10a 0a01 	add.w	sl, sl, #1
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	9307      	str	r3, [sp, #28]
 800a3ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f4:	4654      	mov	r4, sl
 800a3f6:	2205      	movs	r2, #5
 800a3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3fc:	4851      	ldr	r0, [pc, #324]	; (800a544 <_svfiprintf_r+0x1ec>)
 800a3fe:	f000 fa41 	bl	800a884 <memchr>
 800a402:	9a04      	ldr	r2, [sp, #16]
 800a404:	b9d8      	cbnz	r0, 800a43e <_svfiprintf_r+0xe6>
 800a406:	06d0      	lsls	r0, r2, #27
 800a408:	bf44      	itt	mi
 800a40a:	2320      	movmi	r3, #32
 800a40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a410:	0711      	lsls	r1, r2, #28
 800a412:	bf44      	itt	mi
 800a414:	232b      	movmi	r3, #43	; 0x2b
 800a416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a41a:	f89a 3000 	ldrb.w	r3, [sl]
 800a41e:	2b2a      	cmp	r3, #42	; 0x2a
 800a420:	d015      	beq.n	800a44e <_svfiprintf_r+0xf6>
 800a422:	4654      	mov	r4, sl
 800a424:	2000      	movs	r0, #0
 800a426:	f04f 0c0a 	mov.w	ip, #10
 800a42a:	9a07      	ldr	r2, [sp, #28]
 800a42c:	4621      	mov	r1, r4
 800a42e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a432:	3b30      	subs	r3, #48	; 0x30
 800a434:	2b09      	cmp	r3, #9
 800a436:	d94e      	bls.n	800a4d6 <_svfiprintf_r+0x17e>
 800a438:	b1b0      	cbz	r0, 800a468 <_svfiprintf_r+0x110>
 800a43a:	9207      	str	r2, [sp, #28]
 800a43c:	e014      	b.n	800a468 <_svfiprintf_r+0x110>
 800a43e:	eba0 0308 	sub.w	r3, r0, r8
 800a442:	fa09 f303 	lsl.w	r3, r9, r3
 800a446:	4313      	orrs	r3, r2
 800a448:	46a2      	mov	sl, r4
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	e7d2      	b.n	800a3f4 <_svfiprintf_r+0x9c>
 800a44e:	9b03      	ldr	r3, [sp, #12]
 800a450:	1d19      	adds	r1, r3, #4
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	9103      	str	r1, [sp, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	bfbb      	ittet	lt
 800a45a:	425b      	neglt	r3, r3
 800a45c:	f042 0202 	orrlt.w	r2, r2, #2
 800a460:	9307      	strge	r3, [sp, #28]
 800a462:	9307      	strlt	r3, [sp, #28]
 800a464:	bfb8      	it	lt
 800a466:	9204      	strlt	r2, [sp, #16]
 800a468:	7823      	ldrb	r3, [r4, #0]
 800a46a:	2b2e      	cmp	r3, #46	; 0x2e
 800a46c:	d10c      	bne.n	800a488 <_svfiprintf_r+0x130>
 800a46e:	7863      	ldrb	r3, [r4, #1]
 800a470:	2b2a      	cmp	r3, #42	; 0x2a
 800a472:	d135      	bne.n	800a4e0 <_svfiprintf_r+0x188>
 800a474:	9b03      	ldr	r3, [sp, #12]
 800a476:	3402      	adds	r4, #2
 800a478:	1d1a      	adds	r2, r3, #4
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	9203      	str	r2, [sp, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bfb8      	it	lt
 800a482:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a486:	9305      	str	r3, [sp, #20]
 800a488:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a548 <_svfiprintf_r+0x1f0>
 800a48c:	2203      	movs	r2, #3
 800a48e:	4650      	mov	r0, sl
 800a490:	7821      	ldrb	r1, [r4, #0]
 800a492:	f000 f9f7 	bl	800a884 <memchr>
 800a496:	b140      	cbz	r0, 800a4aa <_svfiprintf_r+0x152>
 800a498:	2340      	movs	r3, #64	; 0x40
 800a49a:	eba0 000a 	sub.w	r0, r0, sl
 800a49e:	fa03 f000 	lsl.w	r0, r3, r0
 800a4a2:	9b04      	ldr	r3, [sp, #16]
 800a4a4:	3401      	adds	r4, #1
 800a4a6:	4303      	orrs	r3, r0
 800a4a8:	9304      	str	r3, [sp, #16]
 800a4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ae:	2206      	movs	r2, #6
 800a4b0:	4826      	ldr	r0, [pc, #152]	; (800a54c <_svfiprintf_r+0x1f4>)
 800a4b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b6:	f000 f9e5 	bl	800a884 <memchr>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d038      	beq.n	800a530 <_svfiprintf_r+0x1d8>
 800a4be:	4b24      	ldr	r3, [pc, #144]	; (800a550 <_svfiprintf_r+0x1f8>)
 800a4c0:	bb1b      	cbnz	r3, 800a50a <_svfiprintf_r+0x1b2>
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	3307      	adds	r3, #7
 800a4c6:	f023 0307 	bic.w	r3, r3, #7
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	9303      	str	r3, [sp, #12]
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	4433      	add	r3, r6
 800a4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d4:	e767      	b.n	800a3a6 <_svfiprintf_r+0x4e>
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	2001      	movs	r0, #1
 800a4da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4de:	e7a5      	b.n	800a42c <_svfiprintf_r+0xd4>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f04f 0c0a 	mov.w	ip, #10
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	3401      	adds	r4, #1
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f2:	3a30      	subs	r2, #48	; 0x30
 800a4f4:	2a09      	cmp	r2, #9
 800a4f6:	d903      	bls.n	800a500 <_svfiprintf_r+0x1a8>
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0c5      	beq.n	800a488 <_svfiprintf_r+0x130>
 800a4fc:	9105      	str	r1, [sp, #20]
 800a4fe:	e7c3      	b.n	800a488 <_svfiprintf_r+0x130>
 800a500:	4604      	mov	r4, r0
 800a502:	2301      	movs	r3, #1
 800a504:	fb0c 2101 	mla	r1, ip, r1, r2
 800a508:	e7f0      	b.n	800a4ec <_svfiprintf_r+0x194>
 800a50a:	ab03      	add	r3, sp, #12
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	462a      	mov	r2, r5
 800a510:	4638      	mov	r0, r7
 800a512:	4b10      	ldr	r3, [pc, #64]	; (800a554 <_svfiprintf_r+0x1fc>)
 800a514:	a904      	add	r1, sp, #16
 800a516:	f3af 8000 	nop.w
 800a51a:	1c42      	adds	r2, r0, #1
 800a51c:	4606      	mov	r6, r0
 800a51e:	d1d6      	bne.n	800a4ce <_svfiprintf_r+0x176>
 800a520:	89ab      	ldrh	r3, [r5, #12]
 800a522:	065b      	lsls	r3, r3, #25
 800a524:	f53f af2c 	bmi.w	800a380 <_svfiprintf_r+0x28>
 800a528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52a:	b01d      	add	sp, #116	; 0x74
 800a52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a530:	ab03      	add	r3, sp, #12
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	462a      	mov	r2, r5
 800a536:	4638      	mov	r0, r7
 800a538:	4b06      	ldr	r3, [pc, #24]	; (800a554 <_svfiprintf_r+0x1fc>)
 800a53a:	a904      	add	r1, sp, #16
 800a53c:	f000 f87c 	bl	800a638 <_printf_i>
 800a540:	e7eb      	b.n	800a51a <_svfiprintf_r+0x1c2>
 800a542:	bf00      	nop
 800a544:	0800ac8d 	.word	0x0800ac8d
 800a548:	0800ac93 	.word	0x0800ac93
 800a54c:	0800ac97 	.word	0x0800ac97
 800a550:	00000000 	.word	0x00000000
 800a554:	0800a2a1 	.word	0x0800a2a1

0800a558 <_printf_common>:
 800a558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a55c:	4616      	mov	r6, r2
 800a55e:	4699      	mov	r9, r3
 800a560:	688a      	ldr	r2, [r1, #8]
 800a562:	690b      	ldr	r3, [r1, #16]
 800a564:	4607      	mov	r7, r0
 800a566:	4293      	cmp	r3, r2
 800a568:	bfb8      	it	lt
 800a56a:	4613      	movlt	r3, r2
 800a56c:	6033      	str	r3, [r6, #0]
 800a56e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a572:	460c      	mov	r4, r1
 800a574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a578:	b10a      	cbz	r2, 800a57e <_printf_common+0x26>
 800a57a:	3301      	adds	r3, #1
 800a57c:	6033      	str	r3, [r6, #0]
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	0699      	lsls	r1, r3, #26
 800a582:	bf42      	ittt	mi
 800a584:	6833      	ldrmi	r3, [r6, #0]
 800a586:	3302      	addmi	r3, #2
 800a588:	6033      	strmi	r3, [r6, #0]
 800a58a:	6825      	ldr	r5, [r4, #0]
 800a58c:	f015 0506 	ands.w	r5, r5, #6
 800a590:	d106      	bne.n	800a5a0 <_printf_common+0x48>
 800a592:	f104 0a19 	add.w	sl, r4, #25
 800a596:	68e3      	ldr	r3, [r4, #12]
 800a598:	6832      	ldr	r2, [r6, #0]
 800a59a:	1a9b      	subs	r3, r3, r2
 800a59c:	42ab      	cmp	r3, r5
 800a59e:	dc28      	bgt.n	800a5f2 <_printf_common+0x9a>
 800a5a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5a4:	1e13      	subs	r3, r2, #0
 800a5a6:	6822      	ldr	r2, [r4, #0]
 800a5a8:	bf18      	it	ne
 800a5aa:	2301      	movne	r3, #1
 800a5ac:	0692      	lsls	r2, r2, #26
 800a5ae:	d42d      	bmi.n	800a60c <_printf_common+0xb4>
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5b8:	47c0      	blx	r8
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	d020      	beq.n	800a600 <_printf_common+0xa8>
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	68e5      	ldr	r5, [r4, #12]
 800a5c2:	f003 0306 	and.w	r3, r3, #6
 800a5c6:	2b04      	cmp	r3, #4
 800a5c8:	bf18      	it	ne
 800a5ca:	2500      	movne	r5, #0
 800a5cc:	6832      	ldr	r2, [r6, #0]
 800a5ce:	f04f 0600 	mov.w	r6, #0
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	bf08      	it	eq
 800a5d6:	1aad      	subeq	r5, r5, r2
 800a5d8:	6922      	ldr	r2, [r4, #16]
 800a5da:	bf08      	it	eq
 800a5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	bfc4      	itt	gt
 800a5e4:	1a9b      	subgt	r3, r3, r2
 800a5e6:	18ed      	addgt	r5, r5, r3
 800a5e8:	341a      	adds	r4, #26
 800a5ea:	42b5      	cmp	r5, r6
 800a5ec:	d11a      	bne.n	800a624 <_printf_common+0xcc>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e008      	b.n	800a604 <_printf_common+0xac>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	4652      	mov	r2, sl
 800a5f6:	4649      	mov	r1, r9
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	47c0      	blx	r8
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d103      	bne.n	800a608 <_printf_common+0xb0>
 800a600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a608:	3501      	adds	r5, #1
 800a60a:	e7c4      	b.n	800a596 <_printf_common+0x3e>
 800a60c:	2030      	movs	r0, #48	; 0x30
 800a60e:	18e1      	adds	r1, r4, r3
 800a610:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a61a:	4422      	add	r2, r4
 800a61c:	3302      	adds	r3, #2
 800a61e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a622:	e7c5      	b.n	800a5b0 <_printf_common+0x58>
 800a624:	2301      	movs	r3, #1
 800a626:	4622      	mov	r2, r4
 800a628:	4649      	mov	r1, r9
 800a62a:	4638      	mov	r0, r7
 800a62c:	47c0      	blx	r8
 800a62e:	3001      	adds	r0, #1
 800a630:	d0e6      	beq.n	800a600 <_printf_common+0xa8>
 800a632:	3601      	adds	r6, #1
 800a634:	e7d9      	b.n	800a5ea <_printf_common+0x92>
	...

0800a638 <_printf_i>:
 800a638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a63c:	7e0f      	ldrb	r7, [r1, #24]
 800a63e:	4691      	mov	r9, r2
 800a640:	2f78      	cmp	r7, #120	; 0x78
 800a642:	4680      	mov	r8, r0
 800a644:	460c      	mov	r4, r1
 800a646:	469a      	mov	sl, r3
 800a648:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a64a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a64e:	d807      	bhi.n	800a660 <_printf_i+0x28>
 800a650:	2f62      	cmp	r7, #98	; 0x62
 800a652:	d80a      	bhi.n	800a66a <_printf_i+0x32>
 800a654:	2f00      	cmp	r7, #0
 800a656:	f000 80d9 	beq.w	800a80c <_printf_i+0x1d4>
 800a65a:	2f58      	cmp	r7, #88	; 0x58
 800a65c:	f000 80a4 	beq.w	800a7a8 <_printf_i+0x170>
 800a660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a668:	e03a      	b.n	800a6e0 <_printf_i+0xa8>
 800a66a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a66e:	2b15      	cmp	r3, #21
 800a670:	d8f6      	bhi.n	800a660 <_printf_i+0x28>
 800a672:	a101      	add	r1, pc, #4	; (adr r1, 800a678 <_printf_i+0x40>)
 800a674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a678:	0800a6d1 	.word	0x0800a6d1
 800a67c:	0800a6e5 	.word	0x0800a6e5
 800a680:	0800a661 	.word	0x0800a661
 800a684:	0800a661 	.word	0x0800a661
 800a688:	0800a661 	.word	0x0800a661
 800a68c:	0800a661 	.word	0x0800a661
 800a690:	0800a6e5 	.word	0x0800a6e5
 800a694:	0800a661 	.word	0x0800a661
 800a698:	0800a661 	.word	0x0800a661
 800a69c:	0800a661 	.word	0x0800a661
 800a6a0:	0800a661 	.word	0x0800a661
 800a6a4:	0800a7f3 	.word	0x0800a7f3
 800a6a8:	0800a715 	.word	0x0800a715
 800a6ac:	0800a7d5 	.word	0x0800a7d5
 800a6b0:	0800a661 	.word	0x0800a661
 800a6b4:	0800a661 	.word	0x0800a661
 800a6b8:	0800a815 	.word	0x0800a815
 800a6bc:	0800a661 	.word	0x0800a661
 800a6c0:	0800a715 	.word	0x0800a715
 800a6c4:	0800a661 	.word	0x0800a661
 800a6c8:	0800a661 	.word	0x0800a661
 800a6cc:	0800a7dd 	.word	0x0800a7dd
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	1d1a      	adds	r2, r3, #4
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	602a      	str	r2, [r5, #0]
 800a6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e0a4      	b.n	800a82e <_printf_i+0x1f6>
 800a6e4:	6820      	ldr	r0, [r4, #0]
 800a6e6:	6829      	ldr	r1, [r5, #0]
 800a6e8:	0606      	lsls	r6, r0, #24
 800a6ea:	f101 0304 	add.w	r3, r1, #4
 800a6ee:	d50a      	bpl.n	800a706 <_printf_i+0xce>
 800a6f0:	680e      	ldr	r6, [r1, #0]
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	2e00      	cmp	r6, #0
 800a6f6:	da03      	bge.n	800a700 <_printf_i+0xc8>
 800a6f8:	232d      	movs	r3, #45	; 0x2d
 800a6fa:	4276      	negs	r6, r6
 800a6fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a700:	230a      	movs	r3, #10
 800a702:	485e      	ldr	r0, [pc, #376]	; (800a87c <_printf_i+0x244>)
 800a704:	e019      	b.n	800a73a <_printf_i+0x102>
 800a706:	680e      	ldr	r6, [r1, #0]
 800a708:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	bf18      	it	ne
 800a710:	b236      	sxthne	r6, r6
 800a712:	e7ef      	b.n	800a6f4 <_printf_i+0xbc>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	6820      	ldr	r0, [r4, #0]
 800a718:	1d19      	adds	r1, r3, #4
 800a71a:	6029      	str	r1, [r5, #0]
 800a71c:	0601      	lsls	r1, r0, #24
 800a71e:	d501      	bpl.n	800a724 <_printf_i+0xec>
 800a720:	681e      	ldr	r6, [r3, #0]
 800a722:	e002      	b.n	800a72a <_printf_i+0xf2>
 800a724:	0646      	lsls	r6, r0, #25
 800a726:	d5fb      	bpl.n	800a720 <_printf_i+0xe8>
 800a728:	881e      	ldrh	r6, [r3, #0]
 800a72a:	2f6f      	cmp	r7, #111	; 0x6f
 800a72c:	bf0c      	ite	eq
 800a72e:	2308      	moveq	r3, #8
 800a730:	230a      	movne	r3, #10
 800a732:	4852      	ldr	r0, [pc, #328]	; (800a87c <_printf_i+0x244>)
 800a734:	2100      	movs	r1, #0
 800a736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a73a:	6865      	ldr	r5, [r4, #4]
 800a73c:	2d00      	cmp	r5, #0
 800a73e:	bfa8      	it	ge
 800a740:	6821      	ldrge	r1, [r4, #0]
 800a742:	60a5      	str	r5, [r4, #8]
 800a744:	bfa4      	itt	ge
 800a746:	f021 0104 	bicge.w	r1, r1, #4
 800a74a:	6021      	strge	r1, [r4, #0]
 800a74c:	b90e      	cbnz	r6, 800a752 <_printf_i+0x11a>
 800a74e:	2d00      	cmp	r5, #0
 800a750:	d04d      	beq.n	800a7ee <_printf_i+0x1b6>
 800a752:	4615      	mov	r5, r2
 800a754:	fbb6 f1f3 	udiv	r1, r6, r3
 800a758:	fb03 6711 	mls	r7, r3, r1, r6
 800a75c:	5dc7      	ldrb	r7, [r0, r7]
 800a75e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a762:	4637      	mov	r7, r6
 800a764:	42bb      	cmp	r3, r7
 800a766:	460e      	mov	r6, r1
 800a768:	d9f4      	bls.n	800a754 <_printf_i+0x11c>
 800a76a:	2b08      	cmp	r3, #8
 800a76c:	d10b      	bne.n	800a786 <_printf_i+0x14e>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	07de      	lsls	r6, r3, #31
 800a772:	d508      	bpl.n	800a786 <_printf_i+0x14e>
 800a774:	6923      	ldr	r3, [r4, #16]
 800a776:	6861      	ldr	r1, [r4, #4]
 800a778:	4299      	cmp	r1, r3
 800a77a:	bfde      	ittt	le
 800a77c:	2330      	movle	r3, #48	; 0x30
 800a77e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a782:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a786:	1b52      	subs	r2, r2, r5
 800a788:	6122      	str	r2, [r4, #16]
 800a78a:	464b      	mov	r3, r9
 800a78c:	4621      	mov	r1, r4
 800a78e:	4640      	mov	r0, r8
 800a790:	f8cd a000 	str.w	sl, [sp]
 800a794:	aa03      	add	r2, sp, #12
 800a796:	f7ff fedf 	bl	800a558 <_printf_common>
 800a79a:	3001      	adds	r0, #1
 800a79c:	d14c      	bne.n	800a838 <_printf_i+0x200>
 800a79e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7a2:	b004      	add	sp, #16
 800a7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a8:	4834      	ldr	r0, [pc, #208]	; (800a87c <_printf_i+0x244>)
 800a7aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7ae:	6829      	ldr	r1, [r5, #0]
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7b6:	6029      	str	r1, [r5, #0]
 800a7b8:	061d      	lsls	r5, r3, #24
 800a7ba:	d514      	bpl.n	800a7e6 <_printf_i+0x1ae>
 800a7bc:	07df      	lsls	r7, r3, #31
 800a7be:	bf44      	itt	mi
 800a7c0:	f043 0320 	orrmi.w	r3, r3, #32
 800a7c4:	6023      	strmi	r3, [r4, #0]
 800a7c6:	b91e      	cbnz	r6, 800a7d0 <_printf_i+0x198>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	f023 0320 	bic.w	r3, r3, #32
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	2310      	movs	r3, #16
 800a7d2:	e7af      	b.n	800a734 <_printf_i+0xfc>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	f043 0320 	orr.w	r3, r3, #32
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	2378      	movs	r3, #120	; 0x78
 800a7de:	4828      	ldr	r0, [pc, #160]	; (800a880 <_printf_i+0x248>)
 800a7e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7e4:	e7e3      	b.n	800a7ae <_printf_i+0x176>
 800a7e6:	0659      	lsls	r1, r3, #25
 800a7e8:	bf48      	it	mi
 800a7ea:	b2b6      	uxthmi	r6, r6
 800a7ec:	e7e6      	b.n	800a7bc <_printf_i+0x184>
 800a7ee:	4615      	mov	r5, r2
 800a7f0:	e7bb      	b.n	800a76a <_printf_i+0x132>
 800a7f2:	682b      	ldr	r3, [r5, #0]
 800a7f4:	6826      	ldr	r6, [r4, #0]
 800a7f6:	1d18      	adds	r0, r3, #4
 800a7f8:	6961      	ldr	r1, [r4, #20]
 800a7fa:	6028      	str	r0, [r5, #0]
 800a7fc:	0635      	lsls	r5, r6, #24
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	d501      	bpl.n	800a806 <_printf_i+0x1ce>
 800a802:	6019      	str	r1, [r3, #0]
 800a804:	e002      	b.n	800a80c <_printf_i+0x1d4>
 800a806:	0670      	lsls	r0, r6, #25
 800a808:	d5fb      	bpl.n	800a802 <_printf_i+0x1ca>
 800a80a:	8019      	strh	r1, [r3, #0]
 800a80c:	2300      	movs	r3, #0
 800a80e:	4615      	mov	r5, r2
 800a810:	6123      	str	r3, [r4, #16]
 800a812:	e7ba      	b.n	800a78a <_printf_i+0x152>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	2100      	movs	r1, #0
 800a818:	1d1a      	adds	r2, r3, #4
 800a81a:	602a      	str	r2, [r5, #0]
 800a81c:	681d      	ldr	r5, [r3, #0]
 800a81e:	6862      	ldr	r2, [r4, #4]
 800a820:	4628      	mov	r0, r5
 800a822:	f000 f82f 	bl	800a884 <memchr>
 800a826:	b108      	cbz	r0, 800a82c <_printf_i+0x1f4>
 800a828:	1b40      	subs	r0, r0, r5
 800a82a:	6060      	str	r0, [r4, #4]
 800a82c:	6863      	ldr	r3, [r4, #4]
 800a82e:	6123      	str	r3, [r4, #16]
 800a830:	2300      	movs	r3, #0
 800a832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a836:	e7a8      	b.n	800a78a <_printf_i+0x152>
 800a838:	462a      	mov	r2, r5
 800a83a:	4649      	mov	r1, r9
 800a83c:	4640      	mov	r0, r8
 800a83e:	6923      	ldr	r3, [r4, #16]
 800a840:	47d0      	blx	sl
 800a842:	3001      	adds	r0, #1
 800a844:	d0ab      	beq.n	800a79e <_printf_i+0x166>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	079b      	lsls	r3, r3, #30
 800a84a:	d413      	bmi.n	800a874 <_printf_i+0x23c>
 800a84c:	68e0      	ldr	r0, [r4, #12]
 800a84e:	9b03      	ldr	r3, [sp, #12]
 800a850:	4298      	cmp	r0, r3
 800a852:	bfb8      	it	lt
 800a854:	4618      	movlt	r0, r3
 800a856:	e7a4      	b.n	800a7a2 <_printf_i+0x16a>
 800a858:	2301      	movs	r3, #1
 800a85a:	4632      	mov	r2, r6
 800a85c:	4649      	mov	r1, r9
 800a85e:	4640      	mov	r0, r8
 800a860:	47d0      	blx	sl
 800a862:	3001      	adds	r0, #1
 800a864:	d09b      	beq.n	800a79e <_printf_i+0x166>
 800a866:	3501      	adds	r5, #1
 800a868:	68e3      	ldr	r3, [r4, #12]
 800a86a:	9903      	ldr	r1, [sp, #12]
 800a86c:	1a5b      	subs	r3, r3, r1
 800a86e:	42ab      	cmp	r3, r5
 800a870:	dcf2      	bgt.n	800a858 <_printf_i+0x220>
 800a872:	e7eb      	b.n	800a84c <_printf_i+0x214>
 800a874:	2500      	movs	r5, #0
 800a876:	f104 0619 	add.w	r6, r4, #25
 800a87a:	e7f5      	b.n	800a868 <_printf_i+0x230>
 800a87c:	0800ac9e 	.word	0x0800ac9e
 800a880:	0800acaf 	.word	0x0800acaf

0800a884 <memchr>:
 800a884:	4603      	mov	r3, r0
 800a886:	b510      	push	{r4, lr}
 800a888:	b2c9      	uxtb	r1, r1
 800a88a:	4402      	add	r2, r0
 800a88c:	4293      	cmp	r3, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	d101      	bne.n	800a896 <memchr+0x12>
 800a892:	2000      	movs	r0, #0
 800a894:	e003      	b.n	800a89e <memchr+0x1a>
 800a896:	7804      	ldrb	r4, [r0, #0]
 800a898:	3301      	adds	r3, #1
 800a89a:	428c      	cmp	r4, r1
 800a89c:	d1f6      	bne.n	800a88c <memchr+0x8>
 800a89e:	bd10      	pop	{r4, pc}

0800a8a0 <memmove>:
 800a8a0:	4288      	cmp	r0, r1
 800a8a2:	b510      	push	{r4, lr}
 800a8a4:	eb01 0402 	add.w	r4, r1, r2
 800a8a8:	d902      	bls.n	800a8b0 <memmove+0x10>
 800a8aa:	4284      	cmp	r4, r0
 800a8ac:	4623      	mov	r3, r4
 800a8ae:	d807      	bhi.n	800a8c0 <memmove+0x20>
 800a8b0:	1e43      	subs	r3, r0, #1
 800a8b2:	42a1      	cmp	r1, r4
 800a8b4:	d008      	beq.n	800a8c8 <memmove+0x28>
 800a8b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8be:	e7f8      	b.n	800a8b2 <memmove+0x12>
 800a8c0:	4601      	mov	r1, r0
 800a8c2:	4402      	add	r2, r0
 800a8c4:	428a      	cmp	r2, r1
 800a8c6:	d100      	bne.n	800a8ca <memmove+0x2a>
 800a8c8:	bd10      	pop	{r4, pc}
 800a8ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8d2:	e7f7      	b.n	800a8c4 <memmove+0x24>

0800a8d4 <_realloc_r>:
 800a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	4680      	mov	r8, r0
 800a8da:	4614      	mov	r4, r2
 800a8dc:	460e      	mov	r6, r1
 800a8de:	b921      	cbnz	r1, 800a8ea <_realloc_r+0x16>
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e6:	f7ff bb1f 	b.w	8009f28 <_malloc_r>
 800a8ea:	b92a      	cbnz	r2, 800a8f8 <_realloc_r+0x24>
 800a8ec:	f7ff fc90 	bl	800a210 <_free_r>
 800a8f0:	4625      	mov	r5, r4
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f8:	f000 f81b 	bl	800a932 <_malloc_usable_size_r>
 800a8fc:	4284      	cmp	r4, r0
 800a8fe:	4607      	mov	r7, r0
 800a900:	d802      	bhi.n	800a908 <_realloc_r+0x34>
 800a902:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a906:	d812      	bhi.n	800a92e <_realloc_r+0x5a>
 800a908:	4621      	mov	r1, r4
 800a90a:	4640      	mov	r0, r8
 800a90c:	f7ff fb0c 	bl	8009f28 <_malloc_r>
 800a910:	4605      	mov	r5, r0
 800a912:	2800      	cmp	r0, #0
 800a914:	d0ed      	beq.n	800a8f2 <_realloc_r+0x1e>
 800a916:	42bc      	cmp	r4, r7
 800a918:	4622      	mov	r2, r4
 800a91a:	4631      	mov	r1, r6
 800a91c:	bf28      	it	cs
 800a91e:	463a      	movcs	r2, r7
 800a920:	f7ff facc 	bl	8009ebc <memcpy>
 800a924:	4631      	mov	r1, r6
 800a926:	4640      	mov	r0, r8
 800a928:	f7ff fc72 	bl	800a210 <_free_r>
 800a92c:	e7e1      	b.n	800a8f2 <_realloc_r+0x1e>
 800a92e:	4635      	mov	r5, r6
 800a930:	e7df      	b.n	800a8f2 <_realloc_r+0x1e>

0800a932 <_malloc_usable_size_r>:
 800a932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a936:	1f18      	subs	r0, r3, #4
 800a938:	2b00      	cmp	r3, #0
 800a93a:	bfbc      	itt	lt
 800a93c:	580b      	ldrlt	r3, [r1, r0]
 800a93e:	18c0      	addlt	r0, r0, r3
 800a940:	4770      	bx	lr
	...

0800a944 <_init>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	bf00      	nop
 800a948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94a:	bc08      	pop	{r3}
 800a94c:	469e      	mov	lr, r3
 800a94e:	4770      	bx	lr

0800a950 <_fini>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr
