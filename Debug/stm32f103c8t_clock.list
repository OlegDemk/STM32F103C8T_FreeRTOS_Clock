
stm32f103c8t_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086bc  080086bc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086c0  080086c0  000186c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080086c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002adc  20000078  0800873c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b54  0800873c  00022b54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b60f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003950  00000000  00000000  0003b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0003f000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  00040778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dcc  00000000  00000000  00041d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a07f  00000000  00000000  00045b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000962cd  00000000  00000000  0005fbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5ea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000673c  00000000  00000000  000f5ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080084a0 	.word	0x080084a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080084a0 	.word	0x080084a0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_ldivmod>:
 800060c:	b97b      	cbnz	r3, 800062e <__aeabi_ldivmod+0x22>
 800060e:	b972      	cbnz	r2, 800062e <__aeabi_ldivmod+0x22>
 8000610:	2900      	cmp	r1, #0
 8000612:	bfbe      	ittt	lt
 8000614:	2000      	movlt	r0, #0
 8000616:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800061a:	e006      	blt.n	800062a <__aeabi_ldivmod+0x1e>
 800061c:	bf08      	it	eq
 800061e:	2800      	cmpeq	r0, #0
 8000620:	bf1c      	itt	ne
 8000622:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000626:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800062a:	f000 b9a9 	b.w	8000980 <__aeabi_idiv0>
 800062e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000632:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000636:	2900      	cmp	r1, #0
 8000638:	db09      	blt.n	800064e <__aeabi_ldivmod+0x42>
 800063a:	2b00      	cmp	r3, #0
 800063c:	db1a      	blt.n	8000674 <__aeabi_ldivmod+0x68>
 800063e:	f000 f835 	bl	80006ac <__udivmoddi4>
 8000642:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000646:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064a:	b004      	add	sp, #16
 800064c:	4770      	bx	lr
 800064e:	4240      	negs	r0, r0
 8000650:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000654:	2b00      	cmp	r3, #0
 8000656:	db1b      	blt.n	8000690 <__aeabi_ldivmod+0x84>
 8000658:	f000 f828 	bl	80006ac <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4240      	negs	r0, r0
 8000668:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800066c:	4252      	negs	r2, r2
 800066e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000672:	4770      	bx	lr
 8000674:	4252      	negs	r2, r2
 8000676:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800067a:	f000 f817 	bl	80006ac <__udivmoddi4>
 800067e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000686:	b004      	add	sp, #16
 8000688:	4240      	negs	r0, r0
 800068a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068e:	4770      	bx	lr
 8000690:	4252      	negs	r2, r2
 8000692:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000696:	f000 f809 	bl	80006ac <__udivmoddi4>
 800069a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a2:	b004      	add	sp, #16
 80006a4:	4252      	negs	r2, r2
 80006a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006aa:	4770      	bx	lr

080006ac <__udivmoddi4>:
 80006ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006b0:	9e08      	ldr	r6, [sp, #32]
 80006b2:	460d      	mov	r5, r1
 80006b4:	4604      	mov	r4, r0
 80006b6:	4688      	mov	r8, r1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d14d      	bne.n	8000758 <__udivmoddi4+0xac>
 80006bc:	428a      	cmp	r2, r1
 80006be:	4694      	mov	ip, r2
 80006c0:	d968      	bls.n	8000794 <__udivmoddi4+0xe8>
 80006c2:	fab2 f282 	clz	r2, r2
 80006c6:	b152      	cbz	r2, 80006de <__udivmoddi4+0x32>
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	f1c2 0120 	rsb	r1, r2, #32
 80006d0:	fa20 f101 	lsr.w	r1, r0, r1
 80006d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80006d8:	ea41 0803 	orr.w	r8, r1, r3
 80006dc:	4094      	lsls	r4, r2
 80006de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80006e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80006e6:	fa1f fe8c 	uxth.w	lr, ip
 80006ea:	fb01 8817 	mls	r8, r1, r7, r8
 80006ee:	fb07 f00e 	mul.w	r0, r7, lr
 80006f2:	0c23      	lsrs	r3, r4, #16
 80006f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006f8:	4298      	cmp	r0, r3
 80006fa:	d90a      	bls.n	8000712 <__udivmoddi4+0x66>
 80006fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000700:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000704:	f080 811e 	bcs.w	8000944 <__udivmoddi4+0x298>
 8000708:	4298      	cmp	r0, r3
 800070a:	f240 811b 	bls.w	8000944 <__udivmoddi4+0x298>
 800070e:	3f02      	subs	r7, #2
 8000710:	4463      	add	r3, ip
 8000712:	1a1b      	subs	r3, r3, r0
 8000714:	fbb3 f0f1 	udiv	r0, r3, r1
 8000718:	fb01 3310 	mls	r3, r1, r0, r3
 800071c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000720:	b2a4      	uxth	r4, r4
 8000722:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000726:	45a6      	cmp	lr, r4
 8000728:	d90a      	bls.n	8000740 <__udivmoddi4+0x94>
 800072a:	eb1c 0404 	adds.w	r4, ip, r4
 800072e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000732:	f080 8109 	bcs.w	8000948 <__udivmoddi4+0x29c>
 8000736:	45a6      	cmp	lr, r4
 8000738:	f240 8106 	bls.w	8000948 <__udivmoddi4+0x29c>
 800073c:	4464      	add	r4, ip
 800073e:	3802      	subs	r0, #2
 8000740:	2100      	movs	r1, #0
 8000742:	eba4 040e 	sub.w	r4, r4, lr
 8000746:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800074a:	b11e      	cbz	r6, 8000754 <__udivmoddi4+0xa8>
 800074c:	2300      	movs	r3, #0
 800074e:	40d4      	lsrs	r4, r2
 8000750:	e9c6 4300 	strd	r4, r3, [r6]
 8000754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000758:	428b      	cmp	r3, r1
 800075a:	d908      	bls.n	800076e <__udivmoddi4+0xc2>
 800075c:	2e00      	cmp	r6, #0
 800075e:	f000 80ee 	beq.w	800093e <__udivmoddi4+0x292>
 8000762:	2100      	movs	r1, #0
 8000764:	e9c6 0500 	strd	r0, r5, [r6]
 8000768:	4608      	mov	r0, r1
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	fab3 f183 	clz	r1, r3
 8000772:	2900      	cmp	r1, #0
 8000774:	d14a      	bne.n	800080c <__udivmoddi4+0x160>
 8000776:	42ab      	cmp	r3, r5
 8000778:	d302      	bcc.n	8000780 <__udivmoddi4+0xd4>
 800077a:	4282      	cmp	r2, r0
 800077c:	f200 80fc 	bhi.w	8000978 <__udivmoddi4+0x2cc>
 8000780:	1a84      	subs	r4, r0, r2
 8000782:	eb65 0303 	sbc.w	r3, r5, r3
 8000786:	2001      	movs	r0, #1
 8000788:	4698      	mov	r8, r3
 800078a:	2e00      	cmp	r6, #0
 800078c:	d0e2      	beq.n	8000754 <__udivmoddi4+0xa8>
 800078e:	e9c6 4800 	strd	r4, r8, [r6]
 8000792:	e7df      	b.n	8000754 <__udivmoddi4+0xa8>
 8000794:	b902      	cbnz	r2, 8000798 <__udivmoddi4+0xec>
 8000796:	deff      	udf	#255	; 0xff
 8000798:	fab2 f282 	clz	r2, r2
 800079c:	2a00      	cmp	r2, #0
 800079e:	f040 8091 	bne.w	80008c4 <__udivmoddi4+0x218>
 80007a2:	eba1 000c 	sub.w	r0, r1, ip
 80007a6:	2101      	movs	r1, #1
 80007a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ac:	fa1f fe8c 	uxth.w	lr, ip
 80007b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80007b4:	fb07 0013 	mls	r0, r7, r3, r0
 80007b8:	0c25      	lsrs	r5, r4, #16
 80007ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80007be:	fb0e f003 	mul.w	r0, lr, r3
 80007c2:	42a8      	cmp	r0, r5
 80007c4:	d908      	bls.n	80007d8 <__udivmoddi4+0x12c>
 80007c6:	eb1c 0505 	adds.w	r5, ip, r5
 80007ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80007ce:	d202      	bcs.n	80007d6 <__udivmoddi4+0x12a>
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	f200 80ce 	bhi.w	8000972 <__udivmoddi4+0x2c6>
 80007d6:	4643      	mov	r3, r8
 80007d8:	1a2d      	subs	r5, r5, r0
 80007da:	fbb5 f0f7 	udiv	r0, r5, r7
 80007de:	fb07 5510 	mls	r5, r7, r0, r5
 80007e2:	fb0e fe00 	mul.w	lr, lr, r0
 80007e6:	b2a4      	uxth	r4, r4
 80007e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007ec:	45a6      	cmp	lr, r4
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x156>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80007f8:	d202      	bcs.n	8000800 <__udivmoddi4+0x154>
 80007fa:	45a6      	cmp	lr, r4
 80007fc:	f200 80b6 	bhi.w	800096c <__udivmoddi4+0x2c0>
 8000800:	4628      	mov	r0, r5
 8000802:	eba4 040e 	sub.w	r4, r4, lr
 8000806:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800080a:	e79e      	b.n	800074a <__udivmoddi4+0x9e>
 800080c:	f1c1 0720 	rsb	r7, r1, #32
 8000810:	408b      	lsls	r3, r1
 8000812:	fa22 fc07 	lsr.w	ip, r2, r7
 8000816:	ea4c 0c03 	orr.w	ip, ip, r3
 800081a:	fa25 fa07 	lsr.w	sl, r5, r7
 800081e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000822:	fbba f8f9 	udiv	r8, sl, r9
 8000826:	fa20 f307 	lsr.w	r3, r0, r7
 800082a:	fb09 aa18 	mls	sl, r9, r8, sl
 800082e:	408d      	lsls	r5, r1
 8000830:	fa1f fe8c 	uxth.w	lr, ip
 8000834:	431d      	orrs	r5, r3
 8000836:	fa00 f301 	lsl.w	r3, r0, r1
 800083a:	fb08 f00e 	mul.w	r0, r8, lr
 800083e:	0c2c      	lsrs	r4, r5, #16
 8000840:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000844:	42a0      	cmp	r0, r4
 8000846:	fa02 f201 	lsl.w	r2, r2, r1
 800084a:	d90b      	bls.n	8000864 <__udivmoddi4+0x1b8>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000854:	f080 8088 	bcs.w	8000968 <__udivmoddi4+0x2bc>
 8000858:	42a0      	cmp	r0, r4
 800085a:	f240 8085 	bls.w	8000968 <__udivmoddi4+0x2bc>
 800085e:	f1a8 0802 	sub.w	r8, r8, #2
 8000862:	4464      	add	r4, ip
 8000864:	1a24      	subs	r4, r4, r0
 8000866:	fbb4 f0f9 	udiv	r0, r4, r9
 800086a:	fb09 4410 	mls	r4, r9, r0, r4
 800086e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000872:	b2ad      	uxth	r5, r5
 8000874:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x1e2>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000884:	d26c      	bcs.n	8000960 <__udivmoddi4+0x2b4>
 8000886:	45a6      	cmp	lr, r4
 8000888:	d96a      	bls.n	8000960 <__udivmoddi4+0x2b4>
 800088a:	3802      	subs	r0, #2
 800088c:	4464      	add	r4, ip
 800088e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000892:	fba0 9502 	umull	r9, r5, r0, r2
 8000896:	eba4 040e 	sub.w	r4, r4, lr
 800089a:	42ac      	cmp	r4, r5
 800089c:	46c8      	mov	r8, r9
 800089e:	46ae      	mov	lr, r5
 80008a0:	d356      	bcc.n	8000950 <__udivmoddi4+0x2a4>
 80008a2:	d053      	beq.n	800094c <__udivmoddi4+0x2a0>
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	d069      	beq.n	800097c <__udivmoddi4+0x2d0>
 80008a8:	ebb3 0208 	subs.w	r2, r3, r8
 80008ac:	eb64 040e 	sbc.w	r4, r4, lr
 80008b0:	fa22 f301 	lsr.w	r3, r2, r1
 80008b4:	fa04 f707 	lsl.w	r7, r4, r7
 80008b8:	431f      	orrs	r7, r3
 80008ba:	40cc      	lsrs	r4, r1
 80008bc:	e9c6 7400 	strd	r7, r4, [r6]
 80008c0:	2100      	movs	r1, #0
 80008c2:	e747      	b.n	8000754 <__udivmoddi4+0xa8>
 80008c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c8:	f1c2 0120 	rsb	r1, r2, #32
 80008cc:	fa25 f301 	lsr.w	r3, r5, r1
 80008d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d4:	fa20 f101 	lsr.w	r1, r0, r1
 80008d8:	4095      	lsls	r5, r2
 80008da:	430d      	orrs	r5, r1
 80008dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80008e0:	fb07 3311 	mls	r3, r7, r1, r3
 80008e4:	fa1f fe8c 	uxth.w	lr, ip
 80008e8:	0c28      	lsrs	r0, r5, #16
 80008ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008ee:	fb01 f30e 	mul.w	r3, r1, lr
 80008f2:	4283      	cmp	r3, r0
 80008f4:	fa04 f402 	lsl.w	r4, r4, r2
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x260>
 80008fa:	eb1c 0000 	adds.w	r0, ip, r0
 80008fe:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000902:	d22f      	bcs.n	8000964 <__udivmoddi4+0x2b8>
 8000904:	4283      	cmp	r3, r0
 8000906:	d92d      	bls.n	8000964 <__udivmoddi4+0x2b8>
 8000908:	3902      	subs	r1, #2
 800090a:	4460      	add	r0, ip
 800090c:	1ac0      	subs	r0, r0, r3
 800090e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000912:	fb07 0013 	mls	r0, r7, r3, r0
 8000916:	b2ad      	uxth	r5, r5
 8000918:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800091c:	fb03 f00e 	mul.w	r0, r3, lr
 8000920:	42a8      	cmp	r0, r5
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x28a>
 8000924:	eb1c 0505 	adds.w	r5, ip, r5
 8000928:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800092c:	d216      	bcs.n	800095c <__udivmoddi4+0x2b0>
 800092e:	42a8      	cmp	r0, r5
 8000930:	d914      	bls.n	800095c <__udivmoddi4+0x2b0>
 8000932:	3b02      	subs	r3, #2
 8000934:	4465      	add	r5, ip
 8000936:	1a28      	subs	r0, r5, r0
 8000938:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800093c:	e738      	b.n	80007b0 <__udivmoddi4+0x104>
 800093e:	4631      	mov	r1, r6
 8000940:	4630      	mov	r0, r6
 8000942:	e707      	b.n	8000754 <__udivmoddi4+0xa8>
 8000944:	462f      	mov	r7, r5
 8000946:	e6e4      	b.n	8000712 <__udivmoddi4+0x66>
 8000948:	4618      	mov	r0, r3
 800094a:	e6f9      	b.n	8000740 <__udivmoddi4+0x94>
 800094c:	454b      	cmp	r3, r9
 800094e:	d2a9      	bcs.n	80008a4 <__udivmoddi4+0x1f8>
 8000950:	ebb9 0802 	subs.w	r8, r9, r2
 8000954:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000958:	3801      	subs	r0, #1
 800095a:	e7a3      	b.n	80008a4 <__udivmoddi4+0x1f8>
 800095c:	4643      	mov	r3, r8
 800095e:	e7ea      	b.n	8000936 <__udivmoddi4+0x28a>
 8000960:	4628      	mov	r0, r5
 8000962:	e794      	b.n	800088e <__udivmoddi4+0x1e2>
 8000964:	4641      	mov	r1, r8
 8000966:	e7d1      	b.n	800090c <__udivmoddi4+0x260>
 8000968:	46d0      	mov	r8, sl
 800096a:	e77b      	b.n	8000864 <__udivmoddi4+0x1b8>
 800096c:	4464      	add	r4, ip
 800096e:	3802      	subs	r0, #2
 8000970:	e747      	b.n	8000802 <__udivmoddi4+0x156>
 8000972:	3b02      	subs	r3, #2
 8000974:	4465      	add	r5, ip
 8000976:	e72f      	b.n	80007d8 <__udivmoddi4+0x12c>
 8000978:	4608      	mov	r0, r1
 800097a:	e706      	b.n	800078a <__udivmoddi4+0xde>
 800097c:	4631      	mov	r1, r6
 800097e:	e6e9      	b.n	8000754 <__udivmoddi4+0xa8>

08000980 <__aeabi_idiv0>:
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
//MX_SPI1_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <ILI9341_SPI_Init+0x14>)
 8000990:	f002 f8bc 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40010c00 	.word	0x40010c00

0800099c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(&hspi1, &SPI_Data, 1, 1);
 80009a6:	1df9      	adds	r1, r7, #7
 80009a8:	2301      	movs	r3, #1
 80009aa:	2201      	movs	r2, #1
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <ILI9341_SPI_Send+0x20>)
 80009ae:	f004 fa47 	bl	8004e40 <HAL_SPI_Transmit>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000012c 	.word	0x2000012c

080009c0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <ILI9341_Write_Command+0x40>)
 80009d2:	f002 f89b 	bl	8002b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <ILI9341_Write_Command+0x44>)
 80009de:	f002 f895 	bl	8002b0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ffd9 	bl	800099c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <ILI9341_Write_Command+0x40>)
 80009f2:	f002 f88b 	bl	8002b0c <HAL_GPIO_WritePin>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40010c00 	.word	0x40010c00
 8000a04:	40010800 	.word	0x40010800

08000a08 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <ILI9341_Write_Data+0x40>)
 8000a1a:	f002 f877 	bl	8002b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <ILI9341_Write_Data+0x44>)
 8000a26:	f002 f871 	bl	8002b0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffb5 	bl	800099c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <ILI9341_Write_Data+0x44>)
 8000a3a:	f002 f867 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4604      	mov	r4, r0
 8000a58:	4608      	mov	r0, r1
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4623      	mov	r3, r4
 8000a60:	80fb      	strh	r3, [r7, #6]
 8000a62:	4603      	mov	r3, r0
 8000a64:	80bb      	strh	r3, [r7, #4]
 8000a66:	460b      	mov	r3, r1
 8000a68:	807b      	strh	r3, [r7, #2]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000a6e:	202a      	movs	r0, #42	; 0x2a
 8000a70:	f7ff ffa6 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	0a1b      	lsrs	r3, r3, #8
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ffc3 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ffbe 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffb7 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ffb2 	bl	8000a08 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000aa4:	202b      	movs	r0, #43	; 0x2b
 8000aa6:	f7ff ff8b 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ffa8 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffa3 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000ac2:	883b      	ldrh	r3, [r7, #0]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff9c 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000ad0:	883b      	ldrh	r3, [r7, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff97 	bl	8000a08 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000ada:	202c      	movs	r0, #44	; 0x2c
 8000adc:	f7ff ff70 	bl	80009c0 <ILI9341_Write_Command>
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}

08000ae8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af2:	480b      	ldr	r0, [pc, #44]	; (8000b20 <ILI9341_Reset+0x38>)
 8000af4:	f002 f80a 	bl	8002b0c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000af8:	20c8      	movs	r0, #200	; 0xc8
 8000afa:	f001 fd09 	bl	8002510 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <ILI9341_Reset+0x3c>)
 8000b06:	f002 f801 	bl	8002b0c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b0a:	20c8      	movs	r0, #200	; 0xc8
 8000b0c:	f001 fd00 	bl	8002510 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	4802      	ldr	r0, [pc, #8]	; (8000b20 <ILI9341_Reset+0x38>)
 8000b18:	f001 fff8 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000b36:	2036      	movs	r0, #54	; 0x36
 8000b38:	f7ff ff42 	bl	80009c0 <ILI9341_Write_Command>
HAL_Delay(1);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f001 fce7 	bl	8002510 <HAL_Delay>
	
switch(screen_rotation) 
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d837      	bhi.n	8000bb8 <ILI9341_Set_Rotation+0x90>
 8000b48:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <ILI9341_Set_Rotation+0x28>)
 8000b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4e:	bf00      	nop
 8000b50:	08000b61 	.word	0x08000b61
 8000b54:	08000b77 	.word	0x08000b77
 8000b58:	08000b8d 	.word	0x08000b8d
 8000b5c:	08000ba3 	.word	0x08000ba3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000b60:	2048      	movs	r0, #72	; 0x48
 8000b62:	f7ff ff51 	bl	8000a08 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <ILI9341_Set_Rotation+0x9c>)
 8000b68:	22f0      	movs	r2, #240	; 0xf0
 8000b6a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <ILI9341_Set_Rotation+0xa0>)
 8000b6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b72:	801a      	strh	r2, [r3, #0]
			break;
 8000b74:	e021      	b.n	8000bba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000b76:	2028      	movs	r0, #40	; 0x28
 8000b78:	f7ff ff46 	bl	8000a08 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <ILI9341_Set_Rotation+0x9c>)
 8000b7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b82:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <ILI9341_Set_Rotation+0xa0>)
 8000b86:	22f0      	movs	r2, #240	; 0xf0
 8000b88:	801a      	strh	r2, [r3, #0]
			break;
 8000b8a:	e016      	b.n	8000bba <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000b8c:	2088      	movs	r0, #136	; 0x88
 8000b8e:	f7ff ff3b 	bl	8000a08 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <ILI9341_Set_Rotation+0x9c>)
 8000b94:	22f0      	movs	r2, #240	; 0xf0
 8000b96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <ILI9341_Set_Rotation+0xa0>)
 8000b9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b9e:	801a      	strh	r2, [r3, #0]
			break;
 8000ba0:	e00b      	b.n	8000bba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000ba2:	20e8      	movs	r0, #232	; 0xe8
 8000ba4:	f7ff ff30 	bl	8000a08 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <ILI9341_Set_Rotation+0x9c>)
 8000baa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <ILI9341_Set_Rotation+0xa0>)
 8000bb2:	22f0      	movs	r2, #240	; 0xf0
 8000bb4:	801a      	strh	r2, [r3, #0]
			break;
 8000bb6:	e000      	b.n	8000bba <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000bb8:	bf00      	nop
	}
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000002 	.word	0x20000002
 8000bc8:	20000000 	.word	0x20000000

08000bcc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd6:	4802      	ldr	r0, [pc, #8]	; (8000be0 <ILI9341_Enable+0x14>)
 8000bd8:	f001 ff98 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40010800 	.word	0x40010800

08000be4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000be8:	f7ff fff0 	bl	8000bcc <ILI9341_Enable>
ILI9341_SPI_Init();
 8000bec:	f7ff feca 	bl	8000984 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000bf0:	f7ff ff7a 	bl	8000ae8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff fee3 	bl	80009c0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000bfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bfe:	f001 fc87 	bl	8002510 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000c02:	20cb      	movs	r0, #203	; 0xcb
 8000c04:	f7ff fedc 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000c08:	2039      	movs	r0, #57	; 0x39
 8000c0a:	f7ff fefd 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000c0e:	202c      	movs	r0, #44	; 0x2c
 8000c10:	f7ff fefa 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff fef7 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000c1a:	2034      	movs	r0, #52	; 0x34
 8000c1c:	f7ff fef4 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000c20:	2002      	movs	r0, #2
 8000c22:	f7ff fef1 	bl	8000a08 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000c26:	20cf      	movs	r0, #207	; 0xcf
 8000c28:	f7ff feca 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff feeb 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000c32:	20c1      	movs	r0, #193	; 0xc1
 8000c34:	f7ff fee8 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000c38:	2030      	movs	r0, #48	; 0x30
 8000c3a:	f7ff fee5 	bl	8000a08 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000c3e:	20e8      	movs	r0, #232	; 0xe8
 8000c40:	f7ff febe 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000c44:	2085      	movs	r0, #133	; 0x85
 8000c46:	f7ff fedf 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fedc 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000c50:	2078      	movs	r0, #120	; 0x78
 8000c52:	f7ff fed9 	bl	8000a08 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000c56:	20ea      	movs	r0, #234	; 0xea
 8000c58:	f7ff feb2 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff fed3 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fed0 	bl	8000a08 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000c68:	20ed      	movs	r0, #237	; 0xed
 8000c6a:	f7ff fea9 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000c6e:	2064      	movs	r0, #100	; 0x64
 8000c70:	f7ff feca 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f7ff fec7 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000c7a:	2012      	movs	r0, #18
 8000c7c:	f7ff fec4 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000c80:	2081      	movs	r0, #129	; 0x81
 8000c82:	f7ff fec1 	bl	8000a08 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000c86:	20f7      	movs	r0, #247	; 0xf7
 8000c88:	f7ff fe9a 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000c8c:	2020      	movs	r0, #32
 8000c8e:	f7ff febb 	bl	8000a08 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000c92:	20c0      	movs	r0, #192	; 0xc0
 8000c94:	f7ff fe94 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000c98:	2023      	movs	r0, #35	; 0x23
 8000c9a:	f7ff feb5 	bl	8000a08 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000c9e:	20c1      	movs	r0, #193	; 0xc1
 8000ca0:	f7ff fe8e 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000ca4:	2010      	movs	r0, #16
 8000ca6:	f7ff feaf 	bl	8000a08 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000caa:	20c5      	movs	r0, #197	; 0xc5
 8000cac:	f7ff fe88 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000cb0:	203e      	movs	r0, #62	; 0x3e
 8000cb2:	f7ff fea9 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000cb6:	2028      	movs	r0, #40	; 0x28
 8000cb8:	f7ff fea6 	bl	8000a08 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000cbc:	20c7      	movs	r0, #199	; 0xc7
 8000cbe:	f7ff fe7f 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000cc2:	2086      	movs	r0, #134	; 0x86
 8000cc4:	f7ff fea0 	bl	8000a08 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000cc8:	2036      	movs	r0, #54	; 0x36
 8000cca:	f7ff fe79 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000cce:	2048      	movs	r0, #72	; 0x48
 8000cd0:	f7ff fe9a 	bl	8000a08 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000cd4:	203a      	movs	r0, #58	; 0x3a
 8000cd6:	f7ff fe73 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000cda:	2055      	movs	r0, #85	; 0x55
 8000cdc:	f7ff fe94 	bl	8000a08 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000ce0:	20b1      	movs	r0, #177	; 0xb1
 8000ce2:	f7ff fe6d 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fe8e 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000cec:	2018      	movs	r0, #24
 8000cee:	f7ff fe8b 	bl	8000a08 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000cf2:	20b6      	movs	r0, #182	; 0xb6
 8000cf4:	f7ff fe64 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000cf8:	2008      	movs	r0, #8
 8000cfa:	f7ff fe85 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000cfe:	2082      	movs	r0, #130	; 0x82
 8000d00:	f7ff fe82 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000d04:	2027      	movs	r0, #39	; 0x27
 8000d06:	f7ff fe7f 	bl	8000a08 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000d0a:	20f2      	movs	r0, #242	; 0xf2
 8000d0c:	f7ff fe58 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fe79 	bl	8000a08 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000d16:	2026      	movs	r0, #38	; 0x26
 8000d18:	f7ff fe52 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fe73 	bl	8000a08 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000d22:	20e0      	movs	r0, #224	; 0xe0
 8000d24:	f7ff fe4c 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000d28:	200f      	movs	r0, #15
 8000d2a:	f7ff fe6d 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000d2e:	2031      	movs	r0, #49	; 0x31
 8000d30:	f7ff fe6a 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000d34:	202b      	movs	r0, #43	; 0x2b
 8000d36:	f7ff fe67 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000d3a:	200c      	movs	r0, #12
 8000d3c:	f7ff fe64 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d40:	200e      	movs	r0, #14
 8000d42:	f7ff fe61 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000d46:	2008      	movs	r0, #8
 8000d48:	f7ff fe5e 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000d4c:	204e      	movs	r0, #78	; 0x4e
 8000d4e:	f7ff fe5b 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000d52:	20f1      	movs	r0, #241	; 0xf1
 8000d54:	f7ff fe58 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000d58:	2037      	movs	r0, #55	; 0x37
 8000d5a:	f7ff fe55 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f7ff fe52 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000d64:	2010      	movs	r0, #16
 8000d66:	f7ff fe4f 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f7ff fe4c 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d70:	200e      	movs	r0, #14
 8000d72:	f7ff fe49 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000d76:	2009      	movs	r0, #9
 8000d78:	f7ff fe46 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff fe43 	bl	8000a08 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000d82:	20e1      	movs	r0, #225	; 0xe1
 8000d84:	f7ff fe1c 	bl	80009c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff fe3d 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000d8e:	200e      	movs	r0, #14
 8000d90:	f7ff fe3a 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000d94:	2014      	movs	r0, #20
 8000d96:	f7ff fe37 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f7ff fe34 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000da0:	2011      	movs	r0, #17
 8000da2:	f7ff fe31 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000da6:	2007      	movs	r0, #7
 8000da8:	f7ff fe2e 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000dac:	2031      	movs	r0, #49	; 0x31
 8000dae:	f7ff fe2b 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000db2:	20c1      	movs	r0, #193	; 0xc1
 8000db4:	f7ff fe28 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000db8:	2048      	movs	r0, #72	; 0x48
 8000dba:	f7ff fe25 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000dbe:	2008      	movs	r0, #8
 8000dc0:	f7ff fe22 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	f7ff fe1f 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000dca:	200c      	movs	r0, #12
 8000dcc:	f7ff fe1c 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000dd0:	2031      	movs	r0, #49	; 0x31
 8000dd2:	f7ff fe19 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000dd6:	2036      	movs	r0, #54	; 0x36
 8000dd8:	f7ff fe16 	bl	8000a08 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000ddc:	200f      	movs	r0, #15
 8000dde:	f7ff fe13 	bl	8000a08 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000de2:	2011      	movs	r0, #17
 8000de4:	f7ff fdec 	bl	80009c0 <ILI9341_Write_Command>
HAL_Delay(120);
 8000de8:	2078      	movs	r0, #120	; 0x78
 8000dea:	f001 fb91 	bl	8002510 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000dee:	2029      	movs	r0, #41	; 0x29
 8000df0:	f7ff fde6 	bl	80009c0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fe97 	bl	8000b28 <ILI9341_Set_Rotation>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e04:	b08d      	sub	sp, #52	; 0x34
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	6039      	str	r1, [r7, #0]
 8000e0c:	80fb      	strh	r3, [r7, #6]
 8000e0e:	466b      	mov	r3, sp
 8000e10:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e1e:	d202      	bcs.n	8000e26 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
 8000e24:	e002      	b.n	8000e2c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000e26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e32:	4840      	ldr	r0, [pc, #256]	; (8000f34 <ILI9341_Draw_Colour_Burst+0x134>)
 8000e34:	f001 fe6a 	bl	8002b0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	483e      	ldr	r0, [pc, #248]	; (8000f38 <ILI9341_Draw_Colour_Burst+0x138>)
 8000e40:	f001 fe64 	bl	8002b0c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e50:	460b      	mov	r3, r1
 8000e52:	3b01      	subs	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	2300      	movs	r3, #0
 8000e58:	4688      	mov	r8, r1
 8000e5a:	4699      	mov	r9, r3
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e70:	2300      	movs	r3, #0
 8000e72:	460c      	mov	r4, r1
 8000e74:	461d      	mov	r5, r3
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	00eb      	lsls	r3, r5, #3
 8000e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e84:	00e2      	lsls	r2, r4, #3
 8000e86:	1dcb      	adds	r3, r1, #7
 8000e88:	08db      	lsrs	r3, r3, #3
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e90:	466b      	mov	r3, sp
 8000e92:	3300      	adds	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e9a:	e00e      	b.n	8000eba <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ea6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	3301      	adds	r3, #1
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	b2d1      	uxtb	r1, r2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3ec      	bcc.n	8000e9c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000edc:	fb01 f202 	mul.w	r2, r1, r2
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d010      	beq.n	8000f0c <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eee:	e009      	b.n	8000f04 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <ILI9341_Draw_Colour_Burst+0x13c>)
 8000efa:	f003 ffa1 	bl	8004e40 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	3301      	adds	r3, #1
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d3f1      	bcc.n	8000ef0 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	230a      	movs	r3, #10
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <ILI9341_Draw_Colour_Burst+0x13c>)
 8000f16:	f003 ff93 	bl	8004e40 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <ILI9341_Draw_Colour_Burst+0x138>)
 8000f22:	f001 fdf3 	bl	8002b0c <HAL_GPIO_WritePin>
 8000f26:	46b5      	mov	sp, r6
}
 8000f28:	bf00      	nop
 8000f2a:	3734      	adds	r7, #52	; 0x34
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f32:	bf00      	nop
 8000f34:	40010800 	.word	0x40010800
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	2000012c 	.word	0x2000012c

08000f40 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <ILI9341_Fill_Screen+0x44>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <ILI9341_Fill_Screen+0x48>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fd79 	bl	8000a50 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <ILI9341_Fill_Screen+0x44>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <ILI9341_Fill_Screen+0x48>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff42 	bl	8000e00 <ILI9341_Draw_Colour_Burst>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000002 	.word	0x20000002
 8000f88:	20000000 	.word	0x20000000

08000f8c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2203      	movs	r2, #3
 8000f98:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	715a      	strb	r2, [r3, #5]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b08a      	sub	sp, #40	; 0x28
 8000fc6:	af04      	add	r7, sp, #16
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fdc:	7afb      	ldrb	r3, [r7, #11]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	8af9      	ldrh	r1, [r7, #22]
 8000fe2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f002 fb58 	bl	80036a8 <HAL_I2C_Mem_Read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10b      	bne.n	8001016 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	7d3b      	ldrb	r3, [r7, #20]
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21b      	sxth	r3, r3
 800100c:	b29a      	uxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	801a      	strh	r2, [r3, #0]
		return true;
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <read_register16+0x56>
	} else
		return false;
 8001016:	2300      	movs	r3, #0

}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b08b      	sub	sp, #44	; 0x2c
 8001024:	af04      	add	r7, sp, #16
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	461a      	mov	r2, r3
 800102c:	460b      	mov	r3, r1
 800102e:	72fb      	strb	r3, [r7, #11]
 8001030:	4613      	mov	r3, r2
 8001032:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001040:	7afb      	ldrb	r3, [r7, #11]
 8001042:	b29a      	uxth	r2, r3
 8001044:	7abb      	ldrb	r3, [r7, #10]
 8001046:	b29b      	uxth	r3, r3
 8001048:	8af9      	ldrh	r1, [r7, #22]
 800104a:	f241 3488 	movw	r4, #5000	; 0x1388
 800104e:	9402      	str	r4, [sp, #8]
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	f002 fb26 	bl	80036a8 <HAL_I2C_Mem_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <read_data+0x46>
		return 0;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <read_data+0x48>
	else
		return 1;
 8001066:	2301      	movs	r3, #1

}
 8001068:	4618      	mov	r0, r3
 800106a:	371c      	adds	r7, #28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd90      	pop	{r4, r7, pc}

08001070 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	461a      	mov	r2, r3
 800107c:	2188      	movs	r1, #136	; 0x88
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff9f 	bl	8000fc2 <read_register16>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d06f      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3302      	adds	r3, #2
 800108e:	461a      	mov	r2, r3
 8001090:	218a      	movs	r1, #138	; 0x8a
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff95 	bl	8000fc2 <read_register16>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d065      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3304      	adds	r3, #4
 80010a2:	461a      	mov	r2, r3
 80010a4:	218c      	movs	r1, #140	; 0x8c
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff8b 	bl	8000fc2 <read_register16>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d05b      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3306      	adds	r3, #6
 80010b6:	461a      	mov	r2, r3
 80010b8:	218e      	movs	r1, #142	; 0x8e
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff81 	bl	8000fc2 <read_register16>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d051      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3308      	adds	r3, #8
 80010ca:	461a      	mov	r2, r3
 80010cc:	2190      	movs	r1, #144	; 0x90
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff77 	bl	8000fc2 <read_register16>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d047      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	330a      	adds	r3, #10
 80010de:	461a      	mov	r2, r3
 80010e0:	2192      	movs	r1, #146	; 0x92
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff6d 	bl	8000fc2 <read_register16>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d03d      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	330c      	adds	r3, #12
 80010f2:	461a      	mov	r2, r3
 80010f4:	2194      	movs	r1, #148	; 0x94
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff63 	bl	8000fc2 <read_register16>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d033      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	330e      	adds	r3, #14
 8001106:	461a      	mov	r2, r3
 8001108:	2196      	movs	r1, #150	; 0x96
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff59 	bl	8000fc2 <read_register16>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d029      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3310      	adds	r3, #16
 800111a:	461a      	mov	r2, r3
 800111c:	2198      	movs	r1, #152	; 0x98
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff4f 	bl	8000fc2 <read_register16>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d01f      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3312      	adds	r3, #18
 800112e:	461a      	mov	r2, r3
 8001130:	219a      	movs	r1, #154	; 0x9a
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff45 	bl	8000fc2 <read_register16>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d015      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3314      	adds	r3, #20
 8001142:	461a      	mov	r2, r3
 8001144:	219c      	movs	r1, #156	; 0x9c
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff3b 	bl	8000fc2 <read_register16>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001156:	461a      	mov	r2, r3
 8001158:	219e      	movs	r1, #158	; 0x9e
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff31 	bl	8000fc2 <read_register16>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <read_calibration_data+0xfa>

		return true;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <read_calibration_data+0xfc>
	}

	return false;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f103 0218 	add.w	r2, r3, #24
 8001182:	2301      	movs	r3, #1
 8001184:	21a1      	movs	r1, #161	; 0xa1
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff4a 	bl	8001020 <read_data>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d14b      	bne.n	800122a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	331a      	adds	r3, #26
 8001196:	461a      	mov	r2, r3
 8001198:	21e1      	movs	r1, #225	; 0xe1
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ff11 	bl	8000fc2 <read_register16>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d041      	beq.n	800122a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f103 021c 	add.w	r2, r3, #28
 80011ac:	2301      	movs	r3, #1
 80011ae:	21e3      	movs	r1, #227	; 0xe3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff35 	bl	8001020 <read_data>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d136      	bne.n	800122a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80011bc:	f107 030e 	add.w	r3, r7, #14
 80011c0:	461a      	mov	r2, r3
 80011c2:	21e4      	movs	r1, #228	; 0xe4
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fefc 	bl	8000fc2 <read_register16>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d02c      	beq.n	800122a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	461a      	mov	r2, r3
 80011d6:	21e5      	movs	r1, #229	; 0xe5
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fef2 	bl	8000fc2 <read_register16>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d022      	beq.n	800122a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80011ea:	2301      	movs	r3, #1
 80011ec:	21e7      	movs	r1, #231	; 0xe7
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff16 	bl	8001020 <read_data>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d117      	bne.n	800122a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b21b      	sxth	r3, r3
 8001200:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001204:	b21a      	sxth	r2, r3
 8001206:	89fb      	ldrh	r3, [r7, #14]
 8001208:	121b      	asrs	r3, r3, #8
 800120a:	b21b      	sxth	r3, r3
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21a      	sxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800121a:	89bb      	ldrh	r3, [r7, #12]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	b29b      	uxth	r3, r3
 8001220:	b21a      	sxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	841a      	strh	r2, [r3, #32]

		return true;
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <read_hum_calibration_data+0xb8>
	}

	return false;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af04      	add	r7, sp, #16
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
 8001240:	4613      	mov	r3, r2
 8001242:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	b29a      	uxth	r2, r3
 8001254:	89f9      	ldrh	r1, [r7, #14]
 8001256:	f242 7310 	movw	r3, #10000	; 0x2710
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	2301      	movs	r3, #1
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	1cbb      	adds	r3, r7, #2
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	f002 f925 	bl	80034b4 <HAL_I2C_Mem_Write>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <write_register8+0x40>
		return false;
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <write_register8+0x42>
	else
		return true;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800128c:	2b76      	cmp	r3, #118	; 0x76
 800128e:	d005      	beq.n	800129c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001294:	2b77      	cmp	r3, #119	; 0x77
 8001296:	d001      	beq.n	800129c <bmp280_init+0x1e>

		return false;
 8001298:	2300      	movs	r3, #0
 800129a:	e099      	b.n	80013d0 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80012a2:	2301      	movs	r3, #1
 80012a4:	21d0      	movs	r1, #208	; 0xd0
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff feba 	bl	8001020 <read_data>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <bmp280_init+0x38>
		return false;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e08c      	b.n	80013d0 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012bc:	2b58      	cmp	r3, #88	; 0x58
 80012be:	d006      	beq.n	80012ce <bmp280_init+0x50>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012c6:	2b60      	cmp	r3, #96	; 0x60
 80012c8:	d001      	beq.n	80012ce <bmp280_init+0x50>

		return false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e080      	b.n	80013d0 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80012ce:	22b6      	movs	r2, #182	; 0xb6
 80012d0:	21e0      	movs	r1, #224	; 0xe0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffae 	bl	8001234 <write_register8>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <bmp280_init+0x64>
		return false;
 80012de:	2300      	movs	r3, #0
 80012e0:	e076      	b.n	80013d0 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80012e2:	f107 020c 	add.w	r2, r7, #12
 80012e6:	2301      	movs	r3, #1
 80012e8:	21f3      	movs	r1, #243	; 0xf3
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fe98 	bl	8001020 <read_data>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f5      	bne.n	80012e2 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff feb5 	bl	8001070 <read_calibration_data>
 8001306:	4603      	mov	r3, r0
 8001308:	f083 0301 	eor.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d100      	bne.n	8001314 <bmp280_init+0x96>
 8001312:	e001      	b.n	8001318 <bmp280_init+0x9a>
		return false;
 8001314:	2300      	movs	r3, #0
 8001316:	e05b      	b.n	80013d0 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800131e:	2b60      	cmp	r3, #96	; 0x60
 8001320:	d10a      	bne.n	8001338 <bmp280_init+0xba>
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff26 	bl	8001174 <read_hum_calibration_data>
 8001328:	4603      	mov	r3, r0
 800132a:	f083 0301 	eor.w	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <bmp280_init+0xba>
		return false;
 8001334:	2300      	movs	r3, #0
 8001336:	e04b      	b.n	80013d0 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	795b      	ldrb	r3, [r3, #5]
 800133c:	015b      	lsls	r3, r3, #5
 800133e:	b25a      	sxtb	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	785b      	ldrb	r3, [r3, #1]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	b25b      	sxtb	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b25b      	sxtb	r3, r3
 800134c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	461a      	mov	r2, r3
 8001352:	21f5      	movs	r1, #245	; 0xf5
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff6d 	bl	8001234 <write_register8>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <bmp280_init+0xe6>
		return false;
 8001360:	2300      	movs	r3, #0
 8001362:	e035      	b.n	80013d0 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d102      	bne.n	8001372 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	78db      	ldrb	r3, [r3, #3]
 8001376:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001378:	b25a      	sxtb	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	b25b      	sxtb	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b25a      	sxtb	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b25b      	sxtb	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001390:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001398:	2b60      	cmp	r3, #96	; 0x60
 800139a:	d10d      	bne.n	80013b8 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80013a2:	7b7b      	ldrb	r3, [r7, #13]
 80013a4:	461a      	mov	r2, r3
 80013a6:	21f2      	movs	r1, #242	; 0xf2
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff43 	bl	8001234 <write_register8>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <bmp280_init+0x13a>
			return false;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e00b      	b.n	80013d0 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	461a      	mov	r2, r3
 80013bc:	21f4      	movs	r1, #244	; 0xf4
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff38 	bl	8001234 <write_register8>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <bmp280_init+0x150>
		return false;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <bmp280_init+0x152>
	}

	return true;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	10da      	asrs	r2, r3, #3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013fa:	12db      	asrs	r3, r3, #11
 80013fc:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	111b      	asrs	r3, r3, #4
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	8812      	ldrh	r2, [r2, #0]
 8001406:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	1112      	asrs	r2, r2, #4
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	8809      	ldrh	r1, [r1, #0]
 8001410:	1a52      	subs	r2, r2, r1
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800141e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001422:	139b      	asrs	r3, r3, #14
 8001424:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	441a      	add	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3380      	adds	r3, #128	; 0x80
 800143c:	121b      	asrs	r3, r3, #8
}
 800143e:	4618      	mov	r0, r3
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800144c:	b0cc      	sub	sp, #304	; 0x130
 800144e:	af00      	add	r7, sp, #0
 8001450:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001454:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001458:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800145c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001460:	17da      	asrs	r2, r3, #31
 8001462:	461c      	mov	r4, r3
 8001464:	4615      	mov	r5, r2
 8001466:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800146a:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 800146e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001472:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001476:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800147a:	fb03 f102 	mul.w	r1, r3, r2
 800147e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001482:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	18ca      	adds	r2, r1, r3
 800148c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001490:	fba3 8903 	umull	r8, r9, r3, r3
 8001494:	eb02 0309 	add.w	r3, r2, r9
 8001498:	4699      	mov	r9, r3
 800149a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800149e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	17da      	asrs	r2, r3, #31
 80014a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014aa:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014ae:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014b2:	4603      	mov	r3, r0
 80014b4:	fb03 f209 	mul.w	r2, r3, r9
 80014b8:	460b      	mov	r3, r1
 80014ba:	fb08 f303 	mul.w	r3, r8, r3
 80014be:	4413      	add	r3, r2
 80014c0:	4602      	mov	r2, r0
 80014c2:	fba8 2102 	umull	r2, r1, r8, r2
 80014c6:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80014ca:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80014ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80014d2:	4413      	add	r3, r2
 80014d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80014d8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80014dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80014e0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80014e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	17da      	asrs	r2, r3, #31
 80014f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014f4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80014f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014fc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001500:	462a      	mov	r2, r5
 8001502:	fb02 f203 	mul.w	r2, r2, r3
 8001506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800150a:	4621      	mov	r1, r4
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	441a      	add	r2, r3
 8001512:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001516:	4621      	mov	r1, r4
 8001518:	fba3 3101 	umull	r3, r1, r3, r1
 800151c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001520:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001528:	18d3      	adds	r3, r2, r3
 800152a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800152e:	f04f 0000 	mov.w	r0, #0
 8001532:	f04f 0100 	mov.w	r1, #0
 8001536:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800153a:	462b      	mov	r3, r5
 800153c:	0459      	lsls	r1, r3, #17
 800153e:	4622      	mov	r2, r4
 8001540:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001544:	4623      	mov	r3, r4
 8001546:	0458      	lsls	r0, r3, #17
 8001548:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800154c:	1814      	adds	r4, r2, r0
 800154e:	643c      	str	r4, [r7, #64]	; 0x40
 8001550:	414b      	adcs	r3, r1
 8001552:	647b      	str	r3, [r7, #68]	; 0x44
 8001554:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001558:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800155c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001560:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001564:	b21b      	sxth	r3, r3
 8001566:	17da      	asrs	r2, r3, #31
 8001568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800156c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001570:	f04f 0000 	mov.w	r0, #0
 8001574:	f04f 0100 	mov.w	r1, #0
 8001578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800157c:	00d9      	lsls	r1, r3, #3
 800157e:	2000      	movs	r0, #0
 8001580:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001584:	1814      	adds	r4, r2, r0
 8001586:	63bc      	str	r4, [r7, #56]	; 0x38
 8001588:	414b      	adcs	r3, r1
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800158c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001590:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001594:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001598:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800159c:	fb03 f102 	mul.w	r1, r3, r2
 80015a0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	18ca      	adds	r2, r1, r3
 80015ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015b2:	fba3 3103 	umull	r3, r1, r3, r3
 80015b6:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80015ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015c2:	18d3      	adds	r3, r2, r3
 80015c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	17da      	asrs	r2, r3, #31
 80015d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015d8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80015dc:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80015e0:	4622      	mov	r2, r4
 80015e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80015e6:	4641      	mov	r1, r8
 80015e8:	fb01 f202 	mul.w	r2, r1, r2
 80015ec:	464d      	mov	r5, r9
 80015ee:	4618      	mov	r0, r3
 80015f0:	4621      	mov	r1, r4
 80015f2:	4603      	mov	r3, r0
 80015f4:	fb03 f305 	mul.w	r3, r3, r5
 80015f8:	4413      	add	r3, r2
 80015fa:	4602      	mov	r2, r0
 80015fc:	4641      	mov	r1, r8
 80015fe:	fba2 2101 	umull	r2, r1, r2, r1
 8001602:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001606:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800160a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800160e:	4413      	add	r3, r2
 8001610:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001620:	4623      	mov	r3, r4
 8001622:	0a18      	lsrs	r0, r3, #8
 8001624:	462a      	mov	r2, r5
 8001626:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800162a:	462b      	mov	r3, r5
 800162c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800162e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001632:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800163e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001646:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800164a:	464a      	mov	r2, r9
 800164c:	fb02 f203 	mul.w	r2, r2, r3
 8001650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001654:	4644      	mov	r4, r8
 8001656:	fb04 f303 	mul.w	r3, r4, r3
 800165a:	441a      	add	r2, r3
 800165c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001660:	4644      	mov	r4, r8
 8001662:	fba3 3404 	umull	r3, r4, r3, r4
 8001666:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 800166a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800166e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001672:	18d3      	adds	r3, r2, r3
 8001674:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001684:	464c      	mov	r4, r9
 8001686:	0323      	lsls	r3, r4, #12
 8001688:	46c4      	mov	ip, r8
 800168a:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 800168e:	4644      	mov	r4, r8
 8001690:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001692:	1884      	adds	r4, r0, r2
 8001694:	633c      	str	r4, [r7, #48]	; 0x30
 8001696:	eb41 0303 	adc.w	r3, r1, r3
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
 800169c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016a0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80016a4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80016a8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016ac:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016b8:	88db      	ldrh	r3, [r3, #6]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	2200      	movs	r2, #0
 80016be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016c2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016c6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80016ca:	4622      	mov	r2, r4
 80016cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80016d0:	4641      	mov	r1, r8
 80016d2:	fb01 f202 	mul.w	r2, r1, r2
 80016d6:	464d      	mov	r5, r9
 80016d8:	4618      	mov	r0, r3
 80016da:	4621      	mov	r1, r4
 80016dc:	4603      	mov	r3, r0
 80016de:	fb03 f305 	mul.w	r3, r3, r5
 80016e2:	4413      	add	r3, r2
 80016e4:	4602      	mov	r2, r0
 80016e6:	4641      	mov	r1, r8
 80016e8:	fba2 2101 	umull	r2, r1, r2, r1
 80016ec:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80016f0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80016f4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80016f8:	4413      	add	r3, r2
 80016fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800170a:	4629      	mov	r1, r5
 800170c:	104a      	asrs	r2, r1, #1
 800170e:	4629      	mov	r1, r5
 8001710:	17cb      	asrs	r3, r1, #31
 8001712:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001716:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800171a:	4313      	orrs	r3, r2
 800171c:	d101      	bne.n	8001722 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 800171e:	2300      	movs	r3, #0
 8001720:	e146      	b.n	80019b0 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001722:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001726:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800172a:	17da      	asrs	r2, r3, #31
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
 800172e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001730:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001734:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001738:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800173c:	105b      	asrs	r3, r3, #1
 800173e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001742:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001746:	07db      	lsls	r3, r3, #31
 8001748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800174c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001750:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001754:	4604      	mov	r4, r0
 8001756:	1aa4      	subs	r4, r4, r2
 8001758:	67bc      	str	r4, [r7, #120]	; 0x78
 800175a:	eb61 0303 	sbc.w	r3, r1, r3
 800175e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001760:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001764:	4622      	mov	r2, r4
 8001766:	462b      	mov	r3, r5
 8001768:	1891      	adds	r1, r2, r2
 800176a:	6239      	str	r1, [r7, #32]
 800176c:	415b      	adcs	r3, r3
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
 8001770:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001774:	4621      	mov	r1, r4
 8001776:	1851      	adds	r1, r2, r1
 8001778:	61b9      	str	r1, [r7, #24]
 800177a:	4629      	mov	r1, r5
 800177c:	414b      	adcs	r3, r1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800178c:	4649      	mov	r1, r9
 800178e:	018b      	lsls	r3, r1, #6
 8001790:	4641      	mov	r1, r8
 8001792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001796:	4641      	mov	r1, r8
 8001798:	018a      	lsls	r2, r1, #6
 800179a:	4641      	mov	r1, r8
 800179c:	1889      	adds	r1, r1, r2
 800179e:	6139      	str	r1, [r7, #16]
 80017a0:	4649      	mov	r1, r9
 80017a2:	eb43 0101 	adc.w	r1, r3, r1
 80017a6:	6179      	str	r1, [r7, #20]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017b4:	4649      	mov	r1, r9
 80017b6:	008b      	lsls	r3, r1, #2
 80017b8:	46c4      	mov	ip, r8
 80017ba:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80017be:	4641      	mov	r1, r8
 80017c0:	008a      	lsls	r2, r1, #2
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	4622      	mov	r2, r4
 80017ca:	189b      	adds	r3, r3, r2
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	460b      	mov	r3, r1
 80017d0:	462a      	mov	r2, r5
 80017d2:	eb42 0303 	adc.w	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017e4:	4649      	mov	r1, r9
 80017e6:	008b      	lsls	r3, r1, #2
 80017e8:	46c4      	mov	ip, r8
 80017ea:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80017ee:	4641      	mov	r1, r8
 80017f0:	008a      	lsls	r2, r1, #2
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	4622      	mov	r2, r4
 80017fa:	189b      	adds	r3, r3, r2
 80017fc:	673b      	str	r3, [r7, #112]	; 0x70
 80017fe:	462b      	mov	r3, r5
 8001800:	460a      	mov	r2, r1
 8001802:	eb42 0303 	adc.w	r3, r2, r3
 8001806:	677b      	str	r3, [r7, #116]	; 0x74
 8001808:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800180c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001810:	f7fe fefc 	bl	800060c <__aeabi_ldivmod>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800181c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001820:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001824:	b21b      	sxth	r3, r3
 8001826:	17da      	asrs	r2, r3, #31
 8001828:	66bb      	str	r3, [r7, #104]	; 0x68
 800182a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800182c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	0b50      	lsrs	r0, r2, #13
 800183a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800183e:	1359      	asrs	r1, r3, #13
 8001840:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001844:	462b      	mov	r3, r5
 8001846:	fb00 f203 	mul.w	r2, r0, r3
 800184a:	4623      	mov	r3, r4
 800184c:	fb03 f301 	mul.w	r3, r3, r1
 8001850:	4413      	add	r3, r2
 8001852:	4622      	mov	r2, r4
 8001854:	fba2 2100 	umull	r2, r1, r2, r0
 8001858:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800185c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001860:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001864:	4413      	add	r3, r2
 8001866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800186a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0b50      	lsrs	r0, r2, #13
 8001878:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800187c:	1359      	asrs	r1, r3, #13
 800187e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001882:	462b      	mov	r3, r5
 8001884:	fb00 f203 	mul.w	r2, r0, r3
 8001888:	4623      	mov	r3, r4
 800188a:	fb03 f301 	mul.w	r3, r3, r1
 800188e:	4413      	add	r3, r2
 8001890:	4622      	mov	r2, r4
 8001892:	fba2 2100 	umull	r2, r1, r2, r0
 8001896:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800189a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800189e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018a2:	4413      	add	r3, r2
 80018a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80018b4:	4621      	mov	r1, r4
 80018b6:	0e4a      	lsrs	r2, r1, #25
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	460c      	mov	r4, r1
 80018be:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80018c2:	164b      	asrs	r3, r1, #25
 80018c4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80018c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018cc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	17da      	asrs	r2, r3, #31
 80018d4:	663b      	str	r3, [r7, #96]	; 0x60
 80018d6:	667a      	str	r2, [r7, #100]	; 0x64
 80018d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018e0:	462a      	mov	r2, r5
 80018e2:	fb02 f203 	mul.w	r2, r2, r3
 80018e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018ea:	4621      	mov	r1, r4
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018f6:	4621      	mov	r1, r4
 80018f8:	fba2 2101 	umull	r2, r1, r2, r1
 80018fc:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001900:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001904:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001908:	4413      	add	r3, r2
 800190a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800191a:	4621      	mov	r1, r4
 800191c:	0cca      	lsrs	r2, r1, #19
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	460c      	mov	r4, r1
 8001924:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001928:	14cb      	asrs	r3, r1, #19
 800192a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800192e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001932:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001936:	1884      	adds	r4, r0, r2
 8001938:	65bc      	str	r4, [r7, #88]	; 0x58
 800193a:	eb41 0303 	adc.w	r3, r1, r3
 800193e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001940:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001944:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001948:	4621      	mov	r1, r4
 800194a:	1889      	adds	r1, r1, r2
 800194c:	6539      	str	r1, [r7, #80]	; 0x50
 800194e:	4629      	mov	r1, r5
 8001950:	eb43 0101 	adc.w	r1, r3, r1
 8001954:	6579      	str	r1, [r7, #84]	; 0x54
 8001956:	f04f 0000 	mov.w	r0, #0
 800195a:	f04f 0100 	mov.w	r1, #0
 800195e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001962:	4623      	mov	r3, r4
 8001964:	0a18      	lsrs	r0, r3, #8
 8001966:	462a      	mov	r2, r5
 8001968:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800196c:	462b      	mov	r3, r5
 800196e:	1219      	asrs	r1, r3, #8
 8001970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001974:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001978:	b21b      	sxth	r3, r3
 800197a:	17da      	asrs	r2, r3, #31
 800197c:	64bb      	str	r3, [r7, #72]	; 0x48
 800197e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800198c:	464c      	mov	r4, r9
 800198e:	0123      	lsls	r3, r4, #4
 8001990:	46c4      	mov	ip, r8
 8001992:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001996:	4644      	mov	r4, r8
 8001998:	0122      	lsls	r2, r4, #4
 800199a:	1884      	adds	r4, r0, r2
 800199c:	603c      	str	r4, [r7, #0]
 800199e:	eb41 0303 	adc.w	r3, r1, r3
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 80019ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80019b6:	46bd      	mov	sp, r7
 80019b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019bc <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80019ce:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	039a      	lsls	r2, r3, #14
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019da:	051b      	lsls	r3, r3, #20
 80019dc:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019e4:	4619      	mov	r1, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019f2:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019fa:	4611      	mov	r1, r2
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	fb01 f202 	mul.w	r2, r1, r2
 8001a02:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	7f09      	ldrb	r1, [r1, #28]
 8001a08:	4608      	mov	r0, r1
 8001a0a:	6979      	ldr	r1, [r7, #20]
 8001a0c:	fb00 f101 	mul.w	r1, r0, r1
 8001a10:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a12:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a16:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a1a:	1292      	asrs	r2, r2, #10
 8001a1c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a26:	fb01 f202 	mul.w	r2, r1, r2
 8001a2a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001a2e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	13db      	asrs	r3, r3, #15
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	13d2      	asrs	r2, r2, #15
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	7e12      	ldrb	r2, [r2, #24]
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a5a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a62:	bfa8      	it	ge
 8001a64:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a68:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	131b      	asrs	r3, r3, #12
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a8c:	2b60      	cmp	r3, #96	; 0x60
 8001a8e:	d007      	beq.n	8001aa0 <bmp280_read_fixed+0x28>
		if (humidity)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <bmp280_read_fixed+0x32>
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	e000      	b.n	8001aac <bmp280_read_fixed+0x34>
 8001aaa:	2306      	movs	r3, #6
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f107 0218 	add.w	r2, r7, #24
 8001ab6:	21f7      	movs	r1, #247	; 0xf7
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7ff fab1 	bl	8001020 <read_data>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <bmp280_read_fixed+0x50>
		return false;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e038      	b.n	8001b3a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ac8:	7e3b      	ldrb	r3, [r7, #24]
 8001aca:	031a      	lsls	r2, r3, #12
 8001acc:	7e7b      	ldrb	r3, [r7, #25]
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	7eba      	ldrb	r2, [r7, #26]
 8001ad4:	0912      	lsrs	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001adc:	7efb      	ldrb	r3, [r7, #27]
 8001ade:	031a      	lsls	r2, r3, #12
 8001ae0:	7f3b      	ldrb	r3, [r7, #28]
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	7f7a      	ldrb	r2, [r7, #29]
 8001ae8:	0912      	lsrs	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	4313      	orrs	r3, r2
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	461a      	mov	r2, r3
 8001af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fc6d 	bl	80013d8 <compensate_temperature>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	461a      	mov	r2, r3
 8001b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fc9c 	bl	8001448 <compensate_pressure>
 8001b10:	4602      	mov	r2, r0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00d      	beq.n	8001b38 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b1c:	7fbb      	ldrb	r3, [r7, #30]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	7ffa      	ldrb	r2, [r7, #31]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6a39      	ldr	r1, [r7, #32]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff ff45 	bl	80019bc <compensate_humidity>
 8001b32:	4602      	mov	r2, r0
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3730      	adds	r7, #48	; 0x30
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <bmp280_read_float+0x1a>
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	e000      	b.n	8001b60 <bmp280_read_float+0x1c>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f107 0218 	add.w	r2, r7, #24
 8001b64:	f107 011c 	add.w	r1, r7, #28
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff ff85 	bl	8001a78 <bmp280_read_fixed>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d02d      	beq.n	8001bd0 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fba4 	bl	80002c4 <__aeabi_i2f>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4917      	ldr	r1, [pc, #92]	; (8001bdc <bmp280_read_float+0x98>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fca7 	bl	80004d4 <__aeabi_fdiv>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fb93 	bl	80002bc <__aeabi_ui2f>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc99 	bl	80004d4 <__aeabi_fdiv>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00d      	beq.n	8001bcc <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fb82 	bl	80002bc <__aeabi_ui2f>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc88 	bl	80004d4 <__aeabi_fdiv>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	601a      	str	r2, [r3, #0]
		return true;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <bmp280_read_float+0x8e>
	}

	return false;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	42c80000 	.word	0x42c80000

08001be0 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8001be8:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <DS3231_Init+0x18>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000094 	.word	0x20000094

08001bfc <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2100      	movs	r1, #0
 8001c12:	460a      	mov	r2, r1
 8001c14:	801a      	strh	r2, [r3, #0]
 8001c16:	460a      	mov	r2, r1
 8001c18:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8001c1a:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <DS3231_GetTime+0xf4>)
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	f107 020f 	add.w	r2, r7, #15
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	21d0      	movs	r1, #208	; 0xd0
 8001c2c:	f001 f8e4 	bl	8002df8 <HAL_I2C_Master_Transmit>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <DS3231_GetTime+0x3e>
 8001c36:	2300      	movs	r3, #0
 8001c38:	e055      	b.n	8001ce6 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <DS3231_GetTime+0xf4>)
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	f107 0208 	add.w	r2, r7, #8
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2307      	movs	r3, #7
 8001c4a:	21d0      	movs	r1, #208	; 0xd0
 8001c4c:	f001 f9d2 	bl	8002ff4 <HAL_I2C_Master_Receive>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <DS3231_GetTime+0x5e>
 8001c56:	2300      	movs	r3, #0
 8001c58:	e045      	b.n	8001ce6 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 8001c5a:	7a3b      	ldrb	r3, [r7, #8]
 8001c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f846 	bl	8001cf4 <B2D>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8001c70:	7a7b      	ldrb	r3, [r7, #9]
 8001c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f83b 	bl	8001cf4 <B2D>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 8001c86:	7abb      	ldrb	r3, [r7, #10]
 8001c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f830 	bl	8001cf4 <B2D>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8001ca8:	7b3b      	ldrb	r3, [r7, #12]
 8001caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f81f 	bl	8001cf4 <B2D>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8001cbe:	7b7b      	ldrb	r3, [r7, #13]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f814 	bl	8001cf4 <B2D>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8001cd4:	7bbb      	ldrb	r3, [r7, #14]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f80c 	bl	8001cf4 <B2D>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	701a      	strb	r2, [r3, #0]

  return true;
 8001ce4:	2301      	movs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000094 	.word	0x20000094

08001cf4 <B2D>:

  return true;
}

static uint8_t B2D(uint8_t bcd)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	b2db      	uxtb	r3, r3
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d2a:	f000 fbbf 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2e:	f000 f89b 	bl	8001e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d32:	f000 f943 	bl	8001fbc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d36:	f000 f90b 	bl	8001f50 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001d3a:	f000 f8db 	bl	8001ef4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Init LCD
  ILI9341_SPI_Init();
 8001d3e:	f7fe fe21 	bl	8000984 <ILI9341_SPI_Init>
  ILI9341_Init();
 8001d42:	f7fe ff4f 	bl	8000be4 <ILI9341_Init>
  ILI9341_Enable();
 8001d46:	f7fe ff41 	bl	8000bcc <ILI9341_Enable>
  ILI9341_Fill_Screen(BLACK);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff f8f8 	bl	8000f40 <ILI9341_Fill_Screen>

  // DC3231 init
  DS3231_Init(&hi2c1);
 8001d50:	482d      	ldr	r0, [pc, #180]	; (8001e08 <main+0xe4>)
 8001d52:	f7ff ff45 	bl	8001be0 <DS3231_Init>

  // Init BME280
  bmp280_init_default_params(&bmp280.params);
 8001d56:	482d      	ldr	r0, [pc, #180]	; (8001e0c <main+0xe8>)
 8001d58:	f7ff f918 	bl	8000f8c <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <main+0xec>)
 8001d5e:	2276      	movs	r2, #118	; 0x76
 8001d60:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8001d62:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <main+0xec>)
 8001d64:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <main+0xe4>)
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28
  if(bmp280_init(&bmp280, &bmp280.params) != true)
 8001d68:	4928      	ldr	r1, [pc, #160]	; (8001e0c <main+0xe8>)
 8001d6a:	4829      	ldr	r0, [pc, #164]	; (8001e10 <main+0xec>)
 8001d6c:	f7ff fa87 	bl	800127e <bmp280_init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d000      	beq.n	8001d7e <main+0x5a>
  {
	  // error
	  while(1){}
 8001d7c:	e7fe      	b.n	8001d7c <main+0x58>
  }
  bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <main+0xec>)
 8001d80:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d84:	2b60      	cmp	r3, #96	; 0x60
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d8e:	f003 fd87 	bl	80058a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d92:	4a20      	ldr	r2, [pc, #128]	; (8001e14 <main+0xf0>)
 8001d94:	2100      	movs	r1, #0
 8001d96:	4820      	ldr	r0, [pc, #128]	; (8001e18 <main+0xf4>)
 8001d98:	f003 fde8 	bl	800596c <osThreadNew>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <main+0xf8>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* creation of RTC_DS3231_Task */
  RTC_DS3231_TaskHandle = osThreadNew(start_RTC_DS3231_Task, NULL, &RTC_DS3231_Task_attributes);
 8001da2:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <main+0xfc>)
 8001da4:	2100      	movs	r1, #0
 8001da6:	481f      	ldr	r0, [pc, #124]	; (8001e24 <main+0x100>)
 8001da8:	f003 fde0 	bl	800596c <osThreadNew>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <main+0x104>)
 8001db0:	6013      	str	r3, [r2, #0]

  /* creation of BPE280_Task */
  BPE280_TaskHandle = osThreadNew(start_BPE280_Task, NULL, &BPE280_Task_attributes);
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <main+0x108>)
 8001db4:	2100      	movs	r1, #0
 8001db6:	481e      	ldr	r0, [pc, #120]	; (8001e30 <main+0x10c>)
 8001db8:	f003 fdd8 	bl	800596c <osThreadNew>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <main+0x110>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* creation of MAIN_TASK */
  MAIN_TASKHandle = osThreadNew(start_MAIN_TASK, NULL, &MAIN_TASK_attributes);
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <main+0x114>)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	481d      	ldr	r0, [pc, #116]	; (8001e3c <main+0x118>)
 8001dc8:	f003 fdd0 	bl	800596c <osThreadNew>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <main+0x11c>)
 8001dd0:	6013      	str	r3, [r2, #0]

  /* creation of UART_USB_Task */
  UART_USB_TaskHandle = osThreadNew(start_UART_USB_Task, NULL, &UART_USB_Task_attributes);
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <main+0x120>)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	481c      	ldr	r0, [pc, #112]	; (8001e48 <main+0x124>)
 8001dd8:	f003 fdc8 	bl	800596c <osThreadNew>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <main+0x128>)
 8001de0:	6013      	str	r3, [r2, #0]

  /* creation of Buttons_Task */
  Buttons_TaskHandle = osThreadNew(start_Buttons_Task, NULL, &Buttons_Task_attributes);
 8001de2:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <main+0x12c>)
 8001de4:	2100      	movs	r1, #0
 8001de6:	481b      	ldr	r0, [pc, #108]	; (8001e54 <main+0x130>)
 8001de8:	f003 fdc0 	bl	800596c <osThreadNew>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <main+0x134>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(start_LCD_Task, NULL, &LCD_Task_attributes);
 8001df2:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <main+0x138>)
 8001df4:	2100      	movs	r1, #0
 8001df6:	481a      	ldr	r0, [pc, #104]	; (8001e60 <main+0x13c>)
 8001df8:	f003 fdb8 	bl	800596c <osThreadNew>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <main+0x140>)
 8001e00:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e02:	f003 fd7f 	bl	8005904 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <main+0xe2>
 8001e08:	200000d8 	.word	0x200000d8
 8001e0c:	200000c4 	.word	0x200000c4
 8001e10:	20000098 	.word	0x20000098
 8001e14:	08008540 	.word	0x08008540
 8001e18:	080020c9 	.word	0x080020c9
 8001e1c:	20000184 	.word	0x20000184
 8001e20:	08008564 	.word	0x08008564
 8001e24:	08002131 	.word	0x08002131
 8001e28:	20000188 	.word	0x20000188
 8001e2c:	08008588 	.word	0x08008588
 8001e30:	08002141 	.word	0x08002141
 8001e34:	2000018c 	.word	0x2000018c
 8001e38:	080085ac 	.word	0x080085ac
 8001e3c:	08002151 	.word	0x08002151
 8001e40:	20000190 	.word	0x20000190
 8001e44:	080085d0 	.word	0x080085d0
 8001e48:	08002161 	.word	0x08002161
 8001e4c:	20000194 	.word	0x20000194
 8001e50:	080085f4 	.word	0x080085f4
 8001e54:	08002171 	.word	0x08002171
 8001e58:	20000198 	.word	0x20000198
 8001e5c:	08008618 	.word	0x08008618
 8001e60:	08002181 	.word	0x08002181
 8001e64:	2000019c 	.word	0x2000019c

08001e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b090      	sub	sp, #64	; 0x40
 8001e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6e:	f107 0318 	add.w	r3, r7, #24
 8001e72:	2228      	movs	r2, #40	; 0x28
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f006 fa4c 	bl	8008314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ea6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eac:	f107 0318 	add.w	r3, r7, #24
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fb0b 	bl	80044cc <HAL_RCC_OscConfig>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ebc:	f000 f97a 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fd78 	bl	80049d0 <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ee6:	f000 f965 	bl	80021b4 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3740      	adds	r7, #64	; 0x40
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001efa:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <MX_I2C1_Init+0x54>)
 8001efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <MX_I2C1_Init+0x58>)
 8001f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f32:	f000 fe1d 	bl	8002b70 <HAL_I2C_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f3c:	f000 f93a 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200000d8 	.word	0x200000d8
 8001f48:	40005400 	.word	0x40005400
 8001f4c:	000186a0 	.word	0x000186a0

08001f50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <MX_SPI1_Init+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f84:	2208      	movs	r2, #8
 8001f86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001f9c:	220a      	movs	r2, #10
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_SPI1_Init+0x64>)
 8001fa2:	f002 fec9 	bl	8004d38 <HAL_SPI_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fac:	f000 f902 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000012c 	.word	0x2000012c
 8001fb8:	40013000 	.word	0x40013000

08001fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <MX_GPIO_Init+0xfc>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a38      	ldr	r2, [pc, #224]	; (80020b8 <MX_GPIO_Init+0xfc>)
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <MX_GPIO_Init+0xfc>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <MX_GPIO_Init+0xfc>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a32      	ldr	r2, [pc, #200]	; (80020b8 <MX_GPIO_Init+0xfc>)
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <MX_GPIO_Init+0xfc>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <MX_GPIO_Init+0xfc>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a2c      	ldr	r2, [pc, #176]	; (80020b8 <MX_GPIO_Init+0xfc>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <MX_GPIO_Init+0xfc>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <MX_GPIO_Init+0xfc>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <MX_GPIO_Init+0xfc>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <MX_GPIO_Init+0xfc>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002036:	4821      	ldr	r0, [pc, #132]	; (80020bc <MX_GPIO_Init+0x100>)
 8002038:	f000 fd68 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002042:	481f      	ldr	r0, [pc, #124]	; (80020c0 <MX_GPIO_Init+0x104>)
 8002044:	f000 fd62 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800204e:	481d      	ldr	r0, [pc, #116]	; (80020c4 <MX_GPIO_Init+0x108>)
 8002050:	f000 fd5c 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	2301      	movs	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2302      	movs	r3, #2
 8002064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	4619      	mov	r1, r3
 800206c:	4813      	ldr	r0, [pc, #76]	; (80020bc <MX_GPIO_Init+0x100>)
 800206e:	f000 fbc9 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	4619      	mov	r1, r3
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <MX_GPIO_Init+0x104>)
 800208c:	f000 fbba 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8002090:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002096:	2301      	movs	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4619      	mov	r1, r3
 80020a8:	4806      	ldr	r0, [pc, #24]	; (80020c4 <MX_GPIO_Init+0x108>)
 80020aa:	f000 fbab 	bl	8002804 <HAL_GPIO_Init>

}
 80020ae:	bf00      	nop
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40011000 	.word	0x40011000
 80020c0:	40010c00 	.word	0x40010c00
 80020c4:	40010800 	.word	0x40010800

080020c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  ILI9341_Fill_Screen(BLUE);
 80020d0:	201f      	movs	r0, #31
 80020d2:	f7fe ff35 	bl	8000f40 <ILI9341_Fill_Screen>
	 	  HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80020d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020da:	4810      	ldr	r0, [pc, #64]	; (800211c <StartDefaultTask+0x54>)
 80020dc:	f000 fd2e 	bl	8002b3c <HAL_GPIO_TogglePin>
	 	 osDelay(500);
 80020e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020e4:	f003 fcec 	bl	8005ac0 <osDelay>
	 	  ILI9341_Fill_Screen(YELLOW);
 80020e8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80020ec:	f7fe ff28 	bl	8000f40 <ILI9341_Fill_Screen>
	 	 osDelay(500);
 80020f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020f4:	f003 fce4 	bl	8005ac0 <osDelay>

	 	  // Test Clock dc3231
	 	  _RTC time;
	 	  DS3231_GetTime(&time);
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fd7d 	bl	8001bfc <DS3231_GetTime>

	 	  // Test BME280
	 	  if((bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) != true)
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <StartDefaultTask+0x58>)
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <StartDefaultTask+0x5c>)
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <StartDefaultTask+0x60>)
 8002108:	4808      	ldr	r0, [pc, #32]	; (800212c <StartDefaultTask+0x64>)
 800210a:	f7ff fd1b 	bl	8001b44 <bmp280_read_float>
 800210e:	4603      	mov	r3, r0
 8002110:	f083 0301 	eor.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0da      	beq.n	80020d0 <StartDefaultTask+0x8>
	 	  {
	 		  // Error
	 		  while(1){}
 800211a:	e7fe      	b.n	800211a <StartDefaultTask+0x52>
 800211c:	40011000 	.word	0x40011000
 8002120:	200000d4 	.word	0x200000d4
 8002124:	200000cc 	.word	0x200000cc
 8002128:	200000d0 	.word	0x200000d0
 800212c:	20000098 	.word	0x20000098

08002130 <start_RTC_DS3231_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_RTC_DS3231_Task */
void start_RTC_DS3231_Task(void *argument)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_RTC_DS3231_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002138:	2001      	movs	r0, #1
 800213a:	f003 fcc1 	bl	8005ac0 <osDelay>
 800213e:	e7fb      	b.n	8002138 <start_RTC_DS3231_Task+0x8>

08002140 <start_BPE280_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_BPE280_Task */
void start_BPE280_Task(void *argument)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_BPE280_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002148:	2001      	movs	r0, #1
 800214a:	f003 fcb9 	bl	8005ac0 <osDelay>
 800214e:	e7fb      	b.n	8002148 <start_BPE280_Task+0x8>

08002150 <start_MAIN_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_MAIN_TASK */
void start_MAIN_TASK(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_MAIN_TASK */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002158:	2001      	movs	r0, #1
 800215a:	f003 fcb1 	bl	8005ac0 <osDelay>
 800215e:	e7fb      	b.n	8002158 <start_MAIN_TASK+0x8>

08002160 <start_UART_USB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_UART_USB_Task */
void start_UART_USB_Task(void *argument)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_UART_USB_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002168:	2001      	movs	r0, #1
 800216a:	f003 fca9 	bl	8005ac0 <osDelay>
 800216e:	e7fb      	b.n	8002168 <start_UART_USB_Task+0x8>

08002170 <start_Buttons_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_Buttons_Task */
void start_Buttons_Task(void *argument)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_Buttons_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002178:	2001      	movs	r0, #1
 800217a:	f003 fca1 	bl	8005ac0 <osDelay>
 800217e:	e7fb      	b.n	8002178 <start_Buttons_Task+0x8>

08002180 <start_LCD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_LCD_Task */
void start_LCD_Task(void *argument)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_LCD_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002188:	2001      	movs	r0, #1
 800218a:	f003 fc99 	bl	8005ac0 <osDelay>
 800218e:	e7fb      	b.n	8002188 <start_LCD_Task+0x8>

08002190 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021a2:	f000 f999 	bl	80024d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40000800 	.word	0x40000800

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	e7fe      	b.n	80021bc <Error_Handler+0x8>
	...

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_MspInit+0x68>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_MspInit+0x68>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6193      	str	r3, [r2, #24]
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_MspInit+0x68>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_MspInit+0x68>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_MspInit+0x68>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_MspInit+0x68>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	210f      	movs	r1, #15
 80021fa:	f06f 0001 	mvn.w	r0, #1
 80021fe:	f000 fa60 	bl	80026c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_MspInit+0x6c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_MspInit+0x6c>)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40010000 	.word	0x40010000

08002230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <HAL_I2C_MspInit+0x70>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d123      	bne.n	8002298 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002256:	f043 0308 	orr.w	r3, r3, #8
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002268:	23c0      	movs	r3, #192	; 0xc0
 800226a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226c:	2312      	movs	r3, #18
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4619      	mov	r1, r3
 800227a:	480b      	ldr	r0, [pc, #44]	; (80022a8 <HAL_I2C_MspInit+0x78>)
 800227c:	f000 fac2 	bl	8002804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800228a:	61d3      	str	r3, [r2, #28]
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40005400 	.word	0x40005400
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010c00 	.word	0x40010c00

080022ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_SPI_MspInit+0x98>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d137      	bne.n	800233c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_SPI_MspInit+0x9c>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_SPI_MspInit+0x9c>)
 80022d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_SPI_MspInit+0x9c>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_SPI_MspInit+0x9c>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a17      	ldr	r2, [pc, #92]	; (8002348 <HAL_SPI_MspInit+0x9c>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_SPI_MspInit+0x9c>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022fc:	23a0      	movs	r3, #160	; 0xa0
 80022fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	4619      	mov	r1, r3
 800230e:	480f      	ldr	r0, [pc, #60]	; (800234c <HAL_SPI_MspInit+0xa0>)
 8002310:	f000 fa78 	bl	8002804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002314:	2340      	movs	r3, #64	; 0x40
 8002316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4619      	mov	r1, r3
 8002326:	4809      	ldr	r0, [pc, #36]	; (800234c <HAL_SPI_MspInit+0xa0>)
 8002328:	f000 fa6c 	bl	8002804 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2105      	movs	r1, #5
 8002330:	2023      	movs	r0, #35	; 0x23
 8002332:	f000 f9c6 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002336:	2023      	movs	r0, #35	; 0x23
 8002338:	f000 f9df 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800233c:	bf00      	nop
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40013000 	.word	0x40013000
 8002348:	40021000 	.word	0x40021000
 800234c:	40010800 	.word	0x40010800

08002350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	; 0x30
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002360:	2200      	movs	r2, #0
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	201e      	movs	r0, #30
 8002366:	f000 f9ac 	bl	80026c2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800236a:	201e      	movs	r0, #30
 800236c:	f000 f9c5 	bl	80026fa <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_InitTick+0xa0>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <HAL_InitTick+0xa0>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	61d3      	str	r3, [r2, #28]
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_InitTick+0xa0>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002388:	f107 0210 	add.w	r2, r7, #16
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fc82 	bl	8004c9c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002398:	f002 fc6c 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 800239c:	4603      	mov	r3, r0
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a4:	4a13      	ldr	r2, [pc, #76]	; (80023f4 <HAL_InitTick+0xa4>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0c9b      	lsrs	r3, r3, #18
 80023ac:	3b01      	subs	r3, #1
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_InitTick+0xa8>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_InitTick+0xac>)
 80023b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_InitTick+0xa8>)
 80023b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023bc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80023be:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <HAL_InitTick+0xa8>)
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_InitTick+0xa8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_InitTick+0xa8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80023d0:	4809      	ldr	r0, [pc, #36]	; (80023f8 <HAL_InitTick+0xa8>)
 80023d2:	f003 f81b 	bl	800540c <HAL_TIM_Base_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d104      	bne.n	80023e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80023dc:	4806      	ldr	r0, [pc, #24]	; (80023f8 <HAL_InitTick+0xa8>)
 80023de:	f003 f86d 	bl	80054bc <HAL_TIM_Base_Start_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3730      	adds	r7, #48	; 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	431bde83 	.word	0x431bde83
 80023f8:	200001a0 	.word	0x200001a0
 80023fc:	40000800 	.word	0x40000800

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <NMI_Handler+0x4>

08002406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <HardFault_Handler+0x4>

0800240c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <MemManage_Handler+0x4>

08002412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <BusFault_Handler+0x4>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <UsageFault_Handler+0x4>

0800241e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <TIM4_IRQHandler+0x10>)
 8002432:	f003 f895 	bl	8005560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200001a0 	.word	0x200001a0

08002440 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <SPI1_IRQHandler+0x10>)
 8002446:	f002 fe37 	bl	80050b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000012c 	.word	0x2000012c

08002454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002462:	490d      	ldr	r1, [pc, #52]	; (8002498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002478:	4c0a      	ldr	r4, [pc, #40]	; (80024a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002486:	f7ff ffe5 	bl	8002454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248a:	f005 ff0f 	bl	80082ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800248e:	f7ff fc49 	bl	8001d24 <main>
  bx lr
 8002492:	4770      	bx	lr
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800249c:	080086c4 	.word	0x080086c4
  ldr r2, =_sbss
 80024a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024a4:	20002b54 	.word	0x20002b54

080024a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC1_2_IRQHandler>
	...

080024ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_Init+0x28>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_Init+0x28>)
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024bc:	2003      	movs	r0, #3
 80024be:	f000 f8f5 	bl	80026ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c2:	200f      	movs	r0, #15
 80024c4:	f7ff ff44 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c8:	f7ff fe7a 	bl	80021c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_IncTick+0x1c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_IncTick+0x20>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <HAL_IncTick+0x20>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	2000000c 	.word	0x2000000c
 80024f8:	200001e8 	.word	0x200001e8

080024fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b02      	ldr	r3, [pc, #8]	; (800250c <HAL_GetTick+0x10>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	200001e8 	.word	0x200001e8

08002510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff fff0 	bl	80024fc <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002528:	d005      	beq.n	8002536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_Delay+0x44>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002536:	bf00      	nop
 8002538:	f7ff ffe0 	bl	80024fc <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d8f7      	bhi.n	8002538 <HAL_Delay+0x28>
  {
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000000c 	.word	0x2000000c

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60d3      	str	r3, [r2, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0b      	blt.n	80025e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4906      	ldr	r1, [pc, #24]	; (80025f0 <__NVIC_EnableIRQ+0x34>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff4f 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d4:	f7ff ff64 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 80026d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ffb2 	bl	8002648 <NVIC_EncodePriority>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff81 	bl	80025f4 <__NVIC_SetPriority>
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff57 	bl	80025bc <__NVIC_EnableIRQ>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800272a:	2b02      	cmp	r3, #2
 800272c:	d005      	beq.n	800273a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2204      	movs	r2, #4
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e051      	b.n	80027de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 020e 	bic.w	r2, r2, #14
 8002748:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_DMA_Abort_IT+0xd0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d029      	beq.n	80027b8 <HAL_DMA_Abort_IT+0xa0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a20      	ldr	r2, [pc, #128]	; (80027ec <HAL_DMA_Abort_IT+0xd4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d022      	beq.n	80027b4 <HAL_DMA_Abort_IT+0x9c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_DMA_Abort_IT+0xd8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d01a      	beq.n	80027ae <HAL_DMA_Abort_IT+0x96>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_DMA_Abort_IT+0xdc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d012      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x90>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_DMA_Abort_IT+0xe0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00a      	beq.n	80027a2 <HAL_DMA_Abort_IT+0x8a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <HAL_DMA_Abort_IT+0xe4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d102      	bne.n	800279c <HAL_DMA_Abort_IT+0x84>
 8002796:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800279a:	e00e      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 800279c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a0:	e00b      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a6:	e008      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ac:	e005      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027b2:	e002      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027b4:	2310      	movs	r3, #16
 80027b6:	e000      	b.n	80027ba <HAL_DMA_Abort_IT+0xa2>
 80027b8:	2301      	movs	r3, #1
 80027ba:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_DMA_Abort_IT+0xe8>)
 80027bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
    } 
  }
  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40020008 	.word	0x40020008
 80027ec:	4002001c 	.word	0x4002001c
 80027f0:	40020030 	.word	0x40020030
 80027f4:	40020044 	.word	0x40020044
 80027f8:	40020058 	.word	0x40020058
 80027fc:	4002006c 	.word	0x4002006c
 8002800:	40020000 	.word	0x40020000

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b08b      	sub	sp, #44	; 0x2c
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002816:	e169      	b.n	8002aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002818:	2201      	movs	r2, #1
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8158 	bne.w	8002ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a9a      	ldr	r2, [pc, #616]	; (8002aa4 <HAL_GPIO_Init+0x2a0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d05e      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002840:	4a98      	ldr	r2, [pc, #608]	; (8002aa4 <HAL_GPIO_Init+0x2a0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d875      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002846:	4a98      	ldr	r2, [pc, #608]	; (8002aa8 <HAL_GPIO_Init+0x2a4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d058      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 800284c:	4a96      	ldr	r2, [pc, #600]	; (8002aa8 <HAL_GPIO_Init+0x2a4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d86f      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002852:	4a96      	ldr	r2, [pc, #600]	; (8002aac <HAL_GPIO_Init+0x2a8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d052      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002858:	4a94      	ldr	r2, [pc, #592]	; (8002aac <HAL_GPIO_Init+0x2a8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d869      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800285e:	4a94      	ldr	r2, [pc, #592]	; (8002ab0 <HAL_GPIO_Init+0x2ac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d04c      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002864:	4a92      	ldr	r2, [pc, #584]	; (8002ab0 <HAL_GPIO_Init+0x2ac>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d863      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800286a:	4a92      	ldr	r2, [pc, #584]	; (8002ab4 <HAL_GPIO_Init+0x2b0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d046      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002870:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_GPIO_Init+0x2b0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d85d      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002876:	2b12      	cmp	r3, #18
 8002878:	d82a      	bhi.n	80028d0 <HAL_GPIO_Init+0xcc>
 800287a:	2b12      	cmp	r3, #18
 800287c:	d859      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_GPIO_Init+0x80>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	080028ff 	.word	0x080028ff
 8002888:	080028d9 	.word	0x080028d9
 800288c:	080028eb 	.word	0x080028eb
 8002890:	0800292d 	.word	0x0800292d
 8002894:	08002933 	.word	0x08002933
 8002898:	08002933 	.word	0x08002933
 800289c:	08002933 	.word	0x08002933
 80028a0:	08002933 	.word	0x08002933
 80028a4:	08002933 	.word	0x08002933
 80028a8:	08002933 	.word	0x08002933
 80028ac:	08002933 	.word	0x08002933
 80028b0:	08002933 	.word	0x08002933
 80028b4:	08002933 	.word	0x08002933
 80028b8:	08002933 	.word	0x08002933
 80028bc:	08002933 	.word	0x08002933
 80028c0:	08002933 	.word	0x08002933
 80028c4:	08002933 	.word	0x08002933
 80028c8:	080028e1 	.word	0x080028e1
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	4a79      	ldr	r2, [pc, #484]	; (8002ab8 <HAL_GPIO_Init+0x2b4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028d6:	e02c      	b.n	8002932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	623b      	str	r3, [r7, #32]
          break;
 80028de:	e029      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	3304      	adds	r3, #4
 80028e6:	623b      	str	r3, [r7, #32]
          break;
 80028e8:	e024      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	3308      	adds	r3, #8
 80028f0:	623b      	str	r3, [r7, #32]
          break;
 80028f2:	e01f      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	330c      	adds	r3, #12
 80028fa:	623b      	str	r3, [r7, #32]
          break;
 80028fc:	e01a      	b.n	8002934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002906:	2304      	movs	r3, #4
 8002908:	623b      	str	r3, [r7, #32]
          break;
 800290a:	e013      	b.n	8002934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002914:	2308      	movs	r3, #8
 8002916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	611a      	str	r2, [r3, #16]
          break;
 800291e:	e009      	b.n	8002934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002920:	2308      	movs	r3, #8
 8002922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	615a      	str	r2, [r3, #20]
          break;
 800292a:	e003      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
          break;
 8002930:	e000      	b.n	8002934 <HAL_GPIO_Init+0x130>
          break;
 8002932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2bff      	cmp	r3, #255	; 0xff
 8002938:	d801      	bhi.n	800293e <HAL_GPIO_Init+0x13a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_Init+0x13e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d802      	bhi.n	8002950 <HAL_GPIO_Init+0x14c>
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	e002      	b.n	8002956 <HAL_GPIO_Init+0x152>
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	3b08      	subs	r3, #8
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	210f      	movs	r1, #15
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80b1 	beq.w	8002ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800299c:	4a48      	ldr	r2, [pc, #288]	; (8002ac0 <HAL_GPIO_Init+0x2bc>)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	3302      	adds	r3, #2
 80029a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	220f      	movs	r2, #15
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a40      	ldr	r2, [pc, #256]	; (8002ac4 <HAL_GPIO_Init+0x2c0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_GPIO_Init+0x1ec>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a3f      	ldr	r2, [pc, #252]	; (8002ac8 <HAL_GPIO_Init+0x2c4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00d      	beq.n	80029ec <HAL_GPIO_Init+0x1e8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a3e      	ldr	r2, [pc, #248]	; (8002acc <HAL_GPIO_Init+0x2c8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <HAL_GPIO_Init+0x1e4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a3d      	ldr	r2, [pc, #244]	; (8002ad0 <HAL_GPIO_Init+0x2cc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_GPIO_Init+0x1e0>
 80029e0:	2303      	movs	r3, #3
 80029e2:	e006      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029f0:	2300      	movs	r3, #0
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a02:	492f      	ldr	r1, [pc, #188]	; (8002ac0 <HAL_GPIO_Init+0x2bc>)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	492c      	ldr	r1, [pc, #176]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4928      	ldr	r1, [pc, #160]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4922      	ldr	r1, [pc, #136]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	491e      	ldr	r1, [pc, #120]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4914      	ldr	r1, [pc, #80]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d021      	beq.n	8002ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
 8002aa0:	e021      	b.n	8002ae6 <HAL_GPIO_Init+0x2e2>
 8002aa2:	bf00      	nop
 8002aa4:	10320000 	.word	0x10320000
 8002aa8:	10310000 	.word	0x10310000
 8002aac:	10220000 	.word	0x10220000
 8002ab0:	10210000 	.word	0x10210000
 8002ab4:	10120000 	.word	0x10120000
 8002ab8:	10110000 	.word	0x10110000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	40010800 	.word	0x40010800
 8002ac8:	40010c00 	.word	0x40010c00
 8002acc:	40011000 	.word	0x40011000
 8002ad0:	40011400 	.word	0x40011400
 8002ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4909      	ldr	r1, [pc, #36]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	3301      	adds	r3, #1
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f47f ae8e 	bne.w	8002818 <HAL_GPIO_Init+0x14>
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	372c      	adds	r7, #44	; 0x2c
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b28:	e003      	b.n	8002b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	041a      	lsls	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4013      	ands	r3, r2
 8002b54:	041a      	lsls	r2, r3, #16
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43d9      	mvns	r1, r3
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	611a      	str	r2, [r3, #16]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e12b      	b.n	8002dda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fb4a 	bl	8002230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2224      	movs	r2, #36	; 0x24
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd4:	f002 f84e 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8002bd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4a81      	ldr	r2, [pc, #516]	; (8002de4 <HAL_I2C_Init+0x274>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d807      	bhi.n	8002bf4 <HAL_I2C_Init+0x84>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <HAL_I2C_Init+0x278>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	bf94      	ite	ls
 8002bec:	2301      	movls	r3, #1
 8002bee:	2300      	movhi	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	e006      	b.n	8002c02 <HAL_I2C_Init+0x92>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a7d      	ldr	r2, [pc, #500]	; (8002dec <HAL_I2C_Init+0x27c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	bf94      	ite	ls
 8002bfc:	2301      	movls	r3, #1
 8002bfe:	2300      	movhi	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0e7      	b.n	8002dda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a78      	ldr	r2, [pc, #480]	; (8002df0 <HAL_I2C_Init+0x280>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	0c9b      	lsrs	r3, r3, #18
 8002c14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a6a      	ldr	r2, [pc, #424]	; (8002de4 <HAL_I2C_Init+0x274>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d802      	bhi.n	8002c44 <HAL_I2C_Init+0xd4>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	3301      	adds	r3, #1
 8002c42:	e009      	b.n	8002c58 <HAL_I2C_Init+0xe8>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	4a69      	ldr	r2, [pc, #420]	; (8002df4 <HAL_I2C_Init+0x284>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	3301      	adds	r3, #1
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	495c      	ldr	r1, [pc, #368]	; (8002de4 <HAL_I2C_Init+0x274>)
 8002c74:	428b      	cmp	r3, r1
 8002c76:	d819      	bhi.n	8002cac <HAL_I2C_Init+0x13c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e59      	subs	r1, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c86:	1c59      	adds	r1, r3, #1
 8002c88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c8c:	400b      	ands	r3, r1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_I2C_Init+0x138>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1e59      	subs	r1, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca6:	e051      	b.n	8002d4c <HAL_I2C_Init+0x1dc>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	e04f      	b.n	8002d4c <HAL_I2C_Init+0x1dc>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d111      	bne.n	8002cd8 <HAL_I2C_Init+0x168>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1e58      	subs	r0, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	440b      	add	r3, r1
 8002cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e012      	b.n	8002cfe <HAL_I2C_Init+0x18e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e58      	subs	r0, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	0099      	lsls	r1, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Init+0x196>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e022      	b.n	8002d4c <HAL_I2C_Init+0x1dc>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10e      	bne.n	8002d2c <HAL_I2C_Init+0x1bc>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1e58      	subs	r0, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	440b      	add	r3, r1
 8002d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2a:	e00f      	b.n	8002d4c <HAL_I2C_Init+0x1dc>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	0099      	lsls	r1, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	6809      	ldr	r1, [r1, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6911      	ldr	r1, [r2, #16]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68d2      	ldr	r2, [r2, #12]
 8002d86:	4311      	orrs	r1, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	000186a0 	.word	0x000186a0
 8002de8:	001e847f 	.word	0x001e847f
 8002dec:	003d08ff 	.word	0x003d08ff
 8002df0:	431bde83 	.word	0x431bde83
 8002df4:	10624dd3 	.word	0x10624dd3

08002df8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	817b      	strh	r3, [r7, #10]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff fb76 	bl	80024fc <HAL_GetTick>
 8002e10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	f040 80e0 	bne.w	8002fe0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2319      	movs	r3, #25
 8002e26:	2201      	movs	r2, #1
 8002e28:	4970      	ldr	r1, [pc, #448]	; (8002fec <HAL_I2C_Master_Transmit+0x1f4>)
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f001 f972 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0d3      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_I2C_Master_Transmit+0x50>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0cc      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d007      	beq.n	8002e6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2221      	movs	r2, #33	; 0x21
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	893a      	ldrh	r2, [r7, #8]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a50      	ldr	r2, [pc, #320]	; (8002ff0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eb0:	8979      	ldrh	r1, [r7, #10]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fe5e 	bl	8003b78 <I2C_MasterRequestWrite>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e08d      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002edc:	e066      	b.n	8002fac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	6a39      	ldr	r1, [r7, #32]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f001 f9ec 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d107      	bne.n	8002f06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06b      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d11b      	bne.n	8002f80 <HAL_I2C_Master_Transmit+0x188>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d017      	beq.n	8002f80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	6a39      	ldr	r1, [r7, #32]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f001 f9dc 	bl	8004342 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00d      	beq.n	8002fac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d107      	bne.n	8002fa8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e01a      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d194      	bne.n	8002ede <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	00100002 	.word	0x00100002
 8002ff0:	ffff0000 	.word	0xffff0000

08002ff4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08c      	sub	sp, #48	; 0x30
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	461a      	mov	r2, r3
 8003000:	460b      	mov	r3, r1
 8003002:	817b      	strh	r3, [r7, #10]
 8003004:	4613      	mov	r3, r2
 8003006:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff fa76 	bl	80024fc <HAL_GetTick>
 8003010:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b20      	cmp	r3, #32
 800301c:	f040 823f 	bne.w	800349e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2319      	movs	r3, #25
 8003026:	2201      	movs	r2, #1
 8003028:	497f      	ldr	r1, [pc, #508]	; (8003228 <HAL_I2C_Master_Receive+0x234>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f001 f872 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	e232      	b.n	80034a0 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_I2C_Master_Receive+0x54>
 8003044:	2302      	movs	r3, #2
 8003046:	e22b      	b.n	80034a0 <HAL_I2C_Master_Receive+0x4ac>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d007      	beq.n	800306e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800307c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2222      	movs	r2, #34	; 0x22
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2210      	movs	r2, #16
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	893a      	ldrh	r2, [r7, #8]
 800309e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4a5f      	ldr	r2, [pc, #380]	; (800322c <HAL_I2C_Master_Receive+0x238>)
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030b0:	8979      	ldrh	r1, [r7, #10]
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fde0 	bl	8003c7c <I2C_MasterRequestRead>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e1ec      	b.n	80034a0 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d113      	bne.n	80030f6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e1c0      	b.n	8003478 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d11e      	bne.n	800313c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800310e:	b672      	cpsid	i
}
 8003110:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003136:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003138:	b662      	cpsie	i
}
 800313a:	e035      	b.n	80031a8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	2b02      	cmp	r3, #2
 8003142:	d11e      	bne.n	8003182 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003152:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003154:	b672      	cpsid	i
}
 8003156:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800317e:	b662      	cpsie	i
}
 8003180:	e012      	b.n	80031a8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031a8:	e166      	b.n	8003478 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	f200 811f 	bhi.w	80033f2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d123      	bne.n	8003204 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f001 f8ff 	bl	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e167      	b.n	80034a0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003202:	e139      	b.n	8003478 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	2b02      	cmp	r3, #2
 800320a:	d152      	bne.n	80032b2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	2200      	movs	r2, #0
 8003214:	4906      	ldr	r1, [pc, #24]	; (8003230 <HAL_I2C_Master_Receive+0x23c>)
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 ff7c 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e13c      	b.n	80034a0 <HAL_I2C_Master_Receive+0x4ac>
 8003226:	bf00      	nop
 8003228:	00100002 	.word	0x00100002
 800322c:	ffff0000 	.word	0xffff0000
 8003230:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003234:	b672      	cpsid	i
}
 8003236:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800327a:	b662      	cpsie	i
}
 800327c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032b0:	e0e2      	b.n	8003478 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	2200      	movs	r2, #0
 80032ba:	497b      	ldr	r1, [pc, #492]	; (80034a8 <HAL_I2C_Master_Receive+0x4b4>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 ff29 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0e9      	b.n	80034a0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032dc:	b672      	cpsid	i
}
 80032de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003312:	4b66      	ldr	r3, [pc, #408]	; (80034ac <HAL_I2C_Master_Receive+0x4b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	08db      	lsrs	r3, r3, #3
 8003318:	4a65      	ldr	r2, [pc, #404]	; (80034b0 <HAL_I2C_Master_Receive+0x4bc>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0a1a      	lsrs	r2, r3, #8
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00da      	lsls	r2, r3, #3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	3b01      	subs	r3, #1
 8003330:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d118      	bne.n	800336a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f043 0220 	orr.w	r2, r3, #32
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800335a:	b662      	cpsie	i
}
 800335c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e09a      	b.n	80034a0 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b04      	cmp	r3, #4
 8003376:	d1d9      	bne.n	800332c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033ba:	b662      	cpsie	i
}
 80033bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f0:	e042      	b.n	8003478 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 ffe4 	bl	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e04c      	b.n	80034a0 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d118      	bne.n	8003478 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	2b00      	cmp	r3, #0
 800347e:	f47f ae94 	bne.w	80031aa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e000      	b.n	80034a0 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
  }
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3728      	adds	r7, #40	; 0x28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	00010004 	.word	0x00010004
 80034ac:	20000004 	.word	0x20000004
 80034b0:	14f8b589 	.word	0x14f8b589

080034b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	461a      	mov	r2, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	817b      	strh	r3, [r7, #10]
 80034c6:	460b      	mov	r3, r1
 80034c8:	813b      	strh	r3, [r7, #8]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ce:	f7ff f815 	bl	80024fc <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b20      	cmp	r3, #32
 80034de:	f040 80d9 	bne.w	8003694 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2319      	movs	r3, #25
 80034e8:	2201      	movs	r2, #1
 80034ea:	496d      	ldr	r1, [pc, #436]	; (80036a0 <HAL_I2C_Mem_Write+0x1ec>)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fe11 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0cc      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_I2C_Mem_Write+0x56>
 8003506:	2302      	movs	r3, #2
 8003508:	e0c5      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d007      	beq.n	8003530 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2221      	movs	r2, #33	; 0x21
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2240      	movs	r2, #64	; 0x40
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a4d      	ldr	r2, [pc, #308]	; (80036a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003570:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003572:	88f8      	ldrh	r0, [r7, #6]
 8003574:	893a      	ldrh	r2, [r7, #8]
 8003576:	8979      	ldrh	r1, [r7, #10]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	4603      	mov	r3, r0
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fc48 	bl	8003e18 <I2C_RequestMemoryWrite>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d052      	beq.n	8003634 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e081      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fe92 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d107      	bne.n	80035ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06b      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d11b      	bne.n	8003634 <HAL_I2C_Mem_Write+0x180>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1aa      	bne.n	8003592 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fe7e 	bl	8004342 <I2C_WaitOnBTFFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2b04      	cmp	r3, #4
 8003652:	d107      	bne.n	8003664 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e016      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	00100002 	.word	0x00100002
 80036a4:	ffff0000 	.word	0xffff0000

080036a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	; 0x30
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036c6:	f7fe ff19 	bl	80024fc <HAL_GetTick>
 80036ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	f040 8244 	bne.w	8003b62 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2319      	movs	r3, #25
 80036e0:	2201      	movs	r2, #1
 80036e2:	4982      	ldr	r1, [pc, #520]	; (80038ec <HAL_I2C_Mem_Read+0x244>)
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fd15 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
 80036f2:	e237      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_I2C_Mem_Read+0x5a>
 80036fe:	2302      	movs	r3, #2
 8003700:	e230      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d007      	beq.n	8003728 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003736:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2222      	movs	r2, #34	; 0x22
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2240      	movs	r2, #64	; 0x40
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a62      	ldr	r2, [pc, #392]	; (80038f0 <HAL_I2C_Mem_Read+0x248>)
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800376a:	88f8      	ldrh	r0, [r7, #6]
 800376c:	893a      	ldrh	r2, [r7, #8]
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4603      	mov	r3, r0
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fbe2 	bl	8003f44 <I2C_RequestMemoryRead>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1ec      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d113      	bne.n	80037ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e1c0      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d11e      	bne.n	8003800 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037d2:	b672      	cpsid	i
}
 80037d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037fc:	b662      	cpsie	i
}
 80037fe:	e035      	b.n	800386c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	2b02      	cmp	r3, #2
 8003806:	d11e      	bne.n	8003846 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003818:	b672      	cpsid	i
}
 800381a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003840:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003842:	b662      	cpsie	i
}
 8003844:	e012      	b.n	800386c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003854:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800386c:	e166      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	2b03      	cmp	r3, #3
 8003874:	f200 811f 	bhi.w	8003ab6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	2b01      	cmp	r3, #1
 800387e:	d123      	bne.n	80038c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fd9d 	bl	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e167      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038c6:	e139      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d152      	bne.n	8003976 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	2200      	movs	r2, #0
 80038d8:	4906      	ldr	r1, [pc, #24]	; (80038f4 <HAL_I2C_Mem_Read+0x24c>)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fc1a 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e13c      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
 80038ea:	bf00      	nop
 80038ec:	00100002 	.word	0x00100002
 80038f0:	ffff0000 	.word	0xffff0000
 80038f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038f8:	b672      	cpsid	i
}
 80038fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800393e:	b662      	cpsie	i
}
 8003940:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003974:	e0e2      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	2200      	movs	r2, #0
 800397e:	497b      	ldr	r1, [pc, #492]	; (8003b6c <HAL_I2C_Mem_Read+0x4c4>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fbc7 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0e9      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039a0:	b672      	cpsid	i
}
 80039a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039d6:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <HAL_I2C_Mem_Read+0x4c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	08db      	lsrs	r3, r3, #3
 80039dc:	4a65      	ldr	r2, [pc, #404]	; (8003b74 <HAL_I2C_Mem_Read+0x4cc>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0a1a      	lsrs	r2, r3, #8
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00da      	lsls	r2, r3, #3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d118      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f043 0220 	orr.w	r2, r3, #32
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a1e:	b662      	cpsie	i
}
 8003a20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e09a      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d1d9      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a7e:	b662      	cpsie	i
}
 8003a80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ab4:	e042      	b.n	8003b3c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fc82 	bl	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e04c      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d118      	bne.n	8003b3c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f ae94 	bne.w	800386e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
  }
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3728      	adds	r7, #40	; 0x28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	00010004 	.word	0x00010004
 8003b70:	20000004 	.word	0x20000004
 8003b74:	14f8b589 	.word	0x14f8b589

08003b78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	460b      	mov	r3, r1
 8003b86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d006      	beq.n	8003ba2 <I2C_MasterRequestWrite+0x2a>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d003      	beq.n	8003ba2 <I2C_MasterRequestWrite+0x2a>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ba0:	d108      	bne.n	8003bb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e00b      	b.n	8003bcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	2b12      	cmp	r3, #18
 8003bba:	d107      	bne.n	8003bcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fa9b 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf2:	d103      	bne.n	8003bfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e035      	b.n	8003c6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c08:	d108      	bne.n	8003c1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c0a:	897b      	ldrh	r3, [r7, #10]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c18:	611a      	str	r2, [r3, #16]
 8003c1a:	e01b      	b.n	8003c54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c1c:	897b      	ldrh	r3, [r7, #10]
 8003c1e:	11db      	asrs	r3, r3, #7
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f003 0306 	and.w	r3, r3, #6
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f063 030f 	orn	r3, r3, #15
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	490e      	ldr	r1, [pc, #56]	; (8003c74 <I2C_MasterRequestWrite+0xfc>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fac1 	bl	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e010      	b.n	8003c6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4907      	ldr	r1, [pc, #28]	; (8003c78 <I2C_MasterRequestWrite+0x100>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fab1 	bl	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	00010008 	.word	0x00010008
 8003c78:	00010002 	.word	0x00010002

08003c7c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d006      	beq.n	8003cb6 <I2C_MasterRequestRead+0x3a>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d003      	beq.n	8003cb6 <I2C_MasterRequestRead+0x3a>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cb4:	d108      	bne.n	8003cc8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e00b      	b.n	8003ce0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	2b11      	cmp	r3, #17
 8003cce:	d107      	bne.n	8003ce0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fa11 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d06:	d103      	bne.n	8003d10 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e079      	b.n	8003e08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1c:	d108      	bne.n	8003d30 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	611a      	str	r2, [r3, #16]
 8003d2e:	e05f      	b.n	8003df0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d30:	897b      	ldrh	r3, [r7, #10]
 8003d32:	11db      	asrs	r3, r3, #7
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f003 0306 	and.w	r3, r3, #6
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f063 030f 	orn	r3, r3, #15
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4930      	ldr	r1, [pc, #192]	; (8003e10 <I2C_MasterRequestRead+0x194>)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fa37 	bl	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e054      	b.n	8003e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d5e:	897b      	ldrh	r3, [r7, #10]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4929      	ldr	r1, [pc, #164]	; (8003e14 <I2C_MasterRequestRead+0x198>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fa27 	bl	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e044      	b.n	8003e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f9af 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dca:	d103      	bne.n	8003dd4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e017      	b.n	8003e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003dd8:	897b      	ldrh	r3, [r7, #10]
 8003dda:	11db      	asrs	r3, r3, #7
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 0306 	and.w	r3, r3, #6
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f063 030e 	orn	r3, r3, #14
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4907      	ldr	r1, [pc, #28]	; (8003e14 <I2C_MasterRequestRead+0x198>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f9e3 	bl	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	00010008 	.word	0x00010008
 8003e14:	00010002 	.word	0x00010002

08003e18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	817b      	strh	r3, [r7, #10]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	813b      	strh	r3, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f960 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e68:	d103      	bne.n	8003e72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e05f      	b.n	8003f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	492d      	ldr	r1, [pc, #180]	; (8003f40 <I2C_RequestMemoryWrite+0x128>)
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f998 	bl	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e04c      	b.n	8003f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb4:	6a39      	ldr	r1, [r7, #32]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fa02 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d107      	bne.n	8003eda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e02b      	b.n	8003f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]
 8003eee:	e021      	b.n	8003f34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef0:	893b      	ldrh	r3, [r7, #8]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f00:	6a39      	ldr	r1, [r7, #32]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f9dc 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d107      	bne.n	8003f26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e005      	b.n	8003f36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2a:	893b      	ldrh	r3, [r7, #8]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	00010002 	.word	0x00010002

08003f44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	817b      	strh	r3, [r7, #10]
 8003f56:	460b      	mov	r3, r1
 8003f58:	813b      	strh	r3, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f8c2 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa4:	d103      	bne.n	8003fae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e0aa      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb2:	897b      	ldrh	r3, [r7, #10]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	4952      	ldr	r1, [pc, #328]	; (8004110 <I2C_RequestMemoryRead+0x1cc>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f8fa 	bl	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e097      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f964 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e076      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004020:	893b      	ldrh	r3, [r7, #8]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	e021      	b.n	8004070 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800402c:	893b      	ldrh	r3, [r7, #8]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	b29b      	uxth	r3, r3
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	6a39      	ldr	r1, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f93e 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b04      	cmp	r3, #4
 8004050:	d107      	bne.n	8004062 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e050      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004066:	893b      	ldrh	r3, [r7, #8]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	6a39      	ldr	r1, [r7, #32]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f923 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b04      	cmp	r3, #4
 8004086:	d107      	bne.n	8004098 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004096:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e035      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f82b 	bl	8004114 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00d      	beq.n	80040e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d2:	d103      	bne.n	80040dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e013      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040e0:	897b      	ldrh	r3, [r7, #10]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	6a3a      	ldr	r2, [r7, #32]
 80040f4:	4906      	ldr	r1, [pc, #24]	; (8004110 <I2C_RequestMemoryRead+0x1cc>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f863 	bl	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	00010002 	.word	0x00010002

08004114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004124:	e025      	b.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800412c:	d021      	beq.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fe f9e5 	bl	80024fc <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d116      	bne.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f043 0220 	orr.w	r2, r3, #32
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e023      	b.n	80041ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10d      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0x84>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	43da      	mvns	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	e00c      	b.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	43da      	mvns	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d0b6      	beq.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041d0:	e051      	b.n	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e0:	d123      	bne.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e046      	b.n	80042b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004230:	d021      	beq.n	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fe f963 	bl	80024fc <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d116      	bne.n	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e020      	b.n	80042b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10c      	bne.n	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	e00b      	b.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	43da      	mvns	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d18d      	bne.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042cc:	e02d      	b.n	800432a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f8ce 	bl	8004470 <I2C_IsAcknowledgeFailed>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e02d      	b.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e4:	d021      	beq.n	800432a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7fe f909 	bl	80024fc <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d116      	bne.n	800432a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f043 0220 	orr.w	r2, r3, #32
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e007      	b.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	2b80      	cmp	r3, #128	; 0x80
 8004336:	d1ca      	bne.n	80042ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800434e:	e02d      	b.n	80043ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f88d 	bl	8004470 <I2C_IsAcknowledgeFailed>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e02d      	b.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004366:	d021      	beq.n	80043ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004368:	f7fe f8c8 	bl	80024fc <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	429a      	cmp	r2, r3
 8004376:	d302      	bcc.n	800437e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e007      	b.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d1ca      	bne.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043d0:	e042      	b.n	8004458 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d119      	bne.n	8004414 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0210 	mvn.w	r2, #16
 80043e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e029      	b.n	8004468 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004414:	f7fe f872 	bl	80024fc <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	429a      	cmp	r2, r3
 8004422:	d302      	bcc.n	800442a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d116      	bne.n	8004458 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e007      	b.n	8004468 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d1b5      	bne.n	80043d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004486:	d11b      	bne.n	80044c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004490:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f043 0204 	orr.w	r2, r3, #4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e272      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8087 	beq.w	80045fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ec:	4b92      	ldr	r3, [pc, #584]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d00c      	beq.n	8004512 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044f8:	4b8f      	ldr	r3, [pc, #572]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	d112      	bne.n	800452a <HAL_RCC_OscConfig+0x5e>
 8004504:	4b8c      	ldr	r3, [pc, #560]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004510:	d10b      	bne.n	800452a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004512:	4b89      	ldr	r3, [pc, #548]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d06c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x12c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d168      	bne.n	80045f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e24c      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x76>
 8004534:	4b80      	ldr	r3, [pc, #512]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a7f      	ldr	r2, [pc, #508]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e02e      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x98>
 800454a:	4b7b      	ldr	r3, [pc, #492]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7a      	ldr	r2, [pc, #488]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b78      	ldr	r3, [pc, #480]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a77      	ldr	r2, [pc, #476]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800455c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e01d      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0xbc>
 800456e:	4b72      	ldr	r3, [pc, #456]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a71      	ldr	r2, [pc, #452]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b6f      	ldr	r3, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6e      	ldr	r2, [pc, #440]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004588:	4b6b      	ldr	r3, [pc, #428]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6a      	ldr	r2, [pc, #424]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b68      	ldr	r3, [pc, #416]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a67      	ldr	r2, [pc, #412]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800459a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fd ffa8 	bl	80024fc <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd ffa4 	bl	80024fc <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e200      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b5d      	ldr	r3, [pc, #372]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0xe4>
 80045ce:	e014      	b.n	80045fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd ff94 	bl	80024fc <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd ff90 	bl	80024fc <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1ec      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	4b53      	ldr	r3, [pc, #332]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x10c>
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d063      	beq.n	80046ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004606:	4b4c      	ldr	r3, [pc, #304]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004612:	4b49      	ldr	r3, [pc, #292]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b08      	cmp	r3, #8
 800461c:	d11c      	bne.n	8004658 <HAL_RCC_OscConfig+0x18c>
 800461e:	4b46      	ldr	r3, [pc, #280]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d116      	bne.n	8004658 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	4b43      	ldr	r3, [pc, #268]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCC_OscConfig+0x176>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e1c0      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4939      	ldr	r1, [pc, #228]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004656:	e03a      	b.n	80046ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_RCC_OscConfig+0x270>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fd ff49 	bl	80024fc <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fd ff45 	bl	80024fc <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1a1      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4927      	ldr	r1, [pc, #156]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
 80046a0:	e015      	b.n	80046ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a2:	4b26      	ldr	r3, [pc, #152]	; (800473c <HAL_RCC_OscConfig+0x270>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd ff28 	bl	80024fc <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b0:	f7fd ff24 	bl	80024fc <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e180      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d03a      	beq.n	8004750 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d019      	beq.n	8004716 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e2:	4b17      	ldr	r3, [pc, #92]	; (8004740 <HAL_RCC_OscConfig+0x274>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e8:	f7fd ff08 	bl	80024fc <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f0:	f7fd ff04 	bl	80024fc <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e160      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800470e:	2001      	movs	r0, #1
 8004710:	f000 faf4 	bl	8004cfc <RCC_Delay>
 8004714:	e01c      	b.n	8004750 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_OscConfig+0x274>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471c:	f7fd feee 	bl	80024fc <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004722:	e00f      	b.n	8004744 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd feea 	bl	80024fc <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d908      	bls.n	8004744 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e146      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	42420000 	.word	0x42420000
 8004740:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e9      	bne.n	8004724 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80a6 	beq.w	80048aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004762:	4b8b      	ldr	r3, [pc, #556]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10d      	bne.n	800478a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	4a87      	ldr	r2, [pc, #540]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004778:	61d3      	str	r3, [r2, #28]
 800477a:	4b85      	ldr	r3, [pc, #532]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	4b82      	ldr	r3, [pc, #520]	; (8004994 <HAL_RCC_OscConfig+0x4c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d118      	bne.n	80047c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004796:	4b7f      	ldr	r3, [pc, #508]	; (8004994 <HAL_RCC_OscConfig+0x4c8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a7e      	ldr	r2, [pc, #504]	; (8004994 <HAL_RCC_OscConfig+0x4c8>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a2:	f7fd feab 	bl	80024fc <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047aa:	f7fd fea7 	bl	80024fc <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b64      	cmp	r3, #100	; 0x64
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e103      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047bc:	4b75      	ldr	r3, [pc, #468]	; (8004994 <HAL_RCC_OscConfig+0x4c8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <HAL_RCC_OscConfig+0x312>
 80047d0:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4a6e      	ldr	r2, [pc, #440]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6213      	str	r3, [r2, #32]
 80047dc:	e02d      	b.n	800483a <HAL_RCC_OscConfig+0x36e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x334>
 80047e6:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4a69      	ldr	r2, [pc, #420]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	6213      	str	r3, [r2, #32]
 80047f2:	4b67      	ldr	r3, [pc, #412]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4a66      	ldr	r2, [pc, #408]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	f023 0304 	bic.w	r3, r3, #4
 80047fc:	6213      	str	r3, [r2, #32]
 80047fe:	e01c      	b.n	800483a <HAL_RCC_OscConfig+0x36e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d10c      	bne.n	8004822 <HAL_RCC_OscConfig+0x356>
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4a60      	ldr	r2, [pc, #384]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	f043 0304 	orr.w	r3, r3, #4
 8004812:	6213      	str	r3, [r2, #32]
 8004814:	4b5e      	ldr	r3, [pc, #376]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	4a5d      	ldr	r2, [pc, #372]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6213      	str	r3, [r2, #32]
 8004820:	e00b      	b.n	800483a <HAL_RCC_OscConfig+0x36e>
 8004822:	4b5b      	ldr	r3, [pc, #364]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	4a5a      	ldr	r2, [pc, #360]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	6213      	str	r3, [r2, #32]
 800482e:	4b58      	ldr	r3, [pc, #352]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4a57      	ldr	r2, [pc, #348]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d015      	beq.n	800486e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004842:	f7fd fe5b 	bl	80024fc <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004848:	e00a      	b.n	8004860 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fd fe57 	bl	80024fc <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e0b1      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004860:	4b4b      	ldr	r3, [pc, #300]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ee      	beq.n	800484a <HAL_RCC_OscConfig+0x37e>
 800486c:	e014      	b.n	8004898 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486e:	f7fd fe45 	bl	80024fc <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004874:	e00a      	b.n	800488c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fd fe41 	bl	80024fc <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	; 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e09b      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488c:	4b40      	ldr	r3, [pc, #256]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ee      	bne.n	8004876 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489e:	4b3c      	ldr	r3, [pc, #240]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4a3b      	ldr	r2, [pc, #236]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8087 	beq.w	80049c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b4:	4b36      	ldr	r3, [pc, #216]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d061      	beq.n	8004984 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d146      	bne.n	8004956 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c8:	4b33      	ldr	r3, [pc, #204]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fd fe15 	bl	80024fc <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fd fe11 	bl	80024fc <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e06d      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e8:	4b29      	ldr	r3, [pc, #164]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f0      	bne.n	80048d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d108      	bne.n	8004910 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048fe:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4921      	ldr	r1, [pc, #132]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a19      	ldr	r1, [r3, #32]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	430b      	orrs	r3, r1
 8004922:	491b      	ldr	r1, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492e:	f7fd fde5 	bl	80024fc <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fd fde1 	bl	80024fc <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e03d      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004948:	4b11      	ldr	r3, [pc, #68]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x46a>
 8004954:	e035      	b.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd fdce 	bl	80024fc <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd fdca 	bl	80024fc <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e026      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x498>
 8004982:	e01e      	b.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e019      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
 8004990:	40021000 	.word	0x40021000
 8004994:	40007000 	.word	0x40007000
 8004998:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCC_OscConfig+0x500>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d001      	beq.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0d0      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d910      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b67      	ldr	r3, [pc, #412]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 0207 	bic.w	r2, r3, #7
 80049fa:	4965      	ldr	r1, [pc, #404]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b63      	ldr	r3, [pc, #396]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0b8      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a2c:	4b59      	ldr	r3, [pc, #356]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a58      	ldr	r2, [pc, #352]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a44:	4b53      	ldr	r3, [pc, #332]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4a52      	ldr	r2, [pc, #328]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a50:	4b50      	ldr	r3, [pc, #320]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	494d      	ldr	r1, [pc, #308]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d040      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a76:	4b47      	ldr	r3, [pc, #284]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d115      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e07f      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8e:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e073      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e06b      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aae:	4b39      	ldr	r3, [pc, #228]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4936      	ldr	r1, [pc, #216]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac0:	f7fd fd1c 	bl	80024fc <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fd fd18 	bl	80024fc <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e053      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 020c 	and.w	r2, r3, #12
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d1eb      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d210      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 0207 	bic.w	r2, r3, #7
 8004b06:	4922      	ldr	r1, [pc, #136]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e032      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4916      	ldr	r1, [pc, #88]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	490e      	ldr	r1, [pc, #56]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b5e:	f000 f821 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	490a      	ldr	r1, [pc, #40]	; (8004b98 <HAL_RCC_ClockConfig+0x1c8>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <HAL_RCC_ClockConfig+0x1cc>)
 8004b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fd fbe6 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40022000 	.word	0x40022000
 8004b94:	40021000 	.word	0x40021000
 8004b98:	0800863c 	.word	0x0800863c
 8004b9c:	20000004 	.word	0x20000004
 8004ba0:	20000008 	.word	0x20000008

08004ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba4:	b490      	push	{r4, r7}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004baa:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xac>)
 8004bac:	1d3c      	adds	r4, r7, #4
 8004bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004bb4:	f240 2301 	movw	r3, #513	; 0x201
 8004bb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bce:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d003      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0x46>
 8004be2:	e02b      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004be4:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004be6:	623b      	str	r3, [r7, #32]
      break;
 8004be8:	e02b      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	0c9b      	lsrs	r3, r3, #18
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	3328      	adds	r3, #40	; 0x28
 8004bf4:	443b      	add	r3, r7
 8004bf6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bfa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d012      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	0c5b      	lsrs	r3, r3, #17
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	3328      	adds	r3, #40	; 0x28
 8004c12:	443b      	add	r3, r7
 8004c14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	4a0e      	ldr	r2, [pc, #56]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c1e:	fb03 f202 	mul.w	r2, r3, r2
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	e004      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	623b      	str	r3, [r7, #32]
      break;
 8004c3a:	e002      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c3e:	623b      	str	r3, [r7, #32]
      break;
 8004c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c42:	6a3b      	ldr	r3, [r7, #32]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3728      	adds	r7, #40	; 0x28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc90      	pop	{r4, r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	08008518 	.word	0x08008518
 8004c54:	40021000 	.word	0x40021000
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	003d0900 	.word	0x003d0900

08004c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c64:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	20000004 	.word	0x20000004

08004c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c78:	f7ff fff2 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4903      	ldr	r1, [pc, #12]	; (8004c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000
 8004c98:	0800864c 	.word	0x0800864c

08004c9c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	220f      	movs	r2, #15
 8004caa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cac:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <HAL_RCC_GetClockConfig+0x58>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0203 	and.w	r2, r3, #3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <HAL_RCC_GetClockConfig+0x58>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_GetClockConfig+0x58>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004cd0:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <HAL_RCC_GetClockConfig+0x58>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	08db      	lsrs	r3, r3, #3
 8004cd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0207 	and.w	r2, r3, #7
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40022000 	.word	0x40022000

08004cfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <RCC_Delay+0x34>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <RCC_Delay+0x38>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0a5b      	lsrs	r3, r3, #9
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d18:	bf00      	nop
  }
  while (Delay --);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1e5a      	subs	r2, r3, #1
 8004d1e:	60fa      	str	r2, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f9      	bne.n	8004d18 <RCC_Delay+0x1c>
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr
 8004d30:	20000004 	.word	0x20000004
 8004d34:	10624dd3 	.word	0x10624dd3

08004d38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e076      	b.n	8004e38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d108      	bne.n	8004d64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d5a:	d009      	beq.n	8004d70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	61da      	str	r2, [r3, #28]
 8004d62:	e005      	b.n	8004d70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fd fa8e 	bl	80022ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df4:	ea42 0103 	orr.w	r1, r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	0c1a      	lsrs	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f002 0204 	and.w	r2, r2, #4
 8004e16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_SPI_Transmit+0x22>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e126      	b.n	80050b0 <HAL_SPI_Transmit+0x270>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e6a:	f7fd fb47 	bl	80024fc <HAL_GetTick>
 8004e6e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d002      	beq.n	8004e86 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
 8004e82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e84:	e10b      	b.n	800509e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_SPI_Transmit+0x52>
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e96:	e102      	b.n	800509e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	88fa      	ldrh	r2, [r7, #6]
 8004eb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ede:	d10f      	bne.n	8004f00 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004efe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d007      	beq.n	8004f1e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d14b      	bne.n	8004fc0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_SPI_Transmit+0xf6>
 8004f30:	8afb      	ldrh	r3, [r7, #22]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d13e      	bne.n	8004fb4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	1c9a      	adds	r2, r3, #2
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f5a:	e02b      	b.n	8004fb4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d112      	bne.n	8004f90 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f8e:	e011      	b.n	8004fb4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f90:	f7fd fab4 	bl	80024fc <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d803      	bhi.n	8004fa8 <HAL_SPI_Transmit+0x168>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa6:	d102      	bne.n	8004fae <HAL_SPI_Transmit+0x16e>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fb2:	e074      	b.n	800509e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ce      	bne.n	8004f5c <HAL_SPI_Transmit+0x11c>
 8004fbe:	e04c      	b.n	800505a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_SPI_Transmit+0x18e>
 8004fc8:	8afb      	ldrh	r3, [r7, #22]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d140      	bne.n	8005050 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ff4:	e02c      	b.n	8005050 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d113      	bne.n	800502c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	86da      	strh	r2, [r3, #54]	; 0x36
 800502a:	e011      	b.n	8005050 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502c:	f7fd fa66 	bl	80024fc <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d803      	bhi.n	8005044 <HAL_SPI_Transmit+0x204>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005042:	d102      	bne.n	800504a <HAL_SPI_Transmit+0x20a>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800504e:	e026      	b.n	800509e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1cd      	bne.n	8004ff6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f9b6 	bl	80053d0 <SPI_EndRxTxTransaction>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e000      	b.n	800509e <HAL_SPI_Transmit+0x25e>
  }

error:
 800509c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	099b      	lsrs	r3, r3, #6
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10f      	bne.n	80050fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	099b      	lsrs	r3, r3, #6
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
    return;
 80050fa:	e0be      	b.n	800527a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_SPI_IRQHandler+0x66>
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	09db      	lsrs	r3, r3, #7
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
    return;
 800511c:	e0ad      	b.n	800527a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_SPI_IRQHandler+0x80>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80a1 	beq.w	800527a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 809a 	beq.w	800527a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	099b      	lsrs	r3, r3, #6
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d023      	beq.n	800519a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b03      	cmp	r3, #3
 800515c:	d011      	beq.n	8005182 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f043 0204 	orr.w	r2, r3, #4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	e00b      	b.n	800519a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	693b      	ldr	r3, [r7, #16]
        return;
 8005198:	e06f      	b.n	800527a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d014      	beq.n	80051d0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d04f      	beq.n	8005278 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <HAL_SPI_IRQHandler+0x14c>
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d034      	beq.n	800526e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0203 	bic.w	r2, r2, #3
 8005212:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d011      	beq.n	8005240 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005220:	4a17      	ldr	r2, [pc, #92]	; (8005280 <HAL_SPI_IRQHandler+0x1c8>)
 8005222:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005228:	4618      	mov	r0, r3
 800522a:	f7fd fa75 	bl	8002718 <HAL_DMA_Abort_IT>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005238:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005244:	2b00      	cmp	r3, #0
 8005246:	d016      	beq.n	8005276 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524c:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <HAL_SPI_IRQHandler+0x1c8>)
 800524e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005254:	4618      	mov	r0, r3
 8005256:	f7fd fa5f 	bl	8002718 <HAL_DMA_Abort_IT>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005264:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800526c:	e003      	b.n	8005276 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f808 	bl	8005284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005274:	e000      	b.n	8005278 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005276:	bf00      	nop
    return;
 8005278:	bf00      	nop
  }
}
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	08005297 	.word	0x08005297

08005284 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr

08005296 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff ffe7 	bl	8005284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052d0:	f7fd f914 	bl	80024fc <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052e0:	f7fd f90c 	bl	80024fc <HAL_GetTick>
 80052e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052e6:	4b39      	ldr	r3, [pc, #228]	; (80053cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	015b      	lsls	r3, r3, #5
 80052ec:	0d1b      	lsrs	r3, r3, #20
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f6:	e054      	b.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fe:	d050      	beq.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005300:	f7fd f8fc 	bl	80024fc <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	429a      	cmp	r2, r3
 800530e:	d902      	bls.n	8005316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d13d      	bne.n	8005392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532e:	d111      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005338:	d004      	beq.n	8005344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005342:	d107      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535c:	d10f      	bne.n	800537e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800537c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e017      	b.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	3b01      	subs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4013      	ands	r3, r2
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	bf0c      	ite	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	2300      	movne	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d19b      	bne.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000004 	.word	0x20000004

080053d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2200      	movs	r2, #0
 80053e4:	2180      	movs	r1, #128	; 0x80
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff ff6a 	bl	80052c0 <SPI_WaitFlagStateUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	f043 0220 	orr.w	r2, r3, #32
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e000      	b.n	8005404 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e041      	b.n	80054a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f839 	bl	80054aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 f9b4 	bl	80057b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr

080054bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d001      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e03a      	b.n	800554a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a18      	ldr	r2, [pc, #96]	; (8005554 <HAL_TIM_Base_Start_IT+0x98>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x58>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fe:	d009      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x58>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a14      	ldr	r2, [pc, #80]	; (8005558 <HAL_TIM_Base_Start_IT+0x9c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x58>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a13      	ldr	r2, [pc, #76]	; (800555c <HAL_TIM_Base_Start_IT+0xa0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d111      	bne.n	8005538 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b06      	cmp	r3, #6
 8005524:	d010      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005536:	e007      	b.n	8005548 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800

08005560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d122      	bne.n	80055bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	d11b      	bne.n	80055bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0202 	mvn.w	r2, #2
 800558c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8ed 	bl	8005782 <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8e0 	bl	8005770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8ef 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d122      	bne.n	8005610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d11b      	bne.n	8005610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0204 	mvn.w	r2, #4
 80055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8c3 	bl	8005782 <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8b6 	bl	8005770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8c5 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b08      	cmp	r3, #8
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b08      	cmp	r3, #8
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0208 	mvn.w	r2, #8
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2204      	movs	r2, #4
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f899 	bl	8005782 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f88c 	bl	8005770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f89b 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b10      	cmp	r3, #16
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b10      	cmp	r3, #16
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0210 	mvn.w	r2, #16
 8005688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2208      	movs	r2, #8
 800568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f86f 	bl	8005782 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f862 	bl	8005770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f871 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d10e      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d107      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0201 	mvn.w	r2, #1
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc fd56 	bl	8002190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d10e      	bne.n	8005710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d107      	bne.n	8005710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f8bf 	bl	800588e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d10e      	bne.n	800573c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d107      	bne.n	800573c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f835 	bl	80057a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b20      	cmp	r3, #32
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b20      	cmp	r3, #32
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0220 	mvn.w	r2, #32
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f88a 	bl	800587c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr

08005782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr

080057a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a29      	ldr	r2, [pc, #164]	; (8005870 <TIM_Base_SetConfig+0xb8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <TIM_Base_SetConfig+0x30>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d6:	d007      	beq.n	80057e8 <TIM_Base_SetConfig+0x30>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a26      	ldr	r2, [pc, #152]	; (8005874 <TIM_Base_SetConfig+0xbc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0x30>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a25      	ldr	r2, [pc, #148]	; (8005878 <TIM_Base_SetConfig+0xc0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d108      	bne.n	80057fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1c      	ldr	r2, [pc, #112]	; (8005870 <TIM_Base_SetConfig+0xb8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_Base_SetConfig+0x62>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d007      	beq.n	800581a <TIM_Base_SetConfig+0x62>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a19      	ldr	r2, [pc, #100]	; (8005874 <TIM_Base_SetConfig+0xbc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_Base_SetConfig+0x62>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a18      	ldr	r2, [pc, #96]	; (8005878 <TIM_Base_SetConfig+0xc0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d108      	bne.n	800582c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a07      	ldr	r2, [pc, #28]	; (8005870 <TIM_Base_SetConfig+0xb8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d103      	bne.n	8005860 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	615a      	str	r2, [r3, #20]
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800

0800587c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058a6:	f3ef 8305 	mrs	r3, IPSR
 80058aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80058ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10f      	bne.n	80058d2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b2:	f3ef 8310 	mrs	r3, PRIMASK
 80058b6:	607b      	str	r3, [r7, #4]
  return(result);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <osKernelInitialize+0x32>
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <osKernelInitialize+0x60>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d109      	bne.n	80058da <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058c6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ca:	603b      	str	r3, [r7, #0]
  return(result);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80058d2:	f06f 0305 	mvn.w	r3, #5
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e00c      	b.n	80058f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <osKernelInitialize+0x60>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d105      	bne.n	80058ee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <osKernelInitialize+0x60>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	e002      	b.n	80058f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80058ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80058f4:	68fb      	ldr	r3, [r7, #12]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr
 8005900:	200001ec 	.word	0x200001ec

08005904 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800590a:	f3ef 8305 	mrs	r3, IPSR
 800590e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005910:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005916:	f3ef 8310 	mrs	r3, PRIMASK
 800591a:	607b      	str	r3, [r7, #4]
  return(result);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <osKernelStart+0x32>
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <osKernelStart+0x64>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d109      	bne.n	800593e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800592a:	f3ef 8311 	mrs	r3, BASEPRI
 800592e:	603b      	str	r3, [r7, #0]
  return(result);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005936:	f06f 0305 	mvn.w	r3, #5
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e00e      	b.n	800595c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800593e:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <osKernelStart+0x64>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d107      	bne.n	8005956 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005946:	4b08      	ldr	r3, [pc, #32]	; (8005968 <osKernelStart+0x64>)
 8005948:	2202      	movs	r2, #2
 800594a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800594c:	f001 f890 	bl	8006a70 <vTaskStartScheduler>
      stat = osOK;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e002      	b.n	800595c <osKernelStart+0x58>
    } else {
      stat = osError;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800595a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200001ec 	.word	0x200001ec

0800596c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b092      	sub	sp, #72	; 0x48
 8005970:	af04      	add	r7, sp, #16
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597c:	f3ef 8305 	mrs	r3, IPSR
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005984:	2b00      	cmp	r3, #0
 8005986:	f040 8094 	bne.w	8005ab2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598a:	f3ef 8310 	mrs	r3, PRIMASK
 800598e:	623b      	str	r3, [r7, #32]
  return(result);
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 808d 	bne.w	8005ab2 <osThreadNew+0x146>
 8005998:	4b48      	ldr	r3, [pc, #288]	; (8005abc <osThreadNew+0x150>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d106      	bne.n	80059ae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059a0:	f3ef 8311 	mrs	r3, BASEPRI
 80059a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f040 8082 	bne.w	8005ab2 <osThreadNew+0x146>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d07e      	beq.n	8005ab2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80059b8:	2318      	movs	r3, #24
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80059bc:	2300      	movs	r3, #0
 80059be:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80059c0:	f107 031b 	add.w	r3, r7, #27
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d045      	beq.n	8005a5e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <osThreadNew+0x74>
        name = attr->name;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <osThreadNew+0x9a>
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	2b38      	cmp	r3, #56	; 0x38
 80059f8:	d805      	bhi.n	8005a06 <osThreadNew+0x9a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <osThreadNew+0x9e>
        return (NULL);
 8005a06:	2300      	movs	r3, #0
 8005a08:	e054      	b.n	8005ab4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	089b      	lsrs	r3, r3, #2
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00e      	beq.n	8005a40 <osThreadNew+0xd4>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	2bbb      	cmp	r3, #187	; 0xbb
 8005a28:	d90a      	bls.n	8005a40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d006      	beq.n	8005a40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <osThreadNew+0xd4>
        mem = 1;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3e:	e010      	b.n	8005a62 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10c      	bne.n	8005a62 <osThreadNew+0xf6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <osThreadNew+0xf6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <osThreadNew+0xf6>
          mem = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5c:	e001      	b.n	8005a62 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d110      	bne.n	8005a8a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a70:	9202      	str	r2, [sp, #8]
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 fe12 	bl	80066a8 <xTaskCreateStatic>
 8005a84:	4603      	mov	r3, r0
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e013      	b.n	8005ab2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d110      	bne.n	8005ab2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fe5c 	bl	8006760 <xTaskCreate>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d001      	beq.n	8005ab2 <osThreadNew+0x146>
          hTask = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ab2:	697b      	ldr	r3, [r7, #20]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3738      	adds	r7, #56	; 0x38
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	200001ec 	.word	0x200001ec

08005ac0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac8:	f3ef 8305 	mrs	r3, IPSR
 8005acc:	613b      	str	r3, [r7, #16]
  return(result);
 8005ace:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10f      	bne.n	8005af4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <osDelay+0x34>
 8005ae0:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <osDelay+0x58>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d109      	bne.n	8005afc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8005aec:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <osDelay+0x3c>
    stat = osErrorISR;
 8005af4:	f06f 0305 	mvn.w	r3, #5
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	e007      	b.n	8005b0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 ff7e 	bl	8006a08 <vTaskDelay>
    }
  }

  return (stat);
 8005b0c:	697b      	ldr	r3, [r7, #20]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200001ec 	.word	0x200001ec

08005b1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <vApplicationGetIdleTaskMemory+0x28>)
 8005b2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4a05      	ldr	r2, [pc, #20]	; (8005b48 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2280      	movs	r2, #128	; 0x80
 8005b38:	601a      	str	r2, [r3, #0]
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	200001f0 	.word	0x200001f0
 8005b48:	200002ac 	.word	0x200002ac

08005b4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4a06      	ldr	r2, [pc, #24]	; (8005b7c <vApplicationGetTimerTaskMemory+0x30>)
 8005b62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b6a:	601a      	str	r2, [r3, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	200004ac 	.word	0x200004ac
 8005b7c:	20000568 	.word	0x20000568

08005b80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f103 0208 	add.w	r2, r3, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f103 0208 	add.w	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f103 0208 	add.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	601a      	str	r2, [r3, #0]
}
 8005c12:	bf00      	nop
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c32:	d103      	bne.n	8005c3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e00c      	b.n	8005c56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	e002      	b.n	8005c4a <vListInsert+0x2e>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d2f6      	bcs.n	8005c44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	601a      	str	r2, [r3, #0]
}
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6892      	ldr	r2, [r2, #8]
 8005ca2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6852      	ldr	r2, [r2, #4]
 8005cac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d103      	bne.n	8005cc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	1e5a      	subs	r2, r3, #1
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr
	...

08005ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d0a:	f001 fff7 	bl	8007cfc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	441a      	add	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	68f9      	ldr	r1, [r7, #12]
 8005d3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	441a      	add	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	22ff      	movs	r2, #255	; 0xff
 8005d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	22ff      	movs	r2, #255	; 0xff
 8005d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d114      	bne.n	8005d8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01a      	beq.n	8005d9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3310      	adds	r3, #16
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 f91b 	bl	8006fa8 <xTaskRemoveFromEventList>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d012      	beq.n	8005d9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <xQueueGenericReset+0xcc>)
 8005d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	e009      	b.n	8005d9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fef6 	bl	8005b80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3324      	adds	r3, #36	; 0x24
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fef1 	bl	8005b80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d9e:	f001 ffdd 	bl	8007d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005da2:	2301      	movs	r3, #1
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08e      	sub	sp, #56	; 0x38
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <xQueueGenericCreateStatic+0x52>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <xQueueGenericCreateStatic+0x56>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <xQueueGenericCreateStatic+0x58>
 8005e06:	2300      	movs	r3, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	623b      	str	r3, [r7, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <xQueueGenericCreateStatic+0x7e>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <xQueueGenericCreateStatic+0x82>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <xQueueGenericCreateStatic+0x84>
 8005e32:	2300      	movs	r3, #0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	61fb      	str	r3, [r7, #28]
}
 8005e4a:	bf00      	nop
 8005e4c:	e7fe      	b.n	8005e4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e4e:	2350      	movs	r3, #80	; 0x50
 8005e50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b50      	cmp	r3, #80	; 0x50
 8005e56:	d00a      	beq.n	8005e6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	61bb      	str	r3, [r7, #24]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68b9      	ldr	r1, [r7, #8]
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f805 	bl	8005e9e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3730      	adds	r7, #48	; 0x30
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e002      	b.n	8005ec0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ecc:	2101      	movs	r1, #1
 8005ece:	69b8      	ldr	r0, [r7, #24]
 8005ed0:	f7ff ff06 	bl	8005ce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08e      	sub	sp, #56	; 0x38
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <xQueueGenericSend+0x32>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d103      	bne.n	8005f24 <xQueueGenericSend+0x40>
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <xQueueGenericSend+0x44>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <xQueueGenericSend+0x46>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <xQueueGenericSend+0x60>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d103      	bne.n	8005f52 <xQueueGenericSend+0x6e>
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <xQueueGenericSend+0x72>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <xQueueGenericSend+0x74>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xQueueGenericSend+0x8e>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	623b      	str	r3, [r7, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f72:	f001 f9df 	bl	8007334 <xTaskGetSchedulerState>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d102      	bne.n	8005f82 <xQueueGenericSend+0x9e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <xQueueGenericSend+0xa2>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <xQueueGenericSend+0xa4>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	61fb      	str	r3, [r7, #28]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fa2:	f001 feab 	bl	8007cfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d302      	bcc.n	8005fb8 <xQueueGenericSend+0xd4>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d129      	bne.n	800600c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fbe:	f000 fa07 	bl	80063d0 <prvCopyDataToQueue>
 8005fc2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d010      	beq.n	8005fee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	3324      	adds	r3, #36	; 0x24
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 ffe9 	bl	8006fa8 <xTaskRemoveFromEventList>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d013      	beq.n	8006004 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fdc:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <xQueueGenericSend+0x1f8>)
 8005fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	e00a      	b.n	8006004 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d007      	beq.n	8006004 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ff4:	4b39      	ldr	r3, [pc, #228]	; (80060dc <xQueueGenericSend+0x1f8>)
 8005ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006004:	f001 feaa 	bl	8007d5c <vPortExitCritical>
				return pdPASS;
 8006008:	2301      	movs	r3, #1
 800600a:	e063      	b.n	80060d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d103      	bne.n	800601a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006012:	f001 fea3 	bl	8007d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006016:	2300      	movs	r3, #0
 8006018:	e05c      	b.n	80060d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	2b00      	cmp	r3, #0
 800601e:	d106      	bne.n	800602e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006020:	f107 0314 	add.w	r3, r7, #20
 8006024:	4618      	mov	r0, r3
 8006026:	f001 f823 	bl	8007070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800602a:	2301      	movs	r3, #1
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800602e:	f001 fe95 	bl	8007d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006032:	f000 fd8d 	bl	8006b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006036:	f001 fe61 	bl	8007cfc <vPortEnterCritical>
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006040:	b25b      	sxtb	r3, r3
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006046:	d103      	bne.n	8006050 <xQueueGenericSend+0x16c>
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006056:	b25b      	sxtb	r3, r3
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800605c:	d103      	bne.n	8006066 <xQueueGenericSend+0x182>
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006066:	f001 fe79 	bl	8007d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800606a:	1d3a      	adds	r2, r7, #4
 800606c:	f107 0314 	add.w	r3, r7, #20
 8006070:	4611      	mov	r1, r2
 8006072:	4618      	mov	r0, r3
 8006074:	f001 f812 	bl	800709c <xTaskCheckForTimeOut>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d124      	bne.n	80060c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800607e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006080:	f000 fa9e 	bl	80065c0 <prvIsQueueFull>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d018      	beq.n	80060bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	3310      	adds	r3, #16
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	4611      	mov	r1, r2
 8006092:	4618      	mov	r0, r3
 8006094:	f000 ff38 	bl	8006f08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800609a:	f000 fa29 	bl	80064f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800609e:	f000 fd65 	bl	8006b6c <xTaskResumeAll>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f47f af7c 	bne.w	8005fa2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <xQueueGenericSend+0x1f8>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	e772      	b.n	8005fa2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060be:	f000 fa17 	bl	80064f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060c2:	f000 fd53 	bl	8006b6c <xTaskResumeAll>
 80060c6:	e76c      	b.n	8005fa2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ca:	f000 fa11 	bl	80064f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060ce:	f000 fd4d 	bl	8006b6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060d2:	2300      	movs	r3, #0
		}
	}
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3738      	adds	r7, #56	; 0x38
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08e      	sub	sp, #56	; 0x38
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <xQueueGenericSendFromISR+0x3c>
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <xQueueGenericSendFromISR+0x40>
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <xQueueGenericSendFromISR+0x42>
 8006120:	2300      	movs	r3, #0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	623b      	str	r3, [r7, #32]
}
 8006138:	bf00      	nop
 800613a:	e7fe      	b.n	800613a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d103      	bne.n	800614a <xQueueGenericSendFromISR+0x6a>
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <xQueueGenericSendFromISR+0x6e>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <xQueueGenericSendFromISR+0x70>
 800614e:	2300      	movs	r3, #0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	61fb      	str	r3, [r7, #28]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800616a:	f001 fe89 	bl	8007e80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800616e:	f3ef 8211 	mrs	r2, BASEPRI
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	61ba      	str	r2, [r7, #24]
 8006184:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006186:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	429a      	cmp	r2, r3
 8006194:	d302      	bcc.n	800619c <xQueueGenericSendFromISR+0xbc>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d12c      	bne.n	80061f6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ac:	f000 f910 	bl	80063d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b8:	d112      	bne.n	80061e0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	3324      	adds	r3, #36	; 0x24
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 feee 	bl	8006fa8 <xTaskRemoveFromEventList>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00e      	beq.n	80061f0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e007      	b.n	80061f0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061e4:	3301      	adds	r3, #1
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	b25a      	sxtb	r2, r3
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061f0:	2301      	movs	r3, #1
 80061f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80061f4:	e001      	b.n	80061fa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006204:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006208:	4618      	mov	r0, r3
 800620a:	3738      	adds	r7, #56	; 0x38
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08c      	sub	sp, #48	; 0x30
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <xQueueReceive+0x30>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	623b      	str	r3, [r7, #32]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <xQueueReceive+0x3e>
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <xQueueReceive+0x42>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <xQueueReceive+0x44>
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <xQueueReceive+0x5e>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	61fb      	str	r3, [r7, #28]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800626e:	f001 f861 	bl	8007334 <xTaskGetSchedulerState>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d102      	bne.n	800627e <xQueueReceive+0x6e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <xQueueReceive+0x72>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <xQueueReceive+0x74>
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <xQueueReceive+0x8e>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	61bb      	str	r3, [r7, #24]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800629e:	f001 fd2d 	bl	8007cfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d01f      	beq.n	80062ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062b2:	f000 f8f7 	bl	80064a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1e5a      	subs	r2, r3, #1
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00f      	beq.n	80062e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	3310      	adds	r3, #16
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fe6c 	bl	8006fa8 <xTaskRemoveFromEventList>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062d6:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <xQueueReceive+0x1bc>)
 80062d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062e6:	f001 fd39 	bl	8007d5c <vPortExitCritical>
				return pdPASS;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e069      	b.n	80063c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062f4:	f001 fd32 	bl	8007d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062f8:	2300      	movs	r3, #0
 80062fa:	e062      	b.n	80063c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006302:	f107 0310 	add.w	r3, r7, #16
 8006306:	4618      	mov	r0, r3
 8006308:	f000 feb2 	bl	8007070 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006310:	f001 fd24 	bl	8007d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006314:	f000 fc1c 	bl	8006b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006318:	f001 fcf0 	bl	8007cfc <vPortEnterCritical>
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006322:	b25b      	sxtb	r3, r3
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006328:	d103      	bne.n	8006332 <xQueueReceive+0x122>
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006338:	b25b      	sxtb	r3, r3
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633e:	d103      	bne.n	8006348 <xQueueReceive+0x138>
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006348:	f001 fd08 	bl	8007d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800634c:	1d3a      	adds	r2, r7, #4
 800634e:	f107 0310 	add.w	r3, r7, #16
 8006352:	4611      	mov	r1, r2
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fea1 	bl	800709c <xTaskCheckForTimeOut>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d123      	bne.n	80063a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006362:	f000 f917 	bl	8006594 <prvIsQueueEmpty>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d017      	beq.n	800639c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	3324      	adds	r3, #36	; 0x24
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fdc7 	bl	8006f08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800637a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637c:	f000 f8b8 	bl	80064f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006380:	f000 fbf4 	bl	8006b6c <xTaskResumeAll>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d189      	bne.n	800629e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800638a:	4b10      	ldr	r3, [pc, #64]	; (80063cc <xQueueReceive+0x1bc>)
 800638c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	e780      	b.n	800629e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800639c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639e:	f000 f8a7 	bl	80064f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063a2:	f000 fbe3 	bl	8006b6c <xTaskResumeAll>
 80063a6:	e77a      	b.n	800629e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063aa:	f000 f8a1 	bl	80064f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ae:	f000 fbdd 	bl	8006b6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b4:	f000 f8ee 	bl	8006594 <prvIsQueueEmpty>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f43f af6f 	beq.w	800629e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3730      	adds	r7, #48	; 0x30
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	e000ed04 	.word	0xe000ed04

080063d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10d      	bne.n	800640a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d14d      	bne.n	8006492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 ffb8 	bl	8007370 <xTaskPriorityDisinherit>
 8006400:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]
 8006408:	e043      	b.n	8006492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d119      	bne.n	8006444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6898      	ldr	r0, [r3, #8]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	461a      	mov	r2, r3
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	f001 ff6c 	bl	80082f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	441a      	add	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d32b      	bcc.n	8006492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	609a      	str	r2, [r3, #8]
 8006442:	e026      	b.n	8006492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68d8      	ldr	r0, [r3, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	461a      	mov	r2, r3
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	f001 ff52 	bl	80082f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	425b      	negs	r3, r3
 800645e:	441a      	add	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d207      	bcs.n	8006480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	425b      	negs	r3, r3
 800647a:	441a      	add	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d105      	bne.n	8006492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	3b01      	subs	r3, #1
 8006490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800649a:	697b      	ldr	r3, [r7, #20]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d018      	beq.n	80064e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	441a      	add	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d303      	bcc.n	80064d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68d9      	ldr	r1, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	461a      	mov	r2, r3
 80064e2:	6838      	ldr	r0, [r7, #0]
 80064e4:	f001 ff08 	bl	80082f8 <memcpy>
	}
}
 80064e8:	bf00      	nop
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064f8:	f001 fc00 	bl	8007cfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006504:	e011      	b.n	800652a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d012      	beq.n	8006534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3324      	adds	r3, #36	; 0x24
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fd48 	bl	8006fa8 <xTaskRemoveFromEventList>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800651e:	f000 fe1f 	bl	8007160 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	3b01      	subs	r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800652a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800652e:	2b00      	cmp	r3, #0
 8006530:	dce9      	bgt.n	8006506 <prvUnlockQueue+0x16>
 8006532:	e000      	b.n	8006536 <prvUnlockQueue+0x46>
					break;
 8006534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	22ff      	movs	r2, #255	; 0xff
 800653a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800653e:	f001 fc0d 	bl	8007d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006542:	f001 fbdb 	bl	8007cfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800654c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800654e:	e011      	b.n	8006574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d012      	beq.n	800657e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3310      	adds	r3, #16
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fd23 	bl	8006fa8 <xTaskRemoveFromEventList>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006568:	f000 fdfa 	bl	8007160 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	3b01      	subs	r3, #1
 8006570:	b2db      	uxtb	r3, r3
 8006572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006578:	2b00      	cmp	r3, #0
 800657a:	dce9      	bgt.n	8006550 <prvUnlockQueue+0x60>
 800657c:	e000      	b.n	8006580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800657e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	22ff      	movs	r2, #255	; 0xff
 8006584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006588:	f001 fbe8 	bl	8007d5c <vPortExitCritical>
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800659c:	f001 fbae 	bl	8007cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e001      	b.n	80065b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065b2:	f001 fbd3 	bl	8007d5c <vPortExitCritical>

	return xReturn;
 80065b6:	68fb      	ldr	r3, [r7, #12]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065c8:	f001 fb98 	bl	8007cfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d102      	bne.n	80065de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065d8:	2301      	movs	r3, #1
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e001      	b.n	80065e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065e2:	f001 fbbb 	bl	8007d5c <vPortExitCritical>

	return xReturn;
 80065e6:	68fb      	ldr	r3, [r7, #12]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e014      	b.n	800662a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006600:	4a0e      	ldr	r2, [pc, #56]	; (800663c <vQueueAddToRegistry+0x4c>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10b      	bne.n	8006624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800660c:	490b      	ldr	r1, [pc, #44]	; (800663c <vQueueAddToRegistry+0x4c>)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006616:	4a09      	ldr	r2, [pc, #36]	; (800663c <vQueueAddToRegistry+0x4c>)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006622:	e006      	b.n	8006632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b07      	cmp	r3, #7
 800662e:	d9e7      	bls.n	8006600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	20000968 	.word	0x20000968

08006640 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006650:	f001 fb54 	bl	8007cfc <vPortEnterCritical>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800665a:	b25b      	sxtb	r3, r3
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006660:	d103      	bne.n	800666a <vQueueWaitForMessageRestricted+0x2a>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006670:	b25b      	sxtb	r3, r3
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006676:	d103      	bne.n	8006680 <vQueueWaitForMessageRestricted+0x40>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006680:	f001 fb6c 	bl	8007d5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3324      	adds	r3, #36	; 0x24
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fc5b 	bl	8006f50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800669a:	6978      	ldr	r0, [r7, #20]
 800669c:	f7ff ff28 	bl	80064f0 <prvUnlockQueue>
	}
 80066a0:	bf00      	nop
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08e      	sub	sp, #56	; 0x38
 80066ac:	af04      	add	r7, sp, #16
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	623b      	str	r3, [r7, #32]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <xTaskCreateStatic+0x46>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	61fb      	str	r3, [r7, #28]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066ee:	23bc      	movs	r3, #188	; 0xbc
 80066f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	2bbc      	cmp	r3, #188	; 0xbc
 80066f6:	d00a      	beq.n	800670e <xTaskCreateStatic+0x66>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	61bb      	str	r3, [r7, #24]
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01e      	beq.n	8006752 <xTaskCreateStatic+0xaa>
 8006714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006716:	2b00      	cmp	r3, #0
 8006718:	d01b      	beq.n	8006752 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006722:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	2202      	movs	r2, #2
 8006728:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800672c:	2300      	movs	r3, #0
 800672e:	9303      	str	r3, [sp, #12]
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	9302      	str	r3, [sp, #8]
 8006734:	f107 0314 	add.w	r3, r7, #20
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f851 	bl	80067ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800674a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800674c:	f000 f8ec 	bl	8006928 <prvAddNewTaskToReadyList>
 8006750:	e001      	b.n	8006756 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006756:	697b      	ldr	r3, [r7, #20]
	}
 8006758:	4618      	mov	r0, r3
 800675a:	3728      	adds	r7, #40	; 0x28
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	; 0x30
 8006764:	af04      	add	r7, sp, #16
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	4613      	mov	r3, r2
 800676e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4618      	mov	r0, r3
 8006776:	f001 fbc1 	bl	8007efc <pvPortMalloc>
 800677a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006782:	20bc      	movs	r0, #188	; 0xbc
 8006784:	f001 fbba 	bl	8007efc <pvPortMalloc>
 8006788:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	631a      	str	r2, [r3, #48]	; 0x30
 8006796:	e005      	b.n	80067a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006798:	6978      	ldr	r0, [r7, #20]
 800679a:	f001 fc73 	bl	8008084 <vPortFree>
 800679e:	e001      	b.n	80067a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d017      	beq.n	80067da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	2300      	movs	r3, #0
 80067b6:	9303      	str	r3, [sp, #12]
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	9302      	str	r3, [sp, #8]
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f80f 	bl	80067ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067ce:	69f8      	ldr	r0, [r7, #28]
 80067d0:	f000 f8aa 	bl	8006928 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067d4:	2301      	movs	r3, #1
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	e002      	b.n	80067e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067e0:	69bb      	ldr	r3, [r7, #24]
	}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	461a      	mov	r2, r3
 8006804:	21a5      	movs	r1, #165	; 0xa5
 8006806:	f001 fd85 	bl	8008314 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006814:	3b01      	subs	r3, #1
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f023 0307 	bic.w	r3, r3, #7
 8006822:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <prvInitialiseNewTask+0x58>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	617b      	str	r3, [r7, #20]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006844:	2300      	movs	r3, #0
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e012      	b.n	8006870 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	7819      	ldrb	r1, [r3, #0]
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	3334      	adds	r3, #52	; 0x34
 800685a:	460a      	mov	r2, r1
 800685c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4413      	add	r3, r2
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d006      	beq.n	8006878 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	3301      	adds	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b0f      	cmp	r3, #15
 8006874:	d9e9      	bls.n	800684a <prvInitialiseNewTask+0x5e>
 8006876:	e000      	b.n	800687a <prvInitialiseNewTask+0x8e>
		{
			break;
 8006878:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	2b37      	cmp	r3, #55	; 0x37
 8006886:	d901      	bls.n	800688c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006888:	2337      	movs	r3, #55	; 0x37
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006890:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006896:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	2200      	movs	r2, #0
 800689c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	3304      	adds	r3, #4
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff f98b 	bl	8005bbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	3318      	adds	r3, #24
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff f986 	bl	8005bbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	3354      	adds	r3, #84	; 0x54
 80068dc:	2260      	movs	r2, #96	; 0x60
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 fd17 	bl	8008314 <memset>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	4a0c      	ldr	r2, [pc, #48]	; (800691c <prvInitialiseNewTask+0x130>)
 80068ea:	659a      	str	r2, [r3, #88]	; 0x58
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	4a0c      	ldr	r2, [pc, #48]	; (8006920 <prvInitialiseNewTask+0x134>)
 80068f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	4a0b      	ldr	r2, [pc, #44]	; (8006924 <prvInitialiseNewTask+0x138>)
 80068f6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	69b8      	ldr	r0, [r7, #24]
 80068fe:	f001 f90b 	bl	8007b18 <pxPortInitialiseStack>
 8006902:	4602      	mov	r2, r0
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006912:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006914:	bf00      	nop
 8006916:	3720      	adds	r7, #32
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	08008674 	.word	0x08008674
 8006920:	08008694 	.word	0x08008694
 8006924:	08008654 	.word	0x08008654

08006928 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006930:	f001 f9e4 	bl	8007cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006934:	4b2d      	ldr	r3, [pc, #180]	; (80069ec <prvAddNewTaskToReadyList+0xc4>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3301      	adds	r3, #1
 800693a:	4a2c      	ldr	r2, [pc, #176]	; (80069ec <prvAddNewTaskToReadyList+0xc4>)
 800693c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800693e:	4b2c      	ldr	r3, [pc, #176]	; (80069f0 <prvAddNewTaskToReadyList+0xc8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006946:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <prvAddNewTaskToReadyList+0xc8>)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800694c:	4b27      	ldr	r3, [pc, #156]	; (80069ec <prvAddNewTaskToReadyList+0xc4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d110      	bne.n	8006976 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006954:	f000 fc28 	bl	80071a8 <prvInitialiseTaskLists>
 8006958:	e00d      	b.n	8006976 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800695a:	4b26      	ldr	r3, [pc, #152]	; (80069f4 <prvAddNewTaskToReadyList+0xcc>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006962:	4b23      	ldr	r3, [pc, #140]	; (80069f0 <prvAddNewTaskToReadyList+0xc8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	429a      	cmp	r2, r3
 800696e:	d802      	bhi.n	8006976 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006970:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <prvAddNewTaskToReadyList+0xc8>)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006976:	4b20      	ldr	r3, [pc, #128]	; (80069f8 <prvAddNewTaskToReadyList+0xd0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	4a1e      	ldr	r2, [pc, #120]	; (80069f8 <prvAddNewTaskToReadyList+0xd0>)
 800697e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006980:	4b1d      	ldr	r3, [pc, #116]	; (80069f8 <prvAddNewTaskToReadyList+0xd0>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698c:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <prvAddNewTaskToReadyList+0xd4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d903      	bls.n	800699c <prvAddNewTaskToReadyList+0x74>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	4a18      	ldr	r2, [pc, #96]	; (80069fc <prvAddNewTaskToReadyList+0xd4>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4a15      	ldr	r2, [pc, #84]	; (8006a00 <prvAddNewTaskToReadyList+0xd8>)
 80069aa:	441a      	add	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f7ff f90f 	bl	8005bd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069b8:	f001 f9d0 	bl	8007d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069bc:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <prvAddNewTaskToReadyList+0xcc>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <prvAddNewTaskToReadyList+0xc8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d207      	bcs.n	80069e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069d2:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <prvAddNewTaskToReadyList+0xdc>)
 80069d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20000e7c 	.word	0x20000e7c
 80069f0:	200009a8 	.word	0x200009a8
 80069f4:	20000e88 	.word	0x20000e88
 80069f8:	20000e98 	.word	0x20000e98
 80069fc:	20000e84 	.word	0x20000e84
 8006a00:	200009ac 	.word	0x200009ac
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d017      	beq.n	8006a4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a1a:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <vTaskDelay+0x60>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <vTaskDelay+0x30>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60bb      	str	r3, [r7, #8]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a38:	f000 f88a 	bl	8006b50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fd04 	bl	800744c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a44:	f000 f892 	bl	8006b6c <xTaskResumeAll>
 8006a48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d107      	bne.n	8006a60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <vTaskDelay+0x64>)
 8006a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000ea4 	.word	0x20000ea4
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a7e:	463a      	mov	r2, r7
 8006a80:	1d39      	adds	r1, r7, #4
 8006a82:	f107 0308 	add.w	r3, r7, #8
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff f848 	bl	8005b1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	9202      	str	r2, [sp, #8]
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	2300      	movs	r3, #0
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	4924      	ldr	r1, [pc, #144]	; (8006b30 <vTaskStartScheduler+0xc0>)
 8006aa0:	4824      	ldr	r0, [pc, #144]	; (8006b34 <vTaskStartScheduler+0xc4>)
 8006aa2:	f7ff fe01 	bl	80066a8 <xTaskCreateStatic>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4a23      	ldr	r2, [pc, #140]	; (8006b38 <vTaskStartScheduler+0xc8>)
 8006aaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006aac:	4b22      	ldr	r3, [pc, #136]	; (8006b38 <vTaskStartScheduler+0xc8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e001      	b.n	8006abe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d102      	bne.n	8006aca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ac4:	f000 fd16 	bl	80074f4 <xTimerCreateTimerTask>
 8006ac8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d11b      	bne.n	8006b08 <vTaskStartScheduler+0x98>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	613b      	str	r3, [r7, #16]
}
 8006ae2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ae4:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <vTaskStartScheduler+0xcc>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3354      	adds	r3, #84	; 0x54
 8006aea:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <vTaskStartScheduler+0xd0>)
 8006aec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aee:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <vTaskStartScheduler+0xd4>)
 8006af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006af4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <vTaskStartScheduler+0xd8>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006afc:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <vTaskStartScheduler+0xdc>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b02:	f001 f889 	bl	8007c18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b06:	e00e      	b.n	8006b26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b0e:	d10a      	bne.n	8006b26 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	60fb      	str	r3, [r7, #12]
}
 8006b22:	bf00      	nop
 8006b24:	e7fe      	b.n	8006b24 <vTaskStartScheduler+0xb4>
}
 8006b26:	bf00      	nop
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	08008528 	.word	0x08008528
 8006b34:	08007179 	.word	0x08007179
 8006b38:	20000ea0 	.word	0x20000ea0
 8006b3c:	200009a8 	.word	0x200009a8
 8006b40:	20000014 	.word	0x20000014
 8006b44:	20000e9c 	.word	0x20000e9c
 8006b48:	20000e88 	.word	0x20000e88
 8006b4c:	20000e80 	.word	0x20000e80

08006b50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006b54:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <vTaskSuspendAll+0x18>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	4a03      	ldr	r2, [pc, #12]	; (8006b68 <vTaskSuspendAll+0x18>)
 8006b5c:	6013      	str	r3, [r2, #0]
}
 8006b5e:	bf00      	nop
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000ea4 	.word	0x20000ea4

08006b6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b7a:	4b42      	ldr	r3, [pc, #264]	; (8006c84 <xTaskResumeAll+0x118>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	603b      	str	r3, [r7, #0]
}
 8006b94:	bf00      	nop
 8006b96:	e7fe      	b.n	8006b96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b98:	f001 f8b0 	bl	8007cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b9c:	4b39      	ldr	r3, [pc, #228]	; (8006c84 <xTaskResumeAll+0x118>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	4a38      	ldr	r2, [pc, #224]	; (8006c84 <xTaskResumeAll+0x118>)
 8006ba4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba6:	4b37      	ldr	r3, [pc, #220]	; (8006c84 <xTaskResumeAll+0x118>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d162      	bne.n	8006c74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bae:	4b36      	ldr	r3, [pc, #216]	; (8006c88 <xTaskResumeAll+0x11c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d05e      	beq.n	8006c74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bb6:	e02f      	b.n	8006c18 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006bb8:	4b34      	ldr	r3, [pc, #208]	; (8006c8c <xTaskResumeAll+0x120>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff f861 	bl	8005c8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3304      	adds	r3, #4
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff f85c 	bl	8005c8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd8:	4b2d      	ldr	r3, [pc, #180]	; (8006c90 <xTaskResumeAll+0x124>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d903      	bls.n	8006be8 <xTaskResumeAll+0x7c>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	4a2a      	ldr	r2, [pc, #168]	; (8006c90 <xTaskResumeAll+0x124>)
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4a27      	ldr	r2, [pc, #156]	; (8006c94 <xTaskResumeAll+0x128>)
 8006bf6:	441a      	add	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f7fe ffe9 	bl	8005bd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <xTaskResumeAll+0x12c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d302      	bcc.n	8006c18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c12:	4b22      	ldr	r3, [pc, #136]	; (8006c9c <xTaskResumeAll+0x130>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c18:	4b1c      	ldr	r3, [pc, #112]	; (8006c8c <xTaskResumeAll+0x120>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1cb      	bne.n	8006bb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c26:	f000 fb61 	bl	80072ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <xTaskResumeAll+0x134>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d010      	beq.n	8006c58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c36:	f000 f845 	bl	8006cc4 <xTaskIncrementTick>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c40:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <xTaskResumeAll+0x130>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f1      	bne.n	8006c36 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <xTaskResumeAll+0x134>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c58:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <xTaskResumeAll+0x130>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c60:	2301      	movs	r3, #1
 8006c62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c64:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <xTaskResumeAll+0x138>)
 8006c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c74:	f001 f872 	bl	8007d5c <vPortExitCritical>

	return xAlreadyYielded;
 8006c78:	68bb      	ldr	r3, [r7, #8]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000ea4 	.word	0x20000ea4
 8006c88:	20000e7c 	.word	0x20000e7c
 8006c8c:	20000e3c 	.word	0x20000e3c
 8006c90:	20000e84 	.word	0x20000e84
 8006c94:	200009ac 	.word	0x200009ac
 8006c98:	200009a8 	.word	0x200009a8
 8006c9c:	20000e90 	.word	0x20000e90
 8006ca0:	20000e8c 	.word	0x20000e8c
 8006ca4:	e000ed04 	.word	0xe000ed04

08006ca8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cae:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <xTaskGetTickCount+0x18>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cb4:	687b      	ldr	r3, [r7, #4]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr
 8006cc0:	20000e80 	.word	0x20000e80

08006cc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cce:	4b51      	ldr	r3, [pc, #324]	; (8006e14 <xTaskIncrementTick+0x150>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f040 808e 	bne.w	8006df4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cd8:	4b4f      	ldr	r3, [pc, #316]	; (8006e18 <xTaskIncrementTick+0x154>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ce0:	4a4d      	ldr	r2, [pc, #308]	; (8006e18 <xTaskIncrementTick+0x154>)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d120      	bne.n	8006d2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cec:	4b4b      	ldr	r3, [pc, #300]	; (8006e1c <xTaskIncrementTick+0x158>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <xTaskIncrementTick+0x48>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	603b      	str	r3, [r7, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <xTaskIncrementTick+0x46>
 8006d0c:	4b43      	ldr	r3, [pc, #268]	; (8006e1c <xTaskIncrementTick+0x158>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	4b43      	ldr	r3, [pc, #268]	; (8006e20 <xTaskIncrementTick+0x15c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a41      	ldr	r2, [pc, #260]	; (8006e1c <xTaskIncrementTick+0x158>)
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	4a41      	ldr	r2, [pc, #260]	; (8006e20 <xTaskIncrementTick+0x15c>)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	4b40      	ldr	r3, [pc, #256]	; (8006e24 <xTaskIncrementTick+0x160>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a3f      	ldr	r2, [pc, #252]	; (8006e24 <xTaskIncrementTick+0x160>)
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	f000 fadf 	bl	80072ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d2e:	4b3e      	ldr	r3, [pc, #248]	; (8006e28 <xTaskIncrementTick+0x164>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d34e      	bcc.n	8006dd6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d38:	4b38      	ldr	r3, [pc, #224]	; (8006e1c <xTaskIncrementTick+0x158>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <xTaskIncrementTick+0x82>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <xTaskIncrementTick+0x84>
 8006d46:	2300      	movs	r3, #0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d4c:	4b36      	ldr	r3, [pc, #216]	; (8006e28 <xTaskIncrementTick+0x164>)
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d52:	601a      	str	r2, [r3, #0]
					break;
 8006d54:	e03f      	b.n	8006dd6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d56:	4b31      	ldr	r3, [pc, #196]	; (8006e1c <xTaskIncrementTick+0x158>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d203      	bcs.n	8006d76 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d6e:	4a2e      	ldr	r2, [pc, #184]	; (8006e28 <xTaskIncrementTick+0x164>)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6013      	str	r3, [r2, #0]
						break;
 8006d74:	e02f      	b.n	8006dd6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe ff86 	bl	8005c8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	3318      	adds	r3, #24
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe ff7d 	bl	8005c8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d96:	4b25      	ldr	r3, [pc, #148]	; (8006e2c <xTaskIncrementTick+0x168>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d903      	bls.n	8006da6 <xTaskIncrementTick+0xe2>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	4a22      	ldr	r2, [pc, #136]	; (8006e2c <xTaskIncrementTick+0x168>)
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4a1f      	ldr	r2, [pc, #124]	; (8006e30 <xTaskIncrementTick+0x16c>)
 8006db4:	441a      	add	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	3304      	adds	r3, #4
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f7fe ff0a 	bl	8005bd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	; (8006e34 <xTaskIncrementTick+0x170>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d3b3      	bcc.n	8006d38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd4:	e7b0      	b.n	8006d38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dd6:	4b17      	ldr	r3, [pc, #92]	; (8006e34 <xTaskIncrementTick+0x170>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ddc:	4914      	ldr	r1, [pc, #80]	; (8006e30 <xTaskIncrementTick+0x16c>)
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d907      	bls.n	8006dfe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	e004      	b.n	8006dfe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006df4:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <xTaskIncrementTick+0x174>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	4a0f      	ldr	r2, [pc, #60]	; (8006e38 <xTaskIncrementTick+0x174>)
 8006dfc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <xTaskIncrementTick+0x178>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006e06:	2301      	movs	r3, #1
 8006e08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e0a:	697b      	ldr	r3, [r7, #20]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20000ea4 	.word	0x20000ea4
 8006e18:	20000e80 	.word	0x20000e80
 8006e1c:	20000e34 	.word	0x20000e34
 8006e20:	20000e38 	.word	0x20000e38
 8006e24:	20000e94 	.word	0x20000e94
 8006e28:	20000e9c 	.word	0x20000e9c
 8006e2c:	20000e84 	.word	0x20000e84
 8006e30:	200009ac 	.word	0x200009ac
 8006e34:	200009a8 	.word	0x200009a8
 8006e38:	20000e8c 	.word	0x20000e8c
 8006e3c:	20000e90 	.word	0x20000e90

08006e40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e46:	4b2a      	ldr	r3, [pc, #168]	; (8006ef0 <vTaskSwitchContext+0xb0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e4e:	4b29      	ldr	r3, [pc, #164]	; (8006ef4 <vTaskSwitchContext+0xb4>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e54:	e046      	b.n	8006ee4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006e56:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <vTaskSwitchContext+0xb4>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e5c:	4b26      	ldr	r3, [pc, #152]	; (8006ef8 <vTaskSwitchContext+0xb8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	e010      	b.n	8006e86 <vTaskSwitchContext+0x46>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	607b      	str	r3, [r7, #4]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <vTaskSwitchContext+0x3e>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	491d      	ldr	r1, [pc, #116]	; (8006efc <vTaskSwitchContext+0xbc>)
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0e4      	beq.n	8006e64 <vTaskSwitchContext+0x24>
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4a15      	ldr	r2, [pc, #84]	; (8006efc <vTaskSwitchContext+0xbc>)
 8006ea6:	4413      	add	r3, r2
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	605a      	str	r2, [r3, #4]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	3308      	adds	r3, #8
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d104      	bne.n	8006eca <vTaskSwitchContext+0x8a>
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	605a      	str	r2, [r3, #4]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4a0b      	ldr	r2, [pc, #44]	; (8006f00 <vTaskSwitchContext+0xc0>)
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	4a08      	ldr	r2, [pc, #32]	; (8006ef8 <vTaskSwitchContext+0xb8>)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eda:	4b09      	ldr	r3, [pc, #36]	; (8006f00 <vTaskSwitchContext+0xc0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3354      	adds	r3, #84	; 0x54
 8006ee0:	4a08      	ldr	r2, [pc, #32]	; (8006f04 <vTaskSwitchContext+0xc4>)
 8006ee2:	6013      	str	r3, [r2, #0]
}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000ea4 	.word	0x20000ea4
 8006ef4:	20000e90 	.word	0x20000e90
 8006ef8:	20000e84 	.word	0x20000e84
 8006efc:	200009ac 	.word	0x200009ac
 8006f00:	200009a8 	.word	0x200009a8
 8006f04:	20000014 	.word	0x20000014

08006f08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	60fb      	str	r3, [r7, #12]
}
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <vTaskPlaceOnEventList+0x44>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3318      	adds	r3, #24
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fe fe70 	bl	8005c1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	6838      	ldr	r0, [r7, #0]
 8006f40:	f000 fa84 	bl	800744c <prvAddCurrentTaskToDelayedList>
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	200009a8 	.word	0x200009a8

08006f50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	617b      	str	r3, [r7, #20]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f78:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3318      	adds	r3, #24
 8006f7e:	4619      	mov	r1, r3
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f7fe fe28 	bl	8005bd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	68b8      	ldr	r0, [r7, #8]
 8006f96:	f000 fa59 	bl	800744c <prvAddCurrentTaskToDelayedList>
	}
 8006f9a:	bf00      	nop
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200009a8 	.word	0x200009a8

08006fa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60fb      	str	r3, [r7, #12]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	3318      	adds	r3, #24
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fe fe57 	bl	8005c8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fde:	4b1e      	ldr	r3, [pc, #120]	; (8007058 <xTaskRemoveFromEventList+0xb0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d11d      	bne.n	8007022 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fe4e 	bl	8005c8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff4:	4b19      	ldr	r3, [pc, #100]	; (800705c <xTaskRemoveFromEventList+0xb4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d903      	bls.n	8007004 <xTaskRemoveFromEventList+0x5c>
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	4a16      	ldr	r2, [pc, #88]	; (800705c <xTaskRemoveFromEventList+0xb4>)
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4a13      	ldr	r2, [pc, #76]	; (8007060 <xTaskRemoveFromEventList+0xb8>)
 8007012:	441a      	add	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f7fe fddb 	bl	8005bd6 <vListInsertEnd>
 8007020:	e005      	b.n	800702e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	3318      	adds	r3, #24
 8007026:	4619      	mov	r1, r3
 8007028:	480e      	ldr	r0, [pc, #56]	; (8007064 <xTaskRemoveFromEventList+0xbc>)
 800702a:	f7fe fdd4 	bl	8005bd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	4b0d      	ldr	r3, [pc, #52]	; (8007068 <xTaskRemoveFromEventList+0xc0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	429a      	cmp	r2, r3
 800703a:	d905      	bls.n	8007048 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800703c:	2301      	movs	r3, #1
 800703e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007040:	4b0a      	ldr	r3, [pc, #40]	; (800706c <xTaskRemoveFromEventList+0xc4>)
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	e001      	b.n	800704c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007048:	2300      	movs	r3, #0
 800704a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800704c:	697b      	ldr	r3, [r7, #20]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000ea4 	.word	0x20000ea4
 800705c:	20000e84 	.word	0x20000e84
 8007060:	200009ac 	.word	0x200009ac
 8007064:	20000e3c 	.word	0x20000e3c
 8007068:	200009a8 	.word	0x200009a8
 800706c:	20000e90 	.word	0x20000e90

08007070 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007078:	4b06      	ldr	r3, [pc, #24]	; (8007094 <vTaskInternalSetTimeOutState+0x24>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <vTaskInternalSetTimeOutState+0x28>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	605a      	str	r2, [r3, #4]
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000e94 	.word	0x20000e94
 8007098:	20000e80 	.word	0x20000e80

0800709c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	613b      	str	r3, [r7, #16]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	60fb      	str	r3, [r7, #12]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070de:	f000 fe0d 	bl	8007cfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <xTaskCheckForTimeOut+0xbc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070fa:	d102      	bne.n	8007102 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	e023      	b.n	800714a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <xTaskCheckForTimeOut+0xc0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d007      	beq.n	800711e <xTaskCheckForTimeOut+0x82>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	429a      	cmp	r2, r3
 8007116:	d302      	bcc.n	800711e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007118:	2301      	movs	r3, #1
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	e015      	b.n	800714a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	429a      	cmp	r2, r3
 8007126:	d20b      	bcs.n	8007140 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ff9b 	bl	8007070 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800713a:	2300      	movs	r3, #0
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	e004      	b.n	800714a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007146:	2301      	movs	r3, #1
 8007148:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800714a:	f000 fe07 	bl	8007d5c <vPortExitCritical>

	return xReturn;
 800714e:	69fb      	ldr	r3, [r7, #28]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3720      	adds	r7, #32
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000e80 	.word	0x20000e80
 800715c:	20000e94 	.word	0x20000e94

08007160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007164:	4b03      	ldr	r3, [pc, #12]	; (8007174 <vTaskMissedYield+0x14>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	46bd      	mov	sp, r7
 800716e:	bc80      	pop	{r7}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000e90 	.word	0x20000e90

08007178 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007180:	f000 f852 	bl	8007228 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <prvIdleTask+0x28>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d9f9      	bls.n	8007180 <prvIdleTask+0x8>
			{
				taskYIELD();
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <prvIdleTask+0x2c>)
 800718e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800719c:	e7f0      	b.n	8007180 <prvIdleTask+0x8>
 800719e:	bf00      	nop
 80071a0:	200009ac 	.word	0x200009ac
 80071a4:	e000ed04 	.word	0xe000ed04

080071a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071ae:	2300      	movs	r3, #0
 80071b0:	607b      	str	r3, [r7, #4]
 80071b2:	e00c      	b.n	80071ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4a12      	ldr	r2, [pc, #72]	; (8007208 <prvInitialiseTaskLists+0x60>)
 80071c0:	4413      	add	r3, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe fcdc 	bl	8005b80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3301      	adds	r3, #1
 80071cc:	607b      	str	r3, [r7, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b37      	cmp	r3, #55	; 0x37
 80071d2:	d9ef      	bls.n	80071b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071d4:	480d      	ldr	r0, [pc, #52]	; (800720c <prvInitialiseTaskLists+0x64>)
 80071d6:	f7fe fcd3 	bl	8005b80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071da:	480d      	ldr	r0, [pc, #52]	; (8007210 <prvInitialiseTaskLists+0x68>)
 80071dc:	f7fe fcd0 	bl	8005b80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071e0:	480c      	ldr	r0, [pc, #48]	; (8007214 <prvInitialiseTaskLists+0x6c>)
 80071e2:	f7fe fccd 	bl	8005b80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071e6:	480c      	ldr	r0, [pc, #48]	; (8007218 <prvInitialiseTaskLists+0x70>)
 80071e8:	f7fe fcca 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071ec:	480b      	ldr	r0, [pc, #44]	; (800721c <prvInitialiseTaskLists+0x74>)
 80071ee:	f7fe fcc7 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071f2:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <prvInitialiseTaskLists+0x78>)
 80071f4:	4a05      	ldr	r2, [pc, #20]	; (800720c <prvInitialiseTaskLists+0x64>)
 80071f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <prvInitialiseTaskLists+0x7c>)
 80071fa:	4a05      	ldr	r2, [pc, #20]	; (8007210 <prvInitialiseTaskLists+0x68>)
 80071fc:	601a      	str	r2, [r3, #0]
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200009ac 	.word	0x200009ac
 800720c:	20000e0c 	.word	0x20000e0c
 8007210:	20000e20 	.word	0x20000e20
 8007214:	20000e3c 	.word	0x20000e3c
 8007218:	20000e50 	.word	0x20000e50
 800721c:	20000e68 	.word	0x20000e68
 8007220:	20000e34 	.word	0x20000e34
 8007224:	20000e38 	.word	0x20000e38

08007228 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800722e:	e019      	b.n	8007264 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007230:	f000 fd64 	bl	8007cfc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007234:	4b10      	ldr	r3, [pc, #64]	; (8007278 <prvCheckTasksWaitingTermination+0x50>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3304      	adds	r3, #4
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fd23 	bl	8005c8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007246:	4b0d      	ldr	r3, [pc, #52]	; (800727c <prvCheckTasksWaitingTermination+0x54>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3b01      	subs	r3, #1
 800724c:	4a0b      	ldr	r2, [pc, #44]	; (800727c <prvCheckTasksWaitingTermination+0x54>)
 800724e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <prvCheckTasksWaitingTermination+0x58>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3b01      	subs	r3, #1
 8007256:	4a0a      	ldr	r2, [pc, #40]	; (8007280 <prvCheckTasksWaitingTermination+0x58>)
 8007258:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800725a:	f000 fd7f 	bl	8007d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f810 	bl	8007284 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <prvCheckTasksWaitingTermination+0x58>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e1      	bne.n	8007230 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800726c:	bf00      	nop
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000e50 	.word	0x20000e50
 800727c:	20000e7c 	.word	0x20000e7c
 8007280:	20000e64 	.word	0x20000e64

08007284 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3354      	adds	r3, #84	; 0x54
 8007290:	4618      	mov	r0, r3
 8007292:	f001 f855 	bl	8008340 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800729c:	2b00      	cmp	r3, #0
 800729e:	d108      	bne.n	80072b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 feed 	bl	8008084 <vPortFree>
				vPortFree( pxTCB );
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 feea 	bl	8008084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072b0:	e018      	b.n	80072e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d103      	bne.n	80072c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fee1 	bl	8008084 <vPortFree>
	}
 80072c2:	e00f      	b.n	80072e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d00a      	beq.n	80072e4 <prvDeleteTCB+0x60>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	60fb      	str	r3, [r7, #12]
}
 80072e0:	bf00      	nop
 80072e2:	e7fe      	b.n	80072e2 <prvDeleteTCB+0x5e>
	}
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072f2:	4b0e      	ldr	r3, [pc, #56]	; (800732c <prvResetNextTaskUnblockTime+0x40>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <prvResetNextTaskUnblockTime+0x14>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <prvResetNextTaskUnblockTime+0x16>
 8007300:	2300      	movs	r3, #0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007306:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <prvResetNextTaskUnblockTime+0x44>)
 8007308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800730c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800730e:	e008      	b.n	8007322 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <prvResetNextTaskUnblockTime+0x40>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4a04      	ldr	r2, [pc, #16]	; (8007330 <prvResetNextTaskUnblockTime+0x44>)
 8007320:	6013      	str	r3, [r2, #0]
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	bc80      	pop	{r7}
 800732a:	4770      	bx	lr
 800732c:	20000e34 	.word	0x20000e34
 8007330:	20000e9c 	.word	0x20000e9c

08007334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <xTaskGetSchedulerState+0x34>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007342:	2301      	movs	r3, #1
 8007344:	607b      	str	r3, [r7, #4]
 8007346:	e008      	b.n	800735a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007348:	4b08      	ldr	r3, [pc, #32]	; (800736c <xTaskGetSchedulerState+0x38>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007350:	2302      	movs	r3, #2
 8007352:	607b      	str	r3, [r7, #4]
 8007354:	e001      	b.n	800735a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007356:	2300      	movs	r3, #0
 8007358:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800735a:	687b      	ldr	r3, [r7, #4]
	}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000e88 	.word	0x20000e88
 800736c:	20000ea4 	.word	0x20000ea4

08007370 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800737c:	2300      	movs	r3, #0
 800737e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d056      	beq.n	8007434 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007386:	4b2e      	ldr	r3, [pc, #184]	; (8007440 <xTaskPriorityDisinherit+0xd0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	429a      	cmp	r2, r3
 800738e:	d00a      	beq.n	80073a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	60fb      	str	r3, [r7, #12]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	60bb      	str	r3, [r7, #8]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c8:	1e5a      	subs	r2, r3, #1
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d02c      	beq.n	8007434 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d128      	bne.n	8007434 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fc50 	bl	8005c8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007404:	4b0f      	ldr	r3, [pc, #60]	; (8007444 <xTaskPriorityDisinherit+0xd4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d903      	bls.n	8007414 <xTaskPriorityDisinherit+0xa4>
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	4a0c      	ldr	r2, [pc, #48]	; (8007444 <xTaskPriorityDisinherit+0xd4>)
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4a09      	ldr	r2, [pc, #36]	; (8007448 <xTaskPriorityDisinherit+0xd8>)
 8007422:	441a      	add	r2, r3
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	3304      	adds	r3, #4
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7fe fbd3 	bl	8005bd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007434:	697b      	ldr	r3, [r7, #20]
	}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	200009a8 	.word	0x200009a8
 8007444:	20000e84 	.word	0x20000e84
 8007448:	200009ac 	.word	0x200009ac

0800744c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007456:	4b21      	ldr	r3, [pc, #132]	; (80074dc <prvAddCurrentTaskToDelayedList+0x90>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800745c:	4b20      	ldr	r3, [pc, #128]	; (80074e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3304      	adds	r3, #4
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fc12 	bl	8005c8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800746e:	d10a      	bne.n	8007486 <prvAddCurrentTaskToDelayedList+0x3a>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007476:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3304      	adds	r3, #4
 800747c:	4619      	mov	r1, r3
 800747e:	4819      	ldr	r0, [pc, #100]	; (80074e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007480:	f7fe fba9 	bl	8005bd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007484:	e026      	b.n	80074d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4413      	add	r3, r2
 800748c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800748e:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	429a      	cmp	r2, r3
 800749c:	d209      	bcs.n	80074b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800749e:	4b12      	ldr	r3, [pc, #72]	; (80074e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7fe fbb6 	bl	8005c1c <vListInsert>
}
 80074b0:	e010      	b.n	80074d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074b2:	4b0e      	ldr	r3, [pc, #56]	; (80074ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f7fe fbac 	bl	8005c1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d202      	bcs.n	80074d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074ce:	4a08      	ldr	r2, [pc, #32]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6013      	str	r3, [r2, #0]
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000e80 	.word	0x20000e80
 80074e0:	200009a8 	.word	0x200009a8
 80074e4:	20000e68 	.word	0x20000e68
 80074e8:	20000e38 	.word	0x20000e38
 80074ec:	20000e34 	.word	0x20000e34
 80074f0:	20000e9c 	.word	0x20000e9c

080074f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074fe:	f000 facb 	bl	8007a98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007502:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <xTimerCreateTimerTask+0x80>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d021      	beq.n	800754e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007512:	1d3a      	adds	r2, r7, #4
 8007514:	f107 0108 	add.w	r1, r7, #8
 8007518:	f107 030c 	add.w	r3, r7, #12
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fb15 	bl	8005b4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	9202      	str	r2, [sp, #8]
 800752a:	9301      	str	r3, [sp, #4]
 800752c:	2302      	movs	r3, #2
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	2300      	movs	r3, #0
 8007532:	460a      	mov	r2, r1
 8007534:	4910      	ldr	r1, [pc, #64]	; (8007578 <xTimerCreateTimerTask+0x84>)
 8007536:	4811      	ldr	r0, [pc, #68]	; (800757c <xTimerCreateTimerTask+0x88>)
 8007538:	f7ff f8b6 	bl	80066a8 <xTaskCreateStatic>
 800753c:	4603      	mov	r3, r0
 800753e:	4a10      	ldr	r2, [pc, #64]	; (8007580 <xTimerCreateTimerTask+0x8c>)
 8007540:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <xTimerCreateTimerTask+0x8c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800754a:	2301      	movs	r3, #1
 800754c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	613b      	str	r3, [r7, #16]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800756a:	697b      	ldr	r3, [r7, #20]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20000ed8 	.word	0x20000ed8
 8007578:	08008530 	.word	0x08008530
 800757c:	080076a1 	.word	0x080076a1
 8007580:	20000edc 	.word	0x20000edc

08007584 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007592:	2300      	movs	r3, #0
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10a      	bne.n	80075b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	623b      	str	r3, [r7, #32]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075b2:	4b1a      	ldr	r3, [pc, #104]	; (800761c <xTimerGenericCommand+0x98>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d02a      	beq.n	8007610 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b05      	cmp	r3, #5
 80075ca:	dc18      	bgt.n	80075fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075cc:	f7ff feb2 	bl	8007334 <xTaskGetSchedulerState>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d109      	bne.n	80075ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80075d6:	4b11      	ldr	r3, [pc, #68]	; (800761c <xTimerGenericCommand+0x98>)
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	f107 0110 	add.w	r1, r7, #16
 80075de:	2300      	movs	r3, #0
 80075e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e2:	f7fe fc7f 	bl	8005ee4 <xQueueGenericSend>
 80075e6:	6278      	str	r0, [r7, #36]	; 0x24
 80075e8:	e012      	b.n	8007610 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075ea:	4b0c      	ldr	r3, [pc, #48]	; (800761c <xTimerGenericCommand+0x98>)
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	f107 0110 	add.w	r1, r7, #16
 80075f2:	2300      	movs	r3, #0
 80075f4:	2200      	movs	r2, #0
 80075f6:	f7fe fc75 	bl	8005ee4 <xQueueGenericSend>
 80075fa:	6278      	str	r0, [r7, #36]	; 0x24
 80075fc:	e008      	b.n	8007610 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075fe:	4b07      	ldr	r3, [pc, #28]	; (800761c <xTimerGenericCommand+0x98>)
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	f107 0110 	add.w	r1, r7, #16
 8007606:	2300      	movs	r3, #0
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	f7fe fd69 	bl	80060e0 <xQueueGenericSendFromISR>
 800760e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007612:	4618      	mov	r0, r3
 8007614:	3728      	adds	r7, #40	; 0x28
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000ed8 	.word	0x20000ed8

08007620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af02      	add	r7, sp, #8
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800762a:	4b1c      	ldr	r3, [pc, #112]	; (800769c <prvProcessExpiredTimer+0x7c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	3304      	adds	r3, #4
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe fb27 	bl	8005c8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d122      	bne.n	800768c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	18d1      	adds	r1, r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	6978      	ldr	r0, [r7, #20]
 8007654:	f000 f8c8 	bl	80077e8 <prvInsertTimerInActiveList>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d016      	beq.n	800768c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800765e:	2300      	movs	r3, #0
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2300      	movs	r3, #0
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	2100      	movs	r1, #0
 8007668:	6978      	ldr	r0, [r7, #20]
 800766a:	f7ff ff8b 	bl	8007584 <xTimerGenericCommand>
 800766e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10a      	bne.n	800768c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	60fb      	str	r3, [r7, #12]
}
 8007688:	bf00      	nop
 800768a:	e7fe      	b.n	800768a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	6978      	ldr	r0, [r7, #20]
 8007692:	4798      	blx	r3
}
 8007694:	bf00      	nop
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000ed0 	.word	0x20000ed0

080076a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076a8:	f107 0308 	add.w	r3, r7, #8
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 f857 	bl	8007760 <prvGetNextExpireTime>
 80076b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4619      	mov	r1, r3
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f803 	bl	80076c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076be:	f000 f8d5 	bl	800786c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076c2:	e7f1      	b.n	80076a8 <prvTimerTask+0x8>

080076c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076ce:	f7ff fa3f 	bl	8006b50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f866 	bl	80077a8 <prvSampleTimeNow>
 80076dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d130      	bne.n	8007746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <prvProcessTimerOrBlockTask+0x3c>
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d806      	bhi.n	8007700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076f2:	f7ff fa3b 	bl	8006b6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ff91 	bl	8007620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076fe:	e024      	b.n	800774a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d008      	beq.n	8007718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <prvProcessTimerOrBlockTask+0x90>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	bf0c      	ite	eq
 8007710:	2301      	moveq	r3, #1
 8007712:	2300      	movne	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007718:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <prvProcessTimerOrBlockTask+0x94>)
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4619      	mov	r1, r3
 8007726:	f7fe ff8b 	bl	8006640 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800772a:	f7ff fa1f 	bl	8006b6c <xTaskResumeAll>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007734:	4b09      	ldr	r3, [pc, #36]	; (800775c <prvProcessTimerOrBlockTask+0x98>)
 8007736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	f3bf 8f6f 	isb	sy
}
 8007744:	e001      	b.n	800774a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007746:	f7ff fa11 	bl	8006b6c <xTaskResumeAll>
}
 800774a:	bf00      	nop
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000ed4 	.word	0x20000ed4
 8007758:	20000ed8 	.word	0x20000ed8
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007768:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <prvGetNextExpireTime+0x44>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	bf0c      	ite	eq
 8007772:	2301      	moveq	r3, #1
 8007774:	2300      	movne	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	461a      	mov	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d105      	bne.n	8007792 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <prvGetNextExpireTime+0x44>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e001      	b.n	8007796 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007796:	68fb      	ldr	r3, [r7, #12]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000ed0 	.word	0x20000ed0

080077a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077b0:	f7ff fa7a 	bl	8006ca8 <xTaskGetTickCount>
 80077b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <prvSampleTimeNow+0x3c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d205      	bcs.n	80077cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077c0:	f000 f908 	bl	80079d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077d2:	4a04      	ldr	r2, [pc, #16]	; (80077e4 <prvSampleTimeNow+0x3c>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077d8:	68fb      	ldr	r3, [r7, #12]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000ee0 	.word	0x20000ee0

080077e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	429a      	cmp	r2, r3
 800780c:	d812      	bhi.n	8007834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	1ad2      	subs	r2, r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	429a      	cmp	r2, r3
 800781a:	d302      	bcc.n	8007822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800781c:	2301      	movs	r3, #1
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	e01b      	b.n	800785a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007822:	4b10      	ldr	r3, [pc, #64]	; (8007864 <prvInsertTimerInActiveList+0x7c>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3304      	adds	r3, #4
 800782a:	4619      	mov	r1, r3
 800782c:	4610      	mov	r0, r2
 800782e:	f7fe f9f5 	bl	8005c1c <vListInsert>
 8007832:	e012      	b.n	800785a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d206      	bcs.n	800784a <prvInsertTimerInActiveList+0x62>
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d302      	bcc.n	800784a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007844:	2301      	movs	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	e007      	b.n	800785a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <prvInsertTimerInActiveList+0x80>)
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3304      	adds	r3, #4
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f7fe f9e1 	bl	8005c1c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800785a:	697b      	ldr	r3, [r7, #20]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20000ed4 	.word	0x20000ed4
 8007868:	20000ed0 	.word	0x20000ed0

0800786c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08e      	sub	sp, #56	; 0x38
 8007870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007872:	e09d      	b.n	80079b0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	da18      	bge.n	80078ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800787a:	1d3b      	adds	r3, r7, #4
 800787c:	3304      	adds	r3, #4
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	61fb      	str	r3, [r7, #28]
}
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a2:	6850      	ldr	r0, [r2, #4]
 80078a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a6:	6892      	ldr	r2, [r2, #8]
 80078a8:	4611      	mov	r1, r2
 80078aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	db7d      	blt.n	80079ae <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d004      	beq.n	80078c8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	3304      	adds	r3, #4
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe f9e2 	bl	8005c8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078c8:	463b      	mov	r3, r7
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff ff6c 	bl	80077a8 <prvSampleTimeNow>
 80078d0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	d86b      	bhi.n	80079b0 <prvProcessReceivedCommands+0x144>
 80078d8:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <prvProcessReceivedCommands+0x74>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007909 	.word	0x08007909
 80078ec:	080079b1 	.word	0x080079b1
 80078f0:	08007965 	.word	0x08007965
 80078f4:	0800799d 	.word	0x0800799d
 80078f8:	08007909 	.word	0x08007909
 80078fc:	08007909 	.word	0x08007909
 8007900:	080079b1 	.word	0x080079b1
 8007904:	08007965 	.word	0x08007965
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	18d1      	adds	r1, r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007916:	f7ff ff67 	bl	80077e8 <prvInsertTimerInActiveList>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d047      	beq.n	80079b0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007926:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d13f      	bne.n	80079b0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	441a      	add	r2, r3
 8007938:	2300      	movs	r3, #0
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	2300      	movs	r3, #0
 800793e:	2100      	movs	r1, #0
 8007940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007942:	f7ff fe1f 	bl	8007584 <xTimerGenericCommand>
 8007946:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d130      	bne.n	80079b0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	61bb      	str	r3, [r7, #24]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	617b      	str	r3, [r7, #20]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	18d1      	adds	r1, r2, r3
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007996:	f7ff ff27 	bl	80077e8 <prvInsertTimerInActiveList>
					break;
 800799a:	e009      	b.n	80079b0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d104      	bne.n	80079b0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80079a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a8:	f000 fb6c 	bl	8008084 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079ac:	e000      	b.n	80079b0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <prvProcessReceivedCommands+0x164>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	1d39      	adds	r1, r7, #4
 80079b6:	2200      	movs	r2, #0
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fc29 	bl	8006210 <xQueueReceive>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f47f af57 	bne.w	8007874 <prvProcessReceivedCommands+0x8>
	}
}
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	3730      	adds	r7, #48	; 0x30
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20000ed8 	.word	0x20000ed8

080079d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079da:	e045      	b.n	8007a68 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079dc:	4b2c      	ldr	r3, [pc, #176]	; (8007a90 <prvSwitchTimerLists+0xbc>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079e6:	4b2a      	ldr	r3, [pc, #168]	; (8007a90 <prvSwitchTimerLists+0xbc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe f949 	bl	8005c8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d12e      	bne.n	8007a68 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4413      	add	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d90e      	bls.n	8007a3a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a28:	4b19      	ldr	r3, [pc, #100]	; (8007a90 <prvSwitchTimerLists+0xbc>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4619      	mov	r1, r3
 8007a32:	4610      	mov	r0, r2
 8007a34:	f7fe f8f2 	bl	8005c1c <vListInsert>
 8007a38:	e016      	b.n	8007a68 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	2100      	movs	r1, #0
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7ff fd9d 	bl	8007584 <xTimerGenericCommand>
 8007a4a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	603b      	str	r3, [r7, #0]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a68:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <prvSwitchTimerLists+0xbc>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1b4      	bne.n	80079dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a72:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <prvSwitchTimerLists+0xbc>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a78:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a04      	ldr	r2, [pc, #16]	; (8007a90 <prvSwitchTimerLists+0xbc>)
 8007a7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a80:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <prvSwitchTimerLists+0xc0>)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	6013      	str	r3, [r2, #0]
}
 8007a86:	bf00      	nop
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000ed0 	.word	0x20000ed0
 8007a94:	20000ed4 	.word	0x20000ed4

08007a98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a9e:	f000 f92d 	bl	8007cfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007aa2:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <prvCheckForValidListAndQueue+0x60>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d120      	bne.n	8007aec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007aaa:	4814      	ldr	r0, [pc, #80]	; (8007afc <prvCheckForValidListAndQueue+0x64>)
 8007aac:	f7fe f868 	bl	8005b80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ab0:	4813      	ldr	r0, [pc, #76]	; (8007b00 <prvCheckForValidListAndQueue+0x68>)
 8007ab2:	f7fe f865 	bl	8005b80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ab6:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <prvCheckForValidListAndQueue+0x6c>)
 8007ab8:	4a10      	ldr	r2, [pc, #64]	; (8007afc <prvCheckForValidListAndQueue+0x64>)
 8007aba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007abc:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <prvCheckForValidListAndQueue+0x70>)
 8007abe:	4a10      	ldr	r2, [pc, #64]	; (8007b00 <prvCheckForValidListAndQueue+0x68>)
 8007ac0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <prvCheckForValidListAndQueue+0x74>)
 8007ac8:	4a11      	ldr	r2, [pc, #68]	; (8007b10 <prvCheckForValidListAndQueue+0x78>)
 8007aca:	2110      	movs	r1, #16
 8007acc:	200a      	movs	r0, #10
 8007ace:	f7fe f96f 	bl	8005db0 <xQueueGenericCreateStatic>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <prvCheckForValidListAndQueue+0x60>)
 8007ad6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ad8:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <prvCheckForValidListAndQueue+0x60>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <prvCheckForValidListAndQueue+0x60>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	490b      	ldr	r1, [pc, #44]	; (8007b14 <prvCheckForValidListAndQueue+0x7c>)
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fd82 	bl	80065f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aec:	f000 f936 	bl	8007d5c <vPortExitCritical>
}
 8007af0:	bf00      	nop
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000ed8 	.word	0x20000ed8
 8007afc:	20000ea8 	.word	0x20000ea8
 8007b00:	20000ebc 	.word	0x20000ebc
 8007b04:	20000ed0 	.word	0x20000ed0
 8007b08:	20000ed4 	.word	0x20000ed4
 8007b0c:	20000f84 	.word	0x20000f84
 8007b10:	20000ee4 	.word	0x20000ee4
 8007b14:	08008538 	.word	0x08008538

08007b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3b04      	subs	r3, #4
 8007b28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f023 0201 	bic.w	r2, r3, #1
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b48:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <pxPortInitialiseStack+0x54>)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3b14      	subs	r3, #20
 8007b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3b20      	subs	r3, #32
 8007b5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b60:	68fb      	ldr	r3, [r7, #12]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr
 8007b6c:	08007b71 	.word	0x08007b71

08007b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <prvTaskExitError+0x54>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b82:	d00a      	beq.n	8007b9a <prvTaskExitError+0x2a>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <prvTaskExitError+0x28>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	60bb      	str	r3, [r7, #8]
}
 8007bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bae:	bf00      	nop
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0fc      	beq.n	8007bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bc80      	pop	{r7}
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000010 	.word	0x20000010
	...

08007bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <pxCurrentTCBConst2>)
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	6808      	ldr	r0, [r1, #0]
 8007bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007bda:	f380 8809 	msr	PSP, r0
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f380 8811 	msr	BASEPRI, r0
 8007bea:	f04e 0e0d 	orr.w	lr, lr, #13
 8007bee:	4770      	bx	lr

08007bf0 <pxCurrentTCBConst2>:
 8007bf0:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop

08007bf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007bf8:	4806      	ldr	r0, [pc, #24]	; (8007c14 <prvPortStartFirstTask+0x1c>)
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	6800      	ldr	r0, [r0, #0]
 8007bfe:	f380 8808 	msr	MSP, r0
 8007c02:	b662      	cpsie	i
 8007c04:	b661      	cpsie	f
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	df00      	svc	0
 8007c10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c12:	bf00      	nop
 8007c14:	e000ed08 	.word	0xe000ed08

08007c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c1e:	4b32      	ldr	r3, [pc, #200]	; (8007ce8 <xPortStartScheduler+0xd0>)
 8007c20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	22ff      	movs	r2, #255	; 0xff
 8007c2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	4b2a      	ldr	r3, [pc, #168]	; (8007cec <xPortStartScheduler+0xd4>)
 8007c44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c46:	4b2a      	ldr	r3, [pc, #168]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c48:	2207      	movs	r2, #7
 8007c4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c4c:	e009      	b.n	8007c62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007c4e:	4b28      	ldr	r3, [pc, #160]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	4a26      	ldr	r2, [pc, #152]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	d0ef      	beq.n	8007c4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c6e:	4b20      	ldr	r3, [pc, #128]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f1c3 0307 	rsb	r3, r3, #7
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d00a      	beq.n	8007c90 <xPortStartScheduler+0x78>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	60bb      	str	r3, [r7, #8]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c90:	4b17      	ldr	r3, [pc, #92]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	4a16      	ldr	r2, [pc, #88]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c9a:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ca2:	4a13      	ldr	r2, [pc, #76]	; (8007cf0 <xPortStartScheduler+0xd8>)
 8007ca4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cae:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <xPortStartScheduler+0xdc>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a10      	ldr	r2, [pc, #64]	; (8007cf4 <xPortStartScheduler+0xdc>)
 8007cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cba:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <xPortStartScheduler+0xdc>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a0d      	ldr	r2, [pc, #52]	; (8007cf4 <xPortStartScheduler+0xdc>)
 8007cc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cc6:	f000 f8b9 	bl	8007e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cca:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <xPortStartScheduler+0xe0>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cd0:	f7ff ff92 	bl	8007bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cd4:	f7ff f8b4 	bl	8006e40 <vTaskSwitchContext>
	prvTaskExitError();
 8007cd8:	f7ff ff4a 	bl	8007b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	e000e400 	.word	0xe000e400
 8007cec:	20000fd4 	.word	0x20000fd4
 8007cf0:	20000fd8 	.word	0x20000fd8
 8007cf4:	e000ed20 	.word	0xe000ed20
 8007cf8:	20000010 	.word	0x20000010

08007cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	607b      	str	r3, [r7, #4]
}
 8007d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d16:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <vPortEnterCritical+0x58>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	4a0d      	ldr	r2, [pc, #52]	; (8007d54 <vPortEnterCritical+0x58>)
 8007d1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d20:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <vPortEnterCritical+0x58>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d10f      	bne.n	8007d48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d28:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <vPortEnterCritical+0x5c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	603b      	str	r3, [r7, #0]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <vPortEnterCritical+0x4a>
	}
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000010 	.word	0x20000010
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d62:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <vPortExitCritical+0x4c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <vPortExitCritical+0x24>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	607b      	str	r3, [r7, #4]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d80:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <vPortExitCritical+0x4c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <vPortExitCritical+0x4c>)
 8007d88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <vPortExitCritical+0x4c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d105      	bne.n	8007d9e <vPortExitCritical+0x42>
 8007d92:	2300      	movs	r3, #0
 8007d94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	f383 8811 	msr	BASEPRI, r3
}
 8007d9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr
 8007da8:	20000010 	.word	0x20000010
 8007dac:	00000000 	.word	0x00000000

08007db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007db0:	f3ef 8009 	mrs	r0, PSP
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <pxCurrentTCBConst>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007dc0:	6010      	str	r0, [r2, #0]
 8007dc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007dc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007dca:	f380 8811 	msr	BASEPRI, r0
 8007dce:	f7ff f837 	bl	8006e40 <vTaskSwitchContext>
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f380 8811 	msr	BASEPRI, r0
 8007dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007dde:	6819      	ldr	r1, [r3, #0]
 8007de0:	6808      	ldr	r0, [r1, #0]
 8007de2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007de6:	f380 8809 	msr	PSP, r0
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	4770      	bx	lr

08007df0 <pxCurrentTCBConst>:
 8007df0:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop

08007df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	607b      	str	r3, [r7, #4]
}
 8007e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e12:	f7fe ff57 	bl	8006cc4 <xTaskIncrementTick>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <SysTick_Handler+0x40>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f383 8811 	msr	BASEPRI, r3
}
 8007e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e40:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <vPortSetupTimerInterrupt+0x30>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e46:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <vPortSetupTimerInterrupt+0x34>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <vPortSetupTimerInterrupt+0x38>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a09      	ldr	r2, [pc, #36]	; (8007e78 <vPortSetupTimerInterrupt+0x3c>)
 8007e52:	fba2 2303 	umull	r2, r3, r2, r3
 8007e56:	099b      	lsrs	r3, r3, #6
 8007e58:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <vPortSetupTimerInterrupt+0x40>)
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e5e:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <vPortSetupTimerInterrupt+0x30>)
 8007e60:	2207      	movs	r2, #7
 8007e62:	601a      	str	r2, [r3, #0]
}
 8007e64:	bf00      	nop
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr
 8007e6c:	e000e010 	.word	0xe000e010
 8007e70:	e000e018 	.word	0xe000e018
 8007e74:	20000004 	.word	0x20000004
 8007e78:	10624dd3 	.word	0x10624dd3
 8007e7c:	e000e014 	.word	0xe000e014

08007e80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e86:	f3ef 8305 	mrs	r3, IPSR
 8007e8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b0f      	cmp	r3, #15
 8007e90:	d914      	bls.n	8007ebc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e92:	4a16      	ldr	r2, [pc, #88]	; (8007eec <vPortValidateInterruptPriority+0x6c>)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e9c:	4b14      	ldr	r3, [pc, #80]	; (8007ef0 <vPortValidateInterruptPriority+0x70>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	7afa      	ldrb	r2, [r7, #11]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d20a      	bcs.n	8007ebc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	607b      	str	r3, [r7, #4]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <vPortValidateInterruptPriority+0x74>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <vPortValidateInterruptPriority+0x78>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d90a      	bls.n	8007ee2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	603b      	str	r3, [r7, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <vPortValidateInterruptPriority+0x60>
	}
 8007ee2:	bf00      	nop
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr
 8007eec:	e000e3f0 	.word	0xe000e3f0
 8007ef0:	20000fd4 	.word	0x20000fd4
 8007ef4:	e000ed0c 	.word	0xe000ed0c
 8007ef8:	20000fd8 	.word	0x20000fd8

08007efc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08a      	sub	sp, #40	; 0x28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f08:	f7fe fe22 	bl	8006b50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f0c:	4b58      	ldr	r3, [pc, #352]	; (8008070 <pvPortMalloc+0x174>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f14:	f000 f910 	bl	8008138 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f18:	4b56      	ldr	r3, [pc, #344]	; (8008074 <pvPortMalloc+0x178>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f040 808e 	bne.w	8008042 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01d      	beq.n	8007f68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f2c:	2208      	movs	r2, #8
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4413      	add	r3, r2
 8007f32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d014      	beq.n	8007f68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f023 0307 	bic.w	r3, r3, #7
 8007f44:	3308      	adds	r3, #8
 8007f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <pvPortMalloc+0x6c>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	617b      	str	r3, [r7, #20]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d069      	beq.n	8008042 <pvPortMalloc+0x146>
 8007f6e:	4b42      	ldr	r3, [pc, #264]	; (8008078 <pvPortMalloc+0x17c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d864      	bhi.n	8008042 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f78:	4b40      	ldr	r3, [pc, #256]	; (800807c <pvPortMalloc+0x180>)
 8007f7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f7c:	4b3f      	ldr	r3, [pc, #252]	; (800807c <pvPortMalloc+0x180>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f82:	e004      	b.n	8007f8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d903      	bls.n	8007fa0 <pvPortMalloc+0xa4>
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f1      	bne.n	8007f84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fa0:	4b33      	ldr	r3, [pc, #204]	; (8008070 <pvPortMalloc+0x174>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d04b      	beq.n	8008042 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2208      	movs	r2, #8
 8007fb0:	4413      	add	r3, r2
 8007fb2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d91f      	bls.n	800800c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <pvPortMalloc+0xf8>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	613b      	str	r3, [r7, #16]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	1ad2      	subs	r2, r2, r3
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008006:	69b8      	ldr	r0, [r7, #24]
 8008008:	f000 f8f8 	bl	80081fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800800c:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <pvPortMalloc+0x17c>)
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	4a18      	ldr	r2, [pc, #96]	; (8008078 <pvPortMalloc+0x17c>)
 8008018:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800801a:	4b17      	ldr	r3, [pc, #92]	; (8008078 <pvPortMalloc+0x17c>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b18      	ldr	r3, [pc, #96]	; (8008080 <pvPortMalloc+0x184>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d203      	bcs.n	800802e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008026:	4b14      	ldr	r3, [pc, #80]	; (8008078 <pvPortMalloc+0x17c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a15      	ldr	r2, [pc, #84]	; (8008080 <pvPortMalloc+0x184>)
 800802c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	4b10      	ldr	r3, [pc, #64]	; (8008074 <pvPortMalloc+0x178>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	431a      	orrs	r2, r3
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008042:	f7fe fd93 	bl	8006b6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <pvPortMalloc+0x16a>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <pvPortMalloc+0x168>
	return pvReturn;
 8008066:	69fb      	ldr	r3, [r7, #28]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3728      	adds	r7, #40	; 0x28
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20002b3c 	.word	0x20002b3c
 8008074:	20002b48 	.word	0x20002b48
 8008078:	20002b40 	.word	0x20002b40
 800807c:	20002b34 	.word	0x20002b34
 8008080:	20002b44 	.word	0x20002b44

08008084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d048      	beq.n	8008128 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008096:	2308      	movs	r3, #8
 8008098:	425b      	negs	r3, r3
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4413      	add	r3, r2
 800809e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	4b21      	ldr	r3, [pc, #132]	; (8008130 <vPortFree+0xac>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <vPortFree+0x44>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60fb      	str	r3, [r7, #12]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00a      	beq.n	80080e6 <vPortFree+0x62>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60bb      	str	r3, [r7, #8]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	4b11      	ldr	r3, [pc, #68]	; (8008130 <vPortFree+0xac>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d019      	beq.n	8008128 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d115      	bne.n	8008128 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <vPortFree+0xac>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	43db      	mvns	r3, r3
 8008106:	401a      	ands	r2, r3
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800810c:	f7fe fd20 	bl	8006b50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	4b07      	ldr	r3, [pc, #28]	; (8008134 <vPortFree+0xb0>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4413      	add	r3, r2
 800811a:	4a06      	ldr	r2, [pc, #24]	; (8008134 <vPortFree+0xb0>)
 800811c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800811e:	6938      	ldr	r0, [r7, #16]
 8008120:	f000 f86c 	bl	80081fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008124:	f7fe fd22 	bl	8006b6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008128:	bf00      	nop
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20002b48 	.word	0x20002b48
 8008134:	20002b40 	.word	0x20002b40

08008138 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800813e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8008142:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008144:	4b27      	ldr	r3, [pc, #156]	; (80081e4 <prvHeapInit+0xac>)
 8008146:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3307      	adds	r3, #7
 8008156:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0307 	bic.w	r3, r3, #7
 800815e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	4a1f      	ldr	r2, [pc, #124]	; (80081e4 <prvHeapInit+0xac>)
 8008168:	4413      	add	r3, r2
 800816a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008170:	4a1d      	ldr	r2, [pc, #116]	; (80081e8 <prvHeapInit+0xb0>)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008176:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <prvHeapInit+0xb0>)
 8008178:	2200      	movs	r2, #0
 800817a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	4413      	add	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008184:	2208      	movs	r2, #8
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0307 	bic.w	r3, r3, #7
 8008192:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a15      	ldr	r2, [pc, #84]	; (80081ec <prvHeapInit+0xb4>)
 8008198:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800819a:	4b14      	ldr	r3, [pc, #80]	; (80081ec <prvHeapInit+0xb4>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2200      	movs	r2, #0
 80081a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081a2:	4b12      	ldr	r3, [pc, #72]	; (80081ec <prvHeapInit+0xb4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	1ad2      	subs	r2, r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <prvHeapInit+0xb4>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	4a0a      	ldr	r2, [pc, #40]	; (80081f0 <prvHeapInit+0xb8>)
 80081c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <prvHeapInit+0xbc>)
 80081ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081d0:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <prvHeapInit+0xc0>)
 80081d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081d6:	601a      	str	r2, [r3, #0]
}
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000fdc 	.word	0x20000fdc
 80081e8:	20002b34 	.word	0x20002b34
 80081ec:	20002b3c 	.word	0x20002b3c
 80081f0:	20002b44 	.word	0x20002b44
 80081f4:	20002b40 	.word	0x20002b40
 80081f8:	20002b48 	.word	0x20002b48

080081fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008204:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <prvInsertBlockIntoFreeList+0xa8>)
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	e002      	b.n	8008210 <prvInsertBlockIntoFreeList+0x14>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d8f7      	bhi.n	800820a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	4413      	add	r3, r2
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	429a      	cmp	r2, r3
 800822a:	d108      	bne.n	800823e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	441a      	add	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	441a      	add	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d118      	bne.n	8008284 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <prvInsertBlockIntoFreeList+0xac>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d00d      	beq.n	800827a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	441a      	add	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	e008      	b.n	800828c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <prvInsertBlockIntoFreeList+0xac>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e003      	b.n	800828c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	d002      	beq.n	800829a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800829a:	bf00      	nop
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr
 80082a4:	20002b34 	.word	0x20002b34
 80082a8:	20002b3c 	.word	0x20002b3c

080082ac <__libc_init_array>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	2600      	movs	r6, #0
 80082b0:	4d0c      	ldr	r5, [pc, #48]	; (80082e4 <__libc_init_array+0x38>)
 80082b2:	4c0d      	ldr	r4, [pc, #52]	; (80082e8 <__libc_init_array+0x3c>)
 80082b4:	1b64      	subs	r4, r4, r5
 80082b6:	10a4      	asrs	r4, r4, #2
 80082b8:	42a6      	cmp	r6, r4
 80082ba:	d109      	bne.n	80082d0 <__libc_init_array+0x24>
 80082bc:	f000 f8f0 	bl	80084a0 <_init>
 80082c0:	2600      	movs	r6, #0
 80082c2:	4d0a      	ldr	r5, [pc, #40]	; (80082ec <__libc_init_array+0x40>)
 80082c4:	4c0a      	ldr	r4, [pc, #40]	; (80082f0 <__libc_init_array+0x44>)
 80082c6:	1b64      	subs	r4, r4, r5
 80082c8:	10a4      	asrs	r4, r4, #2
 80082ca:	42a6      	cmp	r6, r4
 80082cc:	d105      	bne.n	80082da <__libc_init_array+0x2e>
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d4:	4798      	blx	r3
 80082d6:	3601      	adds	r6, #1
 80082d8:	e7ee      	b.n	80082b8 <__libc_init_array+0xc>
 80082da:	f855 3b04 	ldr.w	r3, [r5], #4
 80082de:	4798      	blx	r3
 80082e0:	3601      	adds	r6, #1
 80082e2:	e7f2      	b.n	80082ca <__libc_init_array+0x1e>
 80082e4:	080086bc 	.word	0x080086bc
 80082e8:	080086bc 	.word	0x080086bc
 80082ec:	080086bc 	.word	0x080086bc
 80082f0:	080086c0 	.word	0x080086c0

080082f4 <__retarget_lock_acquire_recursive>:
 80082f4:	4770      	bx	lr

080082f6 <__retarget_lock_release_recursive>:
 80082f6:	4770      	bx	lr

080082f8 <memcpy>:
 80082f8:	440a      	add	r2, r1
 80082fa:	4291      	cmp	r1, r2
 80082fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008300:	d100      	bne.n	8008304 <memcpy+0xc>
 8008302:	4770      	bx	lr
 8008304:	b510      	push	{r4, lr}
 8008306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830a:	4291      	cmp	r1, r2
 800830c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008310:	d1f9      	bne.n	8008306 <memcpy+0xe>
 8008312:	bd10      	pop	{r4, pc}

08008314 <memset>:
 8008314:	4603      	mov	r3, r0
 8008316:	4402      	add	r2, r0
 8008318:	4293      	cmp	r3, r2
 800831a:	d100      	bne.n	800831e <memset+0xa>
 800831c:	4770      	bx	lr
 800831e:	f803 1b01 	strb.w	r1, [r3], #1
 8008322:	e7f9      	b.n	8008318 <memset+0x4>

08008324 <cleanup_glue>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	460c      	mov	r4, r1
 8008328:	6809      	ldr	r1, [r1, #0]
 800832a:	4605      	mov	r5, r0
 800832c:	b109      	cbz	r1, 8008332 <cleanup_glue+0xe>
 800832e:	f7ff fff9 	bl	8008324 <cleanup_glue>
 8008332:	4621      	mov	r1, r4
 8008334:	4628      	mov	r0, r5
 8008336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800833a:	f000 b869 	b.w	8008410 <_free_r>
	...

08008340 <_reclaim_reent>:
 8008340:	4b2c      	ldr	r3, [pc, #176]	; (80083f4 <_reclaim_reent+0xb4>)
 8008342:	b570      	push	{r4, r5, r6, lr}
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4604      	mov	r4, r0
 8008348:	4283      	cmp	r3, r0
 800834a:	d051      	beq.n	80083f0 <_reclaim_reent+0xb0>
 800834c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800834e:	b143      	cbz	r3, 8008362 <_reclaim_reent+0x22>
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d14a      	bne.n	80083ec <_reclaim_reent+0xac>
 8008356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008358:	6819      	ldr	r1, [r3, #0]
 800835a:	b111      	cbz	r1, 8008362 <_reclaim_reent+0x22>
 800835c:	4620      	mov	r0, r4
 800835e:	f000 f857 	bl	8008410 <_free_r>
 8008362:	6961      	ldr	r1, [r4, #20]
 8008364:	b111      	cbz	r1, 800836c <_reclaim_reent+0x2c>
 8008366:	4620      	mov	r0, r4
 8008368:	f000 f852 	bl	8008410 <_free_r>
 800836c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800836e:	b111      	cbz	r1, 8008376 <_reclaim_reent+0x36>
 8008370:	4620      	mov	r0, r4
 8008372:	f000 f84d 	bl	8008410 <_free_r>
 8008376:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008378:	b111      	cbz	r1, 8008380 <_reclaim_reent+0x40>
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f848 	bl	8008410 <_free_r>
 8008380:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008382:	b111      	cbz	r1, 800838a <_reclaim_reent+0x4a>
 8008384:	4620      	mov	r0, r4
 8008386:	f000 f843 	bl	8008410 <_free_r>
 800838a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800838c:	b111      	cbz	r1, 8008394 <_reclaim_reent+0x54>
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f83e 	bl	8008410 <_free_r>
 8008394:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008396:	b111      	cbz	r1, 800839e <_reclaim_reent+0x5e>
 8008398:	4620      	mov	r0, r4
 800839a:	f000 f839 	bl	8008410 <_free_r>
 800839e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80083a0:	b111      	cbz	r1, 80083a8 <_reclaim_reent+0x68>
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f834 	bl	8008410 <_free_r>
 80083a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083aa:	b111      	cbz	r1, 80083b2 <_reclaim_reent+0x72>
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 f82f 	bl	8008410 <_free_r>
 80083b2:	69a3      	ldr	r3, [r4, #24]
 80083b4:	b1e3      	cbz	r3, 80083f0 <_reclaim_reent+0xb0>
 80083b6:	4620      	mov	r0, r4
 80083b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083ba:	4798      	blx	r3
 80083bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80083be:	b1b9      	cbz	r1, 80083f0 <_reclaim_reent+0xb0>
 80083c0:	4620      	mov	r0, r4
 80083c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083c6:	f7ff bfad 	b.w	8008324 <cleanup_glue>
 80083ca:	5949      	ldr	r1, [r1, r5]
 80083cc:	b941      	cbnz	r1, 80083e0 <_reclaim_reent+0xa0>
 80083ce:	3504      	adds	r5, #4
 80083d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d2:	2d80      	cmp	r5, #128	; 0x80
 80083d4:	68d9      	ldr	r1, [r3, #12]
 80083d6:	d1f8      	bne.n	80083ca <_reclaim_reent+0x8a>
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 f819 	bl	8008410 <_free_r>
 80083de:	e7ba      	b.n	8008356 <_reclaim_reent+0x16>
 80083e0:	680e      	ldr	r6, [r1, #0]
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 f814 	bl	8008410 <_free_r>
 80083e8:	4631      	mov	r1, r6
 80083ea:	e7ef      	b.n	80083cc <_reclaim_reent+0x8c>
 80083ec:	2500      	movs	r5, #0
 80083ee:	e7ef      	b.n	80083d0 <_reclaim_reent+0x90>
 80083f0:	bd70      	pop	{r4, r5, r6, pc}
 80083f2:	bf00      	nop
 80083f4:	20000014 	.word	0x20000014

080083f8 <__malloc_lock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__malloc_lock+0x8>)
 80083fa:	f7ff bf7b 	b.w	80082f4 <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	20002b4c 	.word	0x20002b4c

08008404 <__malloc_unlock>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__malloc_unlock+0x8>)
 8008406:	f7ff bf76 	b.w	80082f6 <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	20002b4c 	.word	0x20002b4c

08008410 <_free_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4605      	mov	r5, r0
 8008414:	2900      	cmp	r1, #0
 8008416:	d040      	beq.n	800849a <_free_r+0x8a>
 8008418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800841c:	1f0c      	subs	r4, r1, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	bfb8      	it	lt
 8008422:	18e4      	addlt	r4, r4, r3
 8008424:	f7ff ffe8 	bl	80083f8 <__malloc_lock>
 8008428:	4a1c      	ldr	r2, [pc, #112]	; (800849c <_free_r+0x8c>)
 800842a:	6813      	ldr	r3, [r2, #0]
 800842c:	b933      	cbnz	r3, 800843c <_free_r+0x2c>
 800842e:	6063      	str	r3, [r4, #4]
 8008430:	6014      	str	r4, [r2, #0]
 8008432:	4628      	mov	r0, r5
 8008434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008438:	f7ff bfe4 	b.w	8008404 <__malloc_unlock>
 800843c:	42a3      	cmp	r3, r4
 800843e:	d908      	bls.n	8008452 <_free_r+0x42>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	1821      	adds	r1, r4, r0
 8008444:	428b      	cmp	r3, r1
 8008446:	bf01      	itttt	eq
 8008448:	6819      	ldreq	r1, [r3, #0]
 800844a:	685b      	ldreq	r3, [r3, #4]
 800844c:	1809      	addeq	r1, r1, r0
 800844e:	6021      	streq	r1, [r4, #0]
 8008450:	e7ed      	b.n	800842e <_free_r+0x1e>
 8008452:	461a      	mov	r2, r3
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	b10b      	cbz	r3, 800845c <_free_r+0x4c>
 8008458:	42a3      	cmp	r3, r4
 800845a:	d9fa      	bls.n	8008452 <_free_r+0x42>
 800845c:	6811      	ldr	r1, [r2, #0]
 800845e:	1850      	adds	r0, r2, r1
 8008460:	42a0      	cmp	r0, r4
 8008462:	d10b      	bne.n	800847c <_free_r+0x6c>
 8008464:	6820      	ldr	r0, [r4, #0]
 8008466:	4401      	add	r1, r0
 8008468:	1850      	adds	r0, r2, r1
 800846a:	4283      	cmp	r3, r0
 800846c:	6011      	str	r1, [r2, #0]
 800846e:	d1e0      	bne.n	8008432 <_free_r+0x22>
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	4401      	add	r1, r0
 8008476:	6011      	str	r1, [r2, #0]
 8008478:	6053      	str	r3, [r2, #4]
 800847a:	e7da      	b.n	8008432 <_free_r+0x22>
 800847c:	d902      	bls.n	8008484 <_free_r+0x74>
 800847e:	230c      	movs	r3, #12
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	e7d6      	b.n	8008432 <_free_r+0x22>
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	1821      	adds	r1, r4, r0
 8008488:	428b      	cmp	r3, r1
 800848a:	bf01      	itttt	eq
 800848c:	6819      	ldreq	r1, [r3, #0]
 800848e:	685b      	ldreq	r3, [r3, #4]
 8008490:	1809      	addeq	r1, r1, r0
 8008492:	6021      	streq	r1, [r4, #0]
 8008494:	6063      	str	r3, [r4, #4]
 8008496:	6054      	str	r4, [r2, #4]
 8008498:	e7cb      	b.n	8008432 <_free_r+0x22>
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20002b50 	.word	0x20002b50

080084a0 <_init>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

080084ac <_fini>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr
