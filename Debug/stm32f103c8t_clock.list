
stm32f103c8t_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000cb94  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800cca4  0800cca4  0001cca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d304  0800d304  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d304  0800d304  0001d304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d30c  0800d30c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d30c  0800d30c  0001d30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d310  0800d310  0001d310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800d314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003840  20000084  0800d398  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038c4  0800d398  000238c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd39  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004203  00000000  00000000  0003fde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  00043ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  00045af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa49  00000000  00000000  00047480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8f2  00000000  00000000  00061ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a52d  00000000  00000000  0007f7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119ce8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007938  00000000  00000000  00119d38  2**2
=======
  1 .text         0000d5dc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0800d6ec  0800d6ec  0001d6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de78  0800de78  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800de78  0800de78  0001de78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de80  0800de80  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de80  0800de80  0001de80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de84  0800de84  0001de84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800de88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f6c  20000084  0800df0c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ff0  0800df0c  00023ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200af  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004227  00000000  00000000  0004015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  00044388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a0  00000000  00000000  00045e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa5e  00000000  00000000  00047838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da78  00000000  00000000  00062296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a6dd  00000000  00000000  0007fd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a3eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a48  00000000  00000000  0011a43c  2**2
>>>>>>> e9380fc... optimisation RAM=)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000130:	0800cc8c 	.word	0x0800cc8c
=======
 8000130:	0800d6d4 	.word	0x0800d6d4
>>>>>>> e9380fc... optimisation RAM=)

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
<<<<<<< HEAD
 800014c:	0800cc8c 	.word	0x0800cc8c
=======
 800014c:	0800d6d4 	.word	0x0800d6d4
>>>>>>> e9380fc... optimisation RAM=)

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_f2iz>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000710:	d30f      	bcc.n	8000732 <__aeabi_f2iz+0x2a>
 8000712:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000716:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800071a:	d90d      	bls.n	8000738 <__aeabi_f2iz+0x30>
 800071c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000724:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000728:	fa23 f002 	lsr.w	r0, r3, r2
 800072c:	bf18      	it	ne
 800072e:	4240      	negne	r0, r0
 8000730:	4770      	bx	lr
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	4770      	bx	lr
 8000738:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800073c:	d101      	bne.n	8000742 <__aeabi_f2iz+0x3a>
 800073e:	0242      	lsls	r2, r0, #9
 8000740:	d105      	bne.n	800074e <__aeabi_f2iz+0x46>
 8000742:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000746:	bf08      	it	eq
 8000748:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr

08000754 <__aeabi_ldivmod>:
 8000754:	b97b      	cbnz	r3, 8000776 <__aeabi_ldivmod+0x22>
 8000756:	b972      	cbnz	r2, 8000776 <__aeabi_ldivmod+0x22>
 8000758:	2900      	cmp	r1, #0
 800075a:	bfbe      	ittt	lt
 800075c:	2000      	movlt	r0, #0
 800075e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000762:	e006      	blt.n	8000772 <__aeabi_ldivmod+0x1e>
 8000764:	bf08      	it	eq
 8000766:	2800      	cmpeq	r0, #0
 8000768:	bf1c      	itt	ne
 800076a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800076e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000772:	f000 b9a9 	b.w	8000ac8 <__aeabi_idiv0>
 8000776:	f1ad 0c08 	sub.w	ip, sp, #8
 800077a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800077e:	2900      	cmp	r1, #0
 8000780:	db09      	blt.n	8000796 <__aeabi_ldivmod+0x42>
 8000782:	2b00      	cmp	r3, #0
 8000784:	db1a      	blt.n	80007bc <__aeabi_ldivmod+0x68>
 8000786:	f000 f835 	bl	80007f4 <__udivmoddi4>
 800078a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000792:	b004      	add	sp, #16
 8000794:	4770      	bx	lr
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	db1b      	blt.n	80007d8 <__aeabi_ldivmod+0x84>
 80007a0:	f000 f828 	bl	80007f4 <__udivmoddi4>
 80007a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ac:	b004      	add	sp, #16
 80007ae:	4240      	negs	r0, r0
 80007b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b4:	4252      	negs	r2, r2
 80007b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007ba:	4770      	bx	lr
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	f000 f817 	bl	80007f4 <__udivmoddi4>
 80007c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ce:	b004      	add	sp, #16
 80007d0:	4240      	negs	r0, r0
 80007d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d6:	4770      	bx	lr
 80007d8:	4252      	negs	r2, r2
 80007da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007de:	f000 f809 	bl	80007f4 <__udivmoddi4>
 80007e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ea:	b004      	add	sp, #16
 80007ec:	4252      	negs	r2, r2
 80007ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f2:	4770      	bx	lr

080007f4 <__udivmoddi4>:
 80007f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007f8:	9e08      	ldr	r6, [sp, #32]
 80007fa:	460d      	mov	r5, r1
 80007fc:	4604      	mov	r4, r0
 80007fe:	4688      	mov	r8, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14d      	bne.n	80008a0 <__udivmoddi4+0xac>
 8000804:	428a      	cmp	r2, r1
 8000806:	4694      	mov	ip, r2
 8000808:	d968      	bls.n	80008dc <__udivmoddi4+0xe8>
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	b152      	cbz	r2, 8000826 <__udivmoddi4+0x32>
 8000810:	fa01 f302 	lsl.w	r3, r1, r2
 8000814:	f1c2 0120 	rsb	r1, r2, #32
 8000818:	fa20 f101 	lsr.w	r1, r0, r1
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	ea41 0803 	orr.w	r8, r1, r3
 8000824:	4094      	lsls	r4, r2
 8000826:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800082a:	fbb8 f7f1 	udiv	r7, r8, r1
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	fb01 8817 	mls	r8, r1, r7, r8
 8000836:	fb07 f00e 	mul.w	r0, r7, lr
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000840:	4298      	cmp	r0, r3
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x66>
 8000844:	eb1c 0303 	adds.w	r3, ip, r3
 8000848:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 800084c:	f080 811e 	bcs.w	8000a8c <__udivmoddi4+0x298>
 8000850:	4298      	cmp	r0, r3
 8000852:	f240 811b 	bls.w	8000a8c <__udivmoddi4+0x298>
 8000856:	3f02      	subs	r7, #2
 8000858:	4463      	add	r3, ip
 800085a:	1a1b      	subs	r3, r3, r0
 800085c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000860:	fb01 3310 	mls	r3, r1, r0, r3
 8000864:	fb00 fe0e 	mul.w	lr, r0, lr
 8000868:	b2a4      	uxth	r4, r4
 800086a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086e:	45a6      	cmp	lr, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x94>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800087a:	f080 8109 	bcs.w	8000a90 <__udivmoddi4+0x29c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f240 8106 	bls.w	8000a90 <__udivmoddi4+0x29c>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	2100      	movs	r1, #0
 800088a:	eba4 040e 	sub.w	r4, r4, lr
 800088e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000892:	b11e      	cbz	r6, 800089c <__udivmoddi4+0xa8>
 8000894:	2300      	movs	r3, #0
 8000896:	40d4      	lsrs	r4, r2
 8000898:	e9c6 4300 	strd	r4, r3, [r6]
 800089c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a0:	428b      	cmp	r3, r1
 80008a2:	d908      	bls.n	80008b6 <__udivmoddi4+0xc2>
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	f000 80ee 	beq.w	8000a86 <__udivmoddi4+0x292>
 80008aa:	2100      	movs	r1, #0
 80008ac:	e9c6 0500 	strd	r0, r5, [r6]
 80008b0:	4608      	mov	r0, r1
 80008b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b6:	fab3 f183 	clz	r1, r3
 80008ba:	2900      	cmp	r1, #0
 80008bc:	d14a      	bne.n	8000954 <__udivmoddi4+0x160>
 80008be:	42ab      	cmp	r3, r5
 80008c0:	d302      	bcc.n	80008c8 <__udivmoddi4+0xd4>
 80008c2:	4282      	cmp	r2, r0
 80008c4:	f200 80fc 	bhi.w	8000ac0 <__udivmoddi4+0x2cc>
 80008c8:	1a84      	subs	r4, r0, r2
 80008ca:	eb65 0303 	sbc.w	r3, r5, r3
 80008ce:	2001      	movs	r0, #1
 80008d0:	4698      	mov	r8, r3
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d0e2      	beq.n	800089c <__udivmoddi4+0xa8>
 80008d6:	e9c6 4800 	strd	r4, r8, [r6]
 80008da:	e7df      	b.n	800089c <__udivmoddi4+0xa8>
 80008dc:	b902      	cbnz	r2, 80008e0 <__udivmoddi4+0xec>
 80008de:	deff      	udf	#255	; 0xff
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	f040 8091 	bne.w	8000a0c <__udivmoddi4+0x218>
 80008ea:	eba1 000c 	sub.w	r0, r1, ip
 80008ee:	2101      	movs	r1, #1
 80008f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f4:	fa1f fe8c 	uxth.w	lr, ip
 80008f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80008fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000900:	0c25      	lsrs	r5, r4, #16
 8000902:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000906:	fb0e f003 	mul.w	r0, lr, r3
 800090a:	42a8      	cmp	r0, r5
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x12c>
 800090e:	eb1c 0505 	adds.w	r5, ip, r5
 8000912:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x12a>
 8000918:	42a8      	cmp	r0, r5
 800091a:	f200 80ce 	bhi.w	8000aba <__udivmoddi4+0x2c6>
 800091e:	4643      	mov	r3, r8
 8000920:	1a2d      	subs	r5, r5, r0
 8000922:	fbb5 f0f7 	udiv	r0, r5, r7
 8000926:	fb07 5510 	mls	r5, r7, r0, r5
 800092a:	fb0e fe00 	mul.w	lr, lr, r0
 800092e:	b2a4      	uxth	r4, r4
 8000930:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000934:	45a6      	cmp	lr, r4
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x156>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x154>
 8000942:	45a6      	cmp	lr, r4
 8000944:	f200 80b6 	bhi.w	8000ab4 <__udivmoddi4+0x2c0>
 8000948:	4628      	mov	r0, r5
 800094a:	eba4 040e 	sub.w	r4, r4, lr
 800094e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000952:	e79e      	b.n	8000892 <__udivmoddi4+0x9e>
 8000954:	f1c1 0720 	rsb	r7, r1, #32
 8000958:	408b      	lsls	r3, r1
 800095a:	fa22 fc07 	lsr.w	ip, r2, r7
 800095e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000962:	fa25 fa07 	lsr.w	sl, r5, r7
 8000966:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096a:	fbba f8f9 	udiv	r8, sl, r9
 800096e:	fa20 f307 	lsr.w	r3, r0, r7
 8000972:	fb09 aa18 	mls	sl, r9, r8, sl
 8000976:	408d      	lsls	r5, r1
 8000978:	fa1f fe8c 	uxth.w	lr, ip
 800097c:	431d      	orrs	r5, r3
 800097e:	fa00 f301 	lsl.w	r3, r0, r1
 8000982:	fb08 f00e 	mul.w	r0, r8, lr
 8000986:	0c2c      	lsrs	r4, r5, #16
 8000988:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800098c:	42a0      	cmp	r0, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	d90b      	bls.n	80009ac <__udivmoddi4+0x1b8>
 8000994:	eb1c 0404 	adds.w	r4, ip, r4
 8000998:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800099c:	f080 8088 	bcs.w	8000ab0 <__udivmoddi4+0x2bc>
 80009a0:	42a0      	cmp	r0, r4
 80009a2:	f240 8085 	bls.w	8000ab0 <__udivmoddi4+0x2bc>
 80009a6:	f1a8 0802 	sub.w	r8, r8, #2
 80009aa:	4464      	add	r4, ip
 80009ac:	1a24      	subs	r4, r4, r0
 80009ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80009b2:	fb09 4410 	mls	r4, r9, r0, r4
 80009b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c0:	45a6      	cmp	lr, r4
 80009c2:	d908      	bls.n	80009d6 <__udivmoddi4+0x1e2>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80009cc:	d26c      	bcs.n	8000aa8 <__udivmoddi4+0x2b4>
 80009ce:	45a6      	cmp	lr, r4
 80009d0:	d96a      	bls.n	8000aa8 <__udivmoddi4+0x2b4>
 80009d2:	3802      	subs	r0, #2
 80009d4:	4464      	add	r4, ip
 80009d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009da:	fba0 9502 	umull	r9, r5, r0, r2
 80009de:	eba4 040e 	sub.w	r4, r4, lr
 80009e2:	42ac      	cmp	r4, r5
 80009e4:	46c8      	mov	r8, r9
 80009e6:	46ae      	mov	lr, r5
 80009e8:	d356      	bcc.n	8000a98 <__udivmoddi4+0x2a4>
 80009ea:	d053      	beq.n	8000a94 <__udivmoddi4+0x2a0>
 80009ec:	2e00      	cmp	r6, #0
 80009ee:	d069      	beq.n	8000ac4 <__udivmoddi4+0x2d0>
 80009f0:	ebb3 0208 	subs.w	r2, r3, r8
 80009f4:	eb64 040e 	sbc.w	r4, r4, lr
 80009f8:	fa22 f301 	lsr.w	r3, r2, r1
 80009fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000a00:	431f      	orrs	r7, r3
 8000a02:	40cc      	lsrs	r4, r1
 8000a04:	e9c6 7400 	strd	r7, r4, [r6]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	e747      	b.n	800089c <__udivmoddi4+0xa8>
 8000a0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a10:	f1c2 0120 	rsb	r1, r2, #32
 8000a14:	fa25 f301 	lsr.w	r3, r5, r1
 8000a18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000a20:	4095      	lsls	r5, r2
 8000a22:	430d      	orrs	r5, r1
 8000a24:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a28:	fb07 3311 	mls	r3, r7, r1, r3
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	0c28      	lsrs	r0, r5, #16
 8000a32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a36:	fb01 f30e 	mul.w	r3, r1, lr
 8000a3a:	4283      	cmp	r3, r0
 8000a3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x260>
 8000a42:	eb1c 0000 	adds.w	r0, ip, r0
 8000a46:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000a4a:	d22f      	bcs.n	8000aac <__udivmoddi4+0x2b8>
 8000a4c:	4283      	cmp	r3, r0
 8000a4e:	d92d      	bls.n	8000aac <__udivmoddi4+0x2b8>
 8000a50:	3902      	subs	r1, #2
 8000a52:	4460      	add	r0, ip
 8000a54:	1ac0      	subs	r0, r0, r3
 8000a56:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a5a:	fb07 0013 	mls	r0, r7, r3, r0
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a64:	fb03 f00e 	mul.w	r0, r3, lr
 8000a68:	42a8      	cmp	r0, r5
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x28a>
 8000a6c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a70:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a74:	d216      	bcs.n	8000aa4 <__udivmoddi4+0x2b0>
 8000a76:	42a8      	cmp	r0, r5
 8000a78:	d914      	bls.n	8000aa4 <__udivmoddi4+0x2b0>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	4465      	add	r5, ip
 8000a7e:	1a28      	subs	r0, r5, r0
 8000a80:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a84:	e738      	b.n	80008f8 <__udivmoddi4+0x104>
 8000a86:	4631      	mov	r1, r6
 8000a88:	4630      	mov	r0, r6
 8000a8a:	e707      	b.n	800089c <__udivmoddi4+0xa8>
 8000a8c:	462f      	mov	r7, r5
 8000a8e:	e6e4      	b.n	800085a <__udivmoddi4+0x66>
 8000a90:	4618      	mov	r0, r3
 8000a92:	e6f9      	b.n	8000888 <__udivmoddi4+0x94>
 8000a94:	454b      	cmp	r3, r9
 8000a96:	d2a9      	bcs.n	80009ec <__udivmoddi4+0x1f8>
 8000a98:	ebb9 0802 	subs.w	r8, r9, r2
 8000a9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e7a3      	b.n	80009ec <__udivmoddi4+0x1f8>
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	e7ea      	b.n	8000a7e <__udivmoddi4+0x28a>
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	e794      	b.n	80009d6 <__udivmoddi4+0x1e2>
 8000aac:	4641      	mov	r1, r8
 8000aae:	e7d1      	b.n	8000a54 <__udivmoddi4+0x260>
 8000ab0:	46d0      	mov	r8, sl
 8000ab2:	e77b      	b.n	80009ac <__udivmoddi4+0x1b8>
 8000ab4:	4464      	add	r4, ip
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	e747      	b.n	800094a <__udivmoddi4+0x156>
 8000aba:	3b02      	subs	r3, #2
 8000abc:	4465      	add	r5, ip
 8000abe:	e72f      	b.n	8000920 <__udivmoddi4+0x12c>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e706      	b.n	80008d2 <__udivmoddi4+0xde>
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e6e9      	b.n	800089c <__udivmoddi4+0xa8>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000b00:	887a      	ldrh	r2, [r7, #2]
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fbe4 	bl	80002d4 <__aeabi_i2f>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fdcf 	bl	80006b8 <__aeabi_fcmplt>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000b20:	2301      	movs	r3, #1
 8000b22:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8000b2a:	883a      	ldrh	r2, [r7, #0]
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fbcf 	bl	80002d4 <__aeabi_i2f>
 8000b36:	4603      	mov	r3, r0
 8000b38:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000b3a:	f04f 0100 	mov.w	r1, #0
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff fdba 	bl	80006b8 <__aeabi_fcmplt>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000b4e:	7cfb      	ldrb	r3, [r7, #19]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d104      	bne.n	8000b5e <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8000b54:	887a      	ldrh	r2, [r7, #2]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	82fb      	strh	r3, [r7, #22]
 8000b5c:	e003      	b.n	8000b66 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8000b66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b68:	8afa      	ldrh	r2, [r7, #22]
 8000b6a:	88b9      	ldrh	r1, [r7, #4]
 8000b6c:	88f8      	ldrh	r0, [r7, #6]
 8000b6e:	f000 fd35 	bl	80015dc <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8000b72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b74:	8afa      	ldrh	r2, [r7, #22]
 8000b76:	8839      	ldrh	r1, [r7, #0]
 8000b78:	88f8      	ldrh	r0, [r7, #6]
 8000b7a:	f000 fd2f 	bl	80015dc <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000b7e:	7cbb      	ldrb	r3, [r7, #18]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8000b84:	883a      	ldrh	r2, [r7, #0]
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	82bb      	strh	r3, [r7, #20]
 8000b8c:	e003      	b.n	8000b96 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8000b8e:	88ba      	ldrh	r2, [r7, #4]
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8000b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b98:	8aba      	ldrh	r2, [r7, #20]
 8000b9a:	88b9      	ldrh	r1, [r7, #4]
 8000b9c:	88f8      	ldrh	r0, [r7, #6]
 8000b9e:	f000 fd61 	bl	8001664 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8000ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ba4:	8aba      	ldrh	r2, [r7, #20]
 8000ba6:	88b9      	ldrh	r1, [r7, #4]
 8000ba8:	8878      	ldrh	r0, [r7, #2]
 8000baa:	f000 fd5b 	bl	8001664 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8000bae:	8afb      	ldrh	r3, [r7, #22]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8000bb4:	8abb      	ldrh	r3, [r7, #20]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d005      	beq.n	8000bc6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8000bba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000bbc:	8839      	ldrh	r1, [r7, #0]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fbd3 	bl	800136c <ILI9341_Draw_Pixel>
	}
	
}
 8000bc6:	bf00      	nop
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}
	...

08000bd0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4623      	mov	r3, r4
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	4603      	mov	r3, r0
 8000be4:	71bb      	strb	r3, [r7, #6]
 8000be6:	460b      	mov	r3, r1
 8000be8:	717b      	strb	r3, [r7, #5]
 8000bea:	4613      	mov	r3, r2
 8000bec:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	2b1f      	cmp	r3, #31
 8000bf6:	d802      	bhi.n	8000bfe <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	e002      	b.n	8000c04 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	3b20      	subs	r3, #32
 8000c02:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	753b      	strb	r3, [r7, #20]
 8000c08:	e012      	b.n	8000c30 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000c0a:	7dfa      	ldrb	r2, [r7, #23]
 8000c0c:	7d38      	ldrb	r0, [r7, #20]
 8000c0e:	7d39      	ldrb	r1, [r7, #20]
 8000c10:	4c3b      	ldr	r4, [pc, #236]	; (8000d00 <ILI9341_Draw_Char+0x130>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4423      	add	r3, r4
 8000c1c:	4403      	add	r3, r0
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	f101 0318 	add.w	r3, r1, #24
 8000c24:	443b      	add	r3, r7
 8000c26:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000c2a:	7d3b      	ldrb	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	753b      	strb	r3, [r7, #20]
 8000c30:	7d3b      	ldrb	r3, [r7, #20]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d9e9      	bls.n	8000c0a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	b298      	uxth	r0, r3
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c40:	461a      	mov	r2, r3
 8000c42:	0052      	lsls	r2, r2, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	b29c      	uxth	r4, r3
 8000c50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	4623      	mov	r3, r4
 8000c56:	f000 fc65 	bl	8001524 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	757b      	strb	r3, [r7, #21]
 8000c5e:	e047      	b.n	8000cf0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	75bb      	strb	r3, [r7, #22]
 8000c64:	e03e      	b.n	8000ce4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8000c66:	7d7b      	ldrb	r3, [r7, #21]
 8000c68:	3318      	adds	r3, #24
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c70:	461a      	mov	r2, r3
 8000c72:	7dbb      	ldrb	r3, [r7, #22]
 8000c74:	fa42 f303 	asr.w	r3, r2, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d02e      	beq.n	8000cde <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d110      	bne.n	8000ca8 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	7d7b      	ldrb	r3, [r7, #21]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b298      	uxth	r0, r3
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	7dbb      	ldrb	r3, [r7, #22]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f000 fb63 	bl	800136c <ILI9341_Draw_Pixel>
 8000ca6:	e01a      	b.n	8000cde <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	7d7b      	ldrb	r3, [r7, #21]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000cb2:	fb01 f303 	mul.w	r3, r1, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	b298      	uxth	r0, r3
 8000cbc:	797b      	ldrb	r3, [r7, #5]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	7dbb      	ldrb	r3, [r7, #22]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000cc6:	fb01 f303 	mul.w	r3, r1, r3
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4413      	add	r3, r2
 8000cce:	b299      	uxth	r1, r3
 8000cd0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000cd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4623      	mov	r3, r4
 8000cda:	f000 fc23 	bl	8001524 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000cde:	7dbb      	ldrb	r3, [r7, #22]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	75bb      	strb	r3, [r7, #22]
 8000ce4:	7dbb      	ldrb	r3, [r7, #22]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d9bd      	bls.n	8000c66 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000cea:	7d7b      	ldrb	r3, [r7, #21]
 8000cec:	3301      	adds	r3, #1
 8000cee:	757b      	strb	r3, [r7, #21]
 8000cf0:	7d7b      	ldrb	r3, [r7, #21]
 8000cf2:	2b05      	cmp	r3, #5
 8000cf4:	d9b4      	bls.n	8000c60 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd90      	pop	{r4, r7, pc}
<<<<<<< HEAD
 8000d00:	0800ce88 	.word	0x0800ce88
=======
 8000d00:	0800d99c 	.word	0x0800d99c
>>>>>>> e9380fc... optimisation RAM=)

08000d04 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	4611      	mov	r1, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	70fb      	strb	r3, [r7, #3]
 8000d16:	460b      	mov	r3, r1
 8000d18:	70bb      	strb	r3, [r7, #2]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000d1e:	e017      	b.n	8000d50 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	7818      	ldrb	r0, [r3, #0]
 8000d28:	883c      	ldrh	r4, [r7, #0]
 8000d2a:	78ba      	ldrb	r2, [r7, #2]
 8000d2c:	78f9      	ldrb	r1, [r7, #3]
 8000d2e:	8bbb      	ldrh	r3, [r7, #28]
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	8b3b      	ldrh	r3, [r7, #24]
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	4623      	mov	r3, r4
 8000d38:	f7ff ff4a 	bl	8000bd0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000d3c:	8b3b      	ldrh	r3, [r7, #24]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	0052      	lsls	r2, r2, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	78fb      	ldrb	r3, [r7, #3]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e3      	bne.n	8000d20 <ILI9341_Draw_Text+0x1c>
    }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd90      	pop	{r4, r7, pc}
	...

08000d64 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
//MX_SPI1_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <ILI9341_SPI_Init+0x14>)
<<<<<<< HEAD
 8000d70:	f003 fff3 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8000d70:	f004 f94f 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(&hspi1, &SPI_Data, 1, 1);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <ILI9341_SPI_Send+0x20>)
<<<<<<< HEAD
 8000d8e:	f006 f9a9 	bl	80070e4 <HAL_SPI_Transmit>
=======
 8000d8e:	f006 fb05 	bl	800739c <HAL_SPI_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
<<<<<<< HEAD
 8000d9c:	20000100 	.word	0x20000100
=======
 8000d9c:	200002fc 	.word	0x200002fc
>>>>>>> e9380fc... optimisation RAM=)

08000da0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <ILI9341_Write_Command+0x40>)
<<<<<<< HEAD
 8000db2:	f003 ffd2 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8000db2:	f004 f92e 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <ILI9341_Write_Command+0x44>)
<<<<<<< HEAD
 8000dbe:	f003 ffcc 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8000dbe:	f004 f928 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
ILI9341_SPI_Send(Command);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffd9 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <ILI9341_Write_Command+0x40>)
<<<<<<< HEAD
 8000dd2:	f003 ffc2 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8000dd2:	f004 f91e 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40010800 	.word	0x40010800

08000de8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <ILI9341_Write_Data+0x40>)
<<<<<<< HEAD
 8000dfa:	f003 ffae 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8000dfa:	f004 f90a 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <ILI9341_Write_Data+0x44>)
<<<<<<< HEAD
 8000e06:	f003 ffa8 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8000e06:	f004 f904 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
ILI9341_SPI_Send(Data);	
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffb5 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <ILI9341_Write_Data+0x44>)
<<<<<<< HEAD
 8000e1a:	f003 ff9e 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8000e1a:	f004 f8fa 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010800 	.word	0x40010800
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000e4e:	202a      	movs	r0, #42	; 0x2a
 8000e50:	f7ff ffa6 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffc3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffbe 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ffb7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffb2 	bl	8000de8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000e84:	202b      	movs	r0, #43	; 0x2b
 8000e86:	f7ff ff8b 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffa8 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffa3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000ea2:	883b      	ldrh	r3, [r7, #0]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff9c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000eb0:	883b      	ldrh	r3, [r7, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff97 	bl	8000de8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000eba:	202c      	movs	r0, #44	; 0x2c
 8000ebc:	f7ff ff70 	bl	8000da0 <ILI9341_Write_Command>
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <ILI9341_Reset+0x38>)
<<<<<<< HEAD
 8000ed4:	f003 ff41 	bl	8004d5a <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000ed8:	20c8      	movs	r0, #200	; 0xc8
 8000eda:	f003 fbef 	bl	80046bc <HAL_Delay>
=======
 8000ed4:	f004 f89d 	bl	8005012 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000ed8:	20c8      	movs	r0, #200	; 0xc8
 8000eda:	f003 fd4b 	bl	8004974 <HAL_Delay>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <ILI9341_Reset+0x3c>)
<<<<<<< HEAD
 8000ee6:	f003 ff38 	bl	8004d5a <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000eea:	20c8      	movs	r0, #200	; 0xc8
 8000eec:	f003 fbe6 	bl	80046bc <HAL_Delay>
=======
 8000ee6:	f004 f894 	bl	8005012 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000eea:	20c8      	movs	r0, #200	; 0xc8
 8000eec:	f003 fd42 	bl	8004974 <HAL_Delay>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	4802      	ldr	r0, [pc, #8]	; (8000f00 <ILI9341_Reset+0x38>)
<<<<<<< HEAD
 8000ef8:	f003 ff2f 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8000ef8:	f004 f88b 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00

08000f08 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	f7ff ff42 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(1);
 8000f1c:	2001      	movs	r0, #1
<<<<<<< HEAD
 8000f1e:	f003 fbcd 	bl	80046bc <HAL_Delay>
=======
 8000f1e:	f003 fd29 	bl	8004974 <HAL_Delay>
>>>>>>> e9380fc... optimisation RAM=)
	
switch(screen_rotation) 
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d837      	bhi.n	8000f98 <ILI9341_Set_Rotation+0x90>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <ILI9341_Set_Rotation+0x28>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f41 	.word	0x08000f41
 8000f34:	08000f57 	.word	0x08000f57
 8000f38:	08000f6d 	.word	0x08000f6d
 8000f3c:	08000f83 	.word	0x08000f83
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000f40:	2048      	movs	r0, #72	; 0x48
 8000f42:	f7ff ff51 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f48:	22f0      	movs	r2, #240	; 0xf0
 8000f4a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f52:	801a      	strh	r2, [r3, #0]
			break;
 8000f54:	e021      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000f56:	2028      	movs	r0, #40	; 0x28
 8000f58:	f7ff ff46 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f62:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f66:	22f0      	movs	r2, #240	; 0xf0
 8000f68:	801a      	strh	r2, [r3, #0]
			break;
 8000f6a:	e016      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000f6c:	2088      	movs	r0, #136	; 0x88
 8000f6e:	f7ff ff3b 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f74:	22f0      	movs	r2, #240	; 0xf0
 8000f76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f7e:	801a      	strh	r2, [r3, #0]
			break;
 8000f80:	e00b      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000f82:	20e8      	movs	r0, #232	; 0xe8
 8000f84:	f7ff ff30 	bl	8000de8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <ILI9341_Set_Rotation+0x9c>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f8e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <ILI9341_Set_Rotation+0xa0>)
 8000f92:	22f0      	movs	r2, #240	; 0xf0
 8000f94:	801a      	strh	r2, [r3, #0]
			break;
 8000f96:	e000      	b.n	8000f9a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000f98:	bf00      	nop
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000002 	.word	0x20000002
 8000fa8:	20000000 	.word	0x20000000

08000fac <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <ILI9341_Enable+0x14>)
<<<<<<< HEAD
 8000fb8:	f003 fecf 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8000fb8:	f004 f82b 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000fc8:	f7ff fff0 	bl	8000fac <ILI9341_Enable>
ILI9341_SPI_Init();
 8000fcc:	f7ff feca 	bl	8000d64 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000fd0:	f7ff ff7a 	bl	8000ec8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fee3 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
<<<<<<< HEAD
 8000fde:	f003 fb6d 	bl	80046bc <HAL_Delay>
=======
 8000fde:	f003 fcc9 	bl	8004974 <HAL_Delay>
>>>>>>> e9380fc... optimisation RAM=)
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000fe2:	20cb      	movs	r0, #203	; 0xcb
 8000fe4:	f7ff fedc 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000fe8:	2039      	movs	r0, #57	; 0x39
 8000fea:	f7ff fefd 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000fee:	202c      	movs	r0, #44	; 0x2c
 8000ff0:	f7ff fefa 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fef7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000ffa:	2034      	movs	r0, #52	; 0x34
 8000ffc:	f7ff fef4 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fef1 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001006:	20cf      	movs	r0, #207	; 0xcf
 8001008:	f7ff feca 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff feeb 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001012:	20c1      	movs	r0, #193	; 0xc1
 8001014:	f7ff fee8 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001018:	2030      	movs	r0, #48	; 0x30
 800101a:	f7ff fee5 	bl	8000de8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800101e:	20e8      	movs	r0, #232	; 0xe8
 8001020:	f7ff febe 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001024:	2085      	movs	r0, #133	; 0x85
 8001026:	f7ff fedf 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fedc 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001030:	2078      	movs	r0, #120	; 0x78
 8001032:	f7ff fed9 	bl	8000de8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001036:	20ea      	movs	r0, #234	; 0xea
 8001038:	f7ff feb2 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fed3 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fed0 	bl	8000de8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001048:	20ed      	movs	r0, #237	; 0xed
 800104a:	f7ff fea9 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f7ff feca 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff fec7 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800105a:	2012      	movs	r0, #18
 800105c:	f7ff fec4 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001060:	2081      	movs	r0, #129	; 0x81
 8001062:	f7ff fec1 	bl	8000de8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001066:	20f7      	movs	r0, #247	; 0xf7
 8001068:	f7ff fe9a 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800106c:	2020      	movs	r0, #32
 800106e:	f7ff febb 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001072:	20c0      	movs	r0, #192	; 0xc0
 8001074:	f7ff fe94 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001078:	2023      	movs	r0, #35	; 0x23
 800107a:	f7ff feb5 	bl	8000de8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800107e:	20c1      	movs	r0, #193	; 0xc1
 8001080:	f7ff fe8e 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001084:	2010      	movs	r0, #16
 8001086:	f7ff feaf 	bl	8000de8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800108a:	20c5      	movs	r0, #197	; 0xc5
 800108c:	f7ff fe88 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001090:	203e      	movs	r0, #62	; 0x3e
 8001092:	f7ff fea9 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001096:	2028      	movs	r0, #40	; 0x28
 8001098:	f7ff fea6 	bl	8000de8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800109c:	20c7      	movs	r0, #199	; 0xc7
 800109e:	f7ff fe7f 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80010a2:	2086      	movs	r0, #134	; 0x86
 80010a4:	f7ff fea0 	bl	8000de8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80010a8:	2036      	movs	r0, #54	; 0x36
 80010aa:	f7ff fe79 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80010ae:	2048      	movs	r0, #72	; 0x48
 80010b0:	f7ff fe9a 	bl	8000de8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80010b4:	203a      	movs	r0, #58	; 0x3a
 80010b6:	f7ff fe73 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80010ba:	2055      	movs	r0, #85	; 0x55
 80010bc:	f7ff fe94 	bl	8000de8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80010c0:	20b1      	movs	r0, #177	; 0xb1
 80010c2:	f7ff fe6d 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fe8e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80010cc:	2018      	movs	r0, #24
 80010ce:	f7ff fe8b 	bl	8000de8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80010d2:	20b6      	movs	r0, #182	; 0xb6
 80010d4:	f7ff fe64 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80010d8:	2008      	movs	r0, #8
 80010da:	f7ff fe85 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80010de:	2082      	movs	r0, #130	; 0x82
 80010e0:	f7ff fe82 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80010e4:	2027      	movs	r0, #39	; 0x27
 80010e6:	f7ff fe7f 	bl	8000de8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80010ea:	20f2      	movs	r0, #242	; 0xf2
 80010ec:	f7ff fe58 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fe79 	bl	8000de8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80010f6:	2026      	movs	r0, #38	; 0x26
 80010f8:	f7ff fe52 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff fe73 	bl	8000de8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001102:	20e0      	movs	r0, #224	; 0xe0
 8001104:	f7ff fe4c 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001108:	200f      	movs	r0, #15
 800110a:	f7ff fe6d 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800110e:	2031      	movs	r0, #49	; 0x31
 8001110:	f7ff fe6a 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001114:	202b      	movs	r0, #43	; 0x2b
 8001116:	f7ff fe67 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800111a:	200c      	movs	r0, #12
 800111c:	f7ff fe64 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001120:	200e      	movs	r0, #14
 8001122:	f7ff fe61 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001126:	2008      	movs	r0, #8
 8001128:	f7ff fe5e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800112c:	204e      	movs	r0, #78	; 0x4e
 800112e:	f7ff fe5b 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001132:	20f1      	movs	r0, #241	; 0xf1
 8001134:	f7ff fe58 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001138:	2037      	movs	r0, #55	; 0x37
 800113a:	f7ff fe55 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800113e:	2007      	movs	r0, #7
 8001140:	f7ff fe52 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001144:	2010      	movs	r0, #16
 8001146:	f7ff fe4f 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800114a:	2003      	movs	r0, #3
 800114c:	f7ff fe4c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001150:	200e      	movs	r0, #14
 8001152:	f7ff fe49 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001156:	2009      	movs	r0, #9
 8001158:	f7ff fe46 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fe43 	bl	8000de8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001162:	20e1      	movs	r0, #225	; 0xe1
 8001164:	f7ff fe1c 	bl	8000da0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fe3d 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800116e:	200e      	movs	r0, #14
 8001170:	f7ff fe3a 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001174:	2014      	movs	r0, #20
 8001176:	f7ff fe37 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800117a:	2003      	movs	r0, #3
 800117c:	f7ff fe34 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001180:	2011      	movs	r0, #17
 8001182:	f7ff fe31 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001186:	2007      	movs	r0, #7
 8001188:	f7ff fe2e 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800118c:	2031      	movs	r0, #49	; 0x31
 800118e:	f7ff fe2b 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001192:	20c1      	movs	r0, #193	; 0xc1
 8001194:	f7ff fe28 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001198:	2048      	movs	r0, #72	; 0x48
 800119a:	f7ff fe25 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800119e:	2008      	movs	r0, #8
 80011a0:	f7ff fe22 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80011a4:	200f      	movs	r0, #15
 80011a6:	f7ff fe1f 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80011aa:	200c      	movs	r0, #12
 80011ac:	f7ff fe1c 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80011b0:	2031      	movs	r0, #49	; 0x31
 80011b2:	f7ff fe19 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80011b6:	2036      	movs	r0, #54	; 0x36
 80011b8:	f7ff fe16 	bl	8000de8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80011bc:	200f      	movs	r0, #15
 80011be:	f7ff fe13 	bl	8000de8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80011c2:	2011      	movs	r0, #17
 80011c4:	f7ff fdec 	bl	8000da0 <ILI9341_Write_Command>
HAL_Delay(120);
 80011c8:	2078      	movs	r0, #120	; 0x78
<<<<<<< HEAD
 80011ca:	f003 fa77 	bl	80046bc <HAL_Delay>
=======
 80011ca:	f003 fbd3 	bl	8004974 <HAL_Delay>
>>>>>>> e9380fc... optimisation RAM=)

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80011ce:	2029      	movs	r0, #41	; 0x29
 80011d0:	f7ff fde6 	bl	8000da0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff fe97 	bl	8000f08 <ILI9341_Set_Rotation>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80011e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011e4:	b08d      	sub	sp, #52	; 0x34
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	6039      	str	r1, [r7, #0]
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	466b      	mov	r3, sp
 80011f0:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011fe:	d202      	bcs.n	8001206 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	e002      	b.n	800120c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001206:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001212:	4840      	ldr	r0, [pc, #256]	; (8001314 <ILI9341_Draw_Colour_Burst+0x134>)
<<<<<<< HEAD
 8001214:	f003 fda1 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8001214:	f003 fefd 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121e:	483e      	ldr	r0, [pc, #248]	; (8001318 <ILI9341_Draw_Colour_Burst+0x138>)
<<<<<<< HEAD
 8001220:	f003 fd9b 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8001220:	f003 fef7 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)

unsigned char chifted = 	Colour>>8;;
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	b29b      	uxth	r3, r3
 800122a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800122e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001230:	460b      	mov	r3, r1
 8001232:	3b01      	subs	r3, #1
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	2300      	movs	r3, #0
 8001238:	4688      	mov	r8, r1
 800123a:	4699      	mov	r9, r3
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001248:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800124c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001250:	2300      	movs	r3, #0
 8001252:	460c      	mov	r4, r1
 8001254:	461d      	mov	r5, r3
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	00eb      	lsls	r3, r5, #3
 8001260:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001264:	00e2      	lsls	r2, r4, #3
 8001266:	1dcb      	adds	r3, r1, #7
 8001268:	08db      	lsrs	r3, r3, #3
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	ebad 0d03 	sub.w	sp, sp, r3
 8001270:	466b      	mov	r3, sp
 8001272:	3300      	adds	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
 800127a:	e00e      	b.n	800129a <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001280:	4413      	add	r3, r2
 8001282:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001286:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	3301      	adds	r3, #1
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	b2d1      	uxtb	r1, r2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	3302      	adds	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
 800129a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3ec      	bcc.n	800127c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80012ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012bc:	fb01 f202 	mul.w	r2, r1, r2
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d010      	beq.n	80012ec <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ce:	e009      	b.n	80012e4 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	230a      	movs	r3, #10
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	4810      	ldr	r0, [pc, #64]	; (800131c <ILI9341_Draw_Colour_Burst+0x13c>)
<<<<<<< HEAD
 80012da:	f005 ff03 	bl	80070e4 <HAL_SPI_Transmit>
=======
 80012da:	f006 f85f 	bl	800739c <HAL_SPI_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e0:	3301      	adds	r3, #1
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3f1      	bcc.n	80012d0 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	230a      	movs	r3, #10
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <ILI9341_Draw_Colour_Burst+0x13c>)
<<<<<<< HEAD
 80012f6:	f005 fef5 	bl	80070e4 <HAL_SPI_Transmit>
=======
 80012f6:	f006 f851 	bl	800739c <HAL_SPI_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <ILI9341_Draw_Colour_Burst+0x138>)
<<<<<<< HEAD
 8001302:	f003 fd2a 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8001302:	f003 fe86 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
 8001306:	46b5      	mov	sp, r6
}
 8001308:	bf00      	nop
 800130a:	3734      	adds	r7, #52	; 0x34
 800130c:	46bd      	mov	sp, r7
 800130e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001312:	bf00      	nop
 8001314:	40010800 	.word	0x40010800
 8001318:	40010c00 	.word	0x40010c00
<<<<<<< HEAD
 800131c:	20000100 	.word	0x20000100
=======
 800131c:	200002fc 	.word	0x200002fc
>>>>>>> e9380fc... optimisation RAM=)

08001320 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <ILI9341_Fill_Screen+0x44>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <ILI9341_Fill_Screen+0x48>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fd79 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <ILI9341_Fill_Screen+0x44>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <ILI9341_Fill_Screen+0x48>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	461a      	mov	r2, r3
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff42 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000002 	.word	0x20000002
 8001368:	20000000 	.word	0x20000000

0800136c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	460b      	mov	r3, r1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800137e:	4b64      	ldr	r3, [pc, #400]	; (8001510 <ILI9341_Draw_Pixel+0x1a4>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	429a      	cmp	r2, r3
 8001388:	f080 80be 	bcs.w	8001508 <ILI9341_Draw_Pixel+0x19c>
 800138c:	4b61      	ldr	r3, [pc, #388]	; (8001514 <ILI9341_Draw_Pixel+0x1a8>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	88ba      	ldrh	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	f080 80b7 	bcs.w	8001508 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a0:	485d      	ldr	r0, [pc, #372]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
<<<<<<< HEAD
 80013a2:	f003 fcda 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80013a2:	f003 fe36 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ac:	485b      	ldr	r0, [pc, #364]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 80013ae:	f003 fcd4 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80013ae:	f003 fe30 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
ILI9341_SPI_Send(0x2A);
 80013b2:	202a      	movs	r0, #42	; 0x2a
 80013b4:	f7ff fce2 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013be:	4856      	ldr	r0, [pc, #344]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
<<<<<<< HEAD
 80013c0:	f003 fccb 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80013c0:	f003 fe27 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ca:	4854      	ldr	r0, [pc, #336]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 80013cc:	f003 fcc5 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80013cc:	f003 fe21 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d6:	4851      	ldr	r0, [pc, #324]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 80013d8:	f003 fcbf 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80013d8:	f003 fe1b 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	753b      	strb	r3, [r7, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	757b      	strb	r3, [r7, #21]
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	3301      	adds	r3, #1
 80013f0:	121b      	asrs	r3, r3, #8
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	75bb      	strb	r3, [r7, #22]
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001400:	f107 0114 	add.w	r1, r7, #20
 8001404:	2301      	movs	r3, #1
 8001406:	2204      	movs	r2, #4
 8001408:	4845      	ldr	r0, [pc, #276]	; (8001520 <ILI9341_Draw_Pixel+0x1b4>)
<<<<<<< HEAD
 800140a:	f005 fe6b 	bl	80070e4 <HAL_SPI_Transmit>
=======
 800140a:	f005 ffc7 	bl	800739c <HAL_SPI_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001414:	4841      	ldr	r0, [pc, #260]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 8001416:	f003 fca0 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8001416:	f003 fdfc 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001420:	483d      	ldr	r0, [pc, #244]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
<<<<<<< HEAD
 8001422:	f003 fc9a 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8001422:	f003 fdf6 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	483b      	ldr	r0, [pc, #236]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 800142e:	f003 fc94 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 800142e:	f003 fdf0 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
ILI9341_SPI_Send(0x2B);
 8001432:	202b      	movs	r0, #43	; 0x2b
 8001434:	f7ff fca2 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143e:	4836      	ldr	r0, [pc, #216]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
<<<<<<< HEAD
 8001440:	f003 fc8b 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8001440:	f003 fde7 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144a:	4834      	ldr	r0, [pc, #208]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 800144c:	f003 fc85 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 800144c:	f003 fde1 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001456:	4831      	ldr	r0, [pc, #196]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 8001458:	f003 fc7f 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8001458:	f003 fddb 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b29b      	uxth	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	743b      	strb	r3, [r7, #16]
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	747b      	strb	r3, [r7, #17]
 800146c:	88bb      	ldrh	r3, [r7, #4]
 800146e:	3301      	adds	r3, #1
 8001470:	121b      	asrs	r3, r3, #8
 8001472:	b2db      	uxtb	r3, r3
 8001474:	74bb      	strb	r3, [r7, #18]
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3301      	adds	r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001480:	f107 0110 	add.w	r1, r7, #16
 8001484:	2301      	movs	r3, #1
 8001486:	2204      	movs	r2, #4
 8001488:	4825      	ldr	r0, [pc, #148]	; (8001520 <ILI9341_Draw_Pixel+0x1b4>)
<<<<<<< HEAD
 800148a:	f005 fe2b 	bl	80070e4 <HAL_SPI_Transmit>
=======
 800148a:	f005 ff87 	bl	800739c <HAL_SPI_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001494:	4821      	ldr	r0, [pc, #132]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 8001496:	f003 fc60 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8001496:	f003 fdbc 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a0:	481d      	ldr	r0, [pc, #116]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
<<<<<<< HEAD
 80014a2:	f003 fc5a 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80014a2:	f003 fdb6 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ac:	481b      	ldr	r0, [pc, #108]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 80014ae:	f003 fc54 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80014ae:	f003 fdb0 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
ILI9341_SPI_Send(0x2C);
 80014b2:	202c      	movs	r0, #44	; 0x2c
 80014b4:	f7ff fc62 	bl	8000d7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014be:	4816      	ldr	r0, [pc, #88]	; (8001518 <ILI9341_Draw_Pixel+0x1ac>)
<<<<<<< HEAD
 80014c0:	f003 fc4b 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80014c0:	f003 fda7 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 80014cc:	f003 fc45 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80014cc:	f003 fda1 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d6:	4811      	ldr	r0, [pc, #68]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 80014d8:	f003 fc3f 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 80014d8:	f003 fd9b 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	733b      	strb	r3, [r7, #12]
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80014ec:	f107 010c 	add.w	r1, r7, #12
 80014f0:	2301      	movs	r3, #1
 80014f2:	2202      	movs	r2, #2
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <ILI9341_Draw_Pixel+0x1b4>)
<<<<<<< HEAD
 80014f6:	f005 fdf5 	bl	80070e4 <HAL_SPI_Transmit>
=======
 80014f6:	f005 ff51 	bl	800739c <HAL_SPI_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <ILI9341_Draw_Pixel+0x1b0>)
<<<<<<< HEAD
 8001502:	f003 fc2a 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8001502:	f003 fd86 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)
 8001506:	e000      	b.n	800150a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001508:	bf00      	nop
	
}
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000002 	.word	0x20000002
 8001514:	20000000 	.word	0x20000000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
<<<<<<< HEAD
 8001520:	20000100 	.word	0x20000100
=======
 8001520:	200002fc 	.word	0x200002fc
>>>>>>> e9380fc... optimisation RAM=)

08001524 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	4603      	mov	r3, r0
 8001538:	80bb      	strh	r3, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]
 800153e:	4613      	mov	r3, r2
 8001540:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <ILI9341_Draw_Rectangle+0xb0>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	88fa      	ldrh	r2, [r7, #6]
 800154a:	429a      	cmp	r2, r3
 800154c:	d23d      	bcs.n	80015ca <ILI9341_Draw_Rectangle+0xa6>
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <ILI9341_Draw_Rectangle+0xb4>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	88ba      	ldrh	r2, [r7, #4]
 8001556:	429a      	cmp	r2, r3
 8001558:	d237      	bcs.n	80015ca <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800155a:	88fa      	ldrh	r2, [r7, #6]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	4413      	add	r3, r2
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <ILI9341_Draw_Rectangle+0xb0>)
 8001562:	8812      	ldrh	r2, [r2, #0]
 8001564:	b292      	uxth	r2, r2
 8001566:	4293      	cmp	r3, r2
 8001568:	dd05      	ble.n	8001576 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <ILI9341_Draw_Rectangle+0xb0>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b29a      	uxth	r2, r3
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001576:	88ba      	ldrh	r2, [r7, #4]
 8001578:	883b      	ldrh	r3, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <ILI9341_Draw_Rectangle+0xb4>)
 800157e:	8812      	ldrh	r2, [r2, #0]
 8001580:	b292      	uxth	r2, r2
 8001582:	4293      	cmp	r3, r2
 8001584:	dd05      	ble.n	8001592 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <ILI9341_Draw_Rectangle+0xb4>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	b29a      	uxth	r2, r3
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	4413      	add	r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29c      	uxth	r4, r3
 800159e:	88ba      	ldrh	r2, [r7, #4]
 80015a0:	883b      	ldrh	r3, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	88b9      	ldrh	r1, [r7, #4]
 80015ac:	88f8      	ldrh	r0, [r7, #6]
 80015ae:	4622      	mov	r2, r4
 80015b0:	f7ff fc3e 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80015b4:	883b      	ldrh	r3, [r7, #0]
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	8b3b      	ldrh	r3, [r7, #24]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe0c 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
 80015c8:	e000      	b.n	80015cc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80015ca:	bf00      	nop
}
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000002 	.word	0x20000002
 80015d8:	20000000 	.word	0x20000000

080015dc <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4604      	mov	r4, r0
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	4603      	mov	r3, r0
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <ILI9341_Draw_Horizontal_Line+0x80>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	429a      	cmp	r2, r3
 8001604:	d225      	bcs.n	8001652 <ILI9341_Draw_Horizontal_Line+0x76>
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <ILI9341_Draw_Horizontal_Line+0x84>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	88ba      	ldrh	r2, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	d21f      	bcs.n	8001652 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8001612:	88fa      	ldrh	r2, [r7, #6]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4413      	add	r3, r2
 8001618:	4a10      	ldr	r2, [pc, #64]	; (800165c <ILI9341_Draw_Horizontal_Line+0x80>)
 800161a:	8812      	ldrh	r2, [r2, #0]
 800161c:	b292      	uxth	r2, r2
 800161e:	4293      	cmp	r3, r2
 8001620:	dd05      	ble.n	800162e <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <ILI9341_Draw_Horizontal_Line+0x80>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b29a      	uxth	r2, r3
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	88b9      	ldrh	r1, [r7, #4]
 800163e:	88f8      	ldrh	r0, [r7, #6]
 8001640:	f7ff fbf6 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8001644:	887a      	ldrh	r2, [r7, #2]
 8001646:	883b      	ldrh	r3, [r7, #0]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fdc8 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
 8001650:	e000      	b.n	8001654 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001652:	bf00      	nop
}
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	bf00      	nop
 800165c:	20000002 	.word	0x20000002
 8001660:	20000000 	.word	0x20000000

08001664 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	80fb      	strh	r3, [r7, #6]
 8001676:	4603      	mov	r3, r0
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	807b      	strh	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <ILI9341_Draw_Vertical_Line+0x80>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	d225      	bcs.n	80016da <ILI9341_Draw_Vertical_Line+0x76>
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <ILI9341_Draw_Vertical_Line+0x84>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	88ba      	ldrh	r2, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	d21f      	bcs.n	80016da <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800169a:	88ba      	ldrh	r2, [r7, #4]
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	4413      	add	r3, r2
 80016a0:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	b292      	uxth	r2, r2
 80016a6:	4293      	cmp	r3, r2
 80016a8:	dd05      	ble.n	80016b6 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <ILI9341_Draw_Vertical_Line+0x84>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80016b6:	88ba      	ldrh	r2, [r7, #4]
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	4413      	add	r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	88fa      	ldrh	r2, [r7, #6]
 80016c4:	88b9      	ldrh	r1, [r7, #4]
 80016c6:	88f8      	ldrh	r0, [r7, #6]
 80016c8:	f7ff fbb2 	bl	8000e30 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80016cc:	887a      	ldrh	r2, [r7, #2]
 80016ce:	883b      	ldrh	r3, [r7, #0]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fd84 	bl	80011e0 <ILI9341_Draw_Colour_Burst>
 80016d8:	e000      	b.n	80016dc <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80016da:	bf00      	nop
}
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000002 	.word	0x20000002
 80016e8:	20000000 	.word	0x20000000

080016ec <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2203      	movs	r2, #3
 80016f8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2203      	movs	r2, #3
 8001704:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2203      	movs	r2, #3
 8001716:	715a      	strb	r2, [r3, #5]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b08a      	sub	sp, #40	; 0x28
 8001726:	af04      	add	r7, sp, #16
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	460b      	mov	r3, r1
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	b29a      	uxth	r2, r3
 8001740:	8af9      	ldrh	r1, [r7, #22]
 8001742:	f241 3388 	movw	r3, #5000	; 0x1388
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2302      	movs	r3, #2
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
<<<<<<< HEAD
 8001754:	f004 f8ce 	bl	80058f4 <HAL_I2C_Mem_Read>
=======
 8001754:	f004 fa2a 	bl	8005bac <HAL_I2C_Mem_Read>
>>>>>>> e9380fc... optimisation RAM=)
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10b      	bne.n	8001776 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800175e:	7d7b      	ldrb	r3, [r7, #21]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	b21a      	sxth	r2, r3
 8001764:	7d3b      	ldrb	r3, [r7, #20]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	801a      	strh	r2, [r3, #0]
		return true;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <read_register16+0x56>
	} else
		return false;
 8001776:	2300      	movs	r3, #0

}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b08b      	sub	sp, #44	; 0x2c
 8001784:	af04      	add	r7, sp, #16
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	461a      	mov	r2, r3
 800178c:	460b      	mov	r3, r1
 800178e:	72fb      	strb	r3, [r7, #11]
 8001790:	4613      	mov	r3, r2
 8001792:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	7abb      	ldrb	r3, [r7, #10]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	8af9      	ldrh	r1, [r7, #22]
 80017aa:	f241 3488 	movw	r4, #5000	; 0x1388
 80017ae:	9402      	str	r4, [sp, #8]
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
<<<<<<< HEAD
 80017b8:	f004 f89c 	bl	80058f4 <HAL_I2C_Mem_Read>
=======
 80017b8:	f004 f9f8 	bl	8005bac <HAL_I2C_Mem_Read>
>>>>>>> e9380fc... optimisation RAM=)
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <read_data+0x46>
		return 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <read_data+0x48>
	else
		return 1;
 80017c6:	2301      	movs	r3, #1

}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	461a      	mov	r2, r3
 80017dc:	2188      	movs	r1, #136	; 0x88
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ff9f 	bl	8001722 <read_register16>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d06f      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3302      	adds	r3, #2
 80017ee:	461a      	mov	r2, r3
 80017f0:	218a      	movs	r1, #138	; 0x8a
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff95 	bl	8001722 <read_register16>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d065      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	461a      	mov	r2, r3
 8001804:	218c      	movs	r1, #140	; 0x8c
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff8b 	bl	8001722 <read_register16>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d05b      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3306      	adds	r3, #6
 8001816:	461a      	mov	r2, r3
 8001818:	218e      	movs	r1, #142	; 0x8e
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff81 	bl	8001722 <read_register16>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d051      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3308      	adds	r3, #8
 800182a:	461a      	mov	r2, r3
 800182c:	2190      	movs	r1, #144	; 0x90
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff77 	bl	8001722 <read_register16>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d047      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	330a      	adds	r3, #10
 800183e:	461a      	mov	r2, r3
 8001840:	2192      	movs	r1, #146	; 0x92
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff6d 	bl	8001722 <read_register16>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d03d      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	330c      	adds	r3, #12
 8001852:	461a      	mov	r2, r3
 8001854:	2194      	movs	r1, #148	; 0x94
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ff63 	bl	8001722 <read_register16>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d033      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	330e      	adds	r3, #14
 8001866:	461a      	mov	r2, r3
 8001868:	2196      	movs	r1, #150	; 0x96
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ff59 	bl	8001722 <read_register16>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d029      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3310      	adds	r3, #16
 800187a:	461a      	mov	r2, r3
 800187c:	2198      	movs	r1, #152	; 0x98
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ff4f 	bl	8001722 <read_register16>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01f      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3312      	adds	r3, #18
 800188e:	461a      	mov	r2, r3
 8001890:	219a      	movs	r1, #154	; 0x9a
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff45 	bl	8001722 <read_register16>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3314      	adds	r3, #20
 80018a2:	461a      	mov	r2, r3
 80018a4:	219c      	movs	r1, #156	; 0x9c
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff3b 	bl	8001722 <read_register16>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80018b6:	461a      	mov	r2, r3
 80018b8:	219e      	movs	r1, #158	; 0x9e
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff31 	bl	8001722 <read_register16>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <read_calibration_data+0xfa>

		return true;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <read_calibration_data+0xfc>
	}

	return false;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f103 0218 	add.w	r2, r3, #24
 80018e2:	2301      	movs	r3, #1
 80018e4:	21a1      	movs	r1, #161	; 0xa1
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff4a 	bl	8001780 <read_data>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d14b      	bne.n	800198a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	331a      	adds	r3, #26
 80018f6:	461a      	mov	r2, r3
 80018f8:	21e1      	movs	r1, #225	; 0xe1
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff11 	bl	8001722 <read_register16>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d041      	beq.n	800198a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f103 021c 	add.w	r2, r3, #28
 800190c:	2301      	movs	r3, #1
 800190e:	21e3      	movs	r1, #227	; 0xe3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff35 	bl	8001780 <read_data>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d136      	bne.n	800198a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800191c:	f107 030e 	add.w	r3, r7, #14
 8001920:	461a      	mov	r2, r3
 8001922:	21e4      	movs	r1, #228	; 0xe4
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fefc 	bl	8001722 <read_register16>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02c      	beq.n	800198a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	461a      	mov	r2, r3
 8001936:	21e5      	movs	r1, #229	; 0xe5
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fef2 	bl	8001722 <read_register16>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d022      	beq.n	800198a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800194a:	2301      	movs	r3, #1
 800194c:	21e7      	movs	r1, #231	; 0xe7
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ff16 	bl	8001780 <read_data>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d117      	bne.n	800198a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	b21b      	sxth	r3, r3
 8001960:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001964:	b21a      	sxth	r2, r3
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	121b      	asrs	r3, r3, #8
 800196a:	b21b      	sxth	r3, r3
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800197a:	89bb      	ldrh	r3, [r7, #12]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	b29b      	uxth	r3, r3
 8001980:	b21a      	sxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	841a      	strh	r2, [r3, #32]

		return true;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <read_hum_calibration_data+0xb8>
	}

	return false;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
 80019a0:	4613      	mov	r3, r2
 80019a2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	89f9      	ldrh	r1, [r7, #14]
 80019b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	2301      	movs	r3, #1
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	1cbb      	adds	r3, r7, #2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2301      	movs	r3, #1
<<<<<<< HEAD
 80019c6:	f003 fe9b 	bl	8005700 <HAL_I2C_Mem_Write>
=======
 80019c6:	f003 fff7 	bl	80059b8 <HAL_I2C_Mem_Write>
>>>>>>> e9380fc... optimisation RAM=)
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <write_register8+0x40>
		return false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <write_register8+0x42>
	else
		return true;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ec:	2b76      	cmp	r3, #118	; 0x76
 80019ee:	d005      	beq.n	80019fc <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019f4:	2b77      	cmp	r3, #119	; 0x77
 80019f6:	d001      	beq.n	80019fc <bmp280_init+0x1e>

		return false;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e099      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a02:	2301      	movs	r3, #1
 8001a04:	21d0      	movs	r1, #208	; 0xd0
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff feba 	bl	8001780 <read_data>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <bmp280_init+0x38>
		return false;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e08c      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a1c:	2b58      	cmp	r3, #88	; 0x58
 8001a1e:	d006      	beq.n	8001a2e <bmp280_init+0x50>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a26:	2b60      	cmp	r3, #96	; 0x60
 8001a28:	d001      	beq.n	8001a2e <bmp280_init+0x50>

		return false;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e080      	b.n	8001b30 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001a2e:	22b6      	movs	r2, #182	; 0xb6
 8001a30:	21e0      	movs	r1, #224	; 0xe0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffae 	bl	8001994 <write_register8>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <bmp280_init+0x64>
		return false;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e076      	b.n	8001b30 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001a42:	f107 020c 	add.w	r2, r7, #12
 8001a46:	2301      	movs	r3, #1
 8001a48:	21f3      	movs	r1, #243	; 0xf3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fe98 	bl	8001780 <read_data>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f5      	bne.n	8001a42 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001a56:	7b3b      	ldrb	r3, [r7, #12]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f0      	bne.n	8001a42 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff feb5 	bl	80017d0 <read_calibration_data>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d100      	bne.n	8001a74 <bmp280_init+0x96>
 8001a72:	e001      	b.n	8001a78 <bmp280_init+0x9a>
		return false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e05b      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a7e:	2b60      	cmp	r3, #96	; 0x60
 8001a80:	d10a      	bne.n	8001a98 <bmp280_init+0xba>
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff26 	bl	80018d4 <read_hum_calibration_data>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f083 0301 	eor.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <bmp280_init+0xba>
		return false;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e04b      	b.n	8001b30 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	795b      	ldrb	r3, [r3, #5]
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	b25a      	sxtb	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	21f5      	movs	r1, #245	; 0xf5
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff6d 	bl	8001994 <write_register8>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <bmp280_init+0xe6>
		return false;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e035      	b.n	8001b30 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	78db      	ldrb	r3, [r3, #3]
 8001ad6:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	789b      	ldrb	r3, [r3, #2]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001af0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001af8:	2b60      	cmp	r3, #96	; 0x60
 8001afa:	d10d      	bne.n	8001b18 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	791b      	ldrb	r3, [r3, #4]
 8001b00:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001b02:	7b7b      	ldrb	r3, [r7, #13]
 8001b04:	461a      	mov	r2, r3
 8001b06:	21f2      	movs	r1, #242	; 0xf2
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff43 	bl	8001994 <write_register8>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <bmp280_init+0x13a>
			return false;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e00b      	b.n	8001b30 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	21f4      	movs	r1, #244	; 0xf4
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff38 	bl	8001994 <write_register8>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <bmp280_init+0x150>
		return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <bmp280_init+0x152>
	}

	return true;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	10da      	asrs	r2, r3, #3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001b5a:	12db      	asrs	r3, r3, #11
 8001b5c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	111b      	asrs	r3, r3, #4
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	8812      	ldrh	r2, [r2, #0]
 8001b66:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	1112      	asrs	r2, r2, #4
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	8809      	ldrh	r1, [r1, #0]
 8001b70:	1a52      	subs	r2, r2, r1
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001b82:	139b      	asrs	r3, r3, #14
 8001b84:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	441a      	add	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3380      	adds	r3, #128	; 0x80
 8001b9c:	121b      	asrs	r3, r3, #8
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bac:	b0cc      	sub	sp, #304	; 0x130
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001bb4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001bb8:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001bc0:	17da      	asrs	r2, r3, #31
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	4615      	mov	r5, r2
 8001bc6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001bca:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8001bce:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001bd2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bda:	fb03 f102 	mul.w	r1, r3, r2
 8001bde:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001be2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	18ca      	adds	r2, r1, r3
 8001bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bf0:	fba3 8903 	umull	r8, r9, r3, r3
 8001bf4:	eb02 0309 	add.w	r3, r2, r9
 8001bf8:	4699      	mov	r9, r3
 8001bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bfe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	17da      	asrs	r2, r3, #31
 8001c06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c0a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c0e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001c12:	4603      	mov	r3, r0
 8001c14:	fb03 f209 	mul.w	r2, r3, r9
 8001c18:	460b      	mov	r3, r1
 8001c1a:	fb08 f303 	mul.w	r3, r8, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	4602      	mov	r2, r0
 8001c22:	fba8 2102 	umull	r2, r1, r8, r2
 8001c26:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001c2a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001c2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c32:	4413      	add	r3, r2
 8001c34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c38:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001c3c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001c40:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c48:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	17da      	asrs	r2, r3, #31
 8001c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c54:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c5c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001c60:	462a      	mov	r2, r5
 8001c62:	fb02 f203 	mul.w	r2, r2, r3
 8001c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	441a      	add	r2, r3
 8001c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c76:	4621      	mov	r1, r4
 8001c78:	fba3 3101 	umull	r3, r1, r3, r1
 8001c7c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001c80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c88:	18d3      	adds	r3, r2, r3
 8001c8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c8e:	f04f 0000 	mov.w	r0, #0
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001c9a:	462b      	mov	r3, r5
 8001c9c:	0459      	lsls	r1, r3, #17
 8001c9e:	4622      	mov	r2, r4
 8001ca0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	0458      	lsls	r0, r3, #17
 8001ca8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001cac:	1814      	adds	r4, r2, r0
 8001cae:	643c      	str	r4, [r7, #64]	; 0x40
 8001cb0:	414b      	adcs	r3, r1
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001cb8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cc0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	17da      	asrs	r2, r3, #31
 8001cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ccc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001cd0:	f04f 0000 	mov.w	r0, #0
 8001cd4:	f04f 0100 	mov.w	r1, #0
 8001cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cdc:	00d9      	lsls	r1, r3, #3
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ce4:	1814      	adds	r4, r2, r0
 8001ce6:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ce8:	414b      	adcs	r3, r1
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cec:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001cf0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001cf4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cfc:	fb03 f102 	mul.w	r1, r3, r2
 8001d00:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	18ca      	adds	r2, r1, r3
 8001d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d12:	fba3 3103 	umull	r3, r1, r3, r3
 8001d16:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001d1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d22:	18d3      	adds	r3, r2, r3
 8001d24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	17da      	asrs	r2, r3, #31
 8001d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d38:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d3c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001d40:	4622      	mov	r2, r4
 8001d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d46:	4641      	mov	r1, r8
 8001d48:	fb01 f202 	mul.w	r2, r1, r2
 8001d4c:	464d      	mov	r5, r9
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4621      	mov	r1, r4
 8001d52:	4603      	mov	r3, r0
 8001d54:	fb03 f305 	mul.w	r3, r3, r5
 8001d58:	4413      	add	r3, r2
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4641      	mov	r1, r8
 8001d5e:	fba2 2101 	umull	r2, r1, r2, r1
 8001d62:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001d66:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001d6a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001d6e:	4413      	add	r3, r2
 8001d70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001d80:	4623      	mov	r3, r4
 8001d82:	0a18      	lsrs	r0, r3, #8
 8001d84:	462a      	mov	r2, r5
 8001d86:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	17da      	asrs	r2, r3, #31
 8001d9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d9e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001da6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001daa:	464a      	mov	r2, r9
 8001dac:	fb02 f203 	mul.w	r2, r2, r3
 8001db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001db4:	4644      	mov	r4, r8
 8001db6:	fb04 f303 	mul.w	r3, r4, r3
 8001dba:	441a      	add	r2, r3
 8001dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001dc0:	4644      	mov	r4, r8
 8001dc2:	fba3 3404 	umull	r3, r4, r3, r4
 8001dc6:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001dd2:	18d3      	adds	r3, r2, r3
 8001dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001de4:	464c      	mov	r4, r9
 8001de6:	0323      	lsls	r3, r4, #12
 8001de8:	46c4      	mov	ip, r8
 8001dea:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001dee:	4644      	mov	r4, r8
 8001df0:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001df2:	1884      	adds	r4, r0, r2
 8001df4:	633c      	str	r4, [r7, #48]	; 0x30
 8001df6:	eb41 0303 	adc.w	r3, r1, r3
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001e00:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001e04:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e08:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001e0c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001e10:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e18:	88db      	ldrh	r3, [r3, #6]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e22:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e26:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e30:	4641      	mov	r1, r8
 8001e32:	fb01 f202 	mul.w	r2, r1, r2
 8001e36:	464d      	mov	r5, r9
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	fb03 f305 	mul.w	r3, r3, r5
 8001e42:	4413      	add	r3, r2
 8001e44:	4602      	mov	r2, r0
 8001e46:	4641      	mov	r1, r8
 8001e48:	fba2 2101 	umull	r2, r1, r2, r1
 8001e4c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001e50:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001e54:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001e58:	4413      	add	r3, r2
 8001e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	104a      	asrs	r2, r1, #1
 8001e6e:	4629      	mov	r1, r5
 8001e70:	17cb      	asrs	r3, r1, #31
 8001e72:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001e76:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e146      	b.n	8002110 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001e82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e86:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001e8a:	17da      	asrs	r2, r3, #31
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e90:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e94:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001e98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001e9c:	105b      	asrs	r3, r3, #1
 8001e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ea2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ea6:	07db      	lsls	r3, r3, #31
 8001ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001eac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001eb0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	1aa4      	subs	r4, r4, r2
 8001eb8:	67bc      	str	r4, [r7, #120]	; 0x78
 8001eba:	eb61 0303 	sbc.w	r3, r1, r3
 8001ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ec0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	1891      	adds	r1, r2, r2
 8001eca:	6239      	str	r1, [r7, #32]
 8001ecc:	415b      	adcs	r3, r3
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	1851      	adds	r1, r2, r1
 8001ed8:	61b9      	str	r1, [r7, #24]
 8001eda:	4629      	mov	r1, r5
 8001edc:	414b      	adcs	r3, r1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001eec:	4649      	mov	r1, r9
 8001eee:	018b      	lsls	r3, r1, #6
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	018a      	lsls	r2, r1, #6
 8001efa:	4641      	mov	r1, r8
 8001efc:	1889      	adds	r1, r1, r2
 8001efe:	6139      	str	r1, [r7, #16]
 8001f00:	4649      	mov	r1, r9
 8001f02:	eb43 0101 	adc.w	r1, r3, r1
 8001f06:	6179      	str	r1, [r7, #20]
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f14:	4649      	mov	r1, r9
 8001f16:	008b      	lsls	r3, r1, #2
 8001f18:	46c4      	mov	ip, r8
 8001f1a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001f1e:	4641      	mov	r1, r8
 8001f20:	008a      	lsls	r2, r1, #2
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	4622      	mov	r2, r4
 8001f2a:	189b      	adds	r3, r3, r2
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	462a      	mov	r2, r5
 8001f32:	eb42 0303 	adc.w	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001f44:	4649      	mov	r1, r9
 8001f46:	008b      	lsls	r3, r1, #2
 8001f48:	46c4      	mov	ip, r8
 8001f4a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001f4e:	4641      	mov	r1, r8
 8001f50:	008a      	lsls	r2, r1, #2
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	4622      	mov	r2, r4
 8001f5a:	189b      	adds	r3, r3, r2
 8001f5c:	673b      	str	r3, [r7, #112]	; 0x70
 8001f5e:	462b      	mov	r3, r5
 8001f60:	460a      	mov	r2, r1
 8001f62:	eb42 0303 	adc.w	r3, r2, r3
 8001f66:	677b      	str	r3, [r7, #116]	; 0x74
 8001f68:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001f6c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001f70:	f7fe fbf0 	bl	8000754 <__aeabi_ldivmod>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f80:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	17da      	asrs	r2, r3, #31
 8001f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f8c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001f90:	f04f 0000 	mov.w	r0, #0
 8001f94:	f04f 0100 	mov.w	r1, #0
 8001f98:	0b50      	lsrs	r0, r2, #13
 8001f9a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f9e:	1359      	asrs	r1, r3, #13
 8001fa0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	fb00 f203 	mul.w	r2, r0, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	fb03 f301 	mul.w	r3, r3, r1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	fba2 2100 	umull	r2, r1, r2, r0
 8001fb8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001fbc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001fc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001fca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0b50      	lsrs	r0, r2, #13
 8001fd8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001fdc:	1359      	asrs	r1, r3, #13
 8001fde:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001fe2:	462b      	mov	r3, r5
 8001fe4:	fb00 f203 	mul.w	r2, r0, r3
 8001fe8:	4623      	mov	r3, r4
 8001fea:	fb03 f301 	mul.w	r3, r3, r1
 8001fee:	4413      	add	r3, r2
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	fba2 2100 	umull	r2, r1, r2, r0
 8001ff6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001ffa:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001ffe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002002:	4413      	add	r3, r2
 8002004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002014:	4621      	mov	r1, r4
 8002016:	0e4a      	lsrs	r2, r1, #25
 8002018:	4620      	mov	r0, r4
 800201a:	4629      	mov	r1, r5
 800201c:	460c      	mov	r4, r1
 800201e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8002022:	164b      	asrs	r3, r1, #25
 8002024:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800202c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002030:	b21b      	sxth	r3, r3
 8002032:	17da      	asrs	r2, r3, #31
 8002034:	663b      	str	r3, [r7, #96]	; 0x60
 8002036:	667a      	str	r2, [r7, #100]	; 0x64
 8002038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800203c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002040:	462a      	mov	r2, r5
 8002042:	fb02 f203 	mul.w	r2, r2, r3
 8002046:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800204a:	4621      	mov	r1, r4
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002056:	4621      	mov	r1, r4
 8002058:	fba2 2101 	umull	r2, r1, r2, r1
 800205c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8002060:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002064:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002068:	4413      	add	r3, r2
 800206a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800207a:	4621      	mov	r1, r4
 800207c:	0cca      	lsrs	r2, r1, #19
 800207e:	4620      	mov	r0, r4
 8002080:	4629      	mov	r1, r5
 8002082:	460c      	mov	r4, r1
 8002084:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8002088:	14cb      	asrs	r3, r1, #19
 800208a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800208e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002092:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002096:	1884      	adds	r4, r0, r2
 8002098:	65bc      	str	r4, [r7, #88]	; 0x58
 800209a:	eb41 0303 	adc.w	r3, r1, r3
 800209e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80020a4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80020a8:	4621      	mov	r1, r4
 80020aa:	1889      	adds	r1, r1, r2
 80020ac:	6539      	str	r1, [r7, #80]	; 0x50
 80020ae:	4629      	mov	r1, r5
 80020b0:	eb43 0101 	adc.w	r1, r3, r1
 80020b4:	6579      	str	r1, [r7, #84]	; 0x54
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80020c2:	4623      	mov	r3, r4
 80020c4:	0a18      	lsrs	r0, r3, #8
 80020c6:	462a      	mov	r2, r5
 80020c8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80020cc:	462b      	mov	r3, r5
 80020ce:	1219      	asrs	r1, r3, #8
 80020d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	17da      	asrs	r2, r3, #31
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80020de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80020ec:	464c      	mov	r4, r9
 80020ee:	0123      	lsls	r3, r4, #4
 80020f0:	46c4      	mov	ip, r8
 80020f2:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 80020f6:	4644      	mov	r4, r8
 80020f8:	0122      	lsls	r2, r4, #4
 80020fa:	1884      	adds	r4, r0, r2
 80020fc:	603c      	str	r4, [r7, #0]
 80020fe:	eb41 0303 	adc.w	r3, r1, r3
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002108:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800210c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8002110:	4618      	mov	r0, r3
 8002112:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002116:	46bd      	mov	sp, r7
 8002118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800211c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800212e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	039a      	lsls	r2, r3, #14
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800213a:	051b      	lsls	r3, r3, #20
 800213c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002144:	4619      	mov	r1, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002152:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800215a:	4611      	mov	r1, r2
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	fb01 f202 	mul.w	r2, r1, r2
 8002162:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	7f09      	ldrb	r1, [r1, #28]
 8002168:	4608      	mov	r0, r1
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	fb00 f101 	mul.w	r1, r0, r1
 8002170:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002172:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002176:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800217a:	1292      	asrs	r2, r2, #10
 800217c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002186:	fb01 f202 	mul.w	r2, r1, r2
 800218a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800218e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	13db      	asrs	r3, r3, #15
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	13d2      	asrs	r2, r2, #15
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	7e12      	ldrb	r2, [r2, #24]
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80021ba:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80021c2:	bfa8      	it	ge
 80021c4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80021c8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	131b      	asrs	r3, r3, #12
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80021ec:	2b60      	cmp	r3, #96	; 0x60
 80021ee:	d007      	beq.n	8002200 <bmp280_read_fixed+0x28>
		if (humidity)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <bmp280_read_fixed+0x24>
			*humidity = 0;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <bmp280_read_fixed+0x32>
 8002206:	2308      	movs	r3, #8
 8002208:	e000      	b.n	800220c <bmp280_read_fixed+0x34>
 800220a:	2306      	movs	r3, #6
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f107 0218 	add.w	r2, r7, #24
 8002216:	21f7      	movs	r1, #247	; 0xf7
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff fab1 	bl	8001780 <read_data>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <bmp280_read_fixed+0x50>
		return false;
 8002224:	2300      	movs	r3, #0
 8002226:	e038      	b.n	800229a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002228:	7e3b      	ldrb	r3, [r7, #24]
 800222a:	031a      	lsls	r2, r3, #12
 800222c:	7e7b      	ldrb	r3, [r7, #25]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4313      	orrs	r3, r2
 8002232:	7eba      	ldrb	r2, [r7, #26]
 8002234:	0912      	lsrs	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4313      	orrs	r3, r2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800223c:	7efb      	ldrb	r3, [r7, #27]
 800223e:	031a      	lsls	r2, r3, #12
 8002240:	7f3b      	ldrb	r3, [r7, #28]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4313      	orrs	r3, r2
 8002246:	7f7a      	ldrb	r2, [r7, #29]
 8002248:	0912      	lsrs	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4313      	orrs	r3, r2
 800224e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	461a      	mov	r2, r3
 8002256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff fc6d 	bl	8001b38 <compensate_temperature>
 800225e:	4602      	mov	r2, r0
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	461a      	mov	r2, r3
 8002268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7ff fc9c 	bl	8001ba8 <compensate_pressure>
 8002270:	4602      	mov	r2, r0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800227c:	7fbb      	ldrb	r3, [r7, #30]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	7ffa      	ldrb	r2, [r7, #31]
 8002282:	4313      	orrs	r3, r2
 8002284:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	461a      	mov	r2, r3
 800228a:	6a39      	ldr	r1, [r7, #32]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ff45 	bl	800211c <compensate_humidity>
 8002292:	4602      	mov	r2, r0
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	3730      	adds	r7, #48	; 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <bmp280_read_float+0x1a>
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	e000      	b.n	80022c0 <bmp280_read_float+0x1c>
 80022be:	2300      	movs	r3, #0
 80022c0:	f107 0218 	add.w	r2, r7, #24
 80022c4:	f107 011c 	add.w	r1, r7, #28
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7ff ff85 	bl	80021d8 <bmp280_read_fixed>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02d      	beq.n	8002330 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fd fffc 	bl	80002d4 <__aeabi_i2f>
 80022dc:	4603      	mov	r3, r0
 80022de:	4917      	ldr	r1, [pc, #92]	; (800233c <bmp280_read_float+0x98>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f8ff 	bl	80004e4 <__aeabi_fdiv>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fd ffeb 	bl	80002cc <__aeabi_ui2f>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f8f1 	bl	80004e4 <__aeabi_fdiv>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
		if (humidity)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00d      	beq.n	800232c <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fd ffda 	bl	80002cc <__aeabi_ui2f>
 8002318:	4603      	mov	r3, r0
 800231a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f8e0 	bl	80004e4 <__aeabi_fdiv>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	601a      	str	r2, [r3, #0]
		return true;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <bmp280_read_float+0x8e>
	}

	return false;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	42c80000 	.word	0x42c80000

08002340 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8002348:	4a03      	ldr	r2, [pc, #12]	; (8002358 <DS3231_Init+0x18>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	200000a0 	.word	0x200000a0

0800235c <DS3231_GetTime>:

bool DS3231_GetTime(_RTC *rtc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af02      	add	r7, sp, #8
 8002362:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2100      	movs	r1, #0
 8002372:	460a      	mov	r2, r1
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	460a      	mov	r2, r1
 8002378:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800237a:	4b35      	ldr	r3, [pc, #212]	; (8002450 <DS3231_GetTime+0xf4>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f107 020f 	add.w	r2, r7, #15
 8002382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2301      	movs	r3, #1
 800238a:	21d0      	movs	r1, #208	; 0xd0
<<<<<<< HEAD
 800238c:	f002 fe5a 	bl	8005044 <HAL_I2C_Master_Transmit>
=======
 800238c:	f002 ffb6 	bl	80052fc <HAL_I2C_Master_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <DS3231_GetTime+0x3e>
 8002396:	2300      	movs	r3, #0
 8002398:	e055      	b.n	8002446 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <DS3231_GetTime+0xf4>)
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	f107 0208 	add.w	r2, r7, #8
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2307      	movs	r3, #7
 80023aa:	21d0      	movs	r1, #208	; 0xd0
<<<<<<< HEAD
 80023ac:	f002 ff48 	bl	8005240 <HAL_I2C_Master_Receive>
=======
 80023ac:	f003 f8a4 	bl	80054f8 <HAL_I2C_Master_Receive>
>>>>>>> e9380fc... optimisation RAM=)
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <DS3231_GetTime+0x5e>
 80023b6:	2300      	movs	r3, #0
 80023b8:	e045      	b.n	8002446 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 80023ba:	7a3b      	ldrb	r3, [r7, #8]
 80023bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f8e2 	bl	800258c <B2D>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 80023d0:	7a7b      	ldrb	r3, [r7, #9]
 80023d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f8d7 	bl	800258c <B2D>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 80023e6:	7abb      	ldrb	r3, [r7, #10]
 80023e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f8cc 	bl	800258c <B2D>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	b2da      	uxtb	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8002408:	7b3b      	ldrb	r3, [r7, #12]
 800240a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f8bb 	bl	800258c <B2D>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 800241e:	7b7b      	ldrb	r3, [r7, #13]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	b2db      	uxtb	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f8b0 	bl	800258c <B2D>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f8a8 	bl	800258c <B2D>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	701a      	strb	r2, [r3, #0]

  return true;
 8002444:	2301      	movs	r3, #1
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200000a0 	.word	0x200000a0

08002454 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 800245c:	2300      	movs	r3, #0
 800245e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	733b      	strb	r3, [r7, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	799b      	ldrb	r3, [r3, #6]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f8a7 	bl	80025bc <D2B>
 800246e:	4603      	mov	r3, r0
 8002470:	737b      	strb	r3, [r7, #13]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	795b      	ldrb	r3, [r3, #5]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f8a0 	bl	80025bc <D2B>
 800247c:	4603      	mov	r3, r0
 800247e:	73bb      	strb	r3, [r7, #14]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f899 	bl	80025bc <D2B>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	78db      	ldrb	r3, [r3, #3]
 8002492:	743b      	strb	r3, [r7, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	789b      	ldrb	r3, [r3, #2]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f88f 	bl	80025bc <D2B>
 800249e:	4603      	mov	r3, r0
 80024a0:	747b      	strb	r3, [r7, #17]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	785b      	ldrb	r3, [r3, #1]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f888 	bl	80025bc <D2B>
 80024ac:	4603      	mov	r3, r0
 80024ae:	74bb      	strb	r3, [r7, #18]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f881 	bl	80025bc <D2B>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <DS3231_SetTime+0x94>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	f107 020c 	add.w	r2, r7, #12
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2308      	movs	r3, #8
 80024ce:	21d0      	movs	r1, #208	; 0xd0
<<<<<<< HEAD
 80024d0:	f002 fdb8 	bl	8005044 <HAL_I2C_Master_Transmit>
=======
 80024d0:	f002 ff14 	bl	80052fc <HAL_I2C_Master_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <DS3231_SetTime+0x8a>
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <DS3231_SetTime+0x8c>

  return true;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200000a0 	.word	0x200000a0

080024ec <ReadRegister>:

  return true;
}

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <ReadRegister+0x54>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	1dfa      	adds	r2, r7, #7
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2301      	movs	r3, #1
 8002506:	21d0      	movs	r1, #208	; 0xd0
<<<<<<< HEAD
 8002508:	f002 fd9c 	bl	8005044 <HAL_I2C_Master_Transmit>
=======
 8002508:	f002 fef8 	bl	80052fc <HAL_I2C_Master_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <ReadRegister+0x2a>
 8002512:	2300      	movs	r3, #0
 8002514:	e00f      	b.n	8002536 <ReadRegister+0x4a>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <ReadRegister+0x54>)
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2301      	movs	r3, #1
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	21d0      	movs	r1, #208	; 0xd0
<<<<<<< HEAD
 8002526:	f002 fe8b 	bl	8005240 <HAL_I2C_Master_Receive>
=======
 8002526:	f002 ffe7 	bl	80054f8 <HAL_I2C_Master_Receive>
>>>>>>> e9380fc... optimisation RAM=)
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <ReadRegister+0x48>
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <ReadRegister+0x4a>

  return true;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200000a0 	.word	0x200000a0

08002544 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af02      	add	r7, sp, #8
 800254a:	4603      	mov	r3, r0
 800254c:	460a      	mov	r2, r1
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	4613      	mov	r3, r2
 8002552:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	733b      	strb	r3, [r7, #12]
 8002558:	79bb      	ldrb	r3, [r7, #6]
 800255a:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <WriteRegister+0x44>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	f107 020c 	add.w	r2, r7, #12
 8002564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2302      	movs	r3, #2
 800256c:	21d0      	movs	r1, #208	; 0xd0
<<<<<<< HEAD
 800256e:	f002 fd69 	bl	8005044 <HAL_I2C_Master_Transmit>
=======
 800256e:	f002 fec5 	bl	80052fc <HAL_I2C_Master_Transmit>
>>>>>>> e9380fc... optimisation RAM=)
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <WriteRegister+0x38>
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <WriteRegister+0x3a>

  return true;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200000a0 	.word	0x200000a0

0800258c <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <D2B+0x44>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	b258      	sxtb	r0, r3
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <D2B+0x44>)
 80025da:	fba3 1302 	umull	r1, r3, r3, r2
 80025de:	08d9      	lsrs	r1, r3, #3
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	4303      	orrs	r3, r0
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	cccccccd 	.word	0xcccccccd

08002604 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN PV */


// -------------------------------------------------------------------------
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INTERUPT_FROM_RTC_Pin)
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002614:	d104      	bne.n	8002620 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(red_data_fron_rtc_SemHandle);						// Lets RTS task read data from ds3231
 8002616:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
<<<<<<< HEAD
 800261c:	f006 fc2e 	bl	8008e7c <osSemaphoreRelease>
=======
 800261c:	f006 fdce 	bl	80091bc <osSemaphoreRelease>
>>>>>>> e9380fc... optimisation RAM=)
	}

	if((GPIO_Pin == KEY_1_Pin) || (GPIO_Pin == KEY_2_Pin) || (GPIO_Pin == KEY_3_Pin) || (GPIO_Pin == KEY_4_Pin))
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	2b10      	cmp	r3, #16
 8002624:	d008      	beq.n	8002638 <HAL_GPIO_EXTI_Callback+0x34>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d005      	beq.n	8002638 <HAL_GPIO_EXTI_Callback+0x34>
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d002      	beq.n	8002638 <HAL_GPIO_EXTI_Callback+0x34>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d15f      	bne.n	80026f8 <HAL_GPIO_EXTI_Callback+0xf4>
	{
		BaseType_t xHigherPriorityTaskWoken;
		uint16_t key_1 = 1;
 8002638:	2301      	movs	r3, #1
 800263a:	827b      	strh	r3, [r7, #18]
		uint16_t key_2 = 2;
 800263c:	2302      	movs	r3, #2
 800263e:	823b      	strh	r3, [r7, #16]
		uint16_t key_3 = 3;
 8002640:	2303      	movs	r3, #3
 8002642:	81fb      	strh	r3, [r7, #14]
		uint16_t key_4 = 4;
 8002644:	2304      	movs	r3, #4
 8002646:	81bb      	strh	r3, [r7, #12]

		currentMillis = HAL_GetTick();
<<<<<<< HEAD
 8002648:	f002 f82e 	bl	80046a8 <HAL_GetTick>
=======
 8002648:	f002 f98a 	bl	8004960 <HAL_GetTick>
>>>>>>> e9380fc... optimisation RAM=)
 800264c:	4603      	mov	r3, r0
 800264e:	4a2d      	ldr	r2, [pc, #180]	; (8002704 <HAL_GPIO_EXTI_Callback+0x100>)
 8002650:	6013      	str	r3, [r2, #0]
		if((currentMillis - previousMillis) > 100)
 8002652:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <HAL_GPIO_EXTI_Callback+0x100>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_GPIO_EXTI_Callback+0x104>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b64      	cmp	r3, #100	; 0x64
 800265e:	d94b      	bls.n	80026f8 <HAL_GPIO_EXTI_Callback+0xf4>
		{
			if(HAL_GPIO_ReadPin(GPIOA, KEY_1_Pin) == GPIO_PIN_SET)			// If first key was pressed
 8002660:	2110      	movs	r1, #16
 8002662:	482a      	ldr	r0, [pc, #168]	; (800270c <HAL_GPIO_EXTI_Callback+0x108>)
<<<<<<< HEAD
 8002664:	f002 fb62 	bl	8004d2c <HAL_GPIO_ReadPin>
=======
 8002664:	f002 fcbe 	bl	8004fe4 <HAL_GPIO_ReadPin>
>>>>>>> e9380fc... optimisation RAM=)
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d109      	bne.n	8002682 <HAL_GPIO_EXTI_Callback+0x7e>
			{
				if((xQueueSendFromISR( buttonQueueHandle, &key_1, &xHigherPriorityTaskWoken )) != 1)		// Send queue to main task
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	f107 0214 	add.w	r2, r7, #20
 8002676:	f107 0112 	add.w	r1, r7, #18
 800267a:	2300      	movs	r3, #0
<<<<<<< HEAD
 800267c:	f007 f91e 	bl	80098bc <xQueueGenericSendFromISR>
=======
 800267c:	f007 fabe 	bl	8009bfc <xQueueGenericSendFromISR>
>>>>>>> e9380fc... optimisation RAM=)
 8002680:	e031      	b.n	80026e6 <HAL_GPIO_EXTI_Callback+0xe2>
				{
					// Error
				}
			}
			else if(HAL_GPIO_ReadPin(GPIOA, KEY_2_Pin) == GPIO_PIN_SET)
 8002682:	2108      	movs	r1, #8
 8002684:	4821      	ldr	r0, [pc, #132]	; (800270c <HAL_GPIO_EXTI_Callback+0x108>)
<<<<<<< HEAD
 8002686:	f002 fb51 	bl	8004d2c <HAL_GPIO_ReadPin>
=======
 8002686:	f002 fcad 	bl	8004fe4 <HAL_GPIO_ReadPin>
>>>>>>> e9380fc... optimisation RAM=)
 800268a:	4603      	mov	r3, r0
 800268c:	2b01      	cmp	r3, #1
 800268e:	d109      	bne.n	80026a4 <HAL_GPIO_EXTI_Callback+0xa0>
			{
				if((xQueueSendFromISR( buttonQueueHandle, &key_2, &xHigherPriorityTaskWoken )) != 1)
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	f107 0214 	add.w	r2, r7, #20
 8002698:	f107 0110 	add.w	r1, r7, #16
 800269c:	2300      	movs	r3, #0
<<<<<<< HEAD
 800269e:	f007 f90d 	bl	80098bc <xQueueGenericSendFromISR>
=======
 800269e:	f007 faad 	bl	8009bfc <xQueueGenericSendFromISR>
>>>>>>> e9380fc... optimisation RAM=)
 80026a2:	e020      	b.n	80026e6 <HAL_GPIO_EXTI_Callback+0xe2>
				{
					// Error
				}
			}
			else if(HAL_GPIO_ReadPin(GPIOA, KEY_3_Pin) == GPIO_PIN_SET)
 80026a4:	2104      	movs	r1, #4
 80026a6:	4819      	ldr	r0, [pc, #100]	; (800270c <HAL_GPIO_EXTI_Callback+0x108>)
<<<<<<< HEAD
 80026a8:	f002 fb40 	bl	8004d2c <HAL_GPIO_ReadPin>
=======
 80026a8:	f002 fc9c 	bl	8004fe4 <HAL_GPIO_ReadPin>
>>>>>>> e9380fc... optimisation RAM=)
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d109      	bne.n	80026c6 <HAL_GPIO_EXTI_Callback+0xc2>
			{
				if((xQueueSendFromISR( buttonQueueHandle, &key_3, &xHigherPriorityTaskWoken )) != 1)
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_GPIO_EXTI_Callback+0x10c>)
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	f107 0214 	add.w	r2, r7, #20
 80026ba:	f107 010e 	add.w	r1, r7, #14
 80026be:	2300      	movs	r3, #0
<<<<<<< HEAD
 80026c0:	f007 f8fc 	bl	80098bc <xQueueGenericSendFromISR>
=======
 80026c0:	f007 fa9c 	bl	8009bfc <xQueueGenericSendFromISR>
>>>>>>> e9380fc... optimisation RAM=)
 80026c4:	e00f      	b.n	80026e6 <HAL_GPIO_EXTI_Callback+0xe2>
				{
					// Error
				}
			}
			else if(HAL_GPIO_ReadPin(GPIOA, KEY_4_Pin) == GPIO_PIN_SET)
 80026c6:	2102      	movs	r1, #2
 80026c8:	4810      	ldr	r0, [pc, #64]	; (800270c <HAL_GPIO_EXTI_Callback+0x108>)
<<<<<<< HEAD
 80026ca:	f002 fb2f 	bl	8004d2c <HAL_GPIO_ReadPin>
=======
 80026ca:	f002 fc8b 	bl	8004fe4 <HAL_GPIO_ReadPin>
>>>>>>> e9380fc... optimisation RAM=)
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <HAL_GPIO_EXTI_Callback+0xe2>
			{
				if((xQueueSendFromISR( buttonQueueHandle, &key_4, &xHigherPriorityTaskWoken )) != 1)
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_GPIO_EXTI_Callback+0x10c>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	f107 0214 	add.w	r2, r7, #20
 80026dc:	f107 010c 	add.w	r1, r7, #12
 80026e0:	2300      	movs	r3, #0
<<<<<<< HEAD
 80026e2:	f007 f8eb 	bl	80098bc <xQueueGenericSendFromISR>
=======
 80026e2:	f007 fa8b 	bl	8009bfc <xQueueGenericSendFromISR>
>>>>>>> e9380fc... optimisation RAM=)
				{
					// Error
				}
			}
			previousMillis = currentMillis;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_GPIO_EXTI_Callback+0x100>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <HAL_GPIO_EXTI_Callback+0x104>)
 80026ec:	6013      	str	r3, [r2, #0]
			// Set semaphore
			osSemaphoreRelease(set_rts_val_SemHandle);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_GPIO_EXTI_Callback+0x110>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
<<<<<<< HEAD
 80026f4:	f006 fbc2 	bl	8008e7c <osSemaphoreRelease>
=======
 80026f4:	f006 fd62 	bl	80091bc <osSemaphoreRelease>
>>>>>>> e9380fc... optimisation RAM=)
		}
	}
}
 80026f8:	bf00      	nop
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 8002700:	200003c4 	.word	0x200003c4
 8002704:	200000a8 	.word	0x200000a8
 8002708:	200000a4 	.word	0x200000a4
 800270c:	40010800 	.word	0x40010800
 8002710:	200001fc 	.word	0x200001fc
 8002714:	200003c0 	.word	0x200003c0
=======
 8002700:	20000ae0 	.word	0x20000ae0
 8002704:	200002a4 	.word	0x200002a4
 8002708:	200002a0 	.word	0x200002a0
 800270c:	40010800 	.word	0x40010800
 8002710:	20000918 	.word	0x20000918
 8002714:	20000adc 	.word	0x20000adc
>>>>>>> e9380fc... optimisation RAM=)

08002718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800271c:	f001 ff9c 	bl	8004658 <HAL_Init>
=======
 800271c:	f002 f8f8 	bl	8004910 <HAL_Init>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002720:	f000 f8d8 	bl	80028d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002724:	f000 f9f6 	bl	8002b14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002728:	f000 f948 	bl	80029bc <MX_SPI1_Init>
  MX_I2C1_Init();
 800272c:	f000 f918 	bl	8002960 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002730:	f000 f9c6 	bl	8002ac0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
<<<<<<< HEAD
 8002734:	f000 f978 	bl	8002a28 <MX_TIM2_Init>
=======
 8002734:	f000 f992 	bl	8002a5c <MX_TIM2_Init>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN 2 */


  DS3231_Init(&hi2c1);
 8002738:	4840      	ldr	r0, [pc, #256]	; (800283c <main+0x124>)
 800273a:	f7ff fe01 	bl	8002340 <DS3231_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< HEAD
 800273e:	f005 ffad 	bl	800869c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of I2C_Mutex */
  I2C_MutexHandle = osMutexNew(&I2C_Mutex_attributes);
 8002742:	483f      	ldr	r0, [pc, #252]	; (8002840 <main+0x128>)
 8002744:	f006 f950 	bl	80089e8 <osMutexNew>
=======
 800273e:	f006 f94d 	bl	80089dc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of I2C_Mutex */
  I2C_MutexHandle = osMutexNew(&I2C_Mutex_attributes);
 8002742:	4847      	ldr	r0, [pc, #284]	; (8002860 <main+0x148>)
 8002744:	f006 faf0 	bl	8008d28 <osMutexNew>
>>>>>>> e9380fc... optimisation RAM=)
 8002748:	4603      	mov	r3, r0
 800274a:	4a3e      	ldr	r2, [pc, #248]	; (8002844 <main+0x12c>)
 800274c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of LCD_Sem */
  LCD_SemHandle = osSemaphoreNew(1, 1, &LCD_Sem_attributes);
 800274e:	4a3e      	ldr	r2, [pc, #248]	; (8002848 <main+0x130>)
 8002750:	2101      	movs	r1, #1
 8002752:	2001      	movs	r0, #1
<<<<<<< HEAD
 8002754:	f006 fa90 	bl	8008c78 <osSemaphoreNew>
=======
 8002754:	f006 fc30 	bl	8008fb8 <osSemaphoreNew>
>>>>>>> e9380fc... optimisation RAM=)
 8002758:	4603      	mov	r3, r0
 800275a:	4a3c      	ldr	r2, [pc, #240]	; (800284c <main+0x134>)
 800275c:	6013      	str	r3, [r2, #0]

  /* creation of set_rts_val_Sem */
  set_rts_val_SemHandle = osSemaphoreNew(1, 1, &set_rts_val_Sem_attributes);
 800275e:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <main+0x138>)
 8002760:	2101      	movs	r1, #1
 8002762:	2001      	movs	r0, #1
<<<<<<< HEAD
 8002764:	f006 fa88 	bl	8008c78 <osSemaphoreNew>
=======
 8002764:	f006 fc28 	bl	8008fb8 <osSemaphoreNew>
>>>>>>> e9380fc... optimisation RAM=)
 8002768:	4603      	mov	r3, r0
 800276a:	4a3a      	ldr	r2, [pc, #232]	; (8002854 <main+0x13c>)
 800276c:	6013      	str	r3, [r2, #0]

  /* creation of red_data_fron_rtc_Sem */
  red_data_fron_rtc_SemHandle = osSemaphoreNew(1, 1, &red_data_fron_rtc_Sem_attributes);
 800276e:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <main+0x140>)
 8002770:	2101      	movs	r1, #1
 8002772:	2001      	movs	r0, #1
<<<<<<< HEAD
 8002774:	f006 fa80 	bl	8008c78 <osSemaphoreNew>
=======
 8002774:	f006 fc20 	bl	8008fb8 <osSemaphoreNew>
>>>>>>> e9380fc... optimisation RAM=)
 8002778:	4603      	mov	r3, r0
 800277a:	4a38      	ldr	r2, [pc, #224]	; (800285c <main+0x144>)
 800277c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
<<<<<<< HEAD
  /* creation of buttonQueue */
  buttonQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &buttonQueue_attributes);
 800277e:	4a38      	ldr	r2, [pc, #224]	; (8002860 <main+0x148>)
 8002780:	2102      	movs	r1, #2
 8002782:	2002      	movs	r0, #2
 8002784:	f006 fbd2 	bl	8008f2c <osMessageQueueNew>
 8002788:	4603      	mov	r3, r0
 800278a:	4a36      	ldr	r2, [pc, #216]	; (8002864 <main+0x14c>)
 800278c:	6013      	str	r3, [r2, #0]

  /* creation of THPQueue */
  THPQueueHandle = osMessageQueueNew (2, sizeof(QUEUE_BME280), &THPQueue_attributes);
 800278e:	4a36      	ldr	r2, [pc, #216]	; (8002868 <main+0x150>)
 8002790:	210c      	movs	r1, #12
 8002792:	2002      	movs	r0, #2
 8002794:	f006 fbca 	bl	8008f2c <osMessageQueueNew>
 8002798:	4603      	mov	r3, r0
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <main+0x154>)
 800279c:	6013      	str	r3, [r2, #0]

  /* creation of rtc_queue */
  rtc_queueHandle = osMessageQueueNew (2, sizeof(QUEUE_RTC), &rtc_queue_attributes);
 800279e:	4a34      	ldr	r2, [pc, #208]	; (8002870 <main+0x158>)
 80027a0:	2107      	movs	r1, #7
 80027a2:	2002      	movs	r0, #2
 80027a4:	f006 fbc2 	bl	8008f2c <osMessageQueueNew>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <main+0x15c>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* creation of new_rtc_queue */
  new_rtc_queueHandle = osMessageQueueNew (2, sizeof(QUEUE_NEW_RTC), &new_rtc_queue_attributes);
 80027ae:	4a32      	ldr	r2, [pc, #200]	; (8002878 <main+0x160>)
 80027b0:	2107      	movs	r1, #7
 80027b2:	2002      	movs	r0, #2
 80027b4:	f006 fbba 	bl	8008f2c <osMessageQueueNew>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <main+0x164>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* creation of QUEUE_RTC_VAL */
  QUEUE_RTC_VALHandle = osMessageQueueNew (2, sizeof(QUEUE_RTC_VAL), &QUEUE_RTC_VAL_attributes);
 80027be:	4a30      	ldr	r2, [pc, #192]	; (8002880 <main+0x168>)
 80027c0:	2118      	movs	r1, #24
 80027c2:	2002      	movs	r0, #2
 80027c4:	f006 fbb2 	bl	8008f2c <osMessageQueueNew>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4a2e      	ldr	r2, [pc, #184]	; (8002884 <main+0x16c>)
 80027cc:	6013      	str	r3, [r2, #0]
=======
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (2, sizeof(QUEUE_t), &UARTQueue_attributes);
 800277e:	4a40      	ldr	r2, [pc, #256]	; (8002880 <main+0x168>)
 8002780:	f44f 7119 	mov.w	r1, #612	; 0x264
 8002784:	2002      	movs	r0, #2
 8002786:	f006 fd71 	bl	800926c <osMessageQueueNew>
 800278a:	4603      	mov	r3, r0
 800278c:	4a3d      	ldr	r2, [pc, #244]	; (8002884 <main+0x16c>)
 800278e:	6013      	str	r3, [r2, #0]

  /* creation of buttonQueue */
  buttonQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &buttonQueue_attributes);
 8002790:	4a3d      	ldr	r2, [pc, #244]	; (8002888 <main+0x170>)
 8002792:	2102      	movs	r1, #2
 8002794:	2002      	movs	r0, #2
 8002796:	f006 fd69 	bl	800926c <osMessageQueueNew>
 800279a:	4603      	mov	r3, r0
 800279c:	4a3b      	ldr	r2, [pc, #236]	; (800288c <main+0x174>)
 800279e:	6013      	str	r3, [r2, #0]

  /* creation of THPQueue */
  THPQueueHandle = osMessageQueueNew (2, sizeof(QUEUE_BME280), &THPQueue_attributes);
 80027a0:	4a3b      	ldr	r2, [pc, #236]	; (8002890 <main+0x178>)
 80027a2:	210c      	movs	r1, #12
 80027a4:	2002      	movs	r0, #2
 80027a6:	f006 fd61 	bl	800926c <osMessageQueueNew>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4a39      	ldr	r2, [pc, #228]	; (8002894 <main+0x17c>)
 80027ae:	6013      	str	r3, [r2, #0]

  /* creation of rtc_queue */
  rtc_queueHandle = osMessageQueueNew (2, sizeof(QUEUE_RTC), &rtc_queue_attributes);
 80027b0:	4a39      	ldr	r2, [pc, #228]	; (8002898 <main+0x180>)
 80027b2:	2107      	movs	r1, #7
 80027b4:	2002      	movs	r0, #2
 80027b6:	f006 fd59 	bl	800926c <osMessageQueueNew>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a37      	ldr	r2, [pc, #220]	; (800289c <main+0x184>)
 80027be:	6013      	str	r3, [r2, #0]

  /* creation of new_rtc_queue */
  new_rtc_queueHandle = osMessageQueueNew (2, sizeof(QUEUE_NEW_RTC), &new_rtc_queue_attributes);
 80027c0:	4a37      	ldr	r2, [pc, #220]	; (80028a0 <main+0x188>)
 80027c2:	2107      	movs	r1, #7
 80027c4:	2002      	movs	r0, #2
 80027c6:	f006 fd51 	bl	800926c <osMessageQueueNew>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4a35      	ldr	r2, [pc, #212]	; (80028a4 <main+0x18c>)
 80027ce:	6013      	str	r3, [r2, #0]

  /* creation of QUEUE_RTC_VAL */
  QUEUE_RTC_VALHandle = osMessageQueueNew (2, sizeof(QUEUE_RTC_VAL), &QUEUE_RTC_VAL_attributes);
 80027d0:	4a35      	ldr	r2, [pc, #212]	; (80028a8 <main+0x190>)
 80027d2:	2118      	movs	r1, #24
 80027d4:	2002      	movs	r0, #2
 80027d6:	f006 fd49 	bl	800926c <osMessageQueueNew>
 80027da:	4603      	mov	r3, r0
 80027dc:	4a33      	ldr	r2, [pc, #204]	; (80028ac <main+0x194>)
 80027de:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
<<<<<<< HEAD
 80027ce:	4a2e      	ldr	r2, [pc, #184]	; (8002888 <main+0x170>)
 80027d0:	2100      	movs	r1, #0
 80027d2:	482e      	ldr	r0, [pc, #184]	; (800288c <main+0x174>)
 80027d4:	f005 ffc8 	bl	8008768 <osThreadNew>
 80027d8:	4603      	mov	r3, r0
 80027da:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <main+0x178>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* creation of RTC_DS3231_Task */
  RTC_DS3231_TaskHandle = osThreadNew(start_RTC_DS3231_Task, NULL, &RTC_DS3231_Task_attributes);
 80027de:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <main+0x17c>)
 80027e0:	2100      	movs	r1, #0
 80027e2:	482d      	ldr	r0, [pc, #180]	; (8002898 <main+0x180>)
 80027e4:	f005 ffc0 	bl	8008768 <osThreadNew>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4a2c      	ldr	r2, [pc, #176]	; (800289c <main+0x184>)
 80027ec:	6013      	str	r3, [r2, #0]

  /* creation of BPE280_Task */
  BPE280_TaskHandle = osThreadNew(start_BPE280_Task, NULL, &BPE280_Task_attributes);
 80027ee:	4a2c      	ldr	r2, [pc, #176]	; (80028a0 <main+0x188>)
 80027f0:	2100      	movs	r1, #0
 80027f2:	482c      	ldr	r0, [pc, #176]	; (80028a4 <main+0x18c>)
 80027f4:	f005 ffb8 	bl	8008768 <osThreadNew>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a2b      	ldr	r2, [pc, #172]	; (80028a8 <main+0x190>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* creation of SET_RTS_TASK */
  SET_RTS_TASKHandle = osThreadNew(start_SET_RTS_TASK, NULL, &SET_RTS_TASK_attributes);
 80027fe:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <main+0x194>)
 8002800:	2100      	movs	r1, #0
 8002802:	482b      	ldr	r0, [pc, #172]	; (80028b0 <main+0x198>)
 8002804:	f005 ffb0 	bl	8008768 <osThreadNew>
 8002808:	4603      	mov	r3, r0
 800280a:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <main+0x19c>)
 800280c:	6013      	str	r3, [r2, #0]

  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(start_LCD_Task, NULL, &LCD_Task_attributes);
 800280e:	4a2a      	ldr	r2, [pc, #168]	; (80028b8 <main+0x1a0>)
 8002810:	2100      	movs	r1, #0
 8002812:	482a      	ldr	r0, [pc, #168]	; (80028bc <main+0x1a4>)
 8002814:	f005 ffa8 	bl	8008768 <osThreadNew>
 8002818:	4603      	mov	r3, r0
 800281a:	4a29      	ldr	r2, [pc, #164]	; (80028c0 <main+0x1a8>)
 800281c:	6013      	str	r3, [r2, #0]

  /* creation of NRF24L01_Task */
  NRF24L01_TaskHandle = osThreadNew(Start_NRF24L01, NULL, &NRF24L01_Task_attributes);
 800281e:	4a29      	ldr	r2, [pc, #164]	; (80028c4 <main+0x1ac>)
 8002820:	2100      	movs	r1, #0
 8002822:	4829      	ldr	r0, [pc, #164]	; (80028c8 <main+0x1b0>)
 8002824:	f005 ffa0 	bl	8008768 <osThreadNew>
 8002828:	4603      	mov	r3, r0
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <main+0x1b4>)
 800282c:	6013      	str	r3, [r2, #0]
=======
 80027e0:	4a33      	ldr	r2, [pc, #204]	; (80028b0 <main+0x198>)
 80027e2:	2100      	movs	r1, #0
 80027e4:	4833      	ldr	r0, [pc, #204]	; (80028b4 <main+0x19c>)
 80027e6:	f006 f95f 	bl	8008aa8 <osThreadNew>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4a32      	ldr	r2, [pc, #200]	; (80028b8 <main+0x1a0>)
 80027ee:	6013      	str	r3, [r2, #0]

  /* creation of RTC_DS3231_Task */
  RTC_DS3231_TaskHandle = osThreadNew(start_RTC_DS3231_Task, NULL, &RTC_DS3231_Task_attributes);
 80027f0:	4a32      	ldr	r2, [pc, #200]	; (80028bc <main+0x1a4>)
 80027f2:	2100      	movs	r1, #0
 80027f4:	4832      	ldr	r0, [pc, #200]	; (80028c0 <main+0x1a8>)
 80027f6:	f006 f957 	bl	8008aa8 <osThreadNew>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a31      	ldr	r2, [pc, #196]	; (80028c4 <main+0x1ac>)
 80027fe:	6013      	str	r3, [r2, #0]

  /* creation of BPE280_Task */
  BPE280_TaskHandle = osThreadNew(start_BPE280_Task, NULL, &BPE280_Task_attributes);
 8002800:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <main+0x1b0>)
 8002802:	2100      	movs	r1, #0
 8002804:	4831      	ldr	r0, [pc, #196]	; (80028cc <main+0x1b4>)
 8002806:	f006 f94f 	bl	8008aa8 <osThreadNew>
 800280a:	4603      	mov	r3, r0
 800280c:	4a30      	ldr	r2, [pc, #192]	; (80028d0 <main+0x1b8>)
 800280e:	6013      	str	r3, [r2, #0]

  /* creation of SET_RTS_TASK */
  SET_RTS_TASKHandle = osThreadNew(start_SET_RTS_TASK, NULL, &SET_RTS_TASK_attributes);
 8002810:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <main+0x1bc>)
 8002812:	2100      	movs	r1, #0
 8002814:	4830      	ldr	r0, [pc, #192]	; (80028d8 <main+0x1c0>)
 8002816:	f006 f947 	bl	8008aa8 <osThreadNew>
 800281a:	4603      	mov	r3, r0
 800281c:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <main+0x1c4>)
 800281e:	6013      	str	r3, [r2, #0]

  /* creation of UART_USB_Task */
  UART_USB_TaskHandle = osThreadNew(start_UART_USB_Task, NULL, &UART_USB_Task_attributes);
 8002820:	4a2f      	ldr	r2, [pc, #188]	; (80028e0 <main+0x1c8>)
 8002822:	2100      	movs	r1, #0
 8002824:	482f      	ldr	r0, [pc, #188]	; (80028e4 <main+0x1cc>)
 8002826:	f006 f93f 	bl	8008aa8 <osThreadNew>
 800282a:	4603      	mov	r3, r0
 800282c:	4a2e      	ldr	r2, [pc, #184]	; (80028e8 <main+0x1d0>)
 800282e:	6013      	str	r3, [r2, #0]

  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(start_LCD_Task, NULL, &LCD_Task_attributes);
 8002830:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <main+0x1d4>)
 8002832:	2100      	movs	r1, #0
 8002834:	482e      	ldr	r0, [pc, #184]	; (80028f0 <main+0x1d8>)
 8002836:	f006 f937 	bl	8008aa8 <osThreadNew>
 800283a:	4603      	mov	r3, r0
 800283c:	4a2d      	ldr	r2, [pc, #180]	; (80028f4 <main+0x1dc>)
 800283e:	6013      	str	r3, [r2, #0]

  /* creation of NRF24L01_Task */
  NRF24L01_TaskHandle = osThreadNew(Start_NRF24L01, NULL, &NRF24L01_Task_attributes);
 8002840:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <main+0x1e0>)
 8002842:	2100      	movs	r1, #0
 8002844:	482d      	ldr	r0, [pc, #180]	; (80028fc <main+0x1e4>)
 8002846:	f006 f92f 	bl	8008aa8 <osThreadNew>
 800284a:	4603      	mov	r3, r0
 800284c:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <main+0x1e8>)
 800284e:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)

  /* USER CODE BEGIN RTOS_THREADS */

  HAL_TIM_Base_Start_IT(&htim2);		//  This TIM3 using for calculate how many time all tasks was running.
<<<<<<< HEAD
 800282e:	4828      	ldr	r0, [pc, #160]	; (80028d0 <main+0x1b8>)
 8002830:	f004 ff8e 	bl	8007750 <HAL_TIM_Base_Start_IT>
=======
 8002850:	482c      	ldr	r0, [pc, #176]	; (8002904 <main+0x1ec>)
 8002852:	f005 f8d9 	bl	8007a08 <HAL_TIM_Base_Start_IT>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 8002834:	f005 ff64 	bl	8008700 <osKernelStart>
=======
 8002856:	f006 f8f3 	bl	8008a40 <osKernelStart>
>>>>>>> e9380fc... optimisation RAM=)

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 8002838:	e7fe      	b.n	8002838 <main+0x120>
 800283a:	bf00      	nop
 800283c:	200000ac 	.word	0x200000ac
 8002840:	0800d218 	.word	0x0800d218
 8002844:	200003b8 	.word	0x200003b8
 8002848:	0800d228 	.word	0x0800d228
 800284c:	200003bc 	.word	0x200003bc
 8002850:	0800d238 	.word	0x0800d238
 8002854:	200003c0 	.word	0x200003c0
 8002858:	0800d248 	.word	0x0800d248
 800285c:	200003c4 	.word	0x200003c4
 8002860:	0800d1a0 	.word	0x0800d1a0
 8002864:	200001fc 	.word	0x200001fc
 8002868:	0800d1b8 	.word	0x0800d1b8
 800286c:	20000200 	.word	0x20000200
 8002870:	0800d1d0 	.word	0x0800d1d0
 8002874:	2000026c 	.word	0x2000026c
 8002878:	0800d1e8 	.word	0x0800d1e8
 800287c:	200002d0 	.word	0x200002d0
 8002880:	0800d200 	.word	0x0800d200
 8002884:	20000334 	.word	0x20000334
 8002888:	0800d0c8 	.word	0x0800d0c8
 800288c:	08002ca5 	.word	0x08002ca5
 8002890:	200001e4 	.word	0x200001e4
 8002894:	0800d0ec 	.word	0x0800d0ec
 8002898:	08002cb9 	.word	0x08002cb9
 800289c:	200001e8 	.word	0x200001e8
 80028a0:	0800d110 	.word	0x0800d110
 80028a4:	08002dd1 	.word	0x08002dd1
 80028a8:	200001ec 	.word	0x200001ec
 80028ac:	0800d134 	.word	0x0800d134
 80028b0:	08002ebd 	.word	0x08002ebd
 80028b4:	200001f0 	.word	0x200001f0
 80028b8:	0800d158 	.word	0x0800d158
 80028bc:	080035e1 	.word	0x080035e1
 80028c0:	200001f4 	.word	0x200001f4
 80028c4:	0800d17c 	.word	0x0800d17c
 80028c8:	08004139 	.word	0x08004139
 80028cc:	200001f8 	.word	0x200001f8
 80028d0:	20000158 	.word	0x20000158

080028d4 <SystemClock_Config>:
=======
 800285a:	e7fe      	b.n	800285a <main+0x142>
 800285c:	200002a8 	.word	0x200002a8
 8002860:	0800dd68 	.word	0x0800dd68
 8002864:	20000ad4 	.word	0x20000ad4
 8002868:	0800dd78 	.word	0x0800dd78
 800286c:	20000ad8 	.word	0x20000ad8
 8002870:	0800dd88 	.word	0x0800dd88
 8002874:	20000adc 	.word	0x20000adc
 8002878:	0800dd98 	.word	0x0800dd98
 800287c:	20000ae0 	.word	0x20000ae0
 8002880:	0800dcd8 	.word	0x0800dcd8
 8002884:	200003fc 	.word	0x200003fc
 8002888:	0800dcf0 	.word	0x0800dcf0
 800288c:	20000918 	.word	0x20000918
 8002890:	0800dd08 	.word	0x0800dd08
 8002894:	2000091c 	.word	0x2000091c
 8002898:	0800dd20 	.word	0x0800dd20
 800289c:	20000988 	.word	0x20000988
 80028a0:	0800dd38 	.word	0x0800dd38
 80028a4:	200009ec 	.word	0x200009ec
 80028a8:	0800dd50 	.word	0x0800dd50
 80028ac:	20000a50 	.word	0x20000a50
 80028b0:	0800dbdc 	.word	0x0800dbdc
 80028b4:	08002cd9 	.word	0x08002cd9
 80028b8:	200003e0 	.word	0x200003e0
 80028bc:	0800dc00 	.word	0x0800dc00
 80028c0:	08002ced 	.word	0x08002ced
 80028c4:	200003e4 	.word	0x200003e4
 80028c8:	0800dc24 	.word	0x0800dc24
 80028cc:	08002e05 	.word	0x08002e05
 80028d0:	200003e8 	.word	0x200003e8
 80028d4:	0800dc48 	.word	0x0800dc48
 80028d8:	08002ef1 	.word	0x08002ef1
 80028dc:	200003ec 	.word	0x200003ec
 80028e0:	0800dc6c 	.word	0x0800dc6c
 80028e4:	08003615 	.word	0x08003615
 80028e8:	200003f0 	.word	0x200003f0
 80028ec:	0800dc90 	.word	0x0800dc90
 80028f0:	08003881 	.word	0x08003881
 80028f4:	200003f4 	.word	0x200003f4
 80028f8:	0800dcb4 	.word	0x0800dcb4
 80028fc:	080043d9 	.word	0x080043d9
 8002900:	200003f8 	.word	0x200003f8
 8002904:	20000354 	.word	0x20000354

08002908 <SystemClock_Config>:
>>>>>>> e9380fc... optimisation RAM=)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b090      	sub	sp, #64	; 0x40
 80028d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 80028da:	f107 0318 	add.w	r3, r7, #24
 80028de:	2228      	movs	r2, #40	; 0x28
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f009 fd4c 	bl	800c380 <memset>
=======
 800290e:	f107 0318 	add.w	r3, r7, #24
 8002912:	2228      	movs	r2, #40	; 0x28
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f00a f9fe 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	60da      	str	r2, [r3, #12]
 80028f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002904:	2301      	movs	r3, #1
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002908:	2302      	movs	r3, #2
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800290c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002912:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 8002918:	f107 0318 	add.w	r3, r7, #24
 800291c:	4618      	mov	r0, r3
 800291e:	f003 ff13 	bl	8006748 <HAL_RCC_OscConfig>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002928:	f001 fc26 	bl	8004178 <Error_Handler>
=======
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	4618      	mov	r0, r3
 8002952:	f004 f855 	bl	8006a00 <HAL_RCC_OscConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800295c:	f001 fd68 	bl	8004430 <Error_Handler>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800292c:	230f      	movs	r3, #15
 800292e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002930:	2302      	movs	r3, #2
 8002932:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800293c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
<<<<<<< HEAD
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	2102      	movs	r1, #2
 8002946:	4618      	mov	r0, r3
 8002948:	f004 f980 	bl	8006c4c <HAL_RCC_ClockConfig>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002952:	f001 fc11 	bl	8004178 <Error_Handler>
=======
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2102      	movs	r1, #2
 800297a:	4618      	mov	r0, r3
 800297c:	f004 fac2 	bl	8006f04 <HAL_RCC_ClockConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002986:	f001 fd53 	bl	8004430 <Error_Handler>
>>>>>>> e9380fc... optimisation RAM=)
  }
}
 8002956:	bf00      	nop
 8002958:	3740      	adds	r7, #64	; 0x40
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <MX_I2C1_Init+0x50>)
 8002966:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <MX_I2C1_Init+0x54>)
 8002968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <MX_I2C1_Init+0x50>)
 800296c:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <MX_I2C1_Init+0x58>)
 800296e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <MX_I2C1_Init+0x50>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <MX_I2C1_Init+0x50>)
 8002978:	2200      	movs	r2, #0
 800297a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <MX_I2C1_Init+0x50>)
 800297e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002982:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <MX_I2C1_Init+0x50>)
 8002986:	2200      	movs	r2, #0
 8002988:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <MX_I2C1_Init+0x50>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <MX_I2C1_Init+0x50>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <MX_I2C1_Init+0x50>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
<<<<<<< HEAD
 800299c:	4804      	ldr	r0, [pc, #16]	; (80029b0 <MX_I2C1_Init+0x50>)
 800299e:	f002 fa0d 	bl	8004dbc <HAL_I2C_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029a8:	f001 fbe6 	bl	8004178 <Error_Handler>
=======
 80029d0:	4804      	ldr	r0, [pc, #16]	; (80029e4 <MX_I2C1_Init+0x50>)
 80029d2:	f002 fb4f 	bl	8005074 <HAL_I2C_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029dc:	f001 fd28 	bl	8004430 <Error_Handler>
>>>>>>> e9380fc... optimisation RAM=)
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200000ac 	.word	0x200000ac
 80029b4:	40005400 	.word	0x40005400
 80029b8:	000186a0 	.word	0x000186a0
=======
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200002a8 	.word	0x200002a8
 80029e8:	40005400 	.word	0x40005400
 80029ec:	000186a0 	.word	0x000186a0
>>>>>>> e9380fc... optimisation RAM=)

080029bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029c2:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <MX_SPI1_Init+0x68>)
 80029c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029f0:	2208      	movs	r2, #8
 80029f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_SPI1_Init+0x64>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a08:	220a      	movs	r2, #10
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
<<<<<<< HEAD
 8002a0c:	4804      	ldr	r0, [pc, #16]	; (8002a20 <MX_SPI1_Init+0x64>)
 8002a0e:	f004 fae5 	bl	8006fdc <HAL_SPI_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a18:	f001 fbae 	bl	8004178 <Error_Handler>
=======
 8002a40:	4804      	ldr	r0, [pc, #16]	; (8002a54 <MX_SPI1_Init+0x64>)
 8002a42:	f004 fc27 	bl	8007294 <HAL_SPI_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a4c:	f001 fcf0 	bl	8004430 <Error_Handler>
>>>>>>> e9380fc... optimisation RAM=)
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000100 	.word	0x20000100
 8002a24:	40013000 	.word	0x40013000
=======
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	200002fc 	.word	0x200002fc
 8002a58:	40013000 	.word	0x40013000
>>>>>>> e9380fc... optimisation RAM=)

08002a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a2e:	f107 0308 	add.w	r3, r7, #8
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <MX_TIM2_Init+0x94>)
 8002a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <MX_TIM2_Init+0x94>)
 8002a4e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002a52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <MX_TIM2_Init+0x94>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <MX_TIM2_Init+0x94>)
 8002a5c:	220a      	movs	r2, #10
 8002a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <MX_TIM2_Init+0x94>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <MX_TIM2_Init+0x94>)
 8002a68:	2280      	movs	r2, #128	; 0x80
 8002a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
<<<<<<< HEAD
 8002a6c:	4813      	ldr	r0, [pc, #76]	; (8002abc <MX_TIM2_Init+0x94>)
 8002a6e:	f004 fe1f 	bl	80076b0 <HAL_TIM_Base_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a78:	f001 fb7e 	bl	8004178 <Error_Handler>
=======
 8002aa0:	4813      	ldr	r0, [pc, #76]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002aa2:	f004 ff61 	bl	8007968 <HAL_TIM_Base_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002aac:	f001 fcc0 	bl	8004430 <Error_Handler>
>>>>>>> e9380fc... optimisation RAM=)
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
<<<<<<< HEAD
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	4619      	mov	r1, r3
 8002a88:	480c      	ldr	r0, [pc, #48]	; (8002abc <MX_TIM2_Init+0x94>)
 8002a8a:	f004 ffbb 	bl	8007a04 <HAL_TIM_ConfigClockSource>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a94:	f001 fb70 	bl	8004178 <Error_Handler>
=======
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	4619      	mov	r1, r3
 8002abc:	480c      	ldr	r0, [pc, #48]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002abe:	f005 f8fd 	bl	8007cbc <HAL_TIM_ConfigClockSource>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ac8:	f001 fcb2 	bl	8004430 <Error_Handler>
>>>>>>> e9380fc... optimisation RAM=)
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
<<<<<<< HEAD
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4805      	ldr	r0, [pc, #20]	; (8002abc <MX_TIM2_Init+0x94>)
 8002aa6:	f005 f98d 	bl	8007dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ab0:	f001 fb62 	bl	8004178 <Error_Handler>
=======
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002ada:	f005 facf 	bl	800807c <HAL_TIMEx_MasterConfigSynchronization>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ae4:	f001 fca4 	bl	8004430 <Error_Handler>
>>>>>>> e9380fc... optimisation RAM=)
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< HEAD
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000158 	.word	0x20000158
=======
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000354 	.word	0x20000354
>>>>>>> e9380fc... optimisation RAM=)

08002ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <MX_USART1_UART_Init+0x4c>)
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <MX_USART1_UART_Init+0x50>)
 8002ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <MX_USART1_UART_Init+0x4c>)
 8002acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <MX_USART1_UART_Init+0x4c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <MX_USART1_UART_Init+0x4c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <MX_USART1_UART_Init+0x4c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <MX_USART1_UART_Init+0x4c>)
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <MX_USART1_UART_Init+0x4c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <MX_USART1_UART_Init+0x4c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
<<<<<<< HEAD
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_USART1_UART_Init+0x4c>)
 8002af8:	f005 f9d4 	bl	8007ea4 <HAL_UART_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b02:	f001 fb39 	bl	8004178 <Error_Handler>
=======
 8002b2a:	4805      	ldr	r0, [pc, #20]	; (8002b40 <MX_USART1_UART_Init+0x4c>)
 8002b2c:	f005 fb16 	bl	800815c <HAL_UART_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b36:	f001 fc7b 	bl	8004430 <Error_Handler>
>>>>>>> e9380fc... optimisation RAM=)
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200001a0 	.word	0x200001a0
 8002b10:	40013800 	.word	0x40013800
=======
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	2000039c 	.word	0x2000039c
 8002b44:	40013800 	.word	0x40013800
>>>>>>> e9380fc... optimisation RAM=)

08002b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1a:	f107 0310 	add.w	r3, r7, #16
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b28:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b2e:	f043 0310 	orr.w	r3, r3, #16
 8002b32:	6193      	str	r3, [r2, #24]
 8002b34:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b40:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4a52      	ldr	r2, [pc, #328]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b46:	f043 0320 	orr.w	r3, r3, #32
 8002b4a:	6193      	str	r3, [r2, #24]
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b58:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4a4c      	ldr	r2, [pc, #304]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	6193      	str	r3, [r2, #24]
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b70:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	4a46      	ldr	r2, [pc, #280]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6193      	str	r3, [r2, #24]
 8002b7c:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <MX_GPIO_Init+0x17c>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
<<<<<<< HEAD
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b8e:	4841      	ldr	r0, [pc, #260]	; (8002c94 <MX_GPIO_Init+0x180>)
 8002b90:	f002 f8e3 	bl	8004d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002b94:	2200      	movs	r2, #0
 8002b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b9a:	483f      	ldr	r0, [pc, #252]	; (8002c98 <MX_GPIO_Init+0x184>)
 8002b9c:	f002 f8dd 	bl	8004d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002ba6:	483d      	ldr	r0, [pc, #244]	; (8002c9c <MX_GPIO_Init+0x188>)
 8002ba8:	f002 f8d7 	bl	8004d5a <HAL_GPIO_WritePin>
=======
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bc2:	4841      	ldr	r0, [pc, #260]	; (8002cc8 <MX_GPIO_Init+0x180>)
 8002bc4:	f002 fa25 	bl	8005012 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bce:	483f      	ldr	r0, [pc, #252]	; (8002ccc <MX_GPIO_Init+0x184>)
 8002bd0:	f002 fa1f 	bl	8005012 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002bda:	483d      	ldr	r0, [pc, #244]	; (8002cd0 <MX_GPIO_Init+0x188>)
 8002bdc:	f002 fa19 	bl	8005012 <HAL_GPIO_WritePin>
>>>>>>> e9380fc... optimisation RAM=)

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4833      	ldr	r0, [pc, #204]	; (8002c94 <MX_GPIO_Init+0x180>)
 8002bc6:	f001 ff2d 	bl	8004a24 <HAL_GPIO_Init>
=======
 8002bf2:	f107 0310 	add.w	r3, r7, #16
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4833      	ldr	r0, [pc, #204]	; (8002cc8 <MX_GPIO_Init+0x180>)
 8002bfa:	f002 f86f 	bl	8004cdc <HAL_GPIO_Init>
>>>>>>> e9380fc... optimisation RAM=)

  /*Configure GPIO pin : INTERUPT_FROM_RTC_Pin */
  GPIO_InitStruct.Pin = INTERUPT_FROM_RTC_Pin;
 8002bca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <MX_GPIO_Init+0x18c>)
 8002bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INTERUPT_FROM_RTC_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8002bd8:	f107 0310 	add.w	r3, r7, #16
 8002bdc:	4619      	mov	r1, r3
 8002bde:	482d      	ldr	r0, [pc, #180]	; (8002c94 <MX_GPIO_Init+0x180>)
 8002be0:	f001 ff20 	bl	8004a24 <HAL_GPIO_Init>
=======
 8002c0c:	f107 0310 	add.w	r3, r7, #16
 8002c10:	4619      	mov	r1, r3
 8002c12:	482d      	ldr	r0, [pc, #180]	; (8002cc8 <MX_GPIO_Init+0x180>)
 8002c14:	f002 f862 	bl	8004cdc <HAL_GPIO_Init>
>>>>>>> e9380fc... optimisation RAM=)

  /*Configure GPIO pins : KEY_4_Pin KEY_3_Pin KEY_2_Pin KEY_1_Pin */
  GPIO_InitStruct.Pin = KEY_4_Pin|KEY_3_Pin|KEY_2_Pin|KEY_1_Pin;
 8002be4:	231e      	movs	r3, #30
 8002be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002be8:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <MX_GPIO_Init+0x18c>)
 8002bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4829      	ldr	r0, [pc, #164]	; (8002c9c <MX_GPIO_Init+0x188>)
 8002bf8:	f001 ff14 	bl	8004a24 <HAL_GPIO_Init>
=======
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4829      	ldr	r0, [pc, #164]	; (8002cd0 <MX_GPIO_Init+0x188>)
 8002c2c:	f002 f856 	bl	8004cdc <HAL_GPIO_Init>
>>>>>>> e9380fc... optimisation RAM=)

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c02:	2301      	movs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	4619      	mov	r1, r3
 8002c14:	4820      	ldr	r0, [pc, #128]	; (8002c98 <MX_GPIO_Init+0x184>)
 8002c16:	f001 ff05 	bl	8004a24 <HAL_GPIO_Init>
=======
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	4619      	mov	r1, r3
 8002c48:	4820      	ldr	r0, [pc, #128]	; (8002ccc <MX_GPIO_Init+0x184>)
 8002c4a:	f002 f847 	bl	8004cdc <HAL_GPIO_Init>
>>>>>>> e9380fc... optimisation RAM=)

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin;
 8002c1a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	4619      	mov	r1, r3
 8002c32:	481a      	ldr	r0, [pc, #104]	; (8002c9c <MX_GPIO_Init+0x188>)
 8002c34:	f001 fef6 	bl	8004a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2105      	movs	r1, #5
 8002c3c:	2007      	movs	r0, #7
 8002c3e:	f001 fe16 	bl	800486e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c42:	2007      	movs	r0, #7
 8002c44:	f001 fe2f 	bl	80048a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	2008      	movs	r0, #8
 8002c4e:	f001 fe0e 	bl	800486e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c52:	2008      	movs	r0, #8
 8002c54:	f001 fe27 	bl	80048a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2105      	movs	r1, #5
 8002c5c:	2009      	movs	r0, #9
 8002c5e:	f001 fe06 	bl	800486e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c62:	2009      	movs	r0, #9
 8002c64:	f001 fe1f 	bl	80048a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2105      	movs	r1, #5
 8002c6c:	200a      	movs	r0, #10
 8002c6e:	f001 fdfe 	bl	800486e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002c72:	200a      	movs	r0, #10
 8002c74:	f001 fe17 	bl	80048a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2105      	movs	r1, #5
 8002c7c:	2028      	movs	r0, #40	; 0x28
 8002c7e:	f001 fdf6 	bl	800486e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c82:	2028      	movs	r0, #40	; 0x28
 8002c84:	f001 fe0f 	bl	80048a6 <HAL_NVIC_EnableIRQ>
=======
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	4619      	mov	r1, r3
 8002c66:	481a      	ldr	r0, [pc, #104]	; (8002cd0 <MX_GPIO_Init+0x188>)
 8002c68:	f002 f838 	bl	8004cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2105      	movs	r1, #5
 8002c70:	2007      	movs	r0, #7
 8002c72:	f001 ff58 	bl	8004b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c76:	2007      	movs	r0, #7
 8002c78:	f001 ff71 	bl	8004b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2105      	movs	r1, #5
 8002c80:	2008      	movs	r0, #8
 8002c82:	f001 ff50 	bl	8004b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c86:	2008      	movs	r0, #8
 8002c88:	f001 ff69 	bl	8004b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2105      	movs	r1, #5
 8002c90:	2009      	movs	r0, #9
 8002c92:	f001 ff48 	bl	8004b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c96:	2009      	movs	r0, #9
 8002c98:	f001 ff61 	bl	8004b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2105      	movs	r1, #5
 8002ca0:	200a      	movs	r0, #10
 8002ca2:	f001 ff40 	bl	8004b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ca6:	200a      	movs	r0, #10
 8002ca8:	f001 ff59 	bl	8004b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2105      	movs	r1, #5
 8002cb0:	2028      	movs	r0, #40	; 0x28
 8002cb2:	f001 ff38 	bl	8004b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cb6:	2028      	movs	r0, #40	; 0x28
 8002cb8:	f001 ff51 	bl	8004b5e <HAL_NVIC_EnableIRQ>
>>>>>>> e9380fc... optimisation RAM=)

}
 8002c88:	bf00      	nop
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40011000 	.word	0x40011000
 8002c98:	40010c00 	.word	0x40010c00
 8002c9c:	40010800 	.word	0x40010800
 8002ca0:	10110000 	.word	0x10110000

08002ca4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	for(;;)
	{
	  osDelay(1000);
<<<<<<< HEAD
 8002cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cb0:	f005 fe6c 	bl	800898c <osDelay>
 8002cb4:	e7fa      	b.n	8002cac <StartDefaultTask+0x8>
=======
 8002ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ce4:	f005 fff2 	bl	8008ccc <osDelay>
 8002ce8:	e7fa      	b.n	8002ce0 <StartDefaultTask+0x8>
>>>>>>> e9380fc... optimisation RAM=)
	...

08002cb8 <start_RTC_DS3231_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_RTC_DS3231_Task */
void start_RTC_DS3231_Task(void *argument)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	QUEUE_NEW_RTC QUEUE_NEW_RTC_t;
	_RTC time; 							// rtc_queueHandle

	// Init DS3231 RTC module
	// Turn on interrupt PIN on RTC module every one second
	uint8_t buff = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
	ReadRegister(14, &buff);
 8002cc4:	f107 030f 	add.w	r3, r7, #15
 8002cc8:	4619      	mov	r1, r3
 8002cca:	200e      	movs	r0, #14
 8002ccc:	f7ff fc0e 	bl	80024ec <ReadRegister>
	buff = buff & 0b11100011;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	f023 031c 	bic.w	r3, r3, #28
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	73fb      	strb	r3, [r7, #15]
	WriteRegister(14, buff);
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	200e      	movs	r0, #14
 8002ce0:	f7ff fc30 	bl	8002544 <WriteRegister>

	for(;;)
	{
		if(xQueueReceive(new_rtc_queueHandle , &QUEUE_NEW_RTC_t, 0) == pdTRUE)			// Waiting to new rts time and data
<<<<<<< HEAD
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <start_RTC_DS3231_Task+0x104>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f107 0118 	add.w	r1, r7, #24
 8002cec:	2200      	movs	r2, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f006 ff0a 	bl	8009b08 <xQueueReceive>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d121      	bne.n	8002d3e <start_RTC_DS3231_Task+0x86>
=======
 8002d18:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <start_RTC_DS3231_Task+0x104>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f107 0118 	add.w	r1, r7, #24
 8002d20:	2200      	movs	r2, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f007 f890 	bl	8009e48 <xQueueReceive>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d121      	bne.n	8002d72 <start_RTC_DS3231_Task+0x86>
>>>>>>> e9380fc... optimisation RAM=)
		{
			// Set new time and data
			time.Year = QUEUE_NEW_RTC_t.Year;
 8002cfa:	7e3b      	ldrb	r3, [r7, #24]
 8002cfc:	743b      	strb	r3, [r7, #16]
			time.Month = QUEUE_NEW_RTC_t.Month;
 8002cfe:	7e7b      	ldrb	r3, [r7, #25]
 8002d00:	747b      	strb	r3, [r7, #17]
			time.Date = QUEUE_NEW_RTC_t.Date ;
 8002d02:	7ebb      	ldrb	r3, [r7, #26]
 8002d04:	74bb      	strb	r3, [r7, #18]
			time.DaysOfWeek = QUEUE_NEW_RTC_t.DaysOfWeek;
 8002d06:	7efb      	ldrb	r3, [r7, #27]
 8002d08:	74fb      	strb	r3, [r7, #19]
			time.Hour = QUEUE_NEW_RTC_t.Hour;
 8002d0a:	7f3b      	ldrb	r3, [r7, #28]
 8002d0c:	753b      	strb	r3, [r7, #20]
			time.Min = QUEUE_NEW_RTC_t.Min;
 8002d0e:	7f7b      	ldrb	r3, [r7, #29]
 8002d10:	757b      	strb	r3, [r7, #21]
			time.Sec = QUEUE_NEW_RTC_t.Sec;
 8002d12:	7fbb      	ldrb	r3, [r7, #30]
 8002d14:	75bb      	strb	r3, [r7, #22]

			if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
<<<<<<< HEAD
 8002d16:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <start_RTC_DS3231_Task+0x108>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 fefd 	bl	8008b1c <osMutexAcquire>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <start_RTC_DS3231_Task+0x7a>
=======
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <start_RTC_DS3231_Task+0x108>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f006 f883 	bl	8008e5c <osMutexAcquire>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <start_RTC_DS3231_Task+0x7a>
>>>>>>> e9380fc... optimisation RAM=)
			{
				DS3231_SetTime(&time);
 8002d28:	f107 0310 	add.w	r3, r7, #16
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fb91 	bl	8002454 <DS3231_SetTime>
			}
			osMutexRelease(I2C_MutexHandle);
<<<<<<< HEAD
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <start_RTC_DS3231_Task+0x108>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f005 ff4e 	bl	8008bd8 <osMutexRelease>
 8002d3c:	e7d2      	b.n	8002ce4 <start_RTC_DS3231_Task+0x2c>
=======
 8002d66:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <start_RTC_DS3231_Task+0x108>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f006 f8d4 	bl	8008f18 <osMutexRelease>
 8002d70:	e7d2      	b.n	8002d18 <start_RTC_DS3231_Task+0x2c>
>>>>>>> e9380fc... optimisation RAM=)

		}
		else																			// If no new data - show current time
		{
			if (osSemaphoreAcquire(red_data_fron_rtc_SemHandle, 10) == osOK)		// If was interrupt from RTC PIN module
<<<<<<< HEAD
 8002d3e:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <start_RTC_DS3231_Task+0x10c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	210a      	movs	r1, #10
 8002d44:	4618      	mov	r0, r3
 8002d46:	f006 f833 	bl	8008db0 <osSemaphoreAcquire>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1c9      	bne.n	8002ce4 <start_RTC_DS3231_Task+0x2c>
			{
				if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <start_RTC_DS3231_Task+0x108>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f005 fee0 	bl	8008b1c <osMutexAcquire>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <start_RTC_DS3231_Task+0xb4>
=======
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <start_RTC_DS3231_Task+0x10c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	210a      	movs	r1, #10
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f006 f9b9 	bl	80090f0 <osSemaphoreAcquire>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1c9      	bne.n	8002d18 <start_RTC_DS3231_Task+0x2c>
			{
				if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <start_RTC_DS3231_Task+0x108>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f006 f866 	bl	8008e5c <osMutexAcquire>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <start_RTC_DS3231_Task+0xb4>
>>>>>>> e9380fc... optimisation RAM=)
				{
					DS3231_GetTime(&time);
 8002d62:	f107 0310 	add.w	r3, r7, #16
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff faf8 	bl	800235c <DS3231_GetTime>
				}
				osMutexRelease(I2C_MutexHandle);
<<<<<<< HEAD
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <start_RTC_DS3231_Task+0x108>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 ff31 	bl	8008bd8 <osMutexRelease>
=======
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <start_RTC_DS3231_Task+0x108>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f006 f8b7 	bl	8008f18 <osMutexRelease>
>>>>>>> e9380fc... optimisation RAM=)

				// Fill in structure of queue
				QUEUE_RTC_t.Year = time.Year;
 8002d76:	7c3b      	ldrb	r3, [r7, #16]
 8002d78:	f887 3020 	strb.w	r3, [r7, #32]
				QUEUE_RTC_t.Month = time.Month;
 8002d7c:	7c7b      	ldrb	r3, [r7, #17]
 8002d7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				QUEUE_RTC_t.Date = time.Date;
 8002d82:	7cbb      	ldrb	r3, [r7, #18]
 8002d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				QUEUE_RTC_t.DaysOfWeek = time.DaysOfWeek;
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				QUEUE_RTC_t.Hour = time.Hour;
 8002d8e:	7d3b      	ldrb	r3, [r7, #20]
 8002d90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				QUEUE_RTC_t.Min = time.Min;
 8002d94:	7d7b      	ldrb	r3, [r7, #21]
 8002d96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				QUEUE_RTC_t.Sec = time.Sec;
 8002d9a:	7dbb      	ldrb	r3, [r7, #22]
 8002d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				if(xQueueSend(rtc_queueHandle, &QUEUE_RTC_t, 0) != pdPASS)					// Send current time over queue
<<<<<<< HEAD
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <start_RTC_DS3231_Task+0x110>)
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	f107 0120 	add.w	r1, r7, #32
 8002da8:	2300      	movs	r3, #0
 8002daa:	2200      	movs	r2, #0
 8002dac:	f006 fc88 	bl	80096c0 <xQueueGenericSend>
=======
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <start_RTC_DS3231_Task+0x110>)
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	f107 0120 	add.w	r1, r7, #32
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2200      	movs	r2, #0
 8002de0:	f006 fe0e 	bl	8009a00 <xQueueGenericSend>
>>>>>>> e9380fc... optimisation RAM=)
				{
					// ERROR
				}
				// Give semaphore
				osSemaphoreRelease(LCD_SemHandle);		// Let print time and date on start_LCD_Task
<<<<<<< HEAD
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <start_RTC_DS3231_Task+0x114>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f006 f861 	bl	8008e7c <osSemaphoreRelease>
		if(xQueueReceive(new_rtc_queueHandle , &QUEUE_NEW_RTC_t, 0) == pdTRUE)			// Waiting to new rts time and data
 8002dba:	e793      	b.n	8002ce4 <start_RTC_DS3231_Task+0x2c>
 8002dbc:	200002d0 	.word	0x200002d0
 8002dc0:	200003b8 	.word	0x200003b8
 8002dc4:	200003c4 	.word	0x200003c4
 8002dc8:	2000026c 	.word	0x2000026c
 8002dcc:	200003bc 	.word	0x200003bc

08002dd0 <start_BPE280_Task>:
=======
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <start_RTC_DS3231_Task+0x114>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f006 f9e7 	bl	80091bc <osSemaphoreRelease>
		if(xQueueReceive(new_rtc_queueHandle , &QUEUE_NEW_RTC_t, 0) == pdTRUE)			// Waiting to new rts time and data
 8002dee:	e793      	b.n	8002d18 <start_RTC_DS3231_Task+0x2c>
 8002df0:	200009ec 	.word	0x200009ec
 8002df4:	20000ad4 	.word	0x20000ad4
 8002df8:	20000ae0 	.word	0x20000ae0
 8002dfc:	20000988 	.word	0x20000988
 8002e00:	20000ad8 	.word	0x20000ad8

08002e04 <start_BPE280_Task>:
>>>>>>> e9380fc... optimisation RAM=)
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_BPE280_Task */
void start_BPE280_Task(void *argument)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b098      	sub	sp, #96	; 0x60
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	QUEUE_BME280 QUEUE_BME280_t;
	BMP280_HandleTypedef bmp280;
	float pressure, temperature, humidity;

	// Init BME280
	if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
<<<<<<< HEAD
 8002dd8:	4b34      	ldr	r3, [pc, #208]	; (8002eac <start_BPE280_Task+0xdc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f005 fe9c 	bl	8008b1c <osMutexAcquire>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d122      	bne.n	8002e30 <start_BPE280_Task+0x60>
=======
 8002e0c:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <start_BPE280_Task+0xdc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2101      	movs	r1, #1
 8002e12:	4618      	mov	r0, r3
 8002e14:	f006 f822 	bl	8008e5c <osMutexAcquire>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d122      	bne.n	8002e64 <start_BPE280_Task+0x60>
>>>>>>> e9380fc... optimisation RAM=)
	{
		bmp280_init_default_params(&bmp280.params);
 8002dea:	f107 0318 	add.w	r3, r7, #24
 8002dee:	332c      	adds	r3, #44	; 0x2c
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe fc7b 	bl	80016ec <bmp280_init_default_params>
		bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002df6:	2376      	movs	r3, #118	; 0x76
 8002df8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		bmp280.i2c = &hi2c1;
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <start_BPE280_Task+0xe0>)
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40

		if(bmp280_init(&bmp280, &bmp280.params) != true)
 8002dfe:	f107 0318 	add.w	r3, r7, #24
 8002e02:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002e06:	f107 0318 	add.w	r3, r7, #24
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe fde6 	bl	80019de <bmp280_init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d000      	beq.n	8002e20 <start_BPE280_Task+0x50>
		{
			while(1){}   								// ERROR
 8002e1e:	e7fe      	b.n	8002e1e <start_BPE280_Task+0x4e>
		}

		bool bme280p = bmp280.id == BME280_CHIP_ID;
 8002e20:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002e24:	2b60      	cmp	r3, #96	; 0x60
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}
	osMutexRelease(I2C_MutexHandle);
<<<<<<< HEAD
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <start_BPE280_Task+0xdc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f005 fecf 	bl	8008bd8 <osMutexRelease>
=======
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <start_BPE280_Task+0xdc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f006 f855 	bl	8008f18 <osMutexRelease>
>>>>>>> e9380fc... optimisation RAM=)


	for(;;)
	{
		if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
<<<<<<< HEAD
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <start_BPE280_Task+0xdc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4618      	mov	r0, r3
 8002e42:	f005 fe6b 	bl	8008b1c <osMutexAcquire>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d124      	bne.n	8002e96 <start_BPE280_Task+0xc6>
=======
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <start_BPE280_Task+0xdc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2101      	movs	r1, #1
 8002e74:	4618      	mov	r0, r3
 8002e76:	f005 fff1 	bl	8008e5c <osMutexAcquire>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d124      	bne.n	8002eca <start_BPE280_Task+0xc6>
>>>>>>> e9380fc... optimisation RAM=)
		{
			if((bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) != true)
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	f107 0214 	add.w	r2, r7, #20
 8002e54:	f107 0110 	add.w	r1, r7, #16
 8002e58:	f107 0018 	add.w	r0, r7, #24
 8002e5c:	f7ff fa22 	bl	80022a4 <bmp280_read_float>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d000      	beq.n	8002e6e <start_BPE280_Task+0x9e>
			{
				while(1){}								// ERROR
 8002e6c:	e7fe      	b.n	8002e6c <start_BPE280_Task+0x9c>
			}
			else										// IF all okay. Send data into QUEUE to the main task
			{
				// Fill in fields of struct
				QUEUE_BME280_t.temperature = temperature;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	653b      	str	r3, [r7, #80]	; 0x50
				QUEUE_BME280_t.humidity = humidity;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	657b      	str	r3, [r7, #84]	; 0x54
				QUEUE_BME280_t.pressure = pressure;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	64fb      	str	r3, [r7, #76]	; 0x4c

				int status_queue = xQueueSend(THPQueueHandle, &QUEUE_BME280_t, 0);		// Send data into queue
<<<<<<< HEAD
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <start_BPE280_Task+0xe4>)
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002e82:	2300      	movs	r3, #0
 8002e84:	2200      	movs	r2, #0
 8002e86:	f006 fc1b 	bl	80096c0 <xQueueGenericSend>
 8002e8a:	65b8      	str	r0, [r7, #88]	; 0x58
=======
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <start_BPE280_Task+0xe4>)
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f006 fda1 	bl	8009a00 <xQueueGenericSend>
 8002ebe:	65b8      	str	r0, [r7, #88]	; 0x58
>>>>>>> e9380fc... optimisation RAM=)
				if(status_queue != pdPASS)
				{
					// ERROR
				}
				// Give semaphore
				osSemaphoreRelease(LCD_SemHandle);		// Let print T, H and P on start_LCD_Task
<<<<<<< HEAD
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <start_BPE280_Task+0xe8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f005 fff3 	bl	8008e7c <osSemaphoreRelease>
			}
		}
		osMutexRelease(I2C_MutexHandle);
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <start_BPE280_Task+0xdc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f005 fe9c 	bl	8008bd8 <osMutexRelease>

		osDelay(5000);
 8002ea0:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ea4:	f005 fd72 	bl	800898c <osDelay>
		if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002ea8:	e7c7      	b.n	8002e3a <start_BPE280_Task+0x6a>
 8002eaa:	bf00      	nop
 8002eac:	200003b8 	.word	0x200003b8
 8002eb0:	200000ac 	.word	0x200000ac
 8002eb4:	20000200 	.word	0x20000200
 8002eb8:	200003bc 	.word	0x200003bc

08002ebc <start_SET_RTS_TASK>:
=======
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <start_BPE280_Task+0xe8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f006 f979 	bl	80091bc <osSemaphoreRelease>
			}
		}
		osMutexRelease(I2C_MutexHandle);
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <start_BPE280_Task+0xdc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f006 f822 	bl	8008f18 <osMutexRelease>

		osDelay(5000);
 8002ed4:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ed8:	f005 fef8 	bl	8008ccc <osDelay>
		if(osMutexAcquire (I2C_MutexHandle, 1) == osOK)
 8002edc:	e7c7      	b.n	8002e6e <start_BPE280_Task+0x6a>
 8002ede:	bf00      	nop
 8002ee0:	20000ad4 	.word	0x20000ad4
 8002ee4:	200002a8 	.word	0x200002a8
 8002ee8:	2000091c 	.word	0x2000091c
 8002eec:	20000ad8 	.word	0x20000ad8

08002ef0 <start_SET_RTS_TASK>:
>>>>>>> e9380fc... optimisation RAM=)
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_SET_RTS_TASK */
void start_SET_RTS_TASK(void *argument)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b08f      	sub	sp, #60	; 0x3c
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	QUEUE_NEW_RTC QUEUE_NEW_RTC_t;
	QUEUE_RTC_VAL QUEUE_RTC_VAL_t;

	for(;;)
	{
		uint16_t pressed_key, status_queue = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	86fb      	strh	r3, [r7, #54]	; 0x36

		if(osSemaphoreAcquire(set_rts_val_SemHandle, 10) == osOK)					// Waiting on the press any button
<<<<<<< HEAD
 8002ec8:	4b88      	ldr	r3, [pc, #544]	; (80030ec <start_SET_RTS_TASK+0x230>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	210a      	movs	r1, #10
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f005 ff6e 	bl	8008db0 <osSemaphoreAcquire>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f4      	bne.n	8002ec4 <start_SET_RTS_TASK+0x8>
		{
			if (xQueueReceive( buttonQueueHandle , &pressed_key, 0 ) == pdTRUE)		// Read witch button was pressed
 8002eda:	4b85      	ldr	r3, [pc, #532]	; (80030f0 <start_SET_RTS_TASK+0x234>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f107 010a 	add.w	r1, r7, #10
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f006 fe0f 	bl	8009b08 <xQueueReceive>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d1e9      	bne.n	8002ec4 <start_SET_RTS_TASK+0x8>
=======
 8002efc:	4b88      	ldr	r3, [pc, #544]	; (8003120 <start_SET_RTS_TASK+0x230>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	210a      	movs	r1, #10
 8002f02:	4618      	mov	r0, r3
 8002f04:	f006 f8f4 	bl	80090f0 <osSemaphoreAcquire>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f4      	bne.n	8002ef8 <start_SET_RTS_TASK+0x8>
		{
			if (xQueueReceive( buttonQueueHandle , &pressed_key, 0 ) == pdTRUE)		// Read witch button was pressed
 8002f0e:	4b85      	ldr	r3, [pc, #532]	; (8003124 <start_SET_RTS_TASK+0x234>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f107 010a 	add.w	r1, r7, #10
 8002f16:	2200      	movs	r2, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f006 ff95 	bl	8009e48 <xQueueReceive>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d1e9      	bne.n	8002ef8 <start_SET_RTS_TASK+0x8>
>>>>>>> e9380fc... optimisation RAM=)
				static int8_t day_of_week = 1;
				static int8_t hour = 1;
				static int8_t minute = 1;
				static int8_t second = 1;

				osThreadSuspend(RTC_DS3231_TaskHandle);								// Stop task, and stop print RTC data on LCD
<<<<<<< HEAD
 8002ef0:	4b80      	ldr	r3, [pc, #512]	; (80030f4 <start_SET_RTS_TASK+0x238>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f005 fce1 	bl	80088bc <osThreadSuspend>
				osThreadSuspend(BPE280_TaskHandle);									// Stop task, and stop print BME280 data on LCD
 8002efa:	4b7f      	ldr	r3, [pc, #508]	; (80030f8 <start_SET_RTS_TASK+0x23c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f005 fcdc 	bl	80088bc <osThreadSuspend>
=======
 8002f24:	4b80      	ldr	r3, [pc, #512]	; (8003128 <start_SET_RTS_TASK+0x238>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f005 fe67 	bl	8008bfc <osThreadSuspend>
				osThreadSuspend(BPE280_TaskHandle);									// Stop task, and stop print BME280 data on LCD
 8002f2e:	4b7f      	ldr	r3, [pc, #508]	; (800312c <start_SET_RTS_TASK+0x23c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 fe62 	bl	8008bfc <osThreadSuspend>
>>>>>>> e9380fc... optimisation RAM=)

				QUEUE_RTC_VAL_t.new_value = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
				memset(QUEUE_RTC_VAL_t.name, 0, sizeof(QUEUE_RTC_VAL_t.name));
<<<<<<< HEAD
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2214      	movs	r2, #20
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f009 fa34 	bl	800c380 <memset>
=======
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	3304      	adds	r3, #4
 8002f42:	2214      	movs	r2, #20
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f009 fee6 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)

				switch (setet_type)
 8002f18:	4b78      	ldr	r3, [pc, #480]	; (80030fc <start_SET_RTS_TASK+0x240>)
 8002f1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	2b07      	cmp	r3, #7
 8002f22:	f200 8342 	bhi.w	80035aa <start_SET_RTS_TASK+0x6ee>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <start_SET_RTS_TASK+0x70>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f4d 	.word	0x08002f4d
 8002f30:	0800301d 	.word	0x0800301d
 8002f34:	08003119 	.word	0x08003119
 8002f38:	080031e9 	.word	0x080031e9
 8002f3c:	080032bd 	.word	0x080032bd
 8002f40:	080033b1 	.word	0x080033b1
 8002f44:	08003483 	.word	0x08003483
 8002f48:	08003553 	.word	0x08003553
				{
					case 1:
						// set years
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
<<<<<<< HEAD
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	3304      	adds	r3, #4
 8002f52:	2214      	movs	r2, #20
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f009 fa12 	bl	800c380 <memset>
=======
 8002f80:	f107 030c 	add.w	r3, r7, #12
 8002f84:	3304      	adds	r3, #4
 8002f86:	2214      	movs	r2, #20
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f009 fec4 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)
						strcat(QUEUE_RTC_VAL_t.name, "Year: ");			// Set the setings value
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	3304      	adds	r3, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd f8f4 	bl	8000150 <strlen>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f107 030c 	add.w	r3, r7, #12
 8002f70:	3304      	adds	r3, #4
 8002f72:	4413      	add	r3, r2
 8002f74:	4a62      	ldr	r2, [pc, #392]	; (8003100 <start_SET_RTS_TASK+0x244>)
 8002f76:	6810      	ldr	r0, [r2, #0]
 8002f78:	6018      	str	r0, [r3, #0]
 8002f7a:	8891      	ldrh	r1, [r2, #4]
 8002f7c:	7992      	ldrb	r2, [r2, #6]
 8002f7e:	8099      	strh	r1, [r3, #4]
 8002f80:	719a      	strb	r2, [r3, #6]

						if(pressed_key == 2)
 8002f82:	897b      	ldrh	r3, [r7, #10]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d110      	bne.n	8002faa <start_SET_RTS_TASK+0xee>
						{
							yaer--;
 8002f88:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <start_SET_RTS_TASK+0x248>)
 8002f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	b25a      	sxtb	r2, r3
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <start_SET_RTS_TASK+0x248>)
 8002f98:	701a      	strb	r2, [r3, #0]
							if(yaer < 0)
 8002f9a:	4b5a      	ldr	r3, [pc, #360]	; (8003104 <start_SET_RTS_TASK+0x248>)
 8002f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	da02      	bge.n	8002faa <start_SET_RTS_TASK+0xee>
							{
								yaer = 99;
 8002fa4:	4b57      	ldr	r3, [pc, #348]	; (8003104 <start_SET_RTS_TASK+0x248>)
 8002fa6:	2263      	movs	r2, #99	; 0x63
 8002fa8:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d110      	bne.n	8002fd2 <start_SET_RTS_TASK+0x116>
						{
							yaer++;
 8002fb0:	4b54      	ldr	r3, [pc, #336]	; (8003104 <start_SET_RTS_TASK+0x248>)
 8002fb2:	f993 3000 	ldrsb.w	r3, [r3]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	b25a      	sxtb	r2, r3
 8002fbe:	4b51      	ldr	r3, [pc, #324]	; (8003104 <start_SET_RTS_TASK+0x248>)
 8002fc0:	701a      	strb	r2, [r3, #0]
							if(yaer > 99)
 8002fc2:	4b50      	ldr	r3, [pc, #320]	; (8003104 <start_SET_RTS_TASK+0x248>)
 8002fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8002fc8:	2b63      	cmp	r3, #99	; 0x63
 8002fca:	dd02      	ble.n	8002fd2 <start_SET_RTS_TASK+0x116>
							{
								yaer = 0;
 8002fcc:	4b4d      	ldr	r3, [pc, #308]	; (8003104 <start_SET_RTS_TASK+0x248>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = yaer;
 8002fd2:	4b4c      	ldr	r3, [pc, #304]	; (8003104 <start_SET_RTS_TASK+0x248>)
 8002fd4:	f993 3000 	ldrsb.w	r3, [r3]
 8002fd8:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);		// Save new value on LCD
<<<<<<< HEAD
 8002fda:	4b4b      	ldr	r3, [pc, #300]	; (8003108 <start_SET_RTS_TASK+0x24c>)
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	f107 010c 	add.w	r1, r7, #12
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f006 fb6b 	bl	80096c0 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);							// Let show new value on LCD
 8002fea:	4b48      	ldr	r3, [pc, #288]	; (800310c <start_SET_RTS_TASK+0x250>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f005 ff44 	bl	8008e7c <osSemaphoreRelease>
=======
 800300e:	4b4b      	ldr	r3, [pc, #300]	; (800313c <start_SET_RTS_TASK+0x24c>)
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	f107 010c 	add.w	r1, r7, #12
 8003016:	2300      	movs	r3, #0
 8003018:	2200      	movs	r2, #0
 800301a:	f006 fcf1 	bl	8009a00 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);							// Let show new value on LCD
 800301e:	4b48      	ldr	r3, [pc, #288]	; (8003140 <start_SET_RTS_TASK+0x250>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f006 f8ca 	bl	80091bc <osSemaphoreRelease>
>>>>>>> e9380fc... optimisation RAM=)

						if(pressed_key == 4)		// Save data
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	f040 82ca 	bne.w	8003590 <start_SET_RTS_TASK+0x6d4>
						{
							QUEUE_NEW_RTC_t.Year = QUEUE_RTC_VAL_t.new_value;		// Save new selected value in queue for rts
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
							setet_type++;											// Go to next case
 8003004:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <start_SET_RTS_TASK+0x240>)
 8003006:	f993 3000 	ldrsb.w	r3, [r3]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3301      	adds	r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	b25a      	sxtb	r2, r3
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <start_SET_RTS_TASK+0x240>)
 8003014:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;							// init next value
 8003016:	2301      	movs	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
						}
						break;
 800301a:	e2b9      	b.n	8003590 <start_SET_RTS_TASK+0x6d4>

					case 2:
						// set month
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
<<<<<<< HEAD
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	3304      	adds	r3, #4
 8003022:	2214      	movs	r2, #20
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f009 f9aa 	bl	800c380 <memset>
=======
 8003050:	f107 030c 	add.w	r3, r7, #12
 8003054:	3304      	adds	r3, #4
 8003056:	2214      	movs	r2, #20
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f009 fe5c 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)
						strcat(QUEUE_RTC_VAL_t.name, "Month: ");			// Set the setings value
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	3304      	adds	r3, #4
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd f88c 	bl	8000150 <strlen>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	f107 030c 	add.w	r3, r7, #12
 8003040:	3304      	adds	r3, #4
 8003042:	4413      	add	r3, r2
 8003044:	4932      	ldr	r1, [pc, #200]	; (8003110 <start_SET_RTS_TASK+0x254>)
 8003046:	461a      	mov	r2, r3
 8003048:	460b      	mov	r3, r1
 800304a:	cb03      	ldmia	r3!, {r0, r1}
 800304c:	6010      	str	r0, [r2, #0]
 800304e:	6051      	str	r1, [r2, #4]

						if(pressed_key == 2)
 8003050:	897b      	ldrh	r3, [r7, #10]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d110      	bne.n	8003078 <start_SET_RTS_TASK+0x1bc>
						{
							month--;
 8003056:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <start_SET_RTS_TASK+0x258>)
 8003058:	f993 3000 	ldrsb.w	r3, [r3]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	b25a      	sxtb	r2, r3
 8003064:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <start_SET_RTS_TASK+0x258>)
 8003066:	701a      	strb	r2, [r3, #0]
							if(month < 1)
 8003068:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <start_SET_RTS_TASK+0x258>)
 800306a:	f993 3000 	ldrsb.w	r3, [r3]
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc02      	bgt.n	8003078 <start_SET_RTS_TASK+0x1bc>
							{
								month = 12;
 8003072:	4b28      	ldr	r3, [pc, #160]	; (8003114 <start_SET_RTS_TASK+0x258>)
 8003074:	220c      	movs	r2, #12
 8003076:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 8003078:	897b      	ldrh	r3, [r7, #10]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d110      	bne.n	80030a0 <start_SET_RTS_TASK+0x1e4>
						{
							month++;
 800307e:	4b25      	ldr	r3, [pc, #148]	; (8003114 <start_SET_RTS_TASK+0x258>)
 8003080:	f993 3000 	ldrsb.w	r3, [r3]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3301      	adds	r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	b25a      	sxtb	r2, r3
 800308c:	4b21      	ldr	r3, [pc, #132]	; (8003114 <start_SET_RTS_TASK+0x258>)
 800308e:	701a      	strb	r2, [r3, #0]
							if(month > 12)
 8003090:	4b20      	ldr	r3, [pc, #128]	; (8003114 <start_SET_RTS_TASK+0x258>)
 8003092:	f993 3000 	ldrsb.w	r3, [r3]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	dd02      	ble.n	80030a0 <start_SET_RTS_TASK+0x1e4>
							{
								month = 1;
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <start_SET_RTS_TASK+0x258>)
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = month;
 80030a0:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <start_SET_RTS_TASK+0x258>)
 80030a2:	f993 3000 	ldrsb.w	r3, [r3]
 80030a6:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
<<<<<<< HEAD
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <start_SET_RTS_TASK+0x24c>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	f107 010c 	add.w	r1, r7, #12
 80030b0:	2300      	movs	r3, #0
 80030b2:	2200      	movs	r2, #0
 80030b4:	f006 fb04 	bl	80096c0 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80030b8:	4b14      	ldr	r3, [pc, #80]	; (800310c <start_SET_RTS_TASK+0x250>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f005 fedd 	bl	8008e7c <osSemaphoreRelease>
=======
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <start_SET_RTS_TASK+0x24c>)
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	f107 010c 	add.w	r1, r7, #12
 80030e4:	2300      	movs	r3, #0
 80030e6:	2200      	movs	r2, #0
 80030e8:	f006 fc8a 	bl	8009a00 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <start_SET_RTS_TASK+0x250>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f006 f863 	bl	80091bc <osSemaphoreRelease>
>>>>>>> e9380fc... optimisation RAM=)

						if(pressed_key == 4)		// Save data
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	f040 8265 	bne.w	8003594 <start_SET_RTS_TASK+0x6d8>
						{
							QUEUE_NEW_RTC_t.Month = QUEUE_RTC_VAL_t.new_value;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
							setet_type++;
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <start_SET_RTS_TASK+0x240>)
 80030d4:	f993 3000 	ldrsb.w	r3, [r3]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	b25a      	sxtb	r2, r3
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <start_SET_RTS_TASK+0x240>)
 80030e2:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 80030e4:	2301      	movs	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
						}
						break;
<<<<<<< HEAD
 80030e8:	e254      	b.n	8003594 <start_SET_RTS_TASK+0x6d8>
 80030ea:	bf00      	nop
 80030ec:	200003c0 	.word	0x200003c0
 80030f0:	200001fc 	.word	0x200001fc
 80030f4:	200001e8 	.word	0x200001e8
 80030f8:	200001ec 	.word	0x200001ec
 80030fc:	20000005 	.word	0x20000005
 8003100:	0800cd78 	.word	0x0800cd78
 8003104:	20000006 	.word	0x20000006
 8003108:	20000334 	.word	0x20000334
 800310c:	200003bc 	.word	0x200003bc
 8003110:	0800cd80 	.word	0x0800cd80
 8003114:	20000007 	.word	0x20000007
=======
 800311c:	e254      	b.n	80035c8 <start_SET_RTS_TASK+0x6d8>
 800311e:	bf00      	nop
 8003120:	20000adc 	.word	0x20000adc
 8003124:	20000918 	.word	0x20000918
 8003128:	200003e4 	.word	0x200003e4
 800312c:	200003e8 	.word	0x200003e8
 8003130:	20000005 	.word	0x20000005
 8003134:	0800d7dc 	.word	0x0800d7dc
 8003138:	20000006 	.word	0x20000006
 800313c:	20000a50 	.word	0x20000a50
 8003140:	20000ad8 	.word	0x20000ad8
 8003144:	0800d7e4 	.word	0x0800d7e4
 8003148:	20000007 	.word	0x20000007
>>>>>>> e9380fc... optimisation RAM=)

					case 3:
						// set Date
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
<<<<<<< HEAD
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	3304      	adds	r3, #4
 800311e:	2214      	movs	r2, #20
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f009 f92c 	bl	800c380 <memset>
=======
 800314c:	f107 030c 	add.w	r3, r7, #12
 8003150:	3304      	adds	r3, #4
 8003152:	2214      	movs	r2, #20
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f009 fdde 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)
						strcat(QUEUE_RTC_VAL_t.name, "Date: ");			// Set the setings value
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	3304      	adds	r3, #4
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f80e 	bl	8000150 <strlen>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	3304      	adds	r3, #4
 800313e:	4413      	add	r3, r2
 8003140:	4a92      	ldr	r2, [pc, #584]	; (800338c <start_SET_RTS_TASK+0x4d0>)
 8003142:	6810      	ldr	r0, [r2, #0]
 8003144:	6018      	str	r0, [r3, #0]
 8003146:	8891      	ldrh	r1, [r2, #4]
 8003148:	7992      	ldrb	r2, [r2, #6]
 800314a:	8099      	strh	r1, [r3, #4]
 800314c:	719a      	strb	r2, [r3, #6]

						if(pressed_key == 2)
 800314e:	897b      	ldrh	r3, [r7, #10]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d110      	bne.n	8003176 <start_SET_RTS_TASK+0x2ba>
						{
							date--;
 8003154:	4b8e      	ldr	r3, [pc, #568]	; (8003390 <start_SET_RTS_TASK+0x4d4>)
 8003156:	f993 3000 	ldrsb.w	r3, [r3]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	b25a      	sxtb	r2, r3
 8003162:	4b8b      	ldr	r3, [pc, #556]	; (8003390 <start_SET_RTS_TASK+0x4d4>)
 8003164:	701a      	strb	r2, [r3, #0]
							if(date < 1)
 8003166:	4b8a      	ldr	r3, [pc, #552]	; (8003390 <start_SET_RTS_TASK+0x4d4>)
 8003168:	f993 3000 	ldrsb.w	r3, [r3]
 800316c:	2b00      	cmp	r3, #0
 800316e:	dc02      	bgt.n	8003176 <start_SET_RTS_TASK+0x2ba>
							{
								date = 31;
 8003170:	4b87      	ldr	r3, [pc, #540]	; (8003390 <start_SET_RTS_TASK+0x4d4>)
 8003172:	221f      	movs	r2, #31
 8003174:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d110      	bne.n	800319e <start_SET_RTS_TASK+0x2e2>
						{
							date++;
 800317c:	4b84      	ldr	r3, [pc, #528]	; (8003390 <start_SET_RTS_TASK+0x4d4>)
 800317e:	f993 3000 	ldrsb.w	r3, [r3]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	3301      	adds	r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	b25a      	sxtb	r2, r3
 800318a:	4b81      	ldr	r3, [pc, #516]	; (8003390 <start_SET_RTS_TASK+0x4d4>)
 800318c:	701a      	strb	r2, [r3, #0]
							if(date > 31)
 800318e:	4b80      	ldr	r3, [pc, #512]	; (8003390 <start_SET_RTS_TASK+0x4d4>)
 8003190:	f993 3000 	ldrsb.w	r3, [r3]
 8003194:	2b1f      	cmp	r3, #31
 8003196:	dd02      	ble.n	800319e <start_SET_RTS_TASK+0x2e2>
							{
								date = 1;
 8003198:	4b7d      	ldr	r3, [pc, #500]	; (8003390 <start_SET_RTS_TASK+0x4d4>)
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = date;
 800319e:	4b7c      	ldr	r3, [pc, #496]	; (8003390 <start_SET_RTS_TASK+0x4d4>)
 80031a0:	f993 3000 	ldrsb.w	r3, [r3]
 80031a4:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
<<<<<<< HEAD
 80031a6:	4b7b      	ldr	r3, [pc, #492]	; (8003394 <start_SET_RTS_TASK+0x4d8>)
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	f107 010c 	add.w	r1, r7, #12
 80031ae:	2300      	movs	r3, #0
 80031b0:	2200      	movs	r2, #0
 80031b2:	f006 fa85 	bl	80096c0 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80031b6:	4b78      	ldr	r3, [pc, #480]	; (8003398 <start_SET_RTS_TASK+0x4dc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f005 fe5e 	bl	8008e7c <osSemaphoreRelease>
=======
 80031da:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <start_SET_RTS_TASK+0x4d8>)
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f107 010c 	add.w	r1, r7, #12
 80031e2:	2300      	movs	r3, #0
 80031e4:	2200      	movs	r2, #0
 80031e6:	f006 fc0b 	bl	8009a00 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80031ea:	4b78      	ldr	r3, [pc, #480]	; (80033cc <start_SET_RTS_TASK+0x4dc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f005 ffe4 	bl	80091bc <osSemaphoreRelease>
>>>>>>> e9380fc... optimisation RAM=)

						if(pressed_key == 4)		// Save data
 80031c0:	897b      	ldrh	r3, [r7, #10]
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	f040 81e8 	bne.w	8003598 <start_SET_RTS_TASK+0x6dc>
						{
							QUEUE_NEW_RTC_t.Date = QUEUE_RTC_VAL_t.new_value;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							setet_type++;
 80031d0:	4b72      	ldr	r3, [pc, #456]	; (800339c <start_SET_RTS_TASK+0x4e0>)
 80031d2:	f993 3000 	ldrsb.w	r3, [r3]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	b25a      	sxtb	r2, r3
 80031de:	4b6f      	ldr	r3, [pc, #444]	; (800339c <start_SET_RTS_TASK+0x4e0>)
 80031e0:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
						}
						break;
 80031e6:	e1d7      	b.n	8003598 <start_SET_RTS_TASK+0x6dc>

					case 4:
						// set DaysOfWeek
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
<<<<<<< HEAD
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	3304      	adds	r3, #4
 80031ee:	2214      	movs	r2, #20
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f009 f8c4 	bl	800c380 <memset>
=======
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	3304      	adds	r3, #4
 8003222:	2214      	movs	r2, #20
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f009 fd76 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)
						strcat(QUEUE_RTC_VAL_t.name, "Day of week: ");			// Set the setings value
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	3304      	adds	r3, #4
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fc ffa6 	bl	8000150 <strlen>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	3304      	adds	r3, #4
 800320e:	4413      	add	r3, r2
 8003210:	4a63      	ldr	r2, [pc, #396]	; (80033a0 <start_SET_RTS_TASK+0x4e4>)
 8003212:	461c      	mov	r4, r3
 8003214:	4613      	mov	r3, r2
 8003216:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003218:	6020      	str	r0, [r4, #0]
 800321a:	6061      	str	r1, [r4, #4]
 800321c:	60a2      	str	r2, [r4, #8]
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	81a3      	strh	r3, [r4, #12]

						if(pressed_key == 2)
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d110      	bne.n	800324a <start_SET_RTS_TASK+0x38e>
						{
							day_of_week--;
 8003228:	4b5e      	ldr	r3, [pc, #376]	; (80033a4 <start_SET_RTS_TASK+0x4e8>)
 800322a:	f993 3000 	ldrsb.w	r3, [r3]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	b25a      	sxtb	r2, r3
 8003236:	4b5b      	ldr	r3, [pc, #364]	; (80033a4 <start_SET_RTS_TASK+0x4e8>)
 8003238:	701a      	strb	r2, [r3, #0]
							if(day_of_week < 1)
 800323a:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <start_SET_RTS_TASK+0x4e8>)
 800323c:	f993 3000 	ldrsb.w	r3, [r3]
 8003240:	2b00      	cmp	r3, #0
 8003242:	dc02      	bgt.n	800324a <start_SET_RTS_TASK+0x38e>
							{
								day_of_week = 7;
 8003244:	4b57      	ldr	r3, [pc, #348]	; (80033a4 <start_SET_RTS_TASK+0x4e8>)
 8003246:	2207      	movs	r2, #7
 8003248:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 800324a:	897b      	ldrh	r3, [r7, #10]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d110      	bne.n	8003272 <start_SET_RTS_TASK+0x3b6>
						{
							day_of_week++;
 8003250:	4b54      	ldr	r3, [pc, #336]	; (80033a4 <start_SET_RTS_TASK+0x4e8>)
 8003252:	f993 3000 	ldrsb.w	r3, [r3]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	3301      	adds	r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	b25a      	sxtb	r2, r3
 800325e:	4b51      	ldr	r3, [pc, #324]	; (80033a4 <start_SET_RTS_TASK+0x4e8>)
 8003260:	701a      	strb	r2, [r3, #0]
							if(day_of_week > 7)
 8003262:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <start_SET_RTS_TASK+0x4e8>)
 8003264:	f993 3000 	ldrsb.w	r3, [r3]
 8003268:	2b07      	cmp	r3, #7
 800326a:	dd02      	ble.n	8003272 <start_SET_RTS_TASK+0x3b6>
							{
								day_of_week = 1;
 800326c:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <start_SET_RTS_TASK+0x4e8>)
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = day_of_week;
 8003272:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <start_SET_RTS_TASK+0x4e8>)
 8003274:	f993 3000 	ldrsb.w	r3, [r3]
 8003278:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
<<<<<<< HEAD
 800327a:	4b46      	ldr	r3, [pc, #280]	; (8003394 <start_SET_RTS_TASK+0x4d8>)
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f107 010c 	add.w	r1, r7, #12
 8003282:	2300      	movs	r3, #0
 8003284:	2200      	movs	r2, #0
 8003286:	f006 fa1b 	bl	80096c0 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 800328a:	4b43      	ldr	r3, [pc, #268]	; (8003398 <start_SET_RTS_TASK+0x4dc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f005 fdf4 	bl	8008e7c <osSemaphoreRelease>
=======
 80032ae:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <start_SET_RTS_TASK+0x4d8>)
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	f107 010c 	add.w	r1, r7, #12
 80032b6:	2300      	movs	r3, #0
 80032b8:	2200      	movs	r2, #0
 80032ba:	f006 fba1 	bl	8009a00 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 80032be:	4b43      	ldr	r3, [pc, #268]	; (80033cc <start_SET_RTS_TASK+0x4dc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f005 ff7a 	bl	80091bc <osSemaphoreRelease>
>>>>>>> e9380fc... optimisation RAM=)

						if(pressed_key == 4)		// Save data
 8003294:	897b      	ldrh	r3, [r7, #10]
 8003296:	2b04      	cmp	r3, #4
 8003298:	f040 8180 	bne.w	800359c <start_SET_RTS_TASK+0x6e0>
						{
							QUEUE_NEW_RTC_t.DaysOfWeek = QUEUE_RTC_VAL_t.new_value;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							setet_type++;
 80032a4:	4b3d      	ldr	r3, [pc, #244]	; (800339c <start_SET_RTS_TASK+0x4e0>)
 80032a6:	f993 3000 	ldrsb.w	r3, [r3]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	b25a      	sxtb	r2, r3
 80032b2:	4b3a      	ldr	r3, [pc, #232]	; (800339c <start_SET_RTS_TASK+0x4e0>)
 80032b4:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
						}
						break;
 80032ba:	e16f      	b.n	800359c <start_SET_RTS_TASK+0x6e0>

					case 5:
						// set Hour
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
<<<<<<< HEAD
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	3304      	adds	r3, #4
 80032c2:	2214      	movs	r2, #20
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f009 f85a 	bl	800c380 <memset>
=======
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	3304      	adds	r3, #4
 80032f6:	2214      	movs	r2, #20
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f009 fd0c 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)
						strcat(QUEUE_RTC_VAL_t.name, "Hour: ");			// Set the setings value
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	3304      	adds	r3, #4
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fc ff3c 	bl	8000150 <strlen>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	3304      	adds	r3, #4
 80032e2:	4413      	add	r3, r2
 80032e4:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <start_SET_RTS_TASK+0x4ec>)
 80032e6:	6810      	ldr	r0, [r2, #0]
 80032e8:	6018      	str	r0, [r3, #0]
 80032ea:	8891      	ldrh	r1, [r2, #4]
 80032ec:	7992      	ldrb	r2, [r2, #6]
 80032ee:	8099      	strh	r1, [r3, #4]
 80032f0:	719a      	strb	r2, [r3, #6]

						if(pressed_key == 2)
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d110      	bne.n	800331a <start_SET_RTS_TASK+0x45e>
						{
							hour--;
 80032f8:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <start_SET_RTS_TASK+0x4f0>)
 80032fa:	f993 3000 	ldrsb.w	r3, [r3]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	b25a      	sxtb	r2, r3
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <start_SET_RTS_TASK+0x4f0>)
 8003308:	701a      	strb	r2, [r3, #0]

							if(hour < 0)
 800330a:	4b28      	ldr	r3, [pc, #160]	; (80033ac <start_SET_RTS_TASK+0x4f0>)
 800330c:	f993 3000 	ldrsb.w	r3, [r3]
 8003310:	2b00      	cmp	r3, #0
 8003312:	da02      	bge.n	800331a <start_SET_RTS_TASK+0x45e>
							{
								hour = 24;
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <start_SET_RTS_TASK+0x4f0>)
 8003316:	2218      	movs	r2, #24
 8003318:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d110      	bne.n	8003342 <start_SET_RTS_TASK+0x486>
						{
							hour++;
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <start_SET_RTS_TASK+0x4f0>)
 8003322:	f993 3000 	ldrsb.w	r3, [r3]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	3301      	adds	r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	b25a      	sxtb	r2, r3
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <start_SET_RTS_TASK+0x4f0>)
 8003330:	701a      	strb	r2, [r3, #0]
							if(hour > 24)
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <start_SET_RTS_TASK+0x4f0>)
 8003334:	f993 3000 	ldrsb.w	r3, [r3]
 8003338:	2b18      	cmp	r3, #24
 800333a:	dd02      	ble.n	8003342 <start_SET_RTS_TASK+0x486>
							{
								hour = 0;
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <start_SET_RTS_TASK+0x4f0>)
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = hour;
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <start_SET_RTS_TASK+0x4f0>)
 8003344:	f993 3000 	ldrsb.w	r3, [r3]
 8003348:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
<<<<<<< HEAD
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <start_SET_RTS_TASK+0x4d8>)
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	f107 010c 	add.w	r1, r7, #12
 8003352:	2300      	movs	r3, #0
 8003354:	2200      	movs	r2, #0
 8003356:	f006 f9b3 	bl	80096c0 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <start_SET_RTS_TASK+0x4dc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f005 fd8c 	bl	8008e7c <osSemaphoreRelease>
=======
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <start_SET_RTS_TASK+0x4d8>)
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	f107 010c 	add.w	r1, r7, #12
 8003386:	2300      	movs	r3, #0
 8003388:	2200      	movs	r2, #0
 800338a:	f006 fb39 	bl	8009a00 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <start_SET_RTS_TASK+0x4dc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f005 ff12 	bl	80091bc <osSemaphoreRelease>
>>>>>>> e9380fc... optimisation RAM=)

						if(pressed_key == 4)		// Save data
 8003364:	897b      	ldrh	r3, [r7, #10]
 8003366:	2b04      	cmp	r3, #4
 8003368:	f040 811a 	bne.w	80035a0 <start_SET_RTS_TASK+0x6e4>
						{
							QUEUE_NEW_RTC_t.Hour = QUEUE_RTC_VAL_t.new_value;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
							setet_type++;
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <start_SET_RTS_TASK+0x4e0>)
 8003376:	f993 3000 	ldrsb.w	r3, [r3]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	b25a      	sxtb	r2, r3
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <start_SET_RTS_TASK+0x4e0>)
 8003384:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 8003386:	2301      	movs	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
						}
						break;
<<<<<<< HEAD
 800338a:	e109      	b.n	80035a0 <start_SET_RTS_TASK+0x6e4>
 800338c:	0800cd88 	.word	0x0800cd88
 8003390:	20000008 	.word	0x20000008
 8003394:	20000334 	.word	0x20000334
 8003398:	200003bc 	.word	0x200003bc
 800339c:	20000005 	.word	0x20000005
 80033a0:	0800cd90 	.word	0x0800cd90
 80033a4:	20000009 	.word	0x20000009
 80033a8:	0800cda0 	.word	0x0800cda0
 80033ac:	2000000a 	.word	0x2000000a
=======
 80033be:	e109      	b.n	80035d4 <start_SET_RTS_TASK+0x6e4>
 80033c0:	0800d7ec 	.word	0x0800d7ec
 80033c4:	20000008 	.word	0x20000008
 80033c8:	20000a50 	.word	0x20000a50
 80033cc:	20000ad8 	.word	0x20000ad8
 80033d0:	20000005 	.word	0x20000005
 80033d4:	0800d7f4 	.word	0x0800d7f4
 80033d8:	20000009 	.word	0x20000009
 80033dc:	0800d804 	.word	0x0800d804
 80033e0:	2000000a 	.word	0x2000000a
>>>>>>> e9380fc... optimisation RAM=)

					case 6:
						// set Minutes
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
<<<<<<< HEAD
 80033b0:	f107 030c 	add.w	r3, r7, #12
 80033b4:	3304      	adds	r3, #4
 80033b6:	2214      	movs	r2, #20
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f008 ffe0 	bl	800c380 <memset>
=======
 80033e4:	f107 030c 	add.w	r3, r7, #12
 80033e8:	3304      	adds	r3, #4
 80033ea:	2214      	movs	r2, #20
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f009 fc92 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)
						strcat(QUEUE_RTC_VAL_t.name, "Minute: ");			// Set the setings value
 80033c0:	f107 030c 	add.w	r3, r7, #12
 80033c4:	3304      	adds	r3, #4
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fc fec2 	bl	8000150 <strlen>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	3304      	adds	r3, #4
 80033d6:	4413      	add	r3, r2
 80033d8:	4976      	ldr	r1, [pc, #472]	; (80035b4 <start_SET_RTS_TASK+0x6f8>)
 80033da:	461a      	mov	r2, r3
 80033dc:	460b      	mov	r3, r1
 80033de:	cb03      	ldmia	r3!, {r0, r1}
 80033e0:	6010      	str	r0, [r2, #0]
 80033e2:	6051      	str	r1, [r2, #4]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	7213      	strb	r3, [r2, #8]

						if(pressed_key == 2)
 80033e8:	897b      	ldrh	r3, [r7, #10]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d110      	bne.n	8003410 <start_SET_RTS_TASK+0x554>
						{
							minute--;
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <start_SET_RTS_TASK+0x6fc>)
 80033f0:	f993 3000 	ldrsb.w	r3, [r3]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	b25a      	sxtb	r2, r3
 80033fc:	4b6e      	ldr	r3, [pc, #440]	; (80035b8 <start_SET_RTS_TASK+0x6fc>)
 80033fe:	701a      	strb	r2, [r3, #0]
							if(minute < 0)
 8003400:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <start_SET_RTS_TASK+0x6fc>)
 8003402:	f993 3000 	ldrsb.w	r3, [r3]
 8003406:	2b00      	cmp	r3, #0
 8003408:	da02      	bge.n	8003410 <start_SET_RTS_TASK+0x554>
							{
								minute = 59;
 800340a:	4b6b      	ldr	r3, [pc, #428]	; (80035b8 <start_SET_RTS_TASK+0x6fc>)
 800340c:	223b      	movs	r2, #59	; 0x3b
 800340e:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 8003410:	897b      	ldrh	r3, [r7, #10]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d110      	bne.n	8003438 <start_SET_RTS_TASK+0x57c>
						{
							minute++;
 8003416:	4b68      	ldr	r3, [pc, #416]	; (80035b8 <start_SET_RTS_TASK+0x6fc>)
 8003418:	f993 3000 	ldrsb.w	r3, [r3]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	3301      	adds	r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	b25a      	sxtb	r2, r3
 8003424:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <start_SET_RTS_TASK+0x6fc>)
 8003426:	701a      	strb	r2, [r3, #0]
							if(minute > 59)
 8003428:	4b63      	ldr	r3, [pc, #396]	; (80035b8 <start_SET_RTS_TASK+0x6fc>)
 800342a:	f993 3000 	ldrsb.w	r3, [r3]
 800342e:	2b3b      	cmp	r3, #59	; 0x3b
 8003430:	dd02      	ble.n	8003438 <start_SET_RTS_TASK+0x57c>
							{
								minute = 0;
 8003432:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <start_SET_RTS_TASK+0x6fc>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = minute;
 8003438:	4b5f      	ldr	r3, [pc, #380]	; (80035b8 <start_SET_RTS_TASK+0x6fc>)
 800343a:	f993 3000 	ldrsb.w	r3, [r3]
 800343e:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
<<<<<<< HEAD
 8003440:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <start_SET_RTS_TASK+0x700>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	f107 010c 	add.w	r1, r7, #12
 8003448:	2300      	movs	r3, #0
 800344a:	2200      	movs	r2, #0
 800344c:	f006 f938 	bl	80096c0 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 8003450:	4b5b      	ldr	r3, [pc, #364]	; (80035c0 <start_SET_RTS_TASK+0x704>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f005 fd11 	bl	8008e7c <osSemaphoreRelease>
=======
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <start_SET_RTS_TASK+0x700>)
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	f107 010c 	add.w	r1, r7, #12
 800347c:	2300      	movs	r3, #0
 800347e:	2200      	movs	r2, #0
 8003480:	f006 fabe 	bl	8009a00 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 8003484:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <start_SET_RTS_TASK+0x704>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f005 fe97 	bl	80091bc <osSemaphoreRelease>
>>>>>>> e9380fc... optimisation RAM=)

						if(pressed_key == 4)		// Save data
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	2b04      	cmp	r3, #4
 800345e:	f040 80a1 	bne.w	80035a4 <start_SET_RTS_TASK+0x6e8>
						{
							QUEUE_NEW_RTC_t.Min = QUEUE_RTC_VAL_t.new_value;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
							setet_type++;
 800346a:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <start_SET_RTS_TASK+0x708>)
 800346c:	f993 3000 	ldrsb.w	r3, [r3]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3301      	adds	r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	b25a      	sxtb	r2, r3
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <start_SET_RTS_TASK+0x708>)
 800347a:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 800347c:	2301      	movs	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
						}
						break;
 8003480:	e090      	b.n	80035a4 <start_SET_RTS_TASK+0x6e8>


					case 7:
						// set Seconds
						memset(QUEUE_RTC_VAL_t.name , 0, sizeof(QUEUE_RTC_VAL_t.name));
<<<<<<< HEAD
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	3304      	adds	r3, #4
 8003488:	2214      	movs	r2, #20
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f008 ff77 	bl	800c380 <memset>
=======
 80034b6:	f107 030c 	add.w	r3, r7, #12
 80034ba:	3304      	adds	r3, #4
 80034bc:	2214      	movs	r2, #20
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f009 fc29 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)
						strcat(QUEUE_RTC_VAL_t.name, "Second: ");			// Set the setings value
 8003492:	f107 030c 	add.w	r3, r7, #12
 8003496:	3304      	adds	r3, #4
 8003498:	4618      	mov	r0, r3
 800349a:	f7fc fe59 	bl	8000150 <strlen>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	3304      	adds	r3, #4
 80034a8:	4413      	add	r3, r2
 80034aa:	4947      	ldr	r1, [pc, #284]	; (80035c8 <start_SET_RTS_TASK+0x70c>)
 80034ac:	461a      	mov	r2, r3
 80034ae:	460b      	mov	r3, r1
 80034b0:	cb03      	ldmia	r3!, {r0, r1}
 80034b2:	6010      	str	r0, [r2, #0]
 80034b4:	6051      	str	r1, [r2, #4]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	7213      	strb	r3, [r2, #8]

						if(pressed_key == 2)
 80034ba:	897b      	ldrh	r3, [r7, #10]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d110      	bne.n	80034e2 <start_SET_RTS_TASK+0x626>
						{
							second--;
 80034c0:	4b42      	ldr	r3, [pc, #264]	; (80035cc <start_SET_RTS_TASK+0x710>)
 80034c2:	f993 3000 	ldrsb.w	r3, [r3]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	b25a      	sxtb	r2, r3
 80034ce:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <start_SET_RTS_TASK+0x710>)
 80034d0:	701a      	strb	r2, [r3, #0]
							if(second < 0)
 80034d2:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <start_SET_RTS_TASK+0x710>)
 80034d4:	f993 3000 	ldrsb.w	r3, [r3]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da02      	bge.n	80034e2 <start_SET_RTS_TASK+0x626>
							{
								second = 59;
 80034dc:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <start_SET_RTS_TASK+0x710>)
 80034de:	223b      	movs	r2, #59	; 0x3b
 80034e0:	701a      	strb	r2, [r3, #0]
							}
						}

						if(pressed_key == 3)
 80034e2:	897b      	ldrh	r3, [r7, #10]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d110      	bne.n	800350a <start_SET_RTS_TASK+0x64e>
						{
							second++;
 80034e8:	4b38      	ldr	r3, [pc, #224]	; (80035cc <start_SET_RTS_TASK+0x710>)
 80034ea:	f993 3000 	ldrsb.w	r3, [r3]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	b25a      	sxtb	r2, r3
 80034f6:	4b35      	ldr	r3, [pc, #212]	; (80035cc <start_SET_RTS_TASK+0x710>)
 80034f8:	701a      	strb	r2, [r3, #0]
							if(second > 59)
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <start_SET_RTS_TASK+0x710>)
 80034fc:	f993 3000 	ldrsb.w	r3, [r3]
 8003500:	2b3b      	cmp	r3, #59	; 0x3b
 8003502:	dd02      	ble.n	800350a <start_SET_RTS_TASK+0x64e>
							{
								second = 0;
 8003504:	4b31      	ldr	r3, [pc, #196]	; (80035cc <start_SET_RTS_TASK+0x710>)
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
							}
						}

						QUEUE_RTC_VAL_t.new_value = second;
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <start_SET_RTS_TASK+0x710>)
 800350c:	f993 3000 	ldrsb.w	r3, [r3]
 8003510:	60fb      	str	r3, [r7, #12]

						xQueueSend(QUEUE_RTC_VALHandle, &QUEUE_RTC_VAL_t, 0);
<<<<<<< HEAD
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <start_SET_RTS_TASK+0x700>)
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	f107 010c 	add.w	r1, r7, #12
 800351a:	2300      	movs	r3, #0
 800351c:	2200      	movs	r2, #0
 800351e:	f006 f8cf 	bl	80096c0 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 8003522:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <start_SET_RTS_TASK+0x704>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f005 fca8 	bl	8008e7c <osSemaphoreRelease>
=======
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <start_SET_RTS_TASK+0x700>)
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	f107 010c 	add.w	r1, r7, #12
 800354e:	2300      	movs	r3, #0
 8003550:	2200      	movs	r2, #0
 8003552:	f006 fa55 	bl	8009a00 <xQueueGenericSend>
						osSemaphoreRelease(LCD_SemHandle);
 8003556:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <start_SET_RTS_TASK+0x704>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f005 fe2e 	bl	80091bc <osSemaphoreRelease>
>>>>>>> e9380fc... optimisation RAM=)

						if(pressed_key == 4)		// Save data
 800352c:	897b      	ldrh	r3, [r7, #10]
 800352e:	2b04      	cmp	r3, #4
 8003530:	d13a      	bne.n	80035a8 <start_SET_RTS_TASK+0x6ec>
						{
							QUEUE_NEW_RTC_t.Sec = QUEUE_RTC_VAL_t.new_value;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							setet_type++;
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <start_SET_RTS_TASK+0x708>)
 800353c:	f993 3000 	ldrsb.w	r3, [r3]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	3301      	adds	r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	b25a      	sxtb	r2, r3
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <start_SET_RTS_TASK+0x708>)
 800354a:	701a      	strb	r2, [r3, #0]
							QUEUE_RTC_VAL_t.new_value = 1;
 800354c:	2301      	movs	r3, #1
 800354e:	60fb      	str	r3, [r7, #12]
						}
						break;
 8003550:	e02a      	b.n	80035a8 <start_SET_RTS_TASK+0x6ec>

					case 8:
						//ILI9341_Fill_Screen(BLACK);								// Claan LCD
						xQueueSend(new_rtc_queueHandle, &QUEUE_NEW_RTC_t, 0);		// Send new time and data to rtc task
<<<<<<< HEAD
 8003552:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <start_SET_RTS_TASK+0x714>)
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800355a:	2300      	movs	r3, #0
 800355c:	2200      	movs	r2, #0
 800355e:	f006 f8af 	bl	80096c0 <xQueueGenericSend>

						osThreadResume(RTC_DS3231_TaskHandle);					// Start RTS task
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <start_SET_RTS_TASK+0x718>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f005 f9dc 	bl	8008924 <osThreadResume>
						osThreadResume(BPE280_TaskHandle);						// Start BME280 tasl
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <start_SET_RTS_TASK+0x71c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f005 f9d7 	bl	8008924 <osThreadResume>
=======
 8003586:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <start_SET_RTS_TASK+0x714>)
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800358e:	2300      	movs	r3, #0
 8003590:	2200      	movs	r2, #0
 8003592:	f006 fa35 	bl	8009a00 <xQueueGenericSend>

						osThreadResume(RTC_DS3231_TaskHandle);					// Start RTS task
 8003596:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <start_SET_RTS_TASK+0x718>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f005 fb62 	bl	8008c64 <osThreadResume>
						osThreadResume(BPE280_TaskHandle);						// Start BME280 tasl
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <start_SET_RTS_TASK+0x71c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f005 fb5d 	bl	8008c64 <osThreadResume>
>>>>>>> e9380fc... optimisation RAM=)

						print_first_time_on_lcd_flag = true;						// Print new time and data on LCD
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <start_SET_RTS_TASK+0x720>)
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]

						setet_type++;												// Exit from switch
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <start_SET_RTS_TASK+0x708>)
 800357e:	f993 3000 	ldrsb.w	r3, [r3]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b25a      	sxtb	r2, r3
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <start_SET_RTS_TASK+0x708>)
 800358c:	701a      	strb	r2, [r3, #0]


						break;
 800358e:	e00c      	b.n	80035aa <start_SET_RTS_TASK+0x6ee>
						break;
 8003590:	bf00      	nop
 8003592:	e00a      	b.n	80035aa <start_SET_RTS_TASK+0x6ee>
						break;
 8003594:	bf00      	nop
 8003596:	e008      	b.n	80035aa <start_SET_RTS_TASK+0x6ee>
						break;
 8003598:	bf00      	nop
 800359a:	e006      	b.n	80035aa <start_SET_RTS_TASK+0x6ee>
						break;
 800359c:	bf00      	nop
 800359e:	e004      	b.n	80035aa <start_SET_RTS_TASK+0x6ee>
						break;
 80035a0:	bf00      	nop
 80035a2:	e002      	b.n	80035aa <start_SET_RTS_TASK+0x6ee>
						break;
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <start_SET_RTS_TASK+0x6ee>
						break;
 80035a8:	bf00      	nop
				}
				osDelay(200);
<<<<<<< HEAD
 80035aa:	20c8      	movs	r0, #200	; 0xc8
 80035ac:	f005 f9ee 	bl	800898c <osDelay>
	{
 80035b0:	e488      	b.n	8002ec4 <start_SET_RTS_TASK+0x8>
 80035b2:	bf00      	nop
 80035b4:	0800cda8 	.word	0x0800cda8
 80035b8:	2000000b 	.word	0x2000000b
 80035bc:	20000334 	.word	0x20000334
 80035c0:	200003bc 	.word	0x200003bc
 80035c4:	20000005 	.word	0x20000005
 80035c8:	0800cdb4 	.word	0x0800cdb4
 80035cc:	2000000c 	.word	0x2000000c
 80035d0:	200002d0 	.word	0x200002d0
 80035d4:	200001e8 	.word	0x200001e8
 80035d8:	200001ec 	.word	0x200001ec
 80035dc:	20000004 	.word	0x20000004

080035e0 <start_LCD_Task>:
=======
 80035de:	20c8      	movs	r0, #200	; 0xc8
 80035e0:	f005 fb74 	bl	8008ccc <osDelay>
	{
 80035e4:	e488      	b.n	8002ef8 <start_SET_RTS_TASK+0x8>
 80035e6:	bf00      	nop
 80035e8:	0800d80c 	.word	0x0800d80c
 80035ec:	2000000b 	.word	0x2000000b
 80035f0:	20000a50 	.word	0x20000a50
 80035f4:	20000ad8 	.word	0x20000ad8
 80035f8:	20000005 	.word	0x20000005
 80035fc:	0800d818 	.word	0x0800d818
 8003600:	2000000c 	.word	0x2000000c
 8003604:	200009ec 	.word	0x200009ec
 8003608:	200003e4 	.word	0x200003e4
 800360c:	200003e8 	.word	0x200003e8
 8003610:	20000004 	.word	0x20000004

08003614 <start_UART_USB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_UART_USB_Task */
void start_UART_USB_Task(void *argument)
{
 8003614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003616:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 800361a:	af00      	add	r7, sp, #0
 800361c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003620:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003624:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN start_UART_USB_Task */
  /* Infinite loop */
  for(;;)
  {
	  char str_end_of_line[3] = {'\r','\n'};
 8003626:	4a8e      	ldr	r2, [pc, #568]	; (8003860 <start_UART_USB_Task+0x24c>)
 8003628:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	4611      	mov	r1, r2
 8003630:	8019      	strh	r1, [r3, #0]
 8003632:	3302      	adds	r3, #2
 8003634:	0c12      	lsrs	r2, r2, #16
 8003636:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003638:	232d      	movs	r3, #45	; 0x2d
 800363a:	f887 32bf 	strb.w	r3, [r7, #703]	; 0x2bf
	  char buff[10] = {0};
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8003644:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 800364e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003652:	f44f 7219 	mov.w	r2, #612	; 0x264
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f009 fb5d 	bl	800cd18 <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 800365e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc fd74 	bl	8000150 <strlen>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003670:	4413      	add	r3, r2
 8003672:	4a7c      	ldr	r2, [pc, #496]	; (8003864 <start_UART_USB_Task+0x250>)
 8003674:	461d      	mov	r5, r3
 8003676:	4614      	mov	r4, r2
 8003678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367a:	6028      	str	r0, [r5, #0]
 800367c:	6069      	str	r1, [r5, #4]
 800367e:	60aa      	str	r2, [r5, #8]
 8003680:	60eb      	str	r3, [r5, #12]
 8003682:	cc03      	ldmia	r4!, {r0, r1}
 8003684:	6128      	str	r0, [r5, #16]
 8003686:	6169      	str	r1, [r5, #20]
 8003688:	7823      	ldrb	r3, [r4, #0]
 800368a:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 800368c:	f009 fa2c 	bl	800cae8 <xPortGetFreeHeapSize>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	4b74      	ldr	r3, [pc, #464]	; (8003868 <start_UART_USB_Task+0x254>)
 8003696:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8003698:	4b73      	ldr	r3, [pc, #460]	; (8003868 <start_UART_USB_Task+0x254>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f507 712c 	add.w	r1, r7, #688	; 0x2b0
 80036a0:	220a      	movs	r2, #10
 80036a2:	4618      	mov	r0, r3
 80036a4:	f009 fb26 	bl	800ccf4 <itoa>
	  strcat(msg.Buf, buff);
 80036a8:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 80036ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f009 fbfc 	bl	800ceb0 <strcat>
	  strcat(msg.Buf, str_end_of_line);
 80036b8:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 80036bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f009 fbf4 	bl	800ceb0 <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 80036c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc fd3f 	bl	8000150 <strlen>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036da:	4413      	add	r3, r2
 80036dc:	4a63      	ldr	r2, [pc, #396]	; (800386c <start_UART_USB_Task+0x258>)
 80036de:	4614      	mov	r4, r2
 80036e0:	469c      	mov	ip, r3
 80036e2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80036e6:	4665      	mov	r5, ip
 80036e8:	4626      	mov	r6, r4
 80036ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80036ec:	6028      	str	r0, [r5, #0]
 80036ee:	6069      	str	r1, [r5, #4]
 80036f0:	60aa      	str	r2, [r5, #8]
 80036f2:	60eb      	str	r3, [r5, #12]
 80036f4:	3410      	adds	r4, #16
 80036f6:	f10c 0c10 	add.w	ip, ip, #16
 80036fa:	4574      	cmp	r4, lr
 80036fc:	d1f3      	bne.n	80036e6 <start_UART_USB_Task+0xd2>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 80036fe:	485c      	ldr	r0, [pc, #368]	; (8003870 <start_UART_USB_Task+0x25c>)
 8003700:	f008 fa4a 	bl	800bb98 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  while(msg.Buf[buffer_size] != '\0')
 800370a:	e004      	b.n	8003716 <start_UART_USB_Task+0x102>
	  {
		  buffer_size ++;
 800370c:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 8003710:	3301      	adds	r3, #1
 8003712:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  while(msg.Buf[buffer_size] != '\0')
 8003716:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 800371a:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 800371e:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8003722:	5cd3      	ldrb	r3, [r2, r3]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f1      	bne.n	800370c <start_UART_USB_Task+0xf8>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 800372e:	2300      	movs	r3, #0
 8003730:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8003734:	e013      	b.n	800375e <start_UART_USB_Task+0x14a>
	  {
		  // add data to queue
		  msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003736:	f8b7 22c6 	ldrh.w	r2, [r7, #710]	; 0x2c6
 800373a:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800373e:	4413      	add	r3, r2
 8003740:	494b      	ldr	r1, [pc, #300]	; (8003870 <start_UART_USB_Task+0x25c>)
 8003742:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8003746:	440a      	add	r2, r1
 8003748:	7811      	ldrb	r1, [r2, #0]
 800374a:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 800374e:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8003752:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003754:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8003758:	3301      	adds	r3, #1
 800375a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 800375e:	4a44      	ldr	r2, [pc, #272]	; (8003870 <start_UART_USB_Task+0x25c>)
 8003760:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8003764:	4413      	add	r3, r2
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e4      	bne.n	8003736 <start_UART_USB_Task+0x122>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <start_UART_USB_Task+0x260>)
 800376e:	f507 7425 	add.w	r4, r7, #660	; 0x294
 8003772:	461d      	mov	r5, r3
 8003774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800377c:	c403      	stmia	r4!, {r0, r1}
 800377e:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8003780:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003784:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8003788:	4a3b      	ldr	r2, [pc, #236]	; (8003878 <start_UART_USB_Task+0x264>)
 800378a:	461c      	mov	r4, r3
 800378c:	4615      	mov	r5, r2
 800378e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003796:	e895 0003 	ldmia.w	r5, {r0, r1}
 800379a:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 800379e:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80037a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f009 fb81 	bl	800ceb0 <strcat>
	  strcat(msg.Buf, str_head_2);
 80037ae:	f107 0208 	add.w	r2, r7, #8
 80037b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f009 fb79 	bl	800ceb0 <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 80037be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037c2:	2100      	movs	r1, #0
 80037c4:	482a      	ldr	r0, [pc, #168]	; (8003870 <start_UART_USB_Task+0x25c>)
 80037c6:	f009 faa7 	bl	800cd18 <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 80037ca:	4829      	ldr	r0, [pc, #164]	; (8003870 <start_UART_USB_Task+0x25c>)
 80037cc:	f008 fa7c 	bl	800bcc8 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 80037d0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 80037da:	4413      	add	r3, r2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3340      	adds	r3, #64	; 0x40
 80037e0:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 80037ea:	e013      	b.n	8003814 <start_UART_USB_Task+0x200>
	  {
		  // add data to queue
		  msg.Buf[buffer_size + i] = str_management_memory_str[i];
 80037ec:	f8b7 22c6 	ldrh.w	r2, [r7, #710]	; 0x2c6
 80037f0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80037f4:	4413      	add	r3, r2
 80037f6:	491e      	ldr	r1, [pc, #120]	; (8003870 <start_UART_USB_Task+0x25c>)
 80037f8:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80037fc:	440a      	add	r2, r1
 80037fe:	7811      	ldrb	r1, [r2, #0]
 8003800:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8003804:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8003808:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 800380a:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800380e:	3301      	adds	r3, #1
 8003810:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8003814:	4a16      	ldr	r2, [pc, #88]	; (8003870 <start_UART_USB_Task+0x25c>)
 8003816:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e4      	bne.n	80037ec <start_UART_USB_Task+0x1d8>
	  }
	  //strcat(msg.Buf, "#########################################\n\r");

	  buffer_size = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  while(msg.Buf[buffer_size] != '\0')
 8003828:	e004      	b.n	8003834 <start_UART_USB_Task+0x220>
	  {
		  buffer_size ++;
 800382a:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 800382e:	3301      	adds	r3, #1
 8003830:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	  while(msg.Buf[buffer_size] != '\0')
 8003834:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 8003838:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 800383c:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8003840:	5cd3      	ldrb	r3, [r2, r3]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f1      	bne.n	800382a <start_UART_USB_Task+0x216>
	  }
	  // Transmit over virtual comport
	  HAL_UART_Transmit_IT( &huart1, msg.Buf, buffer_size);
 8003846:	f8b7 22c6 	ldrh.w	r2, [r7, #710]	; 0x2c6
 800384a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800384e:	4619      	mov	r1, r3
 8003850:	480a      	ldr	r0, [pc, #40]	; (800387c <start_UART_USB_Task+0x268>)
 8003852:	f004 fcd0 	bl	80081f6 <HAL_UART_Transmit_IT>

	  osDelay(3000);
 8003856:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800385a:	f005 fa37 	bl	8008ccc <osDelay>
  {
 800385e:	e6e2      	b.n	8003626 <start_UART_USB_Task+0x12>
 8003860:	0800d874 	.word	0x0800d874
 8003864:	0800d824 	.word	0x0800d824
 8003868:	2000029c 	.word	0x2000029c
 800386c:	0800d840 	.word	0x0800d840
 8003870:	200000a8 	.word	0x200000a8
 8003874:	0800d878 	.word	0x0800d878
 8003878:	0800d894 	.word	0x0800d894
 800387c:	2000039c 	.word	0x2000039c

08003880 <start_LCD_Task>:
>>>>>>> e9380fc... optimisation RAM=)
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_LCD_Task */
void start_LCD_Task(void *argument)
{
<<<<<<< HEAD
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0ba      	sub	sp, #232	; 0xe8
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	6078      	str	r0, [r7, #4]
=======
 8003880:	b580      	push	{r7, lr}
 8003882:	b0ba      	sub	sp, #232	; 0xe8
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  /* Infinite loop */
	QUEUE_BME280 QUEUE_BME280_t;
	QUEUE_RTC QUEUE_RTC_t;
	QUEUE_RTC_VAL QUEUE_RTC_VAL_t;

	char str_hour[4] = {0};
<<<<<<< HEAD
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char str_minute[4] = {0};
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	char str_msecond[4] = {0};
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char str_buf[6] = {0};
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003600:	2300      	movs	r3, #0
 8003602:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	char str_date[15] = {0};
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800360c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	f8c3 2007 	str.w	r2, [r3, #7]
	char str_time_buf[10] = {0};
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003620:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	809a      	strh	r2, [r3, #4]

	bool two_point = true;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	ILI9341_Reset();
 8003630:	f7fd fc4a 	bl	8000ec8 <ILI9341_Reset>
	ILI9341_Init();
 8003634:	f7fd fcc6 	bl	8000fc4 <ILI9341_Init>
	ILI9341_Fill_Screen(BLACK);
 8003638:	2000      	movs	r0, #0
 800363a:	f7fd fe71 	bl	8001320 <ILI9341_Fill_Screen>
=======
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char str_minute[4] = {0};
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	char str_msecond[4] = {0};
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	char str_buf[6] = {0};
 800389a:	2300      	movs	r3, #0
 800389c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	char str_date[15] = {0};
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80038ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	f8c3 2007 	str.w	r2, [r3, #7]
	char str_time_buf[10] = {0};
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	809a      	strh	r2, [r3, #4]

	bool two_point = true;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	ILI9341_Reset();
 80038d0:	f7fd fafa 	bl	8000ec8 <ILI9341_Reset>
	ILI9341_Init();
 80038d4:	f7fd fb76 	bl	8000fc4 <ILI9341_Init>
	ILI9341_Fill_Screen(BLACK);
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fd fd21 	bl	8001320 <ILI9341_Fill_Screen>
>>>>>>> e9380fc... optimisation RAM=)

	//ILI9341_Draw_Image(snow_tiger, SCREEN_HORIZONTAL_2);

	osDelay(1000);
<<<<<<< HEAD
 800363e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003642:	f005 f9a3 	bl	800898c <osDelay>

	// Draw static lines
	ILI9341_Draw_Hollow_Rectangle_Coord(0, 0, 319, 150, BLUE);
 8003646:	231f      	movs	r3, #31
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	2396      	movs	r3, #150	; 0x96
 800364c:	f240 123f 	movw	r2, #319	; 0x13f
 8003650:	2100      	movs	r1, #0
 8003652:	2000      	movs	r0, #0
 8003654:	f7fd fa3a 	bl	8000acc <ILI9341_Draw_Hollow_Rectangle_Coord>
=======
 80038de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038e2:	f005 f9f3 	bl	8008ccc <osDelay>

	// Draw static lines
	ILI9341_Draw_Hollow_Rectangle_Coord(0, 0, 319, 150, BLUE);
 80038e6:	231f      	movs	r3, #31
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2396      	movs	r3, #150	; 0x96
 80038ec:	f240 123f 	movw	r2, #319	; 0x13f
 80038f0:	2100      	movs	r1, #0
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7fd f8ea 	bl	8000acc <ILI9341_Draw_Hollow_Rectangle_Coord>
>>>>>>> e9380fc... optimisation RAM=)

	for(;;)
	{

		if(osSemaphoreAcquire(LCD_SemHandle, 10) == osOK)
<<<<<<< HEAD
 8003658:	4bd8      	ldr	r3, [pc, #864]	; (80039bc <start_LCD_Task+0x3dc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	210a      	movs	r1, #10
 800365e:	4618      	mov	r0, r3
 8003660:	f005 fba6 	bl	8008db0 <osSemaphoreAcquire>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 8545 	bne.w	80040f6 <start_LCD_Task+0xb16>
		{
			// If new time/data is selecting
			if((xQueueReceive(QUEUE_RTC_VALHandle , &QUEUE_RTC_VAL_t, 0)) == pdTRUE)
 800366c:	4bd4      	ldr	r3, [pc, #848]	; (80039c0 <start_LCD_Task+0x3e0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003674:	2200      	movs	r2, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f006 fa46 	bl	8009b08 <xQueueReceive>
 800367c:	4603      	mov	r3, r0
 800367e:	2b01      	cmp	r3, #1
 8003680:	d128      	bne.n	80036d4 <start_LCD_Task+0xf4>
			{
				ILI9341_Fill_Screen(BLACK);
 8003682:	2000      	movs	r0, #0
 8003684:	f7fd fe4c 	bl	8001320 <ILI9341_Fill_Screen>
				char buf[6] = {0};
 8003688:	2300      	movs	r3, #0
 800368a:	67bb      	str	r3, [r7, #120]	; 0x78
 800368c:	2300      	movs	r3, #0
 800368e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
				// Convert QUEUE_RTC_VAL_t.new_value into strint
				sprintf(buf, "%d", QUEUE_RTC_VAL_t.new_value);
 8003692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003696:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800369a:	49ca      	ldr	r1, [pc, #808]	; (80039c4 <start_LCD_Task+0x3e4>)
 800369c:	4618      	mov	r0, r3
 800369e:	f008 ff1b 	bl	800c4d8 <siprintf>
				ILI9341_Draw_Text(QUEUE_RTC_VAL_t.name, 10, 100, YELLOW, 2, BLACK);
 80036a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80036a6:	1d18      	adds	r0, r3, #4
 80036a8:	2300      	movs	r3, #0
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	2302      	movs	r3, #2
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036b4:	2264      	movs	r2, #100	; 0x64
 80036b6:	210a      	movs	r1, #10
 80036b8:	f7fd fb24 	bl	8000d04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text(buf, 200, 100, YELLOW, 2, BLACK);
 80036bc:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80036c0:	2300      	movs	r3, #0
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	2302      	movs	r3, #2
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036cc:	2264      	movs	r2, #100	; 0x64
 80036ce:	21c8      	movs	r1, #200	; 0xc8
 80036d0:	f7fd fb18 	bl	8000d04 <ILI9341_Draw_Text>
=======
 80038f8:	4bd8      	ldr	r3, [pc, #864]	; (8003c5c <start_LCD_Task+0x3dc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	210a      	movs	r1, #10
 80038fe:	4618      	mov	r0, r3
 8003900:	f005 fbf6 	bl	80090f0 <osSemaphoreAcquire>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	f040 8545 	bne.w	8004396 <start_LCD_Task+0xb16>
		{
			// If new time/data is selecting
			if((xQueueReceive(QUEUE_RTC_VALHandle , &QUEUE_RTC_VAL_t, 0)) == pdTRUE)
 800390c:	4bd4      	ldr	r3, [pc, #848]	; (8003c60 <start_LCD_Task+0x3e0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003914:	2200      	movs	r2, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f006 fa96 	bl	8009e48 <xQueueReceive>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d128      	bne.n	8003974 <start_LCD_Task+0xf4>
			{
				ILI9341_Fill_Screen(BLACK);
 8003922:	2000      	movs	r0, #0
 8003924:	f7fd fcfc 	bl	8001320 <ILI9341_Fill_Screen>
				char buf[6] = {0};
 8003928:	2300      	movs	r3, #0
 800392a:	67bb      	str	r3, [r7, #120]	; 0x78
 800392c:	2300      	movs	r3, #0
 800392e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
				// Convert QUEUE_RTC_VAL_t.new_value into strint
				sprintf(buf, "%d", QUEUE_RTC_VAL_t.new_value);
 8003932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003936:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800393a:	49ca      	ldr	r1, [pc, #808]	; (8003c64 <start_LCD_Task+0x3e4>)
 800393c:	4618      	mov	r0, r3
 800393e:	f009 fa97 	bl	800ce70 <siprintf>
				ILI9341_Draw_Text(QUEUE_RTC_VAL_t.name, 10, 100, YELLOW, 2, BLACK);
 8003942:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003946:	1d18      	adds	r0, r3, #4
 8003948:	2300      	movs	r3, #0
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	2302      	movs	r3, #2
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003954:	2264      	movs	r2, #100	; 0x64
 8003956:	210a      	movs	r1, #10
 8003958:	f7fd f9d4 	bl	8000d04 <ILI9341_Draw_Text>
				ILI9341_Draw_Text(buf, 200, 100, YELLOW, 2, BLACK);
 800395c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003960:	2300      	movs	r3, #0
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	2302      	movs	r3, #2
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800396c:	2264      	movs	r2, #100	; 0x64
 800396e:	21c8      	movs	r1, #200	; 0xc8
 8003970:	f7fd f9c8 	bl	8000d04 <ILI9341_Draw_Text>
>>>>>>> e9380fc... optimisation RAM=)
			}


			// If data from BME280 is ready print T, H and  P
			// Waiting queue from start_BPE280_Task
			if((xQueueReceive(THPQueueHandle, &QUEUE_BME280_t, 0)) == pdTRUE)
<<<<<<< HEAD
 80036d4:	4bbc      	ldr	r3, [pc, #752]	; (80039c8 <start_LCD_Task+0x3e8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80036dc:	2200      	movs	r2, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f006 fa12 	bl	8009b08 <xQueueReceive>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	f040 80d6 	bne.w	8003898 <start_LCD_Task+0x2b8>
			{
				// Print T, H and  P on LCD
				char str_temperature[5] = {0};
 80036ec:	2300      	movs	r3, #0
 80036ee:	673b      	str	r3, [r7, #112]	; 0x70
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
				char str_humidity[5] = {0};
 80036f6:	2300      	movs	r3, #0
 80036f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
				char str_preassure[10] = {0};
 8003700:	2300      	movs	r3, #0
 8003702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003704:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	809a      	strh	r2, [r3, #4]

				//int preasure = QUEUE_BME280_t.pressure;
				sprintf(str_temperature, "%d", (int)QUEUE_BME280_t.temperature);
 800370e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc fff8 	bl	8000708 <__aeabi_f2iz>
 8003718:	4602      	mov	r2, r0
 800371a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800371e:	49a9      	ldr	r1, [pc, #676]	; (80039c4 <start_LCD_Task+0x3e4>)
 8003720:	4618      	mov	r0, r3
 8003722:	f008 fed9 	bl	800c4d8 <siprintf>
				char strthp_buf_t[1] = {0};
 8003726:	2300      	movs	r3, #0
 8003728:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				strncat(strthp_buf_t, "T:", 2);
 800372c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003730:	4618      	mov	r0, r3
 8003732:	f7fc fd0d 	bl	8000150 <strlen>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800373e:	4413      	add	r3, r2
 8003740:	4aa2      	ldr	r2, [pc, #648]	; (80039cc <start_LCD_Task+0x3ec>)
 8003742:	8811      	ldrh	r1, [r2, #0]
 8003744:	7892      	ldrb	r2, [r2, #2]
 8003746:	8019      	strh	r1, [r3, #0]
 8003748:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_t, str_temperature, sizeof(str_temperature));
 800374a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800374e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003752:	2205      	movs	r2, #5
 8003754:	4618      	mov	r0, r3
 8003756:	f008 fedf 	bl	800c518 <strncat>
				strncat(strthp_buf_t, " C", 2);
 800375a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc fcf6 	bl	8000150 <strlen>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800376c:	4413      	add	r3, r2
 800376e:	4a98      	ldr	r2, [pc, #608]	; (80039d0 <start_LCD_Task+0x3f0>)
 8003770:	8811      	ldrh	r1, [r2, #0]
 8003772:	7892      	ldrb	r2, [r2, #2]
 8003774:	8019      	strh	r1, [r3, #0]
 8003776:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_t, 10, 160, YELLOW, 2, BLACK);
 8003778:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800377c:	2300      	movs	r3, #0
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	2302      	movs	r3, #2
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003788:	22a0      	movs	r2, #160	; 0xa0
 800378a:	210a      	movs	r1, #10
 800378c:	f7fd faba 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_humidity, "%d", (int)QUEUE_BME280_t.humidity);
 8003790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc ffb7 	bl	8000708 <__aeabi_f2iz>
 800379a:	4602      	mov	r2, r0
 800379c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037a0:	4988      	ldr	r1, [pc, #544]	; (80039c4 <start_LCD_Task+0x3e4>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f008 fe98 	bl	800c4d8 <siprintf>
				char strthp_buf_h[10] = {0};
 80037a8:	2300      	movs	r3, #0
 80037aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	809a      	strh	r2, [r3, #4]
				strncat(strthp_buf_h, "H:", 2);
 80037b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fc fcc8 	bl	8000150 <strlen>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037c8:	4413      	add	r3, r2
 80037ca:	4a82      	ldr	r2, [pc, #520]	; (80039d4 <start_LCD_Task+0x3f4>)
 80037cc:	8811      	ldrh	r1, [r2, #0]
 80037ce:	7892      	ldrb	r2, [r2, #2]
 80037d0:	8019      	strh	r1, [r3, #0]
 80037d2:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_h, str_humidity, sizeof(str_humidity));
 80037d4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80037d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037dc:	2205      	movs	r2, #5
 80037de:	4618      	mov	r0, r3
 80037e0:	f008 fe9a 	bl	800c518 <strncat>
				strncat(strthp_buf_h, " %", 2);
 80037e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fcb1 	bl	8000150 <strlen>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037f6:	4413      	add	r3, r2
 80037f8:	4a77      	ldr	r2, [pc, #476]	; (80039d8 <start_LCD_Task+0x3f8>)
 80037fa:	8811      	ldrh	r1, [r2, #0]
 80037fc:	7892      	ldrb	r2, [r2, #2]
 80037fe:	8019      	strh	r1, [r3, #0]
 8003800:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_h, 10, 180, YELLOW, 2, BLACK);
 8003802:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003806:	2300      	movs	r3, #0
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2302      	movs	r3, #2
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003812:	22b4      	movs	r2, #180	; 0xb4
 8003814:	210a      	movs	r1, #10
 8003816:	f7fd fa75 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_preassure, "%d", (int)QUEUE_BME280_t.pressure);
 800381a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc ff72 	bl	8000708 <__aeabi_f2iz>
 8003824:	4602      	mov	r2, r0
 8003826:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800382a:	4966      	ldr	r1, [pc, #408]	; (80039c4 <start_LCD_Task+0x3e4>)
 800382c:	4618      	mov	r0, r3
 800382e:	f008 fe53 	bl	800c4d8 <siprintf>
				char strthp_buf_p[17] = {0};
 8003832:	2300      	movs	r3, #0
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
 8003836:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	731a      	strb	r2, [r3, #12]
				strncat(strthp_buf_p, "P:", 2);
 8003844:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fc81 	bl	8000150 <strlen>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003856:	4413      	add	r3, r2
 8003858:	4a60      	ldr	r2, [pc, #384]	; (80039dc <start_LCD_Task+0x3fc>)
 800385a:	8811      	ldrh	r1, [r2, #0]
 800385c:	7892      	ldrb	r2, [r2, #2]
 800385e:	8019      	strh	r1, [r3, #0]
 8003860:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_p, str_preassure, sizeof(str_preassure));
 8003862:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003866:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800386a:	220a      	movs	r2, #10
 800386c:	4618      	mov	r0, r3
 800386e:	f008 fe53 	bl	800c518 <strncat>
				strncat(strthp_buf_p, " mmRh", 4);
 8003872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003876:	2204      	movs	r2, #4
 8003878:	4959      	ldr	r1, [pc, #356]	; (80039e0 <start_LCD_Task+0x400>)
 800387a:	4618      	mov	r0, r3
 800387c:	f008 fe4c 	bl	800c518 <strncat>
				ILI9341_Draw_Text(strthp_buf_p, 10, 200, YELLOW, 2, BLACK);
 8003880:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003884:	2300      	movs	r3, #0
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	2302      	movs	r3, #2
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003890:	22c8      	movs	r2, #200	; 0xc8
 8003892:	210a      	movs	r1, #10
 8003894:	f7fd fa36 	bl	8000d04 <ILI9341_Draw_Text>
=======
 8003974:	4bbc      	ldr	r3, [pc, #752]	; (8003c68 <start_LCD_Task+0x3e8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800397c:	2200      	movs	r2, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f006 fa62 	bl	8009e48 <xQueueReceive>
 8003984:	4603      	mov	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	f040 80d6 	bne.w	8003b38 <start_LCD_Task+0x2b8>
			{
				// Print T, H and  P on LCD
				char str_temperature[5] = {0};
 800398c:	2300      	movs	r3, #0
 800398e:	673b      	str	r3, [r7, #112]	; 0x70
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
				char str_humidity[5] = {0};
 8003996:	2300      	movs	r3, #0
 8003998:	66bb      	str	r3, [r7, #104]	; 0x68
 800399a:	2300      	movs	r3, #0
 800399c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
				char str_preassure[10] = {0};
 80039a0:	2300      	movs	r3, #0
 80039a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	809a      	strh	r2, [r3, #4]

				//int preasure = QUEUE_BME280_t.pressure;
				sprintf(str_temperature, "%d", (int)QUEUE_BME280_t.temperature);
 80039ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fea8 	bl	8000708 <__aeabi_f2iz>
 80039b8:	4602      	mov	r2, r0
 80039ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80039be:	49a9      	ldr	r1, [pc, #676]	; (8003c64 <start_LCD_Task+0x3e4>)
 80039c0:	4618      	mov	r0, r3
 80039c2:	f009 fa55 	bl	800ce70 <siprintf>
				char strthp_buf_t[1] = {0};
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				strncat(strthp_buf_t, "T:", 2);
 80039cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fbbd 	bl	8000150 <strlen>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039de:	4413      	add	r3, r2
 80039e0:	4aa2      	ldr	r2, [pc, #648]	; (8003c6c <start_LCD_Task+0x3ec>)
 80039e2:	8811      	ldrh	r1, [r2, #0]
 80039e4:	7892      	ldrb	r2, [r2, #2]
 80039e6:	8019      	strh	r1, [r3, #0]
 80039e8:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_t, str_temperature, sizeof(str_temperature));
 80039ea:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80039ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039f2:	2205      	movs	r2, #5
 80039f4:	4618      	mov	r0, r3
 80039f6:	f009 fa72 	bl	800cede <strncat>
				strncat(strthp_buf_t, " C", 2);
 80039fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fc fba6 	bl	8000150 <strlen>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4a98      	ldr	r2, [pc, #608]	; (8003c70 <start_LCD_Task+0x3f0>)
 8003a10:	8811      	ldrh	r1, [r2, #0]
 8003a12:	7892      	ldrb	r2, [r2, #2]
 8003a14:	8019      	strh	r1, [r3, #0]
 8003a16:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_t, 10, 160, YELLOW, 2, BLACK);
 8003a18:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	2302      	movs	r3, #2
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a28:	22a0      	movs	r2, #160	; 0xa0
 8003a2a:	210a      	movs	r1, #10
 8003a2c:	f7fd f96a 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_humidity, "%d", (int)QUEUE_BME280_t.humidity);
 8003a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fc fe67 	bl	8000708 <__aeabi_f2iz>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a40:	4988      	ldr	r1, [pc, #544]	; (8003c64 <start_LCD_Task+0x3e4>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	f009 fa14 	bl	800ce70 <siprintf>
				char strthp_buf_h[10] = {0};
 8003a48:	2300      	movs	r3, #0
 8003a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	809a      	strh	r2, [r3, #4]
				strncat(strthp_buf_h, "H:", 2);
 8003a56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fb78 	bl	8000150 <strlen>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a68:	4413      	add	r3, r2
 8003a6a:	4a82      	ldr	r2, [pc, #520]	; (8003c74 <start_LCD_Task+0x3f4>)
 8003a6c:	8811      	ldrh	r1, [r2, #0]
 8003a6e:	7892      	ldrb	r2, [r2, #2]
 8003a70:	8019      	strh	r1, [r3, #0]
 8003a72:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_h, str_humidity, sizeof(str_humidity));
 8003a74:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003a78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f009 fa2d 	bl	800cede <strncat>
				strncat(strthp_buf_h, " %", 2);
 8003a84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fb61 	bl	8000150 <strlen>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a96:	4413      	add	r3, r2
 8003a98:	4a77      	ldr	r2, [pc, #476]	; (8003c78 <start_LCD_Task+0x3f8>)
 8003a9a:	8811      	ldrh	r1, [r2, #0]
 8003a9c:	7892      	ldrb	r2, [r2, #2]
 8003a9e:	8019      	strh	r1, [r3, #0]
 8003aa0:	709a      	strb	r2, [r3, #2]
				ILI9341_Draw_Text(strthp_buf_h, 10, 180, YELLOW, 2, BLACK);
 8003aa2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	2302      	movs	r3, #2
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ab2:	22b4      	movs	r2, #180	; 0xb4
 8003ab4:	210a      	movs	r1, #10
 8003ab6:	f7fd f925 	bl	8000d04 <ILI9341_Draw_Text>

				sprintf(str_preassure, "%d", (int)QUEUE_BME280_t.pressure);
 8003aba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc fe22 	bl	8000708 <__aeabi_f2iz>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003aca:	4966      	ldr	r1, [pc, #408]	; (8003c64 <start_LCD_Task+0x3e4>)
 8003acc:	4618      	mov	r0, r3
 8003ace:	f009 f9cf 	bl	800ce70 <siprintf>
				char strthp_buf_p[17] = {0};
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	609a      	str	r2, [r3, #8]
 8003ae2:	731a      	strb	r2, [r3, #12]
				strncat(strthp_buf_p, "P:", 2);
 8003ae4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fc fb31 	bl	8000150 <strlen>
 8003aee:	4603      	mov	r3, r0
 8003af0:	461a      	mov	r2, r3
 8003af2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003af6:	4413      	add	r3, r2
 8003af8:	4a60      	ldr	r2, [pc, #384]	; (8003c7c <start_LCD_Task+0x3fc>)
 8003afa:	8811      	ldrh	r1, [r2, #0]
 8003afc:	7892      	ldrb	r2, [r2, #2]
 8003afe:	8019      	strh	r1, [r3, #0]
 8003b00:	709a      	strb	r2, [r3, #2]
				strncat(strthp_buf_p, str_preassure, sizeof(str_preassure));
 8003b02:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003b06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b0a:	220a      	movs	r2, #10
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f009 f9e6 	bl	800cede <strncat>
				strncat(strthp_buf_p, " mmRh", 4);
 8003b12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b16:	2204      	movs	r2, #4
 8003b18:	4959      	ldr	r1, [pc, #356]	; (8003c80 <start_LCD_Task+0x400>)
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f009 f9df 	bl	800cede <strncat>
				ILI9341_Draw_Text(strthp_buf_p, 10, 200, YELLOW, 2, BLACK);
 8003b20:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003b24:	2300      	movs	r3, #0
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	2302      	movs	r3, #2
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b30:	22c8      	movs	r2, #200	; 0xc8
 8003b32:	210a      	movs	r1, #10
 8003b34:	f7fd f8e6 	bl	8000d04 <ILI9341_Draw_Text>
>>>>>>> e9380fc... optimisation RAM=)



			// If data from start_RTC_DS3231_
			// Waiting queue from start_RTC_DS3231_Task
			if((xQueueReceive(rtc_queueHandle, &QUEUE_RTC_t, 0) == pdPASS))
<<<<<<< HEAD
 8003898:	4b52      	ldr	r3, [pc, #328]	; (80039e4 <start_LCD_Task+0x404>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80038a0:	2200      	movs	r2, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f006 f930 	bl	8009b08 <xQueueReceive>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	f040 8423 	bne.w	80040f6 <start_LCD_Task+0xb16>
			{
				if((print_first_time_on_lcd_flag == true) )				// If print data firsttime
 80038b0:	4b4d      	ldr	r3, [pc, #308]	; (80039e8 <start_LCD_Task+0x408>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 820a 	beq.w	8003cce <start_LCD_Task+0x6ee>
=======
 8003b38:	4b52      	ldr	r3, [pc, #328]	; (8003c84 <start_LCD_Task+0x404>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003b40:	2200      	movs	r2, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f006 f980 	bl	8009e48 <xQueueReceive>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	f040 8423 	bne.w	8004396 <start_LCD_Task+0xb16>
			{
				if((print_first_time_on_lcd_flag == true) )				// If print data firsttime
 8003b50:	4b4d      	ldr	r3, [pc, #308]	; (8003c88 <start_LCD_Task+0x408>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 820a 	beq.w	8003f6e <start_LCD_Task+0x6ee>
>>>>>>> e9380fc... optimisation RAM=)
				{
//					ILI9341_Fill_Screen(BLACK);
//
//					ILI9341_Draw_Hollow_Rectangle_Coord(0, 0, 319, 150, BLUE);

					sprintf(str_hour, "%d", QUEUE_RTC_t.Hour);
<<<<<<< HEAD
 80038ba:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80038be:	461a      	mov	r2, r3
 80038c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038c4:	493f      	ldr	r1, [pc, #252]	; (80039c4 <start_LCD_Task+0x3e4>)
 80038c6:	4618      	mov	r0, r3
 80038c8:	f008 fe06 	bl	800c4d8 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 80038cc:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80038d0:	461a      	mov	r2, r3
 80038d2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80038d6:	493b      	ldr	r1, [pc, #236]	; (80039c4 <start_LCD_Task+0x3e4>)
 80038d8:	4618      	mov	r0, r3
 80038da:	f008 fdfd 	bl	800c4d8 <siprintf>
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 80038de:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80038e2:	461a      	mov	r2, r3
 80038e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038e8:	4936      	ldr	r1, [pc, #216]	; (80039c4 <start_LCD_Task+0x3e4>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f008 fdf4 	bl	800c4d8 <siprintf>

					// Updating hours  on LCD
					if(QUEUE_RTC_t.Hour < 10)
 80038f0:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80038f4:	2b09      	cmp	r3, #9
 80038f6:	d828      	bhi.n	800394a <start_LCD_Task+0x36a>
					{
						char hour_buff[5] = {0};
 80038f8:	2300      	movs	r3, #0
 80038fa:	633b      	str	r3, [r7, #48]	; 0x30
 80038fc:	2300      	movs	r3, #0
 80038fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						strncat(hour_buff, "0", 1);
 8003902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003906:	4618      	mov	r0, r3
 8003908:	f7fc fc22 	bl	8000150 <strlen>
 800390c:	4603      	mov	r3, r0
 800390e:	461a      	mov	r2, r3
 8003910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003914:	4413      	add	r3, r2
 8003916:	4935      	ldr	r1, [pc, #212]	; (80039ec <start_LCD_Task+0x40c>)
 8003918:	461a      	mov	r2, r3
 800391a:	460b      	mov	r3, r1
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	8013      	strh	r3, [r2, #0]
						strncat(hour_buff, str_hour, sizeof(str_hour));
 8003920:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8003924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003928:	2204      	movs	r2, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f008 fdf4 	bl	800c518 <strncat>
						ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 8003930:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003934:	2300      	movs	r3, #0
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	230a      	movs	r3, #10
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003940:	2201      	movs	r2, #1
 8003942:	210a      	movs	r1, #10
 8003944:	f7fd f9de 	bl	8000d04 <ILI9341_Draw_Text>
 8003948:	e00b      	b.n	8003962 <start_LCD_Task+0x382>
=======
 8003b5a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b64:	493f      	ldr	r1, [pc, #252]	; (8003c64 <start_LCD_Task+0x3e4>)
 8003b66:	4618      	mov	r0, r3
 8003b68:	f009 f982 	bl	800ce70 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 8003b6c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003b70:	461a      	mov	r2, r3
 8003b72:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003b76:	493b      	ldr	r1, [pc, #236]	; (8003c64 <start_LCD_Task+0x3e4>)
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f009 f979 	bl	800ce70 <siprintf>
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 8003b7e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003b82:	461a      	mov	r2, r3
 8003b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b88:	4936      	ldr	r1, [pc, #216]	; (8003c64 <start_LCD_Task+0x3e4>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f009 f970 	bl	800ce70 <siprintf>

					// Updating hours  on LCD
					if(QUEUE_RTC_t.Hour < 10)
 8003b90:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003b94:	2b09      	cmp	r3, #9
 8003b96:	d828      	bhi.n	8003bea <start_LCD_Task+0x36a>
					{
						char hour_buff[5] = {0};
 8003b98:	2300      	movs	r3, #0
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						strncat(hour_buff, "0", 1);
 8003ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc fad2 	bl	8000150 <strlen>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bb4:	4413      	add	r3, r2
 8003bb6:	4935      	ldr	r1, [pc, #212]	; (8003c8c <start_LCD_Task+0x40c>)
 8003bb8:	461a      	mov	r2, r3
 8003bba:	460b      	mov	r3, r1
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	8013      	strh	r3, [r2, #0]
						strncat(hour_buff, str_hour, sizeof(str_hour));
 8003bc0:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8003bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bc8:	2204      	movs	r2, #4
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f009 f987 	bl	800cede <strncat>
						ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 8003bd0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	230a      	movs	r3, #10
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003be0:	2201      	movs	r2, #1
 8003be2:	210a      	movs	r1, #10
 8003be4:	f7fd f88e 	bl	8000d04 <ILI9341_Draw_Text>
 8003be8:	e00b      	b.n	8003c02 <start_LCD_Task+0x382>
>>>>>>> e9380fc... optimisation RAM=)
					}
					else
					{
						ILI9341_Draw_Text(str_hour, 10, 1, GREEN, 10, BLACK);
<<<<<<< HEAD
 800394a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800394e:	2300      	movs	r3, #0
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	230a      	movs	r3, #10
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800395a:	2201      	movs	r2, #1
 800395c:	210a      	movs	r1, #10
 800395e:	f7fd f9d1 	bl	8000d04 <ILI9341_Draw_Text>
=======
 8003bea:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	230a      	movs	r3, #10
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	210a      	movs	r1, #10
 8003bfe:	f7fd f881 	bl	8000d04 <ILI9341_Draw_Text>
>>>>>>> e9380fc... optimisation RAM=)
					}

					// Updating minutes on LCD
					if(QUEUE_RTC_t.Min < 10)
<<<<<<< HEAD
 8003962:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003966:	2b09      	cmp	r3, #9
 8003968:	d842      	bhi.n	80039f0 <start_LCD_Task+0x410>
					{
						char min_buff[5] = {0};
 800396a:	2300      	movs	r3, #0
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
 800396e:	2300      	movs	r3, #0
 8003970:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						strncat(min_buff, "0", 1);
 8003974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003978:	4618      	mov	r0, r3
 800397a:	f7fc fbe9 	bl	8000150 <strlen>
 800397e:	4603      	mov	r3, r0
 8003980:	461a      	mov	r2, r3
 8003982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003986:	4413      	add	r3, r2
 8003988:	4918      	ldr	r1, [pc, #96]	; (80039ec <start_LCD_Task+0x40c>)
 800398a:	461a      	mov	r2, r3
 800398c:	460b      	mov	r3, r1
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	8013      	strh	r3, [r2, #0]
						strncat(min_buff, str_minute, sizeof(str_minute));
 8003992:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800399a:	2204      	movs	r2, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f008 fdbb 	bl	800c518 <strncat>
						ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 80039a2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80039a6:	2300      	movs	r3, #0
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	230a      	movs	r3, #10
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80039b2:	2201      	movs	r2, #1
 80039b4:	21c3      	movs	r1, #195	; 0xc3
 80039b6:	f7fd f9a5 	bl	8000d04 <ILI9341_Draw_Text>
 80039ba:	e025      	b.n	8003a08 <start_LCD_Task+0x428>
 80039bc:	200003bc 	.word	0x200003bc
 80039c0:	20000334 	.word	0x20000334
 80039c4:	0800cdc0 	.word	0x0800cdc0
 80039c8:	20000200 	.word	0x20000200
 80039cc:	0800cdc4 	.word	0x0800cdc4
 80039d0:	0800cdc8 	.word	0x0800cdc8
 80039d4:	0800cdcc 	.word	0x0800cdcc
 80039d8:	0800cdd0 	.word	0x0800cdd0
 80039dc:	0800cdd4 	.word	0x0800cdd4
 80039e0:	0800cdd8 	.word	0x0800cdd8
 80039e4:	2000026c 	.word	0x2000026c
 80039e8:	20000004 	.word	0x20000004
 80039ec:	0800cde0 	.word	0x0800cde0
=======
 8003c02:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003c06:	2b09      	cmp	r3, #9
 8003c08:	d842      	bhi.n	8003c90 <start_LCD_Task+0x410>
					{
						char min_buff[5] = {0};
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
						strncat(min_buff, "0", 1);
 8003c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fc fa99 	bl	8000150 <strlen>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c26:	4413      	add	r3, r2
 8003c28:	4918      	ldr	r1, [pc, #96]	; (8003c8c <start_LCD_Task+0x40c>)
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	8013      	strh	r3, [r2, #0]
						strncat(min_buff, str_minute, sizeof(str_minute));
 8003c32:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f009 f94e 	bl	800cede <strncat>
						ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 8003c42:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003c46:	2300      	movs	r3, #0
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	230a      	movs	r3, #10
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c52:	2201      	movs	r2, #1
 8003c54:	21c3      	movs	r1, #195	; 0xc3
 8003c56:	f7fd f855 	bl	8000d04 <ILI9341_Draw_Text>
 8003c5a:	e025      	b.n	8003ca8 <start_LCD_Task+0x428>
 8003c5c:	20000ad8 	.word	0x20000ad8
 8003c60:	20000a50 	.word	0x20000a50
 8003c64:	0800d8bc 	.word	0x0800d8bc
 8003c68:	2000091c 	.word	0x2000091c
 8003c6c:	0800d8c0 	.word	0x0800d8c0
 8003c70:	0800d8c4 	.word	0x0800d8c4
 8003c74:	0800d8c8 	.word	0x0800d8c8
 8003c78:	0800d8cc 	.word	0x0800d8cc
 8003c7c:	0800d8d0 	.word	0x0800d8d0
 8003c80:	0800d8d4 	.word	0x0800d8d4
 8003c84:	20000988 	.word	0x20000988
 8003c88:	20000004 	.word	0x20000004
 8003c8c:	0800d8dc 	.word	0x0800d8dc
>>>>>>> e9380fc... optimisation RAM=)
					}
					else
					{
						ILI9341_Draw_Text(str_minute, 195, 1, GREEN, 10, BLACK);
<<<<<<< HEAD
 80039f0:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80039f4:	2300      	movs	r3, #0
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	230a      	movs	r3, #10
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a00:	2201      	movs	r2, #1
 8003a02:	21c3      	movs	r1, #195	; 0xc3
 8003a04:	f7fd f97e 	bl	8000d04 <ILI9341_Draw_Text>
=======
 8003c90:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8003c94:	2300      	movs	r3, #0
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	230a      	movs	r3, #10
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	21c3      	movs	r1, #195	; 0xc3
 8003ca4:	f7fd f82e 	bl	8000d04 <ILI9341_Draw_Text>
>>>>>>> e9380fc... optimisation RAM=)
					}

					// Updating seconds on LCD
					if(QUEUE_RTC_t.Sec == 0)
<<<<<<< HEAD
 8003a08:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <start_LCD_Task+0x446>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 8003a10:	2300      	movs	r3, #0
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	2306      	movs	r3, #6
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a1c:	2255      	movs	r2, #85	; 0x55
 8003a1e:	21d7      	movs	r1, #215	; 0xd7
 8003a20:	48d1      	ldr	r0, [pc, #836]	; (8003d68 <start_LCD_Task+0x788>)
 8003a22:	f7fd f96f 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 8003a26:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003a2a:	2b09      	cmp	r3, #9
 8003a2c:	d828      	bhi.n	8003a80 <start_LCD_Task+0x4a0>
					{
						// add '0'
						char second_buff[5] = {0};
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						strncat(second_buff, "0", 1);
 8003a38:	f107 0320 	add.w	r3, r7, #32
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fb87 	bl	8000150 <strlen>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	f107 0320 	add.w	r3, r7, #32
 8003a4a:	4413      	add	r3, r2
 8003a4c:	49c7      	ldr	r1, [pc, #796]	; (8003d6c <start_LCD_Task+0x78c>)
 8003a4e:	461a      	mov	r2, r3
 8003a50:	460b      	mov	r3, r1
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 8003a56:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8003a5a:	f107 0320 	add.w	r3, r7, #32
 8003a5e:	2204      	movs	r2, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f008 fd59 	bl	800c518 <strncat>
						//strncat(str_time_buf, minute_buff, sizeof(minute_buff));
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 8003a66:	f107 0020 	add.w	r0, r7, #32
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2306      	movs	r3, #6
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a76:	2255      	movs	r2, #85	; 0x55
 8003a78:	21d7      	movs	r1, #215	; 0xd7
 8003a7a:	f7fd f943 	bl	8000d04 <ILI9341_Draw_Text>
 8003a7e:	e00b      	b.n	8003a98 <start_LCD_Task+0x4b8>
=======
 8003ca8:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <start_LCD_Task+0x446>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	2306      	movs	r3, #6
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cbc:	2255      	movs	r2, #85	; 0x55
 8003cbe:	21d7      	movs	r1, #215	; 0xd7
 8003cc0:	48d1      	ldr	r0, [pc, #836]	; (8004008 <start_LCD_Task+0x788>)
 8003cc2:	f7fd f81f 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 8003cc6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003cca:	2b09      	cmp	r3, #9
 8003ccc:	d828      	bhi.n	8003d20 <start_LCD_Task+0x4a0>
					{
						// add '0'
						char second_buff[5] = {0};
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						strncat(second_buff, "0", 1);
 8003cd8:	f107 0320 	add.w	r3, r7, #32
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fa37 	bl	8000150 <strlen>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f107 0320 	add.w	r3, r7, #32
 8003cea:	4413      	add	r3, r2
 8003cec:	49c7      	ldr	r1, [pc, #796]	; (800400c <start_LCD_Task+0x78c>)
 8003cee:	461a      	mov	r2, r3
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 8003cf6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8003cfa:	f107 0320 	add.w	r3, r7, #32
 8003cfe:	2204      	movs	r2, #4
 8003d00:	4618      	mov	r0, r3
 8003d02:	f009 f8ec 	bl	800cede <strncat>
						//strncat(str_time_buf, minute_buff, sizeof(minute_buff));
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 8003d06:	f107 0020 	add.w	r0, r7, #32
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	2306      	movs	r3, #6
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d16:	2255      	movs	r2, #85	; 0x55
 8003d18:	21d7      	movs	r1, #215	; 0xd7
 8003d1a:	f7fc fff3 	bl	8000d04 <ILI9341_Draw_Text>
 8003d1e:	e00b      	b.n	8003d38 <start_LCD_Task+0x4b8>
>>>>>>> e9380fc... optimisation RAM=)
					}
					else
					{
						ILI9341_Draw_Text(str_msecond, 215, 85, GREEN, 6, BLACK);
<<<<<<< HEAD
 8003a80:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8003a84:	2300      	movs	r3, #0
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	2306      	movs	r3, #6
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a90:	2255      	movs	r2, #85	; 0x55
 8003a92:	21d7      	movs	r1, #215	; 0xd7
 8003a94:	f7fd f936 	bl	8000d04 <ILI9341_Draw_Text>
=======
 8003d20:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8003d24:	2300      	movs	r3, #0
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	2306      	movs	r3, #6
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d30:	2255      	movs	r2, #85	; 0x55
 8003d32:	21d7      	movs	r1, #215	; 0xd7
 8003d34:	f7fc ffe6 	bl	8000d04 <ILI9341_Draw_Text>
>>>>>>> e9380fc... optimisation RAM=)
					}

					// Draw seconds line
					ILI9341_Draw_Rectangle(10, 81, (5*QUEUE_RTC_t.Sec), 4, GREEN);
<<<<<<< HEAD
 8003a98:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	0092      	lsls	r2, r2, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2304      	movs	r3, #4
 8003aae:	2151      	movs	r1, #81	; 0x51
 8003ab0:	200a      	movs	r0, #10
 8003ab2:	f7fd fd37 	bl	8001524 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 8003ab6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <start_LCD_Task+0x4f0>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ac8:	2151      	movs	r1, #81	; 0x51
 8003aca:	200a      	movs	r0, #10
 8003acc:	f7fd fd2a 	bl	8001524 <ILI9341_Draw_Rectangle>
=======
 8003d38:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	0092      	lsls	r2, r2, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	2151      	movs	r1, #81	; 0x51
 8003d50:	200a      	movs	r0, #10
 8003d52:	f7fd fbe7 	bl	8001524 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 8003d56:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <start_LCD_Task+0x4f0>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2304      	movs	r3, #4
 8003d64:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d68:	2151      	movs	r1, #81	; 0x51
 8003d6a:	200a      	movs	r0, #10
 8003d6c:	f7fd fbda 	bl	8001524 <ILI9341_Draw_Rectangle>
>>>>>>> e9380fc... optimisation RAM=)
					}

					// Updating blink two points on LCD
					if(two_point == true)
<<<<<<< HEAD
 8003ad0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <start_LCD_Task+0x516>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	230a      	movs	r3, #10
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	2187      	movs	r1, #135	; 0x87
 8003ae8:	48a1      	ldr	r0, [pc, #644]	; (8003d70 <start_LCD_Task+0x790>)
 8003aea:	f7fd f90b 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003af4:	e00d      	b.n	8003b12 <start_LCD_Task+0x532>
=======
 8003d70:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <start_LCD_Task+0x516>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	230a      	movs	r3, #10
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d84:	2201      	movs	r2, #1
 8003d86:	2187      	movs	r1, #135	; 0x87
 8003d88:	48a1      	ldr	r0, [pc, #644]	; (8004010 <start_LCD_Task+0x790>)
 8003d8a:	f7fc ffbb 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003d94:	e00d      	b.n	8003db2 <start_LCD_Task+0x532>
>>>>>>> e9380fc... optimisation RAM=)
					}
					else
					{
						ILI9341_Draw_Text(" ", 135, 1, GREEN, 10, BLACK);
<<<<<<< HEAD
 8003af6:	2300      	movs	r3, #0
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	230a      	movs	r3, #10
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b02:	2201      	movs	r2, #1
 8003b04:	2187      	movs	r1, #135	; 0x87
 8003b06:	489b      	ldr	r0, [pc, #620]	; (8003d74 <start_LCD_Task+0x794>)
 8003b08:	f7fd f8fc 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
=======
 8003d96:	2300      	movs	r3, #0
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	230a      	movs	r3, #10
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003da2:	2201      	movs	r2, #1
 8003da4:	2187      	movs	r1, #135	; 0x87
 8003da6:	489b      	ldr	r0, [pc, #620]	; (8004014 <start_LCD_Task+0x794>)
 8003da8:	f7fc ffac 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
>>>>>>> e9380fc... optimisation RAM=)
					}

					// Date
					ILI9341_Draw_Text("        ", 10, 86, BLUE, 4, BLACK);
<<<<<<< HEAD
 8003b12:	2300      	movs	r3, #0
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	2304      	movs	r3, #4
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	231f      	movs	r3, #31
 8003b1c:	2256      	movs	r2, #86	; 0x56
 8003b1e:	210a      	movs	r1, #10
 8003b20:	4895      	ldr	r0, [pc, #596]	; (8003d78 <start_LCD_Task+0x798>)
 8003b22:	f7fd f8ef 	bl	8000d04 <ILI9341_Draw_Text>
					memset(str_buf, 0 , sizeof(str_buf));
 8003b26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b2a:	2206      	movs	r2, #6
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f008 fc26 	bl	800c380 <memset>
					sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 8003b34:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b3e:	498f      	ldr	r1, [pc, #572]	; (8003d7c <start_LCD_Task+0x79c>)
 8003b40:	4618      	mov	r0, r3
 8003b42:	f008 fcc9 	bl	800c4d8 <siprintf>

					strncat(str_date, ".", 1);
 8003b46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fb00 	bl	8000150 <strlen>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b58:	4413      	add	r3, r2
 8003b5a:	4989      	ldr	r1, [pc, #548]	; (8003d80 <start_LCD_Task+0x7a0>)
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	460b      	mov	r3, r1
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	8013      	strh	r3, [r2, #0]
					sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 8003b64:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b6e:	4983      	ldr	r1, [pc, #524]	; (8003d7c <start_LCD_Task+0x79c>)
 8003b70:	4618      	mov	r0, r3
 8003b72:	f008 fcb1 	bl	800c4d8 <siprintf>
					strncat(str_date, str_buf, sizeof(str_buf));
 8003b76:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8003b7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b7e:	2206      	movs	r2, #6
 8003b80:	4618      	mov	r0, r3
 8003b82:	f008 fcc9 	bl	800c518 <strncat>
					memset(str_buf, 0 , sizeof(str_buf));
 8003b86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b8a:	2206      	movs	r2, #6
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f008 fbf6 	bl	800c380 <memset>
					sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 8003b94:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b9e:	4977      	ldr	r1, [pc, #476]	; (8003d7c <start_LCD_Task+0x79c>)
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f008 fc99 	bl	800c4d8 <siprintf>
					strncat(str_date, ".", 1);
 8003ba6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fad0 	bl	8000150 <strlen>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bb8:	4413      	add	r3, r2
 8003bba:	4971      	ldr	r1, [pc, #452]	; (8003d80 <start_LCD_Task+0x7a0>)
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	8013      	strh	r3, [r2, #0]
					strncat(str_date, str_buf, sizeof(str_buf));
 8003bc4:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8003bc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bcc:	2206      	movs	r2, #6
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f008 fca2 	bl	800c518 <strncat>
					ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 8003bd4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	2304      	movs	r3, #4
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	231f      	movs	r3, #31
 8003be2:	2256      	movs	r2, #86	; 0x56
 8003be4:	210a      	movs	r1, #10
 8003be6:	f7fd f88d 	bl	8000d04 <ILI9341_Draw_Text>

					ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 8003bea:	2300      	movs	r3, #0
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	2302      	movs	r3, #2
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	231f      	movs	r3, #31
 8003bf4:	2278      	movs	r2, #120	; 0x78
 8003bf6:	210a      	movs	r1, #10
 8003bf8:	4862      	ldr	r0, [pc, #392]	; (8003d84 <start_LCD_Task+0x7a4>)
 8003bfa:	f7fd f883 	bl	8000d04 <ILI9341_Draw_Text>

					switch (QUEUE_RTC_t.DaysOfWeek)
 8003bfe:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003c02:	3b01      	subs	r3, #1
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d85e      	bhi.n	8003cc6 <start_LCD_Task+0x6e6>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <start_LCD_Task+0x630>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c2d 	.word	0x08003c2d
 8003c14:	08003c43 	.word	0x08003c43
 8003c18:	08003c59 	.word	0x08003c59
 8003c1c:	08003c6f 	.word	0x08003c6f
 8003c20:	08003c85 	.word	0x08003c85
 8003c24:	08003c9b 	.word	0x08003c9b
 8003c28:	08003cb1 	.word	0x08003cb1
					{
						case 1:
							ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	2302      	movs	r3, #2
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	231f      	movs	r3, #31
 8003c36:	2278      	movs	r2, #120	; 0x78
 8003c38:	210a      	movs	r1, #10
 8003c3a:	4853      	ldr	r0, [pc, #332]	; (8003d88 <start_LCD_Task+0x7a8>)
 8003c3c:	f7fd f862 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003c40:	e041      	b.n	8003cc6 <start_LCD_Task+0x6e6>
						case 2:
							ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 8003c42:	2300      	movs	r3, #0
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	2302      	movs	r3, #2
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	231f      	movs	r3, #31
 8003c4c:	2278      	movs	r2, #120	; 0x78
 8003c4e:	210a      	movs	r1, #10
 8003c50:	484e      	ldr	r0, [pc, #312]	; (8003d8c <start_LCD_Task+0x7ac>)
 8003c52:	f7fd f857 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003c56:	e036      	b.n	8003cc6 <start_LCD_Task+0x6e6>
						case 3:
							ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	231f      	movs	r3, #31
 8003c62:	2278      	movs	r2, #120	; 0x78
 8003c64:	210a      	movs	r1, #10
 8003c66:	484a      	ldr	r0, [pc, #296]	; (8003d90 <start_LCD_Task+0x7b0>)
 8003c68:	f7fd f84c 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003c6c:	e02b      	b.n	8003cc6 <start_LCD_Task+0x6e6>
						case 4:
							ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	2302      	movs	r3, #2
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	231f      	movs	r3, #31
 8003c78:	2278      	movs	r2, #120	; 0x78
 8003c7a:	210a      	movs	r1, #10
 8003c7c:	4845      	ldr	r0, [pc, #276]	; (8003d94 <start_LCD_Task+0x7b4>)
 8003c7e:	f7fd f841 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003c82:	e020      	b.n	8003cc6 <start_LCD_Task+0x6e6>
						case 5:
							ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 8003c84:	2300      	movs	r3, #0
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	2302      	movs	r3, #2
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	231f      	movs	r3, #31
 8003c8e:	2278      	movs	r2, #120	; 0x78
 8003c90:	210a      	movs	r1, #10
 8003c92:	4841      	ldr	r0, [pc, #260]	; (8003d98 <start_LCD_Task+0x7b8>)
 8003c94:	f7fd f836 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003c98:	e015      	b.n	8003cc6 <start_LCD_Task+0x6e6>
						case 6:
							ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	231f      	movs	r3, #31
 8003ca4:	2278      	movs	r2, #120	; 0x78
 8003ca6:	210a      	movs	r1, #10
 8003ca8:	483c      	ldr	r0, [pc, #240]	; (8003d9c <start_LCD_Task+0x7bc>)
 8003caa:	f7fd f82b 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003cae:	e00a      	b.n	8003cc6 <start_LCD_Task+0x6e6>
						case 7:
							ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	231f      	movs	r3, #31
 8003cba:	2278      	movs	r2, #120	; 0x78
 8003cbc:	210a      	movs	r1, #10
 8003cbe:	4838      	ldr	r0, [pc, #224]	; (8003da0 <start_LCD_Task+0x7c0>)
 8003cc0:	f7fd f820 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003cc4:	bf00      	nop
					}

					print_first_time_on_lcd_flag = false;
 8003cc6:	4b37      	ldr	r3, [pc, #220]	; (8003da4 <start_LCD_Task+0x7c4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e4c4      	b.n	8003658 <start_LCD_Task+0x78>
=======
 8003db2:	2300      	movs	r3, #0
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	2304      	movs	r3, #4
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	231f      	movs	r3, #31
 8003dbc:	2256      	movs	r2, #86	; 0x56
 8003dbe:	210a      	movs	r1, #10
 8003dc0:	4895      	ldr	r0, [pc, #596]	; (8004018 <start_LCD_Task+0x798>)
 8003dc2:	f7fc ff9f 	bl	8000d04 <ILI9341_Draw_Text>
					memset(str_buf, 0 , sizeof(str_buf));
 8003dc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003dca:	2206      	movs	r2, #6
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f008 ffa2 	bl	800cd18 <memset>
					sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 8003dd4:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003dde:	498f      	ldr	r1, [pc, #572]	; (800401c <start_LCD_Task+0x79c>)
 8003de0:	4618      	mov	r0, r3
 8003de2:	f009 f845 	bl	800ce70 <siprintf>

					strncat(str_date, ".", 1);
 8003de6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc f9b0 	bl	8000150 <strlen>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003df8:	4413      	add	r3, r2
 8003dfa:	4989      	ldr	r1, [pc, #548]	; (8004020 <start_LCD_Task+0x7a0>)
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	460b      	mov	r3, r1
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	8013      	strh	r3, [r2, #0]
					sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 8003e04:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e0e:	4983      	ldr	r1, [pc, #524]	; (800401c <start_LCD_Task+0x79c>)
 8003e10:	4618      	mov	r0, r3
 8003e12:	f009 f82d 	bl	800ce70 <siprintf>
					strncat(str_date, str_buf, sizeof(str_buf));
 8003e16:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8003e1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e1e:	2206      	movs	r2, #6
 8003e20:	4618      	mov	r0, r3
 8003e22:	f009 f85c 	bl	800cede <strncat>
					memset(str_buf, 0 , sizeof(str_buf));
 8003e26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e2a:	2206      	movs	r2, #6
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f008 ff72 	bl	800cd18 <memset>
					sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 8003e34:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e3e:	4977      	ldr	r1, [pc, #476]	; (800401c <start_LCD_Task+0x79c>)
 8003e40:	4618      	mov	r0, r3
 8003e42:	f009 f815 	bl	800ce70 <siprintf>
					strncat(str_date, ".", 1);
 8003e46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc f980 	bl	8000150 <strlen>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e58:	4413      	add	r3, r2
 8003e5a:	4971      	ldr	r1, [pc, #452]	; (8004020 <start_LCD_Task+0x7a0>)
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	460b      	mov	r3, r1
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	8013      	strh	r3, [r2, #0]
					strncat(str_date, str_buf, sizeof(str_buf));
 8003e64:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8003e68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e6c:	2206      	movs	r2, #6
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f009 f835 	bl	800cede <strncat>
					ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 8003e74:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	231f      	movs	r3, #31
 8003e82:	2256      	movs	r2, #86	; 0x56
 8003e84:	210a      	movs	r1, #10
 8003e86:	f7fc ff3d 	bl	8000d04 <ILI9341_Draw_Text>

					ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9301      	str	r3, [sp, #4]
 8003e8e:	2302      	movs	r3, #2
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	231f      	movs	r3, #31
 8003e94:	2278      	movs	r2, #120	; 0x78
 8003e96:	210a      	movs	r1, #10
 8003e98:	4862      	ldr	r0, [pc, #392]	; (8004024 <start_LCD_Task+0x7a4>)
 8003e9a:	f7fc ff33 	bl	8000d04 <ILI9341_Draw_Text>

					switch (QUEUE_RTC_t.DaysOfWeek)
 8003e9e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	2b06      	cmp	r3, #6
 8003ea6:	d85e      	bhi.n	8003f66 <start_LCD_Task+0x6e6>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <start_LCD_Task+0x630>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003ecd 	.word	0x08003ecd
 8003eb4:	08003ee3 	.word	0x08003ee3
 8003eb8:	08003ef9 	.word	0x08003ef9
 8003ebc:	08003f0f 	.word	0x08003f0f
 8003ec0:	08003f25 	.word	0x08003f25
 8003ec4:	08003f3b 	.word	0x08003f3b
 8003ec8:	08003f51 	.word	0x08003f51
					{
						case 1:
							ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	231f      	movs	r3, #31
 8003ed6:	2278      	movs	r2, #120	; 0x78
 8003ed8:	210a      	movs	r1, #10
 8003eda:	4853      	ldr	r0, [pc, #332]	; (8004028 <start_LCD_Task+0x7a8>)
 8003edc:	f7fc ff12 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003ee0:	e041      	b.n	8003f66 <start_LCD_Task+0x6e6>
						case 2:
							ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	231f      	movs	r3, #31
 8003eec:	2278      	movs	r2, #120	; 0x78
 8003eee:	210a      	movs	r1, #10
 8003ef0:	484e      	ldr	r0, [pc, #312]	; (800402c <start_LCD_Task+0x7ac>)
 8003ef2:	f7fc ff07 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003ef6:	e036      	b.n	8003f66 <start_LCD_Task+0x6e6>
						case 3:
							ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	2302      	movs	r3, #2
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	231f      	movs	r3, #31
 8003f02:	2278      	movs	r2, #120	; 0x78
 8003f04:	210a      	movs	r1, #10
 8003f06:	484a      	ldr	r0, [pc, #296]	; (8004030 <start_LCD_Task+0x7b0>)
 8003f08:	f7fc fefc 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f0c:	e02b      	b.n	8003f66 <start_LCD_Task+0x6e6>
						case 4:
							ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	2302      	movs	r3, #2
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	231f      	movs	r3, #31
 8003f18:	2278      	movs	r2, #120	; 0x78
 8003f1a:	210a      	movs	r1, #10
 8003f1c:	4845      	ldr	r0, [pc, #276]	; (8004034 <start_LCD_Task+0x7b4>)
 8003f1e:	f7fc fef1 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f22:	e020      	b.n	8003f66 <start_LCD_Task+0x6e6>
						case 5:
							ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 8003f24:	2300      	movs	r3, #0
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	2302      	movs	r3, #2
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	231f      	movs	r3, #31
 8003f2e:	2278      	movs	r2, #120	; 0x78
 8003f30:	210a      	movs	r1, #10
 8003f32:	4841      	ldr	r0, [pc, #260]	; (8004038 <start_LCD_Task+0x7b8>)
 8003f34:	f7fc fee6 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f38:	e015      	b.n	8003f66 <start_LCD_Task+0x6e6>
						case 6:
							ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	2302      	movs	r3, #2
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	231f      	movs	r3, #31
 8003f44:	2278      	movs	r2, #120	; 0x78
 8003f46:	210a      	movs	r1, #10
 8003f48:	483c      	ldr	r0, [pc, #240]	; (800403c <start_LCD_Task+0x7bc>)
 8003f4a:	f7fc fedb 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f4e:	e00a      	b.n	8003f66 <start_LCD_Task+0x6e6>
						case 7:
							ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 8003f50:	2300      	movs	r3, #0
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	2302      	movs	r3, #2
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	231f      	movs	r3, #31
 8003f5a:	2278      	movs	r2, #120	; 0x78
 8003f5c:	210a      	movs	r1, #10
 8003f5e:	4838      	ldr	r0, [pc, #224]	; (8004040 <start_LCD_Task+0x7c0>)
 8003f60:	f7fc fed0 	bl	8000d04 <ILI9341_Draw_Text>
							break;
 8003f64:	bf00      	nop
					}

					print_first_time_on_lcd_flag = false;
 8003f66:	4b37      	ldr	r3, [pc, #220]	; (8004044 <start_LCD_Task+0x7c4>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e4c4      	b.n	80038f8 <start_LCD_Task+0x78>
>>>>>>> e9380fc... optimisation RAM=)

				}
				else
				{
					sprintf(str_hour, "%d", QUEUE_RTC_t.Hour);
<<<<<<< HEAD
 8003cce:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cd8:	4928      	ldr	r1, [pc, #160]	; (8003d7c <start_LCD_Task+0x79c>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f008 fbfc 	bl	800c4d8 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 8003ce0:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003cea:	4924      	ldr	r1, [pc, #144]	; (8003d7c <start_LCD_Task+0x79c>)
 8003cec:	4618      	mov	r0, r3
 8003cee:	f008 fbf3 	bl	800c4d8 <siprintf>
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 8003cf2:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003cfc:	491f      	ldr	r1, [pc, #124]	; (8003d7c <start_LCD_Task+0x79c>)
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f008 fbea 	bl	800c4d8 <siprintf>

					// Updating hours and minutes on LCD
					if(QUEUE_RTC_t.Sec == 0)
 8003d04:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f040 8091 	bne.w	8003e30 <start_LCD_Task+0x850>
					{
						if(QUEUE_RTC_t.Min < 10)
 8003d0e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d848      	bhi.n	8003da8 <start_LCD_Task+0x7c8>
						{
							char min_buff[5] = {0};
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	773b      	strb	r3, [r7, #28]
							strncat(min_buff, "0", 1);
 8003d1e:	f107 0318 	add.w	r3, r7, #24
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fa14 	bl	8000150 <strlen>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f107 0318 	add.w	r3, r7, #24
 8003d30:	4413      	add	r3, r2
 8003d32:	490e      	ldr	r1, [pc, #56]	; (8003d6c <start_LCD_Task+0x78c>)
 8003d34:	461a      	mov	r2, r3
 8003d36:	460b      	mov	r3, r1
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	8013      	strh	r3, [r2, #0]
							strncat(min_buff, str_minute, sizeof(str_minute));
 8003d3c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003d40:	f107 0318 	add.w	r3, r7, #24
 8003d44:	2204      	movs	r2, #4
 8003d46:	4618      	mov	r0, r3
 8003d48:	f008 fbe6 	bl	800c518 <strncat>
							ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 8003d4c:	f107 0018 	add.w	r0, r7, #24
 8003d50:	2300      	movs	r3, #0
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	230a      	movs	r3, #10
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	21c3      	movs	r1, #195	; 0xc3
 8003d60:	f7fc ffd0 	bl	8000d04 <ILI9341_Draw_Text>
 8003d64:	e02c      	b.n	8003dc0 <start_LCD_Task+0x7e0>
 8003d66:	bf00      	nop
 8003d68:	0800cde4 	.word	0x0800cde4
 8003d6c:	0800cde0 	.word	0x0800cde0
 8003d70:	0800cde8 	.word	0x0800cde8
 8003d74:	0800cdec 	.word	0x0800cdec
 8003d78:	0800cdf0 	.word	0x0800cdf0
 8003d7c:	0800cdc0 	.word	0x0800cdc0
 8003d80:	0800cdfc 	.word	0x0800cdfc
 8003d84:	0800ce00 	.word	0x0800ce00
 8003d88:	0800ce0c 	.word	0x0800ce0c
 8003d8c:	0800ce14 	.word	0x0800ce14
 8003d90:	0800ce1c 	.word	0x0800ce1c
 8003d94:	0800ce28 	.word	0x0800ce28
 8003d98:	0800ce34 	.word	0x0800ce34
 8003d9c:	0800ce3c 	.word	0x0800ce3c
 8003da0:	0800ce48 	.word	0x0800ce48
 8003da4:	20000004 	.word	0x20000004
=======
 8003f6e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003f72:	461a      	mov	r2, r3
 8003f74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f78:	4928      	ldr	r1, [pc, #160]	; (800401c <start_LCD_Task+0x79c>)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f008 ff78 	bl	800ce70 <siprintf>
					sprintf(str_minute, "%d", QUEUE_RTC_t.Min);
 8003f80:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003f84:	461a      	mov	r2, r3
 8003f86:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003f8a:	4924      	ldr	r1, [pc, #144]	; (800401c <start_LCD_Task+0x79c>)
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f008 ff6f 	bl	800ce70 <siprintf>
					sprintf(str_msecond, "%d", QUEUE_RTC_t.Sec);
 8003f92:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003f96:	461a      	mov	r2, r3
 8003f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f9c:	491f      	ldr	r1, [pc, #124]	; (800401c <start_LCD_Task+0x79c>)
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f008 ff66 	bl	800ce70 <siprintf>

					// Updating hours and minutes on LCD
					if(QUEUE_RTC_t.Sec == 0)
 8003fa4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f040 8091 	bne.w	80040d0 <start_LCD_Task+0x850>
					{
						if(QUEUE_RTC_t.Min < 10)
 8003fae:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	d848      	bhi.n	8004048 <start_LCD_Task+0x7c8>
						{
							char min_buff[5] = {0};
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	773b      	strb	r3, [r7, #28]
							strncat(min_buff, "0", 1);
 8003fbe:	f107 0318 	add.w	r3, r7, #24
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc f8c4 	bl	8000150 <strlen>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f107 0318 	add.w	r3, r7, #24
 8003fd0:	4413      	add	r3, r2
 8003fd2:	490e      	ldr	r1, [pc, #56]	; (800400c <start_LCD_Task+0x78c>)
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	8013      	strh	r3, [r2, #0]
							strncat(min_buff, str_minute, sizeof(str_minute));
 8003fdc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003fe0:	f107 0318 	add.w	r3, r7, #24
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f008 ff79 	bl	800cede <strncat>
							ILI9341_Draw_Text(min_buff, 195, 1, GREEN, 10, BLACK);
 8003fec:	f107 0018 	add.w	r0, r7, #24
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	230a      	movs	r3, #10
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	21c3      	movs	r1, #195	; 0xc3
 8004000:	f7fc fe80 	bl	8000d04 <ILI9341_Draw_Text>
 8004004:	e02c      	b.n	8004060 <start_LCD_Task+0x7e0>
 8004006:	bf00      	nop
 8004008:	0800d8e0 	.word	0x0800d8e0
 800400c:	0800d8dc 	.word	0x0800d8dc
 8004010:	0800d8e4 	.word	0x0800d8e4
 8004014:	0800d8e8 	.word	0x0800d8e8
 8004018:	0800d8ec 	.word	0x0800d8ec
 800401c:	0800d8bc 	.word	0x0800d8bc
 8004020:	0800d8f8 	.word	0x0800d8f8
 8004024:	0800d8fc 	.word	0x0800d8fc
 8004028:	0800d908 	.word	0x0800d908
 800402c:	0800d910 	.word	0x0800d910
 8004030:	0800d918 	.word	0x0800d918
 8004034:	0800d924 	.word	0x0800d924
 8004038:	0800d930 	.word	0x0800d930
 800403c:	0800d938 	.word	0x0800d938
 8004040:	0800d944 	.word	0x0800d944
 8004044:	20000004 	.word	0x20000004
>>>>>>> e9380fc... optimisation RAM=)
						}
						else
						{
							ILI9341_Draw_Text(str_minute, 195, 1, GREEN, 10, BLACK);
<<<<<<< HEAD
 8003da8:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8003dac:	2300      	movs	r3, #0
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	230a      	movs	r3, #10
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003db8:	2201      	movs	r2, #1
 8003dba:	21c3      	movs	r1, #195	; 0xc3
 8003dbc:	f7fc ffa2 	bl	8000d04 <ILI9341_Draw_Text>
						}

						if(QUEUE_RTC_t.Hour < 10)
 8003dc0:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003dc4:	2b09      	cmp	r3, #9
 8003dc6:	d827      	bhi.n	8003e18 <start_LCD_Task+0x838>
						{
							char hour_buff[5] = {0};
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	753b      	strb	r3, [r7, #20]
							strncat(hour_buff, "0", 1);
 8003dd0:	f107 0310 	add.w	r3, r7, #16
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fc f9bb 	bl	8000150 <strlen>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	4413      	add	r3, r2
 8003de4:	49c5      	ldr	r1, [pc, #788]	; (80040fc <start_LCD_Task+0xb1c>)
 8003de6:	461a      	mov	r2, r3
 8003de8:	460b      	mov	r3, r1
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	8013      	strh	r3, [r2, #0]
							strncat(hour_buff, str_hour, sizeof(str_hour));
 8003dee:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8003df2:	f107 0310 	add.w	r3, r7, #16
 8003df6:	2204      	movs	r2, #4
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f008 fb8d 	bl	800c518 <strncat>
							ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 8003dfe:	f107 0010 	add.w	r0, r7, #16
 8003e02:	2300      	movs	r3, #0
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	230a      	movs	r3, #10
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e0e:	2201      	movs	r2, #1
 8003e10:	210a      	movs	r1, #10
 8003e12:	f7fc ff77 	bl	8000d04 <ILI9341_Draw_Text>
 8003e16:	e00b      	b.n	8003e30 <start_LCD_Task+0x850>
=======
 8004048:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800404c:	2300      	movs	r3, #0
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	230a      	movs	r3, #10
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004058:	2201      	movs	r2, #1
 800405a:	21c3      	movs	r1, #195	; 0xc3
 800405c:	f7fc fe52 	bl	8000d04 <ILI9341_Draw_Text>
						}

						if(QUEUE_RTC_t.Hour < 10)
 8004060:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8004064:	2b09      	cmp	r3, #9
 8004066:	d827      	bhi.n	80040b8 <start_LCD_Task+0x838>
						{
							char hour_buff[5] = {0};
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	2300      	movs	r3, #0
 800406e:	753b      	strb	r3, [r7, #20]
							strncat(hour_buff, "0", 1);
 8004070:	f107 0310 	add.w	r3, r7, #16
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc f86b 	bl	8000150 <strlen>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	f107 0310 	add.w	r3, r7, #16
 8004082:	4413      	add	r3, r2
 8004084:	49c5      	ldr	r1, [pc, #788]	; (800439c <start_LCD_Task+0xb1c>)
 8004086:	461a      	mov	r2, r3
 8004088:	460b      	mov	r3, r1
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	8013      	strh	r3, [r2, #0]
							strncat(hour_buff, str_hour, sizeof(str_hour));
 800408e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8004092:	f107 0310 	add.w	r3, r7, #16
 8004096:	2204      	movs	r2, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f008 ff20 	bl	800cede <strncat>
							ILI9341_Draw_Text(hour_buff, 10, 1, GREEN, 10, BLACK);
 800409e:	f107 0010 	add.w	r0, r7, #16
 80040a2:	2300      	movs	r3, #0
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	230a      	movs	r3, #10
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040ae:	2201      	movs	r2, #1
 80040b0:	210a      	movs	r1, #10
 80040b2:	f7fc fe27 	bl	8000d04 <ILI9341_Draw_Text>
 80040b6:	e00b      	b.n	80040d0 <start_LCD_Task+0x850>
>>>>>>> e9380fc... optimisation RAM=)
						}
						else
						{
							ILI9341_Draw_Text(str_hour, 10, 1, GREEN, 10, BLACK);
<<<<<<< HEAD
 8003e18:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	230a      	movs	r3, #10
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e28:	2201      	movs	r2, #1
 8003e2a:	210a      	movs	r1, #10
 8003e2c:	f7fc ff6a 	bl	8000d04 <ILI9341_Draw_Text>
=======
 80040b8:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80040bc:	2300      	movs	r3, #0
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	230a      	movs	r3, #10
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040c8:	2201      	movs	r2, #1
 80040ca:	210a      	movs	r1, #10
 80040cc:	f7fc fe1a 	bl	8000d04 <ILI9341_Draw_Text>
>>>>>>> e9380fc... optimisation RAM=)
						}
					}

					// Updating seconds on LCD
					if(QUEUE_RTC_t.Sec == 0)
<<<<<<< HEAD
 8003e30:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <start_LCD_Task+0x86e>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	2306      	movs	r3, #6
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e44:	2255      	movs	r2, #85	; 0x55
 8003e46:	21d7      	movs	r1, #215	; 0xd7
 8003e48:	48ad      	ldr	r0, [pc, #692]	; (8004100 <start_LCD_Task+0xb20>)
 8003e4a:	f7fc ff5b 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 8003e4e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	d827      	bhi.n	8003ea6 <start_LCD_Task+0x8c6>
					{
						// add '0'
						char second_buff[5] = {0};
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	733b      	strb	r3, [r7, #12]
						strncat(second_buff, "0", 1);
 8003e5e:	f107 0308 	add.w	r3, r7, #8
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc f974 	bl	8000150 <strlen>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	4413      	add	r3, r2
 8003e72:	49a2      	ldr	r1, [pc, #648]	; (80040fc <start_LCD_Task+0xb1c>)
 8003e74:	461a      	mov	r2, r3
 8003e76:	460b      	mov	r3, r1
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 8003e7c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8003e80:	f107 0308 	add.w	r3, r7, #8
 8003e84:	2204      	movs	r2, #4
 8003e86:	4618      	mov	r0, r3
 8003e88:	f008 fb46 	bl	800c518 <strncat>
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 8003e8c:	f107 0008 	add.w	r0, r7, #8
 8003e90:	2300      	movs	r3, #0
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	2306      	movs	r3, #6
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e9c:	2255      	movs	r2, #85	; 0x55
 8003e9e:	21d7      	movs	r1, #215	; 0xd7
 8003ea0:	f7fc ff30 	bl	8000d04 <ILI9341_Draw_Text>
 8003ea4:	e00b      	b.n	8003ebe <start_LCD_Task+0x8de>
=======
 80040d0:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <start_LCD_Task+0x86e>
					{
						ILI9341_Draw_Text("  ", 215, 85, GREEN, 6, BLACK);
 80040d8:	2300      	movs	r3, #0
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	2306      	movs	r3, #6
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040e4:	2255      	movs	r2, #85	; 0x55
 80040e6:	21d7      	movs	r1, #215	; 0xd7
 80040e8:	48ad      	ldr	r0, [pc, #692]	; (80043a0 <start_LCD_Task+0xb20>)
 80040ea:	f7fc fe0b 	bl	8000d04 <ILI9341_Draw_Text>
					}
					if(QUEUE_RTC_t.Sec < 10)
 80040ee:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80040f2:	2b09      	cmp	r3, #9
 80040f4:	d827      	bhi.n	8004146 <start_LCD_Task+0x8c6>
					{
						// add '0'
						char second_buff[5] = {0};
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	2300      	movs	r3, #0
 80040fc:	733b      	strb	r3, [r7, #12]
						strncat(second_buff, "0", 1);
 80040fe:	f107 0308 	add.w	r3, r7, #8
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc f824 	bl	8000150 <strlen>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	f107 0308 	add.w	r3, r7, #8
 8004110:	4413      	add	r3, r2
 8004112:	49a2      	ldr	r1, [pc, #648]	; (800439c <start_LCD_Task+0xb1c>)
 8004114:	461a      	mov	r2, r3
 8004116:	460b      	mov	r3, r1
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	8013      	strh	r3, [r2, #0]
						strncat(second_buff, str_msecond, sizeof(str_msecond));
 800411c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	2204      	movs	r2, #4
 8004126:	4618      	mov	r0, r3
 8004128:	f008 fed9 	bl	800cede <strncat>
						ILI9341_Draw_Text(second_buff, 215, 85, GREEN, 6, BLACK);
 800412c:	f107 0008 	add.w	r0, r7, #8
 8004130:	2300      	movs	r3, #0
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	2306      	movs	r3, #6
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800413c:	2255      	movs	r2, #85	; 0x55
 800413e:	21d7      	movs	r1, #215	; 0xd7
 8004140:	f7fc fde0 	bl	8000d04 <ILI9341_Draw_Text>
 8004144:	e00b      	b.n	800415e <start_LCD_Task+0x8de>
>>>>>>> e9380fc... optimisation RAM=)
					}
					else
					{
						ILI9341_Draw_Text(str_msecond, 215, 85, GREEN, 6, BLACK);
<<<<<<< HEAD
 8003ea6:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2306      	movs	r3, #6
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eb6:	2255      	movs	r2, #85	; 0x55
 8003eb8:	21d7      	movs	r1, #215	; 0xd7
 8003eba:	f7fc ff23 	bl	8000d04 <ILI9341_Draw_Text>
=======
 8004146:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800414a:	2300      	movs	r3, #0
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	2306      	movs	r3, #6
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004156:	2255      	movs	r2, #85	; 0x55
 8004158:	21d7      	movs	r1, #215	; 0xd7
 800415a:	f7fc fdd3 	bl	8000d04 <ILI9341_Draw_Text>
>>>>>>> e9380fc... optimisation RAM=)
					}

					// Draw seconds line
					ILI9341_Draw_Rectangle(10, 81, (5*QUEUE_RTC_t.Sec), 4, GREEN);
<<<<<<< HEAD
 8003ebe:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	2151      	movs	r1, #81	; 0x51
 8003ed6:	200a      	movs	r0, #10
 8003ed8:	f7fd fb24 	bl	8001524 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 8003edc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d108      	bne.n	8003ef6 <start_LCD_Task+0x916>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2304      	movs	r3, #4
 8003eea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eee:	2151      	movs	r1, #81	; 0x51
 8003ef0:	200a      	movs	r0, #10
 8003ef2:	f7fd fb17 	bl	8001524 <ILI9341_Draw_Rectangle>
=======
 800415e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8004162:	b29b      	uxth	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	0092      	lsls	r2, r2, #2
 8004168:	4413      	add	r3, r2
 800416a:	b29a      	uxth	r2, r3
 800416c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2304      	movs	r3, #4
 8004174:	2151      	movs	r1, #81	; 0x51
 8004176:	200a      	movs	r0, #10
 8004178:	f7fd f9d4 	bl	8001524 <ILI9341_Draw_Rectangle>
					if(QUEUE_RTC_t.Sec == 0)
 800417c:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8004180:	2b00      	cmp	r3, #0
 8004182:	d108      	bne.n	8004196 <start_LCD_Task+0x916>
					{
						ILI9341_Draw_Rectangle(10, 81, 300, 4, BLACK);
 8004184:	2300      	movs	r3, #0
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2304      	movs	r3, #4
 800418a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800418e:	2151      	movs	r1, #81	; 0x51
 8004190:	200a      	movs	r0, #10
 8004192:	f7fd f9c7 	bl	8001524 <ILI9341_Draw_Rectangle>
>>>>>>> e9380fc... optimisation RAM=)
					}

					// Updating blink two points on LCD
					if(two_point == true)
<<<<<<< HEAD
 8003ef6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00e      	beq.n	8003f1c <start_LCD_Task+0x93c>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 8003efe:	2300      	movs	r3, #0
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	230a      	movs	r3, #10
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	2187      	movs	r1, #135	; 0x87
 8003f0e:	487d      	ldr	r0, [pc, #500]	; (8004104 <start_LCD_Task+0xb24>)
 8003f10:	f7fc fef8 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003f1a:	e00d      	b.n	8003f38 <start_LCD_Task+0x958>
=======
 8004196:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <start_LCD_Task+0x93c>
					{
						ILI9341_Draw_Text(":", 135, 1, GREEN, 10, BLACK);
 800419e:	2300      	movs	r3, #0
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	230a      	movs	r3, #10
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041aa:	2201      	movs	r2, #1
 80041ac:	2187      	movs	r1, #135	; 0x87
 80041ae:	487d      	ldr	r0, [pc, #500]	; (80043a4 <start_LCD_Task+0xb24>)
 80041b0:	f7fc fda8 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = false;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80041ba:	e00d      	b.n	80041d8 <start_LCD_Task+0x958>
>>>>>>> e9380fc... optimisation RAM=)
					}
					else
					{
						ILI9341_Draw_Text(" ", 135, 1, GREEN, 10, BLACK);
<<<<<<< HEAD
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	230a      	movs	r3, #10
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2187      	movs	r1, #135	; 0x87
 8003f2c:	4876      	ldr	r0, [pc, #472]	; (8004108 <start_LCD_Task+0xb28>)
 8003f2e:	f7fc fee9 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
					}

					if(QUEUE_RTC_t.Sec == 0)
 8003f38:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 80da 	bne.w	80040f6 <start_LCD_Task+0xb16>
					{
						// Date
						ILI9341_Draw_Text("        ", 10, 86, BLUE, 4, BLACK);
 8003f42:	2300      	movs	r3, #0
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	2304      	movs	r3, #4
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	231f      	movs	r3, #31
 8003f4c:	2256      	movs	r2, #86	; 0x56
 8003f4e:	210a      	movs	r1, #10
 8003f50:	486e      	ldr	r0, [pc, #440]	; (800410c <start_LCD_Task+0xb2c>)
 8003f52:	f7fc fed7 	bl	8000d04 <ILI9341_Draw_Text>
						memset(str_buf, 0 , sizeof(str_buf));
 8003f56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f5a:	2206      	movs	r2, #6
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f008 fa0e 	bl	800c380 <memset>
						sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 8003f64:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f6e:	4968      	ldr	r1, [pc, #416]	; (8004110 <start_LCD_Task+0xb30>)
 8003f70:	4618      	mov	r0, r3
 8003f72:	f008 fab1 	bl	800c4d8 <siprintf>

						strncat(str_date, ".", 1);
 8003f76:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc f8e8 	bl	8000150 <strlen>
 8003f80:	4603      	mov	r3, r0
 8003f82:	461a      	mov	r2, r3
 8003f84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f88:	4413      	add	r3, r2
 8003f8a:	4962      	ldr	r1, [pc, #392]	; (8004114 <start_LCD_Task+0xb34>)
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	460b      	mov	r3, r1
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	8013      	strh	r3, [r2, #0]
						sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 8003f94:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f9e:	495c      	ldr	r1, [pc, #368]	; (8004110 <start_LCD_Task+0xb30>)
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f008 fa99 	bl	800c4d8 <siprintf>
						strncat(str_date, str_buf, sizeof(str_buf));
 8003fa6:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8003faa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003fae:	2206      	movs	r2, #6
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f008 fab1 	bl	800c518 <strncat>
						memset(str_buf, 0 , sizeof(str_buf));
 8003fb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fba:	2206      	movs	r2, #6
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f008 f9de 	bl	800c380 <memset>
						sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 8003fc4:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fce:	4950      	ldr	r1, [pc, #320]	; (8004110 <start_LCD_Task+0xb30>)
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f008 fa81 	bl	800c4d8 <siprintf>
						strncat(str_date, ".", 1);
 8003fd6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc f8b8 	bl	8000150 <strlen>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003fe8:	4413      	add	r3, r2
 8003fea:	494a      	ldr	r1, [pc, #296]	; (8004114 <start_LCD_Task+0xb34>)
 8003fec:	461a      	mov	r2, r3
 8003fee:	460b      	mov	r3, r1
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	8013      	strh	r3, [r2, #0]
						strncat(str_date, str_buf, sizeof(str_buf));
 8003ff4:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8003ff8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ffc:	2206      	movs	r2, #6
 8003ffe:	4618      	mov	r0, r3
 8004000:	f008 fa8a 	bl	800c518 <strncat>
						ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 8004004:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8004008:	2300      	movs	r3, #0
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	2304      	movs	r3, #4
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	231f      	movs	r3, #31
 8004012:	2256      	movs	r2, #86	; 0x56
 8004014:	210a      	movs	r1, #10
 8004016:	f7fc fe75 	bl	8000d04 <ILI9341_Draw_Text>

						ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 800401a:	2300      	movs	r3, #0
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	2302      	movs	r3, #2
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	231f      	movs	r3, #31
 8004024:	2278      	movs	r2, #120	; 0x78
 8004026:	210a      	movs	r1, #10
 8004028:	483b      	ldr	r0, [pc, #236]	; (8004118 <start_LCD_Task+0xb38>)
 800402a:	f7fc fe6b 	bl	8000d04 <ILI9341_Draw_Text>

						switch (QUEUE_RTC_t.DaysOfWeek)
 800402e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004032:	3b01      	subs	r3, #1
 8004034:	2b06      	cmp	r3, #6
 8004036:	f63f ab0f 	bhi.w	8003658 <start_LCD_Task+0x78>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <start_LCD_Task+0xa60>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	0800405d 	.word	0x0800405d
 8004044:	08004073 	.word	0x08004073
 8004048:	08004089 	.word	0x08004089
 800404c:	0800409f 	.word	0x0800409f
 8004050:	080040b5 	.word	0x080040b5
 8004054:	080040cb 	.word	0x080040cb
 8004058:	080040e1 	.word	0x080040e1
						{
							case 1:
								ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 800405c:	2300      	movs	r3, #0
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	2302      	movs	r3, #2
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	231f      	movs	r3, #31
 8004066:	2278      	movs	r2, #120	; 0x78
 8004068:	210a      	movs	r1, #10
 800406a:	482c      	ldr	r0, [pc, #176]	; (800411c <start_LCD_Task+0xb3c>)
 800406c:	f7fc fe4a 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004070:	e042      	b.n	80040f8 <start_LCD_Task+0xb18>
							case 2:
								ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 8004072:	2300      	movs	r3, #0
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	2302      	movs	r3, #2
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	231f      	movs	r3, #31
 800407c:	2278      	movs	r2, #120	; 0x78
 800407e:	210a      	movs	r1, #10
 8004080:	4827      	ldr	r0, [pc, #156]	; (8004120 <start_LCD_Task+0xb40>)
 8004082:	f7fc fe3f 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004086:	e037      	b.n	80040f8 <start_LCD_Task+0xb18>
							case 3:
								ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 8004088:	2300      	movs	r3, #0
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	2302      	movs	r3, #2
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	231f      	movs	r3, #31
 8004092:	2278      	movs	r2, #120	; 0x78
 8004094:	210a      	movs	r1, #10
 8004096:	4823      	ldr	r0, [pc, #140]	; (8004124 <start_LCD_Task+0xb44>)
 8004098:	f7fc fe34 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 800409c:	e02c      	b.n	80040f8 <start_LCD_Task+0xb18>
							case 4:
								ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 800409e:	2300      	movs	r3, #0
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	2302      	movs	r3, #2
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	231f      	movs	r3, #31
 80040a8:	2278      	movs	r2, #120	; 0x78
 80040aa:	210a      	movs	r1, #10
 80040ac:	481e      	ldr	r0, [pc, #120]	; (8004128 <start_LCD_Task+0xb48>)
 80040ae:	f7fc fe29 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80040b2:	e021      	b.n	80040f8 <start_LCD_Task+0xb18>
							case 5:
								ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 80040b4:	2300      	movs	r3, #0
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	2302      	movs	r3, #2
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	231f      	movs	r3, #31
 80040be:	2278      	movs	r2, #120	; 0x78
 80040c0:	210a      	movs	r1, #10
 80040c2:	481a      	ldr	r0, [pc, #104]	; (800412c <start_LCD_Task+0xb4c>)
 80040c4:	f7fc fe1e 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80040c8:	e016      	b.n	80040f8 <start_LCD_Task+0xb18>
							case 6:
								ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 80040ca:	2300      	movs	r3, #0
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	2302      	movs	r3, #2
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	231f      	movs	r3, #31
 80040d4:	2278      	movs	r2, #120	; 0x78
 80040d6:	210a      	movs	r1, #10
 80040d8:	4815      	ldr	r0, [pc, #84]	; (8004130 <start_LCD_Task+0xb50>)
 80040da:	f7fc fe13 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80040de:	e00b      	b.n	80040f8 <start_LCD_Task+0xb18>
							case 7:
								ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 80040e0:	2300      	movs	r3, #0
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	2302      	movs	r3, #2
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	231f      	movs	r3, #31
 80040ea:	2278      	movs	r2, #120	; 0x78
 80040ec:	210a      	movs	r1, #10
 80040ee:	4811      	ldr	r0, [pc, #68]	; (8004134 <start_LCD_Task+0xb54>)
 80040f0:	f7fc fe08 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 80040f4:	e000      	b.n	80040f8 <start_LCD_Task+0xb18>
						}

					}
 80040f6:	bf00      	nop
		if(osSemaphoreAcquire(LCD_SemHandle, 10) == osOK)
 80040f8:	f7ff baae 	b.w	8003658 <start_LCD_Task+0x78>
 80040fc:	0800cde0 	.word	0x0800cde0
 8004100:	0800cde4 	.word	0x0800cde4
 8004104:	0800cde8 	.word	0x0800cde8
 8004108:	0800cdec 	.word	0x0800cdec
 800410c:	0800cdf0 	.word	0x0800cdf0
 8004110:	0800cdc0 	.word	0x0800cdc0
 8004114:	0800cdfc 	.word	0x0800cdfc
 8004118:	0800ce00 	.word	0x0800ce00
 800411c:	0800ce0c 	.word	0x0800ce0c
 8004120:	0800ce14 	.word	0x0800ce14
 8004124:	0800ce1c 	.word	0x0800ce1c
 8004128:	0800ce28 	.word	0x0800ce28
 800412c:	0800ce34 	.word	0x0800ce34
 8004130:	0800ce3c 	.word	0x0800ce3c
 8004134:	0800ce48 	.word	0x0800ce48

08004138 <Start_NRF24L01>:
=======
 80041bc:	2300      	movs	r3, #0
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	230a      	movs	r3, #10
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041c8:	2201      	movs	r2, #1
 80041ca:	2187      	movs	r1, #135	; 0x87
 80041cc:	4876      	ldr	r0, [pc, #472]	; (80043a8 <start_LCD_Task+0xb28>)
 80041ce:	f7fc fd99 	bl	8000d04 <ILI9341_Draw_Text>
						two_point = true;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
					}

					if(QUEUE_RTC_t.Sec == 0)
 80041d8:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f040 80da 	bne.w	8004396 <start_LCD_Task+0xb16>
					{
						// Date
						ILI9341_Draw_Text("        ", 10, 86, BLUE, 4, BLACK);
 80041e2:	2300      	movs	r3, #0
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	2304      	movs	r3, #4
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	231f      	movs	r3, #31
 80041ec:	2256      	movs	r2, #86	; 0x56
 80041ee:	210a      	movs	r1, #10
 80041f0:	486e      	ldr	r0, [pc, #440]	; (80043ac <start_LCD_Task+0xb2c>)
 80041f2:	f7fc fd87 	bl	8000d04 <ILI9341_Draw_Text>
						memset(str_buf, 0 , sizeof(str_buf));
 80041f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80041fa:	2206      	movs	r2, #6
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f008 fd8a 	bl	800cd18 <memset>
						sprintf(str_date, "%d", QUEUE_RTC_t.Date);
 8004204:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8004208:	461a      	mov	r2, r3
 800420a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800420e:	4968      	ldr	r1, [pc, #416]	; (80043b0 <start_LCD_Task+0xb30>)
 8004210:	4618      	mov	r0, r3
 8004212:	f008 fe2d 	bl	800ce70 <siprintf>

						strncat(str_date, ".", 1);
 8004216:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800421a:	4618      	mov	r0, r3
 800421c:	f7fb ff98 	bl	8000150 <strlen>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004228:	4413      	add	r3, r2
 800422a:	4962      	ldr	r1, [pc, #392]	; (80043b4 <start_LCD_Task+0xb34>)
 800422c:	461a      	mov	r2, r3
 800422e:	460b      	mov	r3, r1
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	8013      	strh	r3, [r2, #0]
						sprintf(str_buf, "%d", QUEUE_RTC_t.Month);
 8004234:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8004238:	461a      	mov	r2, r3
 800423a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800423e:	495c      	ldr	r1, [pc, #368]	; (80043b0 <start_LCD_Task+0xb30>)
 8004240:	4618      	mov	r0, r3
 8004242:	f008 fe15 	bl	800ce70 <siprintf>
						strncat(str_date, str_buf, sizeof(str_buf));
 8004246:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800424a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800424e:	2206      	movs	r2, #6
 8004250:	4618      	mov	r0, r3
 8004252:	f008 fe44 	bl	800cede <strncat>
						memset(str_buf, 0 , sizeof(str_buf));
 8004256:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800425a:	2206      	movs	r2, #6
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f008 fd5a 	bl	800cd18 <memset>
						sprintf(str_buf, "%d", QUEUE_RTC_t.Year);
 8004264:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8004268:	461a      	mov	r2, r3
 800426a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800426e:	4950      	ldr	r1, [pc, #320]	; (80043b0 <start_LCD_Task+0xb30>)
 8004270:	4618      	mov	r0, r3
 8004272:	f008 fdfd 	bl	800ce70 <siprintf>
						strncat(str_date, ".", 1);
 8004276:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800427a:	4618      	mov	r0, r3
 800427c:	f7fb ff68 	bl	8000150 <strlen>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004288:	4413      	add	r3, r2
 800428a:	494a      	ldr	r1, [pc, #296]	; (80043b4 <start_LCD_Task+0xb34>)
 800428c:	461a      	mov	r2, r3
 800428e:	460b      	mov	r3, r1
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	8013      	strh	r3, [r2, #0]
						strncat(str_date, str_buf, sizeof(str_buf));
 8004294:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8004298:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800429c:	2206      	movs	r2, #6
 800429e:	4618      	mov	r0, r3
 80042a0:	f008 fe1d 	bl	800cede <strncat>
						ILI9341_Draw_Text(str_date, 10, 86, BLUE, 4, BLACK);
 80042a4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80042a8:	2300      	movs	r3, #0
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	2304      	movs	r3, #4
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	231f      	movs	r3, #31
 80042b2:	2256      	movs	r2, #86	; 0x56
 80042b4:	210a      	movs	r1, #10
 80042b6:	f7fc fd25 	bl	8000d04 <ILI9341_Draw_Text>

						ILI9341_Draw_Text("           ", 10, 120, BLUE, 2, BLACK);
 80042ba:	2300      	movs	r3, #0
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	2302      	movs	r3, #2
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	231f      	movs	r3, #31
 80042c4:	2278      	movs	r2, #120	; 0x78
 80042c6:	210a      	movs	r1, #10
 80042c8:	483b      	ldr	r0, [pc, #236]	; (80043b8 <start_LCD_Task+0xb38>)
 80042ca:	f7fc fd1b 	bl	8000d04 <ILI9341_Draw_Text>

						switch (QUEUE_RTC_t.DaysOfWeek)
 80042ce:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80042d2:	3b01      	subs	r3, #1
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	f63f ab0f 	bhi.w	80038f8 <start_LCD_Task+0x78>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <start_LCD_Task+0xa60>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042fd 	.word	0x080042fd
 80042e4:	08004313 	.word	0x08004313
 80042e8:	08004329 	.word	0x08004329
 80042ec:	0800433f 	.word	0x0800433f
 80042f0:	08004355 	.word	0x08004355
 80042f4:	0800436b 	.word	0x0800436b
 80042f8:	08004381 	.word	0x08004381
						{
							case 1:
								ILI9341_Draw_Text("MONDAY", 10, 120, BLUE, 2, BLACK);
 80042fc:	2300      	movs	r3, #0
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	2302      	movs	r3, #2
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	231f      	movs	r3, #31
 8004306:	2278      	movs	r2, #120	; 0x78
 8004308:	210a      	movs	r1, #10
 800430a:	482c      	ldr	r0, [pc, #176]	; (80043bc <start_LCD_Task+0xb3c>)
 800430c:	f7fc fcfa 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004310:	e042      	b.n	8004398 <start_LCD_Task+0xb18>
							case 2:
								ILI9341_Draw_Text("TUESDAY", 10, 120, BLUE, 2, BLACK);
 8004312:	2300      	movs	r3, #0
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	2302      	movs	r3, #2
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	231f      	movs	r3, #31
 800431c:	2278      	movs	r2, #120	; 0x78
 800431e:	210a      	movs	r1, #10
 8004320:	4827      	ldr	r0, [pc, #156]	; (80043c0 <start_LCD_Task+0xb40>)
 8004322:	f7fc fcef 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004326:	e037      	b.n	8004398 <start_LCD_Task+0xb18>
							case 3:
								ILI9341_Draw_Text("WEDNESDAY", 10, 120, BLUE, 2, BLACK);
 8004328:	2300      	movs	r3, #0
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	2302      	movs	r3, #2
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	231f      	movs	r3, #31
 8004332:	2278      	movs	r2, #120	; 0x78
 8004334:	210a      	movs	r1, #10
 8004336:	4823      	ldr	r0, [pc, #140]	; (80043c4 <start_LCD_Task+0xb44>)
 8004338:	f7fc fce4 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 800433c:	e02c      	b.n	8004398 <start_LCD_Task+0xb18>
							case 4:
								ILI9341_Draw_Text("THURSDAY", 10, 120, BLUE, 2, BLACK);
 800433e:	2300      	movs	r3, #0
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	2302      	movs	r3, #2
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	231f      	movs	r3, #31
 8004348:	2278      	movs	r2, #120	; 0x78
 800434a:	210a      	movs	r1, #10
 800434c:	481e      	ldr	r0, [pc, #120]	; (80043c8 <start_LCD_Task+0xb48>)
 800434e:	f7fc fcd9 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004352:	e021      	b.n	8004398 <start_LCD_Task+0xb18>
							case 5:
								ILI9341_Draw_Text("FRIDAY", 10, 120, BLUE, 2, BLACK);
 8004354:	2300      	movs	r3, #0
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	2302      	movs	r3, #2
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	231f      	movs	r3, #31
 800435e:	2278      	movs	r2, #120	; 0x78
 8004360:	210a      	movs	r1, #10
 8004362:	481a      	ldr	r0, [pc, #104]	; (80043cc <start_LCD_Task+0xb4c>)
 8004364:	f7fc fcce 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004368:	e016      	b.n	8004398 <start_LCD_Task+0xb18>
							case 6:
								ILI9341_Draw_Text("SATURDAY", 10, 120, BLUE, 2, BLACK);
 800436a:	2300      	movs	r3, #0
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	2302      	movs	r3, #2
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	231f      	movs	r3, #31
 8004374:	2278      	movs	r2, #120	; 0x78
 8004376:	210a      	movs	r1, #10
 8004378:	4815      	ldr	r0, [pc, #84]	; (80043d0 <start_LCD_Task+0xb50>)
 800437a:	f7fc fcc3 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 800437e:	e00b      	b.n	8004398 <start_LCD_Task+0xb18>
							case 7:
								ILI9341_Draw_Text("SUNDAY", 10, 120, BLUE, 2, BLACK);
 8004380:	2300      	movs	r3, #0
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	2302      	movs	r3, #2
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	231f      	movs	r3, #31
 800438a:	2278      	movs	r2, #120	; 0x78
 800438c:	210a      	movs	r1, #10
 800438e:	4811      	ldr	r0, [pc, #68]	; (80043d4 <start_LCD_Task+0xb54>)
 8004390:	f7fc fcb8 	bl	8000d04 <ILI9341_Draw_Text>
								break;
 8004394:	e000      	b.n	8004398 <start_LCD_Task+0xb18>
						}

					}
 8004396:	bf00      	nop
		if(osSemaphoreAcquire(LCD_SemHandle, 10) == osOK)
 8004398:	f7ff baae 	b.w	80038f8 <start_LCD_Task+0x78>
 800439c:	0800d8dc 	.word	0x0800d8dc
 80043a0:	0800d8e0 	.word	0x0800d8e0
 80043a4:	0800d8e4 	.word	0x0800d8e4
 80043a8:	0800d8e8 	.word	0x0800d8e8
 80043ac:	0800d8ec 	.word	0x0800d8ec
 80043b0:	0800d8bc 	.word	0x0800d8bc
 80043b4:	0800d8f8 	.word	0x0800d8f8
 80043b8:	0800d8fc 	.word	0x0800d8fc
 80043bc:	0800d908 	.word	0x0800d908
 80043c0:	0800d910 	.word	0x0800d910
 80043c4:	0800d918 	.word	0x0800d918
 80043c8:	0800d924 	.word	0x0800d924
 80043cc:	0800d930 	.word	0x0800d930
 80043d0:	0800d938 	.word	0x0800d938
 80043d4:	0800d944 	.word	0x0800d944

080043d8 <Start_NRF24L01>:
>>>>>>> e9380fc... optimisation RAM=)
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_NRF24L01 */
void Start_NRF24L01(void *argument)
{
<<<<<<< HEAD
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_NRF24L01 */
  /* Infinite loop */
	int ggg = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
=======
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_NRF24L01 */
  /* Infinite loop */
	int ggg = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)

  for(;;)
  {

	  ggg ++;
<<<<<<< HEAD
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
    osDelay(100);
 800414a:	2064      	movs	r0, #100	; 0x64
 800414c:	f004 fc1e 	bl	800898c <osDelay>
	  ggg ++;
 8004150:	e7f8      	b.n	8004144 <Start_NRF24L01+0xc>
	...

08004154 <HAL_TIM_PeriodElapsedCallback>:
=======
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
    osDelay(100);
 80043ea:	2064      	movs	r0, #100	; 0x64
 80043ec:	f004 fc6e 	bl	8008ccc <osDelay>
	  ggg ++;
 80043f0:	e7f8      	b.n	80043e4 <Start_NRF24L01+0xc>
	...

080043f4 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
//	{
//		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
//	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004166:	f000 fa8d 	bl	8004684 <HAL_IncTick>
=======
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Timer for measure how many time task was running.
	if(htim->Instance == TIM2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004404:	d104      	bne.n	8004410 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	4a06      	ldr	r2, [pc, #24]	; (8004428 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800440e:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a05      	ldr	r2, [pc, #20]	; (800442c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 800441a:	f000 fa8f 	bl	800493c <HAL_IncTick>
>>>>>>> e9380fc... optimisation RAM=)
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40000800 	.word	0x40000800

08004178 <Error_Handler>:
=======
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200000a4 	.word	0x200000a4
 800442c:	40000800 	.word	0x40000800

08004430 <Error_Handler>:
>>>>>>> e9380fc... optimisation RAM=)
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
=======
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 800417c:	b672      	cpsid	i
}
 800417e:	bf00      	nop
=======
 8004434:	b672      	cpsid	i
}
 8004436:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8004180:	e7fe      	b.n	8004180 <Error_Handler+0x8>
	...

08004184 <HAL_MspInit>:
=======
 8004438:	e7fe      	b.n	8004438 <Error_Handler+0x8>
	...

0800443c <HAL_MspInit>:
>>>>>>> e9380fc... optimisation RAM=)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
=======
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 800418a:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <HAL_MspInit+0x78>)
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <HAL_MspInit+0x78>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6193      	str	r3, [r2, #24]
 8004196:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_MspInit+0x78>)
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_MspInit+0x78>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	4a15      	ldr	r2, [pc, #84]	; (80041fc <HAL_MspInit+0x78>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ac:	61d3      	str	r3, [r2, #28]
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <HAL_MspInit+0x78>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
=======
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <HAL_MspInit+0x78>)
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <HAL_MspInit+0x78>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6193      	str	r3, [r2, #24]
 800444e:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_MspInit+0x78>)
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <HAL_MspInit+0x78>)
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <HAL_MspInit+0x78>)
 8004460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004464:	61d3      	str	r3, [r2, #28]
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <HAL_MspInit+0x78>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 80041ba:	2200      	movs	r2, #0
 80041bc:	210f      	movs	r1, #15
 80041be:	f06f 0001 	mvn.w	r0, #1
 80041c2:	f000 fb54 	bl	800486e <HAL_NVIC_SetPriority>
=======
 8004472:	2200      	movs	r2, #0
 8004474:	210f      	movs	r1, #15
 8004476:	f06f 0001 	mvn.w	r0, #1
 800447a:	f000 fb54 	bl	8004b26 <HAL_NVIC_SetPriority>
>>>>>>> e9380fc... optimisation RAM=)

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
<<<<<<< HEAD
 80041c6:	2200      	movs	r2, #0
 80041c8:	2105      	movs	r1, #5
 80041ca:	2001      	movs	r0, #1
 80041cc:	f000 fb4f 	bl	800486e <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80041d0:	2001      	movs	r0, #1
 80041d2:	f000 fb68 	bl	80048a6 <HAL_NVIC_EnableIRQ>
=======
 800447e:	2200      	movs	r2, #0
 8004480:	2105      	movs	r1, #5
 8004482:	2001      	movs	r0, #1
 8004484:	f000 fb4f 	bl	8004b26 <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004488:	2001      	movs	r0, #1
 800448a:	f000 fb68 	bl	8004b5e <HAL_NVIC_EnableIRQ>
>>>>>>> e9380fc... optimisation RAM=)

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 80041d6:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_MspInit+0x7c>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	4a04      	ldr	r2, [pc, #16]	; (8004200 <HAL_MspInit+0x7c>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6053      	str	r3, [r2, #4]
=======
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_MspInit+0x7c>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <HAL_MspInit+0x7c>)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6053      	str	r3, [r2, #4]
>>>>>>> e9380fc... optimisation RAM=)

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	40010000 	.word	0x40010000

08004204 <HAL_I2C_MspInit>:
=======
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40010000 	.word	0x40010000

080044bc <HAL_I2C_MspInit>:
>>>>>>> e9380fc... optimisation RAM=)
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420c:	f107 0310 	add.w	r3, r7, #16
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a15      	ldr	r2, [pc, #84]	; (8004274 <HAL_I2C_MspInit+0x70>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d123      	bne.n	800426c <HAL_I2C_MspInit+0x68>
=======
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c4:	f107 0310 	add.w	r3, r7, #16
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <HAL_I2C_MspInit+0x70>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d123      	bne.n	8004524 <HAL_I2C_MspInit+0x68>
>>>>>>> e9380fc... optimisation RAM=)
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_I2C_MspInit+0x74>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4a13      	ldr	r2, [pc, #76]	; (8004278 <HAL_I2C_MspInit+0x74>)
 800422a:	f043 0308 	orr.w	r3, r3, #8
 800422e:	6193      	str	r3, [r2, #24]
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_I2C_MspInit+0x74>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
=======
 80044dc:	4b14      	ldr	r3, [pc, #80]	; (8004530 <HAL_I2C_MspInit+0x74>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <HAL_I2C_MspInit+0x74>)
 80044e2:	f043 0308 	orr.w	r3, r3, #8
 80044e6:	6193      	str	r3, [r2, #24]
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_I2C_MspInit+0x74>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 800423c:	23c0      	movs	r3, #192	; 0xc0
 800423e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004240:	2312      	movs	r3, #18
 8004242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004244:	2303      	movs	r3, #3
 8004246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004248:	f107 0310 	add.w	r3, r7, #16
 800424c:	4619      	mov	r1, r3
 800424e:	480b      	ldr	r0, [pc, #44]	; (800427c <HAL_I2C_MspInit+0x78>)
 8004250:	f000 fbe8 	bl	8004a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004254:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_I2C_MspInit+0x74>)
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	4a07      	ldr	r2, [pc, #28]	; (8004278 <HAL_I2C_MspInit+0x74>)
 800425a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800425e:	61d3      	str	r3, [r2, #28]
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_I2C_MspInit+0x74>)
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	68bb      	ldr	r3, [r7, #8]
=======
 80044f4:	23c0      	movs	r3, #192	; 0xc0
 80044f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044f8:	2312      	movs	r3, #18
 80044fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044fc:	2303      	movs	r3, #3
 80044fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004500:	f107 0310 	add.w	r3, r7, #16
 8004504:	4619      	mov	r1, r3
 8004506:	480b      	ldr	r0, [pc, #44]	; (8004534 <HAL_I2C_MspInit+0x78>)
 8004508:	f000 fbe8 	bl	8004cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_I2C_MspInit+0x74>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4a07      	ldr	r2, [pc, #28]	; (8004530 <HAL_I2C_MspInit+0x74>)
 8004512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004516:	61d3      	str	r3, [r2, #28]
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_I2C_MspInit+0x74>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
 800426c:	bf00      	nop
 800426e:	3720      	adds	r7, #32
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40005400 	.word	0x40005400
 8004278:	40021000 	.word	0x40021000
 800427c:	40010c00 	.word	0x40010c00

08004280 <HAL_SPI_MspInit>:
=======
 8004524:	bf00      	nop
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40005400 	.word	0x40005400
 8004530:	40021000 	.word	0x40021000
 8004534:	40010c00 	.word	0x40010c00

08004538 <HAL_SPI_MspInit>:
>>>>>>> e9380fc... optimisation RAM=)
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004288:	f107 0310 	add.w	r3, r7, #16
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <HAL_SPI_MspInit+0x98>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d137      	bne.n	8004310 <HAL_SPI_MspInit+0x90>
=======
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <HAL_SPI_MspInit+0x98>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d137      	bne.n	80045c8 <HAL_SPI_MspInit+0x90>
>>>>>>> e9380fc... optimisation RAM=)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 80042a0:	4b1e      	ldr	r3, [pc, #120]	; (800431c <HAL_SPI_MspInit+0x9c>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_SPI_MspInit+0x9c>)
 80042a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042aa:	6193      	str	r3, [r2, #24]
 80042ac:	4b1b      	ldr	r3, [pc, #108]	; (800431c <HAL_SPI_MspInit+0x9c>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b8:	4b18      	ldr	r3, [pc, #96]	; (800431c <HAL_SPI_MspInit+0x9c>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_SPI_MspInit+0x9c>)
 80042be:	f043 0304 	orr.w	r3, r3, #4
 80042c2:	6193      	str	r3, [r2, #24]
 80042c4:	4b15      	ldr	r3, [pc, #84]	; (800431c <HAL_SPI_MspInit+0x9c>)
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
=======
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <HAL_SPI_MspInit+0x9c>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <HAL_SPI_MspInit+0x9c>)
 800455e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004562:	6193      	str	r3, [r2, #24]
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_SPI_MspInit+0x9c>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004570:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <HAL_SPI_MspInit+0x9c>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	4a17      	ldr	r2, [pc, #92]	; (80045d4 <HAL_SPI_MspInit+0x9c>)
 8004576:	f043 0304 	orr.w	r3, r3, #4
 800457a:	6193      	str	r3, [r2, #24]
 800457c:	4b15      	ldr	r3, [pc, #84]	; (80045d4 <HAL_SPI_MspInit+0x9c>)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]
>>>>>>> e9380fc... optimisation RAM=)
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
<<<<<<< HEAD
 80042d0:	23a0      	movs	r3, #160	; 0xa0
 80042d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d4:	2302      	movs	r3, #2
 80042d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042d8:	2303      	movs	r3, #3
 80042da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042dc:	f107 0310 	add.w	r3, r7, #16
 80042e0:	4619      	mov	r1, r3
 80042e2:	480f      	ldr	r0, [pc, #60]	; (8004320 <HAL_SPI_MspInit+0xa0>)
 80042e4:	f000 fb9e 	bl	8004a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042e8:	2340      	movs	r3, #64	; 0x40
 80042ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f4:	f107 0310 	add.w	r3, r7, #16
 80042f8:	4619      	mov	r1, r3
 80042fa:	4809      	ldr	r0, [pc, #36]	; (8004320 <HAL_SPI_MspInit+0xa0>)
 80042fc:	f000 fb92 	bl	8004a24 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004300:	2200      	movs	r2, #0
 8004302:	2105      	movs	r1, #5
 8004304:	2023      	movs	r0, #35	; 0x23
 8004306:	f000 fab2 	bl	800486e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800430a:	2023      	movs	r0, #35	; 0x23
 800430c:	f000 facb 	bl	80048a6 <HAL_NVIC_EnableIRQ>
=======
 8004588:	23a0      	movs	r3, #160	; 0xa0
 800458a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458c:	2302      	movs	r3, #2
 800458e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004590:	2303      	movs	r3, #3
 8004592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004594:	f107 0310 	add.w	r3, r7, #16
 8004598:	4619      	mov	r1, r3
 800459a:	480f      	ldr	r0, [pc, #60]	; (80045d8 <HAL_SPI_MspInit+0xa0>)
 800459c:	f000 fb9e 	bl	8004cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045a0:	2340      	movs	r3, #64	; 0x40
 80045a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ac:	f107 0310 	add.w	r3, r7, #16
 80045b0:	4619      	mov	r1, r3
 80045b2:	4809      	ldr	r0, [pc, #36]	; (80045d8 <HAL_SPI_MspInit+0xa0>)
 80045b4:	f000 fb92 	bl	8004cdc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80045b8:	2200      	movs	r2, #0
 80045ba:	2105      	movs	r1, #5
 80045bc:	2023      	movs	r0, #35	; 0x23
 80045be:	f000 fab2 	bl	8004b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80045c2:	2023      	movs	r0, #35	; 0x23
 80045c4:	f000 facb 	bl	8004b5e <HAL_NVIC_EnableIRQ>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8004310:	bf00      	nop
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40013000 	.word	0x40013000
 800431c:	40021000 	.word	0x40021000
 8004320:	40010800 	.word	0x40010800

08004324 <HAL_TIM_Base_MspInit>:
=======
 80045c8:	bf00      	nop
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40013000 	.word	0x40013000
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40010800 	.word	0x40010800

080045dc <HAL_TIM_Base_MspInit>:
>>>>>>> e9380fc... optimisation RAM=)
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d113      	bne.n	800435e <HAL_TIM_Base_MspInit+0x3a>
=======
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ec:	d113      	bne.n	8004616 <HAL_TIM_Base_MspInit+0x3a>
>>>>>>> e9380fc... optimisation RAM=)
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <HAL_TIM_Base_MspInit+0x44>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <HAL_TIM_Base_MspInit+0x44>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	61d3      	str	r3, [r2, #28]
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_TIM_Base_MspInit+0x44>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800434e:	2200      	movs	r2, #0
 8004350:	2105      	movs	r1, #5
 8004352:	201c      	movs	r0, #28
 8004354:	f000 fa8b 	bl	800486e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004358:	201c      	movs	r0, #28
 800435a:	f000 faa4 	bl	80048a6 <HAL_NVIC_EnableIRQ>
=======
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_TIM_Base_MspInit+0x44>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <HAL_TIM_Base_MspInit+0x44>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	61d3      	str	r3, [r2, #28]
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_TIM_Base_MspInit+0x44>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004606:	2200      	movs	r2, #0
 8004608:	2105      	movs	r1, #5
 800460a:	201c      	movs	r0, #28
 800460c:	f000 fa8b 	bl	8004b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004610:	201c      	movs	r0, #28
 8004612:	f000 faa4 	bl	8004b5e <HAL_NVIC_EnableIRQ>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
<<<<<<< HEAD
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000

0800436c <HAL_UART_MspInit>:
=======
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000

08004624 <HAL_UART_MspInit>:
>>>>>>> e9380fc... optimisation RAM=)
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a20      	ldr	r2, [pc, #128]	; (8004408 <HAL_UART_MspInit+0x9c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d139      	bne.n	8004400 <HAL_UART_MspInit+0x94>
=======
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 0310 	add.w	r3, r7, #16
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_UART_MspInit+0x9c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d139      	bne.n	80046b8 <HAL_UART_MspInit+0x94>
>>>>>>> e9380fc... optimisation RAM=)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 800438c:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_UART_MspInit+0xa0>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <HAL_UART_MspInit+0xa0>)
 8004392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004396:	6193      	str	r3, [r2, #24]
 8004398:	4b1c      	ldr	r3, [pc, #112]	; (800440c <HAL_UART_MspInit+0xa0>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_UART_MspInit+0xa0>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_UART_MspInit+0xa0>)
 80043aa:	f043 0304 	orr.w	r3, r3, #4
 80043ae:	6193      	str	r3, [r2, #24]
 80043b0:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_UART_MspInit+0xa0>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	68bb      	ldr	r3, [r7, #8]
=======
 8004644:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <HAL_UART_MspInit+0xa0>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <HAL_UART_MspInit+0xa0>)
 800464a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800464e:	6193      	str	r3, [r2, #24]
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <HAL_UART_MspInit+0xa0>)
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_UART_MspInit+0xa0>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <HAL_UART_MspInit+0xa0>)
 8004662:	f043 0304 	orr.w	r3, r3, #4
 8004666:	6193      	str	r3, [r2, #24]
 8004668:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <HAL_UART_MspInit+0xa0>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
>>>>>>> e9380fc... optimisation RAM=)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 80043bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	2302      	movs	r3, #2
 80043c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043c6:	2303      	movs	r3, #3
 80043c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ca:	f107 0310 	add.w	r3, r7, #16
 80043ce:	4619      	mov	r1, r3
 80043d0:	480f      	ldr	r0, [pc, #60]	; (8004410 <HAL_UART_MspInit+0xa4>)
 80043d2:	f000 fb27 	bl	8004a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e4:	f107 0310 	add.w	r3, r7, #16
 80043e8:	4619      	mov	r1, r3
 80043ea:	4809      	ldr	r0, [pc, #36]	; (8004410 <HAL_UART_MspInit+0xa4>)
 80043ec:	f000 fb1a 	bl	8004a24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80043f0:	2200      	movs	r2, #0
 80043f2:	2105      	movs	r1, #5
 80043f4:	2025      	movs	r0, #37	; 0x25
 80043f6:	f000 fa3a 	bl	800486e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043fa:	2025      	movs	r0, #37	; 0x25
 80043fc:	f000 fa53 	bl	80048a6 <HAL_NVIC_EnableIRQ>
=======
 8004674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004678:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467a:	2302      	movs	r3, #2
 800467c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800467e:	2303      	movs	r3, #3
 8004680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004682:	f107 0310 	add.w	r3, r7, #16
 8004686:	4619      	mov	r1, r3
 8004688:	480f      	ldr	r0, [pc, #60]	; (80046c8 <HAL_UART_MspInit+0xa4>)
 800468a:	f000 fb27 	bl	8004cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800468e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469c:	f107 0310 	add.w	r3, r7, #16
 80046a0:	4619      	mov	r1, r3
 80046a2:	4809      	ldr	r0, [pc, #36]	; (80046c8 <HAL_UART_MspInit+0xa4>)
 80046a4:	f000 fb1a 	bl	8004cdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80046a8:	2200      	movs	r2, #0
 80046aa:	2105      	movs	r1, #5
 80046ac:	2025      	movs	r0, #37	; 0x25
 80046ae:	f000 fa3a 	bl	8004b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046b2:	2025      	movs	r0, #37	; 0x25
 80046b4:	f000 fa53 	bl	8004b5e <HAL_NVIC_EnableIRQ>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8004400:	bf00      	nop
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40013800 	.word	0x40013800
 800440c:	40021000 	.word	0x40021000
 8004410:	40010800 	.word	0x40010800

08004414 <HAL_InitTick>:
=======
 80046b8:	bf00      	nop
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40013800 	.word	0x40013800
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40010800 	.word	0x40010800

080046cc <HAL_InitTick>:
>>>>>>> e9380fc... optimisation RAM=)
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8004414:	b580      	push	{r7, lr}
 8004416:	b08c      	sub	sp, #48	; 0x30
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8004424:	2200      	movs	r2, #0
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	201e      	movs	r0, #30
 800442a:	f000 fa20 	bl	800486e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800442e:	201e      	movs	r0, #30
 8004430:	f000 fa39 	bl	80048a6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004434:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <HAL_InitTick+0xa0>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <HAL_InitTick+0xa0>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	61d3      	str	r3, [r2, #28]
 8004440:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <HAL_InitTick+0xa0>)
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800444c:	f107 0210 	add.w	r2, r7, #16
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f002 fd72 	bl	8006f40 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800445c:	f002 fd48 	bl	8006ef0 <HAL_RCC_GetPCLK1Freq>
 8004460:	4603      	mov	r3, r0
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <HAL_InitTick+0xa4>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0c9b      	lsrs	r3, r3, #18
 8004470:	3b01      	subs	r3, #1
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_InitTick+0xa8>)
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <HAL_InitTick+0xac>)
 8004478:	601a      	str	r2, [r3, #0]
=======
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80046dc:	2200      	movs	r2, #0
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	201e      	movs	r0, #30
 80046e2:	f000 fa20 	bl	8004b26 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80046e6:	201e      	movs	r0, #30
 80046e8:	f000 fa39 	bl	8004b5e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80046ec:	4b1f      	ldr	r3, [pc, #124]	; (800476c <HAL_InitTick+0xa0>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4a1e      	ldr	r2, [pc, #120]	; (800476c <HAL_InitTick+0xa0>)
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	61d3      	str	r3, [r2, #28]
 80046f8:	4b1c      	ldr	r3, [pc, #112]	; (800476c <HAL_InitTick+0xa0>)
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004704:	f107 0210 	add.w	r2, r7, #16
 8004708:	f107 0314 	add.w	r3, r7, #20
 800470c:	4611      	mov	r1, r2
 800470e:	4618      	mov	r0, r3
 8004710:	f002 fd72 	bl	80071f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004714:	f002 fd48 	bl	80071a8 <HAL_RCC_GetPCLK1Freq>
 8004718:	4603      	mov	r3, r0
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <HAL_InitTick+0xa4>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0c9b      	lsrs	r3, r3, #18
 8004728:	3b01      	subs	r3, #1
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800472c:	4b11      	ldr	r3, [pc, #68]	; (8004774 <HAL_InitTick+0xa8>)
 800472e:	4a12      	ldr	r2, [pc, #72]	; (8004778 <HAL_InitTick+0xac>)
 8004730:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_InitTick+0xa8>)
 800447c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004480:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8004482:	4a0e      	ldr	r2, [pc, #56]	; (80044bc <HAL_InitTick+0xa8>)
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <HAL_InitTick+0xa8>)
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_InitTick+0xa8>)
 8004490:	2200      	movs	r2, #0
 8004492:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8004494:	4809      	ldr	r0, [pc, #36]	; (80044bc <HAL_InitTick+0xa8>)
 8004496:	f003 f90b 	bl	80076b0 <HAL_TIM_Base_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80044a0:	4806      	ldr	r0, [pc, #24]	; (80044bc <HAL_InitTick+0xa8>)
 80044a2:	f003 f955 	bl	8007750 <HAL_TIM_Base_Start_IT>
 80044a6:	4603      	mov	r3, r0
 80044a8:	e000      	b.n	80044ac <HAL_InitTick+0x98>
=======
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <HAL_InitTick+0xa8>)
 8004734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004738:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800473a:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <HAL_InitTick+0xa8>)
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <HAL_InitTick+0xa8>)
 8004742:	2200      	movs	r2, #0
 8004744:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_InitTick+0xa8>)
 8004748:	2200      	movs	r2, #0
 800474a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800474c:	4809      	ldr	r0, [pc, #36]	; (8004774 <HAL_InitTick+0xa8>)
 800474e:	f003 f90b 	bl	8007968 <HAL_TIM_Base_Init>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8004758:	4806      	ldr	r0, [pc, #24]	; (8004774 <HAL_InitTick+0xa8>)
 800475a:	f003 f955 	bl	8007a08 <HAL_TIM_Base_Start_IT>
 800475e:	4603      	mov	r3, r0
 8004760:	e000      	b.n	8004764 <HAL_InitTick+0x98>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Return function status */
  return HAL_ERROR;
<<<<<<< HEAD
 80044aa:	2301      	movs	r3, #1
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3730      	adds	r7, #48	; 0x30
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	431bde83 	.word	0x431bde83
 80044bc:	200003c8 	.word	0x200003c8
 80044c0:	40000800 	.word	0x40000800

080044c4 <NMI_Handler>:
=======
 8004762:	2301      	movs	r3, #1
}
 8004764:	4618      	mov	r0, r3
 8004766:	3730      	adds	r7, #48	; 0x30
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40021000 	.word	0x40021000
 8004770:	431bde83 	.word	0x431bde83
 8004774:	20000ae4 	.word	0x20000ae4
 8004778:	40000800 	.word	0x40000800

0800477c <NMI_Handler>:
>>>>>>> e9380fc... optimisation RAM=)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
=======
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80044c8:	e7fe      	b.n	80044c8 <NMI_Handler+0x4>

080044ca <HardFault_Handler>:
=======
 8004780:	e7fe      	b.n	8004780 <NMI_Handler+0x4>

08004782 <HardFault_Handler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0
=======
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80044ce:	e7fe      	b.n	80044ce <HardFault_Handler+0x4>

080044d0 <MemManage_Handler>:
=======
 8004786:	e7fe      	b.n	8004786 <HardFault_Handler+0x4>

08004788 <MemManage_Handler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
=======
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80044d4:	e7fe      	b.n	80044d4 <MemManage_Handler+0x4>

080044d6 <BusFault_Handler>:
=======
 800478c:	e7fe      	b.n	800478c <MemManage_Handler+0x4>

0800478e <BusFault_Handler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
=======
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80044da:	e7fe      	b.n	80044da <BusFault_Handler+0x4>

080044dc <UsageFault_Handler>:
=======
 8004792:	e7fe      	b.n	8004792 <BusFault_Handler+0x4>

08004794 <UsageFault_Handler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
=======
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80044e0:	e7fe      	b.n	80044e0 <UsageFault_Handler+0x4>

080044e2 <DebugMon_Handler>:
=======
 8004798:	e7fe      	b.n	8004798 <UsageFault_Handler+0x4>

0800479a <DebugMon_Handler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0
=======
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <PVD_IRQHandler>:
=======
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr

080047a6 <PVD_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
<<<<<<< HEAD
 80044ee:	b580      	push	{r7, lr}
 80044f0:	af00      	add	r7, sp, #0
=======
 80047a6:	b580      	push	{r7, lr}
 80047a8:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
<<<<<<< HEAD
 80044f2:	f002 f911 	bl	8006718 <HAL_PWR_PVD_IRQHandler>
=======
 80047aa:	f002 f911 	bl	80069d0 <HAL_PWR_PVD_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
<<<<<<< HEAD
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}

080044fa <EXTI1_IRQHandler>:
=======
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <EXTI1_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
<<<<<<< HEAD
 80044fa:	b580      	push	{r7, lr}
 80044fc:	af00      	add	r7, sp, #0
=======
 80047b2:	b580      	push	{r7, lr}
 80047b4:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_4_Pin);
<<<<<<< HEAD
 80044fe:	2002      	movs	r0, #2
 8004500:	f000 fc44 	bl	8004d8c <HAL_GPIO_EXTI_IRQHandler>
=======
 80047b6:	2002      	movs	r0, #2
 80047b8:	f000 fc44 	bl	8005044 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
<<<<<<< HEAD
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}

08004508 <EXTI2_IRQHandler>:
=======
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}

080047c0 <EXTI2_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
<<<<<<< HEAD
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
=======
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_3_Pin);
<<<<<<< HEAD
 800450c:	2004      	movs	r0, #4
 800450e:	f000 fc3d 	bl	8004d8c <HAL_GPIO_EXTI_IRQHandler>
=======
 80047c4:	2004      	movs	r0, #4
 80047c6:	f000 fc3d 	bl	8005044 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
<<<<<<< HEAD
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}

08004516 <EXTI3_IRQHandler>:
=======
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}

080047ce <EXTI3_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
<<<<<<< HEAD
 8004516:	b580      	push	{r7, lr}
 8004518:	af00      	add	r7, sp, #0
=======
 80047ce:	b580      	push	{r7, lr}
 80047d0:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_2_Pin);
<<<<<<< HEAD
 800451a:	2008      	movs	r0, #8
 800451c:	f000 fc36 	bl	8004d8c <HAL_GPIO_EXTI_IRQHandler>
=======
 80047d2:	2008      	movs	r0, #8
 80047d4:	f000 fc36 	bl	8005044 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
<<<<<<< HEAD
 8004520:	bf00      	nop
 8004522:	bd80      	pop	{r7, pc}

08004524 <EXTI4_IRQHandler>:
=======
 80047d8:	bf00      	nop
 80047da:	bd80      	pop	{r7, pc}

080047dc <EXTI4_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
<<<<<<< HEAD
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
=======
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_1_Pin);
<<<<<<< HEAD
 8004528:	2010      	movs	r0, #16
 800452a:	f000 fc2f 	bl	8004d8c <HAL_GPIO_EXTI_IRQHandler>
=======
 80047e0:	2010      	movs	r0, #16
 80047e2:	f000 fc2f 	bl	8005044 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
<<<<<<< HEAD
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <TIM2_IRQHandler>:
=======
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <TIM2_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
=======
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8004538:	4802      	ldr	r0, [pc, #8]	; (8004544 <TIM2_IRQHandler+0x10>)
 800453a:	f003 f95b 	bl	80077f4 <HAL_TIM_IRQHandler>
=======
 80047f0:	4802      	ldr	r0, [pc, #8]	; (80047fc <TIM2_IRQHandler+0x10>)
 80047f2:	f003 f95b 	bl	8007aac <HAL_TIM_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000158 	.word	0x20000158

08004548 <TIM4_IRQHandler>:
=======
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000354 	.word	0x20000354

08004800 <TIM4_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< HEAD
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
=======
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< HEAD
 800454c:	4802      	ldr	r0, [pc, #8]	; (8004558 <TIM4_IRQHandler+0x10>)
 800454e:	f003 f951 	bl	80077f4 <HAL_TIM_IRQHandler>
=======
 8004804:	4802      	ldr	r0, [pc, #8]	; (8004810 <TIM4_IRQHandler+0x10>)
 8004806:	f003 f951 	bl	8007aac <HAL_TIM_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< HEAD
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200003c8 	.word	0x200003c8

0800455c <SPI1_IRQHandler>:
=======
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000ae4 	.word	0x20000ae4

08004814 <SPI1_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
<<<<<<< HEAD
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
=======
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
<<<<<<< HEAD
 8004560:	4802      	ldr	r0, [pc, #8]	; (800456c <SPI1_IRQHandler+0x10>)
 8004562:	f002 fefb 	bl	800735c <HAL_SPI_IRQHandler>
=======
 8004818:	4802      	ldr	r0, [pc, #8]	; (8004824 <SPI1_IRQHandler+0x10>)
 800481a:	f002 fefb 	bl	8007614 <HAL_SPI_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
<<<<<<< HEAD
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000100 	.word	0x20000100

08004570 <USART1_IRQHandler>:
=======
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	200002fc 	.word	0x200002fc

08004828 <USART1_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
=======
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8004574:	4802      	ldr	r0, [pc, #8]	; (8004580 <USART1_IRQHandler+0x10>)
 8004576:	f003 fce3 	bl	8007f40 <HAL_UART_IRQHandler>
=======
 800482c:	4802      	ldr	r0, [pc, #8]	; (8004838 <USART1_IRQHandler+0x10>)
 800482e:	f003 fd27 	bl	8008280 <HAL_UART_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	200001a0 	.word	0x200001a0

08004584 <EXTI15_10_IRQHandler>:
=======
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	2000039c 	.word	0x2000039c

0800483c <EXTI15_10_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< HEAD
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
=======
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERUPT_FROM_RTC_Pin);
<<<<<<< HEAD
 8004588:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800458c:	f000 fbfe 	bl	8004d8c <HAL_GPIO_EXTI_IRQHandler>
=======
 8004840:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004844:	f000 fbfe 	bl	8005044 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> e9380fc... optimisation RAM=)
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< HEAD
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}

08004594 <_sbrk>:
=======
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}

0800484c <_sbrk>:
>>>>>>> e9380fc... optimisation RAM=)
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
=======
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 800459c:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <_sbrk+0x5c>)
 800459e:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <_sbrk+0x60>)
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	613b      	str	r3, [r7, #16]
=======
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <_sbrk+0x5c>)
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <_sbrk+0x60>)
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	613b      	str	r3, [r7, #16]
>>>>>>> e9380fc... optimisation RAM=)
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <_sbrk+0x64>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <_sbrk+0x64>)
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <_sbrk+0x68>)
 80045b4:	601a      	str	r2, [r3, #0]
=======
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <_sbrk+0x64>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004868:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <_sbrk+0x64>)
 800486a:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <_sbrk+0x68>)
 800486c:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <_sbrk+0x64>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d207      	bcs.n	80045d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045c4:	f007 fea2 	bl	800c30c <__errno>
 80045c8:	4603      	mov	r3, r0
 80045ca:	220c      	movs	r2, #12
 80045cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045d2:	e009      	b.n	80045e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045d4:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <_sbrk+0x64>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <_sbrk+0x64>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	4a05      	ldr	r2, [pc, #20]	; (80045f8 <_sbrk+0x64>)
 80045e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20005000 	.word	0x20005000
 80045f4:	00000400 	.word	0x00000400
 80045f8:	20000410 	.word	0x20000410
 80045fc:	200038c8 	.word	0x200038c8

08004600 <SystemInit>:
=======
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <_sbrk+0x64>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	429a      	cmp	r2, r3
 800487a:	d207      	bcs.n	800488c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800487c:	f008 f9f8 	bl	800cc70 <__errno>
 8004880:	4603      	mov	r3, r0
 8004882:	220c      	movs	r2, #12
 8004884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800488a:	e009      	b.n	80048a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <_sbrk+0x64>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <_sbrk+0x64>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	4a05      	ldr	r2, [pc, #20]	; (80048b0 <_sbrk+0x64>)
 800489c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800489e:	68fb      	ldr	r3, [r7, #12]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20005000 	.word	0x20005000
 80048ac:	00000400 	.word	0x00000400
 80048b0:	20000b2c 	.word	0x20000b2c
 80048b4:	20003ff0 	.word	0x20003ff0

080048b8 <SystemInit>:
>>>>>>> e9380fc... optimisation RAM=)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
=======
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <Reset_Handler>:
=======
 80048bc:	bf00      	nop
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <Reset_Handler>:
>>>>>>> e9380fc... optimisation RAM=)
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
<<<<<<< HEAD
 800460c:	480c      	ldr	r0, [pc, #48]	; (8004640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800460e:	490d      	ldr	r1, [pc, #52]	; (8004644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004610:	4a0d      	ldr	r2, [pc, #52]	; (8004648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004614:	e002      	b.n	800461c <LoopCopyDataInit>

08004616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800461a:	3304      	adds	r3, #4

0800461c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800461c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800461e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004620:	d3f9      	bcc.n	8004616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004622:	4a0a      	ldr	r2, [pc, #40]	; (800464c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004624:	4c0a      	ldr	r4, [pc, #40]	; (8004650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004628:	e001      	b.n	800462e <LoopFillZerobss>

0800462a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800462a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800462c:	3204      	adds	r2, #4

0800462e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800462e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004630:	d3fb      	bcc.n	800462a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004632:	f7ff ffe5 	bl	8004600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004636:	f007 fe6f 	bl	800c318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800463a:	f7fe f86d 	bl	8002718 <main>
  bx lr
 800463e:	4770      	bx	lr
  ldr r0, =_sdata
 8004640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004644:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004648:	0800d314 	.word	0x0800d314
  ldr r2, =_sbss
 800464c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004650:	200038c4 	.word	0x200038c4

08004654 <ADC1_2_IRQHandler>:
=======
 80048c4:	480c      	ldr	r0, [pc, #48]	; (80048f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048c6:	490d      	ldr	r1, [pc, #52]	; (80048fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048c8:	4a0d      	ldr	r2, [pc, #52]	; (8004900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048cc:	e002      	b.n	80048d4 <LoopCopyDataInit>

080048ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048d2:	3304      	adds	r3, #4

080048d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048d8:	d3f9      	bcc.n	80048ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048da:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048dc:	4c0a      	ldr	r4, [pc, #40]	; (8004908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80048de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048e0:	e001      	b.n	80048e6 <LoopFillZerobss>

080048e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048e4:	3204      	adds	r2, #4

080048e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048e8:	d3fb      	bcc.n	80048e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048ea:	f7ff ffe5 	bl	80048b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048ee:	f008 f9c5 	bl	800cc7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048f2:	f7fd ff11 	bl	8002718 <main>
  bx lr
 80048f6:	4770      	bx	lr
  ldr r0, =_sdata
 80048f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004900:	0800de88 	.word	0x0800de88
  ldr r2, =_sbss
 8004904:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004908:	20003ff0 	.word	0x20003ff0

0800490c <ADC1_2_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8004654:	e7fe      	b.n	8004654 <ADC1_2_IRQHandler>
	...

08004658 <HAL_Init>:
=======
 800490c:	e7fe      	b.n	800490c <ADC1_2_IRQHandler>
	...

08004910 <HAL_Init>:
>>>>>>> e9380fc... optimisation RAM=)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
=======
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 800465c:	4b08      	ldr	r3, [pc, #32]	; (8004680 <HAL_Init+0x28>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a07      	ldr	r2, [pc, #28]	; (8004680 <HAL_Init+0x28>)
 8004662:	f043 0310 	orr.w	r3, r3, #16
 8004666:	6013      	str	r3, [r2, #0]
=======
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_Init+0x28>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a07      	ldr	r2, [pc, #28]	; (8004938 <HAL_Init+0x28>)
 800491a:	f043 0310 	orr.w	r3, r3, #16
 800491e:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8004668:	2003      	movs	r0, #3
 800466a:	f000 f8f5 	bl	8004858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800466e:	200f      	movs	r0, #15
 8004670:	f7ff fed0 	bl	8004414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004674:	f7ff fd86 	bl	8004184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40022000 	.word	0x40022000

08004684 <HAL_IncTick>:
=======
 8004920:	2003      	movs	r0, #3
 8004922:	f000 f8f5 	bl	8004b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004926:	200f      	movs	r0, #15
 8004928:	f7ff fed0 	bl	80046cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800492c:	f7ff fd86 	bl	800443c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40022000 	.word	0x40022000

0800493c <HAL_IncTick>:
>>>>>>> e9380fc... optimisation RAM=)
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_IncTick+0x1c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_IncTick+0x20>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4413      	add	r3, r2
 8004694:	4a03      	ldr	r2, [pc, #12]	; (80046a4 <HAL_IncTick+0x20>)
 8004696:	6013      	str	r3, [r2, #0]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	20000018 	.word	0x20000018
 80046a4:	20000414 	.word	0x20000414

080046a8 <HAL_GetTick>:
=======
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_IncTick+0x1c>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_IncTick+0x20>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4413      	add	r3, r2
 800494c:	4a03      	ldr	r2, [pc, #12]	; (800495c <HAL_IncTick+0x20>)
 800494e:	6013      	str	r3, [r2, #0]
}
 8004950:	bf00      	nop
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr
 8004958:	20000018 	.word	0x20000018
 800495c:	20000b30 	.word	0x20000b30

08004960 <HAL_GetTick>:
>>>>>>> e9380fc... optimisation RAM=)
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  return uwTick;
 80046ac:	4b02      	ldr	r3, [pc, #8]	; (80046b8 <HAL_GetTick+0x10>)
 80046ae:	681b      	ldr	r3, [r3, #0]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	20000414 	.word	0x20000414

080046bc <HAL_Delay>:
=======
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return uwTick;
 8004964:	4b02      	ldr	r3, [pc, #8]	; (8004970 <HAL_GetTick+0x10>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	20000b30 	.word	0x20000b30

08004974 <HAL_Delay>:
>>>>>>> e9380fc... optimisation RAM=)
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046c4:	f7ff fff0 	bl	80046a8 <HAL_GetTick>
 80046c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d4:	d005      	beq.n	80046e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_Delay+0x44>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046e2:	bf00      	nop
 80046e4:	f7ff ffe0 	bl	80046a8 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d8f7      	bhi.n	80046e4 <HAL_Delay+0x28>
  {
  }
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000018 	.word	0x20000018

08004704 <__NVIC_SetPriorityGrouping>:
=======
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800497c:	f7ff fff0 	bl	8004960 <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800498c:	d005      	beq.n	800499a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800498e:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <HAL_Delay+0x44>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800499a:	bf00      	nop
 800499c:	f7ff ffe0 	bl	8004960 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d8f7      	bhi.n	800499c <HAL_Delay+0x28>
  {
  }
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000018 	.word	0x20000018

080049bc <__NVIC_SetPriorityGrouping>:
>>>>>>> e9380fc... optimisation RAM=)
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <__NVIC_SetPriorityGrouping+0x44>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004720:	4013      	ands	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800472c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004736:	4a04      	ldr	r2, [pc, #16]	; (8004748 <__NVIC_SetPriorityGrouping+0x44>)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	60d3      	str	r3, [r2, #12]
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <__NVIC_GetPriorityGrouping>:
=======
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <__NVIC_SetPriorityGrouping+0x44>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049d8:	4013      	ands	r3, r2
 80049da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ee:	4a04      	ldr	r2, [pc, #16]	; (8004a00 <__NVIC_SetPriorityGrouping+0x44>)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	60d3      	str	r3, [r2, #12]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <__NVIC_GetPriorityGrouping>:
>>>>>>> e9380fc... optimisation RAM=)
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004750:	4b04      	ldr	r3, [pc, #16]	; (8004764 <__NVIC_GetPriorityGrouping+0x18>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	f003 0307 	and.w	r3, r3, #7
}
 800475a:	4618      	mov	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <__NVIC_EnableIRQ>:
=======
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a08:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <__NVIC_GetPriorityGrouping+0x18>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	f003 0307 	and.w	r3, r3, #7
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <__NVIC_EnableIRQ>:
>>>>>>> e9380fc... optimisation RAM=)
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	2b00      	cmp	r3, #0
 8004778:	db0b      	blt.n	8004792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	4906      	ldr	r1, [pc, #24]	; (800479c <__NVIC_EnableIRQ+0x34>)
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2001      	movs	r0, #1
 800478a:	fa00 f202 	lsl.w	r2, r0, r2
 800478e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	e000e100 	.word	0xe000e100

080047a0 <__NVIC_SetPriority>:
=======
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db0b      	blt.n	8004a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	f003 021f 	and.w	r2, r3, #31
 8004a38:	4906      	ldr	r1, [pc, #24]	; (8004a54 <__NVIC_EnableIRQ+0x34>)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2001      	movs	r0, #1
 8004a42:	fa00 f202 	lsl.w	r2, r0, r2
 8004a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	e000e100 	.word	0xe000e100

08004a58 <__NVIC_SetPriority>:
>>>>>>> e9380fc... optimisation RAM=)
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	6039      	str	r1, [r7, #0]
 80047aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db0a      	blt.n	80047ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	490c      	ldr	r1, [pc, #48]	; (80047ec <__NVIC_SetPriority+0x4c>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	0112      	lsls	r2, r2, #4
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	440b      	add	r3, r1
 80047c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	6039      	str	r1, [r7, #0]
 8004a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	db0a      	blt.n	8004a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	490c      	ldr	r1, [pc, #48]	; (8004aa4 <__NVIC_SetPriority+0x4c>)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	0112      	lsls	r2, r2, #4
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80047c8:	e00a      	b.n	80047e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	4908      	ldr	r1, [pc, #32]	; (80047f0 <__NVIC_SetPriority+0x50>)
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	3b04      	subs	r3, #4
 80047d8:	0112      	lsls	r2, r2, #4
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	440b      	add	r3, r1
 80047de:	761a      	strb	r2, [r3, #24]
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	e000e100 	.word	0xe000e100
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <NVIC_EncodePriority>:
=======
 8004a80:	e00a      	b.n	8004a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	4908      	ldr	r1, [pc, #32]	; (8004aa8 <__NVIC_SetPriority+0x50>)
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	3b04      	subs	r3, #4
 8004a90:	0112      	lsls	r2, r2, #4
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	440b      	add	r3, r1
 8004a96:	761a      	strb	r2, [r3, #24]
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	e000e100 	.word	0xe000e100
 8004aa8:	e000ed00 	.word	0xe000ed00

08004aac <NVIC_EncodePriority>:
>>>>>>> e9380fc... optimisation RAM=)
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	61fb      	str	r3, [r7, #28]
=======
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	61fb      	str	r3, [r7, #28]
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f1c3 0307 	rsb	r3, r3, #7
 800480e:	2b04      	cmp	r3, #4
 8004810:	bf28      	it	cs
 8004812:	2304      	movcs	r3, #4
 8004814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3304      	adds	r3, #4
 800481a:	2b06      	cmp	r3, #6
 800481c:	d902      	bls.n	8004824 <NVIC_EncodePriority+0x30>
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3b03      	subs	r3, #3
 8004822:	e000      	b.n	8004826 <NVIC_EncodePriority+0x32>
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43da      	mvns	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	401a      	ands	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800483c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	43d9      	mvns	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800484c:	4313      	orrs	r3, r2
         );
}
 800484e:	4618      	mov	r0, r3
 8004850:	3724      	adds	r7, #36	; 0x24
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <HAL_NVIC_SetPriorityGrouping>:
=======
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f1c3 0307 	rsb	r3, r3, #7
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	bf28      	it	cs
 8004aca:	2304      	movcs	r3, #4
 8004acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	2b06      	cmp	r3, #6
 8004ad4:	d902      	bls.n	8004adc <NVIC_EncodePriority+0x30>
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	3b03      	subs	r3, #3
 8004ada:	e000      	b.n	8004ade <NVIC_EncodePriority+0x32>
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43da      	mvns	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	401a      	ands	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	fa01 f303 	lsl.w	r3, r1, r3
 8004afe:	43d9      	mvns	r1, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b04:	4313      	orrs	r3, r2
         );
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3724      	adds	r7, #36	; 0x24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> e9380fc... optimisation RAM=)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
=======
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff ff4f 	bl	8004704 <__NVIC_SetPriorityGrouping>
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_NVIC_SetPriority>:
=======
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff ff4f 	bl	80049bc <__NVIC_SetPriorityGrouping>
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_NVIC_SetPriority>:
>>>>>>> e9380fc... optimisation RAM=)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	4603      	mov	r3, r0
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
=======
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b086      	sub	sp, #24
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8004880:	f7ff ff64 	bl	800474c <__NVIC_GetPriorityGrouping>
 8004884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	6978      	ldr	r0, [r7, #20]
 800488c:	f7ff ffb2 	bl	80047f4 <NVIC_EncodePriority>
 8004890:	4602      	mov	r2, r0
 8004892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ff81 	bl	80047a0 <__NVIC_SetPriority>
}
 800489e:	bf00      	nop
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_NVIC_EnableIRQ>:
=======
 8004b38:	f7ff ff64 	bl	8004a04 <__NVIC_GetPriorityGrouping>
 8004b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	6978      	ldr	r0, [r7, #20]
 8004b44:	f7ff ffb2 	bl	8004aac <NVIC_EncodePriority>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff81 	bl	8004a58 <__NVIC_SetPriority>
}
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_NVIC_EnableIRQ>:
>>>>>>> e9380fc... optimisation RAM=)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	4603      	mov	r3, r0
 80048ae:	71fb      	strb	r3, [r7, #7]
=======
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	4603      	mov	r3, r0
 8004b66:	71fb      	strb	r3, [r7, #7]
>>>>>>> e9380fc... optimisation RAM=)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 80048b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ff57 	bl	8004768 <__NVIC_EnableIRQ>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_DMA_Abort>:
=======
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff57 	bl	8004a20 <__NVIC_EnableIRQ>
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_DMA_Abort>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d008      	beq.n	80048ea <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2204      	movs	r2, #4
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e020      	b.n	800492c <HAL_DMA_Abort+0x6a>
=======
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d008      	beq.n	8004ba2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2204      	movs	r2, #4
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e020      	b.n	8004be4 <HAL_DMA_Abort+0x6a>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 020e 	bic.w	r2, r2, #14
 80048f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f202 	lsl.w	r2, r1, r2
 8004918:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
	...

08004938 <HAL_DMA_Abort_IT>:
=======
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 020e 	bic.w	r2, r2, #14
 8004bb0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	2101      	movs	r1, #1
 8004bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_DMA_Abort_IT>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
<<<<<<< HEAD
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800494a:	2b02      	cmp	r3, #2
 800494c:	d005      	beq.n	800495a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2204      	movs	r2, #4
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
 8004958:	e051      	b.n	80049fe <HAL_DMA_Abort_IT+0xc6>
=======
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d005      	beq.n	8004c12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e051      	b.n	8004cb6 <HAL_DMA_Abort_IT+0xc6>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 020e 	bic.w	r2, r2, #14
 8004968:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <HAL_DMA_Abort_IT+0xd0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d029      	beq.n	80049d8 <HAL_DMA_Abort_IT+0xa0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a20      	ldr	r2, [pc, #128]	; (8004a0c <HAL_DMA_Abort_IT+0xd4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d022      	beq.n	80049d4 <HAL_DMA_Abort_IT+0x9c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <HAL_DMA_Abort_IT+0xd8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d01a      	beq.n	80049ce <HAL_DMA_Abort_IT+0x96>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <HAL_DMA_Abort_IT+0xdc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d012      	beq.n	80049c8 <HAL_DMA_Abort_IT+0x90>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <HAL_DMA_Abort_IT+0xe0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00a      	beq.n	80049c2 <HAL_DMA_Abort_IT+0x8a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <HAL_DMA_Abort_IT+0xe4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d102      	bne.n	80049bc <HAL_DMA_Abort_IT+0x84>
 80049b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049ba:	e00e      	b.n	80049da <HAL_DMA_Abort_IT+0xa2>
 80049bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049c0:	e00b      	b.n	80049da <HAL_DMA_Abort_IT+0xa2>
 80049c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049c6:	e008      	b.n	80049da <HAL_DMA_Abort_IT+0xa2>
 80049c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049cc:	e005      	b.n	80049da <HAL_DMA_Abort_IT+0xa2>
 80049ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049d2:	e002      	b.n	80049da <HAL_DMA_Abort_IT+0xa2>
 80049d4:	2310      	movs	r3, #16
 80049d6:	e000      	b.n	80049da <HAL_DMA_Abort_IT+0xa2>
 80049d8:	2301      	movs	r3, #1
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <HAL_DMA_Abort_IT+0xe8>)
 80049dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
    } 
  }
  return status;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40020008 	.word	0x40020008
 8004a0c:	4002001c 	.word	0x4002001c
 8004a10:	40020030 	.word	0x40020030
 8004a14:	40020044 	.word	0x40020044
 8004a18:	40020058 	.word	0x40020058
 8004a1c:	4002006c 	.word	0x4002006c
 8004a20:	40020000 	.word	0x40020000

08004a24 <HAL_GPIO_Init>:
=======
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 020e 	bic.w	r2, r2, #14
 8004c20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <HAL_DMA_Abort_IT+0xd0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d029      	beq.n	8004c90 <HAL_DMA_Abort_IT+0xa0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <HAL_DMA_Abort_IT+0xd4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d022      	beq.n	8004c8c <HAL_DMA_Abort_IT+0x9c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <HAL_DMA_Abort_IT+0xd8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d01a      	beq.n	8004c86 <HAL_DMA_Abort_IT+0x96>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <HAL_DMA_Abort_IT+0xdc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d012      	beq.n	8004c80 <HAL_DMA_Abort_IT+0x90>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <HAL_DMA_Abort_IT+0xe0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00a      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x8a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1a      	ldr	r2, [pc, #104]	; (8004cd4 <HAL_DMA_Abort_IT+0xe4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d102      	bne.n	8004c74 <HAL_DMA_Abort_IT+0x84>
 8004c6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c72:	e00e      	b.n	8004c92 <HAL_DMA_Abort_IT+0xa2>
 8004c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c78:	e00b      	b.n	8004c92 <HAL_DMA_Abort_IT+0xa2>
 8004c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c7e:	e008      	b.n	8004c92 <HAL_DMA_Abort_IT+0xa2>
 8004c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c84:	e005      	b.n	8004c92 <HAL_DMA_Abort_IT+0xa2>
 8004c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c8a:	e002      	b.n	8004c92 <HAL_DMA_Abort_IT+0xa2>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	e000      	b.n	8004c92 <HAL_DMA_Abort_IT+0xa2>
 8004c90:	2301      	movs	r3, #1
 8004c92:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <HAL_DMA_Abort_IT+0xe8>)
 8004c94:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
    } 
  }
  return status;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40020008 	.word	0x40020008
 8004cc4:	4002001c 	.word	0x4002001c
 8004cc8:	40020030 	.word	0x40020030
 8004ccc:	40020044 	.word	0x40020044
 8004cd0:	40020058 	.word	0x40020058
 8004cd4:	4002006c 	.word	0x4002006c
 8004cd8:	40020000 	.word	0x40020000

08004cdc <HAL_GPIO_Init>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8004a24:	b480      	push	{r7}
 8004a26:	b08b      	sub	sp, #44	; 0x2c
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8004cdc:	b480      	push	{r7}
 8004cde:	b08b      	sub	sp, #44	; 0x2c
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8004a32:	2300      	movs	r3, #0
 8004a34:	623b      	str	r3, [r7, #32]
=======
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
>>>>>>> e9380fc... optimisation RAM=)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8004a36:	e169      	b.n	8004d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004a38:	2201      	movs	r2, #1
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	f040 8158 	bne.w	8004d06 <HAL_GPIO_Init+0x2e2>
=======
 8004cee:	e169      	b.n	8004fc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	f040 8158 	bne.w	8004fbe <HAL_GPIO_Init+0x2e2>
>>>>>>> e9380fc... optimisation RAM=)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4a9a      	ldr	r2, [pc, #616]	; (8004cc4 <HAL_GPIO_Init+0x2a0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d05e      	beq.n	8004b1e <HAL_GPIO_Init+0xfa>
 8004a60:	4a98      	ldr	r2, [pc, #608]	; (8004cc4 <HAL_GPIO_Init+0x2a0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d875      	bhi.n	8004b52 <HAL_GPIO_Init+0x12e>
 8004a66:	4a98      	ldr	r2, [pc, #608]	; (8004cc8 <HAL_GPIO_Init+0x2a4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d058      	beq.n	8004b1e <HAL_GPIO_Init+0xfa>
 8004a6c:	4a96      	ldr	r2, [pc, #600]	; (8004cc8 <HAL_GPIO_Init+0x2a4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d86f      	bhi.n	8004b52 <HAL_GPIO_Init+0x12e>
 8004a72:	4a96      	ldr	r2, [pc, #600]	; (8004ccc <HAL_GPIO_Init+0x2a8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d052      	beq.n	8004b1e <HAL_GPIO_Init+0xfa>
 8004a78:	4a94      	ldr	r2, [pc, #592]	; (8004ccc <HAL_GPIO_Init+0x2a8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d869      	bhi.n	8004b52 <HAL_GPIO_Init+0x12e>
 8004a7e:	4a94      	ldr	r2, [pc, #592]	; (8004cd0 <HAL_GPIO_Init+0x2ac>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d04c      	beq.n	8004b1e <HAL_GPIO_Init+0xfa>
 8004a84:	4a92      	ldr	r2, [pc, #584]	; (8004cd0 <HAL_GPIO_Init+0x2ac>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d863      	bhi.n	8004b52 <HAL_GPIO_Init+0x12e>
 8004a8a:	4a92      	ldr	r2, [pc, #584]	; (8004cd4 <HAL_GPIO_Init+0x2b0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d046      	beq.n	8004b1e <HAL_GPIO_Init+0xfa>
 8004a90:	4a90      	ldr	r2, [pc, #576]	; (8004cd4 <HAL_GPIO_Init+0x2b0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d85d      	bhi.n	8004b52 <HAL_GPIO_Init+0x12e>
 8004a96:	2b12      	cmp	r3, #18
 8004a98:	d82a      	bhi.n	8004af0 <HAL_GPIO_Init+0xcc>
 8004a9a:	2b12      	cmp	r3, #18
 8004a9c:	d859      	bhi.n	8004b52 <HAL_GPIO_Init+0x12e>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <HAL_GPIO_Init+0x80>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004b1f 	.word	0x08004b1f
 8004aa8:	08004af9 	.word	0x08004af9
 8004aac:	08004b0b 	.word	0x08004b0b
 8004ab0:	08004b4d 	.word	0x08004b4d
 8004ab4:	08004b53 	.word	0x08004b53
 8004ab8:	08004b53 	.word	0x08004b53
 8004abc:	08004b53 	.word	0x08004b53
 8004ac0:	08004b53 	.word	0x08004b53
 8004ac4:	08004b53 	.word	0x08004b53
 8004ac8:	08004b53 	.word	0x08004b53
 8004acc:	08004b53 	.word	0x08004b53
 8004ad0:	08004b53 	.word	0x08004b53
 8004ad4:	08004b53 	.word	0x08004b53
 8004ad8:	08004b53 	.word	0x08004b53
 8004adc:	08004b53 	.word	0x08004b53
 8004ae0:	08004b53 	.word	0x08004b53
 8004ae4:	08004b53 	.word	0x08004b53
 8004ae8:	08004b01 	.word	0x08004b01
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	4a79      	ldr	r2, [pc, #484]	; (8004cd8 <HAL_GPIO_Init+0x2b4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_GPIO_Init+0xfa>
=======
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4a9a      	ldr	r2, [pc, #616]	; (8004f7c <HAL_GPIO_Init+0x2a0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d05e      	beq.n	8004dd6 <HAL_GPIO_Init+0xfa>
 8004d18:	4a98      	ldr	r2, [pc, #608]	; (8004f7c <HAL_GPIO_Init+0x2a0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d875      	bhi.n	8004e0a <HAL_GPIO_Init+0x12e>
 8004d1e:	4a98      	ldr	r2, [pc, #608]	; (8004f80 <HAL_GPIO_Init+0x2a4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d058      	beq.n	8004dd6 <HAL_GPIO_Init+0xfa>
 8004d24:	4a96      	ldr	r2, [pc, #600]	; (8004f80 <HAL_GPIO_Init+0x2a4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d86f      	bhi.n	8004e0a <HAL_GPIO_Init+0x12e>
 8004d2a:	4a96      	ldr	r2, [pc, #600]	; (8004f84 <HAL_GPIO_Init+0x2a8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d052      	beq.n	8004dd6 <HAL_GPIO_Init+0xfa>
 8004d30:	4a94      	ldr	r2, [pc, #592]	; (8004f84 <HAL_GPIO_Init+0x2a8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d869      	bhi.n	8004e0a <HAL_GPIO_Init+0x12e>
 8004d36:	4a94      	ldr	r2, [pc, #592]	; (8004f88 <HAL_GPIO_Init+0x2ac>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d04c      	beq.n	8004dd6 <HAL_GPIO_Init+0xfa>
 8004d3c:	4a92      	ldr	r2, [pc, #584]	; (8004f88 <HAL_GPIO_Init+0x2ac>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d863      	bhi.n	8004e0a <HAL_GPIO_Init+0x12e>
 8004d42:	4a92      	ldr	r2, [pc, #584]	; (8004f8c <HAL_GPIO_Init+0x2b0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d046      	beq.n	8004dd6 <HAL_GPIO_Init+0xfa>
 8004d48:	4a90      	ldr	r2, [pc, #576]	; (8004f8c <HAL_GPIO_Init+0x2b0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d85d      	bhi.n	8004e0a <HAL_GPIO_Init+0x12e>
 8004d4e:	2b12      	cmp	r3, #18
 8004d50:	d82a      	bhi.n	8004da8 <HAL_GPIO_Init+0xcc>
 8004d52:	2b12      	cmp	r3, #18
 8004d54:	d859      	bhi.n	8004e0a <HAL_GPIO_Init+0x12e>
 8004d56:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <HAL_GPIO_Init+0x80>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004dd7 	.word	0x08004dd7
 8004d60:	08004db1 	.word	0x08004db1
 8004d64:	08004dc3 	.word	0x08004dc3
 8004d68:	08004e05 	.word	0x08004e05
 8004d6c:	08004e0b 	.word	0x08004e0b
 8004d70:	08004e0b 	.word	0x08004e0b
 8004d74:	08004e0b 	.word	0x08004e0b
 8004d78:	08004e0b 	.word	0x08004e0b
 8004d7c:	08004e0b 	.word	0x08004e0b
 8004d80:	08004e0b 	.word	0x08004e0b
 8004d84:	08004e0b 	.word	0x08004e0b
 8004d88:	08004e0b 	.word	0x08004e0b
 8004d8c:	08004e0b 	.word	0x08004e0b
 8004d90:	08004e0b 	.word	0x08004e0b
 8004d94:	08004e0b 	.word	0x08004e0b
 8004d98:	08004e0b 	.word	0x08004e0b
 8004d9c:	08004e0b 	.word	0x08004e0b
 8004da0:	08004db9 	.word	0x08004db9
 8004da4:	08004dcd 	.word	0x08004dcd
 8004da8:	4a79      	ldr	r2, [pc, #484]	; (8004f90 <HAL_GPIO_Init+0x2b4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_GPIO_Init+0xfa>
>>>>>>> e9380fc... optimisation RAM=)
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8004af6:	e02c      	b.n	8004b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	623b      	str	r3, [r7, #32]
          break;
 8004afe:	e029      	b.n	8004b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	3304      	adds	r3, #4
 8004b06:	623b      	str	r3, [r7, #32]
          break;
 8004b08:	e024      	b.n	8004b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	623b      	str	r3, [r7, #32]
          break;
 8004b12:	e01f      	b.n	8004b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	623b      	str	r3, [r7, #32]
          break;
 8004b1c:	e01a      	b.n	8004b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004b26:	2304      	movs	r3, #4
 8004b28:	623b      	str	r3, [r7, #32]
          break;
 8004b2a:	e013      	b.n	8004b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d105      	bne.n	8004b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b34:	2308      	movs	r3, #8
 8004b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	611a      	str	r2, [r3, #16]
          break;
 8004b3e:	e009      	b.n	8004b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b40:	2308      	movs	r3, #8
 8004b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	615a      	str	r2, [r3, #20]
          break;
 8004b4a:	e003      	b.n	8004b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	623b      	str	r3, [r7, #32]
          break;
 8004b50:	e000      	b.n	8004b54 <HAL_GPIO_Init+0x130>
          break;
 8004b52:	bf00      	nop
=======
 8004dae:	e02c      	b.n	8004e0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	623b      	str	r3, [r7, #32]
          break;
 8004db6:	e029      	b.n	8004e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	623b      	str	r3, [r7, #32]
          break;
 8004dc0:	e024      	b.n	8004e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	623b      	str	r3, [r7, #32]
          break;
 8004dca:	e01f      	b.n	8004e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	623b      	str	r3, [r7, #32]
          break;
 8004dd4:	e01a      	b.n	8004e0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d102      	bne.n	8004de4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004dde:	2304      	movs	r3, #4
 8004de0:	623b      	str	r3, [r7, #32]
          break;
 8004de2:	e013      	b.n	8004e0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d105      	bne.n	8004df8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004dec:	2308      	movs	r3, #8
 8004dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	611a      	str	r2, [r3, #16]
          break;
 8004df6:	e009      	b.n	8004e0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004df8:	2308      	movs	r3, #8
 8004dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	615a      	str	r2, [r3, #20]
          break;
 8004e02:	e003      	b.n	8004e0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e04:	2300      	movs	r3, #0
 8004e06:	623b      	str	r3, [r7, #32]
          break;
 8004e08:	e000      	b.n	8004e0c <HAL_GPIO_Init+0x130>
          break;
 8004e0a:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2bff      	cmp	r3, #255	; 0xff
 8004b58:	d801      	bhi.n	8004b5e <HAL_GPIO_Init+0x13a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	e001      	b.n	8004b62 <HAL_GPIO_Init+0x13e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2bff      	cmp	r3, #255	; 0xff
 8004b68:	d802      	bhi.n	8004b70 <HAL_GPIO_Init+0x14c>
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	e002      	b.n	8004b76 <HAL_GPIO_Init+0x152>
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	3b08      	subs	r3, #8
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	210f      	movs	r1, #15
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	401a      	ands	r2, r3
 8004b88:	6a39      	ldr	r1, [r7, #32]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b90:	431a      	orrs	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	601a      	str	r2, [r3, #0]
=======
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2bff      	cmp	r3, #255	; 0xff
 8004e10:	d801      	bhi.n	8004e16 <HAL_GPIO_Init+0x13a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	e001      	b.n	8004e1a <HAL_GPIO_Init+0x13e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2bff      	cmp	r3, #255	; 0xff
 8004e20:	d802      	bhi.n	8004e28 <HAL_GPIO_Init+0x14c>
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	e002      	b.n	8004e2e <HAL_GPIO_Init+0x152>
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	3b08      	subs	r3, #8
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	210f      	movs	r1, #15
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	401a      	ands	r2, r3
 8004e40:	6a39      	ldr	r1, [r7, #32]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80b1 	beq.w	8004d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ba4:	4b4d      	ldr	r3, [pc, #308]	; (8004cdc <HAL_GPIO_Init+0x2b8>)
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	4a4c      	ldr	r2, [pc, #304]	; (8004cdc <HAL_GPIO_Init+0x2b8>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6193      	str	r3, [r2, #24]
 8004bb0:	4b4a      	ldr	r3, [pc, #296]	; (8004cdc <HAL_GPIO_Init+0x2b8>)
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004bbc:	4a48      	ldr	r2, [pc, #288]	; (8004ce0 <HAL_GPIO_Init+0x2bc>)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	089b      	lsrs	r3, r3, #2
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	220f      	movs	r2, #15
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a40      	ldr	r2, [pc, #256]	; (8004ce4 <HAL_GPIO_Init+0x2c0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <HAL_GPIO_Init+0x1ec>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <HAL_GPIO_Init+0x2c4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00d      	beq.n	8004c0c <HAL_GPIO_Init+0x1e8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a3e      	ldr	r2, [pc, #248]	; (8004cec <HAL_GPIO_Init+0x2c8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <HAL_GPIO_Init+0x1e4>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a3d      	ldr	r2, [pc, #244]	; (8004cf0 <HAL_GPIO_Init+0x2cc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d101      	bne.n	8004c04 <HAL_GPIO_Init+0x1e0>
 8004c00:	2303      	movs	r3, #3
 8004c02:	e006      	b.n	8004c12 <HAL_GPIO_Init+0x1ee>
 8004c04:	2304      	movs	r3, #4
 8004c06:	e004      	b.n	8004c12 <HAL_GPIO_Init+0x1ee>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e002      	b.n	8004c12 <HAL_GPIO_Init+0x1ee>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <HAL_GPIO_Init+0x1ee>
 8004c10:	2300      	movs	r3, #0
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	f002 0203 	and.w	r2, r2, #3
 8004c18:	0092      	lsls	r2, r2, #2
 8004c1a:	4093      	lsls	r3, r2
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004c22:	492f      	ldr	r1, [pc, #188]	; (8004ce0 <HAL_GPIO_Init+0x2bc>)
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	3302      	adds	r3, #2
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80b1 	beq.w	8004fbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e5c:	4b4d      	ldr	r3, [pc, #308]	; (8004f94 <HAL_GPIO_Init+0x2b8>)
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	4a4c      	ldr	r2, [pc, #304]	; (8004f94 <HAL_GPIO_Init+0x2b8>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6193      	str	r3, [r2, #24]
 8004e68:	4b4a      	ldr	r3, [pc, #296]	; (8004f94 <HAL_GPIO_Init+0x2b8>)
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e74:	4a48      	ldr	r2, [pc, #288]	; (8004f98 <HAL_GPIO_Init+0x2bc>)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	220f      	movs	r2, #15
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4013      	ands	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a40      	ldr	r2, [pc, #256]	; (8004f9c <HAL_GPIO_Init+0x2c0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_GPIO_Init+0x1ec>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3f      	ldr	r2, [pc, #252]	; (8004fa0 <HAL_GPIO_Init+0x2c4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_GPIO_Init+0x1e8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a3e      	ldr	r2, [pc, #248]	; (8004fa4 <HAL_GPIO_Init+0x2c8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <HAL_GPIO_Init+0x1e4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a3d      	ldr	r2, [pc, #244]	; (8004fa8 <HAL_GPIO_Init+0x2cc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <HAL_GPIO_Init+0x1e0>
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e006      	b.n	8004eca <HAL_GPIO_Init+0x1ee>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	e004      	b.n	8004eca <HAL_GPIO_Init+0x1ee>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e002      	b.n	8004eca <HAL_GPIO_Init+0x1ee>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_GPIO_Init+0x1ee>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ecc:	f002 0203 	and.w	r2, r2, #3
 8004ed0:	0092      	lsls	r2, r2, #2
 8004ed2:	4093      	lsls	r3, r2
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004eda:	492f      	ldr	r1, [pc, #188]	; (8004f98 <HAL_GPIO_Init+0x2bc>)
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> e9380fc... optimisation RAM=)


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d006      	beq.n	8004c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c3c:	4b2d      	ldr	r3, [pc, #180]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	492c      	ldr	r1, [pc, #176]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]
 8004c48:	e006      	b.n	8004c58 <HAL_GPIO_Init+0x234>
=======
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d006      	beq.n	8004f02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ef4:	4b2d      	ldr	r3, [pc, #180]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	492c      	ldr	r1, [pc, #176]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]
 8004f00:	e006      	b.n	8004f10 <HAL_GPIO_Init+0x234>
>>>>>>> e9380fc... optimisation RAM=)
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	4928      	ldr	r1, [pc, #160]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]
=======
 8004f02:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	4928      	ldr	r1, [pc, #160]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
>>>>>>> e9380fc... optimisation RAM=)
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c64:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	4922      	ldr	r1, [pc, #136]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
 8004c70:	e006      	b.n	8004c80 <HAL_GPIO_Init+0x25c>
=======
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d006      	beq.n	8004f2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f1c:	4b23      	ldr	r3, [pc, #140]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	4922      	ldr	r1, [pc, #136]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	604b      	str	r3, [r1, #4]
 8004f28:	e006      	b.n	8004f38 <HAL_GPIO_Init+0x25c>
>>>>>>> e9380fc... optimisation RAM=)
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	491e      	ldr	r1, [pc, #120]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
=======
 8004f2a:	4b20      	ldr	r3, [pc, #128]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	43db      	mvns	r3, r3
 8004f32:	491e      	ldr	r1, [pc, #120]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
>>>>>>> e9380fc... optimisation RAM=)
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d006      	beq.n	8004c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	4918      	ldr	r1, [pc, #96]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]
 8004c98:	e006      	b.n	8004ca8 <HAL_GPIO_Init+0x284>
=======
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	4918      	ldr	r1, [pc, #96]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]
 8004f50:	e006      	b.n	8004f60 <HAL_GPIO_Init+0x284>
>>>>>>> e9380fc... optimisation RAM=)
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8004c9a:	4b16      	ldr	r3, [pc, #88]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	4914      	ldr	r1, [pc, #80]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	608b      	str	r3, [r1, #8]
=======
 8004f52:	4b16      	ldr	r3, [pc, #88]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	4914      	ldr	r1, [pc, #80]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	608b      	str	r3, [r1, #8]
>>>>>>> e9380fc... optimisation RAM=)
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d021      	beq.n	8004cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	490e      	ldr	r1, [pc, #56]	; (8004cf4 <HAL_GPIO_Init+0x2d0>)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60cb      	str	r3, [r1, #12]
 8004cc0:	e021      	b.n	8004d06 <HAL_GPIO_Init+0x2e2>
 8004cc2:	bf00      	nop
 8004cc4:	10320000 	.word	0x10320000
 8004cc8:	10310000 	.word	0x10310000
 8004ccc:	10220000 	.word	0x10220000
 8004cd0:	10210000 	.word	0x10210000
 8004cd4:	10120000 	.word	0x10120000
 8004cd8:	10110000 	.word	0x10110000
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40010800 	.word	0x40010800
 8004ce8:	40010c00 	.word	0x40010c00
 8004cec:	40011000 	.word	0x40011000
 8004cf0:	40011400 	.word	0x40011400
 8004cf4:	40010400 	.word	0x40010400
=======
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d021      	beq.n	8004fb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	490e      	ldr	r1, [pc, #56]	; (8004fac <HAL_GPIO_Init+0x2d0>)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60cb      	str	r3, [r1, #12]
 8004f78:	e021      	b.n	8004fbe <HAL_GPIO_Init+0x2e2>
 8004f7a:	bf00      	nop
 8004f7c:	10320000 	.word	0x10320000
 8004f80:	10310000 	.word	0x10310000
 8004f84:	10220000 	.word	0x10220000
 8004f88:	10210000 	.word	0x10210000
 8004f8c:	10120000 	.word	0x10120000
 8004f90:	10110000 	.word	0x10110000
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40010800 	.word	0x40010800
 8004fa0:	40010c00 	.word	0x40010c00
 8004fa4:	40011000 	.word	0x40011000
 8004fa8:	40011400 	.word	0x40011400
 8004fac:	40010400 	.word	0x40010400
>>>>>>> e9380fc... optimisation RAM=)
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_GPIO_Init+0x304>)
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	4909      	ldr	r1, [pc, #36]	; (8004d28 <HAL_GPIO_Init+0x304>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	60cb      	str	r3, [r1, #12]
=======
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	4909      	ldr	r1, [pc, #36]	; (8004fe0 <HAL_GPIO_Init+0x304>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	60cb      	str	r3, [r1, #12]
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }

	position++;
<<<<<<< HEAD
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	3301      	adds	r3, #1
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	fa22 f303 	lsr.w	r3, r2, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f47f ae8e 	bne.w	8004a38 <HAL_GPIO_Init+0x14>
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	372c      	adds	r7, #44	; 0x2c
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	40010400 	.word	0x40010400

08004d2c <HAL_GPIO_ReadPin>:
=======
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f47f ae8e 	bne.w	8004cf0 <HAL_GPIO_Init+0x14>
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	372c      	adds	r7, #44	; 0x2c
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	40010400 	.word	0x40010400

08004fe4 <HAL_GPIO_ReadPin>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
=======
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]
>>>>>>> e9380fc... optimisation RAM=)
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	887b      	ldrh	r3, [r7, #2]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
 8004d48:	e001      	b.n	8004d4e <HAL_GPIO_ReadPin+0x22>
=======
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e001      	b.n	8005006 <HAL_GPIO_ReadPin+0x22>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <HAL_GPIO_WritePin>:
=======
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <HAL_GPIO_WritePin>:
>>>>>>> e9380fc... optimisation RAM=)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	807b      	strh	r3, [r7, #2]
 8004d66:	4613      	mov	r3, r2
 8004d68:	707b      	strb	r3, [r7, #1]
=======
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	807b      	strh	r3, [r7, #2]
 800501e:	4613      	mov	r3, r2
 8005020:	707b      	strb	r3, [r7, #1]
>>>>>>> e9380fc... optimisation RAM=)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8004d6a:	787b      	ldrb	r3, [r7, #1]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d70:	887a      	ldrh	r2, [r7, #2]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	611a      	str	r2, [r3, #16]
=======
 8005022:	787b      	ldrb	r3, [r7, #1]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005028:	887a      	ldrh	r2, [r7, #2]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8004d76:	e003      	b.n	8004d80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d78:	887b      	ldrh	r3, [r7, #2]
 8004d7a:	041a      	lsls	r2, r3, #16
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	611a      	str	r2, [r3, #16]
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_GPIO_EXTI_IRQHandler>:
=======
 800502e:	e003      	b.n	8005038 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005030:	887b      	ldrh	r3, [r7, #2]
 8005032:	041a      	lsls	r2, r3, #16
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	611a      	str	r2, [r3, #16]
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
	...

08005044 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d96:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d006      	beq.n	8004db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004da2:	4a05      	ldr	r2, [pc, #20]	; (8004db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fd fc2a 	bl	8002604 <HAL_GPIO_EXTI_Callback>
  }
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40010400 	.word	0x40010400

08004dbc <HAL_I2C_Init>:
=======
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800504e:	4b08      	ldr	r3, [pc, #32]	; (8005070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d006      	beq.n	8005068 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800505a:	4a05      	ldr	r2, [pc, #20]	; (8005070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	4618      	mov	r0, r3
 8005064:	f7fd face 	bl	8002604 <HAL_GPIO_EXTI_Callback>
  }
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40010400 	.word	0x40010400

08005074 <HAL_I2C_Init>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
=======
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e12b      	b.n	8005026 <HAL_I2C_Init+0x26a>
=======
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e12b      	b.n	80052de <HAL_I2C_Init+0x26a>
>>>>>>> e9380fc... optimisation RAM=)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> e9380fc... optimisation RAM=)

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff fa0e 	bl	8004204 <HAL_I2C_MspInit>
=======
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fa0e 	bl	80044bc <HAL_I2C_MspInit>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2224      	movs	r2, #36	; 0x24
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e20:	f002 f866 	bl	8006ef0 <HAL_RCC_GetPCLK1Freq>
 8004e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4a81      	ldr	r2, [pc, #516]	; (8005030 <HAL_I2C_Init+0x274>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d807      	bhi.n	8004e40 <HAL_I2C_Init+0x84>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a80      	ldr	r2, [pc, #512]	; (8005034 <HAL_I2C_Init+0x278>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	bf94      	ite	ls
 8004e38:	2301      	movls	r3, #1
 8004e3a:	2300      	movhi	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e006      	b.n	8004e4e <HAL_I2C_Init+0x92>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a7d      	ldr	r2, [pc, #500]	; (8005038 <HAL_I2C_Init+0x27c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	bf94      	ite	ls
 8004e48:	2301      	movls	r3, #1
 8004e4a:	2300      	movhi	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0e7      	b.n	8005026 <HAL_I2C_Init+0x26a>
=======
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	; 0x24
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050d8:	f002 f866 	bl	80071a8 <HAL_RCC_GetPCLK1Freq>
 80050dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4a81      	ldr	r2, [pc, #516]	; (80052e8 <HAL_I2C_Init+0x274>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d807      	bhi.n	80050f8 <HAL_I2C_Init+0x84>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4a80      	ldr	r2, [pc, #512]	; (80052ec <HAL_I2C_Init+0x278>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	bf94      	ite	ls
 80050f0:	2301      	movls	r3, #1
 80050f2:	2300      	movhi	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e006      	b.n	8005106 <HAL_I2C_Init+0x92>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a7d      	ldr	r2, [pc, #500]	; (80052f0 <HAL_I2C_Init+0x27c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	bf94      	ite	ls
 8005100:	2301      	movls	r3, #1
 8005102:	2300      	movhi	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e0e7      	b.n	80052de <HAL_I2C_Init+0x26a>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a78      	ldr	r2, [pc, #480]	; (800503c <HAL_I2C_Init+0x280>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	0c9b      	lsrs	r3, r3, #18
 8004e60:	60bb      	str	r3, [r7, #8]
=======
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4a78      	ldr	r2, [pc, #480]	; (80052f4 <HAL_I2C_Init+0x280>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0c9b      	lsrs	r3, r3, #18
 8005118:	60bb      	str	r3, [r7, #8]
>>>>>>> e9380fc... optimisation RAM=)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
=======
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
>>>>>>> e9380fc... optimisation RAM=)

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a6a      	ldr	r2, [pc, #424]	; (8005030 <HAL_I2C_Init+0x274>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d802      	bhi.n	8004e90 <HAL_I2C_Init+0xd4>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	e009      	b.n	8004ea4 <HAL_I2C_Init+0xe8>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	4a69      	ldr	r2, [pc, #420]	; (8005040 <HAL_I2C_Init+0x284>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	099b      	lsrs	r3, r3, #6
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6213      	str	r3, [r2, #32]
=======
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a6a      	ldr	r2, [pc, #424]	; (80052e8 <HAL_I2C_Init+0x274>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d802      	bhi.n	8005148 <HAL_I2C_Init+0xd4>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	3301      	adds	r3, #1
 8005146:	e009      	b.n	800515c <HAL_I2C_Init+0xe8>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	4a69      	ldr	r2, [pc, #420]	; (80052f8 <HAL_I2C_Init+0x284>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	099b      	lsrs	r3, r3, #6
 800515a:	3301      	adds	r3, #1
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	430b      	orrs	r3, r1
 8005162:	6213      	str	r3, [r2, #32]
>>>>>>> e9380fc... optimisation RAM=)

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004eb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	495c      	ldr	r1, [pc, #368]	; (8005030 <HAL_I2C_Init+0x274>)
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	d819      	bhi.n	8004ef8 <HAL_I2C_Init+0x13c>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1e59      	subs	r1, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ed2:	1c59      	adds	r1, r3, #1
 8004ed4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ed8:	400b      	ands	r3, r1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <HAL_I2C_Init+0x138>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1e59      	subs	r1, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eec:	3301      	adds	r3, #1
 8004eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef2:	e051      	b.n	8004f98 <HAL_I2C_Init+0x1dc>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	e04f      	b.n	8004f98 <HAL_I2C_Init+0x1dc>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d111      	bne.n	8004f24 <HAL_I2C_Init+0x168>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1e58      	subs	r0, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	440b      	add	r3, r1
 8004f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f12:	3301      	adds	r3, #1
 8004f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e012      	b.n	8004f4a <HAL_I2C_Init+0x18e>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1e58      	subs	r0, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6859      	ldr	r1, [r3, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	0099      	lsls	r1, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Init+0x196>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e022      	b.n	8004f98 <HAL_I2C_Init+0x1dc>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10e      	bne.n	8004f78 <HAL_I2C_Init+0x1bc>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1e58      	subs	r0, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6859      	ldr	r1, [r3, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	440b      	add	r3, r1
 8004f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f76:	e00f      	b.n	8004f98 <HAL_I2C_Init+0x1dc>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1e58      	subs	r0, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	0099      	lsls	r1, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	6809      	ldr	r1, [r1, #0]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61cb      	str	r3, [r1, #28]
=======
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800516e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	495c      	ldr	r1, [pc, #368]	; (80052e8 <HAL_I2C_Init+0x274>)
 8005178:	428b      	cmp	r3, r1
 800517a:	d819      	bhi.n	80051b0 <HAL_I2C_Init+0x13c>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1e59      	subs	r1, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	fbb1 f3f3 	udiv	r3, r1, r3
 800518a:	1c59      	adds	r1, r3, #1
 800518c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005190:	400b      	ands	r3, r1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_I2C_Init+0x138>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1e59      	subs	r1, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051a4:	3301      	adds	r3, #1
 80051a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051aa:	e051      	b.n	8005250 <HAL_I2C_Init+0x1dc>
 80051ac:	2304      	movs	r3, #4
 80051ae:	e04f      	b.n	8005250 <HAL_I2C_Init+0x1dc>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d111      	bne.n	80051dc <HAL_I2C_Init+0x168>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	1e58      	subs	r0, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6859      	ldr	r1, [r3, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	440b      	add	r3, r1
 80051c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	e012      	b.n	8005202 <HAL_I2C_Init+0x18e>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1e58      	subs	r0, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	0099      	lsls	r1, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f2:	3301      	adds	r3, #1
 80051f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_I2C_Init+0x196>
 8005206:	2301      	movs	r3, #1
 8005208:	e022      	b.n	8005250 <HAL_I2C_Init+0x1dc>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10e      	bne.n	8005230 <HAL_I2C_Init+0x1bc>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1e58      	subs	r0, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6859      	ldr	r1, [r3, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	440b      	add	r3, r1
 8005220:	fbb0 f3f3 	udiv	r3, r0, r3
 8005224:	3301      	adds	r3, #1
 8005226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522e:	e00f      	b.n	8005250 <HAL_I2C_Init+0x1dc>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	1e58      	subs	r0, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6859      	ldr	r1, [r3, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	0099      	lsls	r1, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	fbb0 f3f3 	udiv	r3, r0, r3
 8005246:	3301      	adds	r3, #1
 8005248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	6809      	ldr	r1, [r1, #0]
 8005254:	4313      	orrs	r3, r2
 8005256:	61cb      	str	r3, [r1, #28]
>>>>>>> e9380fc... optimisation RAM=)

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69da      	ldr	r2, [r3, #28]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
=======
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69da      	ldr	r2, [r3, #28]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6911      	ldr	r1, [r2, #16]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68d2      	ldr	r2, [r2, #12]
 8004fd2:	4311      	orrs	r1, r2
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6093      	str	r3, [r2, #8]
=======
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800527e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6911      	ldr	r1, [r2, #16]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68d2      	ldr	r2, [r2, #12]
 800528a:	4311      	orrs	r1, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	430b      	orrs	r3, r1
 8005292:	6093      	str	r3, [r2, #8]
>>>>>>> e9380fc... optimisation RAM=)

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	000186a0 	.word	0x000186a0
 8005034:	001e847f 	.word	0x001e847f
 8005038:	003d08ff 	.word	0x003d08ff
 800503c:	431bde83 	.word	0x431bde83
 8005040:	10624dd3 	.word	0x10624dd3

08005044 <HAL_I2C_Master_Transmit>:
=======
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	000186a0 	.word	0x000186a0
 80052ec:	001e847f 	.word	0x001e847f
 80052f0:	003d08ff 	.word	0x003d08ff
 80052f4:	431bde83 	.word	0x431bde83
 80052f8:	10624dd3 	.word	0x10624dd3

080052fc <HAL_I2C_Master_Transmit>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	461a      	mov	r2, r3
 8005050:	460b      	mov	r3, r1
 8005052:	817b      	strh	r3, [r7, #10]
 8005054:	4613      	mov	r3, r2
 8005056:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005058:	f7ff fb26 	bl	80046a8 <HAL_GetTick>
 800505c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b20      	cmp	r3, #32
 8005068:	f040 80e0 	bne.w	800522c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2319      	movs	r3, #25
 8005072:	2201      	movs	r2, #1
 8005074:	4970      	ldr	r1, [pc, #448]	; (8005238 <HAL_I2C_Master_Transmit+0x1f4>)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f001 f972 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005082:	2302      	movs	r3, #2
 8005084:	e0d3      	b.n	800522e <HAL_I2C_Master_Transmit+0x1ea>
=======
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	461a      	mov	r2, r3
 8005308:	460b      	mov	r3, r1
 800530a:	817b      	strh	r3, [r7, #10]
 800530c:	4613      	mov	r3, r2
 800530e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005310:	f7ff fb26 	bl	8004960 <HAL_GetTick>
 8005314:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b20      	cmp	r3, #32
 8005320:	f040 80e0 	bne.w	80054e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	2319      	movs	r3, #25
 800532a:	2201      	movs	r2, #1
 800532c:	4970      	ldr	r1, [pc, #448]	; (80054f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f001 f972 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
 800533c:	e0d3      	b.n	80054e6 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_I2C_Master_Transmit+0x50>
 8005090:	2302      	movs	r3, #2
 8005092:	e0cc      	b.n	800522e <HAL_I2C_Master_Transmit+0x1ea>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d007      	beq.n	80050ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
=======
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_I2C_Master_Transmit+0x50>
 8005348:	2302      	movs	r3, #2
 800534a:	e0cc      	b.n	80054e6 <HAL_I2C_Master_Transmit+0x1ea>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b01      	cmp	r3, #1
 8005360:	d007      	beq.n	8005372 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2221      	movs	r2, #33	; 0x21
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2210      	movs	r2, #16
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	893a      	ldrh	r2, [r7, #8]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a50      	ldr	r2, [pc, #320]	; (800523c <HAL_I2C_Master_Transmit+0x1f8>)
 80050fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050fc:	8979      	ldrh	r1, [r7, #10]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6a3a      	ldr	r2, [r7, #32]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fe5e 	bl	8005dc4 <I2C_MasterRequestWrite>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e08d      	b.n	800522e <HAL_I2C_Master_Transmit+0x1ea>
=======
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005380:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2221      	movs	r2, #33	; 0x21
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2210      	movs	r2, #16
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	893a      	ldrh	r2, [r7, #8]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a50      	ldr	r2, [pc, #320]	; (80054f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053b4:	8979      	ldrh	r1, [r7, #10]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fe5e 	bl	800607c <I2C_MasterRequestWrite>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e08d      	b.n	80054e6 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005128:	e066      	b.n	80051f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	6a39      	ldr	r1, [r7, #32]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f001 f9ec 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00d      	beq.n	8005156 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	2b04      	cmp	r3, #4
 8005140:	d107      	bne.n	8005152 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e06b      	b.n	800522e <HAL_I2C_Master_Transmit+0x1ea>
=======
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80053e0:	e066      	b.n	80054b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	6a39      	ldr	r1, [r7, #32]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f001 f9ec 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d107      	bne.n	800540a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005408:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e06b      	b.n	80054e6 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> e9380fc... optimisation RAM=)
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	781a      	ldrb	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b04      	cmp	r3, #4
 8005192:	d11b      	bne.n	80051cc <HAL_I2C_Master_Transmit+0x188>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005198:	2b00      	cmp	r3, #0
 800519a:	d017      	beq.n	80051cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	851a      	strh	r2, [r3, #40]	; 0x28
=======
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	781a      	ldrb	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b04      	cmp	r3, #4
 800544a:	d11b      	bne.n	8005484 <HAL_I2C_Master_Transmit+0x188>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	d017      	beq.n	8005484 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	851a      	strh	r2, [r3, #40]	; 0x28
>>>>>>> e9380fc... optimisation RAM=)
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	6a39      	ldr	r1, [r7, #32]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f001 f9dc 	bl	800658e <I2C_WaitOnBTFFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00d      	beq.n	80051f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d107      	bne.n	80051f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e01a      	b.n	800522e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d194      	bne.n	800512a <HAL_I2C_Master_Transmit+0xe6>
=======
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	6a39      	ldr	r1, [r7, #32]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f001 f9dc 	bl	8006846 <I2C_WaitOnBTFFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	2b04      	cmp	r3, #4
 800549a:	d107      	bne.n	80054ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e01a      	b.n	80054e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d194      	bne.n	80053e2 <HAL_I2C_Master_Transmit+0xe6>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	e000      	b.n	800522e <HAL_I2C_Master_Transmit+0x1ea>
=======
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e000      	b.n	80054e6 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800522c:	2302      	movs	r3, #2
  }
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	00100002 	.word	0x00100002
 800523c:	ffff0000 	.word	0xffff0000

08005240 <HAL_I2C_Master_Receive>:
=======
 80054e4:	2302      	movs	r3, #2
  }
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	00100002 	.word	0x00100002
 80054f4:	ffff0000 	.word	0xffff0000

080054f8 <HAL_I2C_Master_Receive>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8005240:	b580      	push	{r7, lr}
 8005242:	b08c      	sub	sp, #48	; 0x30
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	461a      	mov	r2, r3
 800524c:	460b      	mov	r3, r1
 800524e:	817b      	strh	r3, [r7, #10]
 8005250:	4613      	mov	r3, r2
 8005252:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005258:	f7ff fa26 	bl	80046a8 <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	f040 823f 	bne.w	80056ea <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	2319      	movs	r3, #25
 8005272:	2201      	movs	r2, #1
 8005274:	497f      	ldr	r1, [pc, #508]	; (8005474 <HAL_I2C_Master_Receive+0x234>)
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f001 f872 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005282:	2302      	movs	r3, #2
 8005284:	e232      	b.n	80056ec <HAL_I2C_Master_Receive+0x4ac>
=======
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	461a      	mov	r2, r3
 8005504:	460b      	mov	r3, r1
 8005506:	817b      	strh	r3, [r7, #10]
 8005508:	4613      	mov	r3, r2
 800550a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005510:	f7ff fa26 	bl	8004960 <HAL_GetTick>
 8005514:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b20      	cmp	r3, #32
 8005520:	f040 823f 	bne.w	80059a2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	2319      	movs	r3, #25
 800552a:	2201      	movs	r2, #1
 800552c:	497f      	ldr	r1, [pc, #508]	; (800572c <HAL_I2C_Master_Receive+0x234>)
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f001 f872 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	e232      	b.n	80059a4 <HAL_I2C_Master_Receive+0x4ac>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_I2C_Master_Receive+0x54>
 8005290:	2302      	movs	r3, #2
 8005292:	e22b      	b.n	80056ec <HAL_I2C_Master_Receive+0x4ac>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d007      	beq.n	80052ba <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
=======
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_I2C_Master_Receive+0x54>
 8005548:	2302      	movs	r3, #2
 800554a:	e22b      	b.n	80059a4 <HAL_I2C_Master_Receive+0x4ac>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b01      	cmp	r3, #1
 8005560:	d007      	beq.n	8005572 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2222      	movs	r2, #34	; 0x22
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2210      	movs	r2, #16
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	893a      	ldrh	r2, [r7, #8]
 80052ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a5f      	ldr	r2, [pc, #380]	; (8005478 <HAL_I2C_Master_Receive+0x238>)
 80052fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052fc:	8979      	ldrh	r1, [r7, #10]
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fde0 	bl	8005ec8 <I2C_MasterRequestRead>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e1ec      	b.n	80056ec <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005316:	2b00      	cmp	r3, #0
 8005318:	d113      	bne.n	8005342 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e1c0      	b.n	80056c4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	2b01      	cmp	r3, #1
 8005348:	d11e      	bne.n	8005388 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005358:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800535a:	b672      	cpsid	i
}
 800535c:	bf00      	nop
=======
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005580:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2222      	movs	r2, #34	; 0x22
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2210      	movs	r2, #16
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	893a      	ldrh	r2, [r7, #8]
 80055a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a5f      	ldr	r2, [pc, #380]	; (8005730 <HAL_I2C_Master_Receive+0x238>)
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055b4:	8979      	ldrh	r1, [r7, #10]
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fde0 	bl	8006180 <I2C_MasterRequestRead>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e1ec      	b.n	80059a4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d113      	bne.n	80055fa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d2:	2300      	movs	r3, #0
 80055d4:	61fb      	str	r3, [r7, #28]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e1c0      	b.n	800597c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d11e      	bne.n	8005640 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005610:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005612:	b672      	cpsid	i
}
 8005614:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 800535e:	2300      	movs	r3, #0
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005382:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005384:	b662      	cpsie	i
}
 8005386:	e035      	b.n	80053f4 <HAL_I2C_Master_Receive+0x1b4>
=======
 8005616:	2300      	movs	r3, #0
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800563c:	b662      	cpsie	i
}
 800563e:	e035      	b.n	80056ac <HAL_I2C_Master_Receive+0x1b4>
>>>>>>> e9380fc... optimisation RAM=)

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
<<<<<<< HEAD
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538c:	2b02      	cmp	r3, #2
 800538e:	d11e      	bne.n	80053ce <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800539e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053a0:	b672      	cpsid	i
}
 80053a2:	bf00      	nop
=======
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	2b02      	cmp	r3, #2
 8005646:	d11e      	bne.n	8005686 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005656:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005658:	b672      	cpsid	i
}
 800565a:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80053ca:	b662      	cpsie	i
}
 80053cc:	e012      	b.n	80053f4 <HAL_I2C_Master_Receive+0x1b4>
=======
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005680:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005682:	b662      	cpsie	i
}
 8005684:	e012      	b.n	80056ac <HAL_I2C_Master_Receive+0x1b4>
>>>>>>> e9380fc... optimisation RAM=)
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80053f4:	e166      	b.n	80056c4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	f200 811f 	bhi.w	800563e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005404:	2b01      	cmp	r3, #1
 8005406:	d123      	bne.n	8005450 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f001 f8ff 	bl	8006610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e167      	b.n	80056ec <HAL_I2C_Master_Receive+0x4ac>
=======
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005694:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80056ac:	e166      	b.n	800597c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	f200 811f 	bhi.w	80058f6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d123      	bne.n	8005708 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f001 f8ff 	bl	80068c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e167      	b.n	80059a4 <HAL_I2C_Master_Receive+0x4ac>
>>>>>>> e9380fc... optimisation RAM=)
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800544e:	e139      	b.n	80056c4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005454:	2b02      	cmp	r3, #2
 8005456:	d152      	bne.n	80054fe <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2200      	movs	r2, #0
 8005460:	4906      	ldr	r1, [pc, #24]	; (800547c <HAL_I2C_Master_Receive+0x23c>)
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 ff7c 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d008      	beq.n	8005480 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e13c      	b.n	80056ec <HAL_I2C_Master_Receive+0x4ac>
 8005472:	bf00      	nop
 8005474:	00100002 	.word	0x00100002
 8005478:	ffff0000 	.word	0xffff0000
 800547c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005480:	b672      	cpsid	i
}
 8005482:	bf00      	nop
=======
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005706:	e139      	b.n	800597c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570c:	2b02      	cmp	r3, #2
 800570e:	d152      	bne.n	80057b6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	2200      	movs	r2, #0
 8005718:	4906      	ldr	r1, [pc, #24]	; (8005734 <HAL_I2C_Master_Receive+0x23c>)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 ff7c 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e13c      	b.n	80059a4 <HAL_I2C_Master_Receive+0x4ac>
 800572a:	bf00      	nop
 800572c:	00100002 	.word	0x00100002
 8005730:	ffff0000 	.word	0xffff0000
 8005734:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005738:	b672      	cpsid	i
}
 800573a:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80054c6:	b662      	cpsie	i
}
 80054c8:	bf00      	nop
=======
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800574a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800577e:	b662      	cpsie	i
}
 8005780:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054fc:	e0e2      	b.n	80056c4 <HAL_I2C_Master_Receive+0x484>
=======
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057b4:	e0e2      	b.n	800597c <HAL_I2C_Master_Receive+0x484>
>>>>>>> e9380fc... optimisation RAM=)
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	2200      	movs	r2, #0
 8005506:	497b      	ldr	r1, [pc, #492]	; (80056f4 <HAL_I2C_Master_Receive+0x4b4>)
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 ff29 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0e9      	b.n	80056ec <HAL_I2C_Master_Receive+0x4ac>
=======
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	2200      	movs	r2, #0
 80057be:	497b      	ldr	r1, [pc, #492]	; (80059ac <HAL_I2C_Master_Receive+0x4b4>)
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 ff29 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0e9      	b.n	80059a4 <HAL_I2C_Master_Receive+0x4ac>
>>>>>>> e9380fc... optimisation RAM=)
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005526:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005528:	b672      	cpsid	i
}
 800552a:	bf00      	nop
=======
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80057e0:	b672      	cpsid	i
}
 80057e2:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800555e:	4b66      	ldr	r3, [pc, #408]	; (80056f8 <HAL_I2C_Master_Receive+0x4b8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	08db      	lsrs	r3, r3, #3
 8005564:	4a65      	ldr	r2, [pc, #404]	; (80056fc <HAL_I2C_Master_Receive+0x4bc>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	0a1a      	lsrs	r2, r3, #8
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	00da      	lsls	r2, r3, #3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	3b01      	subs	r3, #1
 800557c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d118      	bne.n	80055b6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80055a6:	b662      	cpsie	i
}
 80055a8:	bf00      	nop
=======
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005816:	4b66      	ldr	r3, [pc, #408]	; (80059b0 <HAL_I2C_Master_Receive+0x4b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	08db      	lsrs	r3, r3, #3
 800581c:	4a65      	ldr	r2, [pc, #404]	; (80059b4 <HAL_I2C_Master_Receive+0x4bc>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	0a1a      	lsrs	r2, r3, #8
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00da      	lsls	r2, r3, #3
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	3b01      	subs	r3, #1
 8005834:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d118      	bne.n	800586e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f043 0220 	orr.w	r2, r3, #32
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800585e:	b662      	cpsie	i
}
 8005860:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e09a      	b.n	80056ec <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d1d9      	bne.n	8005578 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005606:	b662      	cpsie	i
}
 8005608:	bf00      	nop
=======
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e09a      	b.n	80059a4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b04      	cmp	r3, #4
 800587a:	d1d9      	bne.n	8005830 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80058be:	b662      	cpsie	i
}
 80058c0:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800563c:	e042      	b.n	80056c4 <HAL_I2C_Master_Receive+0x484>
=======
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058f4:	e042      	b.n	800597c <HAL_I2C_Master_Receive+0x484>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800563e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 ffe4 	bl	8006610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e04c      	b.n	80056ec <HAL_I2C_Master_Receive+0x4ac>
=======
 80058f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 ffe4 	bl	80068c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e04c      	b.n	80059a4 <HAL_I2C_Master_Receive+0x4ac>
>>>>>>> e9380fc... optimisation RAM=)
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d118      	bne.n	80056c4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f47f ae94 	bne.w	80053f6 <HAL_I2C_Master_Receive+0x1b6>
=======
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b04      	cmp	r3, #4
 8005948:	d118      	bne.n	800597c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005980:	2b00      	cmp	r3, #0
 8005982:	f47f ae94 	bne.w	80056ae <HAL_I2C_Master_Receive+0x1b6>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e000      	b.n	80056ec <HAL_I2C_Master_Receive+0x4ac>
=======
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	e000      	b.n	80059a4 <HAL_I2C_Master_Receive+0x4ac>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80056ea:	2302      	movs	r3, #2
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3728      	adds	r7, #40	; 0x28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	00010004 	.word	0x00010004
 80056f8:	20000010 	.word	0x20000010
 80056fc:	14f8b589 	.word	0x14f8b589

08005700 <HAL_I2C_Mem_Write>:
=======
 80059a2:	2302      	movs	r3, #2
  }
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3728      	adds	r7, #40	; 0x28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	00010004 	.word	0x00010004
 80059b0:	20000010 	.word	0x20000010
 80059b4:	14f8b589 	.word	0x14f8b589

080059b8 <HAL_I2C_Mem_Write>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	461a      	mov	r2, r3
 800570e:	4603      	mov	r3, r0
 8005710:	817b      	strh	r3, [r7, #10]
 8005712:	460b      	mov	r3, r1
 8005714:	813b      	strh	r3, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800571a:	f7fe ffc5 	bl	80046a8 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]
=======
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	817b      	strh	r3, [r7, #10]
 80059ca:	460b      	mov	r3, r1
 80059cc:	813b      	strh	r3, [r7, #8]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059d2:	f7fe ffc5 	bl	8004960 <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b20      	cmp	r3, #32
 800572a:	f040 80d9 	bne.w	80058e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	2319      	movs	r3, #25
 8005734:	2201      	movs	r2, #1
 8005736:	496d      	ldr	r1, [pc, #436]	; (80058ec <HAL_I2C_Mem_Write+0x1ec>)
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fe11 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005744:	2302      	movs	r3, #2
 8005746:	e0cc      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
=======
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	f040 80d9 	bne.w	8005b98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2319      	movs	r3, #25
 80059ec:	2201      	movs	r2, #1
 80059ee:	496d      	ldr	r1, [pc, #436]	; (8005ba4 <HAL_I2C_Mem_Write+0x1ec>)
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fe11 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
 80059fe:	e0cc      	b.n	8005b9a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_I2C_Mem_Write+0x56>
 8005752:	2302      	movs	r3, #2
 8005754:	e0c5      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d007      	beq.n	800577c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
=======
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_I2C_Mem_Write+0x56>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e0c5      	b.n	8005b9a <HAL_I2C_Mem_Write+0x1e2>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d007      	beq.n	8005a34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2221      	movs	r2, #33	; 0x21
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2240      	movs	r2, #64	; 0x40
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a3a      	ldr	r2, [r7, #32]
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a4d      	ldr	r2, [pc, #308]	; (80058f0 <HAL_I2C_Mem_Write+0x1f0>)
 80057bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057be:	88f8      	ldrh	r0, [r7, #6]
 80057c0:	893a      	ldrh	r2, [r7, #8]
 80057c2:	8979      	ldrh	r1, [r7, #10]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	4603      	mov	r3, r0
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fc48 	bl	8006064 <I2C_RequestMemoryWrite>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d052      	beq.n	8005880 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e081      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
=======
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2221      	movs	r2, #33	; 0x21
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2240      	movs	r2, #64	; 0x40
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a3a      	ldr	r2, [r7, #32]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a4d      	ldr	r2, [pc, #308]	; (8005ba8 <HAL_I2C_Mem_Write+0x1f0>)
 8005a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a76:	88f8      	ldrh	r0, [r7, #6]
 8005a78:	893a      	ldrh	r2, [r7, #8]
 8005a7a:	8979      	ldrh	r1, [r7, #10]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	4603      	mov	r3, r0
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fc48 	bl	800631c <I2C_RequestMemoryWrite>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d052      	beq.n	8005b38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e081      	b.n	8005b9a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> e9380fc... optimisation RAM=)
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fe92 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d107      	bne.n	8005806 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005804:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e06b      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
=======
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fe92 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00d      	beq.n	8005ac2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d107      	bne.n	8005abe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005abc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e06b      	b.n	8005b9a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> e9380fc... optimisation RAM=)
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b04      	cmp	r3, #4
 8005846:	d11b      	bne.n	8005880 <HAL_I2C_Mem_Write+0x180>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d017      	beq.n	8005880 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1aa      	bne.n	80057de <HAL_I2C_Mem_Write+0xde>
=======
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d11b      	bne.n	8005b38 <HAL_I2C_Mem_Write+0x180>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d017      	beq.n	8005b38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1aa      	bne.n	8005a96 <HAL_I2C_Mem_Write+0xde>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 fe7e 	bl	800658e <I2C_WaitOnBTFFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	2b04      	cmp	r3, #4
 800589e:	d107      	bne.n	80058b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e016      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
=======
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fe7e 	bl	8006846 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00d      	beq.n	8005b6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d107      	bne.n	8005b68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e016      	b.n	8005b9a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
=======
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e000      	b.n	8005b9a <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80058e0:	2302      	movs	r3, #2
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	00100002 	.word	0x00100002
 80058f0:	ffff0000 	.word	0xffff0000

080058f4 <HAL_I2C_Mem_Read>:
=======
 8005b98:	2302      	movs	r3, #2
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	00100002 	.word	0x00100002
 8005ba8:	ffff0000 	.word	0xffff0000

08005bac <HAL_I2C_Mem_Read>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08c      	sub	sp, #48	; 0x30
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	461a      	mov	r2, r3
 8005902:	4603      	mov	r3, r0
 8005904:	817b      	strh	r3, [r7, #10]
 8005906:	460b      	mov	r3, r1
 8005908:	813b      	strh	r3, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005912:	f7fe fec9 	bl	80046a8 <HAL_GetTick>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24
=======
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08c      	sub	sp, #48	; 0x30
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	817b      	strh	r3, [r7, #10]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	813b      	strh	r3, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bca:	f7fe fec9 	bl	8004960 <HAL_GetTick>
 8005bce:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> e9380fc... optimisation RAM=)

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b20      	cmp	r3, #32
 8005922:	f040 8244 	bne.w	8005dae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	2319      	movs	r3, #25
 800592c:	2201      	movs	r2, #1
 800592e:	4982      	ldr	r1, [pc, #520]	; (8005b38 <HAL_I2C_Mem_Read+0x244>)
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fd15 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800593c:	2302      	movs	r3, #2
 800593e:	e237      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
=======
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	f040 8244 	bne.w	8006066 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	2319      	movs	r3, #25
 8005be4:	2201      	movs	r2, #1
 8005be6:	4982      	ldr	r1, [pc, #520]	; (8005df0 <HAL_I2C_Mem_Read+0x244>)
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fd15 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e237      	b.n	8006068 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_I2C_Mem_Read+0x5a>
 800594a:	2302      	movs	r3, #2
 800594c:	e230      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d007      	beq.n	8005974 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
=======
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_I2C_Mem_Read+0x5a>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e230      	b.n	8006068 <HAL_I2C_Mem_Read+0x4bc>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d007      	beq.n	8005c2c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2222      	movs	r2, #34	; 0x22
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2240      	movs	r2, #64	; 0x40
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a62      	ldr	r2, [pc, #392]	; (8005b3c <HAL_I2C_Mem_Read+0x248>)
 80059b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059b6:	88f8      	ldrh	r0, [r7, #6]
 80059b8:	893a      	ldrh	r2, [r7, #8]
 80059ba:	8979      	ldrh	r1, [r7, #10]
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4603      	mov	r3, r0
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fbe2 	bl	8006190 <I2C_RequestMemoryRead>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e1ec      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d113      	bne.n	8005a06 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e1c0      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d11e      	bne.n	8005a4c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a1e:	b672      	cpsid	i
}
 8005a20:	bf00      	nop
=======
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2222      	movs	r2, #34	; 0x22
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2240      	movs	r2, #64	; 0x40
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a62      	ldr	r2, [pc, #392]	; (8005df4 <HAL_I2C_Mem_Read+0x248>)
 8005c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c6e:	88f8      	ldrh	r0, [r7, #6]
 8005c70:	893a      	ldrh	r2, [r7, #8]
 8005c72:	8979      	ldrh	r1, [r7, #10]
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fbe2 	bl	8006448 <I2C_RequestMemoryRead>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e1ec      	b.n	8006068 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e1c0      	b.n	8006040 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d11e      	bne.n	8005d04 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005cd6:	b672      	cpsid	i
}
 8005cd8:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8005a22:	2300      	movs	r3, #0
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a48:	b662      	cpsie	i
}
 8005a4a:	e035      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x1c4>
=======
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d00:	b662      	cpsie	i
}
 8005d02:	e035      	b.n	8005d70 <HAL_I2C_Mem_Read+0x1c4>
>>>>>>> e9380fc... optimisation RAM=)

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
<<<<<<< HEAD
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d11e      	bne.n	8005a92 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a64:	b672      	cpsid	i
}
 8005a66:	bf00      	nop
=======
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d11e      	bne.n	8005d4a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d1c:	b672      	cpsid	i
}
 8005d1e:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a8e:	b662      	cpsie	i
}
 8005a90:	e012      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x1c4>
=======
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d46:	b662      	cpsie	i
}
 8005d48:	e012      	b.n	8005d70 <HAL_I2C_Mem_Read+0x1c4>
>>>>>>> e9380fc... optimisation RAM=)
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aa0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005ab8:	e166      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	f200 811f 	bhi.w	8005d02 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d123      	bne.n	8005b14 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ace:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fd9d 	bl	8006610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e167      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
=======
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d58:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005d70:	e166      	b.n	8006040 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	f200 811f 	bhi.w	8005fba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d123      	bne.n	8005dcc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fd9d 	bl	80068c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e167      	b.n	8006068 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> e9380fc... optimisation RAM=)
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b12:	e139      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d152      	bne.n	8005bc2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	2200      	movs	r2, #0
 8005b24:	4906      	ldr	r1, [pc, #24]	; (8005b40 <HAL_I2C_Mem_Read+0x24c>)
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fc1a 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e13c      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
 8005b36:	bf00      	nop
 8005b38:	00100002 	.word	0x00100002
 8005b3c:	ffff0000 	.word	0xffff0000
 8005b40:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005b44:	b672      	cpsid	i
}
 8005b46:	bf00      	nop
=======
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dca:	e139      	b.n	8006040 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d152      	bne.n	8005e7a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4906      	ldr	r1, [pc, #24]	; (8005df8 <HAL_I2C_Mem_Read+0x24c>)
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fc1a 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e13c      	b.n	8006068 <HAL_I2C_Mem_Read+0x4bc>
 8005dee:	bf00      	nop
 8005df0:	00100002 	.word	0x00100002
 8005df4:	ffff0000 	.word	0xffff0000
 8005df8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005dfc:	b672      	cpsid	i
}
 8005dfe:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005b8a:	b662      	cpsie	i
}
 8005b8c:	bf00      	nop
=======
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005e42:	b662      	cpsie	i
}
 8005e44:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bc0:	e0e2      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
=======
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e78:	e0e2      	b.n	8006040 <HAL_I2C_Mem_Read+0x494>
>>>>>>> e9380fc... optimisation RAM=)
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	2200      	movs	r2, #0
 8005bca:	497b      	ldr	r1, [pc, #492]	; (8005db8 <HAL_I2C_Mem_Read+0x4c4>)
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fbc7 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0e9      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
=======
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	2200      	movs	r2, #0
 8005e82:	497b      	ldr	r1, [pc, #492]	; (8006070 <HAL_I2C_Mem_Read+0x4c4>)
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fbc7 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0e9      	b.n	8006068 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> e9380fc... optimisation RAM=)
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bec:	b672      	cpsid	i
}
 8005bee:	bf00      	nop
=======
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ea4:	b672      	cpsid	i
}
 8005ea6:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c22:	4b66      	ldr	r3, [pc, #408]	; (8005dbc <HAL_I2C_Mem_Read+0x4c8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	4a65      	ldr	r2, [pc, #404]	; (8005dc0 <HAL_I2C_Mem_Read+0x4cc>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0a1a      	lsrs	r2, r3, #8
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	00da      	lsls	r2, r3, #3
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d118      	bne.n	8005c7a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f043 0220 	orr.w	r2, r3, #32
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005c6a:	b662      	cpsie	i
}
 8005c6c:	bf00      	nop
=======
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005eda:	4b66      	ldr	r3, [pc, #408]	; (8006074 <HAL_I2C_Mem_Read+0x4c8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	08db      	lsrs	r3, r3, #3
 8005ee0:	4a65      	ldr	r2, [pc, #404]	; (8006078 <HAL_I2C_Mem_Read+0x4cc>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	0a1a      	lsrs	r2, r3, #8
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	00da      	lsls	r2, r3, #3
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d118      	bne.n	8005f32 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f043 0220 	orr.w	r2, r3, #32
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005f22:	b662      	cpsie	i
}
 8005f24:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e09a      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d1d9      	bne.n	8005c3c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005cca:	b662      	cpsie	i
}
 8005ccc:	bf00      	nop
=======
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e09a      	b.n	8006068 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d1d9      	bne.n	8005ef4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f82:	b662      	cpsie	i
}
 8005f84:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d00:	e042      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
=======
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fb8:	e042      	b.n	8006040 <HAL_I2C_Mem_Read+0x494>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8005d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fc82 	bl	8006610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e04c      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
=======
 8005fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fc82 	bl	80068c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e04c      	b.n	8006068 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> e9380fc... optimisation RAM=)
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d118      	bne.n	8005d88 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f47f ae94 	bne.w	8005aba <HAL_I2C_Mem_Read+0x1c6>
=======
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b04      	cmp	r3, #4
 800600c:	d118      	bne.n	8006040 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	f47f ae94 	bne.w	8005d72 <HAL_I2C_Mem_Read+0x1c6>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e000      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
=======
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e000      	b.n	8006068 <HAL_I2C_Mem_Read+0x4bc>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005dae:	2302      	movs	r3, #2
  }
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3728      	adds	r7, #40	; 0x28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	00010004 	.word	0x00010004
 8005dbc:	20000010 	.word	0x20000010
 8005dc0:	14f8b589 	.word	0x14f8b589

08005dc4 <I2C_MasterRequestWrite>:
=======
 8006066:	2302      	movs	r3, #2
  }
}
 8006068:	4618      	mov	r0, r3
 800606a:	3728      	adds	r7, #40	; 0x28
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	00010004 	.word	0x00010004
 8006074:	20000010 	.word	0x20000010
 8006078:	14f8b589 	.word	0x14f8b589

0800607c <I2C_MasterRequestWrite>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	607a      	str	r2, [r7, #4]
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d006      	beq.n	8005dee <I2C_MasterRequestWrite+0x2a>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d003      	beq.n	8005dee <I2C_MasterRequestWrite+0x2a>
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dec:	d108      	bne.n	8005e00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e00b      	b.n	8005e18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	2b12      	cmp	r3, #18
 8005e06:	d107      	bne.n	8005e18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e16:	601a      	str	r2, [r3, #0]
=======
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	460b      	mov	r3, r1
 800608a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b08      	cmp	r3, #8
 8006096:	d006      	beq.n	80060a6 <I2C_MasterRequestWrite+0x2a>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d003      	beq.n	80060a6 <I2C_MasterRequestWrite+0x2a>
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060a4:	d108      	bne.n	80060b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e00b      	b.n	80060d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	2b12      	cmp	r3, #18
 80060be:	d107      	bne.n	80060d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ce:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fa9b 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3e:	d103      	bne.n	8005e48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e035      	b.n	8005eb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e54:	d108      	bne.n	8005e68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e56:	897b      	ldrh	r3, [r7, #10]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e64:	611a      	str	r2, [r3, #16]
 8005e66:	e01b      	b.n	8005ea0 <I2C_MasterRequestWrite+0xdc>
=======
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fa9b 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f6:	d103      	bne.n	8006100 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e035      	b.n	8006170 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800610c:	d108      	bne.n	8006120 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800610e:	897b      	ldrh	r3, [r7, #10]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800611c:	611a      	str	r2, [r3, #16]
 800611e:	e01b      	b.n	8006158 <I2C_MasterRequestWrite+0xdc>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 8005e68:	897b      	ldrh	r3, [r7, #10]
 8005e6a:	11db      	asrs	r3, r3, #7
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 0306 	and.w	r3, r3, #6
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f063 030f 	orn	r3, r3, #15
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	490e      	ldr	r1, [pc, #56]	; (8005ec0 <I2C_MasterRequestWrite+0xfc>)
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fac1 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e010      	b.n	8005eb8 <I2C_MasterRequestWrite+0xf4>
=======
 8006120:	897b      	ldrh	r3, [r7, #10]
 8006122:	11db      	asrs	r3, r3, #7
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 0306 	and.w	r3, r3, #6
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f063 030f 	orn	r3, r3, #15
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	490e      	ldr	r1, [pc, #56]	; (8006178 <I2C_MasterRequestWrite+0xfc>)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 fac1 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e010      	b.n	8006170 <I2C_MasterRequestWrite+0xf4>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 8005e96:	897b      	ldrh	r3, [r7, #10]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	611a      	str	r2, [r3, #16]
=======
 800614e:	897b      	ldrh	r3, [r7, #10]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4907      	ldr	r1, [pc, #28]	; (8005ec4 <I2C_MasterRequestWrite+0x100>)
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 fab1 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	00010008 	.word	0x00010008
 8005ec4:	00010002 	.word	0x00010002

08005ec8 <I2C_MasterRequestRead>:
=======
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4907      	ldr	r1, [pc, #28]	; (800617c <I2C_MasterRequestWrite+0x100>)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 fab1 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	00010008 	.word	0x00010008
 800617c:	00010002 	.word	0x00010002

08006180 <I2C_MasterRequestRead>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d006      	beq.n	8005f02 <I2C_MasterRequestRead+0x3a>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d003      	beq.n	8005f02 <I2C_MasterRequestRead+0x3a>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f00:	d108      	bne.n	8005f14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e00b      	b.n	8005f2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	2b11      	cmp	r3, #17
 8005f1a:	d107      	bne.n	8005f2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f2a:	601a      	str	r2, [r3, #0]
=======
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	460b      	mov	r3, r1
 800618e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d006      	beq.n	80061ba <I2C_MasterRequestRead+0x3a>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d003      	beq.n	80061ba <I2C_MasterRequestRead+0x3a>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061b8:	d108      	bne.n	80061cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e00b      	b.n	80061e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	2b11      	cmp	r3, #17
 80061d2:	d107      	bne.n	80061e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e2:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fa11 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00d      	beq.n	8005f60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f52:	d103      	bne.n	8005f5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e079      	b.n	8006054 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f68:	d108      	bne.n	8005f7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f6a:	897b      	ldrh	r3, [r7, #10]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f043 0301 	orr.w	r3, r3, #1
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	611a      	str	r2, [r3, #16]
 8005f7a:	e05f      	b.n	800603c <I2C_MasterRequestRead+0x174>
=======
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fa11 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00d      	beq.n	8006218 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620a:	d103      	bne.n	8006214 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006212:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e079      	b.n	800630c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006220:	d108      	bne.n	8006234 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006222:	897b      	ldrh	r3, [r7, #10]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	b2da      	uxtb	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	611a      	str	r2, [r3, #16]
 8006232:	e05f      	b.n	80062f4 <I2C_MasterRequestRead+0x174>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 8005f7c:	897b      	ldrh	r3, [r7, #10]
 8005f7e:	11db      	asrs	r3, r3, #7
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0306 	and.w	r3, r3, #6
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f063 030f 	orn	r3, r3, #15
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4930      	ldr	r1, [pc, #192]	; (800605c <I2C_MasterRequestRead+0x194>)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fa37 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e054      	b.n	8006054 <I2C_MasterRequestRead+0x18c>
=======
 8006234:	897b      	ldrh	r3, [r7, #10]
 8006236:	11db      	asrs	r3, r3, #7
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f003 0306 	and.w	r3, r3, #6
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f063 030f 	orn	r3, r3, #15
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4930      	ldr	r1, [pc, #192]	; (8006314 <I2C_MasterRequestRead+0x194>)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fa37 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e054      	b.n	800630c <I2C_MasterRequestRead+0x18c>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 8005faa:	897b      	ldrh	r3, [r7, #10]
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	4929      	ldr	r1, [pc, #164]	; (8006060 <I2C_MasterRequestRead+0x198>)
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fa27 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e044      	b.n	8006054 <I2C_MasterRequestRead+0x18c>
=======
 8006262:	897b      	ldrh	r3, [r7, #10]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	4929      	ldr	r1, [pc, #164]	; (8006318 <I2C_MasterRequestRead+0x198>)
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fa27 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e044      	b.n	800630c <I2C_MasterRequestRead+0x18c>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8005fca:	2300      	movs	r3, #0
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	613b      	str	r3, [r7, #16]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f9af 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00d      	beq.n	8006024 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006016:	d103      	bne.n	8006020 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800601e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e017      	b.n	8006054 <I2C_MasterRequestRead+0x18c>
=======
 8006282:	2300      	movs	r3, #0
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f9af 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00d      	beq.n	80062dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	d103      	bne.n	80062d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e017      	b.n	800630c <I2C_MasterRequestRead+0x18c>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
<<<<<<< HEAD
 8006024:	897b      	ldrh	r3, [r7, #10]
 8006026:	11db      	asrs	r3, r3, #7
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 0306 	and.w	r3, r3, #6
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f063 030e 	orn	r3, r3, #14
 8006034:	b2da      	uxtb	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	611a      	str	r2, [r3, #16]
=======
 80062dc:	897b      	ldrh	r3, [r7, #10]
 80062de:	11db      	asrs	r3, r3, #7
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 0306 	and.w	r3, r3, #6
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f063 030e 	orn	r3, r3, #14
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4907      	ldr	r1, [pc, #28]	; (8006060 <I2C_MasterRequestRead+0x198>)
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f9e3 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	00010008 	.word	0x00010008
 8006060:	00010002 	.word	0x00010002

08006064 <I2C_RequestMemoryWrite>:
=======
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4907      	ldr	r1, [pc, #28]	; (8006318 <I2C_MasterRequestRead+0x198>)
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f9e3 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	00010008 	.word	0x00010008
 8006318:	00010002 	.word	0x00010002

0800631c <I2C_RequestMemoryWrite>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	4608      	mov	r0, r1
 800606e:	4611      	mov	r1, r2
 8006070:	461a      	mov	r2, r3
 8006072:	4603      	mov	r3, r0
 8006074:	817b      	strh	r3, [r7, #10]
 8006076:	460b      	mov	r3, r1
 8006078:	813b      	strh	r3, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800608c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	2200      	movs	r2, #0
 8006096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f960 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00d      	beq.n	80060c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b4:	d103      	bne.n	80060be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e05f      	b.n	8006182 <I2C_RequestMemoryWrite+0x11e>
=======
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	4608      	mov	r0, r1
 8006326:	4611      	mov	r1, r2
 8006328:	461a      	mov	r2, r3
 800632a:	4603      	mov	r3, r0
 800632c:	817b      	strh	r3, [r7, #10]
 800632e:	460b      	mov	r3, r1
 8006330:	813b      	strh	r3, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006344:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	2200      	movs	r2, #0
 800634e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f960 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636c:	d103      	bne.n	8006376 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e05f      	b.n	800643a <I2C_RequestMemoryWrite+0x11e>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 80060c2:	897b      	ldrh	r3, [r7, #10]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	492d      	ldr	r1, [pc, #180]	; (800618c <I2C_RequestMemoryWrite+0x128>)
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f998 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e04c      	b.n	8006182 <I2C_RequestMemoryWrite+0x11e>
=======
 800637a:	897b      	ldrh	r3, [r7, #10]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006388:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	6a3a      	ldr	r2, [r7, #32]
 800638e:	492d      	ldr	r1, [pc, #180]	; (8006444 <I2C_RequestMemoryWrite+0x128>)
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f998 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e04c      	b.n	800643a <I2C_RequestMemoryWrite+0x11e>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 80060e8:	2300      	movs	r3, #0
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006100:	6a39      	ldr	r1, [r7, #32]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fa02 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b04      	cmp	r3, #4
 8006114:	d107      	bne.n	8006126 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e02b      	b.n	8006182 <I2C_RequestMemoryWrite+0x11e>
=======
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b8:	6a39      	ldr	r1, [r7, #32]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fa02 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d107      	bne.n	80063de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e02b      	b.n	800643a <I2C_RequestMemoryWrite+0x11e>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d105      	bne.n	800613c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006130:	893b      	ldrh	r3, [r7, #8]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	611a      	str	r2, [r3, #16]
 800613a:	e021      	b.n	8006180 <I2C_RequestMemoryWrite+0x11c>
=======
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d105      	bne.n	80063f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063e8:	893b      	ldrh	r3, [r7, #8]
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	611a      	str	r2, [r3, #16]
 80063f2:	e021      	b.n	8006438 <I2C_RequestMemoryWrite+0x11c>
>>>>>>> e9380fc... optimisation RAM=)
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 800613c:	893b      	ldrh	r3, [r7, #8]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	b29b      	uxth	r3, r3
 8006142:	b2da      	uxtb	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614c:	6a39      	ldr	r1, [r7, #32]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f9dc 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00d      	beq.n	8006176 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	2b04      	cmp	r3, #4
 8006160:	d107      	bne.n	8006172 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e005      	b.n	8006182 <I2C_RequestMemoryWrite+0x11e>
=======
 80063f4:	893b      	ldrh	r3, [r7, #8]
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006404:	6a39      	ldr	r1, [r7, #32]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f9dc 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b04      	cmp	r3, #4
 8006418:	d107      	bne.n	800642a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006428:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e005      	b.n	800643a <I2C_RequestMemoryWrite+0x11e>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 8006176:	893b      	ldrh	r3, [r7, #8]
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	00010002 	.word	0x00010002

08006190 <I2C_RequestMemoryRead>:
=======
 800642e:	893b      	ldrh	r3, [r7, #8]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	00010002 	.word	0x00010002

08006448 <I2C_RequestMemoryRead>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	461a      	mov	r2, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	817b      	strh	r3, [r7, #10]
 80061a2:	460b      	mov	r3, r1
 80061a4:	813b      	strh	r3, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f8c2 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f0:	d103      	bne.n	80061fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e0aa      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
=======
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	4608      	mov	r0, r1
 8006452:	4611      	mov	r1, r2
 8006454:	461a      	mov	r2, r3
 8006456:	4603      	mov	r3, r0
 8006458:	817b      	strh	r3, [r7, #10]
 800645a:	460b      	mov	r3, r1
 800645c:	813b      	strh	r3, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006470:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006480:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	2200      	movs	r2, #0
 800648a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 f8c2 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00d      	beq.n	80064b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a8:	d103      	bne.n	80064b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e0aa      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 80061fe:	897b      	ldrh	r3, [r7, #10]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800620c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	4952      	ldr	r1, [pc, #328]	; (800635c <I2C_RequestMemoryRead+0x1cc>)
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f8fa 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e097      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
=======
 80064b6:	897b      	ldrh	r3, [r7, #10]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	6a3a      	ldr	r2, [r7, #32]
 80064ca:	4952      	ldr	r1, [pc, #328]	; (8006614 <I2C_RequestMemoryRead+0x1cc>)
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f8fa 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e097      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800623a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623c:	6a39      	ldr	r1, [r7, #32]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f964 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	2b04      	cmp	r3, #4
 8006250:	d107      	bne.n	8006262 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e076      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
=======
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f4:	6a39      	ldr	r1, [r7, #32]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f964 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00d      	beq.n	800651e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	2b04      	cmp	r3, #4
 8006508:	d107      	bne.n	800651a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006518:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e076      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d105      	bne.n	8006278 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800626c:	893b      	ldrh	r3, [r7, #8]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	611a      	str	r2, [r3, #16]
 8006276:	e021      	b.n	80062bc <I2C_RequestMemoryRead+0x12c>
=======
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d105      	bne.n	8006530 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006524:	893b      	ldrh	r3, [r7, #8]
 8006526:	b2da      	uxtb	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	611a      	str	r2, [r3, #16]
 800652e:	e021      	b.n	8006574 <I2C_RequestMemoryRead+0x12c>
>>>>>>> e9380fc... optimisation RAM=)
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	b29b      	uxth	r3, r3
 800627e:	b2da      	uxtb	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006288:	6a39      	ldr	r1, [r7, #32]
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f93e 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00d      	beq.n	80062b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2b04      	cmp	r3, #4
 800629c:	d107      	bne.n	80062ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e050      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
=======
 8006530:	893b      	ldrh	r3, [r7, #8]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	b29b      	uxth	r3, r3
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800653e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006540:	6a39      	ldr	r1, [r7, #32]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f93e 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	2b04      	cmp	r3, #4
 8006554:	d107      	bne.n	8006566 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006564:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e050      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 80062b2:	893b      	ldrh	r3, [r7, #8]
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	611a      	str	r2, [r3, #16]
=======
 800656a:	893b      	ldrh	r3, [r7, #8]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80062bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062be:	6a39      	ldr	r1, [r7, #32]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f923 	bl	800650c <I2C_WaitOnTXEFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d107      	bne.n	80062e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e035      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
=======
 8006574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006576:	6a39      	ldr	r1, [r7, #32]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f923 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	2b04      	cmp	r3, #4
 800658a:	d107      	bne.n	800659c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e035      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
<<<<<<< HEAD
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	2200      	movs	r2, #0
 8006300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f82b 	bl	8006360 <I2C_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d103      	bne.n	8006328 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e013      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
=======
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f82b 	bl	8006618 <I2C_WaitOnFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00d      	beq.n	80065e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d6:	d103      	bne.n	80065e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e013      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
<<<<<<< HEAD
 800632c:	897b      	ldrh	r3, [r7, #10]
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f043 0301 	orr.w	r3, r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	6a3a      	ldr	r2, [r7, #32]
 8006340:	4906      	ldr	r1, [pc, #24]	; (800635c <I2C_RequestMemoryRead+0x1cc>)
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f863 	bl	800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	00010002 	.word	0x00010002

08006360 <I2C_WaitOnFlagUntilTimeout>:
=======
 80065e4:	897b      	ldrh	r3, [r7, #10]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	6a3a      	ldr	r2, [r7, #32]
 80065f8:	4906      	ldr	r1, [pc, #24]	; (8006614 <I2C_RequestMemoryRead+0x1cc>)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f863 	bl	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e000      	b.n	800660c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	00010002 	.word	0x00010002

08006618 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006370:	e025      	b.n	80063be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006378:	d021      	beq.n	80063be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637a:	f7fe f995 	bl	80046a8 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d116      	bne.n	80063be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f043 0220 	orr.w	r2, r3, #32
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e023      	b.n	8006406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10d      	bne.n	80063e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	43da      	mvns	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4013      	ands	r3, r2
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bf0c      	ite	eq
 80063da:	2301      	moveq	r3, #1
 80063dc:	2300      	movne	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	e00c      	b.n	80063fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	43da      	mvns	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4013      	ands	r3, r2
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	429a      	cmp	r2, r3
 8006402:	d0b6      	beq.n	8006372 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	4613      	mov	r3, r2
 8006626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006628:	e025      	b.n	8006676 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006630:	d021      	beq.n	8006676 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006632:	f7fe f995 	bl	8004960 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d302      	bcc.n	8006648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d116      	bne.n	8006676 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e023      	b.n	80066be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b01      	cmp	r3, #1
 800667e:	d10d      	bne.n	800669c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	43da      	mvns	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4013      	ands	r3, r2
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	bf0c      	ite	eq
 8006692:	2301      	moveq	r3, #1
 8006694:	2300      	movne	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	e00c      	b.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	43da      	mvns	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4013      	ands	r3, r2
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bf0c      	ite	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	2300      	movne	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d0b6      	beq.n	800662a <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800641c:	e051      	b.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642c:	d123      	bne.n	8006476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f043 0204 	orr.w	r2, r3, #4
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e046      	b.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
=======
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066d4:	e051      	b.n	800677a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e4:	d123      	bne.n	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e046      	b.n	80067bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800647c:	d021      	beq.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fe f913 	bl	80046a8 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d116      	bne.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f043 0220 	orr.w	r2, r3, #32
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e020      	b.n	8006504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0c1b      	lsrs	r3, r3, #16
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d10c      	bne.n	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	43da      	mvns	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf14      	ite	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	2300      	moveq	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	e00b      	b.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	43da      	mvns	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4013      	ands	r3, r2
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d18d      	bne.n	800641e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006734:	d021      	beq.n	800677a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006736:	f7fe f913 	bl	8004960 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d302      	bcc.n	800674c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d116      	bne.n	800677a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f043 0220 	orr.w	r2, r3, #32
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e020      	b.n	80067bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	0c1b      	lsrs	r3, r3, #16
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d10c      	bne.n	800679e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	43da      	mvns	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	4013      	ands	r3, r2
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf14      	ite	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2300      	moveq	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	e00b      	b.n	80067b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	43da      	mvns	r2, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	4013      	ands	r3, r2
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bf14      	ite	ne
 80067b0:	2301      	movne	r3, #1
 80067b2:	2300      	moveq	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d18d      	bne.n	80066d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006518:	e02d      	b.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f8ce 	bl	80066bc <I2C_IsAcknowledgeFailed>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e02d      	b.n	8006586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
=======
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067d0:	e02d      	b.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f8ce 	bl	8006974 <I2C_IsAcknowledgeFailed>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e02d      	b.n	800683e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006530:	d021      	beq.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fe f8b9 	bl	80046a8 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d116      	bne.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f043 0220 	orr.w	r2, r3, #32
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e007      	b.n	8006586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b80      	cmp	r3, #128	; 0x80
 8006582:	d1ca      	bne.n	800651a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e8:	d021      	beq.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ea:	f7fe f8b9 	bl	8004960 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d302      	bcc.n	8006800 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d116      	bne.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f043 0220 	orr.w	r2, r3, #32
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e007      	b.n	800683e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006838:	2b80      	cmp	r3, #128	; 0x80
 800683a:	d1ca      	bne.n	80067d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800659a:	e02d      	b.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f88d 	bl	80066bc <I2C_IsAcknowledgeFailed>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e02d      	b.n	8006608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
=======
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006852:	e02d      	b.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f88d 	bl	8006974 <I2C_IsAcknowledgeFailed>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e02d      	b.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b2:	d021      	beq.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b4:	f7fe f878 	bl	80046a8 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d116      	bne.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e007      	b.n	8006608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b04      	cmp	r3, #4
 8006604:	d1ca      	bne.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800686a:	d021      	beq.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686c:	f7fe f878 	bl	8004960 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	429a      	cmp	r2, r3
 800687a:	d302      	bcc.n	8006882 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d116      	bne.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	f043 0220 	orr.w	r2, r3, #32
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e007      	b.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d1ca      	bne.n	8006854 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800661c:	e042      	b.n	80066a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b10      	cmp	r3, #16
 800662a:	d119      	bne.n	8006660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0210 	mvn.w	r2, #16
 8006634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e029      	b.n	80066b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
=======
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068d4:	e042      	b.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d119      	bne.n	8006918 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0210 	mvn.w	r2, #16
 80068ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e029      	b.n	800696c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8006660:	f7fe f822 	bl	80046a8 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	429a      	cmp	r2, r3
 800666e:	d302      	bcc.n	8006676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d116      	bne.n	80066a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	f043 0220 	orr.w	r2, r3, #32
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e007      	b.n	80066b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d1b5      	bne.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <I2C_IsAcknowledgeFailed>:
=======
 8006918:	f7fe f822 	bl	8004960 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d116      	bne.n	800695c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e007      	b.n	800696c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d1b5      	bne.n	80068d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <I2C_IsAcknowledgeFailed>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d11b      	bne.n	800670c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	f043 0204 	orr.w	r2, r3, #4
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <HAL_PWR_PVD_IRQHandler>:
=======
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698a:	d11b      	bne.n	80069c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006994:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	f043 0204 	orr.w	r2, r3, #4
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <HAL_PWR_PVD_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
<<<<<<< HEAD
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800671c:	4b06      	ldr	r3, [pc, #24]	; (8006738 <HAL_PWR_PVD_IRQHandler+0x20>)
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006728:	f000 f808 	bl	800673c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800672c:	4b02      	ldr	r3, [pc, #8]	; (8006738 <HAL_PWR_PVD_IRQHandler+0x20>)
 800672e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006732:	615a      	str	r2, [r3, #20]
  }
}
 8006734:	bf00      	nop
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40010400 	.word	0x40010400

0800673c <HAL_PWR_PVDCallback>:
=======
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <HAL_PWR_PVD_IRQHandler+0x20>)
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80069e0:	f000 f808 	bl	80069f4 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80069e4:	4b02      	ldr	r3, [pc, #8]	; (80069f0 <HAL_PWR_PVD_IRQHandler+0x20>)
 80069e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069ea:	615a      	str	r2, [r3, #20]
  }
}
 80069ec:	bf00      	nop
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40010400 	.word	0x40010400

080069f4 <HAL_PWR_PVDCallback>:
>>>>>>> e9380fc... optimisation RAM=)
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
<<<<<<< HEAD
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
=======
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
<<<<<<< HEAD
 8006740:	bf00      	nop
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <HAL_RCC_OscConfig>:
=======
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr

08006a00 <HAL_RCC_OscConfig>:
>>>>>>> e9380fc... optimisation RAM=)
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
=======
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e272      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
=======
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e272      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> e9380fc... optimisation RAM=)

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8087 	beq.w	8006876 <HAL_RCC_OscConfig+0x12e>
=======
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8087 	beq.w	8006b2e <HAL_RCC_OscConfig+0x12e>
>>>>>>> e9380fc... optimisation RAM=)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8006768:	4b92      	ldr	r3, [pc, #584]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f003 030c 	and.w	r3, r3, #12
 8006770:	2b04      	cmp	r3, #4
 8006772:	d00c      	beq.n	800678e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006774:	4b8f      	ldr	r3, [pc, #572]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 030c 	and.w	r3, r3, #12
 800677c:	2b08      	cmp	r3, #8
 800677e:	d112      	bne.n	80067a6 <HAL_RCC_OscConfig+0x5e>
 8006780:	4b8c      	ldr	r3, [pc, #560]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d10b      	bne.n	80067a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800678e:	4b89      	ldr	r3, [pc, #548]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d06c      	beq.n	8006874 <HAL_RCC_OscConfig+0x12c>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d168      	bne.n	8006874 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e24c      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
=======
 8006a20:	4b92      	ldr	r3, [pc, #584]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f003 030c 	and.w	r3, r3, #12
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d00c      	beq.n	8006a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a2c:	4b8f      	ldr	r3, [pc, #572]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d112      	bne.n	8006a5e <HAL_RCC_OscConfig+0x5e>
 8006a38:	4b8c      	ldr	r3, [pc, #560]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d10b      	bne.n	8006a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a46:	4b89      	ldr	r3, [pc, #548]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d06c      	beq.n	8006b2c <HAL_RCC_OscConfig+0x12c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d168      	bne.n	8006b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e24c      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ae:	d106      	bne.n	80067be <HAL_RCC_OscConfig+0x76>
 80067b0:	4b80      	ldr	r3, [pc, #512]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a7f      	ldr	r2, [pc, #508]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	e02e      	b.n	800681c <HAL_RCC_OscConfig+0xd4>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <HAL_RCC_OscConfig+0x98>
 80067c6:	4b7b      	ldr	r3, [pc, #492]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a7a      	ldr	r2, [pc, #488]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	4b78      	ldr	r3, [pc, #480]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a77      	ldr	r2, [pc, #476]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	e01d      	b.n	800681c <HAL_RCC_OscConfig+0xd4>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067e8:	d10c      	bne.n	8006804 <HAL_RCC_OscConfig+0xbc>
 80067ea:	4b72      	ldr	r3, [pc, #456]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a71      	ldr	r2, [pc, #452]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	4b6f      	ldr	r3, [pc, #444]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a6e      	ldr	r2, [pc, #440]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80067fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	e00b      	b.n	800681c <HAL_RCC_OscConfig+0xd4>
 8006804:	4b6b      	ldr	r3, [pc, #428]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a6a      	ldr	r2, [pc, #424]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 800680a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	4b68      	ldr	r3, [pc, #416]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a67      	ldr	r2, [pc, #412]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800681a:	6013      	str	r3, [r2, #0]
=======
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a66:	d106      	bne.n	8006a76 <HAL_RCC_OscConfig+0x76>
 8006a68:	4b80      	ldr	r3, [pc, #512]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a7f      	ldr	r2, [pc, #508]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	e02e      	b.n	8006ad4 <HAL_RCC_OscConfig+0xd4>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <HAL_RCC_OscConfig+0x98>
 8006a7e:	4b7b      	ldr	r3, [pc, #492]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a7a      	ldr	r2, [pc, #488]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4b78      	ldr	r3, [pc, #480]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a77      	ldr	r2, [pc, #476]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e01d      	b.n	8006ad4 <HAL_RCC_OscConfig+0xd4>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCC_OscConfig+0xbc>
 8006aa2:	4b72      	ldr	r3, [pc, #456]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a71      	ldr	r2, [pc, #452]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	4b6f      	ldr	r3, [pc, #444]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a6e      	ldr	r2, [pc, #440]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	e00b      	b.n	8006ad4 <HAL_RCC_OscConfig+0xd4>
 8006abc:	4b6b      	ldr	r3, [pc, #428]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a6a      	ldr	r2, [pc, #424]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	4b68      	ldr	r3, [pc, #416]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a67      	ldr	r2, [pc, #412]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ad2:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d013      	beq.n	800684c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006824:	f7fd ff40 	bl	80046a8 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800682c:	f7fd ff3c 	bl	80046a8 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b64      	cmp	r3, #100	; 0x64
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e200      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800683e:	4b5d      	ldr	r3, [pc, #372]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0f0      	beq.n	800682c <HAL_RCC_OscConfig+0xe4>
 800684a:	e014      	b.n	8006876 <HAL_RCC_OscConfig+0x12e>
=======
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d013      	beq.n	8006b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006adc:	f7fd ff40 	bl	8004960 <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae4:	f7fd ff3c 	bl	8004960 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b64      	cmp	r3, #100	; 0x64
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e200      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af6:	4b5d      	ldr	r3, [pc, #372]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0xe4>
 8006b02:	e014      	b.n	8006b2e <HAL_RCC_OscConfig+0x12e>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800684c:	f7fd ff2c 	bl	80046a8 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006854:	f7fd ff28 	bl	80046a8 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b64      	cmp	r3, #100	; 0x64
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e1ec      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006866:	4b53      	ldr	r3, [pc, #332]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f0      	bne.n	8006854 <HAL_RCC_OscConfig+0x10c>
 8006872:	e000      	b.n	8006876 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006874:	bf00      	nop
=======
 8006b04:	f7fd ff2c 	bl	8004960 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b0c:	f7fd ff28 	bl	8004960 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b64      	cmp	r3, #100	; 0x64
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e1ec      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b1e:	4b53      	ldr	r3, [pc, #332]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x10c>
 8006b2a:	e000      	b.n	8006b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b2c:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d063      	beq.n	800694a <HAL_RCC_OscConfig+0x202>
=======
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d063      	beq.n	8006c02 <HAL_RCC_OscConfig+0x202>
>>>>>>> e9380fc... optimisation RAM=)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8006882:	4b4c      	ldr	r3, [pc, #304]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f003 030c 	and.w	r3, r3, #12
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800688e:	4b49      	ldr	r3, [pc, #292]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f003 030c 	and.w	r3, r3, #12
 8006896:	2b08      	cmp	r3, #8
 8006898:	d11c      	bne.n	80068d4 <HAL_RCC_OscConfig+0x18c>
 800689a:	4b46      	ldr	r3, [pc, #280]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d116      	bne.n	80068d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068a6:	4b43      	ldr	r3, [pc, #268]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <HAL_RCC_OscConfig+0x176>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d001      	beq.n	80068be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e1c0      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
=======
 8006b3a:	4b4c      	ldr	r3, [pc, #304]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b46:	4b49      	ldr	r3, [pc, #292]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d11c      	bne.n	8006b8c <HAL_RCC_OscConfig+0x18c>
 8006b52:	4b46      	ldr	r3, [pc, #280]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d116      	bne.n	8006b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b5e:	4b43      	ldr	r3, [pc, #268]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_RCC_OscConfig+0x176>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d001      	beq.n	8006b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e1c0      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> e9380fc... optimisation RAM=)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80068be:	4b3d      	ldr	r3, [pc, #244]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4939      	ldr	r1, [pc, #228]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068d2:	e03a      	b.n	800694a <HAL_RCC_OscConfig+0x202>
=======
 8006b76:	4b3d      	ldr	r3, [pc, #244]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4939      	ldr	r1, [pc, #228]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8a:	e03a      	b.n	8006c02 <HAL_RCC_OscConfig+0x202>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d020      	beq.n	800691e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068dc:	4b36      	ldr	r3, [pc, #216]	; (80069b8 <HAL_RCC_OscConfig+0x270>)
 80068de:	2201      	movs	r2, #1
 80068e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e2:	f7fd fee1 	bl	80046a8 <HAL_GetTick>
 80068e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e8:	e008      	b.n	80068fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068ea:	f7fd fedd 	bl	80046a8 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e1a1      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fc:	4b2d      	ldr	r3, [pc, #180]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0f0      	beq.n	80068ea <HAL_RCC_OscConfig+0x1a2>
=======
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d020      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b94:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <HAL_RCC_OscConfig+0x270>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b9a:	f7fd fee1 	bl	8004960 <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba2:	f7fd fedd 	bl	8004960 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e1a1      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb4:	4b2d      	ldr	r3, [pc, #180]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0f0      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> e9380fc... optimisation RAM=)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8006908:	4b2a      	ldr	r3, [pc, #168]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4927      	ldr	r1, [pc, #156]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006918:	4313      	orrs	r3, r2
 800691a:	600b      	str	r3, [r1, #0]
 800691c:	e015      	b.n	800694a <HAL_RCC_OscConfig+0x202>
=======
 8006bc0:	4b2a      	ldr	r3, [pc, #168]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	4927      	ldr	r1, [pc, #156]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	600b      	str	r3, [r1, #0]
 8006bd4:	e015      	b.n	8006c02 <HAL_RCC_OscConfig+0x202>
>>>>>>> e9380fc... optimisation RAM=)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 800691e:	4b26      	ldr	r3, [pc, #152]	; (80069b8 <HAL_RCC_OscConfig+0x270>)
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006924:	f7fd fec0 	bl	80046a8 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800692c:	f7fd febc 	bl	80046a8 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e180      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800693e:	4b1d      	ldr	r3, [pc, #116]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f0      	bne.n	800692c <HAL_RCC_OscConfig+0x1e4>
=======
 8006bd6:	4b26      	ldr	r3, [pc, #152]	; (8006c70 <HAL_RCC_OscConfig+0x270>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bdc:	f7fd fec0 	bl	8004960 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be4:	f7fd febc 	bl	8004960 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e180      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bf6:	4b1d      	ldr	r3, [pc, #116]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d03a      	beq.n	80069cc <HAL_RCC_OscConfig+0x284>
=======
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d03a      	beq.n	8006c84 <HAL_RCC_OscConfig+0x284>
>>>>>>> e9380fc... optimisation RAM=)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d019      	beq.n	8006992 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800695e:	4b17      	ldr	r3, [pc, #92]	; (80069bc <HAL_RCC_OscConfig+0x274>)
 8006960:	2201      	movs	r2, #1
 8006962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006964:	f7fd fea0 	bl	80046a8 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800696c:	f7fd fe9c 	bl	80046a8 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e160      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800697e:	4b0d      	ldr	r3, [pc, #52]	; (80069b4 <HAL_RCC_OscConfig+0x26c>)
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f0      	beq.n	800696c <HAL_RCC_OscConfig+0x224>
=======
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d019      	beq.n	8006c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c16:	4b17      	ldr	r3, [pc, #92]	; (8006c74 <HAL_RCC_OscConfig+0x274>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c1c:	f7fd fea0 	bl	8004960 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c24:	f7fd fe9c 	bl	8004960 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e160      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c36:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <HAL_RCC_OscConfig+0x26c>)
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0f0      	beq.n	8006c24 <HAL_RCC_OscConfig+0x224>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 800698a:	2001      	movs	r0, #1
 800698c:	f000 fb08 	bl	8006fa0 <RCC_Delay>
 8006990:	e01c      	b.n	80069cc <HAL_RCC_OscConfig+0x284>
=======
 8006c42:	2001      	movs	r0, #1
 8006c44:	f000 fb08 	bl	8007258 <RCC_Delay>
 8006c48:	e01c      	b.n	8006c84 <HAL_RCC_OscConfig+0x284>
>>>>>>> e9380fc... optimisation RAM=)
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8006992:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <HAL_RCC_OscConfig+0x274>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006998:	f7fd fe86 	bl	80046a8 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800699e:	e00f      	b.n	80069c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a0:	f7fd fe82 	bl	80046a8 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d908      	bls.n	80069c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e146      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
 80069b2:	bf00      	nop
 80069b4:	40021000 	.word	0x40021000
 80069b8:	42420000 	.word	0x42420000
 80069bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c0:	4b92      	ldr	r3, [pc, #584]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e9      	bne.n	80069a0 <HAL_RCC_OscConfig+0x258>
=======
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <HAL_RCC_OscConfig+0x274>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c50:	f7fd fe86 	bl	8004960 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c56:	e00f      	b.n	8006c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c58:	f7fd fe82 	bl	8004960 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d908      	bls.n	8006c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e146      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
 8006c6a:	bf00      	nop
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	42420000 	.word	0x42420000
 8006c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c78:	4b92      	ldr	r3, [pc, #584]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e9      	bne.n	8006c58 <HAL_RCC_OscConfig+0x258>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80a6 	beq.w	8006b26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069da:	2300      	movs	r3, #0
 80069dc:	75fb      	strb	r3, [r7, #23]
=======
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80a6 	beq.w	8006dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]
>>>>>>> e9380fc... optimisation RAM=)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80069de:	4b8b      	ldr	r3, [pc, #556]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ea:	4b88      	ldr	r3, [pc, #544]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	4a87      	ldr	r2, [pc, #540]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 80069f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f4:	61d3      	str	r3, [r2, #28]
 80069f6:	4b85      	ldr	r3, [pc, #532]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fe:	60bb      	str	r3, [r7, #8]
 8006a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a02:	2301      	movs	r3, #1
 8006a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a06:	4b82      	ldr	r3, [pc, #520]	; (8006c10 <HAL_RCC_OscConfig+0x4c8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d118      	bne.n	8006a44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a12:	4b7f      	ldr	r3, [pc, #508]	; (8006c10 <HAL_RCC_OscConfig+0x4c8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a7e      	ldr	r2, [pc, #504]	; (8006c10 <HAL_RCC_OscConfig+0x4c8>)
 8006a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a1e:	f7fd fe43 	bl	80046a8 <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a26:	f7fd fe3f 	bl	80046a8 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b64      	cmp	r3, #100	; 0x64
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e103      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a38:	4b75      	ldr	r3, [pc, #468]	; (8006c10 <HAL_RCC_OscConfig+0x4c8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f0      	beq.n	8006a26 <HAL_RCC_OscConfig+0x2de>
=======
 8006c96:	4b8b      	ldr	r3, [pc, #556]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10d      	bne.n	8006cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ca2:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	4a87      	ldr	r2, [pc, #540]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cac:	61d3      	str	r3, [r2, #28]
 8006cae:	4b85      	ldr	r3, [pc, #532]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cbe:	4b82      	ldr	r3, [pc, #520]	; (8006ec8 <HAL_RCC_OscConfig+0x4c8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d118      	bne.n	8006cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cca:	4b7f      	ldr	r3, [pc, #508]	; (8006ec8 <HAL_RCC_OscConfig+0x4c8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a7e      	ldr	r2, [pc, #504]	; (8006ec8 <HAL_RCC_OscConfig+0x4c8>)
 8006cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cd6:	f7fd fe43 	bl	8004960 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cde:	f7fd fe3f 	bl	8004960 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b64      	cmp	r3, #100	; 0x64
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e103      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf0:	4b75      	ldr	r3, [pc, #468]	; (8006ec8 <HAL_RCC_OscConfig+0x4c8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0f0      	beq.n	8006cde <HAL_RCC_OscConfig+0x2de>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d106      	bne.n	8006a5a <HAL_RCC_OscConfig+0x312>
 8006a4c:	4b6f      	ldr	r3, [pc, #444]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	4a6e      	ldr	r2, [pc, #440]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	6213      	str	r3, [r2, #32]
 8006a58:	e02d      	b.n	8006ab6 <HAL_RCC_OscConfig+0x36e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10c      	bne.n	8006a7c <HAL_RCC_OscConfig+0x334>
 8006a62:	4b6a      	ldr	r3, [pc, #424]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	4a69      	ldr	r2, [pc, #420]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	6213      	str	r3, [r2, #32]
 8006a6e:	4b67      	ldr	r3, [pc, #412]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	4a66      	ldr	r2, [pc, #408]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a74:	f023 0304 	bic.w	r3, r3, #4
 8006a78:	6213      	str	r3, [r2, #32]
 8006a7a:	e01c      	b.n	8006ab6 <HAL_RCC_OscConfig+0x36e>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	d10c      	bne.n	8006a9e <HAL_RCC_OscConfig+0x356>
 8006a84:	4b61      	ldr	r3, [pc, #388]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	4a60      	ldr	r2, [pc, #384]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a8a:	f043 0304 	orr.w	r3, r3, #4
 8006a8e:	6213      	str	r3, [r2, #32]
 8006a90:	4b5e      	ldr	r3, [pc, #376]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	4a5d      	ldr	r2, [pc, #372]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006a96:	f043 0301 	orr.w	r3, r3, #1
 8006a9a:	6213      	str	r3, [r2, #32]
 8006a9c:	e00b      	b.n	8006ab6 <HAL_RCC_OscConfig+0x36e>
 8006a9e:	4b5b      	ldr	r3, [pc, #364]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	4a5a      	ldr	r2, [pc, #360]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	6213      	str	r3, [r2, #32]
 8006aaa:	4b58      	ldr	r3, [pc, #352]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	4a57      	ldr	r2, [pc, #348]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006ab0:	f023 0304 	bic.w	r3, r3, #4
 8006ab4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d015      	beq.n	8006aea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006abe:	f7fd fdf3 	bl	80046a8 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac4:	e00a      	b.n	8006adc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac6:	f7fd fdef 	bl	80046a8 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e0b1      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006adc:	4b4b      	ldr	r3, [pc, #300]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0ee      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x37e>
 8006ae8:	e014      	b.n	8006b14 <HAL_RCC_OscConfig+0x3cc>
=======
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d106      	bne.n	8006d12 <HAL_RCC_OscConfig+0x312>
 8006d04:	4b6f      	ldr	r3, [pc, #444]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	4a6e      	ldr	r2, [pc, #440]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	6213      	str	r3, [r2, #32]
 8006d10:	e02d      	b.n	8006d6e <HAL_RCC_OscConfig+0x36e>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCC_OscConfig+0x334>
 8006d1a:	4b6a      	ldr	r3, [pc, #424]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	4a69      	ldr	r2, [pc, #420]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	6213      	str	r3, [r2, #32]
 8006d26:	4b67      	ldr	r3, [pc, #412]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	4a66      	ldr	r2, [pc, #408]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d2c:	f023 0304 	bic.w	r3, r3, #4
 8006d30:	6213      	str	r3, [r2, #32]
 8006d32:	e01c      	b.n	8006d6e <HAL_RCC_OscConfig+0x36e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b05      	cmp	r3, #5
 8006d3a:	d10c      	bne.n	8006d56 <HAL_RCC_OscConfig+0x356>
 8006d3c:	4b61      	ldr	r3, [pc, #388]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	4a60      	ldr	r2, [pc, #384]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d42:	f043 0304 	orr.w	r3, r3, #4
 8006d46:	6213      	str	r3, [r2, #32]
 8006d48:	4b5e      	ldr	r3, [pc, #376]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	4a5d      	ldr	r2, [pc, #372]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	6213      	str	r3, [r2, #32]
 8006d54:	e00b      	b.n	8006d6e <HAL_RCC_OscConfig+0x36e>
 8006d56:	4b5b      	ldr	r3, [pc, #364]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	4a5a      	ldr	r2, [pc, #360]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d5c:	f023 0301 	bic.w	r3, r3, #1
 8006d60:	6213      	str	r3, [r2, #32]
 8006d62:	4b58      	ldr	r3, [pc, #352]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	4a57      	ldr	r2, [pc, #348]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d68:	f023 0304 	bic.w	r3, r3, #4
 8006d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d015      	beq.n	8006da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d76:	f7fd fdf3 	bl	8004960 <HAL_GetTick>
 8006d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d7c:	e00a      	b.n	8006d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7e:	f7fd fdef 	bl	8004960 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e0b1      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d94:	4b4b      	ldr	r3, [pc, #300]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0ee      	beq.n	8006d7e <HAL_RCC_OscConfig+0x37e>
 8006da0:	e014      	b.n	8006dcc <HAL_RCC_OscConfig+0x3cc>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8006aea:	f7fd fddd 	bl	80046a8 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af0:	e00a      	b.n	8006b08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af2:	f7fd fdd9 	bl	80046a8 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e09b      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b08:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1ee      	bne.n	8006af2 <HAL_RCC_OscConfig+0x3aa>
=======
 8006da2:	f7fd fddd 	bl	8004960 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da8:	e00a      	b.n	8006dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006daa:	f7fd fdd9 	bl	8004960 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e09b      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc0:	4b40      	ldr	r3, [pc, #256]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1ee      	bne.n	8006daa <HAL_RCC_OscConfig+0x3aa>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d105      	bne.n	8006b26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b1a:	4b3c      	ldr	r3, [pc, #240]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	4a3b      	ldr	r2, [pc, #236]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b24:	61d3      	str	r3, [r2, #28]
=======
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d105      	bne.n	8006dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dd2:	4b3c      	ldr	r3, [pc, #240]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	4a3b      	ldr	r2, [pc, #236]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ddc:	61d3      	str	r3, [r2, #28]
>>>>>>> e9380fc... optimisation RAM=)

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 8087 	beq.w	8006c3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b30:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 030c 	and.w	r3, r3, #12
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d061      	beq.n	8006c00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d146      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x48a>
=======
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8087 	beq.w	8006ef6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006de8:	4b36      	ldr	r3, [pc, #216]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f003 030c 	and.w	r3, r3, #12
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d061      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d146      	bne.n	8006e8a <HAL_RCC_OscConfig+0x48a>
>>>>>>> e9380fc... optimisation RAM=)
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8006b44:	4b33      	ldr	r3, [pc, #204]	; (8006c14 <HAL_RCC_OscConfig+0x4cc>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b4a:	f7fd fdad 	bl	80046a8 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b52:	f7fd fda9 	bl	80046a8 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e06d      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b64:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <HAL_RCC_OscConfig+0x40a>
=======
 8006dfc:	4b33      	ldr	r3, [pc, #204]	; (8006ecc <HAL_RCC_OscConfig+0x4cc>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e02:	f7fd fdad 	bl	8004960 <HAL_GetTick>
 8006e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e08:	e008      	b.n	8006e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e0a:	f7fd fda9 	bl	8004960 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e06d      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e1c:	4b29      	ldr	r3, [pc, #164]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f0      	bne.n	8006e0a <HAL_RCC_OscConfig+0x40a>
>>>>>>> e9380fc... optimisation RAM=)
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b78:	d108      	bne.n	8006b8c <HAL_RCC_OscConfig+0x444>
=======
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e30:	d108      	bne.n	8006e44 <HAL_RCC_OscConfig+0x444>
>>>>>>> e9380fc... optimisation RAM=)
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8006b7a:	4b24      	ldr	r3, [pc, #144]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	4921      	ldr	r1, [pc, #132]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	604b      	str	r3, [r1, #4]
=======
 8006e32:	4b24      	ldr	r3, [pc, #144]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4921      	ldr	r1, [pc, #132]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	604b      	str	r3, [r1, #4]
>>>>>>> e9380fc... optimisation RAM=)
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8006b8c:	4b1f      	ldr	r3, [pc, #124]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a19      	ldr	r1, [r3, #32]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	491b      	ldr	r1, [pc, #108]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ba4:	4b1b      	ldr	r3, [pc, #108]	; (8006c14 <HAL_RCC_OscConfig+0x4cc>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006baa:	f7fd fd7d 	bl	80046a8 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb2:	f7fd fd79 	bl	80046a8 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e03d      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bc4:	4b11      	ldr	r3, [pc, #68]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f0      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x46a>
 8006bd0:	e035      	b.n	8006c3e <HAL_RCC_OscConfig+0x4f6>
=======
 8006e44:	4b1f      	ldr	r3, [pc, #124]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a19      	ldr	r1, [r3, #32]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	430b      	orrs	r3, r1
 8006e56:	491b      	ldr	r1, [pc, #108]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <HAL_RCC_OscConfig+0x4cc>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e62:	f7fd fd7d 	bl	8004960 <HAL_GetTick>
 8006e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6a:	f7fd fd79 	bl	8004960 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e03d      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e7c:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f0      	beq.n	8006e6a <HAL_RCC_OscConfig+0x46a>
 8006e88:	e035      	b.n	8006ef6 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8006bd2:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <HAL_RCC_OscConfig+0x4cc>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd8:	f7fd fd66 	bl	80046a8 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be0:	f7fd fd62 	bl	80046a8 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e026      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bf2:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <HAL_RCC_OscConfig+0x4c4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f0      	bne.n	8006be0 <HAL_RCC_OscConfig+0x498>
 8006bfe:	e01e      	b.n	8006c3e <HAL_RCC_OscConfig+0x4f6>
=======
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <HAL_RCC_OscConfig+0x4cc>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7fd fd66 	bl	8004960 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e98:	f7fd fd62 	bl	8004960 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e026      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <HAL_RCC_OscConfig+0x4c4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f0      	bne.n	8006e98 <HAL_RCC_OscConfig+0x498>
 8006eb6:	e01e      	b.n	8006ef6 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d107      	bne.n	8006c18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e019      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
 8006c0c:	40021000 	.word	0x40021000
 8006c10:	40007000 	.word	0x40007000
 8006c14:	42420060 	.word	0x42420060
=======
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e019      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	40007000 	.word	0x40007000
 8006ecc:	42420060 	.word	0x42420060
>>>>>>> e9380fc... optimisation RAM=)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8006c18:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <HAL_RCC_OscConfig+0x500>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d106      	bne.n	8006c3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d001      	beq.n	8006c3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <HAL_RCC_OscConfig+0x4f8>
=======
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <HAL_RCC_OscConfig+0x500>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d106      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d001      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40021000 	.word	0x40021000

08006c4c <HAL_RCC_ClockConfig>:
=======
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40021000 	.word	0x40021000

08006f04 <HAL_RCC_ClockConfig>:
>>>>>>> e9380fc... optimisation RAM=)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
=======
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0d0      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1b6>
=======
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e0d0      	b.n	80070ba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> e9380fc... optimisation RAM=)
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8006c60:	4b6a      	ldr	r3, [pc, #424]	; (8006e0c <HAL_RCC_ClockConfig+0x1c0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d910      	bls.n	8006c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6e:	4b67      	ldr	r3, [pc, #412]	; (8006e0c <HAL_RCC_ClockConfig+0x1c0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 0207 	bic.w	r2, r3, #7
 8006c76:	4965      	ldr	r1, [pc, #404]	; (8006e0c <HAL_RCC_ClockConfig+0x1c0>)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]
=======
 8006f18:	4b6a      	ldr	r3, [pc, #424]	; (80070c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d910      	bls.n	8006f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f26:	4b67      	ldr	r3, [pc, #412]	; (80070c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f023 0207 	bic.w	r2, r3, #7
 8006f2e:	4965      	ldr	r1, [pc, #404]	; (80070c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	600b      	str	r3, [r1, #0]
>>>>>>> e9380fc... optimisation RAM=)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8006c7e:	4b63      	ldr	r3, [pc, #396]	; (8006e0c <HAL_RCC_ClockConfig+0x1c0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0b8      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1b6>
=======
 8006f36:	4b63      	ldr	r3, [pc, #396]	; (80070c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d001      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e0b8      	b.n	80070ba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> e9380fc... optimisation RAM=)
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d020      	beq.n	8006cde <HAL_RCC_ClockConfig+0x92>
=======
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d020      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x92>
>>>>>>> e9380fc... optimisation RAM=)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ca8:	4b59      	ldr	r3, [pc, #356]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4a58      	ldr	r2, [pc, #352]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006cb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc0:	4b53      	ldr	r3, [pc, #332]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	4a52      	ldr	r2, [pc, #328]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006cca:	6053      	str	r3, [r2, #4]
=======
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f60:	4b59      	ldr	r3, [pc, #356]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	4a58      	ldr	r2, [pc, #352]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f78:	4b53      	ldr	r3, [pc, #332]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	4a52      	ldr	r2, [pc, #328]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006f82:	6053      	str	r3, [r2, #4]
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8006ccc:	4b50      	ldr	r3, [pc, #320]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	494d      	ldr	r1, [pc, #308]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	604b      	str	r3, [r1, #4]
=======
 8006f84:	4b50      	ldr	r3, [pc, #320]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	494d      	ldr	r1, [pc, #308]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	604b      	str	r3, [r1, #4]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d040      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x120>
=======
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d040      	beq.n	8007024 <HAL_RCC_ClockConfig+0x120>
>>>>>>> e9380fc... optimisation RAM=)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d107      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf2:	4b47      	ldr	r3, [pc, #284]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d115      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e07f      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1b6>
=======
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d107      	bne.n	8006fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006faa:	4b47      	ldr	r3, [pc, #284]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d115      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e07f      	b.n	80070ba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d107      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0a:	4b41      	ldr	r3, [pc, #260]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e073      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1b6>
=======
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d107      	bne.n	8006fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc2:	4b41      	ldr	r3, [pc, #260]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e073      	b.n	80070ba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> e9380fc... optimisation RAM=)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8006d1a:	4b3d      	ldr	r3, [pc, #244]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e06b      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d2a:	4b39      	ldr	r3, [pc, #228]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f023 0203 	bic.w	r2, r3, #3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	4936      	ldr	r1, [pc, #216]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d3c:	f7fd fcb4 	bl	80046a8 <HAL_GetTick>
 8006d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d42:	e00a      	b.n	8006d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d44:	f7fd fcb0 	bl	80046a8 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e053      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d5a:	4b2d      	ldr	r3, [pc, #180]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f003 020c 	and.w	r2, r3, #12
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d1eb      	bne.n	8006d44 <HAL_RCC_ClockConfig+0xf8>
=======
 8006fd2:	4b3d      	ldr	r3, [pc, #244]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e06b      	b.n	80070ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fe2:	4b39      	ldr	r3, [pc, #228]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f023 0203 	bic.w	r2, r3, #3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	4936      	ldr	r1, [pc, #216]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ff4:	f7fd fcb4 	bl	8004960 <HAL_GetTick>
 8006ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffa:	e00a      	b.n	8007012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ffc:	f7fd fcb0 	bl	8004960 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	f241 3288 	movw	r2, #5000	; 0x1388
 800700a:	4293      	cmp	r3, r2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e053      	b.n	80070ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007012:	4b2d      	ldr	r3, [pc, #180]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f003 020c 	and.w	r2, r3, #12
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	429a      	cmp	r2, r3
 8007022:	d1eb      	bne.n	8006ffc <HAL_RCC_ClockConfig+0xf8>
>>>>>>> e9380fc... optimisation RAM=)
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8006d6c:	4b27      	ldr	r3, [pc, #156]	; (8006e0c <HAL_RCC_ClockConfig+0x1c0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d210      	bcs.n	8006d9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7a:	4b24      	ldr	r3, [pc, #144]	; (8006e0c <HAL_RCC_ClockConfig+0x1c0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f023 0207 	bic.w	r2, r3, #7
 8006d82:	4922      	ldr	r1, [pc, #136]	; (8006e0c <HAL_RCC_ClockConfig+0x1c0>)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	600b      	str	r3, [r1, #0]
=======
 8007024:	4b27      	ldr	r3, [pc, #156]	; (80070c4 <HAL_RCC_ClockConfig+0x1c0>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d210      	bcs.n	8007054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <HAL_RCC_ClockConfig+0x1c0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f023 0207 	bic.w	r2, r3, #7
 800703a:	4922      	ldr	r1, [pc, #136]	; (80070c4 <HAL_RCC_ClockConfig+0x1c0>)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	4313      	orrs	r3, r2
 8007040:	600b      	str	r3, [r1, #0]
>>>>>>> e9380fc... optimisation RAM=)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8006d8a:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <HAL_RCC_ClockConfig+0x1c0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d001      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e032      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1b6>
=======
 8007042:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <HAL_RCC_ClockConfig+0x1c0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d001      	beq.n	8007054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e032      	b.n	80070ba <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> e9380fc... optimisation RAM=)
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d008      	beq.n	8006dba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4916      	ldr	r1, [pc, #88]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	604b      	str	r3, [r1, #4]
=======
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d008      	beq.n	8007072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007060:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4916      	ldr	r1, [pc, #88]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 800706e:	4313      	orrs	r3, r2
 8007070:	604b      	str	r3, [r1, #4]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dc6:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	490e      	ldr	r1, [pc, #56]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	604b      	str	r3, [r1, #4]
=======
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800707e:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	490e      	ldr	r1, [pc, #56]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 800708e:	4313      	orrs	r3, r2
 8007090:	604b      	str	r3, [r1, #4]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8006dda:	f000 f821 	bl	8006e20 <HAL_RCC_GetSysClockFreq>
 8006dde:	4602      	mov	r2, r0
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_RCC_ClockConfig+0x1c4>)
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	091b      	lsrs	r3, r3, #4
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	490a      	ldr	r1, [pc, #40]	; (8006e14 <HAL_RCC_ClockConfig+0x1c8>)
 8006dec:	5ccb      	ldrb	r3, [r1, r3]
 8006dee:	fa22 f303 	lsr.w	r3, r2, r3
 8006df2:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <HAL_RCC_ClockConfig+0x1cc>)
 8006df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006df6:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <HAL_RCC_ClockConfig+0x1d0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fd fb0a 	bl	8004414 <HAL_InitTick>

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40022000 	.word	0x40022000
 8006e10:	40021000 	.word	0x40021000
 8006e14:	0800d258 	.word	0x0800d258
 8006e18:	20000010 	.word	0x20000010
 8006e1c:	20000014 	.word	0x20000014

08006e20 <HAL_RCC_GetSysClockFreq>:
=======
 8007092:	f000 f821 	bl	80070d8 <HAL_RCC_GetSysClockFreq>
 8007096:	4602      	mov	r2, r0
 8007098:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	490a      	ldr	r1, [pc, #40]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 80070a4:	5ccb      	ldrb	r3, [r1, r3]
 80070a6:	fa22 f303 	lsr.w	r3, r2, r3
 80070aa:	4a09      	ldr	r2, [pc, #36]	; (80070d0 <HAL_RCC_ClockConfig+0x1cc>)
 80070ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070ae:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <HAL_RCC_ClockConfig+0x1d0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fd fb0a 	bl	80046cc <HAL_InitTick>

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	40022000 	.word	0x40022000
 80070c8:	40021000 	.word	0x40021000
 80070cc:	0800dda8 	.word	0x0800dda8
 80070d0:	20000010 	.word	0x20000010
 80070d4:	20000014 	.word	0x20000014

080070d8 <HAL_RCC_GetSysClockFreq>:
>>>>>>> e9380fc... optimisation RAM=)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8006e20:	b490      	push	{r4, r7}
 8006e22:	b08a      	sub	sp, #40	; 0x28
 8006e24:	af00      	add	r7, sp, #0
=======
 80070d8:	b490      	push	{r4, r7}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8006e26:	4b29      	ldr	r3, [pc, #164]	; (8006ecc <HAL_RCC_GetSysClockFreq+0xac>)
 8006e28:	1d3c      	adds	r4, r7, #4
 8006e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 80070de:	4b29      	ldr	r3, [pc, #164]	; (8007184 <HAL_RCC_GetSysClockFreq+0xac>)
 80070e0:	1d3c      	adds	r4, r7, #4
 80070e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> e9380fc... optimisation RAM=)
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8006e30:	f240 2301 	movw	r3, #513	; 0x201
 8006e34:	803b      	strh	r3, [r7, #0]
=======
 80070e8:	f240 2301 	movw	r3, #513	; 0x201
 80070ec:	803b      	strh	r3, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	623b      	str	r3, [r7, #32]
=======
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	2300      	movs	r3, #0
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	2300      	movs	r3, #0
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	623b      	str	r3, [r7, #32]
>>>>>>> e9380fc... optimisation RAM=)
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8006e4a:	4b21      	ldr	r3, [pc, #132]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f003 030c 	and.w	r3, r3, #12
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d002      	beq.n	8006e60 <HAL_RCC_GetSysClockFreq+0x40>
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d003      	beq.n	8006e66 <HAL_RCC_GetSysClockFreq+0x46>
 8006e5e:	e02b      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x98>
=======
 8007102:	4b21      	ldr	r3, [pc, #132]	; (8007188 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f003 030c 	and.w	r3, r3, #12
 800710e:	2b04      	cmp	r3, #4
 8007110:	d002      	beq.n	8007118 <HAL_RCC_GetSysClockFreq+0x40>
 8007112:	2b08      	cmp	r3, #8
 8007114:	d003      	beq.n	800711e <HAL_RCC_GetSysClockFreq+0x46>
 8007116:	e02b      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x98>
>>>>>>> e9380fc... optimisation RAM=)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8006e60:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e62:	623b      	str	r3, [r7, #32]
      break;
 8006e64:	e02b      	b.n	8006ebe <HAL_RCC_GetSysClockFreq+0x9e>
=======
 8007118:	4b1c      	ldr	r3, [pc, #112]	; (800718c <HAL_RCC_GetSysClockFreq+0xb4>)
 800711a:	623b      	str	r3, [r7, #32]
      break;
 800711c:	e02b      	b.n	8007176 <HAL_RCC_GetSysClockFreq+0x9e>
>>>>>>> e9380fc... optimisation RAM=)
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	0c9b      	lsrs	r3, r3, #18
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	3328      	adds	r3, #40	; 0x28
 8006e70:	443b      	add	r3, r7
 8006e72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006e76:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d012      	beq.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x88>
=======
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	0c9b      	lsrs	r3, r3, #18
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	3328      	adds	r3, #40	; 0x28
 8007128:	443b      	add	r3, r7
 800712a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800712e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d012      	beq.n	8007160 <HAL_RCC_GetSysClockFreq+0x88>
>>>>>>> e9380fc... optimisation RAM=)
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8006e82:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	0c5b      	lsrs	r3, r3, #17
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	3328      	adds	r3, #40	; 0x28
 8006e8e:	443b      	add	r3, r7
 8006e90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006e94:	61bb      	str	r3, [r7, #24]
=======
 800713a:	4b13      	ldr	r3, [pc, #76]	; (8007188 <HAL_RCC_GetSysClockFreq+0xb0>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	0c5b      	lsrs	r3, r3, #17
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	3328      	adds	r3, #40	; 0x28
 8007146:	443b      	add	r3, r7
 8007148:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800714c:	61bb      	str	r3, [r7, #24]
>>>>>>> e9380fc... optimisation RAM=)
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	4a0e      	ldr	r2, [pc, #56]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e9a:	fb03 f202 	mul.w	r2, r3, r2
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea6:	e004      	b.n	8006eb2 <HAL_RCC_GetSysClockFreq+0x92>
=======
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4a0e      	ldr	r2, [pc, #56]	; (800718c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007152:	fb03 f202 	mul.w	r2, r3, r2
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	fbb2 f3f3 	udiv	r3, r2, r3
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
 800715e:	e004      	b.n	800716a <HAL_RCC_GetSysClockFreq+0x92>
>>>>>>> e9380fc... optimisation RAM=)
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eac:	fb02 f303 	mul.w	r3, r2, r3
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	623b      	str	r3, [r7, #32]
      break;
 8006eb6:	e002      	b.n	8006ebe <HAL_RCC_GetSysClockFreq+0x9e>
=======
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	4a0b      	ldr	r2, [pc, #44]	; (8007190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007164:	fb02 f303 	mul.w	r3, r2, r3
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	623b      	str	r3, [r7, #32]
      break;
 800716e:	e002      	b.n	8007176 <HAL_RCC_GetSysClockFreq+0x9e>
>>>>>>> e9380fc... optimisation RAM=)
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006eba:	623b      	str	r3, [r7, #32]
      break;
 8006ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3728      	adds	r7, #40	; 0x28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bc90      	pop	{r4, r7}
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	0800ce50 	.word	0x0800ce50
 8006ed0:	40021000 	.word	0x40021000
 8006ed4:	007a1200 	.word	0x007a1200
 8006ed8:	003d0900 	.word	0x003d0900

08006edc <HAL_RCC_GetHCLKFreq>:
=======
 8007170:	4b06      	ldr	r3, [pc, #24]	; (800718c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007172:	623b      	str	r3, [r7, #32]
      break;
 8007174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007176:	6a3b      	ldr	r3, [r7, #32]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3728      	adds	r7, #40	; 0x28
 800717c:	46bd      	mov	sp, r7
 800717e:	bc90      	pop	{r4, r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	0800d94c 	.word	0x0800d94c
 8007188:	40021000 	.word	0x40021000
 800718c:	007a1200 	.word	0x007a1200
 8007190:	003d0900 	.word	0x003d0900

08007194 <HAL_RCC_GetHCLKFreq>:
>>>>>>> e9380fc... optimisation RAM=)
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <HAL_RCC_GetHCLKFreq+0x10>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr
 8006eec:	20000010 	.word	0x20000010

08006ef0 <HAL_RCC_GetPCLK1Freq>:
=======
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007198:	4b02      	ldr	r3, [pc, #8]	; (80071a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800719a:	681b      	ldr	r3, [r3, #0]
}
 800719c:	4618      	mov	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr
 80071a4:	20000010 	.word	0x20000010

080071a8 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> e9380fc... optimisation RAM=)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ef4:	f7ff fff2 	bl	8006edc <HAL_RCC_GetHCLKFreq>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	0a1b      	lsrs	r3, r3, #8
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	4903      	ldr	r1, [pc, #12]	; (8006f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f06:	5ccb      	ldrb	r3, [r1, r3]
 8006f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40021000 	.word	0x40021000
 8006f14:	0800d268 	.word	0x0800d268

08006f18 <HAL_RCC_GetPCLK2Freq>:
=======
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071ac:	f7ff fff2 	bl	8007194 <HAL_RCC_GetHCLKFreq>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	0a1b      	lsrs	r3, r3, #8
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	4903      	ldr	r1, [pc, #12]	; (80071cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80071be:	5ccb      	ldrb	r3, [r1, r3]
 80071c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40021000 	.word	0x40021000
 80071cc:	0800ddb8 	.word	0x0800ddb8

080071d0 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> e9380fc... optimisation RAM=)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f1c:	f7ff ffde 	bl	8006edc <HAL_RCC_GetHCLKFreq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	0adb      	lsrs	r3, r3, #11
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	4903      	ldr	r1, [pc, #12]	; (8006f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f2e:	5ccb      	ldrb	r3, [r1, r3]
 8006f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	0800d268 	.word	0x0800d268

08006f40 <HAL_RCC_GetClockConfig>:
=======
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071d4:	f7ff ffde 	bl	8007194 <HAL_RCC_GetHCLKFreq>
 80071d8:	4602      	mov	r2, r0
 80071da:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	0adb      	lsrs	r3, r3, #11
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	4903      	ldr	r1, [pc, #12]	; (80071f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071e6:	5ccb      	ldrb	r3, [r1, r3]
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40021000 	.word	0x40021000
 80071f4:	0800ddb8 	.word	0x0800ddb8

080071f8 <HAL_RCC_GetClockConfig>:
>>>>>>> e9380fc... optimisation RAM=)
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
=======
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< HEAD
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	220f      	movs	r2, #15
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f50:	4b11      	ldr	r3, [pc, #68]	; (8006f98 <HAL_RCC_GetClockConfig+0x58>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 0203 	and.w	r2, r3, #3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <HAL_RCC_GetClockConfig+0x58>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <HAL_RCC_GetClockConfig+0x58>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006f74:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <HAL_RCC_GetClockConfig+0x58>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	08db      	lsrs	r3, r3, #3
 8006f7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	611a      	str	r2, [r3, #16]
=======
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	220f      	movs	r2, #15
 8007206:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007208:	4b11      	ldr	r3, [pc, #68]	; (8007250 <HAL_RCC_GetClockConfig+0x58>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f003 0203 	and.w	r2, r3, #3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007214:	4b0e      	ldr	r3, [pc, #56]	; (8007250 <HAL_RCC_GetClockConfig+0x58>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <HAL_RCC_GetClockConfig+0x58>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800722c:	4b08      	ldr	r3, [pc, #32]	; (8007250 <HAL_RCC_GetClockConfig+0x58>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	08db      	lsrs	r3, r3, #3
 8007232:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
<<<<<<< HEAD
 8006f82:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <HAL_RCC_GetClockConfig+0x5c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0207 	and.w	r2, r3, #7
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	601a      	str	r2, [r3, #0]
=======
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <HAL_RCC_GetClockConfig+0x5c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0207 	and.w	r2, r3, #7
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
<<<<<<< HEAD
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40022000 	.word	0x40022000

08006fa0 <RCC_Delay>:
=======
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr
 8007250:	40021000 	.word	0x40021000
 8007254:	40022000 	.word	0x40022000

08007258 <RCC_Delay>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <RCC_Delay+0x34>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a0a      	ldr	r2, [pc, #40]	; (8006fd8 <RCC_Delay+0x38>)
 8006fae:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb2:	0a5b      	lsrs	r3, r3, #9
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006fbc:	bf00      	nop
  }
  while (Delay --);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1e5a      	subs	r2, r3, #1
 8006fc2:	60fa      	str	r2, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1f9      	bne.n	8006fbc <RCC_Delay+0x1c>
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bc80      	pop	{r7}
 8006fd2:	4770      	bx	lr
 8006fd4:	20000010 	.word	0x20000010
 8006fd8:	10624dd3 	.word	0x10624dd3

08006fdc <HAL_SPI_Init>:
=======
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007260:	4b0a      	ldr	r3, [pc, #40]	; (800728c <RCC_Delay+0x34>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <RCC_Delay+0x38>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	0a5b      	lsrs	r3, r3, #9
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007274:	bf00      	nop
  }
  while (Delay --);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	1e5a      	subs	r2, r3, #1
 800727a:	60fa      	str	r2, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1f9      	bne.n	8007274 <RCC_Delay+0x1c>
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr
 800728c:	20000010 	.word	0x20000010
 8007290:	10624dd3 	.word	0x10624dd3

08007294 <HAL_SPI_Init>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e076      	b.n	80070dc <HAL_SPI_Init+0x100>
=======
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e076      	b.n	8007394 <HAL_SPI_Init+0x100>
>>>>>>> e9380fc... optimisation RAM=)
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d108      	bne.n	8007008 <HAL_SPI_Init+0x2c>
=======
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d108      	bne.n	80072c0 <HAL_SPI_Init+0x2c>
>>>>>>> e9380fc... optimisation RAM=)
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ffe:	d009      	beq.n	8007014 <HAL_SPI_Init+0x38>
=======
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072b6:	d009      	beq.n	80072cc <HAL_SPI_Init+0x38>
>>>>>>> e9380fc... optimisation RAM=)
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	61da      	str	r2, [r3, #28]
 8007006:	e005      	b.n	8007014 <HAL_SPI_Init+0x38>
=======
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	61da      	str	r2, [r3, #28]
 80072be:	e005      	b.n	80072cc <HAL_SPI_Init+0x38>
>>>>>>> e9380fc... optimisation RAM=)
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	615a      	str	r2, [r3, #20]
=======
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	615a      	str	r2, [r3, #20]
>>>>>>> e9380fc... optimisation RAM=)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d106      	bne.n	8007034 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> e9380fc... optimisation RAM=)

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fd f926 	bl	8004280 <HAL_SPI_MspInit>
=======
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fd f926 	bl	8004538 <HAL_SPI_MspInit>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800704a:	601a      	str	r2, [r3, #0]
=======
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007302:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007066:	431a      	orrs	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	431a      	orrs	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007098:	ea42 0103 	orr.w	r1, r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]
=======
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007350:	ea42 0103 	orr.w	r1, r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
<<<<<<< HEAD
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	0c1a      	lsrs	r2, r3, #16
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f002 0204 	and.w	r2, r2, #4
 80070ba:	605a      	str	r2, [r3, #4]
=======
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	0c1a      	lsrs	r2, r3, #16
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f002 0204 	and.w	r2, r2, #4
 8007372:	605a      	str	r2, [r3, #4]
>>>>>>> e9380fc... optimisation RAM=)
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69da      	ldr	r2, [r3, #28]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_SPI_Transmit>:
=======
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69da      	ldr	r2, [r3, #28]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007382:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_SPI_Transmit>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	4613      	mov	r3, r2
 80070f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	77fb      	strb	r3, [r7, #31]
=======
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	4613      	mov	r3, r2
 80073aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	77fb      	strb	r3, [r7, #31]
>>>>>>> e9380fc... optimisation RAM=)

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <HAL_SPI_Transmit+0x22>
 8007102:	2302      	movs	r3, #2
 8007104:	e126      	b.n	8007354 <HAL_SPI_Transmit+0x270>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800710e:	f7fd facb 	bl	80046a8 <HAL_GetTick>
 8007112:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b01      	cmp	r3, #1
 8007122:	d002      	beq.n	800712a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007124:	2302      	movs	r3, #2
 8007126:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007128:	e10b      	b.n	8007342 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <HAL_SPI_Transmit+0x52>
 8007130:	88fb      	ldrh	r3, [r7, #6]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d102      	bne.n	800713c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800713a:	e102      	b.n	8007342 <HAL_SPI_Transmit+0x25e>
=======
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <HAL_SPI_Transmit+0x22>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e126      	b.n	800760c <HAL_SPI_Transmit+0x270>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073c6:	f7fd facb 	bl	8004960 <HAL_GetTick>
 80073ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d002      	beq.n	80073e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
 80073de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073e0:	e10b      	b.n	80075fa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <HAL_SPI_Transmit+0x52>
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073f2:	e102      	b.n	80075fa <HAL_SPI_Transmit+0x25e>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2203      	movs	r2, #3
 8007140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	88fa      	ldrh	r2, [r7, #6]
 800715a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007182:	d10f      	bne.n	80071a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007192:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071a2:	601a      	str	r2, [r3, #0]
=======
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2203      	movs	r2, #3
 80073f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	88fa      	ldrh	r2, [r7, #6]
 8007412:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800743a:	d10f      	bne.n	800745c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800745a:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d007      	beq.n	80071c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c0:	601a      	str	r2, [r3, #0]
=======
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d007      	beq.n	800747a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007478:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ca:	d14b      	bne.n	8007264 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <HAL_SPI_Transmit+0xf6>
 80071d4:	8afb      	ldrh	r3, [r7, #22]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d13e      	bne.n	8007258 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	881a      	ldrh	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	1c9a      	adds	r2, r3, #2
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071fe:	e02b      	b.n	8007258 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b02      	cmp	r3, #2
 800720c:	d112      	bne.n	8007234 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	881a      	ldrh	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	1c9a      	adds	r2, r3, #2
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	86da      	strh	r2, [r3, #54]	; 0x36
 8007232:	e011      	b.n	8007258 <HAL_SPI_Transmit+0x174>
=======
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007482:	d14b      	bne.n	800751c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_SPI_Transmit+0xf6>
 800748c:	8afb      	ldrh	r3, [r7, #22]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d13e      	bne.n	8007510 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	881a      	ldrh	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	1c9a      	adds	r2, r3, #2
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074b6:	e02b      	b.n	8007510 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d112      	bne.n	80074ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	881a      	ldrh	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	1c9a      	adds	r2, r3, #2
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80074ea:	e011      	b.n	8007510 <HAL_SPI_Transmit+0x174>
>>>>>>> e9380fc... optimisation RAM=)
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8007234:	f7fd fa38 	bl	80046a8 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d803      	bhi.n	800724c <HAL_SPI_Transmit+0x168>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800724a:	d102      	bne.n	8007252 <HAL_SPI_Transmit+0x16e>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007256:	e074      	b.n	8007342 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1ce      	bne.n	8007200 <HAL_SPI_Transmit+0x11c>
 8007262:	e04c      	b.n	80072fe <HAL_SPI_Transmit+0x21a>
=======
 80074ec:	f7fd fa38 	bl	8004960 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d803      	bhi.n	8007504 <HAL_SPI_Transmit+0x168>
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007502:	d102      	bne.n	800750a <HAL_SPI_Transmit+0x16e>
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d102      	bne.n	8007510 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800750e:	e074      	b.n	80075fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1ce      	bne.n	80074b8 <HAL_SPI_Transmit+0x11c>
 800751a:	e04c      	b.n	80075b6 <HAL_SPI_Transmit+0x21a>
>>>>>>> e9380fc... optimisation RAM=)
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <HAL_SPI_Transmit+0x18e>
 800726c:	8afb      	ldrh	r3, [r7, #22]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d140      	bne.n	80072f4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	330c      	adds	r3, #12
 800727c:	7812      	ldrb	r2, [r2, #0]
 800727e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007298:	e02c      	b.n	80072f4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d113      	bne.n	80072d0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	7812      	ldrb	r2, [r2, #0]
 80072b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80072ce:	e011      	b.n	80072f4 <HAL_SPI_Transmit+0x210>
=======
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_SPI_Transmit+0x18e>
 8007524:	8afb      	ldrh	r3, [r7, #22]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d140      	bne.n	80075ac <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	330c      	adds	r3, #12
 8007534:	7812      	ldrb	r2, [r2, #0]
 8007536:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007550:	e02c      	b.n	80075ac <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b02      	cmp	r3, #2
 800755e:	d113      	bne.n	8007588 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	330c      	adds	r3, #12
 800756a:	7812      	ldrb	r2, [r2, #0]
 800756c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	86da      	strh	r2, [r3, #54]	; 0x36
 8007586:	e011      	b.n	80075ac <HAL_SPI_Transmit+0x210>
>>>>>>> e9380fc... optimisation RAM=)
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 80072d0:	f7fd f9ea 	bl	80046a8 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d803      	bhi.n	80072e8 <HAL_SPI_Transmit+0x204>
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e6:	d102      	bne.n	80072ee <HAL_SPI_Transmit+0x20a>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d102      	bne.n	80072f4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072f2:	e026      	b.n	8007342 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1cd      	bne.n	800729a <HAL_SPI_Transmit+0x1b6>
=======
 8007588:	f7fd f9ea 	bl	8004960 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d803      	bhi.n	80075a0 <HAL_SPI_Transmit+0x204>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800759e:	d102      	bne.n	80075a6 <HAL_SPI_Transmit+0x20a>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d102      	bne.n	80075ac <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075aa:	e026      	b.n	80075fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1cd      	bne.n	8007552 <HAL_SPI_Transmit+0x1b6>
>>>>>>> e9380fc... optimisation RAM=)
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f9b6 	bl	8007674 <SPI_EndRxTxTransaction>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2220      	movs	r2, #32
 8007312:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f9b6 	bl	800792c <SPI_EndRxTxTransaction>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800731c:	2300      	movs	r3, #0
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	77fb      	strb	r3, [r7, #31]
 800733e:	e000      	b.n	8007342 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007340:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007352:	7ffb      	ldrb	r3, [r7, #31]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3720      	adds	r7, #32
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_SPI_IRQHandler>:
=======
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075d4:	2300      	movs	r3, #0
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	613b      	str	r3, [r7, #16]
 80075e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	77fb      	strb	r3, [r7, #31]
 80075f6:	e000      	b.n	80075fa <HAL_SPI_Transmit+0x25e>
  }

error:
 80075f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800760a:	7ffb      	ldrb	r3, [r7, #31]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3720      	adds	r7, #32
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_SPI_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	099b      	lsrs	r3, r3, #6
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10f      	bne.n	80073a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	099b      	lsrs	r3, r3, #6
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d004      	beq.n	80073a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
    return;
 800739e:	e0be      	b.n	800751e <HAL_SPI_IRQHandler+0x1c2>
=======
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	099b      	lsrs	r3, r3, #6
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10f      	bne.n	8007658 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	099b      	lsrs	r3, r3, #6
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d004      	beq.n	8007658 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
    return;
 8007656:	e0be      	b.n	80077d6 <HAL_SPI_IRQHandler+0x1c2>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
<<<<<<< HEAD
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_SPI_IRQHandler+0x66>
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	09db      	lsrs	r3, r3, #7
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d004      	beq.n	80073c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	4798      	blx	r3
    return;
 80073c0:	e0ad      	b.n	800751e <HAL_SPI_IRQHandler+0x1c2>
=======
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	085b      	lsrs	r3, r3, #1
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <HAL_SPI_IRQHandler+0x66>
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	09db      	lsrs	r3, r3, #7
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d004      	beq.n	800767a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	4798      	blx	r3
    return;
 8007678:	e0ad      	b.n	80077d6 <HAL_SPI_IRQHandler+0x1c2>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
<<<<<<< HEAD
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_SPI_IRQHandler+0x80>
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	099b      	lsrs	r3, r3, #6
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80a1 	beq.w	800751e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 809a 	beq.w	800751e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	099b      	lsrs	r3, r3, #6
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d023      	beq.n	800743e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d011      	beq.n	8007426 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	f043 0204 	orr.w	r2, r3, #4
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800740e:	2300      	movs	r3, #0
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	e00b      	b.n	800743e <HAL_SPI_IRQHandler+0xe2>
=======
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <HAL_SPI_IRQHandler+0x80>
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	099b      	lsrs	r3, r3, #6
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80a1 	beq.w	80077d6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 809a 	beq.w	80077d6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	099b      	lsrs	r3, r3, #6
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d023      	beq.n	80076f6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d011      	beq.n	80076de <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	f043 0204 	orr.w	r2, r3, #4
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	e00b      	b.n	80076f6 <HAL_SPI_IRQHandler+0xe2>
>>>>>>> e9380fc... optimisation RAM=)
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
<<<<<<< HEAD
 8007426:	2300      	movs	r3, #0
 8007428:	613b      	str	r3, [r7, #16]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	693b      	ldr	r3, [r7, #16]
        return;
 800743c:	e06f      	b.n	800751e <HAL_SPI_IRQHandler+0x1c2>
=======
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	613b      	str	r3, [r7, #16]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	693b      	ldr	r3, [r7, #16]
        return;
 80076f4:	e06f      	b.n	80077d6 <HAL_SPI_IRQHandler+0x1c2>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
<<<<<<< HEAD
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d014      	beq.n	8007474 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	f043 0201 	orr.w	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
=======
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d014      	beq.n	800772c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	f043 0201 	orr.w	r2, r3, #1
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007478:	2b00      	cmp	r3, #0
 800747a:	d04f      	beq.n	800751c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800748a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d104      	bne.n	80074a8 <HAL_SPI_IRQHandler+0x14c>
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d034      	beq.n	8007512 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0203 	bic.w	r2, r2, #3
 80074b6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d011      	beq.n	80074e4 <HAL_SPI_IRQHandler+0x188>
=======
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007730:	2b00      	cmp	r3, #0
 8007732:	d04f      	beq.n	80077d4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007742:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <HAL_SPI_IRQHandler+0x14c>
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d034      	beq.n	80077ca <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0203 	bic.w	r2, r2, #3
 800776e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d011      	beq.n	800779c <HAL_SPI_IRQHandler+0x188>
>>>>>>> e9380fc... optimisation RAM=)
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c4:	4a17      	ldr	r2, [pc, #92]	; (8007524 <HAL_SPI_IRQHandler+0x1c8>)
 80074c6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fd fa33 	bl	8004938 <HAL_DMA_Abort_IT>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777c:	4a17      	ldr	r2, [pc, #92]	; (80077dc <HAL_SPI_IRQHandler+0x1c8>)
 800777e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007784:	4618      	mov	r0, r3
 8007786:	f7fd fa33 	bl	8004bf0 <HAL_DMA_Abort_IT>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> e9380fc... optimisation RAM=)
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
<<<<<<< HEAD
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d016      	beq.n	800751a <HAL_SPI_IRQHandler+0x1be>
=======
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d016      	beq.n	80077d2 <HAL_SPI_IRQHandler+0x1be>
>>>>>>> e9380fc... optimisation RAM=)
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f0:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <HAL_SPI_IRQHandler+0x1c8>)
 80074f2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fd fa1d 	bl	8004938 <HAL_DMA_Abort_IT>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007510:	e003      	b.n	800751a <HAL_SPI_IRQHandler+0x1be>
=======
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a8:	4a0c      	ldr	r2, [pc, #48]	; (80077dc <HAL_SPI_IRQHandler+0x1c8>)
 80077aa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fd fa1d 	bl	8004bf0 <HAL_DMA_Abort_IT>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80077c8:	e003      	b.n	80077d2 <HAL_SPI_IRQHandler+0x1be>
>>>>>>> e9380fc... optimisation RAM=)
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f808 	bl	8007528 <HAL_SPI_ErrorCallback>
=======
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f808 	bl	80077e0 <HAL_SPI_ErrorCallback>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
<<<<<<< HEAD
 8007518:	e000      	b.n	800751c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800751a:	bf00      	nop
    return;
 800751c:	bf00      	nop
  }
}
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	0800753b 	.word	0x0800753b

08007528 <HAL_SPI_ErrorCallback>:
=======
 80077d0:	e000      	b.n	80077d4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80077d2:	bf00      	nop
    return;
 80077d4:	bf00      	nop
  }
}
 80077d6:	3720      	adds	r7, #32
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	080077f3 	.word	0x080077f3

080077e0 <HAL_SPI_ErrorCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
=======
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
<<<<<<< HEAD
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr

0800753a <SPI_DMAAbortOnError>:
=======
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr

080077f2 <SPI_DMAAbortOnError>:
>>>>>>> e9380fc... optimisation RAM=)
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	86da      	strh	r2, [r3, #54]	; 0x36
=======
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	86da      	strh	r2, [r3, #54]	; 0x36
>>>>>>> e9380fc... optimisation RAM=)

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f7ff ffe7 	bl	8007528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <SPI_WaitFlagStateUntilTimeout>:
=======
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7ff ffe7 	bl	80077e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007812:	bf00      	nop
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	4613      	mov	r3, r2
 8007572:	71fb      	strb	r3, [r7, #7]
=======
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	71fb      	strb	r3, [r7, #7]
>>>>>>> e9380fc... optimisation RAM=)
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 8007574:	f7fd f898 	bl	80046a8 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4413      	add	r3, r2
 8007582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007584:	f7fd f890 	bl	80046a8 <HAL_GetTick>
 8007588:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800758a:	4b39      	ldr	r3, [pc, #228]	; (8007670 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	015b      	lsls	r3, r3, #5
 8007590:	0d1b      	lsrs	r3, r3, #20
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800759a:	e054      	b.n	8007646 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a2:	d050      	beq.n	8007646 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075a4:	f7fd f880 	bl	80046a8 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d902      	bls.n	80075ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d13d      	bne.n	8007636 <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 800782c:	f7fd f898 	bl	8004960 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4413      	add	r3, r2
 800783a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800783c:	f7fd f890 	bl	8004960 <HAL_GetTick>
 8007840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007842:	4b39      	ldr	r3, [pc, #228]	; (8007928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	015b      	lsls	r3, r3, #5
 8007848:	0d1b      	lsrs	r3, r3, #20
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	fb02 f303 	mul.w	r3, r2, r3
 8007850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007852:	e054      	b.n	80078fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800785a:	d050      	beq.n	80078fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800785c:	f7fd f880 	bl	8004960 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	429a      	cmp	r2, r3
 800786a:	d902      	bls.n	8007872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d13d      	bne.n	80078ee <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> e9380fc... optimisation RAM=)
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d2:	d111      	bne.n	80075f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075dc:	d004      	beq.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e6:	d107      	bne.n	80075f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f6:	601a      	str	r2, [r3, #0]
=======
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800788a:	d111      	bne.n	80078b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007894:	d004      	beq.n	80078a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789e:	d107      	bne.n	80078b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ae:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007600:	d10f      	bne.n	8007622 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007620:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e017      	b.n	8007666 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	3b01      	subs	r3, #1
 8007644:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4013      	ands	r3, r2
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	429a      	cmp	r2, r3
 8007654:	bf0c      	ite	eq
 8007656:	2301      	moveq	r3, #1
 8007658:	2300      	movne	r3, #0
 800765a:	b2db      	uxtb	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	429a      	cmp	r2, r3
 8007662:	d19b      	bne.n	800759c <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b8:	d10f      	bne.n	80078da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e017      	b.n	800791e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4013      	ands	r3, r2
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2300      	movne	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	429a      	cmp	r2, r3
 800791a:	d19b      	bne.n	8007854 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> e9380fc... optimisation RAM=)
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000010 	.word	0x20000010

08007674 <SPI_EndRxTxTransaction>:
=======
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000010 	.word	0x20000010

0800792c <SPI_EndRxTxTransaction>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2200      	movs	r2, #0
 8007688:	2180      	movs	r1, #128	; 0x80
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff ff6a 	bl	8007564 <SPI_WaitFlagStateUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769a:	f043 0220 	orr.w	r2, r3, #32
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e000      	b.n	80076a8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_TIM_Base_Init>:
=======
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af02      	add	r7, sp, #8
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	2180      	movs	r1, #128	; 0x80
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff ff6a 	bl	800781c <SPI_WaitFlagStateUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007952:	f043 0220 	orr.w	r2, r3, #32
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e000      	b.n	8007960 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_TIM_Base_Init>:
>>>>>>> e9380fc... optimisation RAM=)
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e041      	b.n	8007746 <HAL_TIM_Base_Init+0x96>
=======
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e041      	b.n	80079fe <HAL_TIM_Base_Init+0x96>
>>>>>>> e9380fc... optimisation RAM=)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> e9380fc... optimisation RAM=)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7fc fe24 	bl	8004324 <HAL_TIM_Base_MspInit>
=======
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fc fe24 	bl	80045dc <HAL_TIM_Base_MspInit>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f000 fa70 	bl	8007bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <HAL_TIM_Base_Start_IT>:
=======
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3304      	adds	r3, #4
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f000 fa70 	bl	8007e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_TIM_Base_Start_IT>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
=======
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d001      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e03a      	b.n	80077de <HAL_TIM_Base_Start_IT+0x8e>
=======
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d001      	beq.n	8007a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e03a      	b.n	8007a96 <HAL_TIM_Base_Start_IT+0x8e>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a18      	ldr	r2, [pc, #96]	; (80077e8 <HAL_TIM_Base_Start_IT+0x98>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00e      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x58>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007792:	d009      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x58>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a14      	ldr	r2, [pc, #80]	; (80077ec <HAL_TIM_Base_Start_IT+0x9c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x58>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a13      	ldr	r2, [pc, #76]	; (80077f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d111      	bne.n	80077cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b06      	cmp	r3, #6
 80077b8:	d010      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0201 	orr.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ca:	e007      	b.n	80077dc <HAL_TIM_Base_Start_IT+0x8c>
=======
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a18      	ldr	r2, [pc, #96]	; (8007aa0 <HAL_TIM_Base_Start_IT+0x98>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00e      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x58>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4a:	d009      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x58>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a14      	ldr	r2, [pc, #80]	; (8007aa4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x58>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a13      	ldr	r2, [pc, #76]	; (8007aa8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d111      	bne.n	8007a84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b06      	cmp	r3, #6
 8007a70:	d010      	beq.n	8007a94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0201 	orr.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a82:	e007      	b.n	8007a94 <HAL_TIM_Base_Start_IT+0x8c>
>>>>>>> e9380fc... optimisation RAM=)
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
=======
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr
 80077e8:	40012c00 	.word	0x40012c00
 80077ec:	40000400 	.word	0x40000400
 80077f0:	40000800 	.word	0x40000800

080077f4 <HAL_TIM_IRQHandler>:
=======
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bc80      	pop	{r7}
 8007a9e:	4770      	bx	lr
 8007aa0:	40012c00 	.word	0x40012c00
 8007aa4:	40000400 	.word	0x40000400
 8007aa8:	40000800 	.word	0x40000800

08007aac <HAL_TIM_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b02      	cmp	r3, #2
 8007808:	d122      	bne.n	8007850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b02      	cmp	r3, #2
 8007816:	d11b      	bne.n	8007850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0202 	mvn.w	r2, #2
 8007820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0x4a>
=======
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d122      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d11b      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f06f 0202 	mvn.w	r2, #2
 8007ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> e9380fc... optimisation RAM=)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f9b1 	bl	8007b9e <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0x56>
=======
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f9b1 	bl	8007e56 <HAL_TIM_IC_CaptureCallback>
 8007af4:	e005      	b.n	8007b02 <HAL_TIM_IRQHandler+0x56>
>>>>>>> e9380fc... optimisation RAM=)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9a4 	bl	8007b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f9b3 	bl	8007bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	771a      	strb	r2, [r3, #28]
=======
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f9a4 	bl	8007e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f9b3 	bl	8007e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	771a      	strb	r2, [r3, #28]
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b04      	cmp	r3, #4
 800785c:	d122      	bne.n	80078a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b04      	cmp	r3, #4
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0204 	mvn.w	r2, #4
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0x9e>
=======
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d122      	bne.n	8007b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d11b      	bne.n	8007b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f06f 0204 	mvn.w	r2, #4
 8007b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2202      	movs	r2, #2
 8007b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x9e>
>>>>>>> e9380fc... optimisation RAM=)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f987 	bl	8007b9e <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0xaa>
=======
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f987 	bl	8007e56 <HAL_TIM_IC_CaptureCallback>
 8007b48:	e005      	b.n	8007b56 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> e9380fc... optimisation RAM=)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f97a 	bl	8007b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f989 	bl	8007bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
=======
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f97a 	bl	8007e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f989 	bl	8007e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	771a      	strb	r2, [r3, #28]
>>>>>>> e9380fc... optimisation RAM=)
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d122      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d11b      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0208 	mvn.w	r2, #8
 80078c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2204      	movs	r2, #4
 80078ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_TIM_IRQHandler+0xf2>
=======
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b08      	cmp	r3, #8
 8007b68:	d122      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d11b      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0208 	mvn.w	r2, #8
 8007b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2204      	movs	r2, #4
 8007b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_TIM_IRQHandler+0xf2>
>>>>>>> e9380fc... optimisation RAM=)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f95d 	bl	8007b9e <HAL_TIM_IC_CaptureCallback>
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_IRQHandler+0xfe>
=======
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f95d 	bl	8007e56 <HAL_TIM_IC_CaptureCallback>
 8007b9c:	e005      	b.n	8007baa <HAL_TIM_IRQHandler+0xfe>
>>>>>>> e9380fc... optimisation RAM=)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f950 	bl	8007b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f95f 	bl	8007bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	771a      	strb	r2, [r3, #28]
=======
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f950 	bl	8007e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f95f 	bl	8007e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	771a      	strb	r2, [r3, #28]
>>>>>>> e9380fc... optimisation RAM=)
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b10      	cmp	r3, #16
 8007904:	d122      	bne.n	800794c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	2b10      	cmp	r3, #16
 8007912:	d11b      	bne.n	800794c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0210 	mvn.w	r2, #16
 800791c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2208      	movs	r2, #8
 8007922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_TIM_IRQHandler+0x146>
=======
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0310 	and.w	r3, r3, #16
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d122      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f003 0310 	and.w	r3, r3, #16
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	d11b      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0210 	mvn.w	r2, #16
 8007bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2208      	movs	r2, #8
 8007bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_TIM_IRQHandler+0x146>
>>>>>>> e9380fc... optimisation RAM=)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f933 	bl	8007b9e <HAL_TIM_IC_CaptureCallback>
 8007938:	e005      	b.n	8007946 <HAL_TIM_IRQHandler+0x152>
=======
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f933 	bl	8007e56 <HAL_TIM_IC_CaptureCallback>
 8007bf0:	e005      	b.n	8007bfe <HAL_TIM_IRQHandler+0x152>
>>>>>>> e9380fc... optimisation RAM=)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f926 	bl	8007b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f935 	bl	8007bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	771a      	strb	r2, [r3, #28]
=======
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f926 	bl	8007e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f935 	bl	8007e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	771a      	strb	r2, [r3, #28]
>>>>>>> e9380fc... optimisation RAM=)
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	d10e      	bne.n	8007978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d107      	bne.n	8007978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0201 	mvn.w	r2, #1
 8007970:	611a      	str	r2, [r3, #16]
=======
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d10e      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d107      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0201 	mvn.w	r2, #1
 8007c28:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fc fbee 	bl	8004154 <HAL_TIM_PeriodElapsedCallback>
=======
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fc fbe2 	bl	80043f4 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d10e      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d107      	bne.n	80079a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800799c:	611a      	str	r2, [r3, #16]
=======
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3a:	2b80      	cmp	r3, #128	; 0x80
 8007c3c:	d10e      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c48:	2b80      	cmp	r3, #128	; 0x80
 8007c4a:	d107      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c54:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa77 	bl	8007e92 <HAL_TIMEx_BreakCallback>
=======
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa77 	bl	800814a <HAL_TIMEx_BreakCallback>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	d10e      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b40      	cmp	r3, #64	; 0x40
 80079be:	d107      	bne.n	80079d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079c8:	611a      	str	r2, [r3, #16]
=======
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d10e      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c74:	2b40      	cmp	r3, #64	; 0x40
 8007c76:	d107      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c80:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f8f9 	bl	8007bc2 <HAL_TIM_TriggerCallback>
=======
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8f9 	bl	8007e7a <HAL_TIM_TriggerCallback>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b20      	cmp	r3, #32
 80079dc:	d10e      	bne.n	80079fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d107      	bne.n	80079fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f06f 0220 	mvn.w	r2, #32
 80079f4:	611a      	str	r2, [r3, #16]
=======
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d10e      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d107      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0220 	mvn.w	r2, #32
 8007cac:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fa42 	bl	8007e80 <HAL_TIMEx_CommutCallback>
=======
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa42 	bl	8008138 <HAL_TIMEx_CommutCallback>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_TIM_ConfigClockSource>:
=======
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_TIM_ConfigClockSource>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
=======
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_TIM_ConfigClockSource+0x18>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e0b3      	b.n	8007b84 <HAL_TIM_ConfigClockSource+0x180>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_TIM_ConfigClockSource+0x18>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e0b3      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x180>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> e9380fc... optimisation RAM=)

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a54:	d03e      	beq.n	8007ad4 <HAL_TIM_ConfigClockSource+0xd0>
 8007a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5a:	f200 8087 	bhi.w	8007b6c <HAL_TIM_ConfigClockSource+0x168>
 8007a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a62:	f000 8085 	beq.w	8007b70 <HAL_TIM_ConfigClockSource+0x16c>
 8007a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6a:	d87f      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x168>
 8007a6c:	2b70      	cmp	r3, #112	; 0x70
 8007a6e:	d01a      	beq.n	8007aa6 <HAL_TIM_ConfigClockSource+0xa2>
 8007a70:	2b70      	cmp	r3, #112	; 0x70
 8007a72:	d87b      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x168>
 8007a74:	2b60      	cmp	r3, #96	; 0x60
 8007a76:	d050      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x116>
 8007a78:	2b60      	cmp	r3, #96	; 0x60
 8007a7a:	d877      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x168>
 8007a7c:	2b50      	cmp	r3, #80	; 0x50
 8007a7e:	d03c      	beq.n	8007afa <HAL_TIM_ConfigClockSource+0xf6>
 8007a80:	2b50      	cmp	r3, #80	; 0x50
 8007a82:	d873      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x168>
 8007a84:	2b40      	cmp	r3, #64	; 0x40
 8007a86:	d058      	beq.n	8007b3a <HAL_TIM_ConfigClockSource+0x136>
 8007a88:	2b40      	cmp	r3, #64	; 0x40
 8007a8a:	d86f      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x168>
 8007a8c:	2b30      	cmp	r3, #48	; 0x30
 8007a8e:	d064      	beq.n	8007b5a <HAL_TIM_ConfigClockSource+0x156>
 8007a90:	2b30      	cmp	r3, #48	; 0x30
 8007a92:	d86b      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x168>
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d060      	beq.n	8007b5a <HAL_TIM_ConfigClockSource+0x156>
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	d867      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x168>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d05c      	beq.n	8007b5a <HAL_TIM_ConfigClockSource+0x156>
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	d05a      	beq.n	8007b5a <HAL_TIM_ConfigClockSource+0x156>
=======
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0c:	d03e      	beq.n	8007d8c <HAL_TIM_ConfigClockSource+0xd0>
 8007d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d12:	f200 8087 	bhi.w	8007e24 <HAL_TIM_ConfigClockSource+0x168>
 8007d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d1a:	f000 8085 	beq.w	8007e28 <HAL_TIM_ConfigClockSource+0x16c>
 8007d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d22:	d87f      	bhi.n	8007e24 <HAL_TIM_ConfigClockSource+0x168>
 8007d24:	2b70      	cmp	r3, #112	; 0x70
 8007d26:	d01a      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0xa2>
 8007d28:	2b70      	cmp	r3, #112	; 0x70
 8007d2a:	d87b      	bhi.n	8007e24 <HAL_TIM_ConfigClockSource+0x168>
 8007d2c:	2b60      	cmp	r3, #96	; 0x60
 8007d2e:	d050      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x116>
 8007d30:	2b60      	cmp	r3, #96	; 0x60
 8007d32:	d877      	bhi.n	8007e24 <HAL_TIM_ConfigClockSource+0x168>
 8007d34:	2b50      	cmp	r3, #80	; 0x50
 8007d36:	d03c      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0xf6>
 8007d38:	2b50      	cmp	r3, #80	; 0x50
 8007d3a:	d873      	bhi.n	8007e24 <HAL_TIM_ConfigClockSource+0x168>
 8007d3c:	2b40      	cmp	r3, #64	; 0x40
 8007d3e:	d058      	beq.n	8007df2 <HAL_TIM_ConfigClockSource+0x136>
 8007d40:	2b40      	cmp	r3, #64	; 0x40
 8007d42:	d86f      	bhi.n	8007e24 <HAL_TIM_ConfigClockSource+0x168>
 8007d44:	2b30      	cmp	r3, #48	; 0x30
 8007d46:	d064      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x156>
 8007d48:	2b30      	cmp	r3, #48	; 0x30
 8007d4a:	d86b      	bhi.n	8007e24 <HAL_TIM_ConfigClockSource+0x168>
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d060      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x156>
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	d867      	bhi.n	8007e24 <HAL_TIM_ConfigClockSource+0x168>
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d05c      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x156>
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d05a      	beq.n	8007e12 <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> e9380fc... optimisation RAM=)
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 8007aa4:	e062      	b.n	8007b6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	6899      	ldr	r1, [r3, #8]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f000 f966 	bl	8007d86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ac8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	609a      	str	r2, [r3, #8]
      break;
 8007ad2:	e04e      	b.n	8007b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	6899      	ldr	r1, [r3, #8]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f000 f94f 	bl	8007d86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007af6:	609a      	str	r2, [r3, #8]
      break;
 8007af8:	e03b      	b.n	8007b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	6859      	ldr	r1, [r3, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f000 f8c6 	bl	8007c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2150      	movs	r1, #80	; 0x50
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 f91d 	bl	8007d52 <TIM_ITRx_SetConfig>
      break;
 8007b18:	e02b      	b.n	8007b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	6859      	ldr	r1, [r3, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f000 f8e4 	bl	8007cf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2160      	movs	r1, #96	; 0x60
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f90d 	bl	8007d52 <TIM_ITRx_SetConfig>
      break;
 8007b38:	e01b      	b.n	8007b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	6859      	ldr	r1, [r3, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f000 f8a6 	bl	8007c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2140      	movs	r1, #64	; 0x40
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 f8fd 	bl	8007d52 <TIM_ITRx_SetConfig>
      break;
 8007b58:	e00b      	b.n	8007b72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f000 f8f4 	bl	8007d52 <TIM_ITRx_SetConfig>
        break;
 8007b6a:	e002      	b.n	8007b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e000      	b.n	8007b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8007d5c:	e062      	b.n	8007e24 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6899      	ldr	r1, [r3, #8]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f000 f966 	bl	800803e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	609a      	str	r2, [r3, #8]
      break;
 8007d8a:	e04e      	b.n	8007e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	6899      	ldr	r1, [r3, #8]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f000 f94f 	bl	800803e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dae:	609a      	str	r2, [r3, #8]
      break;
 8007db0:	e03b      	b.n	8007e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6859      	ldr	r1, [r3, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f000 f8c6 	bl	8007f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2150      	movs	r1, #80	; 0x50
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 f91d 	bl	800800a <TIM_ITRx_SetConfig>
      break;
 8007dd0:	e02b      	b.n	8007e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6859      	ldr	r1, [r3, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f000 f8e4 	bl	8007fac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2160      	movs	r1, #96	; 0x60
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 f90d 	bl	800800a <TIM_ITRx_SetConfig>
      break;
 8007df0:	e01b      	b.n	8007e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	6859      	ldr	r1, [r3, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f000 f8a6 	bl	8007f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2140      	movs	r1, #64	; 0x40
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f8fd 	bl	800800a <TIM_ITRx_SetConfig>
      break;
 8007e10:	e00b      	b.n	8007e2a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	f000 f8f4 	bl	800800a <TIM_ITRx_SetConfig>
        break;
 8007e22:	e002      	b.n	8007e2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
=======
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr

08007b9e <HAL_TIM_IC_CaptureCallback>:
=======
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr

08007e56 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
=======
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr

08007bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bc80      	pop	{r7}
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
=======
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bc80      	pop	{r7}
 8007bc0:	4770      	bx	lr

08007bc2 <HAL_TIM_TriggerCallback>:
=======
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr

08007e7a <HAL_TIM_TriggerCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
=======
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr

08007bd4 <TIM_Base_SetConfig>:
=======
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr

08007e8c <TIM_Base_SetConfig>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a29      	ldr	r2, [pc, #164]	; (8007c8c <TIM_Base_SetConfig+0xb8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00b      	beq.n	8007c04 <TIM_Base_SetConfig+0x30>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf2:	d007      	beq.n	8007c04 <TIM_Base_SetConfig+0x30>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a26      	ldr	r2, [pc, #152]	; (8007c90 <TIM_Base_SetConfig+0xbc>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_Base_SetConfig+0x30>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a25      	ldr	r2, [pc, #148]	; (8007c94 <TIM_Base_SetConfig+0xc0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d108      	bne.n	8007c16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1c      	ldr	r2, [pc, #112]	; (8007c8c <TIM_Base_SetConfig+0xb8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00b      	beq.n	8007c36 <TIM_Base_SetConfig+0x62>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c24:	d007      	beq.n	8007c36 <TIM_Base_SetConfig+0x62>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a19      	ldr	r2, [pc, #100]	; (8007c90 <TIM_Base_SetConfig+0xbc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d003      	beq.n	8007c36 <TIM_Base_SetConfig+0x62>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a18      	ldr	r2, [pc, #96]	; (8007c94 <TIM_Base_SetConfig+0xc0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d108      	bne.n	8007c48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]
=======
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a29      	ldr	r2, [pc, #164]	; (8007f44 <TIM_Base_SetConfig+0xb8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00b      	beq.n	8007ebc <TIM_Base_SetConfig+0x30>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eaa:	d007      	beq.n	8007ebc <TIM_Base_SetConfig+0x30>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a26      	ldr	r2, [pc, #152]	; (8007f48 <TIM_Base_SetConfig+0xbc>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_Base_SetConfig+0x30>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a25      	ldr	r2, [pc, #148]	; (8007f4c <TIM_Base_SetConfig+0xc0>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d108      	bne.n	8007ece <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a1c      	ldr	r2, [pc, #112]	; (8007f44 <TIM_Base_SetConfig+0xb8>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00b      	beq.n	8007eee <TIM_Base_SetConfig+0x62>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007edc:	d007      	beq.n	8007eee <TIM_Base_SetConfig+0x62>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <TIM_Base_SetConfig+0xbc>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d003      	beq.n	8007eee <TIM_Base_SetConfig+0x62>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <TIM_Base_SetConfig+0xc0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d108      	bne.n	8007f00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a07      	ldr	r2, [pc, #28]	; (8007c8c <TIM_Base_SetConfig+0xb8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d103      	bne.n	8007c7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a07      	ldr	r2, [pc, #28]	; (8007f44 <TIM_Base_SetConfig+0xb8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d103      	bne.n	8007f34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	615a      	str	r2, [r3, #20]
}
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40000400 	.word	0x40000400
 8007c94:	40000800 	.word	0x40000800

08007c98 <TIM_TI1_ConfigInputStage>:
=======
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	615a      	str	r2, [r3, #20]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr
 8007f44:	40012c00 	.word	0x40012c00
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800

08007f50 <TIM_TI1_ConfigInputStage>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
=======
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f023 0201 	bic.w	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f023 030a 	bic.w	r3, r3, #10
 8007cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	621a      	str	r2, [r3, #32]
}
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr

08007cf4 <TIM_TI2_ConfigInputStage>:
=======
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	f023 0201 	bic.w	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f023 030a 	bic.w	r3, r3, #10
 8007f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bc80      	pop	{r7}
 8007faa:	4770      	bx	lr

08007fac <TIM_TI2_ConfigInputStage>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
=======
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	f023 0210 	bic.w	r2, r3, #16
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	031b      	lsls	r3, r3, #12
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	621a      	str	r2, [r3, #32]
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr

08007d52 <TIM_ITRx_SetConfig>:
=======
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f023 0210 	bic.w	r2, r3, #16
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	031b      	lsls	r3, r3, #12
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fe8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	621a      	str	r2, [r3, #32]
}
 8008000:	bf00      	nop
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr

0800800a <TIM_ITRx_SetConfig>:
>>>>>>> e9380fc... optimisation RAM=)
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8007d52:	b480      	push	{r7}
 8007d54:	b085      	sub	sp, #20
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
=======
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f043 0307 	orr.w	r3, r3, #7
 8007d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	609a      	str	r2, [r3, #8]
}
 8007d7c:	bf00      	nop
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr

08007d86 <TIM_ETR_SetConfig>:
=======
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	f043 0307 	orr.w	r3, r3, #7
 800802c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	609a      	str	r2, [r3, #8]
}
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	bc80      	pop	{r7}
 800803c:	4770      	bx	lr

0800803e <TIM_ETR_SetConfig>:
>>>>>>> e9380fc... optimisation RAM=)
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8007d86:	b480      	push	{r7}
 8007d88:	b087      	sub	sp, #28
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
 8007d92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007da0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	021a      	lsls	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	431a      	orrs	r2, r3
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	609a      	str	r2, [r3, #8]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bc80      	pop	{r7}
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800803e:	b480      	push	{r7}
 8008040:	b087      	sub	sp, #28
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	607a      	str	r2, [r7, #4]
 800804a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008058:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	021a      	lsls	r2, r3, #8
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	431a      	orrs	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4313      	orrs	r3, r2
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4313      	orrs	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	609a      	str	r2, [r3, #8]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr

0800807c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> e9380fc... optimisation RAM=)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
=======
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e046      	b.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00e      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e28:	d009      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a12      	ldr	r2, [pc, #72]	; (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d004      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a10      	ldr	r2, [pc, #64]	; (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d10c      	bne.n	8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	609a      	str	r2, [r3, #8]
=======
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008090:	2302      	movs	r3, #2
 8008092:	e046      	b.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a16      	ldr	r2, [pc, #88]	; (800812c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00e      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e0:	d009      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a12      	ldr	r2, [pc, #72]	; (8008130 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d004      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a10      	ldr	r2, [pc, #64]	; (8008134 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d10c      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	4313      	orrs	r3, r2
 8008106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	609a      	str	r2, [r3, #8]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr
 8007e74:	40012c00 	.word	0x40012c00
 8007e78:	40000400 	.word	0x40000400
 8007e7c:	40000800 	.word	0x40000800

08007e80 <HAL_TIMEx_CommutCallback>:
=======
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800

08008138 <HAL_TIMEx_CommutCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
=======
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr

08007e92 <HAL_TIMEx_BreakCallback>:
=======
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	bc80      	pop	{r7}
 8008148:	4770      	bx	lr

0800814a <HAL_TIMEx_BreakCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
=======
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_UART_Init>:
=======
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	bc80      	pop	{r7}
 800815a:	4770      	bx	lr

0800815c <HAL_UART_Init>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e03f      	b.n	8007f36 <HAL_UART_Init+0x92>
=======
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e03f      	b.n	80081ee <HAL_UART_Init+0x92>
>>>>>>> e9380fc... optimisation RAM=)
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d106      	bne.n	8007ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> e9380fc... optimisation RAM=)

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7fc fa4e 	bl	800436c <HAL_UART_MspInit>
=======
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fc fa4e 	bl	8004624 <HAL_UART_MspInit>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2224      	movs	r2, #36	; 0x24
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fb49 	bl	8008580 <UART_SetConfig>
=======
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2224      	movs	r2, #36	; 0x24
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800819e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fb8d 	bl	80088c0 <UART_SetConfig>
>>>>>>> e9380fc... optimisation RAM=)

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695a      	ldr	r2, [r3, #20]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_UART_IRQHandler>:
=======
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695a      	ldr	r2, [r3, #20]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b085      	sub	sp, #20
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	4613      	mov	r3, r2
 8008202:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b20      	cmp	r3, #32
 800820e:	d130      	bne.n	8008272 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <HAL_UART_Transmit_IT+0x26>
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e029      	b.n	8008274 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <HAL_UART_Transmit_IT+0x38>
 800822a:	2302      	movs	r3, #2
 800822c:	e022      	b.n	8008274 <HAL_UART_Transmit_IT+0x7e>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	88fa      	ldrh	r2, [r7, #6]
 8008240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	88fa      	ldrh	r2, [r7, #6]
 8008246:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2221      	movs	r2, #33	; 0x21
 8008252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800826c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	e000      	b.n	8008274 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008272:	2302      	movs	r3, #2
  }
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	bc80      	pop	{r7}
 800827c:	4770      	bx	lr
	...

08008280 <HAL_UART_IRQHandler>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10d      	bne.n	8007f92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <HAL_UART_IRQHandler+0x52>
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fa4f 	bl	800842e <UART_Receive_IT>
      return;
 8007f90:	e17b      	b.n	800828a <HAL_UART_IRQHandler+0x34a>
=======
 8008280:	b580      	push	{r7, lr}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	f003 030f 	and.w	r3, r3, #15
 80082ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10d      	bne.n	80082d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	f003 0320 	and.w	r3, r3, #32
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d008      	beq.n	80082d2 <HAL_UART_IRQHandler+0x52>
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa4f 	bl	800876e <UART_Receive_IT>
      return;
 80082d0:	e17b      	b.n	80085ca <HAL_UART_IRQHandler+0x34a>
>>>>>>> e9380fc... optimisation RAM=)
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< HEAD
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80b1 	beq.w	80080fc <HAL_UART_IRQHandler+0x1bc>
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d105      	bne.n	8007fb0 <HAL_UART_IRQHandler+0x70>
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 80a6 	beq.w	80080fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <HAL_UART_IRQHandler+0x90>
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	f043 0201 	orr.w	r2, r3, #1
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 80b1 	beq.w	800843c <HAL_UART_IRQHandler+0x1bc>
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d105      	bne.n	80082f0 <HAL_UART_IRQHandler+0x70>
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 80a6 	beq.w	800843c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <HAL_UART_IRQHandler+0x90>
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008308:	f043 0201 	orr.w	r2, r3, #1
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <HAL_UART_IRQHandler+0xb0>
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe8:	f043 0202 	orr.w	r2, r3, #2
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <HAL_UART_IRQHandler+0xb0>
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	f043 0202 	orr.w	r2, r3, #2
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <HAL_UART_IRQHandler+0xd0>
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008008:	f043 0204 	orr.w	r2, r3, #4
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <HAL_UART_IRQHandler+0xd0>
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	f043 0204 	orr.w	r2, r3, #4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< HEAD
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00f      	beq.n	800803a <HAL_UART_IRQHandler+0xfa>
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <HAL_UART_IRQHandler+0xee>
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	f043 0208 	orr.w	r2, r3, #8
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	f003 0308 	and.w	r3, r3, #8
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00f      	beq.n	800837a <HAL_UART_IRQHandler+0xfa>
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <HAL_UART_IRQHandler+0xee>
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d005      	beq.n	800837a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	f043 0208 	orr.w	r2, r3, #8
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> e9380fc... optimisation RAM=)
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 811e 	beq.w	8008280 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d007      	beq.n	800805e <HAL_UART_IRQHandler+0x11e>
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f9e8 	bl	800842e <UART_Receive_IT>
=======
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 811e 	beq.w	80085c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <HAL_UART_IRQHandler+0x11e>
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f9e8 	bl	800876e <UART_Receive_IT>
>>>>>>> e9380fc... optimisation RAM=)
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008068:	2b00      	cmp	r3, #0
 800806a:	bf14      	ite	ne
 800806c:	2301      	movne	r3, #1
 800806e:	2300      	moveq	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008078:	f003 0308 	and.w	r3, r3, #8
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <HAL_UART_IRQHandler+0x146>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d031      	beq.n	80080ea <HAL_UART_IRQHandler+0x1aa>
=======
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bf14      	ite	ne
 80083ac:	2301      	movne	r3, #1
 80083ae:	2300      	moveq	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <HAL_UART_IRQHandler+0x146>
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d031      	beq.n	800842a <HAL_UART_IRQHandler+0x1aa>
>>>>>>> e9380fc... optimisation RAM=)
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f92a 	bl	80082e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d023      	beq.n	80080e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	695a      	ldr	r2, [r3, #20]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d013      	beq.n	80080da <HAL_UART_IRQHandler+0x19a>
=======
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f92a 	bl	8008620 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d023      	beq.n	8008422 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	695a      	ldr	r2, [r3, #20]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d013      	beq.n	800841a <HAL_UART_IRQHandler+0x19a>
>>>>>>> e9380fc... optimisation RAM=)
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b6:	4a76      	ldr	r2, [pc, #472]	; (8008290 <HAL_UART_IRQHandler+0x350>)
 80080b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fc fc3a 	bl	8004938 <HAL_DMA_Abort_IT>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d016      	beq.n	80080f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080d4:	4610      	mov	r0, r2
 80080d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d8:	e00e      	b.n	80080f8 <HAL_UART_IRQHandler+0x1b8>
=======
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	4a76      	ldr	r2, [pc, #472]	; (80085d0 <HAL_UART_IRQHandler+0x350>)
 80083f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fc fbf6 	bl	8004bf0 <HAL_DMA_Abort_IT>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d016      	beq.n	8008438 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008418:	e00e      	b.n	8008438 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f8ec 	bl	80082b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e0:	e00a      	b.n	80080f8 <HAL_UART_IRQHandler+0x1b8>
=======
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f8ec 	bl	80085f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008420:	e00a      	b.n	8008438 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f8e8 	bl	80082b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e8:	e006      	b.n	80080f8 <HAL_UART_IRQHandler+0x1b8>
=======
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f8e8 	bl	80085f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008428:	e006      	b.n	8008438 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f8e4 	bl	80082b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80080f6:	e0c3      	b.n	8008280 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f8:	bf00      	nop
    return;
 80080fa:	e0c1      	b.n	8008280 <HAL_UART_IRQHandler+0x340>
=======
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f8e4 	bl	80085f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008436:	e0c3      	b.n	80085c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008438:	bf00      	nop
    return;
 800843a:	e0c1      	b.n	80085c0 <HAL_UART_IRQHandler+0x340>
>>>>>>> e9380fc... optimisation RAM=)
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	2b01      	cmp	r3, #1
 8008102:	f040 80a1 	bne.w	8008248 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	f003 0310 	and.w	r3, r3, #16
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 809b 	beq.w	8008248 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	f003 0310 	and.w	r3, r3, #16
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8095 	beq.w	8008248 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	d04e      	beq.n	80081e0 <HAL_UART_IRQHandler+0x2a0>
=======
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008440:	2b01      	cmp	r3, #1
 8008442:	f040 80a1 	bne.w	8008588 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 809b 	beq.w	8008588 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8095 	beq.w	8008588 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d04e      	beq.n	8008520 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> e9380fc... optimisation RAM=)
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800814c:	8a3b      	ldrh	r3, [r7, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 8098 	beq.w	8008284 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008158:	8a3a      	ldrh	r2, [r7, #16]
 800815a:	429a      	cmp	r2, r3
 800815c:	f080 8092 	bcs.w	8008284 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	8a3a      	ldrh	r2, [r7, #16]
 8008164:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	2b20      	cmp	r3, #32
 800816e:	d02b      	beq.n	80081c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800817e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	695a      	ldr	r2, [r3, #20]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0201 	bic.w	r2, r2, #1
 800818e:	615a      	str	r2, [r3, #20]
=======
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800848c:	8a3b      	ldrh	r3, [r7, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8098 	beq.w	80085c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008498:	8a3a      	ldrh	r2, [r7, #16]
 800849a:	429a      	cmp	r2, r3
 800849c:	f080 8092 	bcs.w	80085c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	8a3a      	ldrh	r2, [r7, #16]
 80084a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d02b      	beq.n	8008508 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	695a      	ldr	r2, [r3, #20]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	615a      	str	r2, [r3, #20]
>>>>>>> e9380fc... optimisation RAM=)

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	695a      	ldr	r2, [r3, #20]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800819e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0210 	bic.w	r2, r2, #16
 80081bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fc fb7d 	bl	80048c2 <HAL_DMA_Abort>
=======
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695a      	ldr	r2, [r3, #20]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0210 	bic.w	r2, r2, #16
 80084fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008502:	4618      	mov	r0, r3
 8008504:	f7fc fb39 	bl	8004b7a <HAL_DMA_Abort>
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f876 	bl	80082ca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081de:	e051      	b.n	8008284 <HAL_UART_IRQHandler+0x344>
=======
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008510:	b29b      	uxth	r3, r3
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	b29b      	uxth	r3, r3
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f876 	bl	800860a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800851e:	e051      	b.n	80085c4 <HAL_UART_IRQHandler+0x344>
>>>>>>> e9380fc... optimisation RAM=)
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d047      	beq.n	8008288 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80081f8:	8a7b      	ldrh	r3, [r7, #18]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d044      	beq.n	8008288 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800820c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	695a      	ldr	r2, [r3, #20]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 0201 	bic.w	r2, r2, #1
 800821c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0210 	bic.w	r2, r2, #16
 800823a:	60da      	str	r2, [r3, #12]
=======
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008528:	b29b      	uxth	r3, r3
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d047      	beq.n	80085c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008538:	8a7b      	ldrh	r3, [r7, #18]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d044      	beq.n	80085c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68da      	ldr	r2, [r3, #12]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800854c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695a      	ldr	r2, [r3, #20]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f022 0201 	bic.w	r2, r2, #1
 800855c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0210 	bic.w	r2, r2, #16
 800857a:	60da      	str	r2, [r3, #12]
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 800823c:	8a7b      	ldrh	r3, [r7, #18]
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f842 	bl	80082ca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008246:	e01f      	b.n	8008288 <HAL_UART_IRQHandler+0x348>
=======
 800857c:	8a7b      	ldrh	r3, [r7, #18]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f842 	bl	800860a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008586:	e01f      	b.n	80085c8 <HAL_UART_IRQHandler+0x348>
>>>>>>> e9380fc... optimisation RAM=)
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d008      	beq.n	8008264 <HAL_UART_IRQHandler+0x324>
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f87f 	bl	8008360 <UART_Transmit_IT>
    return;
 8008262:	e012      	b.n	800828a <HAL_UART_IRQHandler+0x34a>
=======
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858e:	2b00      	cmp	r3, #0
 8008590:	d008      	beq.n	80085a4 <HAL_UART_IRQHandler+0x324>
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f87f 	bl	80086a0 <UART_Transmit_IT>
    return;
 80085a2:	e012      	b.n	80085ca <HAL_UART_IRQHandler+0x34a>
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00d      	beq.n	800828a <HAL_UART_IRQHandler+0x34a>
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008274:	2b00      	cmp	r3, #0
 8008276:	d008      	beq.n	800828a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f8c0 	bl	80083fe <UART_EndTransmit_IT>
    return;
 800827e:	e004      	b.n	800828a <HAL_UART_IRQHandler+0x34a>
    return;
 8008280:	bf00      	nop
 8008282:	e002      	b.n	800828a <HAL_UART_IRQHandler+0x34a>
      return;
 8008284:	bf00      	nop
 8008286:	e000      	b.n	800828a <HAL_UART_IRQHandler+0x34a>
      return;
 8008288:	bf00      	nop
  }
}
 800828a:	3728      	adds	r7, #40	; 0x28
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	08008339 	.word	0x08008339

08008294 <HAL_UART_TxCpltCallback>:
=======
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00d      	beq.n	80085ca <HAL_UART_IRQHandler+0x34a>
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d008      	beq.n	80085ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f8c0 	bl	800873e <UART_EndTransmit_IT>
    return;
 80085be:	e004      	b.n	80085ca <HAL_UART_IRQHandler+0x34a>
    return;
 80085c0:	bf00      	nop
 80085c2:	e002      	b.n	80085ca <HAL_UART_IRQHandler+0x34a>
      return;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <HAL_UART_IRQHandler+0x34a>
      return;
 80085c8:	bf00      	nop
  }
}
 80085ca:	3728      	adds	r7, #40	; 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	08008679 	.word	0x08008679

080085d4 <HAL_UART_TxCpltCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
=======
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bc80      	pop	{r7}
 80082a4:	4770      	bx	lr

080082a6 <HAL_UART_RxCpltCallback>:
=======
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr

080085e6 <HAL_UART_RxCpltCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
=======
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80082ae:	bf00      	nop
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr

080082b8 <HAL_UART_ErrorCallback>:
=======
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr

080085f8 <HAL_UART_ErrorCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
=======
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr

080082ca <HAL_UARTEx_RxEventCallback>:
=======
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr

0800860a <HAL_UARTEx_RxEventCallback>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	807b      	strh	r3, [r7, #2]
=======
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	807b      	strh	r3, [r7, #2]
>>>>>>> e9380fc... optimisation RAM=)
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	bc80      	pop	{r7}
 80082de:	4770      	bx	lr

080082e0 <UART_EndRxTransfer>:
=======
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <UART_EndRxTransfer>:
>>>>>>> e9380fc... optimisation RAM=)
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0201 	bic.w	r2, r2, #1
 8008306:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	2b01      	cmp	r3, #1
 800830e:	d107      	bne.n	8008320 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f022 0210 	bic.w	r2, r2, #16
 800831e:	60da      	str	r2, [r3, #12]
=======
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68da      	ldr	r2, [r3, #12]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008636:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695a      	ldr	r2, [r3, #20]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	2b01      	cmp	r3, #1
 800864e:	d107      	bne.n	8008660 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 0210 	bic.w	r2, r2, #16
 800865e:	60da      	str	r2, [r3, #12]
>>>>>>> e9380fc... optimisation RAM=)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr

08008338 <UART_DMAAbortOnError>:
=======
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800866e:	bf00      	nop
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	bc80      	pop	{r7}
 8008676:	4770      	bx	lr

08008678 <UART_DMAAbortOnError>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7ff ffb0 	bl	80082b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <UART_Transmit_IT>:
=======
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff ffb0 	bl	80085f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008698:	bf00      	nop
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <UART_Transmit_IT>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
=======
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b21      	cmp	r3, #33	; 0x21
 8008372:	d13e      	bne.n	80083f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837c:	d114      	bne.n	80083a8 <UART_Transmit_IT+0x48>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d110      	bne.n	80083a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800839a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	1c9a      	adds	r2, r3, #2
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	621a      	str	r2, [r3, #32]
 80083a6:	e008      	b.n	80083ba <UART_Transmit_IT+0x5a>
=======
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b21      	cmp	r3, #33	; 0x21
 80086b2:	d13e      	bne.n	8008732 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086bc:	d114      	bne.n	80086e8 <UART_Transmit_IT+0x48>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d110      	bne.n	80086e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	461a      	mov	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	1c9a      	adds	r2, r3, #2
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	621a      	str	r2, [r3, #32]
 80086e6:	e008      	b.n	80086fa <UART_Transmit_IT+0x5a>
>>>>>>> e9380fc... optimisation RAM=)
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	1c59      	adds	r1, r3, #1
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6211      	str	r1, [r2, #32]
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	4619      	mov	r1, r3
 80083c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10f      	bne.n	80083ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68da      	ldr	r2, [r3, #12]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e000      	b.n	80083f4 <UART_Transmit_IT+0x94>
=======
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	1c59      	adds	r1, r3, #1
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6211      	str	r1, [r2, #32]
 80086f2:	781a      	ldrb	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	b29b      	uxth	r3, r3
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4619      	mov	r1, r3
 8008708:	84d1      	strh	r1, [r2, #38]	; 0x26
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10f      	bne.n	800872e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800871c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800872c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	e000      	b.n	8008734 <UART_Transmit_IT+0x94>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80083f2:	2302      	movs	r3, #2
  }
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr

080083fe <UART_EndTransmit_IT>:
=======
 8008732:	2302      	movs	r3, #2
  }
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	bc80      	pop	{r7}
 800873c:	4770      	bx	lr

0800873e <UART_EndTransmit_IT>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80083fe:	b580      	push	{r7, lr}
 8008400:	b082      	sub	sp, #8
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68da      	ldr	r2, [r3, #12]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008414:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2220      	movs	r2, #32
 800841a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008754:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff ff38 	bl	8008294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <UART_Receive_IT>:
=======
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff ff38 	bl	80085d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <UART_Receive_IT>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800842e:	b580      	push	{r7, lr}
 8008430:	b086      	sub	sp, #24
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
=======
 800876e:	b580      	push	{r7, lr}
 8008770:	b086      	sub	sp, #24
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b22      	cmp	r3, #34	; 0x22
 8008440:	f040 8099 	bne.w	8008576 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800844c:	d117      	bne.n	800847e <UART_Receive_IT+0x50>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d113      	bne.n	800847e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	b29b      	uxth	r3, r3
 8008468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846c:	b29a      	uxth	r2, r3
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008476:	1c9a      	adds	r2, r3, #2
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	629a      	str	r2, [r3, #40]	; 0x28
 800847c:	e026      	b.n	80084cc <UART_Receive_IT+0x9e>
=======
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b22      	cmp	r3, #34	; 0x22
 8008780:	f040 8099 	bne.w	80088b6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878c:	d117      	bne.n	80087be <UART_Receive_IT+0x50>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d113      	bne.n	80087be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008796:	2300      	movs	r3, #0
 8008798:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b6:	1c9a      	adds	r2, r3, #2
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	629a      	str	r2, [r3, #40]	; 0x28
 80087bc:	e026      	b.n	800880c <UART_Receive_IT+0x9e>
>>>>>>> e9380fc... optimisation RAM=)
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008490:	d007      	beq.n	80084a2 <UART_Receive_IT+0x74>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <UART_Receive_IT+0x82>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e008      	b.n	80084c2 <UART_Receive_IT+0x94>
=======
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d0:	d007      	beq.n	80087e2 <UART_Receive_IT+0x74>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10a      	bne.n	80087f0 <UART_Receive_IT+0x82>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d106      	bne.n	80087f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	701a      	strb	r2, [r3, #0]
 80087ee:	e008      	b.n	8008802 <UART_Receive_IT+0x94>
>>>>>>> e9380fc... optimisation RAM=)
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	4619      	mov	r1, r3
 80084da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d148      	bne.n	8008572 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0220 	bic.w	r2, r2, #32
 80084ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	695a      	ldr	r2, [r3, #20]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0201 	bic.w	r2, r2, #1
 800850e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29b      	uxth	r3, r3
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	4619      	mov	r1, r3
 800881a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800881c:	2b00      	cmp	r3, #0
 800881e:	d148      	bne.n	80088b2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0220 	bic.w	r2, r2, #32
 800882e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800883e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	695a      	ldr	r2, [r3, #20]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0201 	bic.w	r2, r2, #1
 800884e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> e9380fc... optimisation RAM=)

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851c:	2b01      	cmp	r3, #1
 800851e:	d123      	bne.n	8008568 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0210 	bic.w	r2, r2, #16
 8008534:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b10      	cmp	r3, #16
 8008542:	d10a      	bne.n	800855a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
=======
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	2b01      	cmp	r3, #1
 800885e:	d123      	bne.n	80088a8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0210 	bic.w	r2, r2, #16
 8008874:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0310 	and.w	r3, r3, #16
 8008880:	2b10      	cmp	r3, #16
 8008882:	d10a      	bne.n	800889a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff feb2 	bl	80082ca <HAL_UARTEx_RxEventCallback>
 8008566:	e002      	b.n	800856e <UART_Receive_IT+0x140>
=======
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff feb2 	bl	800860a <HAL_UARTEx_RxEventCallback>
 80088a6:	e002      	b.n	80088ae <UART_Receive_IT+0x140>
>>>>>>> e9380fc... optimisation RAM=)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff fe9c 	bl	80082a6 <HAL_UART_RxCpltCallback>
=======
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff fe9c 	bl	80085e6 <HAL_UART_RxCpltCallback>
>>>>>>> e9380fc... optimisation RAM=)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 800856e:	2300      	movs	r3, #0
 8008570:	e002      	b.n	8008578 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	e000      	b.n	8008578 <UART_Receive_IT+0x14a>
=======
 80088ae:	2300      	movs	r3, #0
 80088b0:	e002      	b.n	80088b8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	e000      	b.n	80088b8 <UART_Receive_IT+0x14a>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8008576:	2302      	movs	r3, #2
  }
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <UART_SetConfig>:
=======
 80088b6:	2302      	movs	r3, #2
  }
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <UART_SetConfig>:
>>>>>>> e9380fc... optimisation RAM=)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
=======
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	611a      	str	r2, [r3, #16]
=======
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80085ba:	f023 030c 	bic.w	r3, r3, #12
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	430b      	orrs	r3, r1
 80085c6:	60d3      	str	r3, [r2, #12]
=======
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80088fa:	f023 030c 	bic.w	r3, r3, #12
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6812      	ldr	r2, [r2, #0]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	430b      	orrs	r3, r1
 8008906:	60d3      	str	r3, [r2, #12]
>>>>>>> e9380fc... optimisation RAM=)
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a2c      	ldr	r2, [pc, #176]	; (8008694 <UART_SetConfig+0x114>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d103      	bne.n	80085f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80085e8:	f7fe fc96 	bl	8006f18 <HAL_RCC_GetPCLK2Freq>
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	e002      	b.n	80085f6 <UART_SetConfig+0x76>
=======
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699a      	ldr	r2, [r3, #24]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a2c      	ldr	r2, [pc, #176]	; (80089d4 <UART_SetConfig+0x114>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d103      	bne.n	8008930 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008928:	f7fe fc52 	bl	80071d0 <HAL_RCC_GetPCLK2Freq>
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	e002      	b.n	8008936 <UART_SetConfig+0x76>
>>>>>>> e9380fc... optimisation RAM=)
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 80085f0:	f7fe fc7e 	bl	8006ef0 <HAL_RCC_GetPCLK1Freq>
 80085f4:	60f8      	str	r0, [r7, #12]
=======
 8008930:	f7fe fc3a 	bl	80071a8 <HAL_RCC_GetPCLK1Freq>
 8008934:	60f8      	str	r0, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009a      	lsls	r2, r3, #2
 8008600:	441a      	add	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	fbb2 f3f3 	udiv	r3, r2, r3
 800860c:	4a22      	ldr	r2, [pc, #136]	; (8008698 <UART_SetConfig+0x118>)
 800860e:	fba2 2303 	umull	r2, r3, r2, r3
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	0119      	lsls	r1, r3, #4
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4613      	mov	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	009a      	lsls	r2, r3, #2
 8008620:	441a      	add	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	fbb2 f2f3 	udiv	r2, r2, r3
 800862c:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <UART_SetConfig+0x118>)
 800862e:	fba3 0302 	umull	r0, r3, r3, r2
 8008632:	095b      	lsrs	r3, r3, #5
 8008634:	2064      	movs	r0, #100	; 0x64
 8008636:	fb00 f303 	mul.w	r3, r0, r3
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	3332      	adds	r3, #50	; 0x32
 8008640:	4a15      	ldr	r2, [pc, #84]	; (8008698 <UART_SetConfig+0x118>)
 8008642:	fba2 2303 	umull	r2, r3, r2, r3
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800864c:	4419      	add	r1, r3
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	009a      	lsls	r2, r3, #2
 8008658:	441a      	add	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	fbb2 f2f3 	udiv	r2, r2, r3
 8008664:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <UART_SetConfig+0x118>)
 8008666:	fba3 0302 	umull	r0, r3, r3, r2
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	2064      	movs	r0, #100	; 0x64
 800866e:	fb00 f303 	mul.w	r3, r0, r3
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	3332      	adds	r3, #50	; 0x32
 8008678:	4a07      	ldr	r2, [pc, #28]	; (8008698 <UART_SetConfig+0x118>)
 800867a:	fba2 2303 	umull	r2, r3, r2, r3
 800867e:	095b      	lsrs	r3, r3, #5
 8008680:	f003 020f 	and.w	r2, r3, #15
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	440a      	add	r2, r1
 800868a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	40013800 	.word	0x40013800
 8008698:	51eb851f 	.word	0x51eb851f

0800869c <osKernelInitialize>:
=======
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009a      	lsls	r2, r3, #2
 8008940:	441a      	add	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	fbb2 f3f3 	udiv	r3, r2, r3
 800894c:	4a22      	ldr	r2, [pc, #136]	; (80089d8 <UART_SetConfig+0x118>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	0119      	lsls	r1, r3, #4
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009a      	lsls	r2, r3, #2
 8008960:	441a      	add	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	fbb2 f2f3 	udiv	r2, r2, r3
 800896c:	4b1a      	ldr	r3, [pc, #104]	; (80089d8 <UART_SetConfig+0x118>)
 800896e:	fba3 0302 	umull	r0, r3, r3, r2
 8008972:	095b      	lsrs	r3, r3, #5
 8008974:	2064      	movs	r0, #100	; 0x64
 8008976:	fb00 f303 	mul.w	r3, r0, r3
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	3332      	adds	r3, #50	; 0x32
 8008980:	4a15      	ldr	r2, [pc, #84]	; (80089d8 <UART_SetConfig+0x118>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800898c:	4419      	add	r1, r3
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009a      	lsls	r2, r3, #2
 8008998:	441a      	add	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <UART_SetConfig+0x118>)
 80089a6:	fba3 0302 	umull	r0, r3, r3, r2
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	2064      	movs	r0, #100	; 0x64
 80089ae:	fb00 f303 	mul.w	r3, r0, r3
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	3332      	adds	r3, #50	; 0x32
 80089b8:	4a07      	ldr	r2, [pc, #28]	; (80089d8 <UART_SetConfig+0x118>)
 80089ba:	fba2 2303 	umull	r2, r3, r2, r3
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	f003 020f 	and.w	r2, r3, #15
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	440a      	add	r2, r1
 80089ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	40013800 	.word	0x40013800
 80089d8:	51eb851f 	.word	0x51eb851f

080089dc <osKernelInitialize>:
>>>>>>> e9380fc... optimisation RAM=)
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< HEAD
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
=======
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
<<<<<<< HEAD
 80086a2:	f3ef 8305 	mrs	r3, IPSR
 80086a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80086a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10f      	bne.n	80086ce <osKernelInitialize+0x32>
=======
 80089e2:	f3ef 8305 	mrs	r3, IPSR
 80089e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80089e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10f      	bne.n	8008a0e <osKernelInitialize+0x32>
>>>>>>> e9380fc... optimisation RAM=)
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
<<<<<<< HEAD
 80086ae:	f3ef 8310 	mrs	r3, PRIMASK
 80086b2:	607b      	str	r3, [r7, #4]
  return(result);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d109      	bne.n	80086ce <osKernelInitialize+0x32>
 80086ba:	4b10      	ldr	r3, [pc, #64]	; (80086fc <osKernelInitialize+0x60>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d109      	bne.n	80086d6 <osKernelInitialize+0x3a>
=======
 80089ee:	f3ef 8310 	mrs	r3, PRIMASK
 80089f2:	607b      	str	r3, [r7, #4]
  return(result);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d109      	bne.n	8008a0e <osKernelInitialize+0x32>
 80089fa:	4b10      	ldr	r3, [pc, #64]	; (8008a3c <osKernelInitialize+0x60>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d109      	bne.n	8008a16 <osKernelInitialize+0x3a>
>>>>>>> e9380fc... optimisation RAM=)
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
<<<<<<< HEAD
 80086c2:	f3ef 8311 	mrs	r3, BASEPRI
 80086c6:	603b      	str	r3, [r7, #0]
  return(result);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80086ce:	f06f 0305 	mvn.w	r3, #5
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	e00c      	b.n	80086f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80086d6:	4b09      	ldr	r3, [pc, #36]	; (80086fc <osKernelInitialize+0x60>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d105      	bne.n	80086ea <osKernelInitialize+0x4e>
=======
 8008a02:	f3ef 8311 	mrs	r3, BASEPRI
 8008a06:	603b      	str	r3, [r7, #0]
  return(result);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008a0e:	f06f 0305 	mvn.w	r3, #5
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	e00c      	b.n	8008a30 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <osKernelInitialize+0x60>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d105      	bne.n	8008a2a <osKernelInitialize+0x4e>
>>>>>>> e9380fc... optimisation RAM=)
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
<<<<<<< HEAD
 80086de:	4b07      	ldr	r3, [pc, #28]	; (80086fc <osKernelInitialize+0x60>)
 80086e0:	2201      	movs	r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	e002      	b.n	80086f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80086ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ee:	60fb      	str	r3, [r7, #12]
=======
 8008a1e:	4b07      	ldr	r3, [pc, #28]	; (8008a3c <osKernelInitialize+0x60>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	e002      	b.n	8008a30 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a2e:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
    }
  }

  return (stat);
<<<<<<< HEAD
 80086f0:	68fb      	ldr	r3, [r7, #12]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr
 80086fc:	20000418 	.word	0x20000418

08008700 <osKernelStart>:
=======
 8008a30:	68fb      	ldr	r3, [r7, #12]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr
 8008a3c:	20000b34 	.word	0x20000b34

08008a40 <osKernelStart>:
>>>>>>> e9380fc... optimisation RAM=)
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< HEAD
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008706:	f3ef 8305 	mrs	r3, IPSR
 800870a:	60bb      	str	r3, [r7, #8]
  return(result);
 800870c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10f      	bne.n	8008732 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008712:	f3ef 8310 	mrs	r3, PRIMASK
 8008716:	607b      	str	r3, [r7, #4]
  return(result);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d109      	bne.n	8008732 <osKernelStart+0x32>
 800871e:	4b11      	ldr	r3, [pc, #68]	; (8008764 <osKernelStart+0x64>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d109      	bne.n	800873a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008726:	f3ef 8311 	mrs	r3, BASEPRI
 800872a:	603b      	str	r3, [r7, #0]
  return(result);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <osKernelStart+0x3a>
    stat = osErrorISR;
 8008732:	f06f 0305 	mvn.w	r3, #5
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e00e      	b.n	8008758 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800873a:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <osKernelStart+0x64>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d107      	bne.n	8008752 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008742:	4b08      	ldr	r3, [pc, #32]	; (8008764 <osKernelStart+0x64>)
 8008744:	2202      	movs	r2, #2
 8008746:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008748:	f002 f90c 	bl	800a964 <vTaskStartScheduler>
      stat = osOK;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e002      	b.n	8008758 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008756:	60fb      	str	r3, [r7, #12]
=======
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a46:	f3ef 8305 	mrs	r3, IPSR
 8008a4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10f      	bne.n	8008a72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a52:	f3ef 8310 	mrs	r3, PRIMASK
 8008a56:	607b      	str	r3, [r7, #4]
  return(result);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <osKernelStart+0x32>
 8008a5e:	4b11      	ldr	r3, [pc, #68]	; (8008aa4 <osKernelStart+0x64>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d109      	bne.n	8008a7a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a66:	f3ef 8311 	mrs	r3, BASEPRI
 8008a6a:	603b      	str	r3, [r7, #0]
  return(result);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <osKernelStart+0x3a>
    stat = osErrorISR;
 8008a72:	f06f 0305 	mvn.w	r3, #5
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	e00e      	b.n	8008a98 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a7a:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <osKernelStart+0x64>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d107      	bne.n	8008a92 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <osKernelStart+0x64>)
 8008a84:	2202      	movs	r2, #2
 8008a86:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008a88:	f002 f95e 	bl	800ad48 <vTaskStartScheduler>
      stat = osOK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e002      	b.n	8008a98 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a96:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
    }
  }

  return (stat);
<<<<<<< HEAD
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000418 	.word	0x20000418

08008768 <osThreadNew>:
=======
 8008a98:	68fb      	ldr	r3, [r7, #12]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000b34 	.word	0x20000b34

08008aa8 <osThreadNew>:
>>>>>>> e9380fc... optimisation RAM=)
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< HEAD
 8008768:	b580      	push	{r7, lr}
 800876a:	b092      	sub	sp, #72	; 0x48
 800876c:	af04      	add	r7, sp, #16
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
=======
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b092      	sub	sp, #72	; 0x48
 8008aac:	af04      	add	r7, sp, #16
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< HEAD
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008778:	f3ef 8305 	mrs	r3, IPSR
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008780:	2b00      	cmp	r3, #0
 8008782:	f040 8094 	bne.w	80088ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008786:	f3ef 8310 	mrs	r3, PRIMASK
 800878a:	623b      	str	r3, [r7, #32]
  return(result);
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	2b00      	cmp	r3, #0
 8008790:	f040 808d 	bne.w	80088ae <osThreadNew+0x146>
 8008794:	4b48      	ldr	r3, [pc, #288]	; (80088b8 <osThreadNew+0x150>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b02      	cmp	r3, #2
 800879a:	d106      	bne.n	80087aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800879c:	f3ef 8311 	mrs	r3, BASEPRI
 80087a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f040 8082 	bne.w	80088ae <osThreadNew+0x146>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d07e      	beq.n	80088ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80087b0:	2380      	movs	r3, #128	; 0x80
 80087b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80087b4:	2318      	movs	r3, #24
 80087b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80087b8:	2300      	movs	r3, #0
 80087ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80087bc:	f107 031b 	add.w	r3, r7, #27
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80087c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d045      	beq.n	800885a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <osThreadNew+0x74>
        name = attr->name;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d008      	beq.n	8008802 <osThreadNew+0x9a>
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	2b38      	cmp	r3, #56	; 0x38
 80087f4:	d805      	bhi.n	8008802 <osThreadNew+0x9a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <osThreadNew+0x9e>
        return (NULL);
 8008802:	2300      	movs	r3, #0
 8008804:	e054      	b.n	80088b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	089b      	lsrs	r3, r3, #2
 8008814:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00e      	beq.n	800883c <osThreadNew+0xd4>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	2bbb      	cmp	r3, #187	; 0xbb
 8008824:	d90a      	bls.n	800883c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800882a:	2b00      	cmp	r3, #0
 800882c:	d006      	beq.n	800883c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <osThreadNew+0xd4>
        mem = 1;
 8008836:	2301      	movs	r3, #1
 8008838:	62bb      	str	r3, [r7, #40]	; 0x28
 800883a:	e010      	b.n	800885e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10c      	bne.n	800885e <osThreadNew+0xf6>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d108      	bne.n	800885e <osThreadNew+0xf6>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d104      	bne.n	800885e <osThreadNew+0xf6>
          mem = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	62bb      	str	r3, [r7, #40]	; 0x28
 8008858:	e001      	b.n	800885e <osThreadNew+0xf6>
=======
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ab8:	f3ef 8305 	mrs	r3, IPSR
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f040 8094 	bne.w	8008bee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aca:	623b      	str	r3, [r7, #32]
  return(result);
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f040 808d 	bne.w	8008bee <osThreadNew+0x146>
 8008ad4:	4b48      	ldr	r3, [pc, #288]	; (8008bf8 <osThreadNew+0x150>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d106      	bne.n	8008aea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008adc:	f3ef 8311 	mrs	r3, BASEPRI
 8008ae0:	61fb      	str	r3, [r7, #28]
  return(result);
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 8082 	bne.w	8008bee <osThreadNew+0x146>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d07e      	beq.n	8008bee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008af0:	2380      	movs	r3, #128	; 0x80
 8008af2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008af4:	2318      	movs	r3, #24
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008af8:	2300      	movs	r3, #0
 8008afa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008afc:	f107 031b 	add.w	r3, r7, #27
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d045      	beq.n	8008b9a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <osThreadNew+0x74>
        name = attr->name;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d008      	beq.n	8008b42 <osThreadNew+0x9a>
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	2b38      	cmp	r3, #56	; 0x38
 8008b34:	d805      	bhi.n	8008b42 <osThreadNew+0x9a>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <osThreadNew+0x9e>
        return (NULL);
 8008b42:	2300      	movs	r3, #0
 8008b44:	e054      	b.n	8008bf0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	089b      	lsrs	r3, r3, #2
 8008b54:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00e      	beq.n	8008b7c <osThreadNew+0xd4>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	2bbf      	cmp	r3, #191	; 0xbf
 8008b64:	d90a      	bls.n	8008b7c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d006      	beq.n	8008b7c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <osThreadNew+0xd4>
        mem = 1;
 8008b76:	2301      	movs	r3, #1
 8008b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b7a:	e010      	b.n	8008b9e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10c      	bne.n	8008b9e <osThreadNew+0xf6>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d108      	bne.n	8008b9e <osThreadNew+0xf6>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <osThreadNew+0xf6>
          mem = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b98:	e001      	b.n	8008b9e <osThreadNew+0xf6>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 800885a:	2300      	movs	r3, #0
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	2b01      	cmp	r3, #1
 8008862:	d110      	bne.n	8008886 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800886c:	9202      	str	r2, [sp, #8]
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008878:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f001 fd80 	bl	800a380 <xTaskCreateStatic>
 8008880:	4603      	mov	r3, r0
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	e013      	b.n	80088ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	2b00      	cmp	r3, #0
 800888a:	d110      	bne.n	80088ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	b29a      	uxth	r2, r3
 8008890:	f107 0314 	add.w	r3, r7, #20
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f001 fdca 	bl	800a438 <xTaskCreate>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d001      	beq.n	80088ae <osThreadNew+0x146>
          hTask = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
=======
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d110      	bne.n	8008bc6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008bac:	9202      	str	r2, [sp, #8]
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f001 fd80 	bl	800a6c0 <xTaskCreateStatic>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	e013      	b.n	8008bee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d110      	bne.n	8008bee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	f107 0314 	add.w	r3, r7, #20
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f001 fdca 	bl	800a778 <xTaskCreate>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d001      	beq.n	8008bee <osThreadNew+0x146>
          hTask = NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< HEAD
 80088ae:	697b      	ldr	r3, [r7, #20]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3738      	adds	r7, #56	; 0x38
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20000418 	.word	0x20000418

080088bc <osThreadSuspend>:
=======
 8008bee:	697b      	ldr	r3, [r7, #20]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3738      	adds	r7, #56	; 0x38
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20000b34 	.word	0x20000b34

08008bfc <osThreadSuspend>:
>>>>>>> e9380fc... optimisation RAM=)
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
<<<<<<< HEAD
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088c8:	f3ef 8305 	mrs	r3, IPSR
 80088cc:	617b      	str	r3, [r7, #20]
  return(result);
 80088ce:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10f      	bne.n	80088f4 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d4:	f3ef 8310 	mrs	r3, PRIMASK
 80088d8:	613b      	str	r3, [r7, #16]
  return(result);
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d109      	bne.n	80088f4 <osThreadSuspend+0x38>
 80088e0:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <osThreadSuspend+0x64>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d109      	bne.n	80088fc <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088e8:	f3ef 8311 	mrs	r3, BASEPRI
 80088ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <osThreadSuspend+0x40>
    stat = osErrorISR;
 80088f4:	f06f 0305 	mvn.w	r3, #5
 80088f8:	61fb      	str	r3, [r7, #28]
 80088fa:	e00b      	b.n	8008914 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d103      	bne.n	800890a <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8008902:	f06f 0303 	mvn.w	r3, #3
 8008906:	61fb      	str	r3, [r7, #28]
 8008908:	e004      	b.n	8008914 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 800890a:	2300      	movs	r3, #0
 800890c:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800890e:	69b8      	ldr	r0, [r7, #24]
 8008910:	f001 ff1a 	bl	800a748 <vTaskSuspend>
  }

  return (stat);
 8008914:	69fb      	ldr	r3, [r7, #28]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3720      	adds	r7, #32
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20000418 	.word	0x20000418

08008924 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008930:	f3ef 8305 	mrs	r3, IPSR
 8008934:	617b      	str	r3, [r7, #20]
  return(result);
 8008936:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10f      	bne.n	800895c <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800893c:	f3ef 8310 	mrs	r3, PRIMASK
 8008940:	613b      	str	r3, [r7, #16]
  return(result);
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d109      	bne.n	800895c <osThreadResume+0x38>
 8008948:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <osThreadResume+0x64>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b02      	cmp	r3, #2
 800894e:	d109      	bne.n	8008964 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008950:	f3ef 8311 	mrs	r3, BASEPRI
 8008954:	60fb      	str	r3, [r7, #12]
  return(result);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <osThreadResume+0x40>
    stat = osErrorISR;
 800895c:	f06f 0305 	mvn.w	r3, #5
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	e00b      	b.n	800897c <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <osThreadResume+0x4e>
    stat = osErrorParameter;
 800896a:	f06f 0303 	mvn.w	r3, #3
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	e004      	b.n	800897c <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8008972:	2300      	movs	r3, #0
 8008974:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8008976:	69b8      	ldr	r0, [r7, #24]
 8008978:	f001 ff96 	bl	800a8a8 <vTaskResume>
  }

  return (stat);
 800897c:	69fb      	ldr	r3, [r7, #28]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3720      	adds	r7, #32
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000418 	.word	0x20000418

0800898c <osDelay>:
=======
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c08:	f3ef 8305 	mrs	r3, IPSR
 8008c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c0e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10f      	bne.n	8008c34 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c14:	f3ef 8310 	mrs	r3, PRIMASK
 8008c18:	613b      	str	r3, [r7, #16]
  return(result);
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <osThreadSuspend+0x38>
 8008c20:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <osThreadSuspend+0x64>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d109      	bne.n	8008c3c <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c28:	f3ef 8311 	mrs	r3, BASEPRI
 8008c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d003      	beq.n	8008c3c <osThreadSuspend+0x40>
    stat = osErrorISR;
 8008c34:	f06f 0305 	mvn.w	r3, #5
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	e00b      	b.n	8008c54 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d103      	bne.n	8008c4a <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8008c42:	f06f 0303 	mvn.w	r3, #3
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	e004      	b.n	8008c54 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8008c4e:	69b8      	ldr	r0, [r7, #24]
 8008c50:	f001 ff6c 	bl	800ab2c <vTaskSuspend>
  }

  return (stat);
 8008c54:	69fb      	ldr	r3, [r7, #28]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3720      	adds	r7, #32
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000b34 	.word	0x20000b34

08008c64 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c70:	f3ef 8305 	mrs	r3, IPSR
 8008c74:	617b      	str	r3, [r7, #20]
  return(result);
 8008c76:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10f      	bne.n	8008c9c <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c80:	613b      	str	r3, [r7, #16]
  return(result);
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d109      	bne.n	8008c9c <osThreadResume+0x38>
 8008c88:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <osThreadResume+0x64>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d109      	bne.n	8008ca4 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c90:	f3ef 8311 	mrs	r3, BASEPRI
 8008c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <osThreadResume+0x40>
    stat = osErrorISR;
 8008c9c:	f06f 0305 	mvn.w	r3, #5
 8008ca0:	61fb      	str	r3, [r7, #28]
 8008ca2:	e00b      	b.n	8008cbc <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d103      	bne.n	8008cb2 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8008caa:	f06f 0303 	mvn.w	r3, #3
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e004      	b.n	8008cbc <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8008cb6:	69b8      	ldr	r0, [r7, #24]
 8008cb8:	f001 ffe8 	bl	800ac8c <vTaskResume>
  }

  return (stat);
 8008cbc:	69fb      	ldr	r3, [r7, #28]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3720      	adds	r7, #32
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000b34 	.word	0x20000b34

08008ccc <osDelay>:
>>>>>>> e9380fc... optimisation RAM=)

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< HEAD
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008994:	f3ef 8305 	mrs	r3, IPSR
 8008998:	613b      	str	r3, [r7, #16]
  return(result);
 800899a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10f      	bne.n	80089c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089a0:	f3ef 8310 	mrs	r3, PRIMASK
 80089a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d109      	bne.n	80089c0 <osDelay+0x34>
 80089ac:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <osDelay+0x58>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d109      	bne.n	80089c8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089b4:	f3ef 8311 	mrs	r3, BASEPRI
 80089b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <osDelay+0x3c>
    stat = osErrorISR;
 80089c0:	f06f 0305 	mvn.w	r3, #5
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e007      	b.n	80089d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 fe84 	bl	800a6e0 <vTaskDelay>
=======
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cd4:	f3ef 8305 	mrs	r3, IPSR
 8008cd8:	613b      	str	r3, [r7, #16]
  return(result);
 8008cda:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10f      	bne.n	8008d00 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d109      	bne.n	8008d00 <osDelay+0x34>
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <osDelay+0x58>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d109      	bne.n	8008d08 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8008cf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <osDelay+0x3c>
    stat = osErrorISR;
 8008d00:	f06f 0305 	mvn.w	r3, #5
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	e007      	b.n	8008d18 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 fe88 	bl	800aa28 <vTaskDelay>
>>>>>>> e9380fc... optimisation RAM=)
    }
  }

  return (stat);
<<<<<<< HEAD
 80089d8:	697b      	ldr	r3, [r7, #20]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20000418 	.word	0x20000418

080089e8 <osMutexNew>:
=======
 8008d18:	697b      	ldr	r3, [r7, #20]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000b34 	.word	0x20000b34

08008d28 <osMutexNew>:
>>>>>>> e9380fc... optimisation RAM=)
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
<<<<<<< HEAD
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	; 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
=======
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	; 0x28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
<<<<<<< HEAD
 80089f0:	2300      	movs	r3, #0
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089f4:	f3ef 8305 	mrs	r3, IPSR
 80089f8:	613b      	str	r3, [r7, #16]
  return(result);
 80089fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f040 8085 	bne.w	8008b0c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a02:	f3ef 8310 	mrs	r3, PRIMASK
 8008a06:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d17e      	bne.n	8008b0c <osMutexNew+0x124>
 8008a0e:	4b42      	ldr	r3, [pc, #264]	; (8008b18 <osMutexNew+0x130>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d105      	bne.n	8008a22 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a16:	f3ef 8311 	mrs	r3, BASEPRI
 8008a1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d174      	bne.n	8008b0c <osMutexNew+0x124>
    if (attr != NULL) {
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	623b      	str	r3, [r7, #32]
 8008a2e:	e001      	b.n	8008a34 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <osMutexNew+0x5c>
      rmtx = 1U;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	61fb      	str	r3, [r7, #28]
 8008a42:	e001      	b.n	8008a48 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	f003 0308 	and.w	r3, r3, #8
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d15c      	bne.n	8008b0c <osMutexNew+0x124>
      mem = -1;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a56:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d015      	beq.n	8008a8a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d006      	beq.n	8008a74 <osMutexNew+0x8c>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	2b4f      	cmp	r3, #79	; 0x4f
 8008a6c:	d902      	bls.n	8008a74 <osMutexNew+0x8c>
          mem = 1;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	61bb      	str	r3, [r7, #24]
 8008a72:	e00c      	b.n	8008a8e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d108      	bne.n	8008a8e <osMutexNew+0xa6>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d104      	bne.n	8008a8e <osMutexNew+0xa6>
            mem = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
 8008a88:	e001      	b.n	8008a8e <osMutexNew+0xa6>
=======
 8008d30:	2300      	movs	r3, #0
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d34:	f3ef 8305 	mrs	r3, IPSR
 8008d38:	613b      	str	r3, [r7, #16]
  return(result);
 8008d3a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f040 8085 	bne.w	8008e4c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d42:	f3ef 8310 	mrs	r3, PRIMASK
 8008d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d17e      	bne.n	8008e4c <osMutexNew+0x124>
 8008d4e:	4b42      	ldr	r3, [pc, #264]	; (8008e58 <osMutexNew+0x130>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d105      	bne.n	8008d62 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d56:	f3ef 8311 	mrs	r3, BASEPRI
 8008d5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d174      	bne.n	8008e4c <osMutexNew+0x124>
    if (attr != NULL) {
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	623b      	str	r3, [r7, #32]
 8008d6e:	e001      	b.n	8008d74 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <osMutexNew+0x5c>
      rmtx = 1U;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	e001      	b.n	8008d88 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	f003 0308 	and.w	r3, r3, #8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d15c      	bne.n	8008e4c <osMutexNew+0x124>
      mem = -1;
 8008d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d96:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d015      	beq.n	8008dca <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d006      	beq.n	8008db4 <osMutexNew+0x8c>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	2b4f      	cmp	r3, #79	; 0x4f
 8008dac:	d902      	bls.n	8008db4 <osMutexNew+0x8c>
          mem = 1;
 8008dae:	2301      	movs	r3, #1
 8008db0:	61bb      	str	r3, [r7, #24]
 8008db2:	e00c      	b.n	8008dce <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d108      	bne.n	8008dce <osMutexNew+0xa6>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d104      	bne.n	8008dce <osMutexNew+0xa6>
            mem = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	e001      	b.n	8008dce <osMutexNew+0xa6>
>>>>>>> e9380fc... optimisation RAM=)
          }
        }
      }
      else {
        mem = 0;
<<<<<<< HEAD
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d112      	bne.n	8008aba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	2004      	movs	r0, #4
 8008aa2:	f000 fd1d 	bl	80094e0 <xQueueCreateMutexStatic>
 8008aa6:	6278      	str	r0, [r7, #36]	; 0x24
 8008aa8:	e016      	b.n	8008ad8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f000 fd15 	bl	80094e0 <xQueueCreateMutexStatic>
 8008ab6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ab8:	e00e      	b.n	8008ad8 <osMutexNew+0xf0>
=======
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d112      	bne.n	8008dfa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d007      	beq.n	8008dea <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	4619      	mov	r1, r3
 8008de0:	2004      	movs	r0, #4
 8008de2:	f000 fd1d 	bl	8009820 <xQueueCreateMutexStatic>
 8008de6:	6278      	str	r0, [r7, #36]	; 0x24
 8008de8:	e016      	b.n	8008e18 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	4619      	mov	r1, r3
 8008df0:	2001      	movs	r0, #1
 8008df2:	f000 fd15 	bl	8009820 <xQueueCreateMutexStatic>
 8008df6:	6278      	str	r0, [r7, #36]	; 0x24
 8008df8:	e00e      	b.n	8008e18 <osMutexNew+0xf0>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
      else {
        if (mem == 0) {
<<<<<<< HEAD
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10b      	bne.n	8008ad8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008ac6:	2004      	movs	r0, #4
 8008ac8:	f000 fcf2 	bl	80094b0 <xQueueCreateMutex>
 8008acc:	6278      	str	r0, [r7, #36]	; 0x24
 8008ace:	e003      	b.n	8008ad8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	f000 fced 	bl	80094b0 <xQueueCreateMutex>
 8008ad6:	6278      	str	r0, [r7, #36]	; 0x24
=======
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10b      	bne.n	8008e18 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008e06:	2004      	movs	r0, #4
 8008e08:	f000 fcf2 	bl	80097f0 <xQueueCreateMutex>
 8008e0c:	6278      	str	r0, [r7, #36]	; 0x24
 8008e0e:	e003      	b.n	8008e18 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008e10:	2001      	movs	r0, #1
 8008e12:	f000 fced 	bl	80097f0 <xQueueCreateMutex>
 8008e16:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> e9380fc... optimisation RAM=)
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
<<<<<<< HEAD
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00c      	beq.n	8008af8 <osMutexNew+0x110>
        if (attr != NULL) {
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d003      	beq.n	8008aec <osMutexNew+0x104>
          name = attr->name;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e001      	b.n	8008af0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008af0:	6979      	ldr	r1, [r7, #20]
 8008af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008af4:	f001 fbbe 	bl	800a274 <vQueueAddToRegistry>
=======
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00c      	beq.n	8008e38 <osMutexNew+0x110>
        if (attr != NULL) {
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d003      	beq.n	8008e2c <osMutexNew+0x104>
          name = attr->name;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	617b      	str	r3, [r7, #20]
 8008e2a:	e001      	b.n	8008e30 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008e30:	6979      	ldr	r1, [r7, #20]
 8008e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e34:	f001 fbbe 	bl	800a5b4 <vQueueAddToRegistry>
>>>>>>> e9380fc... optimisation RAM=)
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
<<<<<<< HEAD
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d006      	beq.n	8008b0c <osMutexNew+0x124>
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d006      	beq.n	8008e4c <osMutexNew+0x124>
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d003      	beq.n	8008e4c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	f043 0301 	orr.w	r3, r3, #1
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
  }

  return ((osMutexId_t)hMutex);
<<<<<<< HEAD
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3728      	adds	r7, #40	; 0x28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000418 	.word	0x20000418

08008b1c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
=======
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3728      	adds	r7, #40	; 0x28
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000b34 	.word	0x20000b34

08008e5c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
<<<<<<< HEAD
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b3a:	f3ef 8305 	mrs	r3, IPSR
 8008b3e:	613b      	str	r3, [r7, #16]
  return(result);
 8008b40:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10f      	bne.n	8008b66 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b46:	f3ef 8310 	mrs	r3, PRIMASK
 8008b4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d109      	bne.n	8008b66 <osMutexAcquire+0x4a>
 8008b52:	4b20      	ldr	r3, [pc, #128]	; (8008bd4 <osMutexAcquire+0xb8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d109      	bne.n	8008b6e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8008b5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008b66:	f06f 0305 	mvn.w	r3, #5
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	e02c      	b.n	8008bc8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d103      	bne.n	8008b7c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008b74:	f06f 0303 	mvn.w	r3, #3
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	e025      	b.n	8008bc8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d011      	beq.n	8008ba6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	69b8      	ldr	r0, [r7, #24]
 8008b86:	f000 fcfa 	bl	800957e <xQueueTakeMutexRecursive>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d01b      	beq.n	8008bc8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008b96:	f06f 0301 	mvn.w	r3, #1
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	e014      	b.n	8008bc8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008b9e:	f06f 0302 	mvn.w	r3, #2
 8008ba2:	61fb      	str	r3, [r7, #28]
 8008ba4:	e010      	b.n	8008bc8 <osMutexAcquire+0xac>
=======
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e7a:	f3ef 8305 	mrs	r3, IPSR
 8008e7e:	613b      	str	r3, [r7, #16]
  return(result);
 8008e80:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10f      	bne.n	8008ea6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e86:	f3ef 8310 	mrs	r3, PRIMASK
 8008e8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d109      	bne.n	8008ea6 <osMutexAcquire+0x4a>
 8008e92:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <osMutexAcquire+0xb8>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d109      	bne.n	8008eae <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008ea6:	f06f 0305 	mvn.w	r3, #5
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	e02c      	b.n	8008f08 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d103      	bne.n	8008ebc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008eb4:	f06f 0303 	mvn.w	r3, #3
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	e025      	b.n	8008f08 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d011      	beq.n	8008ee6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	69b8      	ldr	r0, [r7, #24]
 8008ec6:	f000 fcfa 	bl	80098be <xQueueTakeMutexRecursive>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d01b      	beq.n	8008f08 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008ed6:	f06f 0301 	mvn.w	r3, #1
 8008eda:	61fb      	str	r3, [r7, #28]
 8008edc:	e014      	b.n	8008f08 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008ede:	f06f 0302 	mvn.w	r3, #2
 8008ee2:	61fb      	str	r3, [r7, #28]
 8008ee4:	e010      	b.n	8008f08 <osMutexAcquire+0xac>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
<<<<<<< HEAD
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	69b8      	ldr	r0, [r7, #24]
 8008baa:	f001 f88d 	bl	8009cc8 <xQueueSemaphoreTake>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d009      	beq.n	8008bc8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008bba:	f06f 0301 	mvn.w	r3, #1
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	e002      	b.n	8008bc8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008bc2:	f06f 0302 	mvn.w	r3, #2
 8008bc6:	61fb      	str	r3, [r7, #28]
=======
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	69b8      	ldr	r0, [r7, #24]
 8008eea:	f001 f88d 	bl	800a008 <xQueueSemaphoreTake>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d009      	beq.n	8008f08 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008efa:	f06f 0301 	mvn.w	r3, #1
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	e002      	b.n	8008f08 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008f02:	f06f 0302 	mvn.w	r3, #2
 8008f06:	61fb      	str	r3, [r7, #28]
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
  }

  return (stat);
<<<<<<< HEAD
 8008bc8:	69fb      	ldr	r3, [r7, #28]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3720      	adds	r7, #32
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000418 	.word	0x20000418

08008bd8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
=======
 8008f08:	69fb      	ldr	r3, [r7, #28]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3720      	adds	r7, #32
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000b34 	.word	0x20000b34

08008f18 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
<<<<<<< HEAD
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f023 0301 	bic.w	r3, r3, #1
 8008be6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bf4:	f3ef 8305 	mrs	r3, IPSR
 8008bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8008bfa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10f      	bne.n	8008c20 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c00:	f3ef 8310 	mrs	r3, PRIMASK
 8008c04:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d109      	bne.n	8008c20 <osMutexRelease+0x48>
 8008c0c:	4b19      	ldr	r3, [pc, #100]	; (8008c74 <osMutexRelease+0x9c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d109      	bne.n	8008c28 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c14:	f3ef 8311 	mrs	r3, BASEPRI
 8008c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008c20:	f06f 0305 	mvn.w	r3, #5
 8008c24:	61fb      	str	r3, [r7, #28]
 8008c26:	e01f      	b.n	8008c68 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d103      	bne.n	8008c36 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008c2e:	f06f 0303 	mvn.w	r3, #3
 8008c32:	61fb      	str	r3, [r7, #28]
 8008c34:	e018      	b.n	8008c68 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d009      	beq.n	8008c50 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008c3c:	69b8      	ldr	r0, [r7, #24]
 8008c3e:	f000 fc6a 	bl	8009516 <xQueueGiveMutexRecursive>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d00f      	beq.n	8008c68 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008c48:	f06f 0302 	mvn.w	r3, #2
 8008c4c:	61fb      	str	r3, [r7, #28]
 8008c4e:	e00b      	b.n	8008c68 <osMutexRelease+0x90>
=======
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f023 0301 	bic.w	r3, r3, #1
 8008f26:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f34:	f3ef 8305 	mrs	r3, IPSR
 8008f38:	613b      	str	r3, [r7, #16]
  return(result);
 8008f3a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10f      	bne.n	8008f60 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f40:	f3ef 8310 	mrs	r3, PRIMASK
 8008f44:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d109      	bne.n	8008f60 <osMutexRelease+0x48>
 8008f4c:	4b19      	ldr	r3, [pc, #100]	; (8008fb4 <osMutexRelease+0x9c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d109      	bne.n	8008f68 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f54:	f3ef 8311 	mrs	r3, BASEPRI
 8008f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008f60:	f06f 0305 	mvn.w	r3, #5
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	e01f      	b.n	8008fa8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008f6e:	f06f 0303 	mvn.w	r3, #3
 8008f72:	61fb      	str	r3, [r7, #28]
 8008f74:	e018      	b.n	8008fa8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d009      	beq.n	8008f90 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008f7c:	69b8      	ldr	r0, [r7, #24]
 8008f7e:	f000 fc6a 	bl	8009856 <xQueueGiveMutexRecursive>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d00f      	beq.n	8008fa8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008f88:	f06f 0302 	mvn.w	r3, #2
 8008f8c:	61fb      	str	r3, [r7, #28]
 8008f8e:	e00b      	b.n	8008fa8 <osMutexRelease+0x90>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
<<<<<<< HEAD
 8008c50:	2300      	movs	r3, #0
 8008c52:	2200      	movs	r2, #0
 8008c54:	2100      	movs	r1, #0
 8008c56:	69b8      	ldr	r0, [r7, #24]
 8008c58:	f000 fd32 	bl	80096c0 <xQueueGenericSend>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d002      	beq.n	8008c68 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008c62:	f06f 0302 	mvn.w	r3, #2
 8008c66:	61fb      	str	r3, [r7, #28]
=======
 8008f90:	2300      	movs	r3, #0
 8008f92:	2200      	movs	r2, #0
 8008f94:	2100      	movs	r1, #0
 8008f96:	69b8      	ldr	r0, [r7, #24]
 8008f98:	f000 fd32 	bl	8009a00 <xQueueGenericSend>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d002      	beq.n	8008fa8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008fa2:	f06f 0302 	mvn.w	r3, #2
 8008fa6:	61fb      	str	r3, [r7, #28]
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
  }

  return (stat);
<<<<<<< HEAD
 8008c68:	69fb      	ldr	r3, [r7, #28]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000418 	.word	0x20000418

08008c78 <osSemaphoreNew>:
=======
 8008fa8:	69fb      	ldr	r3, [r7, #28]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000b34 	.word	0x20000b34

08008fb8 <osSemaphoreNew>:
>>>>>>> e9380fc... optimisation RAM=)
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
<<<<<<< HEAD
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08c      	sub	sp, #48	; 0x30
 8008c7c:	af02      	add	r7, sp, #8
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
=======
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08c      	sub	sp, #48	; 0x30
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
<<<<<<< HEAD
 8008c84:	2300      	movs	r3, #0
 8008c86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c88:	f3ef 8305 	mrs	r3, IPSR
 8008c8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c8e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f040 8086 	bne.w	8008da2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c96:	f3ef 8310 	mrs	r3, PRIMASK
 8008c9a:	617b      	str	r3, [r7, #20]
  return(result);
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d17f      	bne.n	8008da2 <osSemaphoreNew+0x12a>
 8008ca2:	4b42      	ldr	r3, [pc, #264]	; (8008dac <osSemaphoreNew+0x134>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d105      	bne.n	8008cb6 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008caa:	f3ef 8311 	mrs	r3, BASEPRI
 8008cae:	613b      	str	r3, [r7, #16]
  return(result);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d175      	bne.n	8008da2 <osSemaphoreNew+0x12a>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d072      	beq.n	8008da2 <osSemaphoreNew+0x12a>
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d86e      	bhi.n	8008da2 <osSemaphoreNew+0x12a>
    mem = -1;
 8008cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d015      	beq.n	8008cfc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d006      	beq.n	8008ce6 <osSemaphoreNew+0x6e>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2b4f      	cmp	r3, #79	; 0x4f
 8008cde:	d902      	bls.n	8008ce6 <osSemaphoreNew+0x6e>
        mem = 1;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	623b      	str	r3, [r7, #32]
 8008ce4:	e00c      	b.n	8008d00 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d108      	bne.n	8008d00 <osSemaphoreNew+0x88>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d104      	bne.n	8008d00 <osSemaphoreNew+0x88>
          mem = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	623b      	str	r3, [r7, #32]
 8008cfa:	e001      	b.n	8008d00 <osSemaphoreNew+0x88>
=======
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fc8:	f3ef 8305 	mrs	r3, IPSR
 8008fcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8008fce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f040 8086 	bne.w	80090e2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8008fda:	617b      	str	r3, [r7, #20]
  return(result);
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d17f      	bne.n	80090e2 <osSemaphoreNew+0x12a>
 8008fe2:	4b42      	ldr	r3, [pc, #264]	; (80090ec <osSemaphoreNew+0x134>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d105      	bne.n	8008ff6 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fea:	f3ef 8311 	mrs	r3, BASEPRI
 8008fee:	613b      	str	r3, [r7, #16]
  return(result);
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d175      	bne.n	80090e2 <osSemaphoreNew+0x12a>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d072      	beq.n	80090e2 <osSemaphoreNew+0x12a>
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	429a      	cmp	r2, r3
 8009002:	d86e      	bhi.n	80090e2 <osSemaphoreNew+0x12a>
    mem = -1;
 8009004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009008:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d015      	beq.n	800903c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d006      	beq.n	8009026 <osSemaphoreNew+0x6e>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	2b4f      	cmp	r3, #79	; 0x4f
 800901e:	d902      	bls.n	8009026 <osSemaphoreNew+0x6e>
        mem = 1;
 8009020:	2301      	movs	r3, #1
 8009022:	623b      	str	r3, [r7, #32]
 8009024:	e00c      	b.n	8009040 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d108      	bne.n	8009040 <osSemaphoreNew+0x88>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d104      	bne.n	8009040 <osSemaphoreNew+0x88>
          mem = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	623b      	str	r3, [r7, #32]
 800903a:	e001      	b.n	8009040 <osSemaphoreNew+0x88>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d06:	d04c      	beq.n	8008da2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d128      	bne.n	8008d60 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d10a      	bne.n	8008d2a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	2203      	movs	r2, #3
 8008d1a:	9200      	str	r2, [sp, #0]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2100      	movs	r1, #0
 8008d20:	2001      	movs	r0, #1
 8008d22:	f000 fad3 	bl	80092cc <xQueueGenericCreateStatic>
 8008d26:	6278      	str	r0, [r7, #36]	; 0x24
 8008d28:	e005      	b.n	8008d36 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008d2a:	2203      	movs	r2, #3
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	2001      	movs	r0, #1
 8008d30:	f000 fb43 	bl	80093ba <xQueueGenericCreate>
 8008d34:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d022      	beq.n	8008d82 <osSemaphoreNew+0x10a>
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d01f      	beq.n	8008d82 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d42:	2300      	movs	r3, #0
 8008d44:	2200      	movs	r2, #0
 8008d46:	2100      	movs	r1, #0
 8008d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d4a:	f000 fcb9 	bl	80096c0 <xQueueGenericSend>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d016      	beq.n	8008d82 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d56:	f001 f943 	bl	8009fe0 <vQueueDelete>
            hSemaphore = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d5e:	e010      	b.n	8008d82 <osSemaphoreNew+0x10a>
=======
 800903c:	2300      	movs	r3, #0
 800903e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009046:	d04c      	beq.n	80090e2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d128      	bne.n	80090a0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d10a      	bne.n	800906a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	2203      	movs	r2, #3
 800905a:	9200      	str	r2, [sp, #0]
 800905c:	2200      	movs	r2, #0
 800905e:	2100      	movs	r1, #0
 8009060:	2001      	movs	r0, #1
 8009062:	f000 fad3 	bl	800960c <xQueueGenericCreateStatic>
 8009066:	6278      	str	r0, [r7, #36]	; 0x24
 8009068:	e005      	b.n	8009076 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800906a:	2203      	movs	r2, #3
 800906c:	2100      	movs	r1, #0
 800906e:	2001      	movs	r0, #1
 8009070:	f000 fb43 	bl	80096fa <xQueueGenericCreate>
 8009074:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d022      	beq.n	80090c2 <osSemaphoreNew+0x10a>
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01f      	beq.n	80090c2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009082:	2300      	movs	r3, #0
 8009084:	2200      	movs	r2, #0
 8009086:	2100      	movs	r1, #0
 8009088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800908a:	f000 fcb9 	bl	8009a00 <xQueueGenericSend>
 800908e:	4603      	mov	r3, r0
 8009090:	2b01      	cmp	r3, #1
 8009092:	d016      	beq.n	80090c2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8009094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009096:	f001 f943 	bl	800a320 <vQueueDelete>
            hSemaphore = NULL;
 800909a:	2300      	movs	r3, #0
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
 800909e:	e010      	b.n	80090c2 <osSemaphoreNew+0x10a>
>>>>>>> e9380fc... optimisation RAM=)
          }
        }
      }
      else {
        if (mem == 1) {
<<<<<<< HEAD
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d108      	bne.n	8008d78 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 fc3b 	bl	80095ea <xQueueCreateCountingSemaphoreStatic>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24
 8008d76:	e004      	b.n	8008d82 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008d78:	68b9      	ldr	r1, [r7, #8]
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fc6c 	bl	8009658 <xQueueCreateCountingSemaphore>
 8008d80:	6278      	str	r0, [r7, #36]	; 0x24
=======
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d108      	bne.n	80090b8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	461a      	mov	r2, r3
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fc3b 	bl	800992a <xQueueCreateCountingSemaphoreStatic>
 80090b4:	6278      	str	r0, [r7, #36]	; 0x24
 80090b6:	e004      	b.n	80090c2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80090b8:	68b9      	ldr	r1, [r7, #8]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fc6c 	bl	8009998 <xQueueCreateCountingSemaphore>
 80090c0:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> e9380fc... optimisation RAM=)
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
<<<<<<< HEAD
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00c      	beq.n	8008da2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <osSemaphoreNew+0x11e>
          name = attr->name;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e001      	b.n	8008d9a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008d9a:	69f9      	ldr	r1, [r7, #28]
 8008d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d9e:	f001 fa69 	bl	800a274 <vQueueAddToRegistry>
=======
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00c      	beq.n	80090e2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	e001      	b.n	80090da <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80090da:	69f9      	ldr	r1, [r7, #28]
 80090dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090de:	f001 fa69 	bl	800a5b4 <vQueueAddToRegistry>
>>>>>>> e9380fc... optimisation RAM=)
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
<<<<<<< HEAD
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3728      	adds	r7, #40	; 0x28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20000418 	.word	0x20000418

08008db0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	61bb      	str	r3, [r7, #24]
=======
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3728      	adds	r7, #40	; 0x28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20000b34 	.word	0x20000b34

080090f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	61bb      	str	r3, [r7, #24]
>>>>>>> e9380fc... optimisation RAM=)
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
<<<<<<< HEAD
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d103      	bne.n	8008dd0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008dc8:	f06f 0303 	mvn.w	r3, #3
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	e04b      	b.n	8008e68 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd0:	f3ef 8305 	mrs	r3, IPSR
 8008dd4:	617b      	str	r3, [r7, #20]
  return(result);
 8008dd6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10f      	bne.n	8008dfc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8008de0:	613b      	str	r3, [r7, #16]
  return(result);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d109      	bne.n	8008dfc <osSemaphoreAcquire+0x4c>
 8008de8:	4b22      	ldr	r3, [pc, #136]	; (8008e74 <osSemaphoreAcquire+0xc4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d128      	bne.n	8008e42 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008df0:	f3ef 8311 	mrs	r3, BASEPRI
 8008df4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d022      	beq.n	8008e42 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008e02:	f06f 0303 	mvn.w	r3, #3
 8008e06:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008e08:	e02d      	b.n	8008e66 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008e0e:	f107 0308 	add.w	r3, r7, #8
 8008e12:	461a      	mov	r2, r3
 8008e14:	2100      	movs	r1, #0
 8008e16:	69b8      	ldr	r0, [r7, #24]
 8008e18:	f001 f862 	bl	8009ee0 <xQueueReceiveFromISR>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d003      	beq.n	8008e2a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008e22:	f06f 0302 	mvn.w	r3, #2
 8008e26:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008e28:	e01d      	b.n	8008e66 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01a      	beq.n	8008e66 <osSemaphoreAcquire+0xb6>
 8008e30:	4b11      	ldr	r3, [pc, #68]	; (8008e78 <osSemaphoreAcquire+0xc8>)
 8008e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008e40:	e011      	b.n	8008e66 <osSemaphoreAcquire+0xb6>
=======
 80090fe:	2300      	movs	r3, #0
 8009100:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d103      	bne.n	8009110 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009108:	f06f 0303 	mvn.w	r3, #3
 800910c:	61fb      	str	r3, [r7, #28]
 800910e:	e04b      	b.n	80091a8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009110:	f3ef 8305 	mrs	r3, IPSR
 8009114:	617b      	str	r3, [r7, #20]
  return(result);
 8009116:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10f      	bne.n	800913c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800911c:	f3ef 8310 	mrs	r3, PRIMASK
 8009120:	613b      	str	r3, [r7, #16]
  return(result);
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <osSemaphoreAcquire+0x4c>
 8009128:	4b22      	ldr	r3, [pc, #136]	; (80091b4 <osSemaphoreAcquire+0xc4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b02      	cmp	r3, #2
 800912e:	d128      	bne.n	8009182 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009130:	f3ef 8311 	mrs	r3, BASEPRI
 8009134:	60fb      	str	r3, [r7, #12]
  return(result);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d022      	beq.n	8009182 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8009142:	f06f 0303 	mvn.w	r3, #3
 8009146:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009148:	e02d      	b.n	80091a6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800914a:	2300      	movs	r3, #0
 800914c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800914e:	f107 0308 	add.w	r3, r7, #8
 8009152:	461a      	mov	r2, r3
 8009154:	2100      	movs	r1, #0
 8009156:	69b8      	ldr	r0, [r7, #24]
 8009158:	f001 f862 	bl	800a220 <xQueueReceiveFromISR>
 800915c:	4603      	mov	r3, r0
 800915e:	2b01      	cmp	r3, #1
 8009160:	d003      	beq.n	800916a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8009162:	f06f 0302 	mvn.w	r3, #2
 8009166:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8009168:	e01d      	b.n	80091a6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01a      	beq.n	80091a6 <osSemaphoreAcquire+0xb6>
 8009170:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <osSemaphoreAcquire+0xc8>)
 8009172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8009180:	e011      	b.n	80091a6 <osSemaphoreAcquire+0xb6>
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
<<<<<<< HEAD
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	69b8      	ldr	r0, [r7, #24]
 8008e46:	f000 ff3f 	bl	8009cc8 <xQueueSemaphoreTake>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d00b      	beq.n	8008e68 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008e56:	f06f 0301 	mvn.w	r3, #1
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	e004      	b.n	8008e68 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008e5e:	f06f 0302 	mvn.w	r3, #2
 8008e62:	61fb      	str	r3, [r7, #28]
 8008e64:	e000      	b.n	8008e68 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008e66:	bf00      	nop
=======
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	69b8      	ldr	r0, [r7, #24]
 8009186:	f000 ff3f 	bl	800a008 <xQueueSemaphoreTake>
 800918a:	4603      	mov	r3, r0
 800918c:	2b01      	cmp	r3, #1
 800918e:	d00b      	beq.n	80091a8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8009196:	f06f 0301 	mvn.w	r3, #1
 800919a:	61fb      	str	r3, [r7, #28]
 800919c:	e004      	b.n	80091a8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800919e:	f06f 0302 	mvn.w	r3, #2
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	e000      	b.n	80091a8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80091a6:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
      }
    }
  }

  return (stat);
<<<<<<< HEAD
 8008e68:	69fb      	ldr	r3, [r7, #28]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3720      	adds	r7, #32
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000418 	.word	0x20000418
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	61bb      	str	r3, [r7, #24]
=======
 80091a8:	69fb      	ldr	r3, [r7, #28]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3720      	adds	r7, #32
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20000b34 	.word	0x20000b34
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	61bb      	str	r3, [r7, #24]
>>>>>>> e9380fc... optimisation RAM=)
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
<<<<<<< HEAD
 8008e88:	2300      	movs	r3, #0
 8008e8a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d103      	bne.n	8008e9a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008e92:	f06f 0303 	mvn.w	r3, #3
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	e03e      	b.n	8008f18 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e9a:	f3ef 8305 	mrs	r3, IPSR
 8008e9e:	617b      	str	r3, [r7, #20]
  return(result);
 8008ea0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10f      	bne.n	8008ec6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eaa:	613b      	str	r3, [r7, #16]
  return(result);
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d109      	bne.n	8008ec6 <osSemaphoreRelease+0x4a>
 8008eb2:	4b1c      	ldr	r3, [pc, #112]	; (8008f24 <osSemaphoreRelease+0xa8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d120      	bne.n	8008efc <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008eba:	f3ef 8311 	mrs	r3, BASEPRI
 8008ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01a      	beq.n	8008efc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008eca:	f107 0308 	add.w	r3, r7, #8
 8008ece:	4619      	mov	r1, r3
 8008ed0:	69b8      	ldr	r0, [r7, #24]
 8008ed2:	f000 fd8b 	bl	80099ec <xQueueGiveFromISR>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d003      	beq.n	8008ee4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008edc:	f06f 0302 	mvn.w	r3, #2
 8008ee0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ee2:	e018      	b.n	8008f16 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d015      	beq.n	8008f16 <osSemaphoreRelease+0x9a>
 8008eea:	4b0f      	ldr	r3, [pc, #60]	; (8008f28 <osSemaphoreRelease+0xac>)
 8008eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008efa:	e00c      	b.n	8008f16 <osSemaphoreRelease+0x9a>
=======
 80091c8:	2300      	movs	r3, #0
 80091ca:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d103      	bne.n	80091da <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80091d2:	f06f 0303 	mvn.w	r3, #3
 80091d6:	61fb      	str	r3, [r7, #28]
 80091d8:	e03e      	b.n	8009258 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091da:	f3ef 8305 	mrs	r3, IPSR
 80091de:	617b      	str	r3, [r7, #20]
  return(result);
 80091e0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10f      	bne.n	8009206 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091e6:	f3ef 8310 	mrs	r3, PRIMASK
 80091ea:	613b      	str	r3, [r7, #16]
  return(result);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <osSemaphoreRelease+0x4a>
 80091f2:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <osSemaphoreRelease+0xa8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d120      	bne.n	800923c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091fa:	f3ef 8311 	mrs	r3, BASEPRI
 80091fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01a      	beq.n	800923c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8009206:	2300      	movs	r3, #0
 8009208:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800920a:	f107 0308 	add.w	r3, r7, #8
 800920e:	4619      	mov	r1, r3
 8009210:	69b8      	ldr	r0, [r7, #24]
 8009212:	f000 fd8b 	bl	8009d2c <xQueueGiveFromISR>
 8009216:	4603      	mov	r3, r0
 8009218:	2b01      	cmp	r3, #1
 800921a:	d003      	beq.n	8009224 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800921c:	f06f 0302 	mvn.w	r3, #2
 8009220:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009222:	e018      	b.n	8009256 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d015      	beq.n	8009256 <osSemaphoreRelease+0x9a>
 800922a:	4b0f      	ldr	r3, [pc, #60]	; (8009268 <osSemaphoreRelease+0xac>)
 800922c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800923a:	e00c      	b.n	8009256 <osSemaphoreRelease+0x9a>
>>>>>>> e9380fc... optimisation RAM=)
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
<<<<<<< HEAD
 8008efc:	2300      	movs	r3, #0
 8008efe:	2200      	movs	r2, #0
 8008f00:	2100      	movs	r1, #0
 8008f02:	69b8      	ldr	r0, [r7, #24]
 8008f04:	f000 fbdc 	bl	80096c0 <xQueueGenericSend>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d004      	beq.n	8008f18 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008f0e:	f06f 0302 	mvn.w	r3, #2
 8008f12:	61fb      	str	r3, [r7, #28]
 8008f14:	e000      	b.n	8008f18 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008f16:	bf00      	nop
=======
 800923c:	2300      	movs	r3, #0
 800923e:	2200      	movs	r2, #0
 8009240:	2100      	movs	r1, #0
 8009242:	69b8      	ldr	r0, [r7, #24]
 8009244:	f000 fbdc 	bl	8009a00 <xQueueGenericSend>
 8009248:	4603      	mov	r3, r0
 800924a:	2b01      	cmp	r3, #1
 800924c:	d004      	beq.n	8009258 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800924e:	f06f 0302 	mvn.w	r3, #2
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	e000      	b.n	8009258 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009256:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
    }
  }

  return (stat);
<<<<<<< HEAD
 8008f18:	69fb      	ldr	r3, [r7, #28]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3720      	adds	r7, #32
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000418 	.word	0x20000418
 8008f28:	e000ed04 	.word	0xe000ed04

08008f2c <osMessageQueueNew>:
=======
 8009258:	69fb      	ldr	r3, [r7, #28]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000b34 	.word	0x20000b34
 8009268:	e000ed04 	.word	0xe000ed04

0800926c <osMessageQueueNew>:
>>>>>>> e9380fc... optimisation RAM=)
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
<<<<<<< HEAD
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b08c      	sub	sp, #48	; 0x30
 8008f30:	af02      	add	r7, sp, #8
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
=======
 800926c:	b580      	push	{r7, lr}
 800926e:	b08c      	sub	sp, #48	; 0x30
 8009270:	af02      	add	r7, sp, #8
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
<<<<<<< HEAD
 8008f38:	2300      	movs	r3, #0
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f3c:	f3ef 8305 	mrs	r3, IPSR
 8008f40:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d16f      	bne.n	8009028 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f48:	f3ef 8310 	mrs	r3, PRIMASK
 8008f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d169      	bne.n	8009028 <osMessageQueueNew+0xfc>
 8008f54:	4b37      	ldr	r3, [pc, #220]	; (8009034 <osMessageQueueNew+0x108>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d105      	bne.n	8008f68 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8008f60:	613b      	str	r3, [r7, #16]
  return(result);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d15f      	bne.n	8009028 <osMessageQueueNew+0xfc>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d05c      	beq.n	8009028 <osMessageQueueNew+0xfc>
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d059      	beq.n	8009028 <osMessageQueueNew+0xfc>
    mem = -1;
 8008f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f78:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d029      	beq.n	8008fd4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d012      	beq.n	8008fae <osMessageQueueNew+0x82>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	2b4f      	cmp	r3, #79	; 0x4f
 8008f8e:	d90e      	bls.n	8008fae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	695a      	ldr	r2, [r3, #20]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	fb01 f303 	mul.w	r3, r1, r3
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d302      	bcc.n	8008fae <osMessageQueueNew+0x82>
        mem = 1;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	623b      	str	r3, [r7, #32]
 8008fac:	e014      	b.n	8008fd8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d110      	bne.n	8008fd8 <osMessageQueueNew+0xac>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10c      	bne.n	8008fd8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d108      	bne.n	8008fd8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d104      	bne.n	8008fd8 <osMessageQueueNew+0xac>
          mem = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	623b      	str	r3, [r7, #32]
 8008fd2:	e001      	b.n	8008fd8 <osMessageQueueNew+0xac>
=======
 8009278:	2300      	movs	r3, #0
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800927c:	f3ef 8305 	mrs	r3, IPSR
 8009280:	61bb      	str	r3, [r7, #24]
  return(result);
 8009282:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009284:	2b00      	cmp	r3, #0
 8009286:	d16f      	bne.n	8009368 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009288:	f3ef 8310 	mrs	r3, PRIMASK
 800928c:	617b      	str	r3, [r7, #20]
  return(result);
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d169      	bne.n	8009368 <osMessageQueueNew+0xfc>
 8009294:	4b37      	ldr	r3, [pc, #220]	; (8009374 <osMessageQueueNew+0x108>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d105      	bne.n	80092a8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800929c:	f3ef 8311 	mrs	r3, BASEPRI
 80092a0:	613b      	str	r3, [r7, #16]
  return(result);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d15f      	bne.n	8009368 <osMessageQueueNew+0xfc>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d05c      	beq.n	8009368 <osMessageQueueNew+0xfc>
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d059      	beq.n	8009368 <osMessageQueueNew+0xfc>
    mem = -1;
 80092b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d029      	beq.n	8009314 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d012      	beq.n	80092ee <osMessageQueueNew+0x82>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	2b4f      	cmp	r3, #79	; 0x4f
 80092ce:	d90e      	bls.n	80092ee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00a      	beq.n	80092ee <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695a      	ldr	r2, [r3, #20]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	fb01 f303 	mul.w	r3, r1, r3
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d302      	bcc.n	80092ee <osMessageQueueNew+0x82>
        mem = 1;
 80092e8:	2301      	movs	r3, #1
 80092ea:	623b      	str	r3, [r7, #32]
 80092ec:	e014      	b.n	8009318 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d110      	bne.n	8009318 <osMessageQueueNew+0xac>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10c      	bne.n	8009318 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009302:	2b00      	cmp	r3, #0
 8009304:	d108      	bne.n	8009318 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d104      	bne.n	8009318 <osMessageQueueNew+0xac>
          mem = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	623b      	str	r3, [r7, #32]
 8009312:	e001      	b.n	8009318 <osMessageQueueNew+0xac>
>>>>>>> e9380fc... optimisation RAM=)
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d10b      	bne.n	8008ff6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691a      	ldr	r2, [r3, #16]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	9100      	str	r1, [sp, #0]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f96d 	bl	80092cc <xQueueGenericCreateStatic>
 8008ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ff4:	e008      	b.n	8009008 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 f9da 	bl	80093ba <xQueueGenericCreate>
 8009006:	6278      	str	r0, [r7, #36]	; 0x24
=======
 8009314:	2300      	movs	r3, #0
 8009316:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d10b      	bne.n	8009336 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	691a      	ldr	r2, [r3, #16]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	2100      	movs	r1, #0
 8009328:	9100      	str	r1, [sp, #0]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 f96d 	bl	800960c <xQueueGenericCreateStatic>
 8009332:	6278      	str	r0, [r7, #36]	; 0x24
 8009334:	e008      	b.n	8009348 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d105      	bne.n	8009348 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800933c:	2200      	movs	r2, #0
 800933e:	68b9      	ldr	r1, [r7, #8]
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f9da 	bl	80096fa <xQueueGenericCreate>
 8009346:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> e9380fc... optimisation RAM=)
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
<<<<<<< HEAD
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00c      	beq.n	8009028 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <osMessageQueueNew+0xf0>
        name = attr->name;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	e001      	b.n	8009020 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800901c:	2300      	movs	r3, #0
 800901e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009020:	69f9      	ldr	r1, [r7, #28]
 8009022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009024:	f001 f926 	bl	800a274 <vQueueAddToRegistry>
=======
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <osMessageQueueNew+0xf0>
        name = attr->name;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	61fb      	str	r3, [r7, #28]
 800935a:	e001      	b.n	8009360 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800935c:	2300      	movs	r3, #0
 800935e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009360:	69f9      	ldr	r1, [r7, #28]
 8009362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009364:	f001 f926 	bl	800a5b4 <vQueueAddToRegistry>
>>>>>>> e9380fc... optimisation RAM=)
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
<<<<<<< HEAD
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800902a:	4618      	mov	r0, r3
 800902c:	3728      	adds	r7, #40	; 0x28
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000418 	.word	0x20000418

08009038 <vApplicationGetIdleTaskMemory>:
=======
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800936a:	4618      	mov	r0, r3
 800936c:	3728      	adds	r7, #40	; 0x28
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20000b34 	.word	0x20000b34

08009378 <vApplicationGetIdleTaskMemory>:
>>>>>>> e9380fc... optimisation RAM=)

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a06      	ldr	r2, [pc, #24]	; (8009060 <vApplicationGetIdleTaskMemory+0x28>)
 8009048:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	4a05      	ldr	r2, [pc, #20]	; (8009064 <vApplicationGetIdleTaskMemory+0x2c>)
 800904e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2280      	movs	r2, #128	; 0x80
 8009054:	601a      	str	r2, [r3, #0]
}
 8009056:	bf00      	nop
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	bc80      	pop	{r7}
 800905e:	4770      	bx	lr
 8009060:	2000041c 	.word	0x2000041c
 8009064:	200004d8 	.word	0x200004d8

08009068 <vApplicationGetTimerTaskMemory>:
=======
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4a06      	ldr	r2, [pc, #24]	; (80093a0 <vApplicationGetIdleTaskMemory+0x28>)
 8009388:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	4a05      	ldr	r2, [pc, #20]	; (80093a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800938e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2280      	movs	r2, #128	; 0x80
 8009394:	601a      	str	r2, [r3, #0]
}
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr
 80093a0:	20000b38 	.word	0x20000b38
 80093a4:	20000bf8 	.word	0x20000bf8

080093a8 <vApplicationGetTimerTaskMemory>:
>>>>>>> e9380fc... optimisation RAM=)

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4a07      	ldr	r2, [pc, #28]	; (8009094 <vApplicationGetTimerTaskMemory+0x2c>)
 8009078:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4a06      	ldr	r2, [pc, #24]	; (8009098 <vApplicationGetTimerTaskMemory+0x30>)
 800907e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009086:	601a      	str	r2, [r3, #0]
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	200006d8 	.word	0x200006d8
 8009098:	20000794 	.word	0x20000794

0800909c <vListInitialise>:
=======
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4a07      	ldr	r2, [pc, #28]	; (80093d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80093b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	4a06      	ldr	r2, [pc, #24]	; (80093d8 <vApplicationGetTimerTaskMemory+0x30>)
 80093be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093c6:	601a      	str	r2, [r3, #0]
}
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bc80      	pop	{r7}
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000df8 	.word	0x20000df8
 80093d8:	20000eb8 	.word	0x20000eb8

080093dc <vListInitialise>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
=======
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f103 0208 	add.w	r2, r3, #8
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	605a      	str	r2, [r3, #4]
=======
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f103 0208 	add.w	r2, r3, #8
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	605a      	str	r2, [r3, #4]
>>>>>>> e9380fc... optimisation RAM=)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090b4:	609a      	str	r2, [r3, #8]
=======
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093f4:	609a      	str	r2, [r3, #8]
>>>>>>> e9380fc... optimisation RAM=)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f103 0208 	add.w	r2, r3, #8
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f103 0208 	add.w	r2, r3, #8
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
=======
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f103 0208 	add.w	r2, r3, #8
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f103 0208 	add.w	r2, r3, #8
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bc80      	pop	{r7}
 80090d8:	4770      	bx	lr

080090da <vListInitialiseItem>:
=======
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr

0800941a <vListInitialiseItem>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	611a      	str	r2, [r3, #16]
=======
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	611a      	str	r2, [r3, #16]
>>>>>>> e9380fc... optimisation RAM=)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bc80      	pop	{r7}
 80090f0:	4770      	bx	lr

080090f2 <vListInsertEnd>:
=======
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	bc80      	pop	{r7}
 8009430:	4770      	bx	lr

08009432 <vListInsertEnd>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	60fb      	str	r3, [r7, #12]
=======
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	609a      	str	r2, [r3, #8]
=======
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	609a      	str	r2, [r3, #8]
>>>>>>> e9380fc... optimisation RAM=)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	601a      	str	r2, [r3, #0]
}
 800912e:	bf00      	nop
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	bc80      	pop	{r7}
 8009136:	4770      	bx	lr

08009138 <vListInsert>:
=======
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	601a      	str	r2, [r3, #0]
}
 800946e:	bf00      	nop
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr

08009478 <vListInsert>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60bb      	str	r3, [r7, #8]
=======
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60bb      	str	r3, [r7, #8]
>>>>>>> e9380fc... optimisation RAM=)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800914e:	d103      	bne.n	8009158 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e00c      	b.n	8009172 <vListInsert+0x3a>
=======
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800948e:	d103      	bne.n	8009498 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	e00c      	b.n	80094b2 <vListInsert+0x3a>
>>>>>>> e9380fc... optimisation RAM=)
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	3308      	adds	r3, #8
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	e002      	b.n	8009166 <vListInsert+0x2e>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	429a      	cmp	r2, r3
 8009170:	d2f6      	bcs.n	8009160 <vListInsert+0x28>
=======
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3308      	adds	r3, #8
 800949c:	60fb      	str	r3, [r7, #12]
 800949e:	e002      	b.n	80094a6 <vListInsert+0x2e>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d2f6      	bcs.n	80094a0 <vListInsert+0x28>
>>>>>>> e9380fc... optimisation RAM=)
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	605a      	str	r2, [r3, #4]
=======
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	605a      	str	r2, [r3, #4]
>>>>>>> e9380fc... optimisation RAM=)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
<<<<<<< HEAD
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	601a      	str	r2, [r3, #0]
}
 800919e:	bf00      	nop
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr

080091a8 <uxListRemove>:
=======
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	601a      	str	r2, [r3, #0]
}
 80094de:	bf00      	nop
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bc80      	pop	{r7}
 80094e6:	4770      	bx	lr

080094e8 <uxListRemove>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	6892      	ldr	r2, [r2, #8]
 80091be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6852      	ldr	r2, [r2, #4]
 80091c8:	605a      	str	r2, [r3, #4]
=======
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6892      	ldr	r2, [r2, #8]
 80094fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6852      	ldr	r2, [r2, #4]
 8009508:	605a      	str	r2, [r3, #4]
>>>>>>> e9380fc... optimisation RAM=)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d103      	bne.n	80091dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	605a      	str	r2, [r3, #4]
=======
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	429a      	cmp	r2, r3
 8009512:	d103      	bne.n	800951c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	605a      	str	r2, [r3, #4]
>>>>>>> e9380fc... optimisation RAM=)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
<<<<<<< HEAD
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	1e5a      	subs	r2, r3, #1
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bc80      	pop	{r7}
 80091f8:	4770      	bx	lr
	...

080091fc <xQueueGenericReset>:
=======
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	1e5a      	subs	r2, r3, #1
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr
	...

0800953c <xQueueGenericReset>:
>>>>>>> e9380fc... optimisation RAM=)
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10a      	bne.n	8009226 <xQueueGenericReset+0x2a>
=======
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10a      	bne.n	8009566 <xQueueGenericReset+0x2a>
>>>>>>> e9380fc... optimisation RAM=)

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	60bb      	str	r3, [r7, #8]
=======
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	60bb      	str	r3, [r7, #8]
>>>>>>> e9380fc... optimisation RAM=)
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< HEAD
 8009222:	bf00      	nop
 8009224:	e7fe      	b.n	8009224 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009226:	f002 fd99 	bl	800bd5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009236:	fb01 f303 	mul.w	r3, r1, r3
 800923a:	441a      	add	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009256:	3b01      	subs	r3, #1
 8009258:	68f9      	ldr	r1, [r7, #12]
 800925a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800925c:	fb01 f303 	mul.w	r3, r1, r3
 8009260:	441a      	add	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	22ff      	movs	r2, #255	; 0xff
 800926a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	22ff      	movs	r2, #255	; 0xff
 8009272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d114      	bne.n	80092a6 <xQueueGenericReset+0xaa>
=======
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009566:	f003 f8a1 	bl	800c6ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009572:	68f9      	ldr	r1, [r7, #12]
 8009574:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009576:	fb01 f303 	mul.w	r3, r1, r3
 800957a:	441a      	add	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009596:	3b01      	subs	r3, #1
 8009598:	68f9      	ldr	r1, [r7, #12]
 800959a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800959c:	fb01 f303 	mul.w	r3, r1, r3
 80095a0:	441a      	add	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	22ff      	movs	r2, #255	; 0xff
 80095aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	22ff      	movs	r2, #255	; 0xff
 80095b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d114      	bne.n	80095e6 <xQueueGenericReset+0xaa>
>>>>>>> e9380fc... optimisation RAM=)
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01a      	beq.n	80092ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3310      	adds	r3, #16
 8009288:	4618      	mov	r0, r3
 800928a:	f001 fe07 	bl	800ae9c <xTaskRemoveFromEventList>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d012      	beq.n	80092ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009294:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <xQueueGenericReset+0xcc>)
 8009296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	e009      	b.n	80092ba <xQueueGenericReset+0xbe>
=======
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01a      	beq.n	80095fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3310      	adds	r3, #16
 80095c8:	4618      	mov	r0, r3
 80095ca:	f001 fef9 	bl	800b3c0 <xTaskRemoveFromEventList>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d012      	beq.n	80095fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095d4:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <xQueueGenericReset+0xcc>)
 80095d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	e009      	b.n	80095fa <xQueueGenericReset+0xbe>
>>>>>>> e9380fc... optimisation RAM=)
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3310      	adds	r3, #16
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff fef6 	bl	800909c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3324      	adds	r3, #36	; 0x24
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7ff fef1 	bl	800909c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092ba:	f002 fd7f 	bl	800bdbc <vPortExitCritical>
=======
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3310      	adds	r3, #16
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7ff fef6 	bl	80093dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3324      	adds	r3, #36	; 0x24
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7ff fef1 	bl	80093dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095fa:	f003 f887 	bl	800c70c <vPortExitCritical>
>>>>>>> e9380fc... optimisation RAM=)

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 80092be:	2301      	movs	r3, #1
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	e000ed04 	.word	0xe000ed04

080092cc <xQueueGenericCreateStatic>:
=======
 80095fe:	2301      	movs	r3, #1
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	e000ed04 	.word	0xe000ed04

0800960c <xQueueGenericCreateStatic>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08e      	sub	sp, #56	; 0x38
 80092d0:	af02      	add	r7, sp, #8
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xQueueGenericCreateStatic+0x28>
=======
 800960c:	b580      	push	{r7, lr}
 800960e:	b08e      	sub	sp, #56	; 0x38
 8009610:	af02      	add	r7, sp, #8
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009632:	bf00      	nop
 8009634:	e7fe      	b.n	8009634 <xQueueGenericCreateStatic+0x28>
>>>>>>> e9380fc... optimisation RAM=)

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10a      	bne.n	8009312 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800930e:	bf00      	nop
 8009310:	e7fe      	b.n	8009310 <xQueueGenericCreateStatic+0x44>
=======
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xQueueGenericCreateStatic+0x44>
>>>>>>> e9380fc... optimisation RAM=)

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <xQueueGenericCreateStatic+0x52>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <xQueueGenericCreateStatic+0x56>
 800931e:	2301      	movs	r3, #1
 8009320:	e000      	b.n	8009324 <xQueueGenericCreateStatic+0x58>
 8009322:	2300      	movs	r3, #0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	623b      	str	r3, [r7, #32]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d102      	bne.n	800934a <xQueueGenericCreateStatic+0x7e>
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <xQueueGenericCreateStatic+0x82>
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <xQueueGenericCreateStatic+0x84>
 800934e:	2300      	movs	r3, #0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	61fb      	str	r3, [r7, #28]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <xQueueGenericCreateStatic+0x9c>
=======
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <xQueueGenericCreateStatic+0x52>
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <xQueueGenericCreateStatic+0x56>
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <xQueueGenericCreateStatic+0x58>
 8009662:	2300      	movs	r3, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	623b      	str	r3, [r7, #32]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d102      	bne.n	800968a <xQueueGenericCreateStatic+0x7e>
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <xQueueGenericCreateStatic+0x82>
 800968a:	2301      	movs	r3, #1
 800968c:	e000      	b.n	8009690 <xQueueGenericCreateStatic+0x84>
 800968e:	2300      	movs	r3, #0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	61fb      	str	r3, [r7, #28]
}
 80096a6:	bf00      	nop
 80096a8:	e7fe      	b.n	80096a8 <xQueueGenericCreateStatic+0x9c>
>>>>>>> e9380fc... optimisation RAM=)
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 800936a:	2350      	movs	r3, #80	; 0x50
 800936c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b50      	cmp	r3, #80	; 0x50
 8009372:	d00a      	beq.n	800938a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	61bb      	str	r3, [r7, #24]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <xQueueGenericCreateStatic+0xbc>
=======
 80096aa:	2350      	movs	r3, #80	; 0x50
 80096ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b50      	cmp	r3, #80	; 0x50
 80096b2:	d00a      	beq.n	80096ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	61bb      	str	r3, [r7, #24]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xQueueGenericCreateStatic+0xbc>
>>>>>>> e9380fc... optimisation RAM=)
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00d      	beq.n	80093b0 <xQueueGenericCreateStatic+0xe4>
=======
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00d      	beq.n	80096f0 <xQueueGenericCreateStatic+0xe4>
>>>>>>> e9380fc... optimisation RAM=)
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> e9380fc... optimisation RAM=)
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 800939c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	68b9      	ldr	r1, [r7, #8]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 f843 	bl	8009436 <prvInitialiseNewQueue>
=======
 80096dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	4613      	mov	r3, r2
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	68b9      	ldr	r1, [r7, #8]
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f000 f843 	bl	8009776 <prvInitialiseNewQueue>
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
<<<<<<< HEAD
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3730      	adds	r7, #48	; 0x30
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <xQueueGenericCreate>:
=======
 80096f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3730      	adds	r7, #48	; 0x30
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <xQueueGenericCreate>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b08a      	sub	sp, #40	; 0x28
 80093be:	af02      	add	r7, sp, #8
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	4613      	mov	r3, r2
 80093c6:	71fb      	strb	r3, [r7, #7]
=======
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b08a      	sub	sp, #40	; 0x28
 80096fe:	af02      	add	r7, sp, #8
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	4613      	mov	r3, r2
 8009706:	71fb      	strb	r3, [r7, #7]
>>>>>>> e9380fc... optimisation RAM=)
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	613b      	str	r3, [r7, #16]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d102      	bne.n	80093f0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	61fb      	str	r3, [r7, #28]
 80093ee:	e004      	b.n	80093fa <xQueueGenericCreate+0x40>
=======
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <xQueueGenericCreate+0x2a>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	613b      	str	r3, [r7, #16]
}
 8009720:	bf00      	nop
 8009722:	e7fe      	b.n	8009722 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800972a:	2300      	movs	r3, #0
 800972c:	61fb      	str	r3, [r7, #28]
 800972e:	e004      	b.n	800973a <xQueueGenericCreate+0x40>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	fb02 f303 	mul.w	r3, r2, r3
 80093f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	3350      	adds	r3, #80	; 0x50
 80093fe:	4618      	mov	r0, r3
 8009400:	f002 fdac 	bl	800bf5c <pvPortMalloc>
 8009404:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00f      	beq.n	800942c <xQueueGenericCreate+0x72>
=======
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	fb02 f303 	mul.w	r3, r2, r3
 8009738:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	3350      	adds	r3, #80	; 0x50
 800973e:	4618      	mov	r0, r3
 8009740:	f003 f8b4 	bl	800c8ac <pvPortMalloc>
 8009744:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00f      	beq.n	800976c <xQueueGenericCreate+0x72>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
<<<<<<< HEAD
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	3350      	adds	r3, #80	; 0x50
 8009410:	617b      	str	r3, [r7, #20]
=======
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	3350      	adds	r3, #80	; 0x50
 8009750:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> e9380fc... optimisation RAM=)
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 800941a:	79fa      	ldrb	r2, [r7, #7]
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	4613      	mov	r3, r2
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 f805 	bl	8009436 <prvInitialiseNewQueue>
=======
 800975a:	79fa      	ldrb	r2, [r7, #7]
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	4613      	mov	r3, r2
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	68b9      	ldr	r1, [r7, #8]
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 f805 	bl	8009776 <prvInitialiseNewQueue>
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
<<<<<<< HEAD
 800942c:	69bb      	ldr	r3, [r7, #24]
	}
 800942e:	4618      	mov	r0, r3
 8009430:	3720      	adds	r7, #32
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <prvInitialiseNewQueue>:
=======
 800976c:	69bb      	ldr	r3, [r7, #24]
	}
 800976e:	4618      	mov	r0, r3
 8009770:	3720      	adds	r7, #32
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <prvInitialiseNewQueue>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
 8009442:	70fb      	strb	r3, [r7, #3]
=======
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	607a      	str	r2, [r7, #4]
 8009782:	70fb      	strb	r3, [r7, #3]
>>>>>>> e9380fc... optimisation RAM=)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d103      	bne.n	8009452 <prvInitialiseNewQueue+0x1c>
=======
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d103      	bne.n	8009792 <prvInitialiseNewQueue+0x1c>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	69ba      	ldr	r2, [r7, #24]
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	e002      	b.n	8009458 <prvInitialiseNewQueue+0x22>
=======
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	601a      	str	r2, [r3, #0]
 8009790:	e002      	b.n	8009798 <prvInitialiseNewQueue+0x22>
>>>>>>> e9380fc... optimisation RAM=)
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	601a      	str	r2, [r3, #0]
=======
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009464:	2101      	movs	r1, #1
 8009466:	69b8      	ldr	r0, [r7, #24]
 8009468:	f7ff fec8 	bl	80091fc <xQueueGenericReset>
=======
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097a4:	2101      	movs	r1, #1
 80097a6:	69b8      	ldr	r0, [r7, #24]
 80097a8:	f7ff fec8 	bl	800953c <xQueueGenericReset>
>>>>>>> e9380fc... optimisation RAM=)

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
=======
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
>>>>>>> e9380fc... optimisation RAM=)
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 8009474:	bf00      	nop
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <prvInitialiseMutex>:
=======
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <prvInitialiseMutex>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
<<<<<<< HEAD
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00e      	beq.n	80094a8 <prvInitialiseMutex+0x2c>
=======
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00e      	beq.n	80097e8 <prvInitialiseMutex+0x2c>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
<<<<<<< HEAD
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	60da      	str	r2, [r3, #12]
=======
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	60da      	str	r2, [r3, #12]
>>>>>>> e9380fc... optimisation RAM=)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
<<<<<<< HEAD
 800949c:	2300      	movs	r3, #0
 800949e:	2200      	movs	r2, #0
 80094a0:	2100      	movs	r1, #0
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f90c 	bl	80096c0 <xQueueGenericSend>
=======
 80097dc:	2300      	movs	r3, #0
 80097de:	2200      	movs	r2, #0
 80097e0:	2100      	movs	r1, #0
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f90c 	bl	8009a00 <xQueueGenericSend>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
<<<<<<< HEAD
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <xQueueCreateMutex>:
=======
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <xQueueCreateMutex>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094ba:	2301      	movs	r3, #1
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	461a      	mov	r2, r3
 80094c6:	6939      	ldr	r1, [r7, #16]
 80094c8:	6978      	ldr	r0, [r7, #20]
 80094ca:	f7ff ff76 	bl	80093ba <xQueueGenericCreate>
 80094ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f7ff ffd3 	bl	800947c <prvInitialiseMutex>

		return pxNewQueue;
 80094d6:	68fb      	ldr	r3, [r7, #12]
	}
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <xQueueCreateMutexStatic>:
=======
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80097fa:	2301      	movs	r3, #1
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	2300      	movs	r3, #0
 8009800:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	461a      	mov	r2, r3
 8009806:	6939      	ldr	r1, [r7, #16]
 8009808:	6978      	ldr	r0, [r7, #20]
 800980a:	f7ff ff76 	bl	80096fa <xQueueGenericCreate>
 800980e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f7ff ffd3 	bl	80097bc <prvInitialiseMutex>

		return pxNewQueue;
 8009816:	68fb      	ldr	r3, [r7, #12]
	}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <xQueueCreateMutexStatic>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
<<<<<<< HEAD
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af02      	add	r7, sp, #8
 80094e6:	4603      	mov	r3, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094ec:	2301      	movs	r3, #1
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	2300      	movs	r3, #0
 80094f2:	613b      	str	r3, [r7, #16]
=======
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af02      	add	r7, sp, #8
 8009826:	4603      	mov	r3, r0
 8009828:	6039      	str	r1, [r7, #0]
 800982a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	2300      	movs	r3, #0
 8009832:	613b      	str	r3, [r7, #16]
>>>>>>> e9380fc... optimisation RAM=)

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
<<<<<<< HEAD
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2200      	movs	r2, #0
 80094fc:	6939      	ldr	r1, [r7, #16]
 80094fe:	6978      	ldr	r0, [r7, #20]
 8009500:	f7ff fee4 	bl	80092cc <xQueueGenericCreateStatic>
 8009504:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f7ff ffb8 	bl	800947c <prvInitialiseMutex>

		return pxNewQueue;
 800950c:	68fb      	ldr	r3, [r7, #12]
	}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <xQueueGiveMutexRecursive>:
=======
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	2200      	movs	r2, #0
 800983c:	6939      	ldr	r1, [r7, #16]
 800983e:	6978      	ldr	r0, [r7, #20]
 8009840:	f7ff fee4 	bl	800960c <xQueueGenericCreateStatic>
 8009844:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff ffb8 	bl	80097bc <prvInitialiseMutex>

		return pxNewQueue;
 800984c:	68fb      	ldr	r3, [r7, #12]
	}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <xQueueGiveMutexRecursive>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
<<<<<<< HEAD
 8009516:	b590      	push	{r4, r7, lr}
 8009518:	b087      	sub	sp, #28
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	60fb      	str	r3, [r7, #12]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xQueueGiveMutexRecursive+0x26>
=======
 8009856:	b590      	push	{r4, r7, lr}
 8009858:	b087      	sub	sp, #28
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	60fb      	str	r3, [r7, #12]
}
 800987a:	bf00      	nop
 800987c:	e7fe      	b.n	800987c <xQueueGiveMutexRecursive+0x26>
>>>>>>> e9380fc... optimisation RAM=)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
<<<<<<< HEAD
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	685c      	ldr	r4, [r3, #4]
 8009542:	f001 fe0f 	bl	800b164 <xTaskGetCurrentTaskHandle>
 8009546:	4603      	mov	r3, r0
 8009548:	429c      	cmp	r4, r3
 800954a:	d111      	bne.n	8009570 <xQueueGiveMutexRecursive+0x5a>
=======
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	685c      	ldr	r4, [r3, #4]
 8009882:	f001 ffd5 	bl	800b830 <xTaskGetCurrentTaskHandle>
 8009886:	4603      	mov	r3, r0
 8009888:	429c      	cmp	r4, r3
 800988a:	d111      	bne.n	80098b0 <xQueueGiveMutexRecursive+0x5a>
>>>>>>> e9380fc... optimisation RAM=)
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
<<<<<<< HEAD
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	1e5a      	subs	r2, r3, #1
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <xQueueGiveMutexRecursive+0x54>
=======
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	1e5a      	subs	r2, r3, #1
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d105      	bne.n	80098aa <xQueueGiveMutexRecursive+0x54>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
<<<<<<< HEAD
 800955e:	2300      	movs	r3, #0
 8009560:	2200      	movs	r2, #0
 8009562:	2100      	movs	r1, #0
 8009564:	6938      	ldr	r0, [r7, #16]
 8009566:	f000 f8ab 	bl	80096c0 <xQueueGenericSend>
=======
 800989e:	2300      	movs	r3, #0
 80098a0:	2200      	movs	r2, #0
 80098a2:	2100      	movs	r1, #0
 80098a4:	6938      	ldr	r0, [r7, #16]
 80098a6:	f000 f8ab 	bl	8009a00 <xQueueGenericSend>
>>>>>>> e9380fc... optimisation RAM=)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
<<<<<<< HEAD
 800956a:	2301      	movs	r3, #1
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	e001      	b.n	8009574 <xQueueGiveMutexRecursive+0x5e>
=======
 80098aa:	2301      	movs	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
 80098ae:	e001      	b.n	80098b4 <xQueueGiveMutexRecursive+0x5e>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
<<<<<<< HEAD
 8009570:	2300      	movs	r3, #0
 8009572:	617b      	str	r3, [r7, #20]
=======
 80098b0:	2300      	movs	r3, #0
 80098b2:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
<<<<<<< HEAD
 8009574:	697b      	ldr	r3, [r7, #20]
	}
 8009576:	4618      	mov	r0, r3
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	bd90      	pop	{r4, r7, pc}

0800957e <xQueueTakeMutexRecursive>:
=======
 80098b4:	697b      	ldr	r3, [r7, #20]
	}
 80098b6:	4618      	mov	r0, r3
 80098b8:	371c      	adds	r7, #28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd90      	pop	{r4, r7, pc}

080098be <xQueueTakeMutexRecursive>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
<<<<<<< HEAD
 800957e:	b590      	push	{r4, r7, lr}
 8009580:	b087      	sub	sp, #28
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	60fb      	str	r3, [r7, #12]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <xQueueTakeMutexRecursive+0x28>
=======
 80098be:	b590      	push	{r4, r7, lr}
 80098c0:	b087      	sub	sp, #28
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60fb      	str	r3, [r7, #12]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <xQueueTakeMutexRecursive+0x28>
>>>>>>> e9380fc... optimisation RAM=)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
<<<<<<< HEAD
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	685c      	ldr	r4, [r3, #4]
 80095ac:	f001 fdda 	bl	800b164 <xTaskGetCurrentTaskHandle>
 80095b0:	4603      	mov	r3, r0
 80095b2:	429c      	cmp	r4, r3
 80095b4:	d107      	bne.n	80095c6 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80095c0:	2301      	movs	r3, #1
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	e00c      	b.n	80095e0 <xQueueTakeMutexRecursive+0x62>
=======
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	685c      	ldr	r4, [r3, #4]
 80098ec:	f001 ffa0 	bl	800b830 <xTaskGetCurrentTaskHandle>
 80098f0:	4603      	mov	r3, r0
 80098f2:	429c      	cmp	r4, r3
 80098f4:	d107      	bne.n	8009906 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009900:	2301      	movs	r3, #1
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	e00c      	b.n	8009920 <xQueueTakeMutexRecursive+0x62>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
<<<<<<< HEAD
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6938      	ldr	r0, [r7, #16]
 80095ca:	f000 fb7d 	bl	8009cc8 <xQueueSemaphoreTake>
 80095ce:	6178      	str	r0, [r7, #20]
=======
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6938      	ldr	r0, [r7, #16]
 800990a:	f000 fb7d 	bl	800a008 <xQueueSemaphoreTake>
 800990e:	6178      	str	r0, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
<<<<<<< HEAD
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d004      	beq.n	80095e0 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	60da      	str	r2, [r3, #12]
=======
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d004      	beq.n	8009920 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	60da      	str	r2, [r3, #12]
>>>>>>> e9380fc... optimisation RAM=)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
<<<<<<< HEAD
 80095e0:	697b      	ldr	r3, [r7, #20]
	}
 80095e2:	4618      	mov	r0, r3
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd90      	pop	{r4, r7, pc}

080095ea <xQueueCreateCountingSemaphoreStatic>:
=======
 8009920:	697b      	ldr	r3, [r7, #20]
	}
 8009922:	4618      	mov	r0, r3
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	bd90      	pop	{r4, r7, pc}

0800992a <xQueueCreateCountingSemaphoreStatic>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
<<<<<<< HEAD
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b08a      	sub	sp, #40	; 0x28
 80095ee:	af02      	add	r7, sp, #8
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	61bb      	str	r3, [r7, #24]
}
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	429a      	cmp	r2, r3
 8009618:	d90a      	bls.n	8009630 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	617b      	str	r3, [r7, #20]
}
 800962c:	bf00      	nop
 800962e:	e7fe      	b.n	800962e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009630:	2302      	movs	r3, #2
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fe46 	bl	80092cc <xQueueGenericCreateStatic>
 8009640:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800992a:	b580      	push	{r7, lr}
 800992c:	b08a      	sub	sp, #40	; 0x28
 800992e:	af02      	add	r7, sp, #8
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10a      	bne.n	8009952 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	61bb      	str	r3, [r7, #24]
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	429a      	cmp	r2, r3
 8009958:	d90a      	bls.n	8009970 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	617b      	str	r3, [r7, #20]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009970:	2302      	movs	r3, #2
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	2100      	movs	r1, #0
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff fe46 	bl	800960c <xQueueGenericCreateStatic>
 8009980:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
<<<<<<< HEAD
 800964e:	69fb      	ldr	r3, [r7, #28]
	}
 8009650:	4618      	mov	r0, r3
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <xQueueCreateCountingSemaphore>:
=======
 800998e:	69fb      	ldr	r3, [r7, #28]
	}
 8009990:	4618      	mov	r0, r3
 8009992:	3720      	adds	r7, #32
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <xQueueCreateCountingSemaphore>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
<<<<<<< HEAD
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	613b      	str	r3, [r7, #16]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	429a      	cmp	r2, r3
 8009684:	d90a      	bls.n	800969c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	60fb      	str	r3, [r7, #12]
}
 8009698:	bf00      	nop
 800969a:	e7fe      	b.n	800969a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800969c:	2202      	movs	r2, #2
 800969e:	2100      	movs	r1, #0
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff fe8a 	bl	80093ba <xQueueGenericCreate>
 80096a6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	613b      	str	r3, [r7, #16]
}
 80099ba:	bf00      	nop
 80099bc:	e7fe      	b.n	80099bc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d90a      	bls.n	80099dc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	60fb      	str	r3, [r7, #12]
}
 80099d8:	bf00      	nop
 80099da:	e7fe      	b.n	80099da <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099dc:	2202      	movs	r2, #2
 80099de:	2100      	movs	r1, #0
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f7ff fe8a 	bl	80096fa <xQueueGenericCreate>
 80099e6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
<<<<<<< HEAD
 80096b4:	697b      	ldr	r3, [r7, #20]
	}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <xQueueGenericSend>:
=======
 80099f4:	697b      	ldr	r3, [r7, #20]
	}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <xQueueGenericSend>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08e      	sub	sp, #56	; 0x38
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096ce:	2300      	movs	r3, #0
 80096d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <xQueueGenericSend+0x32>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d103      	bne.n	8009700 <xQueueGenericSend+0x40>
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <xQueueGenericSend+0x44>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <xQueueGenericSend+0x46>
 8009704:	2300      	movs	r3, #0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <xQueueGenericSend+0x60>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d103      	bne.n	800972e <xQueueGenericSend+0x6e>
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800972a:	2b01      	cmp	r3, #1
 800972c:	d101      	bne.n	8009732 <xQueueGenericSend+0x72>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <xQueueGenericSend+0x74>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <xQueueGenericSend+0x8e>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	623b      	str	r3, [r7, #32]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800974e:	f001 fd17 	bl	800b180 <xTaskGetSchedulerState>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <xQueueGenericSend+0x9e>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <xQueueGenericSend+0xa2>
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <xQueueGenericSend+0xa4>
 8009762:	2300      	movs	r3, #0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <xQueueGenericSend+0xbe>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	61fb      	str	r3, [r7, #28]
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <xQueueGenericSend+0xbc>
=======
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08e      	sub	sp, #56	; 0x38
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <xQueueGenericSend+0x32>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d103      	bne.n	8009a40 <xQueueGenericSend+0x40>
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <xQueueGenericSend+0x44>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e000      	b.n	8009a46 <xQueueGenericSend+0x46>
 8009a44:	2300      	movs	r3, #0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10a      	bne.n	8009a60 <xQueueGenericSend+0x60>
	__asm volatile
 8009a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a5c:	bf00      	nop
 8009a5e:	e7fe      	b.n	8009a5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d103      	bne.n	8009a6e <xQueueGenericSend+0x6e>
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d101      	bne.n	8009a72 <xQueueGenericSend+0x72>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e000      	b.n	8009a74 <xQueueGenericSend+0x74>
 8009a72:	2300      	movs	r3, #0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <xQueueGenericSend+0x8e>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	623b      	str	r3, [r7, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a8e:	f001 fedd 	bl	800b84c <xTaskGetSchedulerState>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <xQueueGenericSend+0x9e>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <xQueueGenericSend+0xa2>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e000      	b.n	8009aa4 <xQueueGenericSend+0xa4>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10a      	bne.n	8009abe <xQueueGenericSend+0xbe>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	61fb      	str	r3, [r7, #28]
}
 8009aba:	bf00      	nop
 8009abc:	e7fe      	b.n	8009abc <xQueueGenericSend+0xbc>
>>>>>>> e9380fc... optimisation RAM=)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800977e:	f002 faed 	bl	800bd5c <vPortEnterCritical>
=======
 8009abe:	f002 fdf5 	bl	800c6ac <vPortEnterCritical>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978a:	429a      	cmp	r2, r3
 800978c:	d302      	bcc.n	8009794 <xQueueGenericSend+0xd4>
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b02      	cmp	r3, #2
 8009792:	d129      	bne.n	80097e8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800979a:	f000 fc5b 	bl	800a054 <prvCopyDataToQueue>
 800979e:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d302      	bcc.n	8009ad4 <xQueueGenericSend+0xd4>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d129      	bne.n	8009b28 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ada:	f000 fc5b 	bl	800a394 <prvCopyDataToQueue>
 8009ade:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> e9380fc... optimisation RAM=)
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 80097a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d010      	beq.n	80097ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	3324      	adds	r3, #36	; 0x24
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 fb75 	bl	800ae9c <xTaskRemoveFromEventList>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d013      	beq.n	80097e0 <xQueueGenericSend+0x120>
=======
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d010      	beq.n	8009b0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aea:	3324      	adds	r3, #36	; 0x24
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 fc67 	bl	800b3c0 <xTaskRemoveFromEventList>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d013      	beq.n	8009b20 <xQueueGenericSend+0x120>
>>>>>>> e9380fc... optimisation RAM=)
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 80097b8:	4b3f      	ldr	r3, [pc, #252]	; (80098b8 <xQueueGenericSend+0x1f8>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	e00a      	b.n	80097e0 <xQueueGenericSend+0x120>
=======
 8009af8:	4b3f      	ldr	r3, [pc, #252]	; (8009bf8 <xQueueGenericSend+0x1f8>)
 8009afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	e00a      	b.n	8009b20 <xQueueGenericSend+0x120>
>>>>>>> e9380fc... optimisation RAM=)
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d007      	beq.n	80097e0 <xQueueGenericSend+0x120>
=======
 8009b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d007      	beq.n	8009b20 <xQueueGenericSend+0x120>
>>>>>>> e9380fc... optimisation RAM=)
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 80097d0:	4b39      	ldr	r3, [pc, #228]	; (80098b8 <xQueueGenericSend+0x1f8>)
 80097d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	f3bf 8f6f 	isb	sy
=======
 8009b10:	4b39      	ldr	r3, [pc, #228]	; (8009bf8 <xQueueGenericSend+0x1f8>)
 8009b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	f3bf 8f6f 	isb	sy
>>>>>>> e9380fc... optimisation RAM=)
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 80097e0:	f002 faec 	bl	800bdbc <vPortExitCritical>
				return pdPASS;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e063      	b.n	80098b0 <xQueueGenericSend+0x1f0>
=======
 8009b20:	f002 fdf4 	bl	800c70c <vPortExitCritical>
				return pdPASS;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e063      	b.n	8009bf0 <xQueueGenericSend+0x1f0>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d103      	bne.n	80097f6 <xQueueGenericSend+0x136>
=======
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d103      	bne.n	8009b36 <xQueueGenericSend+0x136>
>>>>>>> e9380fc... optimisation RAM=)
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 80097ee:	f002 fae5 	bl	800bdbc <vPortExitCritical>
=======
 8009b2e:	f002 fded 	bl	800c70c <vPortExitCritical>
>>>>>>> e9380fc... optimisation RAM=)

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 80097f2:	2300      	movs	r3, #0
 80097f4:	e05c      	b.n	80098b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d106      	bne.n	800980a <xQueueGenericSend+0x14a>
=======
 8009b32:	2300      	movs	r3, #0
 8009b34:	e05c      	b.n	8009bf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d106      	bne.n	8009b4a <xQueueGenericSend+0x14a>
>>>>>>> e9380fc... optimisation RAM=)
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 80097fc:	f107 0314 	add.w	r3, r7, #20
 8009800:	4618      	mov	r0, r3
 8009802:	f001 fbaf 	bl	800af64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009806:	2301      	movs	r3, #1
 8009808:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8009b3c:	f107 0314 	add.w	r3, r7, #20
 8009b40:	4618      	mov	r0, r3
 8009b42:	f001 fca1 	bl	800b488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b46:	2301      	movs	r3, #1
 8009b48:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> e9380fc... optimisation RAM=)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800980a:	f002 fad7 	bl	800bdbc <vPortExitCritical>
=======
 8009b4a:	f002 fddf 	bl	800c70c <vPortExitCritical>
>>>>>>> e9380fc... optimisation RAM=)

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800980e:	f001 f919 	bl	800aa44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009812:	f002 faa3 	bl	800bd5c <vPortEnterCritical>
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800981c:	b25b      	sxtb	r3, r3
 800981e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009822:	d103      	bne.n	800982c <xQueueGenericSend+0x16c>
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009832:	b25b      	sxtb	r3, r3
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009838:	d103      	bne.n	8009842 <xQueueGenericSend+0x182>
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009842:	f002 fabb 	bl	800bdbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009846:	1d3a      	adds	r2, r7, #4
 8009848:	f107 0314 	add.w	r3, r7, #20
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f001 fb9e 	bl	800af90 <xTaskCheckForTimeOut>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d124      	bne.n	80098a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800985a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800985c:	f000 fcf2 	bl	800a244 <prvIsQueueFull>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d018      	beq.n	8009898 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	3310      	adds	r3, #16
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	4611      	mov	r1, r2
 800986e:	4618      	mov	r0, r3
 8009870:	f001 fac4 	bl	800adfc <vTaskPlaceOnEventList>
=======
 8009b4e:	f001 f96f 	bl	800ae30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b52:	f002 fdab 	bl	800c6ac <vPortEnterCritical>
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b5c:	b25b      	sxtb	r3, r3
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b62:	d103      	bne.n	8009b6c <xQueueGenericSend+0x16c>
 8009b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b72:	b25b      	sxtb	r3, r3
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b78:	d103      	bne.n	8009b82 <xQueueGenericSend+0x182>
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b82:	f002 fdc3 	bl	800c70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b86:	1d3a      	adds	r2, r7, #4
 8009b88:	f107 0314 	add.w	r3, r7, #20
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f001 fc90 	bl	800b4b4 <xTaskCheckForTimeOut>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d124      	bne.n	8009be4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b9c:	f000 fcf2 	bl	800a584 <prvIsQueueFull>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d018      	beq.n	8009bd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba8:	3310      	adds	r3, #16
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f001 fbb6 	bl	800b320 <vTaskPlaceOnEventList>
>>>>>>> e9380fc... optimisation RAM=)
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8009874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009876:	f000 fc7d 	bl	800a174 <prvUnlockQueue>
=======
 8009bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bb6:	f000 fc7d 	bl	800a4b4 <prvUnlockQueue>
>>>>>>> e9380fc... optimisation RAM=)
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 800987a:	f001 f8f1 	bl	800aa60 <xTaskResumeAll>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	f47f af7c 	bne.w	800977e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <xQueueGenericSend+0x1f8>)
 8009888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	e772      	b.n	800977e <xQueueGenericSend+0xbe>
=======
 8009bba:	f001 f947 	bl	800ae4c <xTaskResumeAll>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f47f af7c 	bne.w	8009abe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009bc6:	4b0c      	ldr	r3, [pc, #48]	; (8009bf8 <xQueueGenericSend+0x1f8>)
 8009bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	e772      	b.n	8009abe <xQueueGenericSend+0xbe>
>>>>>>> e9380fc... optimisation RAM=)
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8009898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800989a:	f000 fc6b 	bl	800a174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800989e:	f001 f8df 	bl	800aa60 <xTaskResumeAll>
 80098a2:	e76c      	b.n	800977e <xQueueGenericSend+0xbe>
=======
 8009bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bda:	f000 fc6b 	bl	800a4b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bde:	f001 f935 	bl	800ae4c <xTaskResumeAll>
 8009be2:	e76c      	b.n	8009abe <xQueueGenericSend+0xbe>
>>>>>>> e9380fc... optimisation RAM=)
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80098a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098a6:	f000 fc65 	bl	800a174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098aa:	f001 f8d9 	bl	800aa60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098ae:	2300      	movs	r3, #0
		}
	}
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3738      	adds	r7, #56	; 0x38
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <xQueueGenericSendFromISR>:
=======
 8009be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009be6:	f000 fc65 	bl	800a4b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bea:	f001 f92f 	bl	800ae4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bee:	2300      	movs	r3, #0
		}
	}
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3738      	adds	r7, #56	; 0x38
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <xQueueGenericSendFromISR>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08e      	sub	sp, #56	; 0x38
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098e6:	bf00      	nop
 80098e8:	e7fe      	b.n	80098e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d103      	bne.n	80098f8 <xQueueGenericSendFromISR+0x3c>
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <xQueueGenericSendFromISR+0x40>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e000      	b.n	80098fe <xQueueGenericSendFromISR+0x42>
 80098fc:	2300      	movs	r3, #0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	623b      	str	r3, [r7, #32]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d103      	bne.n	8009926 <xQueueGenericSendFromISR+0x6a>
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <xQueueGenericSendFromISR+0x6e>
 8009926:	2301      	movs	r3, #1
 8009928:	e000      	b.n	800992c <xQueueGenericSendFromISR+0x70>
 800992a:	2300      	movs	r3, #0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10a      	bne.n	8009946 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	61fb      	str	r3, [r7, #28]
}
 8009942:	bf00      	nop
 8009944:	e7fe      	b.n	8009944 <xQueueGenericSendFromISR+0x88>
=======
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08e      	sub	sp, #56	; 0x38
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c26:	bf00      	nop
 8009c28:	e7fe      	b.n	8009c28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d103      	bne.n	8009c38 <xQueueGenericSendFromISR+0x3c>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <xQueueGenericSendFromISR+0x40>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <xQueueGenericSendFromISR+0x42>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10a      	bne.n	8009c58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	623b      	str	r3, [r7, #32]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d103      	bne.n	8009c66 <xQueueGenericSendFromISR+0x6a>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d101      	bne.n	8009c6a <xQueueGenericSendFromISR+0x6e>
 8009c66:	2301      	movs	r3, #1
 8009c68:	e000      	b.n	8009c6c <xQueueGenericSendFromISR+0x70>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10a      	bne.n	8009c86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	61fb      	str	r3, [r7, #28]
}
 8009c82:	bf00      	nop
 8009c84:	e7fe      	b.n	8009c84 <xQueueGenericSendFromISR+0x88>
>>>>>>> e9380fc... optimisation RAM=)
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8009946:	f002 facb 	bl	800bee0 <vPortValidateInterruptPriority>
=======
 8009c86:	f002 fdd3 	bl	800c830 <vPortValidateInterruptPriority>
>>>>>>> e9380fc... optimisation RAM=)

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 800994a:	f3ef 8211 	mrs	r2, BASEPRI
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	61ba      	str	r2, [r7, #24]
 8009960:	617b      	str	r3, [r7, #20]
=======
 8009c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	61ba      	str	r2, [r7, #24]
 8009ca0:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 8009962:	69bb      	ldr	r3, [r7, #24]
=======
 8009ca2:	69bb      	ldr	r3, [r7, #24]
>>>>>>> e9380fc... optimisation RAM=)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	429a      	cmp	r2, r3
 8009970:	d302      	bcc.n	8009978 <xQueueGenericSendFromISR+0xbc>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b02      	cmp	r3, #2
 8009976:	d12c      	bne.n	80099d2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800997e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 8009ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d302      	bcc.n	8009cb8 <xQueueGenericSendFromISR+0xbc>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d12c      	bne.n	8009d12 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> e9380fc... optimisation RAM=)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	68b9      	ldr	r1, [r7, #8]
 8009986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009988:	f000 fb64 	bl	800a054 <prvCopyDataToQueue>
=======
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cc8:	f000 fb64 	bl	800a394 <prvCopyDataToQueue>
>>>>>>> e9380fc... optimisation RAM=)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 800998c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009994:	d112      	bne.n	80099bc <xQueueGenericSendFromISR+0x100>
=======
 8009ccc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd4:	d112      	bne.n	8009cfc <xQueueGenericSendFromISR+0x100>
>>>>>>> e9380fc... optimisation RAM=)
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	2b00      	cmp	r3, #0
 800999c:	d016      	beq.n	80099cc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	3324      	adds	r3, #36	; 0x24
 80099a2:	4618      	mov	r0, r3
 80099a4:	f001 fa7a 	bl	800ae9c <xTaskRemoveFromEventList>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00e      	beq.n	80099cc <xQueueGenericSendFromISR+0x110>
=======
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d016      	beq.n	8009d0c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	3324      	adds	r3, #36	; 0x24
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 fb6c 	bl	800b3c0 <xTaskRemoveFromEventList>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00e      	beq.n	8009d0c <xQueueGenericSendFromISR+0x110>
>>>>>>> e9380fc... optimisation RAM=)
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00b      	beq.n	80099cc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	e007      	b.n	80099cc <xQueueGenericSendFromISR+0x110>
=======
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00b      	beq.n	8009d0c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	e007      	b.n	8009d0c <xQueueGenericSendFromISR+0x110>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 80099bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099c0:	3301      	adds	r3, #1
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	b25a      	sxtb	r2, r3
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099cc:	2301      	movs	r3, #1
 80099ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80099d0:	e001      	b.n	80099d6 <xQueueGenericSendFromISR+0x11a>
=======
 8009cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d00:	3301      	adds	r3, #1
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	b25a      	sxtb	r2, r3
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009d10:	e001      	b.n	8009d16 <xQueueGenericSendFromISR+0x11a>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 80099d2:	2300      	movs	r3, #0
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	613b      	str	r3, [r7, #16]
=======
 8009d12:	2300      	movs	r3, #0
 8009d14:	637b      	str	r3, [r7, #52]	; 0x34
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	613b      	str	r3, [r7, #16]
>>>>>>> e9380fc... optimisation RAM=)
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f383 8811 	msr	BASEPRI, r3
=======
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	f383 8811 	msr	BASEPRI, r3
>>>>>>> e9380fc... optimisation RAM=)
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 80099e0:	bf00      	nop
=======
 8009d20:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 80099e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3738      	adds	r7, #56	; 0x38
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <xQueueGiveFromISR>:
=======
 8009d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3738      	adds	r7, #56	; 0x38
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <xQueueGiveFromISR>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
<<<<<<< HEAD
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08e      	sub	sp, #56	; 0x38
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08e      	sub	sp, #56	; 0x38
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> e9380fc... optimisation RAM=)
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
<<<<<<< HEAD
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	623b      	str	r3, [r7, #32]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xQueueGiveFromISR+0x28>
=======
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10a      	bne.n	8009d56 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	623b      	str	r3, [r7, #32]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <xQueueGiveFromISR+0x28>
>>>>>>> e9380fc... optimisation RAM=)

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< HEAD
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00a      	beq.n	8009a34 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	61fb      	str	r3, [r7, #28]
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <xQueueGiveFromISR+0x46>
=======
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	61fb      	str	r3, [r7, #28]
}
 8009d70:	bf00      	nop
 8009d72:	e7fe      	b.n	8009d72 <xQueueGiveFromISR+0x46>
>>>>>>> e9380fc... optimisation RAM=)

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
<<<<<<< HEAD
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d103      	bne.n	8009a44 <xQueueGiveFromISR+0x58>
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <xQueueGiveFromISR+0x5c>
 8009a44:	2301      	movs	r3, #1
 8009a46:	e000      	b.n	8009a4a <xQueueGiveFromISR+0x5e>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	61bb      	str	r3, [r7, #24]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <xQueueGiveFromISR+0x76>
=======
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d103      	bne.n	8009d84 <xQueueGiveFromISR+0x58>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <xQueueGiveFromISR+0x5c>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e000      	b.n	8009d8a <xQueueGiveFromISR+0x5e>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	61bb      	str	r3, [r7, #24]
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <xQueueGiveFromISR+0x76>
>>>>>>> e9380fc... optimisation RAM=)
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8009a64:	f002 fa3c 	bl	800bee0 <vPortValidateInterruptPriority>
	__asm volatile
 8009a68:	f3ef 8211 	mrs	r2, BASEPRI
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	617a      	str	r2, [r7, #20]
 8009a7e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009a80:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a88:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8009da4:	f002 fd44 	bl	800c830 <vPortValidateInterruptPriority>
	__asm volatile
 8009da8:	f3ef 8211 	mrs	r2, BASEPRI
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	617a      	str	r2, [r7, #20]
 8009dbe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009dc0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> e9380fc... optimisation RAM=)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
<<<<<<< HEAD
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d22b      	bcs.n	8009aec <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d22b      	bcs.n	8009e2c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> e9380fc... optimisation RAM=)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 8009a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	1c5a      	adds	r2, r3, #1
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> e9380fc... optimisation RAM=)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 8009aa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aae:	d112      	bne.n	8009ad6 <xQueueGiveFromISR+0xea>
=======
 8009de6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dee:	d112      	bne.n	8009e16 <xQueueGiveFromISR+0xea>
>>>>>>> e9380fc... optimisation RAM=)
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d016      	beq.n	8009ae6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	3324      	adds	r3, #36	; 0x24
 8009abc:	4618      	mov	r0, r3
 8009abe:	f001 f9ed 	bl	800ae9c <xTaskRemoveFromEventList>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00e      	beq.n	8009ae6 <xQueueGiveFromISR+0xfa>
=======
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d016      	beq.n	8009e26 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	3324      	adds	r3, #36	; 0x24
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f001 fadf 	bl	800b3c0 <xTaskRemoveFromEventList>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00e      	beq.n	8009e26 <xQueueGiveFromISR+0xfa>
>>>>>>> e9380fc... optimisation RAM=)
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00b      	beq.n	8009ae6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	e007      	b.n	8009ae6 <xQueueGiveFromISR+0xfa>
=======
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00b      	beq.n	8009e26 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2201      	movs	r2, #1
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	e007      	b.n	8009e26 <xQueueGiveFromISR+0xfa>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 8009ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ada:	3301      	adds	r3, #1
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	b25a      	sxtb	r2, r3
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8009aea:	e001      	b.n	8009af0 <xQueueGiveFromISR+0x104>
=======
 8009e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	b25a      	sxtb	r2, r3
 8009e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e26:	2301      	movs	r3, #1
 8009e28:	637b      	str	r3, [r7, #52]	; 0x34
 8009e2a:	e001      	b.n	8009e30 <xQueueGiveFromISR+0x104>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 8009aec:	2300      	movs	r3, #0
 8009aee:	637b      	str	r3, [r7, #52]	; 0x34
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f383 8811 	msr	BASEPRI, r3
}
 8009afa:	bf00      	nop
=======
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f383 8811 	msr	BASEPRI, r3
}
 8009e3a:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 8009afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3738      	adds	r7, #56	; 0x38
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <xQueueReceive>:
=======
 8009e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3738      	adds	r7, #56	; 0x38
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <xQueueReceive>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	; 0x30
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b14:	2300      	movs	r3, #0
 8009b16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10a      	bne.n	8009b38 <xQueueReceive+0x30>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	623b      	str	r3, [r7, #32]
}
 8009b34:	bf00      	nop
 8009b36:	e7fe      	b.n	8009b36 <xQueueReceive+0x2e>
=======
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08c      	sub	sp, #48	; 0x30
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10a      	bne.n	8009e78 <xQueueReceive+0x30>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	623b      	str	r3, [r7, #32]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <xQueueReceive+0x2e>
>>>>>>> e9380fc... optimisation RAM=)

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d103      	bne.n	8009b46 <xQueueReceive+0x3e>
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <xQueueReceive+0x42>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e000      	b.n	8009b4c <xQueueReceive+0x44>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10a      	bne.n	8009b66 <xQueueReceive+0x5e>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	61fb      	str	r3, [r7, #28]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <xQueueReceive+0x5c>
=======
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d103      	bne.n	8009e86 <xQueueReceive+0x3e>
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <xQueueReceive+0x42>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <xQueueReceive+0x44>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xQueueReceive+0x5e>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	61fb      	str	r3, [r7, #28]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xQueueReceive+0x5c>
>>>>>>> e9380fc... optimisation RAM=)

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8009b66:	f001 fb0b 	bl	800b180 <xTaskGetSchedulerState>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <xQueueReceive+0x6e>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <xQueueReceive+0x72>
 8009b76:	2301      	movs	r3, #1
 8009b78:	e000      	b.n	8009b7c <xQueueReceive+0x74>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10a      	bne.n	8009b96 <xQueueReceive+0x8e>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	61bb      	str	r3, [r7, #24]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <xQueueReceive+0x8c>
=======
 8009ea6:	f001 fcd1 	bl	800b84c <xTaskGetSchedulerState>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <xQueueReceive+0x6e>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <xQueueReceive+0x72>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e000      	b.n	8009ebc <xQueueReceive+0x74>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10a      	bne.n	8009ed6 <xQueueReceive+0x8e>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	61bb      	str	r3, [r7, #24]
}
 8009ed2:	bf00      	nop
 8009ed4:	e7fe      	b.n	8009ed4 <xQueueReceive+0x8c>
>>>>>>> e9380fc... optimisation RAM=)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8009b96:	f002 f8e1 	bl	800bd5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8009ed6:	f002 fbe9 	bl	800c6ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ede:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> e9380fc... optimisation RAM=)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d01f      	beq.n	8009be6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009baa:	f000 fabd 	bl	800a128 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	1e5a      	subs	r2, r3, #1
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d01f      	beq.n	8009f26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ee6:	68b9      	ldr	r1, [r7, #8]
 8009ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eea:	f000 fabd 	bl	800a468 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	1e5a      	subs	r2, r3, #1
 8009ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef4:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> e9380fc... optimisation RAM=)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00f      	beq.n	8009bde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc0:	3310      	adds	r3, #16
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 f96a 	bl	800ae9c <xTaskRemoveFromEventList>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bce:	4b3d      	ldr	r3, [pc, #244]	; (8009cc4 <xQueueReceive+0x1bc>)
 8009bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	f3bf 8f6f 	isb	sy
=======
 8009ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00f      	beq.n	8009f1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	3310      	adds	r3, #16
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 fa5c 	bl	800b3c0 <xTaskRemoveFromEventList>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d007      	beq.n	8009f1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f0e:	4b3d      	ldr	r3, [pc, #244]	; (800a004 <xQueueReceive+0x1bc>)
 8009f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	f3bf 8f6f 	isb	sy
>>>>>>> e9380fc... optimisation RAM=)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009bde:	f002 f8ed 	bl	800bdbc <vPortExitCritical>
				return pdPASS;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e069      	b.n	8009cba <xQueueReceive+0x1b2>
=======
 8009f1e:	f002 fbf5 	bl	800c70c <vPortExitCritical>
				return pdPASS;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e069      	b.n	8009ffa <xQueueReceive+0x1b2>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d103      	bne.n	8009bf4 <xQueueReceive+0xec>
=======
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <xQueueReceive+0xec>
>>>>>>> e9380fc... optimisation RAM=)
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009bec:	f002 f8e6 	bl	800bdbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	e062      	b.n	8009cba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d106      	bne.n	8009c08 <xQueueReceive+0x100>
=======
 8009f2c:	f002 fbee 	bl	800c70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f30:	2300      	movs	r3, #0
 8009f32:	e062      	b.n	8009ffa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d106      	bne.n	8009f48 <xQueueReceive+0x100>
>>>>>>> e9380fc... optimisation RAM=)
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8009bfa:	f107 0310 	add.w	r3, r7, #16
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f001 f9b0 	bl	800af64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c04:	2301      	movs	r3, #1
 8009c06:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8009f3a:	f107 0310 	add.w	r3, r7, #16
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 faa2 	bl	800b488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f44:	2301      	movs	r3, #1
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> e9380fc... optimisation RAM=)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009c08:	f002 f8d8 	bl	800bdbc <vPortExitCritical>
=======
 8009f48:	f002 fbe0 	bl	800c70c <vPortExitCritical>
>>>>>>> e9380fc... optimisation RAM=)

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8009c0c:	f000 ff1a 	bl	800aa44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c10:	f002 f8a4 	bl	800bd5c <vPortEnterCritical>
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c1a:	b25b      	sxtb	r3, r3
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c20:	d103      	bne.n	8009c2a <xQueueReceive+0x122>
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c30:	b25b      	sxtb	r3, r3
 8009c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c36:	d103      	bne.n	8009c40 <xQueueReceive+0x138>
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c40:	f002 f8bc 	bl	800bdbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c44:	1d3a      	adds	r2, r7, #4
 8009c46:	f107 0310 	add.w	r3, r7, #16
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f001 f99f 	bl	800af90 <xTaskCheckForTimeOut>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d123      	bne.n	8009ca0 <xQueueReceive+0x198>
=======
 8009f4c:	f000 ff70 	bl	800ae30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f50:	f002 fbac 	bl	800c6ac <vPortEnterCritical>
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f5a:	b25b      	sxtb	r3, r3
 8009f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f60:	d103      	bne.n	8009f6a <xQueueReceive+0x122>
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f70:	b25b      	sxtb	r3, r3
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f76:	d103      	bne.n	8009f80 <xQueueReceive+0x138>
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f80:	f002 fbc4 	bl	800c70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f84:	1d3a      	adds	r2, r7, #4
 8009f86:	f107 0310 	add.w	r3, r7, #16
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f001 fa91 	bl	800b4b4 <xTaskCheckForTimeOut>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d123      	bne.n	8009fe0 <xQueueReceive+0x198>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 8009c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c5a:	f000 fadd 	bl	800a218 <prvIsQueueEmpty>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d017      	beq.n	8009c94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	3324      	adds	r3, #36	; 0x24
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 f8c5 	bl	800adfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c74:	f000 fa7e 	bl	800a174 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c78:	f000 fef2 	bl	800aa60 <xTaskResumeAll>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d189      	bne.n	8009b96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c82:	4b10      	ldr	r3, [pc, #64]	; (8009cc4 <xQueueReceive+0x1bc>)
 8009c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	e780      	b.n	8009b96 <xQueueReceive+0x8e>
=======
 8009f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9a:	f000 fadd 	bl	800a558 <prvIsQueueEmpty>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d017      	beq.n	8009fd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	3324      	adds	r3, #36	; 0x24
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	4611      	mov	r1, r2
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 f9b7 	bl	800b320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fb4:	f000 fa7e 	bl	800a4b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fb8:	f000 ff48 	bl	800ae4c <xTaskResumeAll>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d189      	bne.n	8009ed6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009fc2:	4b10      	ldr	r3, [pc, #64]	; (800a004 <xQueueReceive+0x1bc>)
 8009fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	e780      	b.n	8009ed6 <xQueueReceive+0x8e>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8009c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c96:	f000 fa6d 	bl	800a174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c9a:	f000 fee1 	bl	800aa60 <xTaskResumeAll>
 8009c9e:	e77a      	b.n	8009b96 <xQueueReceive+0x8e>
=======
 8009fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fd6:	f000 fa6d 	bl	800a4b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fda:	f000 ff37 	bl	800ae4c <xTaskResumeAll>
 8009fde:	e77a      	b.n	8009ed6 <xQueueReceive+0x8e>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8009ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca2:	f000 fa67 	bl	800a174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ca6:	f000 fedb 	bl	800aa60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cac:	f000 fab4 	bl	800a218 <prvIsQueueEmpty>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f43f af6f 	beq.w	8009b96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cb8:	2300      	movs	r3, #0
=======
 8009fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fe2:	f000 fa67 	bl	800a4b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fe6:	f000 ff31 	bl	800ae4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fec:	f000 fab4 	bl	800a558 <prvIsQueueEmpty>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f43f af6f 	beq.w	8009ed6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ff8:	2300      	movs	r3, #0
>>>>>>> e9380fc... optimisation RAM=)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
<<<<<<< HEAD
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3730      	adds	r7, #48	; 0x30
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	e000ed04 	.word	0xe000ed04

08009cc8 <xQueueSemaphoreTake>:
=======
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3730      	adds	r7, #48	; 0x30
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	e000ed04 	.word	0xe000ed04

0800a008 <xQueueSemaphoreTake>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08e      	sub	sp, #56	; 0x38
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	633b      	str	r3, [r7, #48]	; 0x30
=======
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08e      	sub	sp, #56	; 0x38
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a012:	2300      	movs	r3, #0
 800a014:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> e9380fc... optimisation RAM=)
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< HEAD
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10a      	bne.n	8009cfa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	623b      	str	r3, [r7, #32]
}
 8009cf6:	bf00      	nop
 8009cf8:	e7fe      	b.n	8009cf8 <xQueueSemaphoreTake+0x30>
=======
 800a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	623b      	str	r3, [r7, #32]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xQueueSemaphoreTake+0x30>
>>>>>>> e9380fc... optimisation RAM=)

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< HEAD
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	61fb      	str	r3, [r7, #28]
}
 8009d14:	bf00      	nop
 8009d16:	e7fe      	b.n	8009d16 <xQueueSemaphoreTake+0x4e>
=======
 800a03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00a      	beq.n	800a058 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	61fb      	str	r3, [r7, #28]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <xQueueSemaphoreTake+0x4e>
>>>>>>> e9380fc... optimisation RAM=)

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8009d18:	f001 fa32 	bl	800b180 <xTaskGetSchedulerState>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d102      	bne.n	8009d28 <xQueueSemaphoreTake+0x60>
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <xQueueSemaphoreTake+0x64>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e000      	b.n	8009d2e <xQueueSemaphoreTake+0x66>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10a      	bne.n	8009d48 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	61bb      	str	r3, [r7, #24]
}
 8009d44:	bf00      	nop
 8009d46:	e7fe      	b.n	8009d46 <xQueueSemaphoreTake+0x7e>
=======
 800a058:	f001 fbf8 	bl	800b84c <xTaskGetSchedulerState>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <xQueueSemaphoreTake+0x60>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <xQueueSemaphoreTake+0x64>
 800a068:	2301      	movs	r3, #1
 800a06a:	e000      	b.n	800a06e <xQueueSemaphoreTake+0x66>
 800a06c:	2300      	movs	r3, #0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	61bb      	str	r3, [r7, #24]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <xQueueSemaphoreTake+0x7e>
>>>>>>> e9380fc... optimisation RAM=)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8009d48:	f002 f808 	bl	800bd5c <vPortEnterCritical>
=======
 800a088:	f002 fb10 	bl	800c6ac <vPortEnterCritical>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 8009d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d50:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> e9380fc... optimisation RAM=)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d024      	beq.n	8009da2 <xQueueSemaphoreTake+0xda>
=======
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	2b00      	cmp	r3, #0
 800a096:	d024      	beq.n	800a0e2 <xQueueSemaphoreTake+0xda>
>>>>>>> e9380fc... optimisation RAM=)
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
<<<<<<< HEAD
 8009d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5a:	1e5a      	subs	r2, r3, #1
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	1e5a      	subs	r2, r3, #1
 800a09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> e9380fc... optimisation RAM=)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d104      	bne.n	8009d72 <xQueueSemaphoreTake+0xaa>
=======
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d104      	bne.n	800a0b2 <xQueueSemaphoreTake+0xaa>
>>>>>>> e9380fc... optimisation RAM=)
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
<<<<<<< HEAD
 8009d68:	f001 fb8a 	bl	800b480 <pvTaskIncrementMutexHeldCount>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	605a      	str	r2, [r3, #4]
=======
 800a0a8:	f001 fe92 	bl	800bdd0 <pvTaskIncrementMutexHeldCount>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b0:	605a      	str	r2, [r3, #4]
>>>>>>> e9380fc... optimisation RAM=)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8009d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00f      	beq.n	8009d9a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	3310      	adds	r3, #16
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f001 f88c 	bl	800ae9c <xTaskRemoveFromEventList>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d8a:	4b54      	ldr	r3, [pc, #336]	; (8009edc <xQueueSemaphoreTake+0x214>)
 8009d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	f3bf 8f6f 	isb	sy
=======
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00f      	beq.n	800a0da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	3310      	adds	r3, #16
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f001 f97e 	bl	800b3c0 <xTaskRemoveFromEventList>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d007      	beq.n	800a0da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0ca:	4b54      	ldr	r3, [pc, #336]	; (800a21c <xQueueSemaphoreTake+0x214>)
 800a0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	f3bf 8f6f 	isb	sy
>>>>>>> e9380fc... optimisation RAM=)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009d9a:	f002 f80f 	bl	800bdbc <vPortExitCritical>
				return pdPASS;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e097      	b.n	8009ed2 <xQueueSemaphoreTake+0x20a>
=======
 800a0da:	f002 fb17 	bl	800c70c <vPortExitCritical>
				return pdPASS;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e097      	b.n	800a212 <xQueueSemaphoreTake+0x20a>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d111      	bne.n	8009dcc <xQueueSemaphoreTake+0x104>
=======
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d111      	bne.n	800a10c <xQueueSemaphoreTake+0x104>
>>>>>>> e9380fc... optimisation RAM=)
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
<<<<<<< HEAD
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00a      	beq.n	8009dc4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	617b      	str	r3, [r7, #20]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <xQueueSemaphoreTake+0xfa>
=======
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	617b      	str	r3, [r7, #20]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <xQueueSemaphoreTake+0xfa>
>>>>>>> e9380fc... optimisation RAM=)
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009dc4:	f001 fffa 	bl	800bdbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	e082      	b.n	8009ed2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d106      	bne.n	8009de0 <xQueueSemaphoreTake+0x118>
=======
 800a104:	f002 fb02 	bl	800c70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a108:	2300      	movs	r3, #0
 800a10a:	e082      	b.n	800a212 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d106      	bne.n	800a120 <xQueueSemaphoreTake+0x118>
>>>>>>> e9380fc... optimisation RAM=)
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8009dd2:	f107 030c 	add.w	r3, r7, #12
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 f8c4 	bl	800af64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800a112:	f107 030c 	add.w	r3, r7, #12
 800a116:	4618      	mov	r0, r3
 800a118:	f001 f9b6 	bl	800b488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> e9380fc... optimisation RAM=)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009de0:	f001 ffec 	bl	800bdbc <vPortExitCritical>
=======
 800a120:	f002 faf4 	bl	800c70c <vPortExitCritical>
>>>>>>> e9380fc... optimisation RAM=)

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8009de4:	f000 fe2e 	bl	800aa44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009de8:	f001 ffb8 	bl	800bd5c <vPortEnterCritical>
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009df2:	b25b      	sxtb	r3, r3
 8009df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009df8:	d103      	bne.n	8009e02 <xQueueSemaphoreTake+0x13a>
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e08:	b25b      	sxtb	r3, r3
 8009e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e0e:	d103      	bne.n	8009e18 <xQueueSemaphoreTake+0x150>
 8009e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e18:	f001 ffd0 	bl	800bdbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e1c:	463a      	mov	r2, r7
 8009e1e:	f107 030c 	add.w	r3, r7, #12
 8009e22:	4611      	mov	r1, r2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 f8b3 	bl	800af90 <xTaskCheckForTimeOut>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d132      	bne.n	8009e96 <xQueueSemaphoreTake+0x1ce>
=======
 800a124:	f000 fe84 	bl	800ae30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a128:	f002 fac0 	bl	800c6ac <vPortEnterCritical>
 800a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a132:	b25b      	sxtb	r3, r3
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a138:	d103      	bne.n	800a142 <xQueueSemaphoreTake+0x13a>
 800a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a148:	b25b      	sxtb	r3, r3
 800a14a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a14e:	d103      	bne.n	800a158 <xQueueSemaphoreTake+0x150>
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a158:	f002 fad8 	bl	800c70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a15c:	463a      	mov	r2, r7
 800a15e:	f107 030c 	add.w	r3, r7, #12
 800a162:	4611      	mov	r1, r2
 800a164:	4618      	mov	r0, r3
 800a166:	f001 f9a5 	bl	800b4b4 <xTaskCheckForTimeOut>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d132      	bne.n	800a1d6 <xQueueSemaphoreTake+0x1ce>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 8009e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e32:	f000 f9f1 	bl	800a218 <prvIsQueueEmpty>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d026      	beq.n	8009e8a <xQueueSemaphoreTake+0x1c2>
=======
 800a170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a172:	f000 f9f1 	bl	800a558 <prvIsQueueEmpty>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d026      	beq.n	800a1ca <xQueueSemaphoreTake+0x1c2>
>>>>>>> e9380fc... optimisation RAM=)
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 8009e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d109      	bne.n	8009e58 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009e44:	f001 ff8a 	bl	800bd5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f001 f9b5 	bl	800b1bc <xTaskPriorityInherit>
 8009e52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009e54:	f001 ffb2 	bl	800bdbc <vPortExitCritical>
=======
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d109      	bne.n	800a198 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a184:	f002 fa92 	bl	800c6ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f001 fb7b 	bl	800b888 <xTaskPriorityInherit>
 800a192:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a194:	f002 faba 	bl	800c70c <vPortExitCritical>
>>>>>>> e9380fc... optimisation RAM=)
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< HEAD
 8009e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5a:	3324      	adds	r3, #36	; 0x24
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	4611      	mov	r1, r2
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 ffcb 	bl	800adfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e68:	f000 f984 	bl	800a174 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e6c:	f000 fdf8 	bl	800aa60 <xTaskResumeAll>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f47f af68 	bne.w	8009d48 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009e78:	4b18      	ldr	r3, [pc, #96]	; (8009edc <xQueueSemaphoreTake+0x214>)
 8009e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e7e:	601a      	str	r2, [r3, #0]
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	e75e      	b.n	8009d48 <xQueueSemaphoreTake+0x80>
=======
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	3324      	adds	r3, #36	; 0x24
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	4611      	mov	r1, r2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 f8bd 	bl	800b320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1a8:	f000 f984 	bl	800a4b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1ac:	f000 fe4e 	bl	800ae4c <xTaskResumeAll>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f47f af68 	bne.w	800a088 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a1b8:	4b18      	ldr	r3, [pc, #96]	; (800a21c <xQueueSemaphoreTake+0x214>)
 800a1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	e75e      	b.n	800a088 <xQueueSemaphoreTake+0x80>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8009e8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e8c:	f000 f972 	bl	800a174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e90:	f000 fde6 	bl	800aa60 <xTaskResumeAll>
 8009e94:	e758      	b.n	8009d48 <xQueueSemaphoreTake+0x80>
=======
 800a1ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1cc:	f000 f972 	bl	800a4b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1d0:	f000 fe3c 	bl	800ae4c <xTaskResumeAll>
 800a1d4:	e758      	b.n	800a088 <xQueueSemaphoreTake+0x80>
>>>>>>> e9380fc... optimisation RAM=)
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8009e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e98:	f000 f96c 	bl	800a174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e9c:	f000 fde0 	bl	800aa60 <xTaskResumeAll>
=======
 800a1d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1d8:	f000 f96c 	bl	800a4b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1dc:	f000 fe36 	bl	800ae4c <xTaskResumeAll>
>>>>>>> e9380fc... optimisation RAM=)

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 8009ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ea2:	f000 f9b9 	bl	800a218 <prvIsQueueEmpty>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f43f af4d 	beq.w	8009d48 <xQueueSemaphoreTake+0x80>
=======
 800a1e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1e2:	f000 f9b9 	bl	800a558 <prvIsQueueEmpty>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f43f af4d 	beq.w	800a088 <xQueueSemaphoreTake+0x80>
>>>>>>> e9380fc... optimisation RAM=)
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
<<<<<<< HEAD
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00d      	beq.n	8009ed0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009eb4:	f001 ff52 	bl	800bd5c <vPortEnterCritical>
=======
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00d      	beq.n	800a210 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a1f4:	f002 fa5a 	bl	800c6ac <vPortEnterCritical>
>>>>>>> e9380fc... optimisation RAM=)
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
<<<<<<< HEAD
 8009eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eba:	f000 f8b4 	bl	800a026 <prvGetDisinheritPriorityAfterTimeout>
 8009ebe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 fa54 	bl	800b374 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009ecc:	f001 ff76 	bl	800bdbc <vPortExitCritical>
=======
 800a1f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1fa:	f000 f8b4 	bl	800a366 <prvGetDisinheritPriorityAfterTimeout>
 800a1fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f001 fc1a 	bl	800ba40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a20c:	f002 fa7e 	bl	800c70c <vPortExitCritical>
>>>>>>> e9380fc... optimisation RAM=)
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
<<<<<<< HEAD
 8009ed0:	2300      	movs	r3, #0
=======
 800a210:	2300      	movs	r3, #0
>>>>>>> e9380fc... optimisation RAM=)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
<<<<<<< HEAD
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3738      	adds	r7, #56	; 0x38
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	e000ed04 	.word	0xe000ed04

08009ee0 <xQueueReceiveFromISR>:
=======
 800a212:	4618      	mov	r0, r3
 800a214:	3738      	adds	r7, #56	; 0x38
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	e000ed04 	.word	0xe000ed04

0800a220 <xQueueReceiveFromISR>:
>>>>>>> e9380fc... optimisation RAM=)
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
<<<<<<< HEAD
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08e      	sub	sp, #56	; 0x38
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10a      	bne.n	8009f0c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	623b      	str	r3, [r7, #32]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d103      	bne.n	8009f1a <xQueueReceiveFromISR+0x3a>
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <xQueueReceiveFromISR+0x3e>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <xQueueReceiveFromISR+0x40>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	61fb      	str	r3, [r7, #28]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xQueueReceiveFromISR+0x58>
=======
 800a220:	b580      	push	{r7, lr}
 800a222:	b08e      	sub	sp, #56	; 0x38
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	623b      	str	r3, [r7, #32]
}
 800a248:	bf00      	nop
 800a24a:	e7fe      	b.n	800a24a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d103      	bne.n	800a25a <xQueueReceiveFromISR+0x3a>
 800a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <xQueueReceiveFromISR+0x3e>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <xQueueReceiveFromISR+0x40>
 800a25e:	2300      	movs	r3, #0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	61fb      	str	r3, [r7, #28]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xQueueReceiveFromISR+0x58>
>>>>>>> e9380fc... optimisation RAM=)
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8009f3a:	f001 ffd1 	bl	800bee0 <vPortValidateInterruptPriority>
	__asm volatile
 8009f3e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	61ba      	str	r2, [r7, #24]
 8009f54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d02f      	beq.n	8009fc6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800a27a:	f002 fad9 	bl	800c830 <vPortValidateInterruptPriority>
	__asm volatile
 800a27e:	f3ef 8211 	mrs	r2, BASEPRI
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	61ba      	str	r2, [r7, #24]
 800a294:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a296:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a298:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d02f      	beq.n	800a306 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> e9380fc... optimisation RAM=)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
<<<<<<< HEAD
 8009f70:	68b9      	ldr	r1, [r7, #8]
 8009f72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f74:	f000 f8d8 	bl	800a128 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	1e5a      	subs	r2, r3, #1
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2b4:	f000 f8d8 	bl	800a468 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	1e5a      	subs	r2, r3, #1
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> e9380fc... optimisation RAM=)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
<<<<<<< HEAD
 8009f80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f88:	d112      	bne.n	8009fb0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d016      	beq.n	8009fc0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	3310      	adds	r3, #16
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 ff80 	bl	800ae9c <xTaskRemoveFromEventList>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00e      	beq.n	8009fc0 <xQueueReceiveFromISR+0xe0>
=======
 800a2c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2c8:	d112      	bne.n	800a2f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d016      	beq.n	800a300 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	3310      	adds	r3, #16
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f001 f872 	bl	800b3c0 <xTaskRemoveFromEventList>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00e      	beq.n	800a300 <xQueueReceiveFromISR+0xe0>
>>>>>>> e9380fc... optimisation RAM=)
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00b      	beq.n	8009fc0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	e007      	b.n	8009fc0 <xQueueReceiveFromISR+0xe0>
=======
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	e007      	b.n	800a300 <xQueueReceiveFromISR+0xe0>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
<<<<<<< HEAD
 8009fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	b25a      	sxtb	r2, r3
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8009fc4:	e001      	b.n	8009fca <xQueueReceiveFromISR+0xea>
=======
 800a2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	b25a      	sxtb	r2, r3
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a300:	2301      	movs	r3, #1
 800a302:	637b      	str	r3, [r7, #52]	; 0x34
 800a304:	e001      	b.n	800a30a <xQueueReceiveFromISR+0xea>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f383 8811 	msr	BASEPRI, r3
}
 8009fd4:	bf00      	nop
=======
 800a306:	2300      	movs	r3, #0
 800a308:	637b      	str	r3, [r7, #52]	; 0x34
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f383 8811 	msr	BASEPRI, r3
}
 800a314:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3738      	adds	r7, #56	; 0x38
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <vQueueDelete>:
=======
 800a316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3738      	adds	r7, #56	; 0x38
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <vQueueDelete>:
>>>>>>> e9380fc... optimisation RAM=)
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
<<<<<<< HEAD
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <vQueueDelete+0x28>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	60bb      	str	r3, [r7, #8]
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <vQueueDelete+0x26>
=======
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <vQueueDelete+0x28>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60bb      	str	r3, [r7, #8]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <vQueueDelete+0x26>
>>>>>>> e9380fc... optimisation RAM=)
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
<<<<<<< HEAD
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f95b 	bl	800a2c4 <vQueueUnregisterQueue>
=======
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 f95b 	bl	800a604 <vQueueUnregisterQueue>
>>>>>>> e9380fc... optimisation RAM=)
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
<<<<<<< HEAD
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f002 f863 	bl	800c0e4 <vPortFree>
=======
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a354:	2b00      	cmp	r3, #0
 800a356:	d102      	bne.n	800a35e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f002 fb6b 	bl	800ca34 <vPortFree>
>>>>>>> e9380fc... optimisation RAM=)
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
<<<<<<< HEAD
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <prvGetDisinheritPriorityAfterTimeout>:
=======
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <prvGetDisinheritPriorityAfterTimeout>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
<<<<<<< HEAD
 800a026:	b480      	push	{r7}
 800a028:	b085      	sub	sp, #20
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
=======
 800a366:	b480      	push	{r7}
 800a368:	b085      	sub	sp, #20
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
<<<<<<< HEAD
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	2b00      	cmp	r3, #0
 800a034:	d006      	beq.n	800a044 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	e001      	b.n	800a048 <prvGetDisinheritPriorityAfterTimeout+0x22>
=======
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	2b00      	cmp	r3, #0
 800a374:	d006      	beq.n	800a384 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a380:	60fb      	str	r3, [r7, #12]
 800a382:	e001      	b.n	800a388 <prvGetDisinheritPriorityAfterTimeout+0x22>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
<<<<<<< HEAD
 800a044:	2300      	movs	r3, #0
 800a046:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a048:	68fb      	ldr	r3, [r7, #12]
	}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	bc80      	pop	{r7}
 800a052:	4770      	bx	lr

0800a054 <prvCopyDataToQueue>:
=======
 800a384:	2300      	movs	r3, #0
 800a386:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a388:	68fb      	ldr	r3, [r7, #12]
	}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	bc80      	pop	{r7}
 800a392:	4770      	bx	lr

0800a394 <prvCopyDataToQueue>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a060:	2300      	movs	r3, #0
 800a062:	617b      	str	r3, [r7, #20]
=======
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a068:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10d      	bne.n	800a08e <prvCopyDataToQueue+0x3a>
=======
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10d      	bne.n	800a3ce <prvCopyDataToQueue+0x3a>
>>>>>>> e9380fc... optimisation RAM=)
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d14d      	bne.n	800a116 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 f90a 	bl	800b298 <xTaskPriorityDisinherit>
 800a084:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	605a      	str	r2, [r3, #4]
 800a08c:	e043      	b.n	800a116 <prvCopyDataToQueue+0xc2>
=======
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d14d      	bne.n	800a456 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 fad0 	bl	800b964 <xTaskPriorityDisinherit>
 800a3c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	605a      	str	r2, [r3, #4]
 800a3cc:	e043      	b.n	800a456 <prvCopyDataToQueue+0xc2>
>>>>>>> e9380fc... optimisation RAM=)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d119      	bne.n	800a0c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6898      	ldr	r0, [r3, #8]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09c:	461a      	mov	r2, r3
 800a09e:	68b9      	ldr	r1, [r7, #8]
 800a0a0:	f002 f960 	bl	800c364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	689a      	ldr	r2, [r3, #8]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ac:	441a      	add	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d32b      	bcc.n	800a116 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	609a      	str	r2, [r3, #8]
 800a0c6:	e026      	b.n	800a116 <prvCopyDataToQueue+0xc2>
=======
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d119      	bne.n	800a408 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6898      	ldr	r0, [r3, #8]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	f002 fc8c 	bl	800ccfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ec:	441a      	add	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	689a      	ldr	r2, [r3, #8]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d32b      	bcc.n	800a456 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	609a      	str	r2, [r3, #8]
 800a406:	e026      	b.n	800a456 <prvCopyDataToQueue+0xc2>
>>>>>>> e9380fc... optimisation RAM=)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	68d8      	ldr	r0, [r3, #12]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	68b9      	ldr	r1, [r7, #8]
 800a0d4:	f002 f946 	bl	800c364 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e0:	425b      	negs	r3, r3
 800a0e2:	441a      	add	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d207      	bcs.n	800a104 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	425b      	negs	r3, r3
 800a0fe:	441a      	add	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	60da      	str	r2, [r3, #12]
=======
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	68d8      	ldr	r0, [r3, #12]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a410:	461a      	mov	r2, r3
 800a412:	68b9      	ldr	r1, [r7, #8]
 800a414:	f002 fc72 	bl	800ccfc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	68da      	ldr	r2, [r3, #12]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a420:	425b      	negs	r3, r3
 800a422:	441a      	add	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d207      	bcs.n	800a444 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685a      	ldr	r2, [r3, #4]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43c:	425b      	negs	r3, r3
 800a43e:	441a      	add	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	60da      	str	r2, [r3, #12]
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b02      	cmp	r3, #2
 800a108:	d105      	bne.n	800a116 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <prvCopyDataToQueue+0xc2>
=======
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b02      	cmp	r3, #2
 800a448:	d105      	bne.n	800a456 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <prvCopyDataToQueue+0xc2>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	3b01      	subs	r3, #1
 800a114:	613b      	str	r3, [r7, #16]
=======
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	3b01      	subs	r3, #1
 800a454:	613b      	str	r3, [r7, #16]
>>>>>>> e9380fc... optimisation RAM=)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a11e:	697b      	ldr	r3, [r7, #20]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <prvCopyDataFromQueue>:
=======
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	1c5a      	adds	r2, r3, #1
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a45e:	697b      	ldr	r3, [r7, #20]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <prvCopyDataFromQueue>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	d018      	beq.n	800a16c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68da      	ldr	r2, [r3, #12]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	441a      	add	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d303      	bcc.n	800a15c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	60da      	str	r2, [r3, #12]
=======
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d018      	beq.n	800a4ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68da      	ldr	r2, [r3, #12]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	441a      	add	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	68da      	ldr	r2, [r3, #12]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	429a      	cmp	r2, r3
 800a492:	d303      	bcc.n	800a49c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	60da      	str	r2, [r3, #12]
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
<<<<<<< HEAD
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68d9      	ldr	r1, [r3, #12]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a164:	461a      	mov	r2, r3
 800a166:	6838      	ldr	r0, [r7, #0]
 800a168:	f002 f8fc 	bl	800c364 <memcpy>
	}
}
 800a16c:	bf00      	nop
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <prvUnlockQueue>:
=======
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68d9      	ldr	r1, [r3, #12]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6838      	ldr	r0, [r7, #0]
 800a4a8:	f002 fc28 	bl	800ccfc <memcpy>
	}
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <prvUnlockQueue>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
=======
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800a17c:	f001 fdee 	bl	800bd5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a186:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a188:	e011      	b.n	800a1ae <prvUnlockQueue+0x3a>
=======
 800a4bc:	f002 f8f6 	bl	800c6ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4c8:	e011      	b.n	800a4ee <prvUnlockQueue+0x3a>
>>>>>>> e9380fc... optimisation RAM=)
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d012      	beq.n	800a1b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3324      	adds	r3, #36	; 0x24
 800a196:	4618      	mov	r0, r3
 800a198:	f000 fe80 	bl	800ae9c <xTaskRemoveFromEventList>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <prvUnlockQueue+0x32>
=======
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d012      	beq.n	800a4f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3324      	adds	r3, #36	; 0x24
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 ff72 	bl	800b3c0 <xTaskRemoveFromEventList>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <prvUnlockQueue+0x32>
>>>>>>> e9380fc... optimisation RAM=)
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 800a1a2:	f000 ff57 	bl	800b054 <vTaskMissedYield>
=======
 800a4e2:	f001 f849 	bl	800b578 <vTaskMissedYield>
>>>>>>> e9380fc... optimisation RAM=)
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	dce9      	bgt.n	800a18a <prvUnlockQueue+0x16>
 800a1b6:	e000      	b.n	800a1ba <prvUnlockQueue+0x46>
					break;
 800a1b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	22ff      	movs	r2, #255	; 0xff
 800a1be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a1c2:	f001 fdfb 	bl	800bdbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a1c6:	f001 fdc9 	bl	800bd5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1d2:	e011      	b.n	800a1f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d012      	beq.n	800a202 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	3310      	adds	r3, #16
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fe5b 	bl	800ae9c <xTaskRemoveFromEventList>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1ec:	f000 ff32 	bl	800b054 <vTaskMissedYield>
=======
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	dce9      	bgt.n	800a4ca <prvUnlockQueue+0x16>
 800a4f6:	e000      	b.n	800a4fa <prvUnlockQueue+0x46>
					break;
 800a4f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	22ff      	movs	r2, #255	; 0xff
 800a4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a502:	f002 f903 	bl	800c70c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a506:	f002 f8d1 	bl	800c6ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a510:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a512:	e011      	b.n	800a538 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d012      	beq.n	800a542 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3310      	adds	r3, #16
 800a520:	4618      	mov	r0, r3
 800a522:	f000 ff4d 	bl	800b3c0 <xTaskRemoveFromEventList>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a52c:	f001 f824 	bl	800b578 <vTaskMissedYield>
>>>>>>> e9380fc... optimisation RAM=)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	dce9      	bgt.n	800a1d4 <prvUnlockQueue+0x60>
 800a200:	e000      	b.n	800a204 <prvUnlockQueue+0x90>
=======
 800a530:	7bbb      	ldrb	r3, [r7, #14]
 800a532:	3b01      	subs	r3, #1
 800a534:	b2db      	uxtb	r3, r3
 800a536:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	dce9      	bgt.n	800a514 <prvUnlockQueue+0x60>
 800a540:	e000      	b.n	800a544 <prvUnlockQueue+0x90>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				break;
<<<<<<< HEAD
 800a202:	bf00      	nop
=======
 800a542:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	22ff      	movs	r2, #255	; 0xff
 800a208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a20c:	f001 fdd6 	bl	800bdbc <vPortExitCritical>
}
 800a210:	bf00      	nop
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <prvIsQueueEmpty>:
=======
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	22ff      	movs	r2, #255	; 0xff
 800a548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a54c:	f002 f8de 	bl	800c70c <vPortExitCritical>
}
 800a550:	bf00      	nop
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <prvIsQueueEmpty>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a220:	f001 fd9c 	bl	800bd5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a22c:	2301      	movs	r3, #1
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	e001      	b.n	800a236 <prvIsQueueEmpty+0x1e>
=======
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a560:	f002 f8a4 	bl	800c6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d102      	bne.n	800a572 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a56c:	2301      	movs	r3, #1
 800a56e:	60fb      	str	r3, [r7, #12]
 800a570:	e001      	b.n	800a576 <prvIsQueueEmpty+0x1e>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 800a232:	2300      	movs	r3, #0
 800a234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a236:	f001 fdc1 	bl	800bdbc <vPortExitCritical>

	return xReturn;
 800a23a:	68fb      	ldr	r3, [r7, #12]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <prvIsQueueFull>:
=======
 800a572:	2300      	movs	r3, #0
 800a574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a576:	f002 f8c9 	bl	800c70c <vPortExitCritical>

	return xReturn;
 800a57a:	68fb      	ldr	r3, [r7, #12]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <prvIsQueueFull>:
>>>>>>> e9380fc... optimisation RAM=)
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a24c:	f001 fd86 	bl	800bd5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a258:	429a      	cmp	r2, r3
 800a25a:	d102      	bne.n	800a262 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a25c:	2301      	movs	r3, #1
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	e001      	b.n	800a266 <prvIsQueueFull+0x22>
=======
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a58c:	f002 f88e 	bl	800c6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a598:	429a      	cmp	r2, r3
 800a59a:	d102      	bne.n	800a5a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a59c:	2301      	movs	r3, #1
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	e001      	b.n	800a5a6 <prvIsQueueFull+0x22>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a266:	f001 fda9 	bl	800bdbc <vPortExitCritical>

	return xReturn;
 800a26a:	68fb      	ldr	r3, [r7, #12]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <vQueueAddToRegistry>:
=======
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5a6:	f002 f8b1 	bl	800c70c <vPortExitCritical>

	return xReturn;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <vQueueAddToRegistry>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
=======
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 800a27e:	2300      	movs	r3, #0
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	e014      	b.n	800a2ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a284:	4a0e      	ldr	r2, [pc, #56]	; (800a2c0 <vQueueAddToRegistry+0x4c>)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10b      	bne.n	800a2a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a290:	490b      	ldr	r1, [pc, #44]	; (800a2c0 <vQueueAddToRegistry+0x4c>)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a29a:	4a09      	ldr	r2, [pc, #36]	; (800a2c0 <vQueueAddToRegistry+0x4c>)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a2a6:	e006      	b.n	800a2b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b07      	cmp	r3, #7
 800a2b2:	d9e7      	bls.n	800a284 <vQueueAddToRegistry+0x10>
=======
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
 800a5c2:	e014      	b.n	800a5ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a5c4:	4a0e      	ldr	r2, [pc, #56]	; (800a600 <vQueueAddToRegistry+0x4c>)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10b      	bne.n	800a5e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a5d0:	490b      	ldr	r1, [pc, #44]	; (800a600 <vQueueAddToRegistry+0x4c>)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a5da:	4a09      	ldr	r2, [pc, #36]	; (800a600 <vQueueAddToRegistry+0x4c>)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	00db      	lsls	r3, r3, #3
 800a5e0:	4413      	add	r3, r2
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a5e6:	e006      	b.n	800a5f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b07      	cmp	r3, #7
 800a5f2:	d9e7      	bls.n	800a5c4 <vQueueAddToRegistry+0x10>
>>>>>>> e9380fc... optimisation RAM=)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bc80      	pop	{r7}
 800a2be:	4770      	bx	lr
 800a2c0:	20000b94 	.word	0x20000b94

0800a2c4 <vQueueUnregisterQueue>:
=======
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bc80      	pop	{r7}
 800a5fe:	4770      	bx	lr
 800a600:	200012b8 	.word	0x200012b8

0800a604 <vQueueUnregisterQueue>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
<<<<<<< HEAD
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
=======
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	e016      	b.n	800a300 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a2d2:	4a10      	ldr	r2, [pc, #64]	; (800a314 <vQueueUnregisterQueue+0x50>)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	4413      	add	r3, r2
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d10b      	bne.n	800a2fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a2e2:	4a0c      	ldr	r2, [pc, #48]	; (800a314 <vQueueUnregisterQueue+0x50>)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
=======
 800a60c:	2300      	movs	r3, #0
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	e016      	b.n	800a640 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a612:	4a10      	ldr	r2, [pc, #64]	; (800a654 <vQueueUnregisterQueue+0x50>)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	4413      	add	r3, r2
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d10b      	bne.n	800a63a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a622:	4a0c      	ldr	r2, [pc, #48]	; (800a654 <vQueueUnregisterQueue+0x50>)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2100      	movs	r1, #0
 800a628:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
>>>>>>> e9380fc... optimisation RAM=)

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
<<<<<<< HEAD
 800a2ec:	4a09      	ldr	r2, [pc, #36]	; (800a314 <vQueueUnregisterQueue+0x50>)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	4413      	add	r3, r2
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	605a      	str	r2, [r3, #4]
				break;
 800a2f8:	e006      	b.n	800a308 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2b07      	cmp	r3, #7
 800a304:	d9e5      	bls.n	800a2d2 <vQueueUnregisterQueue+0xe>
=======
 800a62c:	4a09      	ldr	r2, [pc, #36]	; (800a654 <vQueueUnregisterQueue+0x50>)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	00db      	lsls	r3, r3, #3
 800a632:	4413      	add	r3, r2
 800a634:	2200      	movs	r2, #0
 800a636:	605a      	str	r2, [r3, #4]
				break;
 800a638:	e006      	b.n	800a648 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2b07      	cmp	r3, #7
 800a644:	d9e5      	bls.n	800a612 <vQueueUnregisterQueue+0xe>
>>>>>>> e9380fc... optimisation RAM=)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
<<<<<<< HEAD
 800a306:	bf00      	nop
 800a308:	bf00      	nop
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bc80      	pop	{r7}
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000b94 	.word	0x20000b94

0800a318 <vQueueWaitForMessageRestricted>:
=======
 800a646:	bf00      	nop
 800a648:	bf00      	nop
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bc80      	pop	{r7}
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	200012b8 	.word	0x200012b8

0800a658 <vQueueWaitForMessageRestricted>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	617b      	str	r3, [r7, #20]
=======
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 800a328:	f001 fd18 	bl	800bd5c <vPortEnterCritical>
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a332:	b25b      	sxtb	r3, r3
 800a334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a338:	d103      	bne.n	800a342 <vQueueWaitForMessageRestricted+0x2a>
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a348:	b25b      	sxtb	r3, r3
 800a34a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a34e:	d103      	bne.n	800a358 <vQueueWaitForMessageRestricted+0x40>
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a358:	f001 fd30 	bl	800bdbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a360:	2b00      	cmp	r3, #0
 800a362:	d106      	bne.n	800a372 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	3324      	adds	r3, #36	; 0x24
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	68b9      	ldr	r1, [r7, #8]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fd69 	bl	800ae44 <vTaskPlaceOnEventListRestricted>
=======
 800a668:	f002 f820 	bl	800c6ac <vPortEnterCritical>
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a672:	b25b      	sxtb	r3, r3
 800a674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a678:	d103      	bne.n	800a682 <vQueueWaitForMessageRestricted+0x2a>
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a688:	b25b      	sxtb	r3, r3
 800a68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a68e:	d103      	bne.n	800a698 <vQueueWaitForMessageRestricted+0x40>
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a698:	f002 f838 	bl	800c70c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d106      	bne.n	800a6b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	3324      	adds	r3, #36	; 0x24
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	68b9      	ldr	r1, [r7, #8]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 fe5b 	bl	800b368 <vTaskPlaceOnEventListRestricted>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a372:	6978      	ldr	r0, [r7, #20]
 800a374:	f7ff fefe 	bl	800a174 <prvUnlockQueue>
	}
 800a378:	bf00      	nop
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <xTaskCreateStatic>:
=======
 800a6b2:	6978      	ldr	r0, [r7, #20]
 800a6b4:	f7ff fefe 	bl	800a4b4 <prvUnlockQueue>
	}
 800a6b8:	bf00      	nop
 800a6ba:	3718      	adds	r7, #24
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <xTaskCreateStatic>:
>>>>>>> e9380fc... optimisation RAM=)
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 800a380:	b580      	push	{r7, lr}
 800a382:	b08e      	sub	sp, #56	; 0x38
 800a384:	af04      	add	r7, sp, #16
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	603b      	str	r3, [r7, #0]
=======
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08e      	sub	sp, #56	; 0x38
 800a6c4:	af04      	add	r7, sp, #16
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	603b      	str	r3, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 800a38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10a      	bne.n	800a3aa <xTaskCreateStatic+0x2a>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	623b      	str	r3, [r7, #32]
}
 800a3a6:	bf00      	nop
 800a3a8:	e7fe      	b.n	800a3a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	61fb      	str	r3, [r7, #28]
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <xTaskCreateStatic+0x44>
=======
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10a      	bne.n	800a6ea <xTaskCreateStatic+0x2a>
	__asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	623b      	str	r3, [r7, #32]
}
 800a6e6:	bf00      	nop
 800a6e8:	e7fe      	b.n	800a6e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <xTaskCreateStatic+0x46>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	61fb      	str	r3, [r7, #28]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <xTaskCreateStatic+0x44>
>>>>>>> e9380fc... optimisation RAM=)
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 800a3c6:	23bc      	movs	r3, #188	; 0xbc
 800a3c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	2bbc      	cmp	r3, #188	; 0xbc
 800a3ce:	d00a      	beq.n	800a3e6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	61bb      	str	r3, [r7, #24]
}
 800a3e2:	bf00      	nop
 800a3e4:	e7fe      	b.n	800a3e4 <xTaskCreateStatic+0x64>
=======
 800a706:	23c0      	movs	r3, #192	; 0xc0
 800a708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	2bc0      	cmp	r3, #192	; 0xc0
 800a70e:	d00a      	beq.n	800a726 <xTaskCreateStatic+0x66>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	61bb      	str	r3, [r7, #24]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xTaskCreateStatic+0x64>
>>>>>>> e9380fc... optimisation RAM=)
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01e      	beq.n	800a42a <xTaskCreateStatic+0xaa>
 800a3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d01b      	beq.n	800a42a <xTaskCreateStatic+0xaa>
=======
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01e      	beq.n	800a76a <xTaskCreateStatic+0xaa>
 800a72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d01b      	beq.n	800a76a <xTaskCreateStatic+0xaa>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3fa:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a73a:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> e9380fc... optimisation RAM=)

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	2202      	movs	r2, #2
 800a400:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
=======
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
>>>>>>> e9380fc... optimisation RAM=)
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 800a404:	2300      	movs	r3, #0
 800a406:	9303      	str	r3, [sp, #12]
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	9302      	str	r3, [sp, #8]
 800a40c:	f107 0314 	add.w	r3, r7, #20
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	68b9      	ldr	r1, [r7, #8]
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 f851 	bl	800a4c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a424:	f000 f8ec 	bl	800a600 <prvAddNewTaskToReadyList>
 800a428:	e001      	b.n	800a42e <xTaskCreateStatic+0xae>
=======
 800a744:	2300      	movs	r3, #0
 800a746:	9303      	str	r3, [sp, #12]
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	9302      	str	r3, [sp, #8]
 800a74c:	f107 0314 	add.w	r3, r7, #20
 800a750:	9301      	str	r3, [sp, #4]
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 f851 	bl	800a804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a764:	f000 f8f0 	bl	800a948 <prvAddNewTaskToReadyList>
 800a768:	e001      	b.n	800a76e <xTaskCreateStatic+0xae>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 800a42a:	2300      	movs	r3, #0
 800a42c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a42e:	697b      	ldr	r3, [r7, #20]
	}
 800a430:	4618      	mov	r0, r3
 800a432:	3728      	adds	r7, #40	; 0x28
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <xTaskCreate>:
=======
 800a76a:	2300      	movs	r3, #0
 800a76c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a76e:	697b      	ldr	r3, [r7, #20]
	}
 800a770:	4618      	mov	r0, r3
 800a772:	3728      	adds	r7, #40	; 0x28
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <xTaskCreate>:
>>>>>>> e9380fc... optimisation RAM=)
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08c      	sub	sp, #48	; 0x30
 800a43c:	af04      	add	r7, sp, #16
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	603b      	str	r3, [r7, #0]
 800a444:	4613      	mov	r3, r2
 800a446:	80fb      	strh	r3, [r7, #6]
=======
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08c      	sub	sp, #48	; 0x30
 800a77c:	af04      	add	r7, sp, #16
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	603b      	str	r3, [r7, #0]
 800a784:	4613      	mov	r3, r2
 800a786:	80fb      	strh	r3, [r7, #6]
>>>>>>> e9380fc... optimisation RAM=)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800a448:	88fb      	ldrh	r3, [r7, #6]
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f001 fd85 	bl	800bf5c <pvPortMalloc>
 800a452:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00e      	beq.n	800a478 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a45a:	20bc      	movs	r0, #188	; 0xbc
 800a45c:	f001 fd7e 	bl	800bf5c <pvPortMalloc>
 800a460:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	631a      	str	r2, [r3, #48]	; 0x30
 800a46e:	e005      	b.n	800a47c <xTaskCreate+0x44>
=======
 800a788:	88fb      	ldrh	r3, [r7, #6]
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f002 f88d 	bl	800c8ac <pvPortMalloc>
 800a792:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00e      	beq.n	800a7b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a79a:	20c0      	movs	r0, #192	; 0xc0
 800a79c:	f002 f886 	bl	800c8ac <pvPortMalloc>
 800a7a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d003      	beq.n	800a7b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	631a      	str	r2, [r3, #48]	; 0x30
 800a7ae:	e005      	b.n	800a7bc <xTaskCreate+0x44>
>>>>>>> e9380fc... optimisation RAM=)
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 800a470:	6978      	ldr	r0, [r7, #20]
 800a472:	f001 fe37 	bl	800c0e4 <vPortFree>
 800a476:	e001      	b.n	800a47c <xTaskCreate+0x44>
=======
 800a7b0:	6978      	ldr	r0, [r7, #20]
 800a7b2:	f002 f93f 	bl	800ca34 <vPortFree>
 800a7b6:	e001      	b.n	800a7bc <xTaskCreate+0x44>
>>>>>>> e9380fc... optimisation RAM=)
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 800a478:	2300      	movs	r3, #0
 800a47a:	61fb      	str	r3, [r7, #28]
=======
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	61fb      	str	r3, [r7, #28]
>>>>>>> e9380fc... optimisation RAM=)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d017      	beq.n	800a4b2 <xTaskCreate+0x7a>
=======
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d017      	beq.n	800a7f2 <xTaskCreate+0x7a>
>>>>>>> e9380fc... optimisation RAM=)
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
=======
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
>>>>>>> e9380fc... optimisation RAM=)
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 800a48a:	88fa      	ldrh	r2, [r7, #6]
 800a48c:	2300      	movs	r3, #0
 800a48e:	9303      	str	r3, [sp, #12]
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	9302      	str	r3, [sp, #8]
 800a494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a496:	9301      	str	r3, [sp, #4]
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f80f 	bl	800a4c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4a6:	69f8      	ldr	r0, [r7, #28]
 800a4a8:	f000 f8aa 	bl	800a600 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	61bb      	str	r3, [r7, #24]
 800a4b0:	e002      	b.n	800a4b8 <xTaskCreate+0x80>
=======
 800a7ca:	88fa      	ldrh	r2, [r7, #6]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	9303      	str	r3, [sp, #12]
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	9302      	str	r3, [sp, #8]
 800a7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d6:	9301      	str	r3, [sp, #4]
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 f80f 	bl	800a804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7e6:	69f8      	ldr	r0, [r7, #28]
 800a7e8:	f000 f8ae 	bl	800a948 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	61bb      	str	r3, [r7, #24]
 800a7f0:	e002      	b.n	800a7f8 <xTaskCreate+0x80>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 800a4b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a4b8:	69bb      	ldr	r3, [r7, #24]
	}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3720      	adds	r7, #32
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <prvInitialiseNewTask>:
=======
 800a7f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a7f8:	69bb      	ldr	r3, [r7, #24]
	}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3720      	adds	r7, #32
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
	...

0800a804 <prvInitialiseNewTask>:
>>>>>>> e9380fc... optimisation RAM=)
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
=======
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	461a      	mov	r2, r3
 800a4dc:	21a5      	movs	r1, #165	; 0xa5
 800a4de:	f001 ff4f 	bl	800c380 <memset>
=======
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	461a      	mov	r2, r3
 800a81c:	21a5      	movs	r1, #165	; 0xa5
 800a81e:	f002 fa7b 	bl	800cd18 <memset>
>>>>>>> e9380fc... optimisation RAM=)
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
<<<<<<< HEAD
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	f023 0307 	bic.w	r3, r3, #7
 800a4fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	617b      	str	r3, [r7, #20]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <prvInitialiseNewTask+0x56>
=======
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a82c:	3b01      	subs	r3, #1
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	f023 0307 	bic.w	r3, r3, #7
 800a83a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	f003 0307 	and.w	r3, r3, #7
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	617b      	str	r3, [r7, #20]
}
 800a858:	bf00      	nop
 800a85a:	e7fe      	b.n	800a85a <prvInitialiseNewTask+0x56>
>>>>>>> e9380fc... optimisation RAM=)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< HEAD
 800a51c:	2300      	movs	r3, #0
 800a51e:	61fb      	str	r3, [r7, #28]
 800a520:	e012      	b.n	800a548 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	4413      	add	r3, r2
 800a528:	7819      	ldrb	r1, [r3, #0]
 800a52a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	4413      	add	r3, r2
 800a530:	3334      	adds	r3, #52	; 0x34
 800a532:	460a      	mov	r2, r1
 800a534:	701a      	strb	r2, [r3, #0]
=======
 800a85c:	2300      	movs	r3, #0
 800a85e:	61fb      	str	r3, [r7, #28]
 800a860:	e012      	b.n	800a888 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	4413      	add	r3, r2
 800a868:	7819      	ldrb	r1, [r3, #0]
 800a86a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	4413      	add	r3, r2
 800a870:	3334      	adds	r3, #52	; 0x34
 800a872:	460a      	mov	r2, r1
 800a874:	701a      	strb	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
<<<<<<< HEAD
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	4413      	add	r3, r2
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d006      	beq.n	800a550 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	3301      	adds	r3, #1
 800a546:	61fb      	str	r3, [r7, #28]
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	2b0f      	cmp	r3, #15
 800a54c:	d9e9      	bls.n	800a522 <prvInitialiseNewTask+0x5e>
 800a54e:	e000      	b.n	800a552 <prvInitialiseNewTask+0x8e>
		{
			break;
 800a550:	bf00      	nop
=======
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	4413      	add	r3, r2
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d006      	beq.n	800a890 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	3301      	adds	r3, #1
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	2b0f      	cmp	r3, #15
 800a88c:	d9e9      	bls.n	800a862 <prvInitialiseNewTask+0x5e>
 800a88e:	e000      	b.n	800a892 <prvInitialiseNewTask+0x8e>
		{
			break;
 800a890:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	2200      	movs	r2, #0
 800a556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
=======
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
>>>>>>> e9380fc... optimisation RAM=)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	2b37      	cmp	r3, #55	; 0x37
 800a55e:	d901      	bls.n	800a564 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a560:	2337      	movs	r3, #55	; 0x37
 800a562:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800a89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89c:	2b37      	cmp	r3, #55	; 0x37
 800a89e:	d901      	bls.n	800a8a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8a0:	2337      	movs	r3, #55	; 0x37
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> e9380fc... optimisation RAM=)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a568:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a56e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	2200      	movs	r2, #0
 800a574:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> e9380fc... optimisation RAM=)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	3304      	adds	r3, #4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fdad 	bl	80090da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	3318      	adds	r3, #24
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe fda8 	bl	80090da <vListInitialiseItem>
=======
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fe fdad 	bl	800941a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	3318      	adds	r3, #24
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe fda8 	bl	800941a <vListInitialiseItem>
>>>>>>> e9380fc... optimisation RAM=)

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a58e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59e:	625a      	str	r2, [r3, #36]	; 0x24
=======
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> e9380fc... optimisation RAM=)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
=======
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
>>>>>>> e9380fc... optimisation RAM=)
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< HEAD
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	3354      	adds	r3, #84	; 0x54
 800a5b4:	2260      	movs	r2, #96	; 0x60
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f001 fee1 	bl	800c380 <memset>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	4a0c      	ldr	r2, [pc, #48]	; (800a5f4 <prvInitialiseNewTask+0x130>)
 800a5c2:	659a      	str	r2, [r3, #88]	; 0x58
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	4a0c      	ldr	r2, [pc, #48]	; (800a5f8 <prvInitialiseNewTask+0x134>)
 800a5c8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	4a0b      	ldr	r2, [pc, #44]	; (800a5fc <prvInitialiseNewTask+0x138>)
 800a5ce:	661a      	str	r2, [r3, #96]	; 0x60
=======
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	3358      	adds	r3, #88	; 0x58
 800a8fa:	2260      	movs	r2, #96	; 0x60
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	4618      	mov	r0, r3
 800a900:	f002 fa0a 	bl	800cd18 <memset>
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	4a0d      	ldr	r2, [pc, #52]	; (800a93c <prvInitialiseNewTask+0x138>)
 800a908:	65da      	str	r2, [r3, #92]	; 0x5c
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	4a0c      	ldr	r2, [pc, #48]	; (800a940 <prvInitialiseNewTask+0x13c>)
 800a90e:	661a      	str	r2, [r3, #96]	; 0x60
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	4a0c      	ldr	r2, [pc, #48]	; (800a944 <prvInitialiseNewTask+0x140>)
 800a914:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> e9380fc... optimisation RAM=)
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	68f9      	ldr	r1, [r7, #12]
 800a5d4:	69b8      	ldr	r0, [r7, #24]
 800a5d6:	f001 facd 	bl	800bb74 <pxPortInitialiseStack>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	601a      	str	r2, [r3, #0]
=======
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	68f9      	ldr	r1, [r7, #12]
 800a91a:	69b8      	ldr	r0, [r7, #24]
 800a91c:	f001 fdd2 	bl	800c4c4 <pxPortInitialiseStack>
 800a920:	4602      	mov	r2, r0
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
<<<<<<< HEAD
 800a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <prvInitialiseNewTask+0x128>
=======
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d002      	beq.n	800a932 <prvInitialiseNewTask+0x12e>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 800a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ea:	601a      	str	r2, [r3, #0]
=======
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a930:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800a5ec:	bf00      	nop
 800a5ee:	3720      	adds	r7, #32
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	0800d290 	.word	0x0800d290
 800a5f8:	0800d2b0 	.word	0x0800d2b0
 800a5fc:	0800d270 	.word	0x0800d270

0800a600 <prvAddNewTaskToReadyList>:
=======
 800a932:	bf00      	nop
 800a934:	3720      	adds	r7, #32
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	0800dde0 	.word	0x0800dde0
 800a940:	0800de00 	.word	0x0800de00
 800a944:	0800ddc0 	.word	0x0800ddc0

0800a948 <prvAddNewTaskToReadyList>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a608:	f001 fba8 	bl	800bd5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a60c:	4b2d      	ldr	r3, [pc, #180]	; (800a6c4 <prvAddNewTaskToReadyList+0xc4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	4a2c      	ldr	r2, [pc, #176]	; (800a6c4 <prvAddNewTaskToReadyList+0xc4>)
 800a614:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a616:	4b2c      	ldr	r3, [pc, #176]	; (800a6c8 <prvAddNewTaskToReadyList+0xc8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d109      	bne.n	800a632 <prvAddNewTaskToReadyList+0x32>
=======
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a950:	f001 feac 	bl	800c6ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a954:	4b2d      	ldr	r3, [pc, #180]	; (800aa0c <prvAddNewTaskToReadyList+0xc4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3301      	adds	r3, #1
 800a95a:	4a2c      	ldr	r2, [pc, #176]	; (800aa0c <prvAddNewTaskToReadyList+0xc4>)
 800a95c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a95e:	4b2c      	ldr	r3, [pc, #176]	; (800aa10 <prvAddNewTaskToReadyList+0xc8>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d109      	bne.n	800a97a <prvAddNewTaskToReadyList+0x32>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800a61e:	4a2a      	ldr	r2, [pc, #168]	; (800a6c8 <prvAddNewTaskToReadyList+0xc8>)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a624:	4b27      	ldr	r3, [pc, #156]	; (800a6c4 <prvAddNewTaskToReadyList+0xc4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d110      	bne.n	800a64e <prvAddNewTaskToReadyList+0x4e>
=======
 800a966:	4a2a      	ldr	r2, [pc, #168]	; (800aa10 <prvAddNewTaskToReadyList+0xc8>)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a96c:	4b27      	ldr	r3, [pc, #156]	; (800aa0c <prvAddNewTaskToReadyList+0xc4>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d110      	bne.n	800a996 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 800a62c:	f000 fd36 	bl	800b09c <prvInitialiseTaskLists>
 800a630:	e00d      	b.n	800a64e <prvAddNewTaskToReadyList+0x4e>
=======
 800a974:	f000 fe24 	bl	800b5c0 <prvInitialiseTaskLists>
 800a978:	e00d      	b.n	800a996 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 800a632:	4b26      	ldr	r3, [pc, #152]	; (800a6cc <prvAddNewTaskToReadyList+0xcc>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a63a:	4b23      	ldr	r3, [pc, #140]	; (800a6c8 <prvAddNewTaskToReadyList+0xc8>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	429a      	cmp	r2, r3
 800a646:	d802      	bhi.n	800a64e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a648:	4a1f      	ldr	r2, [pc, #124]	; (800a6c8 <prvAddNewTaskToReadyList+0xc8>)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6013      	str	r3, [r2, #0]
=======
 800a97a:	4b26      	ldr	r3, [pc, #152]	; (800aa14 <prvAddNewTaskToReadyList+0xcc>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d109      	bne.n	800a996 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a982:	4b23      	ldr	r3, [pc, #140]	; (800aa10 <prvAddNewTaskToReadyList+0xc8>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d802      	bhi.n	800a996 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a990:	4a1f      	ldr	r2, [pc, #124]	; (800aa10 <prvAddNewTaskToReadyList+0xc8>)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 800a64e:	4b20      	ldr	r3, [pc, #128]	; (800a6d0 <prvAddNewTaskToReadyList+0xd0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3301      	adds	r3, #1
 800a654:	4a1e      	ldr	r2, [pc, #120]	; (800a6d0 <prvAddNewTaskToReadyList+0xd0>)
 800a656:	6013      	str	r3, [r2, #0]
=======
 800a996:	4b20      	ldr	r3, [pc, #128]	; (800aa18 <prvAddNewTaskToReadyList+0xd0>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3301      	adds	r3, #1
 800a99c:	4a1e      	ldr	r2, [pc, #120]	; (800aa18 <prvAddNewTaskToReadyList+0xd0>)
 800a99e:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 800a658:	4b1d      	ldr	r3, [pc, #116]	; (800a6d0 <prvAddNewTaskToReadyList+0xd0>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800a9a0:	4b1d      	ldr	r3, [pc, #116]	; (800aa18 <prvAddNewTaskToReadyList+0xd0>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> e9380fc... optimisation RAM=)
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a664:	4b1b      	ldr	r3, [pc, #108]	; (800a6d4 <prvAddNewTaskToReadyList+0xd4>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d903      	bls.n	800a674 <prvAddNewTaskToReadyList+0x74>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	4a18      	ldr	r2, [pc, #96]	; (800a6d4 <prvAddNewTaskToReadyList+0xd4>)
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a678:	4613      	mov	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4413      	add	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <prvAddNewTaskToReadyList+0xd8>)
 800a682:	441a      	add	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	3304      	adds	r3, #4
 800a688:	4619      	mov	r1, r3
 800a68a:	4610      	mov	r0, r2
 800a68c:	f7fe fd31 	bl	80090f2 <vListInsertEnd>
=======
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ac:	4b1b      	ldr	r3, [pc, #108]	; (800aa1c <prvAddNewTaskToReadyList+0xd4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d903      	bls.n	800a9bc <prvAddNewTaskToReadyList+0x74>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b8:	4a18      	ldr	r2, [pc, #96]	; (800aa1c <prvAddNewTaskToReadyList+0xd4>)
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4413      	add	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4a15      	ldr	r2, [pc, #84]	; (800aa20 <prvAddNewTaskToReadyList+0xd8>)
 800a9ca:	441a      	add	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	f7fe fd2d 	bl	8009432 <vListInsertEnd>
>>>>>>> e9380fc... optimisation RAM=)

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a690:	f001 fb94 	bl	800bdbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a694:	4b0d      	ldr	r3, [pc, #52]	; (800a6cc <prvAddNewTaskToReadyList+0xcc>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00e      	beq.n	800a6ba <prvAddNewTaskToReadyList+0xba>
=======
 800a9d8:	f001 fe98 	bl	800c70c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9dc:	4b0d      	ldr	r3, [pc, #52]	; (800aa14 <prvAddNewTaskToReadyList+0xcc>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00e      	beq.n	800aa02 <prvAddNewTaskToReadyList+0xba>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 800a69c:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <prvAddNewTaskToReadyList+0xc8>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d207      	bcs.n	800a6ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a6aa:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <prvAddNewTaskToReadyList+0xdc>)
 800a6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b0:	601a      	str	r2, [r3, #0]
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	f3bf 8f6f 	isb	sy
=======
 800a9e4:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <prvAddNewTaskToReadyList+0xc8>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d207      	bcs.n	800aa02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a9f2:	4b0c      	ldr	r3, [pc, #48]	; (800aa24 <prvAddNewTaskToReadyList+0xdc>)
 800a9f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f8:	601a      	str	r2, [r3, #0]
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	f3bf 8f6f 	isb	sy
>>>>>>> e9380fc... optimisation RAM=)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800a6ba:	bf00      	nop
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20001090 	.word	0x20001090
 800a6c8:	20000bd4 	.word	0x20000bd4
 800a6cc:	2000109c 	.word	0x2000109c
 800a6d0:	200010ac 	.word	0x200010ac
 800a6d4:	20001098 	.word	0x20001098
 800a6d8:	20000bd8 	.word	0x20000bd8
 800a6dc:	e000ed04 	.word	0xe000ed04

0800a6e0 <vTaskDelay>:
=======
 800aa02:	bf00      	nop
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	200017b4 	.word	0x200017b4
 800aa10:	200012f8 	.word	0x200012f8
 800aa14:	200017c0 	.word	0x200017c0
 800aa18:	200017d0 	.word	0x200017d0
 800aa1c:	200017bc 	.word	0x200017bc
 800aa20:	200012fc 	.word	0x200012fc
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <vTaskDelay>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d017      	beq.n	800a722 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6f2:	4b13      	ldr	r3, [pc, #76]	; (800a740 <vTaskDelay+0x60>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <vTaskDelay+0x30>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	60bb      	str	r3, [r7, #8]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a710:	f000 f998 	bl	800aa44 <vTaskSuspendAll>
=======
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d017      	beq.n	800aa6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa3a:	4b13      	ldr	r3, [pc, #76]	; (800aa88 <vTaskDelay+0x60>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00a      	beq.n	800aa58 <vTaskDelay+0x30>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	60bb      	str	r3, [r7, #8]
}
 800aa54:	bf00      	nop
 800aa56:	e7fe      	b.n	800aa56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa58:	f000 f9ea 	bl	800ae30 <vTaskSuspendAll>
>>>>>>> e9380fc... optimisation RAM=)
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 800a714:	2100      	movs	r1, #0
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fec6 	bl	800b4a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a71c:	f000 f9a0 	bl	800aa60 <xTaskResumeAll>
 800a720:	60f8      	str	r0, [r7, #12]
=======
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 f9ca 	bl	800bdf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa64:	f000 f9f2 	bl	800ae4c <xTaskResumeAll>
 800aa68:	60f8      	str	r0, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d107      	bne.n	800a738 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a728:	4b06      	ldr	r3, [pc, #24]	; (800a744 <vTaskDelay+0x64>)
 800a72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	f3bf 8f6f 	isb	sy
=======
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d107      	bne.n	800aa80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aa70:	4b06      	ldr	r3, [pc, #24]	; (800aa8c <vTaskDelay+0x64>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800a738:	bf00      	nop
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	200010b8 	.word	0x200010b8
 800a744:	e000ed04 	.word	0xe000ed04

0800a748 <vTaskSuspend>:
=======
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	200017dc 	.word	0x200017dc
 800aa8c:	e000ed04 	.word	0xe000ed04

0800aa90 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10a      	bne.n	800aab8 <eTaskGetState+0x28>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	60bb      	str	r3, [r7, #8]
}
 800aab4:	bf00      	nop
 800aab6:	e7fe      	b.n	800aab6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800aab8:	4b18      	ldr	r3, [pc, #96]	; (800ab1c <eTaskGetState+0x8c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d102      	bne.n	800aac8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800aac2:	2300      	movs	r3, #0
 800aac4:	75fb      	strb	r3, [r7, #23]
 800aac6:	e023      	b.n	800ab10 <eTaskGetState+0x80>
		}
		else
		{
			taskENTER_CRITICAL();
 800aac8:	f001 fdf0 	bl	800c6ac <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800aad2:	f001 fe1b 	bl	800c70c <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 800aad6:	4b12      	ldr	r3, [pc, #72]	; (800ab20 <eTaskGetState+0x90>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d004      	beq.n	800aaea <eTaskGetState+0x5a>
 800aae0:	4b10      	ldr	r3, [pc, #64]	; (800ab24 <eTaskGetState+0x94>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d102      	bne.n	800aaf0 <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800aaea:	2302      	movs	r3, #2
 800aaec:	75fb      	strb	r3, [r7, #23]
 800aaee:	e00f      	b.n	800ab10 <eTaskGetState+0x80>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4a0d      	ldr	r2, [pc, #52]	; (800ab28 <eTaskGetState+0x98>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d109      	bne.n	800ab0c <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d102      	bne.n	800ab06 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 800ab00:	2303      	movs	r3, #3
 800ab02:	75fb      	strb	r3, [r7, #23]
 800ab04:	e004      	b.n	800ab10 <eTaskGetState+0x80>
					}
					else
					{
						eReturn = eBlocked;
 800ab06:	2302      	movs	r3, #2
 800ab08:	75fb      	strb	r3, [r7, #23]
 800ab0a:	e001      	b.n	800ab10 <eTaskGetState+0x80>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	200012f8 	.word	0x200012f8
 800ab20:	20001784 	.word	0x20001784
 800ab24:	20001788 	.word	0x20001788
 800ab28:	200017a0 	.word	0x200017a0

0800ab2c <vTaskSuspend>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
<<<<<<< HEAD
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a750:	f001 fb04 	bl	800bd5c <vPortEnterCritical>
=======
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ab34:	f001 fdba 	bl	800c6ac <vPortEnterCritical>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
<<<<<<< HEAD
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <vTaskSuspend+0x18>
 800a75a:	4b30      	ldr	r3, [pc, #192]	; (800a81c <vTaskSuspend+0xd4>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	e000      	b.n	800a762 <vTaskSuspend+0x1a>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	60fb      	str	r3, [r7, #12]
=======
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d102      	bne.n	800ab44 <vTaskSuspend+0x18>
 800ab3e:	4b30      	ldr	r3, [pc, #192]	; (800ac00 <vTaskSuspend+0xd4>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	e000      	b.n	800ab46 <vTaskSuspend+0x1a>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3304      	adds	r3, #4
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe fd1d 	bl	80091a8 <uxListRemove>
=======
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe fccb 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a772:	2b00      	cmp	r3, #0
 800a774:	d004      	beq.n	800a780 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3318      	adds	r3, #24
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe fd14 	bl	80091a8 <uxListRemove>
=======
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d004      	beq.n	800ab64 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	3318      	adds	r3, #24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fcc2 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3304      	adds	r3, #4
 800a784:	4619      	mov	r1, r3
 800a786:	4826      	ldr	r0, [pc, #152]	; (800a820 <vTaskSuspend+0xd8>)
 800a788:	f7fe fcb3 	bl	80090f2 <vListInsertEnd>
=======
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	3304      	adds	r3, #4
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4826      	ldr	r0, [pc, #152]	; (800ac04 <vTaskSuspend+0xd8>)
 800ab6c:	f7fe fc61 	bl	8009432 <vListInsertEnd>
>>>>>>> e9380fc... optimisation RAM=)

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
<<<<<<< HEAD
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b01      	cmp	r3, #1
 800a796:	d103      	bne.n	800a7a0 <vTaskSuspend+0x58>
=======
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d103      	bne.n	800ab84 <vTaskSuspend+0x58>
>>>>>>> e9380fc... optimisation RAM=)
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
<<<<<<< HEAD
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
=======
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
>>>>>>> e9380fc... optimisation RAM=)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a7a0:	f001 fb0c 	bl	800bdbc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a7a4:	4b1f      	ldr	r3, [pc, #124]	; (800a824 <vTaskSuspend+0xdc>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <vTaskSuspend+0x70>
=======
 800ab84:	f001 fdc2 	bl	800c70c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ab88:	4b1f      	ldr	r3, [pc, #124]	; (800ac08 <vTaskSuspend+0xdc>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d005      	beq.n	800ab9c <vTaskSuspend+0x70>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
<<<<<<< HEAD
 800a7ac:	f001 fad6 	bl	800bd5c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a7b0:	f000 fcb4 	bl	800b11c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a7b4:	f001 fb02 	bl	800bdbc <vPortExitCritical>
=======
 800ab90:	f001 fd8c 	bl	800c6ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ab94:	f000 fe28 	bl	800b7e8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ab98:	f001 fdb8 	bl	800c70c <vPortExitCritical>
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
<<<<<<< HEAD
 800a7b8:	4b18      	ldr	r3, [pc, #96]	; (800a81c <vTaskSuspend+0xd4>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d127      	bne.n	800a812 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a7c2:	4b18      	ldr	r3, [pc, #96]	; (800a824 <vTaskSuspend+0xdc>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d017      	beq.n	800a7fa <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a7ca:	4b17      	ldr	r3, [pc, #92]	; (800a828 <vTaskSuspend+0xe0>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00a      	beq.n	800a7e8 <vTaskSuspend+0xa0>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	60bb      	str	r3, [r7, #8]
}
 800a7e4:	bf00      	nop
 800a7e6:	e7fe      	b.n	800a7e6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a7e8:	4b10      	ldr	r3, [pc, #64]	; (800a82c <vTaskSuspend+0xe4>)
 800a7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	f3bf 8f6f 	isb	sy
=======
 800ab9c:	4b18      	ldr	r3, [pc, #96]	; (800ac00 <vTaskSuspend+0xd4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d127      	bne.n	800abf6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800aba6:	4b18      	ldr	r3, [pc, #96]	; (800ac08 <vTaskSuspend+0xdc>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d017      	beq.n	800abde <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800abae:	4b17      	ldr	r3, [pc, #92]	; (800ac0c <vTaskSuspend+0xe0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00a      	beq.n	800abcc <vTaskSuspend+0xa0>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	60bb      	str	r3, [r7, #8]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800abcc:	4b10      	ldr	r3, [pc, #64]	; (800ac10 <vTaskSuspend+0xe4>)
 800abce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	f3bf 8f6f 	isb	sy
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800a7f8:	e00b      	b.n	800a812 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <vTaskSuspend+0xd8>)
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	4b0c      	ldr	r3, [pc, #48]	; (800a830 <vTaskSuspend+0xe8>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	429a      	cmp	r2, r3
 800a804:	d103      	bne.n	800a80e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <vTaskSuspend+0xd4>)
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]
	}
 800a80c:	e001      	b.n	800a812 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a80e:	f000 fa91 	bl	800ad34 <vTaskSwitchContext>
	}
 800a812:	bf00      	nop
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20000bd4 	.word	0x20000bd4
 800a820:	2000107c 	.word	0x2000107c
 800a824:	2000109c 	.word	0x2000109c
 800a828:	200010b8 	.word	0x200010b8
 800a82c:	e000ed04 	.word	0xe000ed04
 800a830:	20001090 	.word	0x20001090

0800a834 <prvTaskIsTaskSuspended>:
=======
 800abdc:	e00b      	b.n	800abf6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800abde:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <vTaskSuspend+0xd8>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <vTaskSuspend+0xe8>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d103      	bne.n	800abf2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <vTaskSuspend+0xd4>)
 800abec:	2200      	movs	r2, #0
 800abee:	601a      	str	r2, [r3, #0]
	}
 800abf0:	e001      	b.n	800abf6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800abf2:	f000 fb13 	bl	800b21c <vTaskSwitchContext>
	}
 800abf6:	bf00      	nop
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	200012f8 	.word	0x200012f8
 800ac04:	200017a0 	.word	0x200017a0
 800ac08:	200017c0 	.word	0x200017c0
 800ac0c:	200017dc 	.word	0x200017dc
 800ac10:	e000ed04 	.word	0xe000ed04
 800ac14:	200017b4 	.word	0x200017b4

0800ac18 <prvTaskIsTaskSuspended>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
<<<<<<< HEAD
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	613b      	str	r3, [r7, #16]
=======
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ac20:	2300      	movs	r3, #0
 800ac22:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	613b      	str	r3, [r7, #16]
>>>>>>> e9380fc... optimisation RAM=)

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
<<<<<<< HEAD
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	60fb      	str	r3, [r7, #12]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	4a0e      	ldr	r2, [pc, #56]	; (800a8a0 <prvTaskIsTaskSuspended+0x6c>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d101      	bne.n	800a86e <prvTaskIsTaskSuspended+0x3a>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <prvTaskIsTaskSuspended+0x3c>
 800a86e:	2300      	movs	r3, #0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00f      	beq.n	800a894 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a878:	4a0a      	ldr	r2, [pc, #40]	; (800a8a4 <prvTaskIsTaskSuspended+0x70>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00a      	beq.n	800a894 <prvTaskIsTaskSuspended+0x60>
=======
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	60fb      	str	r3, [r7, #12]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	4a0e      	ldr	r2, [pc, #56]	; (800ac84 <prvTaskIsTaskSuspended+0x6c>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d101      	bne.n	800ac52 <prvTaskIsTaskSuspended+0x3a>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e000      	b.n	800ac54 <prvTaskIsTaskSuspended+0x3c>
 800ac52:	2300      	movs	r3, #0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00f      	beq.n	800ac78 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5c:	4a0a      	ldr	r2, [pc, #40]	; (800ac88 <prvTaskIsTaskSuspended+0x70>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d00a      	beq.n	800ac78 <prvTaskIsTaskSuspended+0x60>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
<<<<<<< HEAD
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a882:	2b00      	cmp	r3, #0
 800a884:	d101      	bne.n	800a88a <prvTaskIsTaskSuspended+0x56>
 800a886:	2301      	movs	r3, #1
 800a888:	e000      	b.n	800a88c <prvTaskIsTaskSuspended+0x58>
 800a88a:	2300      	movs	r3, #0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800a890:	2301      	movs	r3, #1
 800a892:	617b      	str	r3, [r7, #20]
=======
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <prvTaskIsTaskSuspended+0x56>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e000      	b.n	800ac70 <prvTaskIsTaskSuspended+0x58>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800ac74:	2301      	movs	r3, #1
 800ac76:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 800a894:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a896:	4618      	mov	r0, r3
 800a898:	371c      	adds	r7, #28
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bc80      	pop	{r7}
 800a89e:	4770      	bx	lr
 800a8a0:	2000107c 	.word	0x2000107c
 800a8a4:	20001068 	.word	0x20001068

0800a8a8 <vTaskResume>:
=======
 800ac78:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bc80      	pop	{r7}
 800ac82:	4770      	bx	lr
 800ac84:	200017a0 	.word	0x200017a0
 800ac88:	2000178c 	.word	0x2000178c

0800ac8c <vTaskResume>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
<<<<<<< HEAD
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10a      	bne.n	800a8d0 <vTaskResume+0x28>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	60bb      	str	r3, [r7, #8]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <vTaskResume+0x26>
=======
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10a      	bne.n	800acb4 <vTaskResume+0x28>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	60bb      	str	r3, [r7, #8]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <vTaskResume+0x26>
>>>>>>> e9380fc... optimisation RAM=)

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
<<<<<<< HEAD
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d03a      	beq.n	800a94c <vTaskResume+0xa4>
 800a8d6:	4b1f      	ldr	r3, [pc, #124]	; (800a954 <vTaskResume+0xac>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d035      	beq.n	800a94c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a8e0:	f001 fa3c 	bl	800bd5c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7ff ffa5 	bl	800a834 <prvTaskIsTaskSuspended>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d02b      	beq.n	800a948 <vTaskResume+0xa0>
=======
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d03a      	beq.n	800ad30 <vTaskResume+0xa4>
 800acba:	4b1f      	ldr	r3, [pc, #124]	; (800ad38 <vTaskResume+0xac>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d035      	beq.n	800ad30 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800acc4:	f001 fcf2 	bl	800c6ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7ff ffa5 	bl	800ac18 <prvTaskIsTaskSuspended>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d02b      	beq.n	800ad2c <vTaskResume+0xa0>
>>>>>>> e9380fc... optimisation RAM=)
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fe fc57 	bl	80091a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fe:	4b16      	ldr	r3, [pc, #88]	; (800a958 <vTaskResume+0xb0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d903      	bls.n	800a90e <vTaskResume+0x66>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90a:	4a13      	ldr	r2, [pc, #76]	; (800a958 <vTaskResume+0xb0>)
 800a90c:	6013      	str	r3, [r2, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4a10      	ldr	r2, [pc, #64]	; (800a95c <vTaskResume+0xb4>)
 800a91c:	441a      	add	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3304      	adds	r3, #4
 800a922:	4619      	mov	r1, r3
 800a924:	4610      	mov	r0, r2
 800a926:	f7fe fbe4 	bl	80090f2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92e:	4b09      	ldr	r3, [pc, #36]	; (800a954 <vTaskResume+0xac>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a934:	429a      	cmp	r2, r3
 800a936:	d307      	bcc.n	800a948 <vTaskResume+0xa0>
=======
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3304      	adds	r3, #4
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fe fc05 	bl	80094e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace2:	4b16      	ldr	r3, [pc, #88]	; (800ad3c <vTaskResume+0xb0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d903      	bls.n	800acf2 <vTaskResume+0x66>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acee:	4a13      	ldr	r2, [pc, #76]	; (800ad3c <vTaskResume+0xb0>)
 800acf0:	6013      	str	r3, [r2, #0]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf6:	4613      	mov	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4a10      	ldr	r2, [pc, #64]	; (800ad40 <vTaskResume+0xb4>)
 800ad00:	441a      	add	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3304      	adds	r3, #4
 800ad06:	4619      	mov	r1, r3
 800ad08:	4610      	mov	r0, r2
 800ad0a:	f7fe fb92 	bl	8009432 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad12:	4b09      	ldr	r3, [pc, #36]	; (800ad38 <vTaskResume+0xac>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d307      	bcc.n	800ad2c <vTaskResume+0xa0>
>>>>>>> e9380fc... optimisation RAM=)
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 800a938:	4b09      	ldr	r3, [pc, #36]	; (800a960 <vTaskResume+0xb8>)
 800a93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	f3bf 8f6f 	isb	sy
=======
 800ad1c:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <vTaskResume+0xb8>)
 800ad1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	f3bf 8f6f 	isb	sy
>>>>>>> e9380fc... optimisation RAM=)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a948:	f001 fa38 	bl	800bdbc <vPortExitCritical>
=======
 800ad2c:	f001 fcee 	bl	800c70c <vPortExitCritical>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800a94c:	bf00      	nop
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20000bd4 	.word	0x20000bd4
 800a958:	20001098 	.word	0x20001098
 800a95c:	20000bd8 	.word	0x20000bd8
 800a960:	e000ed04 	.word	0xe000ed04

0800a964 <vTaskStartScheduler>:
=======
 800ad30:	bf00      	nop
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	200012f8 	.word	0x200012f8
 800ad3c:	200017bc 	.word	0x200017bc
 800ad40:	200012fc 	.word	0x200012fc
 800ad44:	e000ed04 	.word	0xe000ed04

0800ad48 <vTaskStartScheduler>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 800a964:	b580      	push	{r7, lr}
 800a966:	b08a      	sub	sp, #40	; 0x28
 800a968:	af04      	add	r7, sp, #16
=======
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08a      	sub	sp, #40	; 0x28
 800ad4c:	af04      	add	r7, sp, #16
>>>>>>> e9380fc... optimisation RAM=)
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800a96a:	2300      	movs	r3, #0
 800a96c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	607b      	str	r3, [r7, #4]
=======
 800ad4e:	2300      	movs	r3, #0
 800ad50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	607b      	str	r3, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 800a972:	463a      	mov	r2, r7
 800a974:	1d39      	adds	r1, r7, #4
 800a976:	f107 0308 	add.w	r3, r7, #8
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fe fb5c 	bl	8009038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	9202      	str	r2, [sp, #8]
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	2300      	movs	r3, #0
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	2300      	movs	r3, #0
 800a990:	460a      	mov	r2, r1
 800a992:	4924      	ldr	r1, [pc, #144]	; (800aa24 <vTaskStartScheduler+0xc0>)
 800a994:	4824      	ldr	r0, [pc, #144]	; (800aa28 <vTaskStartScheduler+0xc4>)
 800a996:	f7ff fcf3 	bl	800a380 <xTaskCreateStatic>
 800a99a:	4603      	mov	r3, r0
 800a99c:	4a23      	ldr	r2, [pc, #140]	; (800aa2c <vTaskStartScheduler+0xc8>)
 800a99e:	6013      	str	r3, [r2, #0]
=======
 800ad56:	463a      	mov	r2, r7
 800ad58:	1d39      	adds	r1, r7, #4
 800ad5a:	f107 0308 	add.w	r3, r7, #8
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe fb0a 	bl	8009378 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	9202      	str	r2, [sp, #8]
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	2300      	movs	r3, #0
 800ad74:	460a      	mov	r2, r1
 800ad76:	4925      	ldr	r1, [pc, #148]	; (800ae0c <vTaskStartScheduler+0xc4>)
 800ad78:	4825      	ldr	r0, [pc, #148]	; (800ae10 <vTaskStartScheduler+0xc8>)
 800ad7a:	f7ff fca1 	bl	800a6c0 <xTaskCreateStatic>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	4a24      	ldr	r2, [pc, #144]	; (800ae14 <vTaskStartScheduler+0xcc>)
 800ad82:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 800a9a0:	4b22      	ldr	r3, [pc, #136]	; (800aa2c <vTaskStartScheduler+0xc8>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	617b      	str	r3, [r7, #20]
 800a9ac:	e001      	b.n	800a9b2 <vTaskStartScheduler+0x4e>
=======
 800ad84:	4b23      	ldr	r3, [pc, #140]	; (800ae14 <vTaskStartScheduler+0xcc>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	e001      	b.n	800ad96 <vTaskStartScheduler+0x4e>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	617b      	str	r3, [r7, #20]
=======
 800ad92:	2300      	movs	r3, #0
 800ad94:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d102      	bne.n	800a9be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9b8:	f000 fdca 	bl	800b550 <xTimerCreateTimerTask>
 800a9bc:	6178      	str	r0, [r7, #20]
=======
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d102      	bne.n	800ada2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad9c:	f001 f880 	bl	800bea0 <xTimerCreateTimerTask>
 800ada0:	6178      	str	r0, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d11b      	bne.n	800a9fc <vTaskStartScheduler+0x98>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	613b      	str	r3, [r7, #16]
}
 800a9d6:	bf00      	nop
=======
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d11e      	bne.n	800ade6 <vTaskStartScheduler+0x9e>
	__asm volatile
 800ada8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adac:	f383 8811 	msr	BASEPRI, r3
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	613b      	str	r3, [r7, #16]
}
 800adba:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< HEAD
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <vTaskStartScheduler+0xcc>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3354      	adds	r3, #84	; 0x54
 800a9de:	4a15      	ldr	r2, [pc, #84]	; (800aa34 <vTaskStartScheduler+0xd0>)
 800a9e0:	6013      	str	r3, [r2, #0]
=======
 800adbc:	4b16      	ldr	r3, [pc, #88]	; (800ae18 <vTaskStartScheduler+0xd0>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3358      	adds	r3, #88	; 0x58
 800adc2:	4a16      	ldr	r2, [pc, #88]	; (800ae1c <vTaskStartScheduler+0xd4>)
 800adc4:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800a9e2:	4b15      	ldr	r3, [pc, #84]	; (800aa38 <vTaskStartScheduler+0xd4>)
 800a9e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9ea:	4b14      	ldr	r3, [pc, #80]	; (800aa3c <vTaskStartScheduler+0xd8>)
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a9f0:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <vTaskStartScheduler+0xdc>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
=======
 800adc6:	4b16      	ldr	r3, [pc, #88]	; (800ae20 <vTaskStartScheduler+0xd8>)
 800adc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adce:	4b15      	ldr	r3, [pc, #84]	; (800ae24 <vTaskStartScheduler+0xdc>)
 800add0:	2201      	movs	r2, #1
 800add2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800add4:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <vTaskStartScheduler+0xe0>)
 800add6:	2200      	movs	r2, #0
 800add8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800adda:	4b14      	ldr	r3, [pc, #80]	; (800ae2c <vTaskStartScheduler+0xe4>)
 800addc:	2200      	movs	r2, #0
 800adde:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 800a9f6:	f001 f93f 	bl	800bc78 <xPortStartScheduler>
=======
 800ade0:	f001 fbf2 	bl	800c5c8 <xPortStartScheduler>
>>>>>>> e9380fc... optimisation RAM=)
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 800a9fa:	e00e      	b.n	800aa1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa02:	d10a      	bne.n	800aa1a <vTaskStartScheduler+0xb6>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	60fb      	str	r3, [r7, #12]
}
 800aa16:	bf00      	nop
 800aa18:	e7fe      	b.n	800aa18 <vTaskStartScheduler+0xb4>
}
 800aa1a:	bf00      	nop
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	0800ce60 	.word	0x0800ce60
 800aa28:	0800b06d 	.word	0x0800b06d
 800aa2c:	200010b4 	.word	0x200010b4
 800aa30:	20000bd4 	.word	0x20000bd4
 800aa34:	20000020 	.word	0x20000020
 800aa38:	200010b0 	.word	0x200010b0
 800aa3c:	2000109c 	.word	0x2000109c
 800aa40:	20001094 	.word	0x20001094

0800aa44 <vTaskSuspendAll>:
=======
 800ade4:	e00e      	b.n	800ae04 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adec:	d10a      	bne.n	800ae04 <vTaskStartScheduler+0xbc>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	60fb      	str	r3, [r7, #12]
}
 800ae00:	bf00      	nop
 800ae02:	e7fe      	b.n	800ae02 <vTaskStartScheduler+0xba>
}
 800ae04:	bf00      	nop
 800ae06:	3718      	adds	r7, #24
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	0800d95c 	.word	0x0800d95c
 800ae10:	0800b591 	.word	0x0800b591
 800ae14:	200017d8 	.word	0x200017d8
 800ae18:	200012f8 	.word	0x200012f8
 800ae1c:	20000020 	.word	0x20000020
 800ae20:	200017d4 	.word	0x200017d4
 800ae24:	200017c0 	.word	0x200017c0
 800ae28:	200017b8 	.word	0x200017b8
 800ae2c:	200000a4 	.word	0x200000a4

0800ae30 <vTaskSuspendAll>:
>>>>>>> e9380fc... optimisation RAM=)
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
=======
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 800aa48:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <vTaskSuspendAll+0x18>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	4a03      	ldr	r2, [pc, #12]	; (800aa5c <vTaskSuspendAll+0x18>)
 800aa50:	6013      	str	r3, [r2, #0]
}
 800aa52:	bf00      	nop
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bc80      	pop	{r7}
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	200010b8 	.word	0x200010b8

0800aa60 <xTaskResumeAll>:
=======
 800ae34:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <vTaskSuspendAll+0x18>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	4a03      	ldr	r2, [pc, #12]	; (800ae48 <vTaskSuspendAll+0x18>)
 800ae3c:	6013      	str	r3, [r2, #0]
}
 800ae3e:	bf00      	nop
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bc80      	pop	{r7}
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	200017dc 	.word	0x200017dc

0800ae4c <xTaskResumeAll>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60bb      	str	r3, [r7, #8]
=======
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae56:	2300      	movs	r3, #0
 800ae58:	60bb      	str	r3, [r7, #8]
>>>>>>> e9380fc... optimisation RAM=)

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 800aa6e:	4b42      	ldr	r3, [pc, #264]	; (800ab78 <xTaskResumeAll+0x118>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10a      	bne.n	800aa8c <xTaskResumeAll+0x2c>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	603b      	str	r3, [r7, #0]
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <xTaskResumeAll+0x2a>
=======
 800ae5a:	4b42      	ldr	r3, [pc, #264]	; (800af64 <xTaskResumeAll+0x118>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10a      	bne.n	800ae78 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	603b      	str	r3, [r7, #0]
}
 800ae74:	bf00      	nop
 800ae76:	e7fe      	b.n	800ae76 <xTaskResumeAll+0x2a>
>>>>>>> e9380fc... optimisation RAM=)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800aa8c:	f001 f966 	bl	800bd5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa90:	4b39      	ldr	r3, [pc, #228]	; (800ab78 <xTaskResumeAll+0x118>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3b01      	subs	r3, #1
 800aa96:	4a38      	ldr	r2, [pc, #224]	; (800ab78 <xTaskResumeAll+0x118>)
 800aa98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa9a:	4b37      	ldr	r3, [pc, #220]	; (800ab78 <xTaskResumeAll+0x118>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d162      	bne.n	800ab68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aaa2:	4b36      	ldr	r3, [pc, #216]	; (800ab7c <xTaskResumeAll+0x11c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d05e      	beq.n	800ab68 <xTaskResumeAll+0x108>
=======
 800ae78:	f001 fc18 	bl	800c6ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae7c:	4b39      	ldr	r3, [pc, #228]	; (800af64 <xTaskResumeAll+0x118>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3b01      	subs	r3, #1
 800ae82:	4a38      	ldr	r2, [pc, #224]	; (800af64 <xTaskResumeAll+0x118>)
 800ae84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae86:	4b37      	ldr	r3, [pc, #220]	; (800af64 <xTaskResumeAll+0x118>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d162      	bne.n	800af54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae8e:	4b36      	ldr	r3, [pc, #216]	; (800af68 <xTaskResumeAll+0x11c>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d05e      	beq.n	800af54 <xTaskResumeAll+0x108>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 800aaaa:	e02f      	b.n	800ab0c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aaac:	4b34      	ldr	r3, [pc, #208]	; (800ab80 <xTaskResumeAll+0x120>)
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3318      	adds	r3, #24
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe fb75 	bl	80091a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3304      	adds	r3, #4
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fb70 	bl	80091a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aacc:	4b2d      	ldr	r3, [pc, #180]	; (800ab84 <xTaskResumeAll+0x124>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d903      	bls.n	800aadc <xTaskResumeAll+0x7c>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	4a2a      	ldr	r2, [pc, #168]	; (800ab84 <xTaskResumeAll+0x124>)
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4a27      	ldr	r2, [pc, #156]	; (800ab88 <xTaskResumeAll+0x128>)
 800aaea:	441a      	add	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f7fe fafd 	bl	80090f2 <vListInsertEnd>
=======
 800ae96:	e02f      	b.n	800aef8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ae98:	4b34      	ldr	r3, [pc, #208]	; (800af6c <xTaskResumeAll+0x120>)
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	3318      	adds	r3, #24
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fe fb1f 	bl	80094e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3304      	adds	r3, #4
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fe fb1a 	bl	80094e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb8:	4b2d      	ldr	r3, [pc, #180]	; (800af70 <xTaskResumeAll+0x124>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d903      	bls.n	800aec8 <xTaskResumeAll+0x7c>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec4:	4a2a      	ldr	r2, [pc, #168]	; (800af70 <xTaskResumeAll+0x124>)
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4a27      	ldr	r2, [pc, #156]	; (800af74 <xTaskResumeAll+0x128>)
 800aed6:	441a      	add	r2, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	3304      	adds	r3, #4
 800aedc:	4619      	mov	r1, r3
 800aede:	4610      	mov	r0, r2
 800aee0:	f7fe faa7 	bl	8009432 <vListInsertEnd>
>>>>>>> e9380fc... optimisation RAM=)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafc:	4b23      	ldr	r3, [pc, #140]	; (800ab8c <xTaskResumeAll+0x12c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d302      	bcc.n	800ab0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab06:	4b22      	ldr	r3, [pc, #136]	; (800ab90 <xTaskResumeAll+0x130>)
 800ab08:	2201      	movs	r2, #1
 800ab0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab0c:	4b1c      	ldr	r3, [pc, #112]	; (800ab80 <xTaskResumeAll+0x120>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1cb      	bne.n	800aaac <xTaskResumeAll+0x4c>
=======
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	4b23      	ldr	r3, [pc, #140]	; (800af78 <xTaskResumeAll+0x12c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d302      	bcc.n	800aef8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aef2:	4b22      	ldr	r3, [pc, #136]	; (800af7c <xTaskResumeAll+0x130>)
 800aef4:	2201      	movs	r2, #1
 800aef6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aef8:	4b1c      	ldr	r3, [pc, #112]	; (800af6c <xTaskResumeAll+0x120>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1cb      	bne.n	800ae98 <xTaskResumeAll+0x4c>
>>>>>>> e9380fc... optimisation RAM=)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <xTaskResumeAll+0xbe>
=======
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <xTaskResumeAll+0xbe>
>>>>>>> e9380fc... optimisation RAM=)
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 800ab1a:	f000 faff 	bl	800b11c <prvResetNextTaskUnblockTime>
=======
 800af06:	f000 fc6f 	bl	800b7e8 <prvResetNextTaskUnblockTime>
>>>>>>> e9380fc... optimisation RAM=)
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 800ab1e:	4b1d      	ldr	r3, [pc, #116]	; (800ab94 <xTaskResumeAll+0x134>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d010      	beq.n	800ab4c <xTaskResumeAll+0xec>
=======
 800af0a:	4b1d      	ldr	r3, [pc, #116]	; (800af80 <xTaskResumeAll+0x134>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d010      	beq.n	800af38 <xTaskResumeAll+0xec>
>>>>>>> e9380fc... optimisation RAM=)
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800ab2a:	f000 f845 	bl	800abb8 <xTaskIncrementTick>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ab34:	4b16      	ldr	r3, [pc, #88]	; (800ab90 <xTaskResumeAll+0x130>)
 800ab36:	2201      	movs	r2, #1
 800ab38:	601a      	str	r2, [r3, #0]
=======
 800af16:	f000 f8c3 	bl	800b0a0 <xTaskIncrementTick>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af20:	4b16      	ldr	r3, [pc, #88]	; (800af7c <xTaskResumeAll+0x130>)
 800af22:	2201      	movs	r2, #1
 800af24:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
<<<<<<< HEAD
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f1      	bne.n	800ab2a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ab46:	4b13      	ldr	r3, [pc, #76]	; (800ab94 <xTaskResumeAll+0x134>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
=======
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3b01      	subs	r3, #1
 800af2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1f1      	bne.n	800af16 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800af32:	4b13      	ldr	r3, [pc, #76]	; (800af80 <xTaskResumeAll+0x134>)
 800af34:	2200      	movs	r2, #0
 800af36:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800ab4c:	4b10      	ldr	r3, [pc, #64]	; (800ab90 <xTaskResumeAll+0x130>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d009      	beq.n	800ab68 <xTaskResumeAll+0x108>
=======
 800af38:	4b10      	ldr	r3, [pc, #64]	; (800af7c <xTaskResumeAll+0x130>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d009      	beq.n	800af54 <xTaskResumeAll+0x108>
>>>>>>> e9380fc... optimisation RAM=)
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800ab54:	2301      	movs	r3, #1
 800ab56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab58:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <xTaskResumeAll+0x138>)
 800ab5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	f3bf 8f6f 	isb	sy
=======
 800af40:	2301      	movs	r3, #1
 800af42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af44:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <xTaskResumeAll+0x138>)
 800af46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	f3bf 8f6f 	isb	sy
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800ab68:	f001 f928 	bl	800bdbc <vPortExitCritical>

	return xAlreadyYielded;
 800ab6c:	68bb      	ldr	r3, [r7, #8]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	200010b8 	.word	0x200010b8
 800ab7c:	20001090 	.word	0x20001090
 800ab80:	20001068 	.word	0x20001068
 800ab84:	20001098 	.word	0x20001098
 800ab88:	20000bd8 	.word	0x20000bd8
 800ab8c:	20000bd4 	.word	0x20000bd4
 800ab90:	200010a4 	.word	0x200010a4
 800ab94:	200010a0 	.word	0x200010a0
 800ab98:	e000ed04 	.word	0xe000ed04

0800ab9c <xTaskGetTickCount>:
=======
 800af54:	f001 fbda 	bl	800c70c <vPortExitCritical>

	return xAlreadyYielded;
 800af58:	68bb      	ldr	r3, [r7, #8]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	200017dc 	.word	0x200017dc
 800af68:	200017b4 	.word	0x200017b4
 800af6c:	2000178c 	.word	0x2000178c
 800af70:	200017bc 	.word	0x200017bc
 800af74:	200012fc 	.word	0x200012fc
 800af78:	200012f8 	.word	0x200012f8
 800af7c:	200017c8 	.word	0x200017c8
 800af80:	200017c4 	.word	0x200017c4
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <xTaskGetTickCount>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
=======
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 800aba2:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <xTaskGetTickCount+0x18>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	607b      	str	r3, [r7, #4]
=======
 800af8e:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <xTaskGetTickCount+0x18>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	607b      	str	r3, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 800aba8:	687b      	ldr	r3, [r7, #4]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	bc80      	pop	{r7}
 800abb2:	4770      	bx	lr
 800abb4:	20001094 	.word	0x20001094

0800abb8 <xTaskIncrementTick>:
=======
 800af94:	687b      	ldr	r3, [r7, #4]
}
 800af96:	4618      	mov	r0, r3
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bc80      	pop	{r7}
 800af9e:	4770      	bx	lr
 800afa0:	200017b8 	.word	0x200017b8

0800afa4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800afb0:	2300      	movs	r3, #0
 800afb2:	617b      	str	r3, [r7, #20]
 800afb4:	2338      	movs	r3, #56	; 0x38
 800afb6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800afb8:	f7ff ff3a 	bl	800ae30 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800afbc:	4b32      	ldr	r3, [pc, #200]	; (800b088 <uxTaskGetSystemState+0xe4>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d358      	bcc.n	800b078 <uxTaskGetSystemState+0xd4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	3b01      	subs	r3, #1
 800afca:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	4613      	mov	r3, r2
 800afd0:	00db      	lsls	r3, r3, #3
 800afd2:	4413      	add	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	461a      	mov	r2, r3
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	1898      	adds	r0, r3, r2
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	4613      	mov	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4a29      	ldr	r2, [pc, #164]	; (800b08c <uxTaskGetSystemState+0xe8>)
 800afe8:	4413      	add	r3, r2
 800afea:	2201      	movs	r2, #1
 800afec:	4619      	mov	r1, r3
 800afee:	f000 fb8d 	bl	800b70c <prvListTasksWithinSingleList>
 800aff2:	4602      	mov	r2, r0
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	4413      	add	r3, r2
 800aff8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e2      	bne.n	800afc6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	4613      	mov	r3, r2
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	4413      	add	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	461a      	mov	r2, r3
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4413      	add	r3, r2
 800b010:	4a1f      	ldr	r2, [pc, #124]	; (800b090 <uxTaskGetSystemState+0xec>)
 800b012:	6811      	ldr	r1, [r2, #0]
 800b014:	2202      	movs	r2, #2
 800b016:	4618      	mov	r0, r3
 800b018:	f000 fb78 	bl	800b70c <prvListTasksWithinSingleList>
 800b01c:	4602      	mov	r2, r0
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	4413      	add	r3, r2
 800b022:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	4613      	mov	r3, r2
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	461a      	mov	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	4413      	add	r3, r2
 800b034:	4a17      	ldr	r2, [pc, #92]	; (800b094 <uxTaskGetSystemState+0xf0>)
 800b036:	6811      	ldr	r1, [r2, #0]
 800b038:	2202      	movs	r2, #2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fb66 	bl	800b70c <prvListTasksWithinSingleList>
 800b040:	4602      	mov	r2, r0
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	4413      	add	r3, r2
 800b046:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	4613      	mov	r3, r2
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	4413      	add	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	461a      	mov	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4413      	add	r3, r2
 800b058:	2203      	movs	r2, #3
 800b05a:	490f      	ldr	r1, [pc, #60]	; (800b098 <uxTaskGetSystemState+0xf4>)
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fb55 	bl	800b70c <prvListTasksWithinSingleList>
 800b062:	4602      	mov	r2, r0
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	4413      	add	r3, r2
 800b068:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <uxTaskGetSystemState+0xd4>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b070:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <uxTaskGetSystemState+0xf8>)
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800b078:	f7ff fee8 	bl	800ae4c <xTaskResumeAll>

		return uxTask;
 800b07c:	697b      	ldr	r3, [r7, #20]
	}
 800b07e:	4618      	mov	r0, r3
 800b080:	3718      	adds	r7, #24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200017b4 	.word	0x200017b4
 800b08c:	200012fc 	.word	0x200012fc
 800b090:	20001784 	.word	0x20001784
 800b094:	20001788 	.word	0x20001788
 800b098:	200017a0 	.word	0x200017a0
 800b09c:	200000a4 	.word	0x200000a4

0800b0a0 <xTaskIncrementTick>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]
=======
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800abc2:	4b51      	ldr	r3, [pc, #324]	; (800ad08 <xTaskIncrementTick+0x150>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f040 808e 	bne.w	800ace8 <xTaskIncrementTick+0x130>
=======
 800b0aa:	4b51      	ldr	r3, [pc, #324]	; (800b1f0 <xTaskIncrementTick+0x150>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f040 808e 	bne.w	800b1d0 <xTaskIncrementTick+0x130>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 800abcc:	4b4f      	ldr	r3, [pc, #316]	; (800ad0c <xTaskIncrementTick+0x154>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3301      	adds	r3, #1
 800abd2:	613b      	str	r3, [r7, #16]
=======
 800b0b4:	4b4f      	ldr	r3, [pc, #316]	; (800b1f4 <xTaskIncrementTick+0x154>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	613b      	str	r3, [r7, #16]
>>>>>>> e9380fc... optimisation RAM=)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 800abd4:	4a4d      	ldr	r2, [pc, #308]	; (800ad0c <xTaskIncrementTick+0x154>)
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d120      	bne.n	800ac22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800abe0:	4b4b      	ldr	r3, [pc, #300]	; (800ad10 <xTaskIncrementTick+0x158>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <xTaskIncrementTick+0x48>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	603b      	str	r3, [r7, #0]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <xTaskIncrementTick+0x46>
 800ac00:	4b43      	ldr	r3, [pc, #268]	; (800ad10 <xTaskIncrementTick+0x158>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	4b43      	ldr	r3, [pc, #268]	; (800ad14 <xTaskIncrementTick+0x15c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a41      	ldr	r2, [pc, #260]	; (800ad10 <xTaskIncrementTick+0x158>)
 800ac0c:	6013      	str	r3, [r2, #0]
 800ac0e:	4a41      	ldr	r2, [pc, #260]	; (800ad14 <xTaskIncrementTick+0x15c>)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6013      	str	r3, [r2, #0]
 800ac14:	4b40      	ldr	r3, [pc, #256]	; (800ad18 <xTaskIncrementTick+0x160>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	4a3f      	ldr	r2, [pc, #252]	; (800ad18 <xTaskIncrementTick+0x160>)
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	f000 fa7d 	bl	800b11c <prvResetNextTaskUnblockTime>
=======
 800b0bc:	4a4d      	ldr	r2, [pc, #308]	; (800b1f4 <xTaskIncrementTick+0x154>)
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d120      	bne.n	800b10a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0c8:	4b4b      	ldr	r3, [pc, #300]	; (800b1f8 <xTaskIncrementTick+0x158>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00a      	beq.n	800b0e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	603b      	str	r3, [r7, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	e7fe      	b.n	800b0e6 <xTaskIncrementTick+0x46>
 800b0e8:	4b43      	ldr	r3, [pc, #268]	; (800b1f8 <xTaskIncrementTick+0x158>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	4b43      	ldr	r3, [pc, #268]	; (800b1fc <xTaskIncrementTick+0x15c>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a41      	ldr	r2, [pc, #260]	; (800b1f8 <xTaskIncrementTick+0x158>)
 800b0f4:	6013      	str	r3, [r2, #0]
 800b0f6:	4a41      	ldr	r2, [pc, #260]	; (800b1fc <xTaskIncrementTick+0x15c>)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	4b40      	ldr	r3, [pc, #256]	; (800b200 <xTaskIncrementTick+0x160>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3301      	adds	r3, #1
 800b102:	4a3f      	ldr	r2, [pc, #252]	; (800b200 <xTaskIncrementTick+0x160>)
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	f000 fb6f 	bl	800b7e8 <prvResetNextTaskUnblockTime>
>>>>>>> e9380fc... optimisation RAM=)

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 800ac22:	4b3e      	ldr	r3, [pc, #248]	; (800ad1c <xTaskIncrementTick+0x164>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d34e      	bcc.n	800acca <xTaskIncrementTick+0x112>
=======
 800b10a:	4b3e      	ldr	r3, [pc, #248]	; (800b204 <xTaskIncrementTick+0x164>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	429a      	cmp	r2, r3
 800b112:	d34e      	bcc.n	800b1b2 <xTaskIncrementTick+0x112>
>>>>>>> e9380fc... optimisation RAM=)
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 800ac2c:	4b38      	ldr	r3, [pc, #224]	; (800ad10 <xTaskIncrementTick+0x158>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <xTaskIncrementTick+0x82>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <xTaskIncrementTick+0x84>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d004      	beq.n	800ac4a <xTaskIncrementTick+0x92>
=======
 800b114:	4b38      	ldr	r3, [pc, #224]	; (800b1f8 <xTaskIncrementTick+0x158>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <xTaskIncrementTick+0x82>
 800b11e:	2301      	movs	r3, #1
 800b120:	e000      	b.n	800b124 <xTaskIncrementTick+0x84>
 800b122:	2300      	movs	r3, #0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d004      	beq.n	800b132 <xTaskIncrementTick+0x92>
>>>>>>> e9380fc... optimisation RAM=)
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800ac40:	4b36      	ldr	r3, [pc, #216]	; (800ad1c <xTaskIncrementTick+0x164>)
 800ac42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac46:	601a      	str	r2, [r3, #0]
					break;
 800ac48:	e03f      	b.n	800acca <xTaskIncrementTick+0x112>
=======
 800b128:	4b36      	ldr	r3, [pc, #216]	; (800b204 <xTaskIncrementTick+0x164>)
 800b12a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b12e:	601a      	str	r2, [r3, #0]
					break;
 800b130:	e03f      	b.n	800b1b2 <xTaskIncrementTick+0x112>
>>>>>>> e9380fc... optimisation RAM=)
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
<<<<<<< HEAD
 800ac4a:	4b31      	ldr	r3, [pc, #196]	; (800ad10 <xTaskIncrementTick+0x158>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d203      	bcs.n	800ac6a <xTaskIncrementTick+0xb2>
=======
 800b132:	4b31      	ldr	r3, [pc, #196]	; (800b1f8 <xTaskIncrementTick+0x158>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	429a      	cmp	r2, r3
 800b148:	d203      	bcs.n	800b152 <xTaskIncrementTick+0xb2>
>>>>>>> e9380fc... optimisation RAM=)
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 800ac62:	4a2e      	ldr	r2, [pc, #184]	; (800ad1c <xTaskIncrementTick+0x164>)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6013      	str	r3, [r2, #0]
						break;
 800ac68:	e02f      	b.n	800acca <xTaskIncrementTick+0x112>
=======
 800b14a:	4a2e      	ldr	r2, [pc, #184]	; (800b204 <xTaskIncrementTick+0x164>)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6013      	str	r3, [r2, #0]
						break;
 800b150:	e02f      	b.n	800b1b2 <xTaskIncrementTick+0x112>
>>>>>>> e9380fc... optimisation RAM=)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe fa9a 	bl	80091a8 <uxListRemove>
=======
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	3304      	adds	r3, #4
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe f9c6 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	3318      	adds	r3, #24
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fe fa91 	bl	80091a8 <uxListRemove>
=======
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b160:	2b00      	cmp	r3, #0
 800b162:	d004      	beq.n	800b16e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	3318      	adds	r3, #24
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe f9bd 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac8a:	4b25      	ldr	r3, [pc, #148]	; (800ad20 <xTaskIncrementTick+0x168>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d903      	bls.n	800ac9a <xTaskIncrementTick+0xe2>
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac96:	4a22      	ldr	r2, [pc, #136]	; (800ad20 <xTaskIncrementTick+0x168>)
 800ac98:	6013      	str	r3, [r2, #0]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac9e:	4613      	mov	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4a1f      	ldr	r2, [pc, #124]	; (800ad24 <xTaskIncrementTick+0x16c>)
 800aca8:	441a      	add	r2, r3
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	3304      	adds	r3, #4
 800acae:	4619      	mov	r1, r3
 800acb0:	4610      	mov	r0, r2
 800acb2:	f7fe fa1e 	bl	80090f2 <vListInsertEnd>
=======
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b172:	4b25      	ldr	r3, [pc, #148]	; (800b208 <xTaskIncrementTick+0x168>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	429a      	cmp	r2, r3
 800b178:	d903      	bls.n	800b182 <xTaskIncrementTick+0xe2>
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17e:	4a22      	ldr	r2, [pc, #136]	; (800b208 <xTaskIncrementTick+0x168>)
 800b180:	6013      	str	r3, [r2, #0]
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b186:	4613      	mov	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4a1f      	ldr	r2, [pc, #124]	; (800b20c <xTaskIncrementTick+0x16c>)
 800b190:	441a      	add	r2, r3
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	3304      	adds	r3, #4
 800b196:	4619      	mov	r1, r3
 800b198:	4610      	mov	r0, r2
 800b19a:	f7fe f94a 	bl	8009432 <vListInsertEnd>
>>>>>>> e9380fc... optimisation RAM=)
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acba:	4b1b      	ldr	r3, [pc, #108]	; (800ad28 <xTaskIncrementTick+0x170>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d3b3      	bcc.n	800ac2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800acc4:	2301      	movs	r3, #1
 800acc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acc8:	e7b0      	b.n	800ac2c <xTaskIncrementTick+0x74>
=======
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a2:	4b1b      	ldr	r3, [pc, #108]	; (800b210 <xTaskIncrementTick+0x170>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d3b3      	bcc.n	800b114 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b0:	e7b0      	b.n	800b114 <xTaskIncrementTick+0x74>
>>>>>>> e9380fc... optimisation RAM=)
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800acca:	4b17      	ldr	r3, [pc, #92]	; (800ad28 <xTaskIncrementTick+0x170>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd0:	4914      	ldr	r1, [pc, #80]	; (800ad24 <xTaskIncrementTick+0x16c>)
 800acd2:	4613      	mov	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d907      	bls.n	800acf2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ace2:	2301      	movs	r3, #1
 800ace4:	617b      	str	r3, [r7, #20]
 800ace6:	e004      	b.n	800acf2 <xTaskIncrementTick+0x13a>
=======
 800b1b2:	4b17      	ldr	r3, [pc, #92]	; (800b210 <xTaskIncrementTick+0x170>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b8:	4914      	ldr	r1, [pc, #80]	; (800b20c <xTaskIncrementTick+0x16c>)
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d907      	bls.n	800b1da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	617b      	str	r3, [r7, #20]
 800b1ce:	e004      	b.n	800b1da <xTaskIncrementTick+0x13a>
>>>>>>> e9380fc... optimisation RAM=)
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
<<<<<<< HEAD
 800ace8:	4b10      	ldr	r3, [pc, #64]	; (800ad2c <xTaskIncrementTick+0x174>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3301      	adds	r3, #1
 800acee:	4a0f      	ldr	r2, [pc, #60]	; (800ad2c <xTaskIncrementTick+0x174>)
 800acf0:	6013      	str	r3, [r2, #0]
=======
 800b1d0:	4b10      	ldr	r3, [pc, #64]	; (800b214 <xTaskIncrementTick+0x174>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	4a0f      	ldr	r2, [pc, #60]	; (800b214 <xTaskIncrementTick+0x174>)
 800b1d8:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800acf2:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <xTaskIncrementTick+0x178>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800acfa:	2301      	movs	r3, #1
 800acfc:	617b      	str	r3, [r7, #20]
=======
 800b1da:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <xTaskIncrementTick+0x178>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
<<<<<<< HEAD
 800acfe:	697b      	ldr	r3, [r7, #20]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	200010b8 	.word	0x200010b8
 800ad0c:	20001094 	.word	0x20001094
 800ad10:	20001060 	.word	0x20001060
 800ad14:	20001064 	.word	0x20001064
 800ad18:	200010a8 	.word	0x200010a8
 800ad1c:	200010b0 	.word	0x200010b0
 800ad20:	20001098 	.word	0x20001098
 800ad24:	20000bd8 	.word	0x20000bd8
 800ad28:	20000bd4 	.word	0x20000bd4
 800ad2c:	200010a0 	.word	0x200010a0
 800ad30:	200010a4 	.word	0x200010a4

0800ad34 <vTaskSwitchContext>:
=======
 800b1e6:	697b      	ldr	r3, [r7, #20]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	200017dc 	.word	0x200017dc
 800b1f4:	200017b8 	.word	0x200017b8
 800b1f8:	20001784 	.word	0x20001784
 800b1fc:	20001788 	.word	0x20001788
 800b200:	200017cc 	.word	0x200017cc
 800b204:	200017d4 	.word	0x200017d4
 800b208:	200017bc 	.word	0x200017bc
 800b20c:	200012fc 	.word	0x200012fc
 800b210:	200012f8 	.word	0x200012f8
 800b214:	200017c4 	.word	0x200017c4
 800b218:	200017c8 	.word	0x200017c8

0800b21c <vTaskSwitchContext>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad3a:	4b2a      	ldr	r3, [pc, #168]	; (800ade4 <vTaskSwitchContext+0xb0>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <vTaskSwitchContext+0x16>
=======
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b222:	4b36      	ldr	r3, [pc, #216]	; (800b2fc <vTaskSwitchContext+0xe0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <vTaskSwitchContext+0x16>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800ad42:	4b29      	ldr	r3, [pc, #164]	; (800ade8 <vTaskSwitchContext+0xb4>)
 800ad44:	2201      	movs	r2, #1
 800ad46:	601a      	str	r2, [r3, #0]
=======
 800b22a:	4b35      	ldr	r3, [pc, #212]	; (800b300 <vTaskSwitchContext+0xe4>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 800ad48:	e046      	b.n	800add8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ad4a:	4b27      	ldr	r3, [pc, #156]	; (800ade8 <vTaskSwitchContext+0xb4>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ad50:	4b26      	ldr	r3, [pc, #152]	; (800adec <vTaskSwitchContext+0xb8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	60fb      	str	r3, [r7, #12]
 800ad56:	e010      	b.n	800ad7a <vTaskSwitchContext+0x46>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <vTaskSwitchContext+0x40>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	607b      	str	r3, [r7, #4]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <vTaskSwitchContext+0x3e>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3b01      	subs	r3, #1
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	491d      	ldr	r1, [pc, #116]	; (800adf0 <vTaskSwitchContext+0xbc>)
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	440b      	add	r3, r1
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0e4      	beq.n	800ad58 <vTaskSwitchContext+0x24>
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4a15      	ldr	r2, [pc, #84]	; (800adf0 <vTaskSwitchContext+0xbc>)
 800ad9a:	4413      	add	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	605a      	str	r2, [r3, #4]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	3308      	adds	r3, #8
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d104      	bne.n	800adbe <vTaskSwitchContext+0x8a>
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	605a      	str	r2, [r3, #4]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	4a0b      	ldr	r2, [pc, #44]	; (800adf4 <vTaskSwitchContext+0xc0>)
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	4a08      	ldr	r2, [pc, #32]	; (800adec <vTaskSwitchContext+0xb8>)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800adce:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <vTaskSwitchContext+0xc0>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3354      	adds	r3, #84	; 0x54
 800add4:	4a08      	ldr	r2, [pc, #32]	; (800adf8 <vTaskSwitchContext+0xc4>)
 800add6:	6013      	str	r3, [r2, #0]
}
 800add8:	bf00      	nop
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	bc80      	pop	{r7}
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	200010b8 	.word	0x200010b8
 800ade8:	200010a4 	.word	0x200010a4
 800adec:	20001098 	.word	0x20001098
 800adf0:	20000bd8 	.word	0x20000bd8
 800adf4:	20000bd4 	.word	0x20000bd4
 800adf8:	20000020 	.word	0x20000020

0800adfc <vTaskPlaceOnEventList>:
=======
 800b230:	e05e      	b.n	800b2f0 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800b232:	4b33      	ldr	r3, [pc, #204]	; (800b300 <vTaskSwitchContext+0xe4>)
 800b234:	2200      	movs	r2, #0
 800b236:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b238:	4b32      	ldr	r3, [pc, #200]	; (800b304 <vTaskSwitchContext+0xe8>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a32      	ldr	r2, [pc, #200]	; (800b308 <vTaskSwitchContext+0xec>)
 800b23e:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b240:	4b31      	ldr	r3, [pc, #196]	; (800b308 <vTaskSwitchContext+0xec>)
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	4b31      	ldr	r3, [pc, #196]	; (800b30c <vTaskSwitchContext+0xf0>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d909      	bls.n	800b260 <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b24c:	4b30      	ldr	r3, [pc, #192]	; (800b310 <vTaskSwitchContext+0xf4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b252:	4a2d      	ldr	r2, [pc, #180]	; (800b308 <vTaskSwitchContext+0xec>)
 800b254:	6810      	ldr	r0, [r2, #0]
 800b256:	4a2d      	ldr	r2, [pc, #180]	; (800b30c <vTaskSwitchContext+0xf0>)
 800b258:	6812      	ldr	r2, [r2, #0]
 800b25a:	1a82      	subs	r2, r0, r2
 800b25c:	440a      	add	r2, r1
 800b25e:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800b260:	4b29      	ldr	r3, [pc, #164]	; (800b308 <vTaskSwitchContext+0xec>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a29      	ldr	r2, [pc, #164]	; (800b30c <vTaskSwitchContext+0xf0>)
 800b266:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b268:	4b2a      	ldr	r3, [pc, #168]	; (800b314 <vTaskSwitchContext+0xf8>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	60fb      	str	r3, [r7, #12]
 800b26e:	e010      	b.n	800b292 <vTaskSwitchContext+0x76>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10a      	bne.n	800b28c <vTaskSwitchContext+0x70>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	607b      	str	r3, [r7, #4]
}
 800b288:	bf00      	nop
 800b28a:	e7fe      	b.n	800b28a <vTaskSwitchContext+0x6e>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3b01      	subs	r3, #1
 800b290:	60fb      	str	r3, [r7, #12]
 800b292:	4921      	ldr	r1, [pc, #132]	; (800b318 <vTaskSwitchContext+0xfc>)
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	4613      	mov	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	440b      	add	r3, r1
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d0e4      	beq.n	800b270 <vTaskSwitchContext+0x54>
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4a19      	ldr	r2, [pc, #100]	; (800b318 <vTaskSwitchContext+0xfc>)
 800b2b2:	4413      	add	r3, r2
 800b2b4:	60bb      	str	r3, [r7, #8]
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	605a      	str	r2, [r3, #4]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d104      	bne.n	800b2d6 <vTaskSwitchContext+0xba>
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	605a      	str	r2, [r3, #4]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	4a0c      	ldr	r2, [pc, #48]	; (800b310 <vTaskSwitchContext+0xf4>)
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	4a0c      	ldr	r2, [pc, #48]	; (800b314 <vTaskSwitchContext+0xf8>)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2e6:	4b0a      	ldr	r3, [pc, #40]	; (800b310 <vTaskSwitchContext+0xf4>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3358      	adds	r3, #88	; 0x58
 800b2ec:	4a0b      	ldr	r2, [pc, #44]	; (800b31c <vTaskSwitchContext+0x100>)
 800b2ee:	6013      	str	r3, [r2, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bc80      	pop	{r7}
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	200017dc 	.word	0x200017dc
 800b300:	200017c8 	.word	0x200017c8
 800b304:	200000a4 	.word	0x200000a4
 800b308:	200017e4 	.word	0x200017e4
 800b30c:	200017e0 	.word	0x200017e0
 800b310:	200012f8 	.word	0x200012f8
 800b314:	200017bc 	.word	0x200017bc
 800b318:	200012fc 	.word	0x200012fc
 800b31c:	20000020 	.word	0x20000020

0800b320 <vTaskPlaceOnEventList>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	60fb      	str	r3, [r7, #12]
}
 800ae1e:	bf00      	nop
 800ae20:	e7fe      	b.n	800ae20 <vTaskPlaceOnEventList+0x24>
=======
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10a      	bne.n	800b346 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	60fb      	str	r3, [r7, #12]
}
 800b342:	bf00      	nop
 800b344:	e7fe      	b.n	800b344 <vTaskPlaceOnEventList+0x24>
>>>>>>> e9380fc... optimisation RAM=)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800ae22:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <vTaskPlaceOnEventList+0x44>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3318      	adds	r3, #24
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7fe f984 	bl	8009138 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae30:	2101      	movs	r1, #1
 800ae32:	6838      	ldr	r0, [r7, #0]
 800ae34:	f000 fb38 	bl	800b4a8 <prvAddCurrentTaskToDelayedList>
}
 800ae38:	bf00      	nop
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	20000bd4 	.word	0x20000bd4

0800ae44 <vTaskPlaceOnEventListRestricted>:
=======
 800b346:	4b07      	ldr	r3, [pc, #28]	; (800b364 <vTaskPlaceOnEventList+0x44>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3318      	adds	r3, #24
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7fe f892 	bl	8009478 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b354:	2101      	movs	r1, #1
 800b356:	6838      	ldr	r0, [r7, #0]
 800b358:	f000 fd4e 	bl	800bdf8 <prvAddCurrentTaskToDelayedList>
}
 800b35c:	bf00      	nop
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	200012f8 	.word	0x200012f8

0800b368 <vTaskPlaceOnEventListRestricted>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	617b      	str	r3, [r7, #20]
}
 800ae68:	bf00      	nop
 800ae6a:	e7fe      	b.n	800ae6a <vTaskPlaceOnEventListRestricted+0x26>
=======
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10a      	bne.n	800b390 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	617b      	str	r3, [r7, #20]
}
 800b38c:	bf00      	nop
 800b38e:	e7fe      	b.n	800b38e <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> e9380fc... optimisation RAM=)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3318      	adds	r3, #24
 800ae72:	4619      	mov	r1, r3
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f7fe f93c 	bl	80090f2 <vListInsertEnd>
=======
 800b390:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <vTaskPlaceOnEventListRestricted+0x54>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3318      	adds	r3, #24
 800b396:	4619      	mov	r1, r3
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f7fe f84a 	bl	8009432 <vListInsertEnd>
>>>>>>> e9380fc... optimisation RAM=)

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ae80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae84:	60bb      	str	r3, [r7, #8]
=======
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b3a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3a8:	60bb      	str	r3, [r7, #8]
>>>>>>> e9380fc... optimisation RAM=)
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	68b8      	ldr	r0, [r7, #8]
 800ae8a:	f000 fb0d 	bl	800b4a8 <prvAddCurrentTaskToDelayedList>
	}
 800ae8e:	bf00      	nop
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20000bd4 	.word	0x20000bd4

0800ae9c <xTaskRemoveFromEventList>:
=======
 800b3aa:	6879      	ldr	r1, [r7, #4]
 800b3ac:	68b8      	ldr	r0, [r7, #8]
 800b3ae:	f000 fd23 	bl	800bdf8 <prvAddCurrentTaskToDelayedList>
	}
 800b3b2:	bf00      	nop
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	200012f8 	.word	0x200012f8

0800b3c0 <xTaskRemoveFromEventList>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
=======
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
<<<<<<< HEAD
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	60fb      	str	r3, [r7, #12]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	3318      	adds	r3, #24
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe f96b 	bl	80091a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aed2:	4b1e      	ldr	r3, [pc, #120]	; (800af4c <xTaskRemoveFromEventList+0xb0>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d11d      	bne.n	800af16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	3304      	adds	r3, #4
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fe f962 	bl	80091a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	4b19      	ldr	r3, [pc, #100]	; (800af50 <xTaskRemoveFromEventList+0xb4>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d903      	bls.n	800aef8 <xTaskRemoveFromEventList+0x5c>
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef4:	4a16      	ldr	r2, [pc, #88]	; (800af50 <xTaskRemoveFromEventList+0xb4>)
 800aef6:	6013      	str	r3, [r2, #0]
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4a13      	ldr	r2, [pc, #76]	; (800af54 <xTaskRemoveFromEventList+0xb8>)
 800af06:	441a      	add	r2, r3
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4619      	mov	r1, r3
 800af0e:	4610      	mov	r0, r2
 800af10:	f7fe f8ef 	bl	80090f2 <vListInsertEnd>
 800af14:	e005      	b.n	800af22 <xTaskRemoveFromEventList+0x86>
=======
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10a      	bne.n	800b3ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	60fb      	str	r3, [r7, #12]
}
 800b3e8:	bf00      	nop
 800b3ea:	e7fe      	b.n	800b3ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	3318      	adds	r3, #24
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fe f879 	bl	80094e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3f6:	4b1e      	ldr	r3, [pc, #120]	; (800b470 <xTaskRemoveFromEventList+0xb0>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d11d      	bne.n	800b43a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	3304      	adds	r3, #4
 800b402:	4618      	mov	r0, r3
 800b404:	f7fe f870 	bl	80094e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40c:	4b19      	ldr	r3, [pc, #100]	; (800b474 <xTaskRemoveFromEventList+0xb4>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	429a      	cmp	r2, r3
 800b412:	d903      	bls.n	800b41c <xTaskRemoveFromEventList+0x5c>
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	4a16      	ldr	r2, [pc, #88]	; (800b474 <xTaskRemoveFromEventList+0xb4>)
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4a13      	ldr	r2, [pc, #76]	; (800b478 <xTaskRemoveFromEventList+0xb8>)
 800b42a:	441a      	add	r2, r3
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	3304      	adds	r3, #4
 800b430:	4619      	mov	r1, r3
 800b432:	4610      	mov	r0, r2
 800b434:	f7fd fffd 	bl	8009432 <vListInsertEnd>
 800b438:	e005      	b.n	800b446 <xTaskRemoveFromEventList+0x86>
>>>>>>> e9380fc... optimisation RAM=)
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	3318      	adds	r3, #24
 800af1a:	4619      	mov	r1, r3
 800af1c:	480e      	ldr	r0, [pc, #56]	; (800af58 <xTaskRemoveFromEventList+0xbc>)
 800af1e:	f7fe f8e8 	bl	80090f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af26:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <xTaskRemoveFromEventList+0xc0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d905      	bls.n	800af3c <xTaskRemoveFromEventList+0xa0>
=======
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	3318      	adds	r3, #24
 800b43e:	4619      	mov	r1, r3
 800b440:	480e      	ldr	r0, [pc, #56]	; (800b47c <xTaskRemoveFromEventList+0xbc>)
 800b442:	f7fd fff6 	bl	8009432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b44a:	4b0d      	ldr	r3, [pc, #52]	; (800b480 <xTaskRemoveFromEventList+0xc0>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	429a      	cmp	r2, r3
 800b452:	d905      	bls.n	800b460 <xTaskRemoveFromEventList+0xa0>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 800af30:	2301      	movs	r3, #1
 800af32:	617b      	str	r3, [r7, #20]
=======
 800b454:	2301      	movs	r3, #1
 800b456:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800af34:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <xTaskRemoveFromEventList+0xc4>)
 800af36:	2201      	movs	r2, #1
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	e001      	b.n	800af40 <xTaskRemoveFromEventList+0xa4>
=======
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <xTaskRemoveFromEventList+0xc4>)
 800b45a:	2201      	movs	r2, #1
 800b45c:	601a      	str	r2, [r3, #0]
 800b45e:	e001      	b.n	800b464 <xTaskRemoveFromEventList+0xa4>
>>>>>>> e9380fc... optimisation RAM=)
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 800af3c:	2300      	movs	r3, #0
 800af3e:	617b      	str	r3, [r7, #20]
=======
 800b460:	2300      	movs	r3, #0
 800b462:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
<<<<<<< HEAD
 800af40:	697b      	ldr	r3, [r7, #20]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	200010b8 	.word	0x200010b8
 800af50:	20001098 	.word	0x20001098
 800af54:	20000bd8 	.word	0x20000bd8
 800af58:	20001068 	.word	0x20001068
 800af5c:	20000bd4 	.word	0x20000bd4
 800af60:	200010a4 	.word	0x200010a4

0800af64 <vTaskInternalSetTimeOutState>:
=======
 800b464:	697b      	ldr	r3, [r7, #20]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	200017dc 	.word	0x200017dc
 800b474:	200017bc 	.word	0x200017bc
 800b478:	200012fc 	.word	0x200012fc
 800b47c:	2000178c 	.word	0x2000178c
 800b480:	200012f8 	.word	0x200012f8
 800b484:	200017c8 	.word	0x200017c8

0800b488 <vTaskInternalSetTimeOutState>:
>>>>>>> e9380fc... optimisation RAM=)
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <vTaskInternalSetTimeOutState+0x24>)
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af74:	4b05      	ldr	r3, [pc, #20]	; (800af8c <vTaskInternalSetTimeOutState+0x28>)
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	605a      	str	r2, [r3, #4]
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	bc80      	pop	{r7}
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	200010a8 	.word	0x200010a8
 800af8c:	20001094 	.word	0x20001094

0800af90 <xTaskCheckForTimeOut>:
=======
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b490:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <vTaskInternalSetTimeOutState+0x24>)
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b498:	4b05      	ldr	r3, [pc, #20]	; (800b4b0 <vTaskInternalSetTimeOutState+0x28>)
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	605a      	str	r2, [r3, #4]
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bc80      	pop	{r7}
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	200017cc 	.word	0x200017cc
 800b4b0:	200017b8 	.word	0x200017b8

0800b4b4 <xTaskCheckForTimeOut>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10a      	bne.n	800afb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	613b      	str	r3, [r7, #16]
}
 800afb2:	bf00      	nop
 800afb4:	e7fe      	b.n	800afb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	60fb      	str	r3, [r7, #12]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800afd2:	f000 fec3 	bl	800bd5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afd6:	4b1d      	ldr	r3, [pc, #116]	; (800b04c <xTaskCheckForTimeOut+0xbc>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	617b      	str	r3, [r7, #20]
=======
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	613b      	str	r3, [r7, #16]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	60fb      	str	r3, [r7, #12]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b4f6:	f001 f8d9 	bl	800c6ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4fa:	4b1d      	ldr	r3, [pc, #116]	; (800b570 <xTaskCheckForTimeOut+0xbc>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	69ba      	ldr	r2, [r7, #24]
 800b506:	1ad3      	subs	r3, r2, r3
 800b508:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afee:	d102      	bne.n	800aff6 <xTaskCheckForTimeOut+0x66>
=======
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b512:	d102      	bne.n	800b51a <xTaskCheckForTimeOut+0x66>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 800aff0:	2300      	movs	r3, #0
 800aff2:	61fb      	str	r3, [r7, #28]
 800aff4:	e023      	b.n	800b03e <xTaskCheckForTimeOut+0xae>
=======
 800b514:	2300      	movs	r3, #0
 800b516:	61fb      	str	r3, [r7, #28]
 800b518:	e023      	b.n	800b562 <xTaskCheckForTimeOut+0xae>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b15      	ldr	r3, [pc, #84]	; (800b050 <xTaskCheckForTimeOut+0xc0>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	d007      	beq.n	800b012 <xTaskCheckForTimeOut+0x82>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d302      	bcc.n	800b012 <xTaskCheckForTimeOut+0x82>
=======
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	4b15      	ldr	r3, [pc, #84]	; (800b574 <xTaskCheckForTimeOut+0xc0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	429a      	cmp	r2, r3
 800b524:	d007      	beq.n	800b536 <xTaskCheckForTimeOut+0x82>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d302      	bcc.n	800b536 <xTaskCheckForTimeOut+0x82>
>>>>>>> e9380fc... optimisation RAM=)
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 800b00c:	2301      	movs	r3, #1
 800b00e:	61fb      	str	r3, [r7, #28]
 800b010:	e015      	b.n	800b03e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d20b      	bcs.n	800b034 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	1ad2      	subs	r2, r2, r3
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff ff9b 	bl	800af64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b02e:	2300      	movs	r3, #0
 800b030:	61fb      	str	r3, [r7, #28]
 800b032:	e004      	b.n	800b03e <xTaskCheckForTimeOut+0xae>
=======
 800b530:	2301      	movs	r3, #1
 800b532:	61fb      	str	r3, [r7, #28]
 800b534:	e015      	b.n	800b562 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	697a      	ldr	r2, [r7, #20]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d20b      	bcs.n	800b558 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	1ad2      	subs	r2, r2, r3
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff ff9b 	bl	800b488 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b552:	2300      	movs	r3, #0
 800b554:	61fb      	str	r3, [r7, #28]
 800b556:	e004      	b.n	800b562 <xTaskCheckForTimeOut+0xae>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2200      	movs	r2, #0
 800b038:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b03a:	2301      	movs	r3, #1
 800b03c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b03e:	f000 febd 	bl	800bdbc <vPortExitCritical>

	return xReturn;
 800b042:	69fb      	ldr	r3, [r7, #28]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3720      	adds	r7, #32
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20001094 	.word	0x20001094
 800b050:	200010a8 	.word	0x200010a8

0800b054 <vTaskMissedYield>:
=======
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b55e:	2301      	movs	r3, #1
 800b560:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b562:	f001 f8d3 	bl	800c70c <vPortExitCritical>

	return xReturn;
 800b566:	69fb      	ldr	r3, [r7, #28]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3720      	adds	r7, #32
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	200017b8 	.word	0x200017b8
 800b574:	200017cc 	.word	0x200017cc

0800b578 <vTaskMissedYield>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b058:	4b03      	ldr	r3, [pc, #12]	; (800b068 <vTaskMissedYield+0x14>)
 800b05a:	2201      	movs	r2, #1
 800b05c:	601a      	str	r2, [r3, #0]
}
 800b05e:	bf00      	nop
 800b060:	46bd      	mov	sp, r7
 800b062:	bc80      	pop	{r7}
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	200010a4 	.word	0x200010a4

0800b06c <prvIdleTask>:
=======
 800b578:	b480      	push	{r7}
 800b57a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b57c:	4b03      	ldr	r3, [pc, #12]	; (800b58c <vTaskMissedYield+0x14>)
 800b57e:	2201      	movs	r2, #1
 800b580:	601a      	str	r2, [r3, #0]
}
 800b582:	bf00      	nop
 800b584:	46bd      	mov	sp, r7
 800b586:	bc80      	pop	{r7}
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	200017c8 	.word	0x200017c8

0800b590 <prvIdleTask>:
>>>>>>> e9380fc... optimisation RAM=)
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
=======
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 800b074:	f000 f84c 	bl	800b110 <prvCheckTasksWaitingTermination>
=======
 800b598:	f000 f84c 	bl	800b634 <prvCheckTasksWaitingTermination>
>>>>>>> e9380fc... optimisation RAM=)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800b078:	4b06      	ldr	r3, [pc, #24]	; (800b094 <prvIdleTask+0x28>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d9f9      	bls.n	800b074 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b080:	4b05      	ldr	r3, [pc, #20]	; (800b098 <prvIdleTask+0x2c>)
 800b082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b086:	601a      	str	r2, [r3, #0]
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b090:	e7f0      	b.n	800b074 <prvIdleTask+0x8>
 800b092:	bf00      	nop
 800b094:	20000bd8 	.word	0x20000bd8
 800b098:	e000ed04 	.word	0xe000ed04

0800b09c <prvInitialiseTaskLists>:
=======
 800b59c:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <prvIdleTask+0x28>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d9f9      	bls.n	800b598 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5a4:	4b05      	ldr	r3, [pc, #20]	; (800b5bc <prvIdleTask+0x2c>)
 800b5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5b4:	e7f0      	b.n	800b598 <prvIdleTask+0x8>
 800b5b6:	bf00      	nop
 800b5b8:	200012fc 	.word	0x200012fc
 800b5bc:	e000ed04 	.word	0xe000ed04

0800b5c0 <prvInitialiseTaskLists>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	607b      	str	r3, [r7, #4]
 800b0a6:	e00c      	b.n	800b0c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4a10      	ldr	r2, [pc, #64]	; (800b0f4 <prvInitialiseTaskLists+0x58>)
 800b0b4:	4413      	add	r3, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fd fff0 	bl	800909c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	607b      	str	r3, [r7, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b37      	cmp	r3, #55	; 0x37
 800b0c6:	d9ef      	bls.n	800b0a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0c8:	480b      	ldr	r0, [pc, #44]	; (800b0f8 <prvInitialiseTaskLists+0x5c>)
 800b0ca:	f7fd ffe7 	bl	800909c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0ce:	480b      	ldr	r0, [pc, #44]	; (800b0fc <prvInitialiseTaskLists+0x60>)
 800b0d0:	f7fd ffe4 	bl	800909c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0d4:	480a      	ldr	r0, [pc, #40]	; (800b100 <prvInitialiseTaskLists+0x64>)
 800b0d6:	f7fd ffe1 	bl	800909c <vListInitialise>
=======
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	607b      	str	r3, [r7, #4]
 800b5ca:	e00c      	b.n	800b5e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4a10      	ldr	r2, [pc, #64]	; (800b618 <prvInitialiseTaskLists+0x58>)
 800b5d8:	4413      	add	r3, r2
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fd fefe 	bl	80093dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	607b      	str	r3, [r7, #4]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b37      	cmp	r3, #55	; 0x37
 800b5ea:	d9ef      	bls.n	800b5cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5ec:	480b      	ldr	r0, [pc, #44]	; (800b61c <prvInitialiseTaskLists+0x5c>)
 800b5ee:	f7fd fef5 	bl	80093dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5f2:	480b      	ldr	r0, [pc, #44]	; (800b620 <prvInitialiseTaskLists+0x60>)
 800b5f4:	f7fd fef2 	bl	80093dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5f8:	480a      	ldr	r0, [pc, #40]	; (800b624 <prvInitialiseTaskLists+0x64>)
 800b5fa:	f7fd feef 	bl	80093dc <vListInitialise>
>>>>>>> e9380fc... optimisation RAM=)
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 800b0da:	480a      	ldr	r0, [pc, #40]	; (800b104 <prvInitialiseTaskLists+0x68>)
 800b0dc:	f7fd ffde 	bl	800909c <vListInitialise>
=======
 800b5fe:	480a      	ldr	r0, [pc, #40]	; (800b628 <prvInitialiseTaskLists+0x68>)
 800b600:	f7fd feec 	bl	80093dc <vListInitialise>
>>>>>>> e9380fc... optimisation RAM=)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 800b0e0:	4b09      	ldr	r3, [pc, #36]	; (800b108 <prvInitialiseTaskLists+0x6c>)
 800b0e2:	4a05      	ldr	r2, [pc, #20]	; (800b0f8 <prvInitialiseTaskLists+0x5c>)
 800b0e4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0e6:	4b09      	ldr	r3, [pc, #36]	; (800b10c <prvInitialiseTaskLists+0x70>)
 800b0e8:	4a04      	ldr	r2, [pc, #16]	; (800b0fc <prvInitialiseTaskLists+0x60>)
 800b0ea:	601a      	str	r2, [r3, #0]
}
 800b0ec:	bf00      	nop
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	20000bd8 	.word	0x20000bd8
 800b0f8:	20001038 	.word	0x20001038
 800b0fc:	2000104c 	.word	0x2000104c
 800b100:	20001068 	.word	0x20001068
 800b104:	2000107c 	.word	0x2000107c
 800b108:	20001060 	.word	0x20001060
 800b10c:	20001064 	.word	0x20001064

0800b110 <prvCheckTasksWaitingTermination>:
=======
 800b604:	4b09      	ldr	r3, [pc, #36]	; (800b62c <prvInitialiseTaskLists+0x6c>)
 800b606:	4a05      	ldr	r2, [pc, #20]	; (800b61c <prvInitialiseTaskLists+0x5c>)
 800b608:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b60a:	4b09      	ldr	r3, [pc, #36]	; (800b630 <prvInitialiseTaskLists+0x70>)
 800b60c:	4a04      	ldr	r2, [pc, #16]	; (800b620 <prvInitialiseTaskLists+0x60>)
 800b60e:	601a      	str	r2, [r3, #0]
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	200012fc 	.word	0x200012fc
 800b61c:	2000175c 	.word	0x2000175c
 800b620:	20001770 	.word	0x20001770
 800b624:	2000178c 	.word	0x2000178c
 800b628:	200017a0 	.word	0x200017a0
 800b62c:	20001784 	.word	0x20001784
 800b630:	20001788 	.word	0x20001788

0800b634 <prvCheckTasksWaitingTermination>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 800b110:	b480      	push	{r7}
 800b112:	af00      	add	r7, sp, #0
=======
 800b634:	b480      	push	{r7}
 800b636:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 800b114:	bf00      	nop
 800b116:	46bd      	mov	sp, r7
 800b118:	bc80      	pop	{r7}
 800b11a:	4770      	bx	lr

0800b11c <prvResetNextTaskUnblockTime>:
=======
 800b638:	bf00      	nop
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bc80      	pop	{r7}
 800b63e:	4770      	bx	lr

0800b640 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <vTaskGetInfo+0x1a>
 800b654:	4b2c      	ldr	r3, [pc, #176]	; (800b708 <vTaskGetInfo+0xc8>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	e000      	b.n	800b65c <vTaskGetInfo+0x1c>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800b696:	78fb      	ldrb	r3, [r7, #3]
 800b698:	2b05      	cmp	r3, #5
 800b69a:	d01a      	beq.n	800b6d2 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800b69c:	4b1a      	ldr	r3, [pc, #104]	; (800b708 <vTaskGetInfo+0xc8>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	697a      	ldr	r2, [r7, #20]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d103      	bne.n	800b6ae <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	731a      	strb	r2, [r3, #12]
 800b6ac:	e018      	b.n	800b6e0 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	78fa      	ldrb	r2, [r7, #3]
 800b6b2:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d112      	bne.n	800b6e0 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800b6ba:	f7ff fbb9 	bl	800ae30 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d002      	beq.n	800b6cc <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800b6cc:	f7ff fbbe 	bl	800ae4c <xTaskResumeAll>
 800b6d0:	e006      	b.n	800b6e0 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800b6d2:	6978      	ldr	r0, [r7, #20]
 800b6d4:	f7ff f9dc 	bl	800aa90 <eTaskGetState>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	461a      	mov	r2, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d009      	beq.n	800b6fa <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 f860 	bl	800b7b0 <prvTaskCheckFreeStackSpace>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800b6f8:	e002      	b.n	800b700 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	841a      	strh	r2, [r3, #32]
	}
 800b700:	bf00      	nop
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	200012f8 	.word	0x200012f8

0800b70c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08a      	sub	sp, #40	; 0x28
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	4613      	mov	r3, r2
 800b718:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d03f      	beq.n	800b7a6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	623b      	str	r3, [r7, #32]
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	685a      	ldr	r2, [r3, #4]
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	605a      	str	r2, [r3, #4]
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	3308      	adds	r3, #8
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d104      	bne.n	800b74a <prvListTasksWithinSingleList+0x3e>
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	605a      	str	r2, [r3, #4]
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	61bb      	str	r3, [r7, #24]
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	685a      	ldr	r2, [r3, #4]
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	605a      	str	r2, [r3, #4]
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	3308      	adds	r3, #8
 800b768:	429a      	cmp	r2, r3
 800b76a:	d104      	bne.n	800b776 <prvListTasksWithinSingleList+0x6a>
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	605a      	str	r2, [r3, #4]
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800b77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b780:	4613      	mov	r3, r2
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	4413      	add	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	461a      	mov	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	1899      	adds	r1, r3, r2
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	2201      	movs	r2, #1
 800b792:	6978      	ldr	r0, [r7, #20]
 800b794:	f7ff ff54 	bl	800b640 <vTaskGetInfo>
				uxTask++;
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	3301      	adds	r3, #1
 800b79c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d1d5      	bne.n	800b752 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3728      	adds	r7, #40	; 0x28
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b7bc:	e005      	b.n	800b7ca <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2ba5      	cmp	r3, #165	; 0xa5
 800b7d0:	d0f5      	beq.n	800b7be <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	089b      	lsrs	r3, r3, #2
 800b7d6:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	b29b      	uxth	r3, r3
	}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3714      	adds	r7, #20
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bc80      	pop	{r7}
 800b7e4:	4770      	bx	lr
	...

0800b7e8 <prvResetNextTaskUnblockTime>:
>>>>>>> e9380fc... optimisation RAM=)

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b122:	4b0e      	ldr	r3, [pc, #56]	; (800b15c <prvResetNextTaskUnblockTime+0x40>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <prvResetNextTaskUnblockTime+0x14>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e000      	b.n	800b132 <prvResetNextTaskUnblockTime+0x16>
 800b130:	2300      	movs	r3, #0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d004      	beq.n	800b140 <prvResetNextTaskUnblockTime+0x24>
=======
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7ee:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <prvResetNextTaskUnblockTime+0x40>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <prvResetNextTaskUnblockTime+0x14>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e000      	b.n	800b7fe <prvResetNextTaskUnblockTime+0x16>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d004      	beq.n	800b80c <prvResetNextTaskUnblockTime+0x24>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800b136:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <prvResetNextTaskUnblockTime+0x44>)
 800b138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b13c:	601a      	str	r2, [r3, #0]
=======
 800b802:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <prvResetNextTaskUnblockTime+0x44>)
 800b804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b808:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 800b13e:	e008      	b.n	800b152 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b140:	4b06      	ldr	r3, [pc, #24]	; (800b15c <prvResetNextTaskUnblockTime+0x40>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	4a04      	ldr	r2, [pc, #16]	; (800b160 <prvResetNextTaskUnblockTime+0x44>)
 800b150:	6013      	str	r3, [r2, #0]
}
 800b152:	bf00      	nop
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	bc80      	pop	{r7}
 800b15a:	4770      	bx	lr
 800b15c:	20001060 	.word	0x20001060
 800b160:	200010b0 	.word	0x200010b0

0800b164 <xTaskGetCurrentTaskHandle>:
=======
 800b80a:	e008      	b.n	800b81e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b80c:	4b06      	ldr	r3, [pc, #24]	; (800b828 <prvResetNextTaskUnblockTime+0x40>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	4a04      	ldr	r2, [pc, #16]	; (800b82c <prvResetNextTaskUnblockTime+0x44>)
 800b81c:	6013      	str	r3, [r2, #0]
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	bc80      	pop	{r7}
 800b826:	4770      	bx	lr
 800b828:	20001784 	.word	0x20001784
 800b82c:	200017d4 	.word	0x200017d4

0800b830 <xTaskGetCurrentTaskHandle>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
<<<<<<< HEAD
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
=======
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
<<<<<<< HEAD
 800b16a:	4b04      	ldr	r3, [pc, #16]	; (800b17c <xTaskGetCurrentTaskHandle+0x18>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b170:	687b      	ldr	r3, [r7, #4]
	}
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	bc80      	pop	{r7}
 800b17a:	4770      	bx	lr
 800b17c:	20000bd4 	.word	0x20000bd4

0800b180 <xTaskGetSchedulerState>:
=======
 800b836:	4b04      	ldr	r3, [pc, #16]	; (800b848 <xTaskGetCurrentTaskHandle+0x18>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b83c:	687b      	ldr	r3, [r7, #4]
	}
 800b83e:	4618      	mov	r0, r3
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	bc80      	pop	{r7}
 800b846:	4770      	bx	lr
 800b848:	200012f8 	.word	0x200012f8

0800b84c <xTaskGetSchedulerState>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b186:	4b0b      	ldr	r3, [pc, #44]	; (800b1b4 <xTaskGetSchedulerState+0x34>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d102      	bne.n	800b194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b18e:	2301      	movs	r3, #1
 800b190:	607b      	str	r3, [r7, #4]
 800b192:	e008      	b.n	800b1a6 <xTaskGetSchedulerState+0x26>
=======
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b852:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <xTaskGetSchedulerState+0x34>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d102      	bne.n	800b860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b85a:	2301      	movs	r3, #1
 800b85c:	607b      	str	r3, [r7, #4]
 800b85e:	e008      	b.n	800b872 <xTaskGetSchedulerState+0x26>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800b194:	4b08      	ldr	r3, [pc, #32]	; (800b1b8 <xTaskGetSchedulerState+0x38>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d102      	bne.n	800b1a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b19c:	2302      	movs	r3, #2
 800b19e:	607b      	str	r3, [r7, #4]
 800b1a0:	e001      	b.n	800b1a6 <xTaskGetSchedulerState+0x26>
=======
 800b860:	4b08      	ldr	r3, [pc, #32]	; (800b884 <xTaskGetSchedulerState+0x38>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d102      	bne.n	800b86e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b868:	2302      	movs	r3, #2
 800b86a:	607b      	str	r3, [r7, #4]
 800b86c:	e001      	b.n	800b872 <xTaskGetSchedulerState+0x26>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	607b      	str	r3, [r7, #4]
=======
 800b86e:	2300      	movs	r3, #0
 800b870:	607b      	str	r3, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
			}
		}

		return xReturn;
<<<<<<< HEAD
 800b1a6:	687b      	ldr	r3, [r7, #4]
	}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bc80      	pop	{r7}
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	2000109c 	.word	0x2000109c
 800b1b8:	200010b8 	.word	0x200010b8

0800b1bc <xTaskPriorityInherit>:
=======
 800b872:	687b      	ldr	r3, [r7, #4]
	}
 800b874:	4618      	mov	r0, r3
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	bc80      	pop	{r7}
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	200017c0 	.word	0x200017c0
 800b884:	200017dc 	.word	0x200017dc

0800b888 <xTaskPriorityInherit>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60fb      	str	r3, [r7, #12]
=======
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b894:	2300      	movs	r3, #0
 800b896:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
<<<<<<< HEAD
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d056      	beq.n	800b280 <xTaskPriorityInherit+0xc4>
=======
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d056      	beq.n	800b94c <xTaskPriorityInherit+0xc4>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d6:	4b2d      	ldr	r3, [pc, #180]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d246      	bcs.n	800b26e <xTaskPriorityInherit+0xb2>
=======
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a2:	4b2d      	ldr	r3, [pc, #180]	; (800b958 <xTaskPriorityInherit+0xd0>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d246      	bcs.n	800b93a <xTaskPriorityInherit+0xb2>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	db06      	blt.n	800b1f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1e8:	4b28      	ldr	r3, [pc, #160]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	619a      	str	r2, [r3, #24]
=======
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	db06      	blt.n	800b8c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8b4:	4b28      	ldr	r3, [pc, #160]	; (800b958 <xTaskPriorityInherit+0xd0>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	619a      	str	r2, [r3, #24]
>>>>>>> e9380fc... optimisation RAM=)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	6959      	ldr	r1, [r3, #20]
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fe:	4613      	mov	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4a22      	ldr	r2, [pc, #136]	; (800b290 <xTaskPriorityInherit+0xd4>)
 800b208:	4413      	add	r3, r2
 800b20a:	4299      	cmp	r1, r3
 800b20c:	d101      	bne.n	800b212 <xTaskPriorityInherit+0x56>
 800b20e:	2301      	movs	r3, #1
 800b210:	e000      	b.n	800b214 <xTaskPriorityInherit+0x58>
 800b212:	2300      	movs	r3, #0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d022      	beq.n	800b25e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	3304      	adds	r3, #4
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fd ffc3 	bl	80091a8 <uxListRemove>
=======
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6959      	ldr	r1, [r3, #20]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4a22      	ldr	r2, [pc, #136]	; (800b95c <xTaskPriorityInherit+0xd4>)
 800b8d4:	4413      	add	r3, r2
 800b8d6:	4299      	cmp	r1, r3
 800b8d8:	d101      	bne.n	800b8de <xTaskPriorityInherit+0x56>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e000      	b.n	800b8e0 <xTaskPriorityInherit+0x58>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d022      	beq.n	800b92a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fd fdfd 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 800b222:	4b1a      	ldr	r3, [pc, #104]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b230:	4b18      	ldr	r3, [pc, #96]	; (800b294 <xTaskPriorityInherit+0xd8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d903      	bls.n	800b240 <xTaskPriorityInherit+0x84>
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	4a15      	ldr	r2, [pc, #84]	; (800b294 <xTaskPriorityInherit+0xd8>)
 800b23e:	6013      	str	r3, [r2, #0]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b244:	4613      	mov	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4a10      	ldr	r2, [pc, #64]	; (800b290 <xTaskPriorityInherit+0xd4>)
 800b24e:	441a      	add	r2, r3
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3304      	adds	r3, #4
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	f7fd ff4b 	bl	80090f2 <vListInsertEnd>
 800b25c:	e004      	b.n	800b268 <xTaskPriorityInherit+0xac>
=======
 800b8ee:	4b1a      	ldr	r3, [pc, #104]	; (800b958 <xTaskPriorityInherit+0xd0>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fc:	4b18      	ldr	r3, [pc, #96]	; (800b960 <xTaskPriorityInherit+0xd8>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	429a      	cmp	r2, r3
 800b902:	d903      	bls.n	800b90c <xTaskPriorityInherit+0x84>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b908:	4a15      	ldr	r2, [pc, #84]	; (800b960 <xTaskPriorityInherit+0xd8>)
 800b90a:	6013      	str	r3, [r2, #0]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4a10      	ldr	r2, [pc, #64]	; (800b95c <xTaskPriorityInherit+0xd4>)
 800b91a:	441a      	add	r2, r3
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	3304      	adds	r3, #4
 800b920:	4619      	mov	r1, r3
 800b922:	4610      	mov	r0, r2
 800b924:	f7fd fd85 	bl	8009432 <vListInsertEnd>
 800b928:	e004      	b.n	800b934 <xTaskPriorityInherit+0xac>
>>>>>>> e9380fc... optimisation RAM=)
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 800b25e:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800b92a:	4b0b      	ldr	r3, [pc, #44]	; (800b958 <xTaskPriorityInherit+0xd0>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> e9380fc... optimisation RAM=)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
<<<<<<< HEAD
 800b268:	2301      	movs	r3, #1
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	e008      	b.n	800b280 <xTaskPriorityInherit+0xc4>
=======
 800b934:	2301      	movs	r3, #1
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	e008      	b.n	800b94c <xTaskPriorityInherit+0xc4>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b272:	4b06      	ldr	r3, [pc, #24]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	429a      	cmp	r2, r3
 800b27a:	d201      	bcs.n	800b280 <xTaskPriorityInherit+0xc4>
=======
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b93e:	4b06      	ldr	r3, [pc, #24]	; (800b958 <xTaskPriorityInherit+0xd0>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	429a      	cmp	r2, r3
 800b946:	d201      	bcs.n	800b94c <xTaskPriorityInherit+0xc4>
>>>>>>> e9380fc... optimisation RAM=)
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 800b27c:	2301      	movs	r3, #1
 800b27e:	60fb      	str	r3, [r7, #12]
=======
 800b948:	2301      	movs	r3, #1
 800b94a:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 800b280:	68fb      	ldr	r3, [r7, #12]
	}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20000bd4 	.word	0x20000bd4
 800b290:	20000bd8 	.word	0x20000bd8
 800b294:	20001098 	.word	0x20001098

0800b298 <xTaskPriorityDisinherit>:
=======
 800b94c:	68fb      	ldr	r3, [r7, #12]
	}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	200012f8 	.word	0x200012f8
 800b95c:	200012fc 	.word	0x200012fc
 800b960:	200017bc 	.word	0x200017bc

0800b964 <xTaskPriorityDisinherit>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d056      	beq.n	800b35c <xTaskPriorityDisinherit+0xc4>
=======
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b970:	2300      	movs	r3, #0
 800b972:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d056      	beq.n	800ba28 <xTaskPriorityDisinherit+0xc4>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 800b2ae:	4b2e      	ldr	r3, [pc, #184]	; (800b368 <xTaskPriorityDisinherit+0xd0>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d00a      	beq.n	800b2ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	60fb      	str	r3, [r7, #12]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10a      	bne.n	800b2ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	60bb      	str	r3, [r7, #8]
}
 800b2e8:	bf00      	nop
 800b2ea:	e7fe      	b.n	800b2ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f0:	1e5a      	subs	r2, r3, #1
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800b97a:	4b2e      	ldr	r3, [pc, #184]	; (800ba34 <xTaskPriorityDisinherit+0xd0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	429a      	cmp	r2, r3
 800b982:	d00a      	beq.n	800b99a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b988:	f383 8811 	msr	BASEPRI, r3
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	60fb      	str	r3, [r7, #12]
}
 800b996:	bf00      	nop
 800b998:	e7fe      	b.n	800b998 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10a      	bne.n	800b9b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	60bb      	str	r3, [r7, #8]
}
 800b9b4:	bf00      	nop
 800b9b6:	e7fe      	b.n	800b9b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9bc:	1e5a      	subs	r2, r3, #1
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> e9380fc... optimisation RAM=)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d02c      	beq.n	800b35c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b306:	2b00      	cmp	r3, #0
 800b308:	d128      	bne.n	800b35c <xTaskPriorityDisinherit+0xc4>
=======
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d02c      	beq.n	800ba28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d128      	bne.n	800ba28 <xTaskPriorityDisinherit+0xc4>
>>>>>>> e9380fc... optimisation RAM=)
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	3304      	adds	r3, #4
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fd ff4a 	bl	80091a8 <uxListRemove>
=======
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	3304      	adds	r3, #4
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fd fd84 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> e9380fc... optimisation RAM=)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32c:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <xTaskPriorityDisinherit+0xd4>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d903      	bls.n	800b33c <xTaskPriorityDisinherit+0xa4>
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	4a0c      	ldr	r2, [pc, #48]	; (800b36c <xTaskPriorityDisinherit+0xd4>)
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b340:	4613      	mov	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	4413      	add	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4a09      	ldr	r2, [pc, #36]	; (800b370 <xTaskPriorityDisinherit+0xd8>)
 800b34a:	441a      	add	r2, r3
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	3304      	adds	r3, #4
 800b350:	4619      	mov	r1, r3
 800b352:	4610      	mov	r0, r2
 800b354:	f7fd fecd 	bl	80090f2 <vListInsertEnd>
=======
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ba38 <xTaskPriorityDisinherit+0xd4>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d903      	bls.n	800ba08 <xTaskPriorityDisinherit+0xa4>
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	4a0c      	ldr	r2, [pc, #48]	; (800ba38 <xTaskPriorityDisinherit+0xd4>)
 800ba06:	6013      	str	r3, [r2, #0]
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4a09      	ldr	r2, [pc, #36]	; (800ba3c <xTaskPriorityDisinherit+0xd8>)
 800ba16:	441a      	add	r2, r3
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	4610      	mov	r0, r2
 800ba20:	f7fd fd07 	bl	8009432 <vListInsertEnd>
>>>>>>> e9380fc... optimisation RAM=)
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 800b358:	2301      	movs	r3, #1
 800b35a:	617b      	str	r3, [r7, #20]
=======
 800ba24:	2301      	movs	r3, #1
 800ba26:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 800b35c:	697b      	ldr	r3, [r7, #20]
	}
 800b35e:	4618      	mov	r0, r3
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	20000bd4 	.word	0x20000bd4
 800b36c:	20001098 	.word	0x20001098
 800b370:	20000bd8 	.word	0x20000bd8

0800b374 <vTaskPriorityDisinheritAfterTimeout>:
=======
 800ba28:	697b      	ldr	r3, [r7, #20]
	}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	200012f8 	.word	0x200012f8
 800ba38:	200017bc 	.word	0x200017bc
 800ba3c:	200012fc 	.word	0x200012fc

0800ba40 <vTaskPriorityDisinheritAfterTimeout>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
<<<<<<< HEAD
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b382:	2301      	movs	r3, #1
 800b384:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d06f      	beq.n	800b46c <vTaskPriorityDisinheritAfterTimeout+0xf8>
=======
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d06f      	beq.n	800bb38 <vTaskPriorityDisinheritAfterTimeout+0xf8>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< HEAD
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	60fb      	str	r3, [r7, #12]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <vTaskPriorityDisinheritAfterTimeout+0x34>
=======
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60fb      	str	r3, [r7, #12]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <vTaskPriorityDisinheritAfterTimeout+0x34>
>>>>>>> e9380fc... optimisation RAM=)

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
<<<<<<< HEAD
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d902      	bls.n	800b3ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	61fb      	str	r3, [r7, #28]
 800b3b8:	e002      	b.n	800b3c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
=======
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d902      	bls.n	800ba86 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	61fb      	str	r3, [r7, #28]
 800ba84:	e002      	b.n	800ba8c <vTaskPriorityDisinheritAfterTimeout+0x4c>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
<<<<<<< HEAD
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3be:	61fb      	str	r3, [r7, #28]
=======
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba8a:	61fb      	str	r3, [r7, #28]
>>>>>>> e9380fc... optimisation RAM=)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
<<<<<<< HEAD
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	69fa      	ldr	r2, [r7, #28]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d050      	beq.n	800b46c <vTaskPriorityDisinheritAfterTimeout+0xf8>
=======
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba90:	69fa      	ldr	r2, [r7, #28]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d050      	beq.n	800bb38 <vTaskPriorityDisinheritAfterTimeout+0xf8>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
<<<<<<< HEAD
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d14b      	bne.n	800b46c <vTaskPriorityDisinheritAfterTimeout+0xf8>
=======
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d14b      	bne.n	800bb38 <vTaskPriorityDisinheritAfterTimeout+0xf8>
>>>>>>> e9380fc... optimisation RAM=)
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
<<<<<<< HEAD
 800b3d4:	4b27      	ldr	r3, [pc, #156]	; (800b474 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d10a      	bne.n	800b3f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	60bb      	str	r3, [r7, #8]
}
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
=======
 800baa0:	4b27      	ldr	r3, [pc, #156]	; (800bb40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	69ba      	ldr	r2, [r7, #24]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d10a      	bne.n	800bac0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800baaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baae:	f383 8811 	msr	BASEPRI, r3
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	60bb      	str	r3, [r7, #8]
}
 800babc:	bf00      	nop
 800babe:	e7fe      	b.n	800babe <vTaskPriorityDisinheritAfterTimeout+0x7e>
>>>>>>> e9380fc... optimisation RAM=)

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
<<<<<<< HEAD
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	69fa      	ldr	r2, [r7, #28]
 800b3fe:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	69fa      	ldr	r2, [r7, #28]
 800baca:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> e9380fc... optimisation RAM=)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	2b00      	cmp	r3, #0
 800b406:	db04      	blt.n	800b412 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	619a      	str	r2, [r3, #24]
=======
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	db04      	blt.n	800bade <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	619a      	str	r2, [r3, #24]
>>>>>>> e9380fc... optimisation RAM=)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	6959      	ldr	r1, [r3, #20]
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	4613      	mov	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4413      	add	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4a15      	ldr	r2, [pc, #84]	; (800b478 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b422:	4413      	add	r3, r2
 800b424:	4299      	cmp	r1, r3
 800b426:	d101      	bne.n	800b42c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800b428:	2301      	movs	r3, #1
 800b42a:	e000      	b.n	800b42e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800b42c:	2300      	movs	r3, #0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d01c      	beq.n	800b46c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	3304      	adds	r3, #4
 800b436:	4618      	mov	r0, r3
 800b438:	f7fd feb6 	bl	80091a8 <uxListRemove>
=======
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	6959      	ldr	r1, [r3, #20]
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	4613      	mov	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4a15      	ldr	r2, [pc, #84]	; (800bb44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800baee:	4413      	add	r3, r2
 800baf0:	4299      	cmp	r1, r3
 800baf2:	d101      	bne.n	800baf8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800baf4:	2301      	movs	r3, #1
 800baf6:	e000      	b.n	800bafa <vTaskPriorityDisinheritAfterTimeout+0xba>
 800baf8:	2300      	movs	r3, #0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d01c      	beq.n	800bb38 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fd fcf0 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b440:	4b0e      	ldr	r3, [pc, #56]	; (800b47c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	429a      	cmp	r2, r3
 800b446:	d903      	bls.n	800b450 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	4a0b      	ldr	r2, [pc, #44]	; (800b47c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b454:	4613      	mov	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4a06      	ldr	r2, [pc, #24]	; (800b478 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b45e:	441a      	add	r2, r3
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	3304      	adds	r3, #4
 800b464:	4619      	mov	r1, r3
 800b466:	4610      	mov	r0, r2
 800b468:	f7fd fe43 	bl	80090f2 <vListInsertEnd>
=======
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0c:	4b0e      	ldr	r3, [pc, #56]	; (800bb48 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d903      	bls.n	800bb1c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	4a0b      	ldr	r2, [pc, #44]	; (800bb48 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4a06      	ldr	r2, [pc, #24]	; (800bb44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb2a:	441a      	add	r2, r3
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	3304      	adds	r3, #4
 800bb30:	4619      	mov	r1, r3
 800bb32:	4610      	mov	r0, r2
 800bb34:	f7fd fc7d 	bl	8009432 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb38:	bf00      	nop
 800bb3a:	3720      	adds	r7, #32
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	200012f8 	.word	0x200012f8
 800bb44:	200012fc 	.word	0x200012fc
 800bb48:	200017bc 	.word	0x200017bc

0800bb4c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f001 f9b8 	bl	800cece <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7f4 faf6 	bl	8000150 <strlen>
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	e007      	b.n	800bb78 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	2220      	movs	r2, #32
 800bb70:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	3301      	adds	r3, #1
 800bb76:	60fb      	str	r3, [r7, #12]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2b0e      	cmp	r3, #14
 800bb7c:	d9f4      	bls.n	800bb68 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	4413      	add	r3, r2
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	4413      	add	r3, r2
	}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
	...

0800bb98 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800bb98:	b590      	push	{r4, r7, lr}
 800bb9a:	b089      	sub	sp, #36	; 0x24
 800bb9c:	af02      	add	r7, sp, #8
 800bb9e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800bba6:	4b46      	ldr	r3, [pc, #280]	; (800bcc0 <vTaskList+0x128>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800bbac:	4b44      	ldr	r3, [pc, #272]	; (800bcc0 <vTaskList+0x128>)
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	4413      	add	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 fe77 	bl	800c8ac <pvPortMalloc>
 800bbbe:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d078      	beq.n	800bcb8 <vTaskList+0x120>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6938      	ldr	r0, [r7, #16]
 800bbce:	f7ff f9e9 	bl	800afa4 <uxTaskGetSystemState>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60bb      	str	r3, [r7, #8]
 800bbda:	e066      	b.n	800bcaa <vTaskList+0x112>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	00db      	lsls	r3, r3, #3
 800bbe2:	4413      	add	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	4413      	add	r3, r2
 800bbec:	7b1b      	ldrb	r3, [r3, #12]
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	d81b      	bhi.n	800bc2a <vTaskList+0x92>
 800bbf2:	a201      	add	r2, pc, #4	; (adr r2, 800bbf8 <vTaskList+0x60>)
 800bbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf8:	0800bc0d 	.word	0x0800bc0d
 800bbfc:	0800bc13 	.word	0x0800bc13
 800bc00:	0800bc19 	.word	0x0800bc19
 800bc04:	0800bc1f 	.word	0x0800bc1f
 800bc08:	0800bc25 	.word	0x0800bc25
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800bc0c:	2358      	movs	r3, #88	; 0x58
 800bc0e:	75fb      	strb	r3, [r7, #23]
										break;
 800bc10:	e00e      	b.n	800bc30 <vTaskList+0x98>

					case eReady:		cStatus = tskREADY_CHAR;
 800bc12:	2352      	movs	r3, #82	; 0x52
 800bc14:	75fb      	strb	r3, [r7, #23]
										break;
 800bc16:	e00b      	b.n	800bc30 <vTaskList+0x98>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800bc18:	2342      	movs	r3, #66	; 0x42
 800bc1a:	75fb      	strb	r3, [r7, #23]
										break;
 800bc1c:	e008      	b.n	800bc30 <vTaskList+0x98>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800bc1e:	2353      	movs	r3, #83	; 0x53
 800bc20:	75fb      	strb	r3, [r7, #23]
										break;
 800bc22:	e005      	b.n	800bc30 <vTaskList+0x98>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800bc24:	2344      	movs	r3, #68	; 0x44
 800bc26:	75fb      	strb	r3, [r7, #23]
										break;
 800bc28:	e002      	b.n	800bc30 <vTaskList+0x98>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	75fb      	strb	r3, [r7, #23]
										break;
 800bc2e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	4613      	mov	r3, r2
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	4413      	add	r3, r2
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff ff81 	bl	800bb4c <prvWriteNameToBuffer>
 800bc4a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800bc4c:	7df9      	ldrb	r1, [r7, #23]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	4613      	mov	r3, r2
 800bc52:	00db      	lsls	r3, r3, #3
 800bc54:	4413      	add	r3, r2
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	461a      	mov	r2, r3
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	6918      	ldr	r0, [r3, #16]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	4613      	mov	r3, r2
 800bc64:	00db      	lsls	r3, r3, #3
 800bc66:	4413      	add	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	4413      	add	r3, r2
 800bc70:	8c1b      	ldrh	r3, [r3, #32]
 800bc72:	461c      	mov	r4, r3
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	4613      	mov	r3, r2
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	461a      	mov	r2, r3
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	4413      	add	r3, r2
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	9400      	str	r4, [sp, #0]
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	460a      	mov	r2, r1
 800bc8e:	490d      	ldr	r1, [pc, #52]	; (800bcc4 <vTaskList+0x12c>)
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 f8ed 	bl	800ce70 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7f4 fa5a 	bl	8000150 <strlen>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4413      	add	r3, r2
 800bca2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	3301      	adds	r3, #1
 800bca8:	60bb      	str	r3, [r7, #8]
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d394      	bcc.n	800bbdc <vTaskList+0x44>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800bcb2:	6938      	ldr	r0, [r7, #16]
 800bcb4:	f000 febe 	bl	800ca34 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcb8:	bf00      	nop
 800bcba:	371c      	adds	r7, #28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd90      	pop	{r4, r7, pc}
 800bcc0:	200017b4 	.word	0x200017b4
 800bcc4:	0800d964 	.word	0x0800d964

0800bcc8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800bcd6:	4b3a      	ldr	r3, [pc, #232]	; (800bdc0 <vTaskGetRunTimeStats+0xf8>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	617b      	str	r3, [r7, #20]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800bcdc:	4b38      	ldr	r3, [pc, #224]	; (800bdc0 <vTaskGetRunTimeStats+0xf8>)
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	4613      	mov	r3, r2
 800bce2:	00db      	lsls	r3, r3, #3
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4618      	mov	r0, r3
 800bcea:	f000 fddf 	bl	800c8ac <pvPortMalloc>
 800bcee:	61f8      	str	r0, [r7, #28]

		if( pxTaskStatusArray != NULL )
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d060      	beq.n	800bdb8 <vTaskGetRunTimeStats+0xf0>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	f107 020c 	add.w	r2, r7, #12
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	69f8      	ldr	r0, [r7, #28]
 800bd00:	f7ff f950 	bl	800afa4 <uxTaskGetSystemState>
 800bd04:	4603      	mov	r3, r0
 800bd06:	617b      	str	r3, [r7, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4a2e      	ldr	r2, [pc, #184]	; (800bdc4 <vTaskGetRunTimeStats+0xfc>)
 800bd0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd10:	095b      	lsrs	r3, r3, #5
 800bd12:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d04b      	beq.n	800bdb2 <vTaskGetRunTimeStats+0xea>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	613b      	str	r3, [r7, #16]
 800bd1e:	e044      	b.n	800bdaa <vTaskGetRunTimeStats+0xe2>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	4613      	mov	r3, r2
 800bd24:	00db      	lsls	r3, r3, #3
 800bd26:	4413      	add	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	4413      	add	r3, r2
 800bd30:	699a      	ldr	r2, [r3, #24]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd38:	61bb      	str	r3, [r7, #24]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	4413      	add	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	461a      	mov	r2, r3
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	4413      	add	r3, r2
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7ff fefc 	bl	800bb4c <prvWriteNameToBuffer>
 800bd54:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00e      	beq.n	800bd7a <vTaskGetRunTimeStats+0xb2>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	00db      	lsls	r3, r3, #3
 800bd62:	4413      	add	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	461a      	mov	r2, r3
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	699a      	ldr	r2, [r3, #24]
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	4915      	ldr	r1, [pc, #84]	; (800bdc8 <vTaskGetRunTimeStats+0x100>)
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f001 f87c 	bl	800ce70 <siprintf>
 800bd78:	e00d      	b.n	800bd96 <vTaskGetRunTimeStats+0xce>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	4413      	add	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	461a      	mov	r2, r3
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	4413      	add	r3, r2
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	490f      	ldr	r1, [pc, #60]	; (800bdcc <vTaskGetRunTimeStats+0x104>)
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f001 f86d 	bl	800ce70 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7f4 f9da 	bl	8000150 <strlen>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4413      	add	r3, r2
 800bda2:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	3301      	adds	r3, #1
 800bda8:	613b      	str	r3, [r7, #16]
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d3b6      	bcc.n	800bd20 <vTaskGetRunTimeStats+0x58>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800bdb2:	69f8      	ldr	r0, [r7, #28]
 800bdb4:	f000 fe3e 	bl	800ca34 <vPortFree>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800b46c:	bf00      	nop
 800b46e:	3720      	adds	r7, #32
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	20000bd4 	.word	0x20000bd4
 800b478:	20000bd8 	.word	0x20000bd8
 800b47c:	20001098 	.word	0x20001098

0800b480 <pvTaskIncrementMutexHeldCount>:
=======
 800bdb8:	bf00      	nop
 800bdba:	3720      	adds	r7, #32
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	200017b4 	.word	0x200017b4
 800bdc4:	51eb851f 	.word	0x51eb851f
 800bdc8:	0800d974 	.word	0x0800d974
 800bdcc:	0800d980 	.word	0x0800d980

0800bdd0 <pvTaskIncrementMutexHeldCount>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
<<<<<<< HEAD
 800b480:	b480      	push	{r7}
 800b482:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b484:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d004      	beq.n	800b496 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b492:	3201      	adds	r2, #1
 800b494:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b496:	4b03      	ldr	r3, [pc, #12]	; (800b4a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b498:	681b      	ldr	r3, [r3, #0]
	}
 800b49a:	4618      	mov	r0, r3
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bc80      	pop	{r7}
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	20000bd4 	.word	0x20000bd4

0800b4a8 <prvAddCurrentTaskToDelayedList>:
=======
 800bdd0:	b480      	push	{r7}
 800bdd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bdd4:	4b07      	ldr	r3, [pc, #28]	; (800bdf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d004      	beq.n	800bde6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bddc:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bde2:	3201      	adds	r2, #1
 800bde4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bde6:	4b03      	ldr	r3, [pc, #12]	; (800bdf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bde8:	681b      	ldr	r3, [r3, #0]
	}
 800bdea:	4618      	mov	r0, r3
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bc80      	pop	{r7}
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	200012f8 	.word	0x200012f8

0800bdf8 <prvAddCurrentTaskToDelayedList>:
>>>>>>> e9380fc... optimisation RAM=)
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4b2:	4b21      	ldr	r3, [pc, #132]	; (800b538 <prvAddCurrentTaskToDelayedList+0x90>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60fb      	str	r3, [r7, #12]
=======
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be02:	4b21      	ldr	r3, [pc, #132]	; (800be88 <prvAddCurrentTaskToDelayedList+0x90>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800b4b8:	4b20      	ldr	r3, [pc, #128]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fd fe72 	bl	80091a8 <uxListRemove>
=======
 800be08:	4b20      	ldr	r3, [pc, #128]	; (800be8c <prvAddCurrentTaskToDelayedList+0x94>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3304      	adds	r3, #4
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fd fb6a 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ca:	d10a      	bne.n	800b4e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d007      	beq.n	800b4e2 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be1a:	d10a      	bne.n	800be32 <prvAddCurrentTaskToDelayedList+0x3a>
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d007      	beq.n	800be32 <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 800b4d2:	4b1a      	ldr	r3, [pc, #104]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4819      	ldr	r0, [pc, #100]	; (800b540 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4dc:	f7fd fe09 	bl	80090f2 <vListInsertEnd>
=======
 800be22:	4b1a      	ldr	r3, [pc, #104]	; (800be8c <prvAddCurrentTaskToDelayedList+0x94>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3304      	adds	r3, #4
 800be28:	4619      	mov	r1, r3
 800be2a:	4819      	ldr	r0, [pc, #100]	; (800be90 <prvAddCurrentTaskToDelayedList+0x98>)
 800be2c:	f7fd fb01 	bl	8009432 <vListInsertEnd>
>>>>>>> e9380fc... optimisation RAM=)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 800b4e0:	e026      	b.n	800b530 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4ea:	4b14      	ldr	r3, [pc, #80]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d209      	bcs.n	800b50e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4fa:	4b12      	ldr	r3, [pc, #72]	; (800b544 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3304      	adds	r3, #4
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f7fd fe16 	bl	8009138 <vListInsert>
}
 800b50c:	e010      	b.n	800b530 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b50e:	4b0e      	ldr	r3, [pc, #56]	; (800b548 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	4b0a      	ldr	r3, [pc, #40]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3304      	adds	r3, #4
 800b518:	4619      	mov	r1, r3
 800b51a:	4610      	mov	r0, r2
 800b51c:	f7fd fe0c 	bl	8009138 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b520:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	429a      	cmp	r2, r3
 800b528:	d202      	bcs.n	800b530 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b52a:	4a08      	ldr	r2, [pc, #32]	; (800b54c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	6013      	str	r3, [r2, #0]
}
 800b530:	bf00      	nop
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20001094 	.word	0x20001094
 800b53c:	20000bd4 	.word	0x20000bd4
 800b540:	2000107c 	.word	0x2000107c
 800b544:	20001064 	.word	0x20001064
 800b548:	20001060 	.word	0x20001060
 800b54c:	200010b0 	.word	0x200010b0

0800b550 <xTimerCreateTimerTask>:
=======
 800be30:	e026      	b.n	800be80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4413      	add	r3, r2
 800be38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be3a:	4b14      	ldr	r3, [pc, #80]	; (800be8c <prvAddCurrentTaskToDelayedList+0x94>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be42:	68ba      	ldr	r2, [r7, #8]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	429a      	cmp	r2, r3
 800be48:	d209      	bcs.n	800be5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be4a:	4b12      	ldr	r3, [pc, #72]	; (800be94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <prvAddCurrentTaskToDelayedList+0x94>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3304      	adds	r3, #4
 800be54:	4619      	mov	r1, r3
 800be56:	4610      	mov	r0, r2
 800be58:	f7fd fb0e 	bl	8009478 <vListInsert>
}
 800be5c:	e010      	b.n	800be80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be5e:	4b0e      	ldr	r3, [pc, #56]	; (800be98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <prvAddCurrentTaskToDelayedList+0x94>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3304      	adds	r3, #4
 800be68:	4619      	mov	r1, r3
 800be6a:	4610      	mov	r0, r2
 800be6c:	f7fd fb04 	bl	8009478 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be70:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	429a      	cmp	r2, r3
 800be78:	d202      	bcs.n	800be80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be7a:	4a08      	ldr	r2, [pc, #32]	; (800be9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	6013      	str	r3, [r2, #0]
}
 800be80:	bf00      	nop
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	200017b8 	.word	0x200017b8
 800be8c:	200012f8 	.word	0x200012f8
 800be90:	200017a0 	.word	0x200017a0
 800be94:	20001788 	.word	0x20001788
 800be98:	20001784 	.word	0x20001784
 800be9c:	200017d4 	.word	0x200017d4

0800bea0 <xTimerCreateTimerTask>:
>>>>>>> e9380fc... optimisation RAM=)
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 800b550:	b580      	push	{r7, lr}
 800b552:	b08a      	sub	sp, #40	; 0x28
 800b554:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b556:	2300      	movs	r3, #0
 800b558:	617b      	str	r3, [r7, #20]
=======
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b08a      	sub	sp, #40	; 0x28
 800bea4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 800b55a:	f000 facb 	bl	800baf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b55e:	4b1c      	ldr	r3, [pc, #112]	; (800b5d0 <xTimerCreateTimerTask+0x80>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d021      	beq.n	800b5aa <xTimerCreateTimerTask+0x5a>
=======
 800beaa:	f000 facb 	bl	800c444 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800beae:	4b1c      	ldr	r3, [pc, #112]	; (800bf20 <xTimerCreateTimerTask+0x80>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d021      	beq.n	800befa <xTimerCreateTimerTask+0x5a>
>>>>>>> e9380fc... optimisation RAM=)
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800b566:	2300      	movs	r3, #0
 800b568:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b56e:	1d3a      	adds	r2, r7, #4
 800b570:	f107 0108 	add.w	r1, r7, #8
 800b574:	f107 030c 	add.w	r3, r7, #12
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fd fd75 	bl	8009068 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	9202      	str	r2, [sp, #8]
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	2318      	movs	r3, #24
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	2300      	movs	r3, #0
 800b58e:	460a      	mov	r2, r1
 800b590:	4910      	ldr	r1, [pc, #64]	; (800b5d4 <xTimerCreateTimerTask+0x84>)
 800b592:	4811      	ldr	r0, [pc, #68]	; (800b5d8 <xTimerCreateTimerTask+0x88>)
 800b594:	f7fe fef4 	bl	800a380 <xTaskCreateStatic>
 800b598:	4603      	mov	r3, r0
 800b59a:	4a10      	ldr	r2, [pc, #64]	; (800b5dc <xTimerCreateTimerTask+0x8c>)
 800b59c:	6013      	str	r3, [r2, #0]
=======
 800beb6:	2300      	movs	r3, #0
 800beb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bebe:	1d3a      	adds	r2, r7, #4
 800bec0:	f107 0108 	add.w	r1, r7, #8
 800bec4:	f107 030c 	add.w	r3, r7, #12
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fd fa6d 	bl	80093a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bece:	6879      	ldr	r1, [r7, #4]
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	9202      	str	r2, [sp, #8]
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	2318      	movs	r3, #24
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	2300      	movs	r3, #0
 800bede:	460a      	mov	r2, r1
 800bee0:	4910      	ldr	r1, [pc, #64]	; (800bf24 <xTimerCreateTimerTask+0x84>)
 800bee2:	4811      	ldr	r0, [pc, #68]	; (800bf28 <xTimerCreateTimerTask+0x88>)
 800bee4:	f7fe fbec 	bl	800a6c0 <xTaskCreateStatic>
 800bee8:	4603      	mov	r3, r0
 800beea:	4a10      	ldr	r2, [pc, #64]	; (800bf2c <xTimerCreateTimerTask+0x8c>)
 800beec:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 800b59e:	4b0f      	ldr	r3, [pc, #60]	; (800b5dc <xTimerCreateTimerTask+0x8c>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	617b      	str	r3, [r7, #20]
=======
 800beee:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <xTimerCreateTimerTask+0x8c>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bef6:	2301      	movs	r3, #1
 800bef8:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	613b      	str	r3, [r7, #16]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b5c6:	697b      	ldr	r3, [r7, #20]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	200010ec 	.word	0x200010ec
 800b5d4:	0800ce78 	.word	0x0800ce78
 800b5d8:	0800b6fd 	.word	0x0800b6fd
 800b5dc:	200010f0 	.word	0x200010f0

0800b5e0 <xTimerGenericCommand>:
=======
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10a      	bne.n	800bf16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	613b      	str	r3, [r7, #16]
}
 800bf12:	bf00      	nop
 800bf14:	e7fe      	b.n	800bf14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf16:	697b      	ldr	r3, [r7, #20]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	20001818 	.word	0x20001818
 800bf24:	0800d98c 	.word	0x0800d98c
 800bf28:	0800c04d 	.word	0x0800c04d
 800bf2c:	2000181c 	.word	0x2000181c

0800bf30 <xTimerGenericCommand>:
>>>>>>> e9380fc... optimisation RAM=)
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08a      	sub	sp, #40	; 0x28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10a      	bne.n	800b60e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	623b      	str	r3, [r7, #32]
}
 800b60a:	bf00      	nop
 800b60c:	e7fe      	b.n	800b60c <xTimerGenericCommand+0x2c>
=======
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08a      	sub	sp, #40	; 0x28
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
 800bf3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10a      	bne.n	800bf5e <xTimerGenericCommand+0x2e>
	__asm volatile
 800bf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	623b      	str	r3, [r7, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	e7fe      	b.n	800bf5c <xTimerGenericCommand+0x2c>
>>>>>>> e9380fc... optimisation RAM=)

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 800b60e:	4b1a      	ldr	r3, [pc, #104]	; (800b678 <xTimerGenericCommand+0x98>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d02a      	beq.n	800b66c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2b05      	cmp	r3, #5
 800b626:	dc18      	bgt.n	800b65a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b628:	f7ff fdaa 	bl	800b180 <xTaskGetSchedulerState>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d109      	bne.n	800b646 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b632:	4b11      	ldr	r3, [pc, #68]	; (800b678 <xTimerGenericCommand+0x98>)
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	f107 0110 	add.w	r1, r7, #16
 800b63a:	2300      	movs	r3, #0
 800b63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b63e:	f7fe f83f 	bl	80096c0 <xQueueGenericSend>
 800b642:	6278      	str	r0, [r7, #36]	; 0x24
 800b644:	e012      	b.n	800b66c <xTimerGenericCommand+0x8c>
=======
 800bf5e:	4b1a      	ldr	r3, [pc, #104]	; (800bfc8 <xTimerGenericCommand+0x98>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d02a      	beq.n	800bfbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	2b05      	cmp	r3, #5
 800bf76:	dc18      	bgt.n	800bfaa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf78:	f7ff fc68 	bl	800b84c <xTaskGetSchedulerState>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d109      	bne.n	800bf96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf82:	4b11      	ldr	r3, [pc, #68]	; (800bfc8 <xTimerGenericCommand+0x98>)
 800bf84:	6818      	ldr	r0, [r3, #0]
 800bf86:	f107 0110 	add.w	r1, r7, #16
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8e:	f7fd fd37 	bl	8009a00 <xQueueGenericSend>
 800bf92:	6278      	str	r0, [r7, #36]	; 0x24
 800bf94:	e012      	b.n	800bfbc <xTimerGenericCommand+0x8c>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 800b646:	4b0c      	ldr	r3, [pc, #48]	; (800b678 <xTimerGenericCommand+0x98>)
 800b648:	6818      	ldr	r0, [r3, #0]
 800b64a:	f107 0110 	add.w	r1, r7, #16
 800b64e:	2300      	movs	r3, #0
 800b650:	2200      	movs	r2, #0
 800b652:	f7fe f835 	bl	80096c0 <xQueueGenericSend>
 800b656:	6278      	str	r0, [r7, #36]	; 0x24
 800b658:	e008      	b.n	800b66c <xTimerGenericCommand+0x8c>
=======
 800bf96:	4b0c      	ldr	r3, [pc, #48]	; (800bfc8 <xTimerGenericCommand+0x98>)
 800bf98:	6818      	ldr	r0, [r3, #0]
 800bf9a:	f107 0110 	add.w	r1, r7, #16
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f7fd fd2d 	bl	8009a00 <xQueueGenericSend>
 800bfa6:	6278      	str	r0, [r7, #36]	; 0x24
 800bfa8:	e008      	b.n	800bfbc <xTimerGenericCommand+0x8c>
>>>>>>> e9380fc... optimisation RAM=)
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 800b65a:	4b07      	ldr	r3, [pc, #28]	; (800b678 <xTimerGenericCommand+0x98>)
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	f107 0110 	add.w	r1, r7, #16
 800b662:	2300      	movs	r3, #0
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	f7fe f929 	bl	80098bc <xQueueGenericSendFromISR>
 800b66a:	6278      	str	r0, [r7, #36]	; 0x24
=======
 800bfaa:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <xTimerGenericCommand+0x98>)
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	f107 0110 	add.w	r1, r7, #16
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	f7fd fe21 	bl	8009bfc <xQueueGenericSendFromISR>
 800bfba:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> e9380fc... optimisation RAM=)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3728      	adds	r7, #40	; 0x28
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	200010ec 	.word	0x200010ec

0800b67c <prvProcessExpiredTimer>:
=======
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3728      	adds	r7, #40	; 0x28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20001818 	.word	0x20001818

0800bfcc <prvProcessExpiredTimer>:
>>>>>>> e9380fc... optimisation RAM=)
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af02      	add	r7, sp, #8
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b686:	4b1c      	ldr	r3, [pc, #112]	; (800b6f8 <prvProcessExpiredTimer+0x7c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	617b      	str	r3, [r7, #20]
=======
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af02      	add	r7, sp, #8
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfd6:	4b1c      	ldr	r3, [pc, #112]	; (800c048 <prvProcessExpiredTimer+0x7c>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	617b      	str	r3, [r7, #20]
>>>>>>> e9380fc... optimisation RAM=)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	3304      	adds	r3, #4
 800b694:	4618      	mov	r0, r3
 800b696:	f7fd fd87 	bl	80091a8 <uxListRemove>
=======
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fd fa7f 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
<<<<<<< HEAD
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d122      	bne.n	800b6e8 <prvProcessExpiredTimer+0x6c>
=======
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d122      	bne.n	800c038 <prvProcessExpiredTimer+0x6c>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	699a      	ldr	r2, [r3, #24]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	18d1      	adds	r1, r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	6978      	ldr	r0, [r7, #20]
 800b6b0:	f000 f8c8 	bl	800b844 <prvInsertTimerInActiveList>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d016      	beq.n	800b6e8 <prvProcessExpiredTimer+0x6c>
=======
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	699a      	ldr	r2, [r3, #24]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	18d1      	adds	r1, r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	6978      	ldr	r0, [r7, #20]
 800c000:	f000 f8c8 	bl	800c194 <prvInsertTimerInActiveList>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d016      	beq.n	800c038 <prvProcessExpiredTimer+0x6c>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	6978      	ldr	r0, [r7, #20]
 800b6c6:	f7ff ff8b 	bl	800b5e0 <xTimerGenericCommand>
 800b6ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10a      	bne.n	800b6e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	60fb      	str	r3, [r7, #12]
}
 800b6e4:	bf00      	nop
 800b6e6:	e7fe      	b.n	800b6e6 <prvProcessExpiredTimer+0x6a>
=======
 800c00a:	2300      	movs	r3, #0
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	2300      	movs	r3, #0
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	2100      	movs	r1, #0
 800c014:	6978      	ldr	r0, [r7, #20]
 800c016:	f7ff ff8b 	bl	800bf30 <xTimerGenericCommand>
 800c01a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10a      	bne.n	800c038 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	60fb      	str	r3, [r7, #12]
}
 800c034:	bf00      	nop
 800c036:	e7fe      	b.n	800c036 <prvProcessExpiredTimer+0x6a>
>>>>>>> e9380fc... optimisation RAM=)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ec:	6978      	ldr	r0, [r7, #20]
 800b6ee:	4798      	blx	r3
}
 800b6f0:	bf00      	nop
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	200010e4 	.word	0x200010e4

0800b6fc <prvTimerTask>:
=======
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	6978      	ldr	r0, [r7, #20]
 800c03e:	4798      	blx	r3
}
 800c040:	bf00      	nop
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	20001810 	.word	0x20001810

0800c04c <prvTimerTask>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
<<<<<<< HEAD
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
=======
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 800b704:	f107 0308 	add.w	r3, r7, #8
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 f857 	bl	800b7bc <prvGetNextExpireTime>
 800b70e:	60f8      	str	r0, [r7, #12]
=======
 800c054:	f107 0308 	add.w	r3, r7, #8
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 f857 	bl	800c10c <prvGetNextExpireTime>
 800c05e:	60f8      	str	r0, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4619      	mov	r1, r3
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 f803 	bl	800b720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b71a:	f000 f8d5 	bl	800b8c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b71e:	e7f1      	b.n	800b704 <prvTimerTask+0x8>

0800b720 <prvProcessTimerOrBlockTask>:
=======
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	4619      	mov	r1, r3
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f000 f803 	bl	800c070 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c06a:	f000 f8d5 	bl	800c218 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c06e:	e7f1      	b.n	800c054 <prvTimerTask+0x8>

0800c070 <prvProcessTimerOrBlockTask>:
>>>>>>> e9380fc... optimisation RAM=)
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
=======
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
>>>>>>> e9380fc... optimisation RAM=)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 800b72a:	f7ff f98b 	bl	800aa44 <vTaskSuspendAll>
=======
 800c07a:	f7fe fed9 	bl	800ae30 <vTaskSuspendAll>
>>>>>>> e9380fc... optimisation RAM=)
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 800b72e:	f107 0308 	add.w	r3, r7, #8
 800b732:	4618      	mov	r0, r3
 800b734:	f000 f866 	bl	800b804 <prvSampleTimeNow>
 800b738:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d130      	bne.n	800b7a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10a      	bne.n	800b75c <prvProcessTimerOrBlockTask+0x3c>
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d806      	bhi.n	800b75c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b74e:	f7ff f987 	bl	800aa60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b752:	68f9      	ldr	r1, [r7, #12]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff ff91 	bl	800b67c <prvProcessExpiredTimer>
=======
 800c07e:	f107 0308 	add.w	r3, r7, #8
 800c082:	4618      	mov	r0, r3
 800c084:	f000 f866 	bl	800c154 <prvSampleTimeNow>
 800c088:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d130      	bne.n	800c0f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10a      	bne.n	800c0ac <prvProcessTimerOrBlockTask+0x3c>
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d806      	bhi.n	800c0ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c09e:	f7fe fed5 	bl	800ae4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0a2:	68f9      	ldr	r1, [r7, #12]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7ff ff91 	bl	800bfcc <prvProcessExpiredTimer>
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 800b75a:	e024      	b.n	800b7a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d008      	beq.n	800b774 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b762:	4b13      	ldr	r3, [pc, #76]	; (800b7b0 <prvProcessTimerOrBlockTask+0x90>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	bf0c      	ite	eq
 800b76c:	2301      	moveq	r3, #1
 800b76e:	2300      	movne	r3, #0
 800b770:	b2db      	uxtb	r3, r3
 800b772:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b774:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <prvProcessTimerOrBlockTask+0x94>)
 800b776:	6818      	ldr	r0, [r3, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	4619      	mov	r1, r3
 800b782:	f7fe fdc9 	bl	800a318 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b786:	f7ff f96b 	bl	800aa60 <xTaskResumeAll>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10a      	bne.n	800b7a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b790:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <prvProcessTimerOrBlockTask+0x98>)
 800b792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	f3bf 8f6f 	isb	sy
}
 800b7a0:	e001      	b.n	800b7a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7a2:	f7ff f95d 	bl	800aa60 <xTaskResumeAll>
}
 800b7a6:	bf00      	nop
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	200010e8 	.word	0x200010e8
 800b7b4:	200010ec 	.word	0x200010ec
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <prvGetNextExpireTime>:
=======
 800c0aa:	e024      	b.n	800c0f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d008      	beq.n	800c0c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0b2:	4b13      	ldr	r3, [pc, #76]	; (800c100 <prvProcessTimerOrBlockTask+0x90>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	bf0c      	ite	eq
 800c0bc:	2301      	moveq	r3, #1
 800c0be:	2300      	movne	r3, #0
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0c4:	4b0f      	ldr	r3, [pc, #60]	; (800c104 <prvProcessTimerOrBlockTask+0x94>)
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7fe fac1 	bl	800a658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c0d6:	f7fe feb9 	bl	800ae4c <xTaskResumeAll>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c0e0:	4b09      	ldr	r3, [pc, #36]	; (800c108 <prvProcessTimerOrBlockTask+0x98>)
 800c0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0e6:	601a      	str	r2, [r3, #0]
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	f3bf 8f6f 	isb	sy
}
 800c0f0:	e001      	b.n	800c0f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0f2:	f7fe feab 	bl	800ae4c <xTaskResumeAll>
}
 800c0f6:	bf00      	nop
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20001814 	.word	0x20001814
 800c104:	20001818 	.word	0x20001818
 800c108:	e000ed04 	.word	0xe000ed04

0800c10c <prvGetNextExpireTime>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
=======
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 800b7c4:	4b0e      	ldr	r3, [pc, #56]	; (800b800 <prvGetNextExpireTime+0x44>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bf0c      	ite	eq
 800b7ce:	2301      	moveq	r3, #1
 800b7d0:	2300      	movne	r3, #0
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d105      	bne.n	800b7ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7e2:	4b07      	ldr	r3, [pc, #28]	; (800b800 <prvGetNextExpireTime+0x44>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	e001      	b.n	800b7f2 <prvGetNextExpireTime+0x36>
=======
 800c114:	4b0e      	ldr	r3, [pc, #56]	; (800c150 <prvGetNextExpireTime+0x44>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	bf0c      	ite	eq
 800c11e:	2301      	moveq	r3, #1
 800c120:	2300      	movne	r3, #0
 800c122:	b2db      	uxtb	r3, r3
 800c124:	461a      	mov	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d105      	bne.n	800c13e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c132:	4b07      	ldr	r3, [pc, #28]	; (800c150 <prvGetNextExpireTime+0x44>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	e001      	b.n	800c142 <prvGetNextExpireTime+0x36>
>>>>>>> e9380fc... optimisation RAM=)
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bc80      	pop	{r7}
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	200010e4 	.word	0x200010e4

0800b804 <prvSampleTimeNow>:
=======
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c142:	68fb      	ldr	r3, [r7, #12]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	bc80      	pop	{r7}
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	20001810 	.word	0x20001810

0800c154 <prvSampleTimeNow>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
=======
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 800b80c:	f7ff f9c6 	bl	800ab9c <xTaskGetTickCount>
 800b810:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b812:	4b0b      	ldr	r3, [pc, #44]	; (800b840 <prvSampleTimeNow+0x3c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d205      	bcs.n	800b828 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b81c:	f000 f908 	bl	800ba30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	e002      	b.n	800b82e <prvSampleTimeNow+0x2a>
=======
 800c15c:	f7fe ff14 	bl	800af88 <xTaskGetTickCount>
 800c160:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c162:	4b0b      	ldr	r3, [pc, #44]	; (800c190 <prvSampleTimeNow+0x3c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d205      	bcs.n	800c178 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c16c:	f000 f908 	bl	800c380 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	601a      	str	r2, [r3, #0]
 800c176:	e002      	b.n	800c17e <prvSampleTimeNow+0x2a>
>>>>>>> e9380fc... optimisation RAM=)
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b82e:	4a04      	ldr	r2, [pc, #16]	; (800b840 <prvSampleTimeNow+0x3c>)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b834:	68fb      	ldr	r3, [r7, #12]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	200010f4 	.word	0x200010f4

0800b844 <prvInsertTimerInActiveList>:
=======
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c17e:	4a04      	ldr	r2, [pc, #16]	; (800c190 <prvSampleTimeNow+0x3c>)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c184:	68fb      	ldr	r3, [r7, #12]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	20001820 	.word	0x20001820

0800c194 <prvInsertTimerInActiveList>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b852:	2300      	movs	r3, #0
 800b854:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	429a      	cmp	r2, r3
 800b868:	d812      	bhi.n	800b890 <prvInsertTimerInActiveList+0x4c>
=======
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
 800c1a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d812      	bhi.n	800c1e0 <prvInsertTimerInActiveList+0x4c>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	429a      	cmp	r2, r3
 800b876:	d302      	bcc.n	800b87e <prvInsertTimerInActiveList+0x3a>
=======
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d302      	bcc.n	800c1ce <prvInsertTimerInActiveList+0x3a>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e01b      	b.n	800b8b6 <prvInsertTimerInActiveList+0x72>
=======
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	e01b      	b.n	800c206 <prvInsertTimerInActiveList+0x72>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800b87e:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <prvInsertTimerInActiveList+0x7c>)
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3304      	adds	r3, #4
 800b886:	4619      	mov	r1, r3
 800b888:	4610      	mov	r0, r2
 800b88a:	f7fd fc55 	bl	8009138 <vListInsert>
 800b88e:	e012      	b.n	800b8b6 <prvInsertTimerInActiveList+0x72>
=======
 800c1ce:	4b10      	ldr	r3, [pc, #64]	; (800c210 <prvInsertTimerInActiveList+0x7c>)
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	4610      	mov	r0, r2
 800c1da:	f7fd f94d 	bl	8009478 <vListInsert>
 800c1de:	e012      	b.n	800c206 <prvInsertTimerInActiveList+0x72>
>>>>>>> e9380fc... optimisation RAM=)
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	d206      	bcs.n	800b8a6 <prvInsertTimerInActiveList+0x62>
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d302      	bcc.n	800b8a6 <prvInsertTimerInActiveList+0x62>
=======
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d206      	bcs.n	800c1f6 <prvInsertTimerInActiveList+0x62>
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d302      	bcc.n	800c1f6 <prvInsertTimerInActiveList+0x62>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]
 800b8a4:	e007      	b.n	800b8b6 <prvInsertTimerInActiveList+0x72>
=======
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	617b      	str	r3, [r7, #20]
 800c1f4:	e007      	b.n	800c206 <prvInsertTimerInActiveList+0x72>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800b8a6:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <prvInsertTimerInActiveList+0x80>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	f7fd fc41 	bl	8009138 <vListInsert>
=======
 800c1f6:	4b07      	ldr	r3, [pc, #28]	; (800c214 <prvInsertTimerInActiveList+0x80>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	4619      	mov	r1, r3
 800c200:	4610      	mov	r0, r2
 800c202:	f7fd f939 	bl	8009478 <vListInsert>
>>>>>>> e9380fc... optimisation RAM=)
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 800b8b6:	697b      	ldr	r3, [r7, #20]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	200010e8 	.word	0x200010e8
 800b8c4:	200010e4 	.word	0x200010e4

0800b8c8 <prvProcessReceivedCommands>:
=======
 800c206:	697b      	ldr	r3, [r7, #20]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3718      	adds	r7, #24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	20001814 	.word	0x20001814
 800c214:	20001810 	.word	0x20001810

0800c218 <prvProcessReceivedCommands>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08e      	sub	sp, #56	; 0x38
 800b8cc:	af02      	add	r7, sp, #8
=======
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08e      	sub	sp, #56	; 0x38
 800c21c:	af02      	add	r7, sp, #8
>>>>>>> e9380fc... optimisation RAM=)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 800b8ce:	e09d      	b.n	800ba0c <prvProcessReceivedCommands+0x144>
=======
 800c21e:	e09d      	b.n	800c35c <prvProcessReceivedCommands+0x144>
>>>>>>> e9380fc... optimisation RAM=)
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	da18      	bge.n	800b908 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8d6:	1d3b      	adds	r3, r7, #4
 800b8d8:	3304      	adds	r3, #4
 800b8da:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	da18      	bge.n	800c258 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c226:	1d3b      	adds	r3, r7, #4
 800c228:	3304      	adds	r3, #4
 800c22a:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> e9380fc... optimisation RAM=)

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	61fb      	str	r3, [r7, #28]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8fe:	6850      	ldr	r0, [r2, #4]
 800b900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b902:	6892      	ldr	r2, [r2, #8]
 800b904:	4611      	mov	r1, r2
 800b906:	4798      	blx	r3
=======
 800c22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10a      	bne.n	800c248 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	61fb      	str	r3, [r7, #28]
}
 800c244:	bf00      	nop
 800c246:	e7fe      	b.n	800c246 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c24e:	6850      	ldr	r0, [r2, #4]
 800c250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c252:	6892      	ldr	r2, [r2, #8]
 800c254:	4611      	mov	r1, r2
 800c256:	4798      	blx	r3
>>>>>>> e9380fc... optimisation RAM=)
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	db7d      	blt.n	800ba0a <prvProcessReceivedCommands+0x142>
=======
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	db7d      	blt.n	800c35a <prvProcessReceivedCommands+0x142>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d004      	beq.n	800b924 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	3304      	adds	r3, #4
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fd fc42 	bl	80091a8 <uxListRemove>
=======
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d004      	beq.n	800c274 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26c:	3304      	adds	r3, #4
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fd f93a 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 800b924:	463b      	mov	r3, r7
 800b926:	4618      	mov	r0, r3
 800b928:	f7ff ff6c 	bl	800b804 <prvSampleTimeNow>
 800b92c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b09      	cmp	r3, #9
 800b932:	d86b      	bhi.n	800ba0c <prvProcessReceivedCommands+0x144>
 800b934:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <prvProcessReceivedCommands+0x74>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b965 	.word	0x0800b965
 800b940:	0800b965 	.word	0x0800b965
 800b944:	0800b965 	.word	0x0800b965
 800b948:	0800ba0d 	.word	0x0800ba0d
 800b94c:	0800b9c1 	.word	0x0800b9c1
 800b950:	0800b9f9 	.word	0x0800b9f9
 800b954:	0800b965 	.word	0x0800b965
 800b958:	0800b965 	.word	0x0800b965
 800b95c:	0800ba0d 	.word	0x0800ba0d
 800b960:	0800b9c1 	.word	0x0800b9c1
=======
 800c274:	463b      	mov	r3, r7
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff ff6c 	bl	800c154 <prvSampleTimeNow>
 800c27c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b09      	cmp	r3, #9
 800c282:	d86b      	bhi.n	800c35c <prvProcessReceivedCommands+0x144>
 800c284:	a201      	add	r2, pc, #4	; (adr r2, 800c28c <prvProcessReceivedCommands+0x74>)
 800c286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c28a:	bf00      	nop
 800c28c:	0800c2b5 	.word	0x0800c2b5
 800c290:	0800c2b5 	.word	0x0800c2b5
 800c294:	0800c2b5 	.word	0x0800c2b5
 800c298:	0800c35d 	.word	0x0800c35d
 800c29c:	0800c311 	.word	0x0800c311
 800c2a0:	0800c349 	.word	0x0800c349
 800c2a4:	0800c2b5 	.word	0x0800c2b5
 800c2a8:	0800c2b5 	.word	0x0800c2b5
 800c2ac:	0800c35d 	.word	0x0800c35d
 800c2b0:	0800c311 	.word	0x0800c311
>>>>>>> e9380fc... optimisation RAM=)
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
<<<<<<< HEAD
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	18d1      	adds	r1, r2, r3
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b972:	f7ff ff67 	bl	800b844 <prvInsertTimerInActiveList>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d047      	beq.n	800ba0c <prvProcessReceivedCommands+0x144>
=======
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	18d1      	adds	r1, r2, r3
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c2:	f7ff ff67 	bl	800c194 <prvInsertTimerInActiveList>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d047      	beq.n	800c35c <prvProcessReceivedCommands+0x144>
>>>>>>> e9380fc... optimisation RAM=)
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800b97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b982:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d13f      	bne.n	800ba0c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	441a      	add	r2, r3
 800b994:	2300      	movs	r3, #0
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	2300      	movs	r3, #0
 800b99a:	2100      	movs	r1, #0
 800b99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b99e:	f7ff fe1f 	bl	800b5e0 <xTimerGenericCommand>
 800b9a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d130      	bne.n	800ba0c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	61bb      	str	r3, [r7, #24]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <prvProcessReceivedCommands+0xf6>
=======
 800c2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	69db      	ldr	r3, [r3, #28]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d13f      	bne.n	800c35c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	699b      	ldr	r3, [r3, #24]
 800c2e2:	441a      	add	r2, r3
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ee:	f7ff fe1f 	bl	800bf30 <xTimerGenericCommand>
 800c2f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2f4:	6a3b      	ldr	r3, [r7, #32]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d130      	bne.n	800c35c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	61bb      	str	r3, [r7, #24]
}
 800c30c:	bf00      	nop
 800c30e:	e7fe      	b.n	800c30e <prvProcessReceivedCommands+0xf6>
>>>>>>> e9380fc... optimisation RAM=)
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
<<<<<<< HEAD
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	617b      	str	r3, [r7, #20]
}
 800b9e0:	bf00      	nop
 800b9e2:	e7fe      	b.n	800b9e2 <prvProcessReceivedCommands+0x11a>
=======
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	699b      	ldr	r3, [r3, #24]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10a      	bne.n	800c334 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	617b      	str	r3, [r7, #20]
}
 800c330:	bf00      	nop
 800c332:	e7fe      	b.n	800c332 <prvProcessReceivedCommands+0x11a>
>>>>>>> e9380fc... optimisation RAM=)
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	699a      	ldr	r2, [r3, #24]
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	18d1      	adds	r1, r2, r3
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9f2:	f7ff ff27 	bl	800b844 <prvInsertTimerInActiveList>
					break;
 800b9f6:	e009      	b.n	800ba0c <prvProcessReceivedCommands+0x144>
=======
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	699a      	ldr	r2, [r3, #24]
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	18d1      	adds	r1, r2, r3
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c342:	f7ff ff27 	bl	800c194 <prvInsertTimerInActiveList>
					break;
 800c346:	e009      	b.n	800c35c <prvProcessReceivedCommands+0x144>
>>>>>>> e9380fc... optimisation RAM=)
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
<<<<<<< HEAD
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d104      	bne.n	800ba0c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800ba02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba04:	f000 fb6e 	bl	800c0e4 <vPortFree>
=======
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d104      	bne.n	800c35c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c354:	f000 fb6e 	bl	800ca34 <vPortFree>
>>>>>>> e9380fc... optimisation RAM=)
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 800ba08:	e000      	b.n	800ba0c <prvProcessReceivedCommands+0x144>
=======
 800c358:	e000      	b.n	800c35c <prvProcessReceivedCommands+0x144>
>>>>>>> e9380fc... optimisation RAM=)

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
<<<<<<< HEAD
 800ba0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba0c:	4b07      	ldr	r3, [pc, #28]	; (800ba2c <prvProcessReceivedCommands+0x164>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	1d39      	adds	r1, r7, #4
 800ba12:	2200      	movs	r2, #0
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe f877 	bl	8009b08 <xQueueReceive>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f47f af57 	bne.w	800b8d0 <prvProcessReceivedCommands+0x8>
	}
}
 800ba22:	bf00      	nop
 800ba24:	bf00      	nop
 800ba26:	3730      	adds	r7, #48	; 0x30
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	200010ec 	.word	0x200010ec

0800ba30 <prvSwitchTimerLists>:
=======
 800c35a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c35c:	4b07      	ldr	r3, [pc, #28]	; (800c37c <prvProcessReceivedCommands+0x164>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	1d39      	adds	r1, r7, #4
 800c362:	2200      	movs	r2, #0
 800c364:	4618      	mov	r0, r3
 800c366:	f7fd fd6f 	bl	8009e48 <xQueueReceive>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f47f af57 	bne.w	800c220 <prvProcessReceivedCommands+0x8>
	}
}
 800c372:	bf00      	nop
 800c374:	bf00      	nop
 800c376:	3730      	adds	r7, #48	; 0x30
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20001818 	.word	0x20001818

0800c380 <prvSwitchTimerLists>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af02      	add	r7, sp, #8
=======
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af02      	add	r7, sp, #8
>>>>>>> e9380fc... optimisation RAM=)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 800ba36:	e045      	b.n	800bac4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba38:	4b2c      	ldr	r3, [pc, #176]	; (800baec <prvSwitchTimerLists+0xbc>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba42:	4b2a      	ldr	r3, [pc, #168]	; (800baec <prvSwitchTimerLists+0xbc>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fd fba9 	bl	80091a8 <uxListRemove>
=======
 800c386:	e045      	b.n	800c414 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c388:	4b2c      	ldr	r3, [pc, #176]	; (800c43c <prvSwitchTimerLists+0xbc>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c392:	4b2a      	ldr	r3, [pc, #168]	; (800c43c <prvSwitchTimerLists+0xbc>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fd f8a1 	bl	80094e8 <uxListRemove>
>>>>>>> e9380fc... optimisation RAM=)
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	69db      	ldr	r3, [r3, #28]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d12e      	bne.n	800bac4 <prvSwitchTimerLists+0x94>
=======
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	69db      	ldr	r3, [r3, #28]
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d12e      	bne.n	800c414 <prvSwitchTimerLists+0x94>
>>>>>>> e9380fc... optimisation RAM=)
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d90e      	bls.n	800ba96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba84:	4b19      	ldr	r3, [pc, #100]	; (800baec <prvSwitchTimerLists+0xbc>)
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4610      	mov	r0, r2
 800ba90:	f7fd fb52 	bl	8009138 <vListInsert>
 800ba94:	e016      	b.n	800bac4 <prvSwitchTimerLists+0x94>
=======
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	4413      	add	r3, r2
 800c3be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d90e      	bls.n	800c3e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3d4:	4b19      	ldr	r3, [pc, #100]	; (800c43c <prvSwitchTimerLists+0xbc>)
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	3304      	adds	r3, #4
 800c3dc:	4619      	mov	r1, r3
 800c3de:	4610      	mov	r0, r2
 800c3e0:	f7fd f84a 	bl	8009478 <vListInsert>
 800c3e4:	e016      	b.n	800c414 <prvSwitchTimerLists+0x94>
>>>>>>> e9380fc... optimisation RAM=)
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800ba96:	2300      	movs	r3, #0
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	2100      	movs	r1, #0
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f7ff fd9d 	bl	800b5e0 <xTimerGenericCommand>
 800baa6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10a      	bne.n	800bac4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	603b      	str	r3, [r7, #0]
}
 800bac0:	bf00      	nop
 800bac2:	e7fe      	b.n	800bac2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bac4:	4b09      	ldr	r3, [pc, #36]	; (800baec <prvSwitchTimerLists+0xbc>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1b4      	bne.n	800ba38 <prvSwitchTimerLists+0x8>
=======
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f7ff fd9d 	bl	800bf30 <xTimerGenericCommand>
 800c3f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10a      	bne.n	800c414 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	603b      	str	r3, [r7, #0]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c414:	4b09      	ldr	r3, [pc, #36]	; (800c43c <prvSwitchTimerLists+0xbc>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1b4      	bne.n	800c388 <prvSwitchTimerLists+0x8>
>>>>>>> e9380fc... optimisation RAM=)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 800bace:	4b07      	ldr	r3, [pc, #28]	; (800baec <prvSwitchTimerLists+0xbc>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bad4:	4b06      	ldr	r3, [pc, #24]	; (800baf0 <prvSwitchTimerLists+0xc0>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a04      	ldr	r2, [pc, #16]	; (800baec <prvSwitchTimerLists+0xbc>)
 800bada:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800badc:	4a04      	ldr	r2, [pc, #16]	; (800baf0 <prvSwitchTimerLists+0xc0>)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	6013      	str	r3, [r2, #0]
}
 800bae2:	bf00      	nop
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200010e4 	.word	0x200010e4
 800baf0:	200010e8 	.word	0x200010e8

0800baf4 <prvCheckForValidListAndQueue>:
=======
 800c41e:	4b07      	ldr	r3, [pc, #28]	; (800c43c <prvSwitchTimerLists+0xbc>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c424:	4b06      	ldr	r3, [pc, #24]	; (800c440 <prvSwitchTimerLists+0xc0>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a04      	ldr	r2, [pc, #16]	; (800c43c <prvSwitchTimerLists+0xbc>)
 800c42a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c42c:	4a04      	ldr	r2, [pc, #16]	; (800c440 <prvSwitchTimerLists+0xc0>)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	6013      	str	r3, [r2, #0]
}
 800c432:	bf00      	nop
 800c434:	3718      	adds	r7, #24
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20001810 	.word	0x20001810
 800c440:	20001814 	.word	0x20001814

0800c444 <prvCheckForValidListAndQueue>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af02      	add	r7, sp, #8
=======
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af02      	add	r7, sp, #8
>>>>>>> e9380fc... optimisation RAM=)
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800bafa:	f000 f92f 	bl	800bd5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bafe:	4b15      	ldr	r3, [pc, #84]	; (800bb54 <prvCheckForValidListAndQueue+0x60>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d120      	bne.n	800bb48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb06:	4814      	ldr	r0, [pc, #80]	; (800bb58 <prvCheckForValidListAndQueue+0x64>)
 800bb08:	f7fd fac8 	bl	800909c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb0c:	4813      	ldr	r0, [pc, #76]	; (800bb5c <prvCheckForValidListAndQueue+0x68>)
 800bb0e:	f7fd fac5 	bl	800909c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb12:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <prvCheckForValidListAndQueue+0x6c>)
 800bb14:	4a10      	ldr	r2, [pc, #64]	; (800bb58 <prvCheckForValidListAndQueue+0x64>)
 800bb16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb18:	4b12      	ldr	r3, [pc, #72]	; (800bb64 <prvCheckForValidListAndQueue+0x70>)
 800bb1a:	4a10      	ldr	r2, [pc, #64]	; (800bb5c <prvCheckForValidListAndQueue+0x68>)
 800bb1c:	601a      	str	r2, [r3, #0]
=======
 800c44a:	f000 f92f 	bl	800c6ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c44e:	4b15      	ldr	r3, [pc, #84]	; (800c4a4 <prvCheckForValidListAndQueue+0x60>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d120      	bne.n	800c498 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c456:	4814      	ldr	r0, [pc, #80]	; (800c4a8 <prvCheckForValidListAndQueue+0x64>)
 800c458:	f7fc ffc0 	bl	80093dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c45c:	4813      	ldr	r0, [pc, #76]	; (800c4ac <prvCheckForValidListAndQueue+0x68>)
 800c45e:	f7fc ffbd 	bl	80093dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c462:	4b13      	ldr	r3, [pc, #76]	; (800c4b0 <prvCheckForValidListAndQueue+0x6c>)
 800c464:	4a10      	ldr	r2, [pc, #64]	; (800c4a8 <prvCheckForValidListAndQueue+0x64>)
 800c466:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c468:	4b12      	ldr	r3, [pc, #72]	; (800c4b4 <prvCheckForValidListAndQueue+0x70>)
 800c46a:	4a10      	ldr	r2, [pc, #64]	; (800c4ac <prvCheckForValidListAndQueue+0x68>)
 800c46c:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	4b11      	ldr	r3, [pc, #68]	; (800bb68 <prvCheckForValidListAndQueue+0x74>)
 800bb24:	4a11      	ldr	r2, [pc, #68]	; (800bb6c <prvCheckForValidListAndQueue+0x78>)
 800bb26:	2110      	movs	r1, #16
 800bb28:	200a      	movs	r0, #10
 800bb2a:	f7fd fbcf 	bl	80092cc <xQueueGenericCreateStatic>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4a08      	ldr	r2, [pc, #32]	; (800bb54 <prvCheckForValidListAndQueue+0x60>)
 800bb32:	6013      	str	r3, [r2, #0]
=======
 800c46e:	2300      	movs	r3, #0
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	4b11      	ldr	r3, [pc, #68]	; (800c4b8 <prvCheckForValidListAndQueue+0x74>)
 800c474:	4a11      	ldr	r2, [pc, #68]	; (800c4bc <prvCheckForValidListAndQueue+0x78>)
 800c476:	2110      	movs	r1, #16
 800c478:	200a      	movs	r0, #10
 800c47a:	f7fd f8c7 	bl	800960c <xQueueGenericCreateStatic>
 800c47e:	4603      	mov	r3, r0
 800c480:	4a08      	ldr	r2, [pc, #32]	; (800c4a4 <prvCheckForValidListAndQueue+0x60>)
 800c482:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 800bb34:	4b07      	ldr	r3, [pc, #28]	; (800bb54 <prvCheckForValidListAndQueue+0x60>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d005      	beq.n	800bb48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb3c:	4b05      	ldr	r3, [pc, #20]	; (800bb54 <prvCheckForValidListAndQueue+0x60>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	490b      	ldr	r1, [pc, #44]	; (800bb70 <prvCheckForValidListAndQueue+0x7c>)
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fe fb96 	bl	800a274 <vQueueAddToRegistry>
=======
 800c484:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <prvCheckForValidListAndQueue+0x60>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d005      	beq.n	800c498 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c48c:	4b05      	ldr	r3, [pc, #20]	; (800c4a4 <prvCheckForValidListAndQueue+0x60>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	490b      	ldr	r1, [pc, #44]	; (800c4c0 <prvCheckForValidListAndQueue+0x7c>)
 800c492:	4618      	mov	r0, r3
 800c494:	f7fe f88e 	bl	800a5b4 <vQueueAddToRegistry>
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800bb48:	f000 f938 	bl	800bdbc <vPortExitCritical>
}
 800bb4c:	bf00      	nop
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	200010ec 	.word	0x200010ec
 800bb58:	200010bc 	.word	0x200010bc
 800bb5c:	200010d0 	.word	0x200010d0
 800bb60:	200010e4 	.word	0x200010e4
 800bb64:	200010e8 	.word	0x200010e8
 800bb68:	20001198 	.word	0x20001198
 800bb6c:	200010f8 	.word	0x200010f8
 800bb70:	0800ce80 	.word	0x0800ce80

0800bb74 <pxPortInitialiseStack>:
=======
 800c498:	f000 f938 	bl	800c70c <vPortExitCritical>
}
 800c49c:	bf00      	nop
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20001818 	.word	0x20001818
 800c4a8:	200017e8 	.word	0x200017e8
 800c4ac:	200017fc 	.word	0x200017fc
 800c4b0:	20001810 	.word	0x20001810
 800c4b4:	20001814 	.word	0x20001814
 800c4b8:	200018c4 	.word	0x200018c4
 800c4bc:	20001824 	.word	0x20001824
 800c4c0:	0800d994 	.word	0x0800d994

0800c4c4 <pxPortInitialiseStack>:
>>>>>>> e9380fc... optimisation RAM=)

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	3b04      	subs	r3, #4
 800bb84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3b04      	subs	r3, #4
 800bb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	f023 0201 	bic.w	r2, r3, #1
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3b04      	subs	r3, #4
 800bba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bba4:	4a08      	ldr	r2, [pc, #32]	; (800bbc8 <pxPortInitialiseStack+0x54>)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3b14      	subs	r3, #20
 800bbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3b20      	subs	r3, #32
 800bbba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3714      	adds	r7, #20
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bc80      	pop	{r7}
 800bbc6:	4770      	bx	lr
 800bbc8:	0800bbcd 	.word	0x0800bbcd

0800bbcc <prvTaskExitError>:
=======
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3b04      	subs	r3, #4
 800c4d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3b04      	subs	r3, #4
 800c4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	f023 0201 	bic.w	r2, r3, #1
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3b04      	subs	r3, #4
 800c4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4f4:	4a08      	ldr	r2, [pc, #32]	; (800c518 <pxPortInitialiseStack+0x54>)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	3b14      	subs	r3, #20
 800c4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	3b20      	subs	r3, #32
 800c50a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c50c:	68fb      	ldr	r3, [r7, #12]
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	bc80      	pop	{r7}
 800c516:	4770      	bx	lr
 800c518:	0800c51d 	.word	0x0800c51d

0800c51c <prvTaskExitError>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	607b      	str	r3, [r7, #4]
=======
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c522:	2300      	movs	r3, #0
 800c524:	607b      	str	r3, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 800bbd6:	4b12      	ldr	r3, [pc, #72]	; (800bc20 <prvTaskExitError+0x54>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbde:	d00a      	beq.n	800bbf6 <prvTaskExitError+0x2a>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	60fb      	str	r3, [r7, #12]
}
 800bbf2:	bf00      	nop
 800bbf4:	e7fe      	b.n	800bbf4 <prvTaskExitError+0x28>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	60bb      	str	r3, [r7, #8]
}
 800bc08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc0a:	bf00      	nop
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d0fc      	beq.n	800bc0c <prvTaskExitError+0x40>
=======
 800c526:	4b12      	ldr	r3, [pc, #72]	; (800c570 <prvTaskExitError+0x54>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c52e:	d00a      	beq.n	800c546 <prvTaskExitError+0x2a>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	60fb      	str	r3, [r7, #12]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <prvTaskExitError+0x28>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	60bb      	str	r3, [r7, #8]
}
 800c558:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c55a:	bf00      	nop
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d0fc      	beq.n	800c55c <prvTaskExitError+0x40>
>>>>>>> e9380fc... optimisation RAM=)
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bc80      	pop	{r7}
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	2000001c 	.word	0x2000001c
	...

0800bc30 <SVC_Handler>:
=======
 800c562:	bf00      	nop
 800c564:	bf00      	nop
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	bc80      	pop	{r7}
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	2000001c 	.word	0x2000001c
	...

0800c580 <SVC_Handler>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 800bc30:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <pxCurrentTCBConst2>)
 800bc32:	6819      	ldr	r1, [r3, #0]
 800bc34:	6808      	ldr	r0, [r1, #0]
 800bc36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bc3a:	f380 8809 	msr	PSP, r0
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f04f 0000 	mov.w	r0, #0
 800bc46:	f380 8811 	msr	BASEPRI, r0
 800bc4a:	f04e 0e0d 	orr.w	lr, lr, #13
 800bc4e:	4770      	bx	lr

0800bc50 <pxCurrentTCBConst2>:
 800bc50:	20000bd4 	.word	0x20000bd4
=======
 800c580:	4b07      	ldr	r3, [pc, #28]	; (800c5a0 <pxCurrentTCBConst2>)
 800c582:	6819      	ldr	r1, [r3, #0]
 800c584:	6808      	ldr	r0, [r1, #0]
 800c586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c58a:	f380 8809 	msr	PSP, r0
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f04f 0000 	mov.w	r0, #0
 800c596:	f380 8811 	msr	BASEPRI, r0
 800c59a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c59e:	4770      	bx	lr

0800c5a0 <pxCurrentTCBConst2>:
 800c5a0:	200012f8 	.word	0x200012f8
>>>>>>> e9380fc... optimisation RAM=)
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop

0800bc58 <prvPortStartFirstTask>:
=======
 800c5a4:	bf00      	nop
 800c5a6:	bf00      	nop

0800c5a8 <prvPortStartFirstTask>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
<<<<<<< HEAD
 800bc58:	4806      	ldr	r0, [pc, #24]	; (800bc74 <prvPortStartFirstTask+0x1c>)
 800bc5a:	6800      	ldr	r0, [r0, #0]
 800bc5c:	6800      	ldr	r0, [r0, #0]
 800bc5e:	f380 8808 	msr	MSP, r0
 800bc62:	b662      	cpsie	i
 800bc64:	b661      	cpsie	f
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	df00      	svc	0
 800bc70:	bf00      	nop
=======
 800c5a8:	4806      	ldr	r0, [pc, #24]	; (800c5c4 <prvPortStartFirstTask+0x1c>)
 800c5aa:	6800      	ldr	r0, [r0, #0]
 800c5ac:	6800      	ldr	r0, [r0, #0]
 800c5ae:	f380 8808 	msr	MSP, r0
 800c5b2:	b662      	cpsie	i
 800c5b4:	b661      	cpsie	f
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	df00      	svc	0
 800c5c0:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800bc72:	bf00      	nop
 800bc74:	e000ed08 	.word	0xe000ed08

0800bc78 <xPortStartScheduler>:
=======
 800c5c2:	bf00      	nop
 800c5c4:	e000ed08 	.word	0xe000ed08

0800c5c8 <xPortStartScheduler>:
>>>>>>> e9380fc... optimisation RAM=)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
=======
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 800bc7e:	4b32      	ldr	r3, [pc, #200]	; (800bd48 <xPortStartScheduler+0xd0>)
 800bc80:	60fb      	str	r3, [r7, #12]
=======
 800c5ce:	4b32      	ldr	r3, [pc, #200]	; (800c698 <xPortStartScheduler+0xd0>)
 800c5d0:	60fb      	str	r3, [r7, #12]
>>>>>>> e9380fc... optimisation RAM=)
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	607b      	str	r3, [r7, #4]
=======
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	607b      	str	r3, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	22ff      	movs	r2, #255	; 0xff
 800bc8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc98:	78fb      	ldrb	r3, [r7, #3]
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	4b2a      	ldr	r3, [pc, #168]	; (800bd4c <xPortStartScheduler+0xd4>)
 800bca4:	701a      	strb	r2, [r3, #0]
=======
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	22ff      	movs	r2, #255	; 0xff
 800c5de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c5f0:	b2da      	uxtb	r2, r3
 800c5f2:	4b2a      	ldr	r3, [pc, #168]	; (800c69c <xPortStartScheduler+0xd4>)
 800c5f4:	701a      	strb	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 800bca6:	4b2a      	ldr	r3, [pc, #168]	; (800bd50 <xPortStartScheduler+0xd8>)
 800bca8:	2207      	movs	r2, #7
 800bcaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcac:	e009      	b.n	800bcc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bcae:	4b28      	ldr	r3, [pc, #160]	; (800bd50 <xPortStartScheduler+0xd8>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	4a26      	ldr	r2, [pc, #152]	; (800bd50 <xPortStartScheduler+0xd8>)
 800bcb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bcb8:	78fb      	ldrb	r3, [r7, #3]
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcc2:	78fb      	ldrb	r3, [r7, #3]
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcca:	2b80      	cmp	r3, #128	; 0x80
 800bccc:	d0ef      	beq.n	800bcae <xPortStartScheduler+0x36>
=======
 800c5f6:	4b2a      	ldr	r3, [pc, #168]	; (800c6a0 <xPortStartScheduler+0xd8>)
 800c5f8:	2207      	movs	r2, #7
 800c5fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5fc:	e009      	b.n	800c612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c5fe:	4b28      	ldr	r3, [pc, #160]	; (800c6a0 <xPortStartScheduler+0xd8>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3b01      	subs	r3, #1
 800c604:	4a26      	ldr	r2, [pc, #152]	; (800c6a0 <xPortStartScheduler+0xd8>)
 800c606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c608:	78fb      	ldrb	r3, [r7, #3]
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c612:	78fb      	ldrb	r3, [r7, #3]
 800c614:	b2db      	uxtb	r3, r3
 800c616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c61a:	2b80      	cmp	r3, #128	; 0x80
 800c61c:	d0ef      	beq.n	800c5fe <xPortStartScheduler+0x36>
>>>>>>> e9380fc... optimisation RAM=)
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 800bcce:	4b20      	ldr	r3, [pc, #128]	; (800bd50 <xPortStartScheduler+0xd8>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f1c3 0307 	rsb	r3, r3, #7
 800bcd6:	2b04      	cmp	r3, #4
 800bcd8:	d00a      	beq.n	800bcf0 <xPortStartScheduler+0x78>
	__asm volatile
 800bcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcde:	f383 8811 	msr	BASEPRI, r3
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	60bb      	str	r3, [r7, #8]
}
 800bcec:	bf00      	nop
 800bcee:	e7fe      	b.n	800bcee <xPortStartScheduler+0x76>
=======
 800c61e:	4b20      	ldr	r3, [pc, #128]	; (800c6a0 <xPortStartScheduler+0xd8>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f1c3 0307 	rsb	r3, r3, #7
 800c626:	2b04      	cmp	r3, #4
 800c628:	d00a      	beq.n	800c640 <xPortStartScheduler+0x78>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	60bb      	str	r3, [r7, #8]
}
 800c63c:	bf00      	nop
 800c63e:	e7fe      	b.n	800c63e <xPortStartScheduler+0x76>
>>>>>>> e9380fc... optimisation RAM=)
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 800bcf0:	4b17      	ldr	r3, [pc, #92]	; (800bd50 <xPortStartScheduler+0xd8>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	021b      	lsls	r3, r3, #8
 800bcf6:	4a16      	ldr	r2, [pc, #88]	; (800bd50 <xPortStartScheduler+0xd8>)
 800bcf8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcfa:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <xPortStartScheduler+0xd8>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd02:	4a13      	ldr	r2, [pc, #76]	; (800bd50 <xPortStartScheduler+0xd8>)
 800bd04:	6013      	str	r3, [r2, #0]
=======
 800c640:	4b17      	ldr	r3, [pc, #92]	; (800c6a0 <xPortStartScheduler+0xd8>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	021b      	lsls	r3, r3, #8
 800c646:	4a16      	ldr	r2, [pc, #88]	; (800c6a0 <xPortStartScheduler+0xd8>)
 800c648:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c64a:	4b15      	ldr	r3, [pc, #84]	; (800c6a0 <xPortStartScheduler+0xd8>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c652:	4a13      	ldr	r2, [pc, #76]	; (800c6a0 <xPortStartScheduler+0xd8>)
 800c654:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	b2da      	uxtb	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	701a      	strb	r2, [r3, #0]
=======
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	701a      	strb	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 800bd0e:	4b11      	ldr	r3, [pc, #68]	; (800bd54 <xPortStartScheduler+0xdc>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a10      	ldr	r2, [pc, #64]	; (800bd54 <xPortStartScheduler+0xdc>)
 800bd14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd1a:	4b0e      	ldr	r3, [pc, #56]	; (800bd54 <xPortStartScheduler+0xdc>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a0d      	ldr	r2, [pc, #52]	; (800bd54 <xPortStartScheduler+0xdc>)
 800bd20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd24:	6013      	str	r3, [r2, #0]
=======
 800c65e:	4b11      	ldr	r3, [pc, #68]	; (800c6a4 <xPortStartScheduler+0xdc>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a10      	ldr	r2, [pc, #64]	; (800c6a4 <xPortStartScheduler+0xdc>)
 800c664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c66a:	4b0e      	ldr	r3, [pc, #56]	; (800c6a4 <xPortStartScheduler+0xdc>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a0d      	ldr	r2, [pc, #52]	; (800c6a4 <xPortStartScheduler+0xdc>)
 800c670:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c674:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 800bd26:	f000 f8b9 	bl	800be9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd2a:	4b0b      	ldr	r3, [pc, #44]	; (800bd58 <xPortStartScheduler+0xe0>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd30:	f7ff ff92 	bl	800bc58 <prvPortStartFirstTask>
=======
 800c676:	f000 f8b9 	bl	800c7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c67a:	4b0b      	ldr	r3, [pc, #44]	; (800c6a8 <xPortStartScheduler+0xe0>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c680:	f7ff ff92 	bl	800c5a8 <prvPortStartFirstTask>
>>>>>>> e9380fc... optimisation RAM=)
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 800bd34:	f7fe fffe 	bl	800ad34 <vTaskSwitchContext>
	prvTaskExitError();
 800bd38:	f7ff ff48 	bl	800bbcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	e000e400 	.word	0xe000e400
 800bd4c:	200011e8 	.word	0x200011e8
 800bd50:	200011ec 	.word	0x200011ec
 800bd54:	e000ed20 	.word	0xe000ed20
 800bd58:	2000001c 	.word	0x2000001c

0800bd5c <vPortEnterCritical>:
=======
 800c684:	f7fe fdca 	bl	800b21c <vTaskSwitchContext>
	prvTaskExitError();
 800c688:	f7ff ff48 	bl	800c51c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	e000e400 	.word	0xe000e400
 800c69c:	20001914 	.word	0x20001914
 800c6a0:	20001918 	.word	0x20001918
 800c6a4:	e000ed20 	.word	0xe000ed20
 800c6a8:	2000001c 	.word	0x2000001c

0800c6ac <vPortEnterCritical>:
>>>>>>> e9380fc... optimisation RAM=)
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	607b      	str	r3, [r7, #4]
}
 800bd74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd76:	4b0f      	ldr	r3, [pc, #60]	; (800bdb4 <vPortEnterCritical+0x58>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	4a0d      	ldr	r2, [pc, #52]	; (800bdb4 <vPortEnterCritical+0x58>)
 800bd7e:	6013      	str	r3, [r2, #0]
=======
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	607b      	str	r3, [r7, #4]
}
 800c6c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6c6:	4b0f      	ldr	r3, [pc, #60]	; (800c704 <vPortEnterCritical+0x58>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	4a0d      	ldr	r2, [pc, #52]	; (800c704 <vPortEnterCritical+0x58>)
 800c6ce:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 800bd80:	4b0c      	ldr	r3, [pc, #48]	; (800bdb4 <vPortEnterCritical+0x58>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d10f      	bne.n	800bda8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd88:	4b0b      	ldr	r3, [pc, #44]	; (800bdb8 <vPortEnterCritical+0x5c>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00a      	beq.n	800bda8 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd96:	f383 8811 	msr	BASEPRI, r3
 800bd9a:	f3bf 8f6f 	isb	sy
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	603b      	str	r3, [r7, #0]
}
 800bda4:	bf00      	nop
 800bda6:	e7fe      	b.n	800bda6 <vPortEnterCritical+0x4a>
	}
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bc80      	pop	{r7}
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	2000001c 	.word	0x2000001c
 800bdb8:	e000ed04 	.word	0xe000ed04

0800bdbc <vPortExitCritical>:
=======
 800c6d0:	4b0c      	ldr	r3, [pc, #48]	; (800c704 <vPortEnterCritical+0x58>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d10f      	bne.n	800c6f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6d8:	4b0b      	ldr	r3, [pc, #44]	; (800c708 <vPortEnterCritical+0x5c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00a      	beq.n	800c6f8 <vPortEnterCritical+0x4c>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	603b      	str	r3, [r7, #0]
}
 800c6f4:	bf00      	nop
 800c6f6:	e7fe      	b.n	800c6f6 <vPortEnterCritical+0x4a>
	}
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bc80      	pop	{r7}
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	2000001c 	.word	0x2000001c
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <vPortExitCritical>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdc2:	4b11      	ldr	r3, [pc, #68]	; (800be08 <vPortExitCritical+0x4c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10a      	bne.n	800bde0 <vPortExitCritical+0x24>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	607b      	str	r3, [r7, #4]
}
 800bddc:	bf00      	nop
 800bdde:	e7fe      	b.n	800bdde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bde0:	4b09      	ldr	r3, [pc, #36]	; (800be08 <vPortExitCritical+0x4c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	4a08      	ldr	r2, [pc, #32]	; (800be08 <vPortExitCritical+0x4c>)
 800bde8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bdea:	4b07      	ldr	r3, [pc, #28]	; (800be08 <vPortExitCritical+0x4c>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d105      	bne.n	800bdfe <vPortExitCritical+0x42>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	f383 8811 	msr	BASEPRI, r3
}
 800bdfc:	bf00      	nop
=======
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c712:	4b11      	ldr	r3, [pc, #68]	; (800c758 <vPortExitCritical+0x4c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10a      	bne.n	800c730 <vPortExitCritical+0x24>
	__asm volatile
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	f383 8811 	msr	BASEPRI, r3
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	607b      	str	r3, [r7, #4]
}
 800c72c:	bf00      	nop
 800c72e:	e7fe      	b.n	800c72e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c730:	4b09      	ldr	r3, [pc, #36]	; (800c758 <vPortExitCritical+0x4c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	3b01      	subs	r3, #1
 800c736:	4a08      	ldr	r2, [pc, #32]	; (800c758 <vPortExitCritical+0x4c>)
 800c738:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c73a:	4b07      	ldr	r3, [pc, #28]	; (800c758 <vPortExitCritical+0x4c>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d105      	bne.n	800c74e <vPortExitCritical+0x42>
 800c742:	2300      	movs	r3, #0
 800c744:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	f383 8811 	msr	BASEPRI, r3
}
 800c74c:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 800bdfe:	bf00      	nop
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	bc80      	pop	{r7}
 800be06:	4770      	bx	lr
 800be08:	2000001c 	.word	0x2000001c
 800be0c:	00000000 	.word	0x00000000

0800be10 <PendSV_Handler>:
=======
 800c74e:	bf00      	nop
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	bc80      	pop	{r7}
 800c756:	4770      	bx	lr
 800c758:	2000001c 	.word	0x2000001c
 800c75c:	00000000 	.word	0x00000000

0800c760 <PendSV_Handler>:
>>>>>>> e9380fc... optimisation RAM=)

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 800be10:	f3ef 8009 	mrs	r0, PSP
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	4b0d      	ldr	r3, [pc, #52]	; (800be50 <pxCurrentTCBConst>)
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800be20:	6010      	str	r0, [r2, #0]
 800be22:	e92d 4008 	stmdb	sp!, {r3, lr}
 800be26:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be2a:	f380 8811 	msr	BASEPRI, r0
 800be2e:	f7fe ff81 	bl	800ad34 <vTaskSwitchContext>
 800be32:	f04f 0000 	mov.w	r0, #0
 800be36:	f380 8811 	msr	BASEPRI, r0
 800be3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800be3e:	6819      	ldr	r1, [r3, #0]
 800be40:	6808      	ldr	r0, [r1, #0]
 800be42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800be46:	f380 8809 	msr	PSP, r0
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	4770      	bx	lr

0800be50 <pxCurrentTCBConst>:
 800be50:	20000bd4 	.word	0x20000bd4
=======
 800c760:	f3ef 8009 	mrs	r0, PSP
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	4b0d      	ldr	r3, [pc, #52]	; (800c7a0 <pxCurrentTCBConst>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c770:	6010      	str	r0, [r2, #0]
 800c772:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c776:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c77a:	f380 8811 	msr	BASEPRI, r0
 800c77e:	f7fe fd4d 	bl	800b21c <vTaskSwitchContext>
 800c782:	f04f 0000 	mov.w	r0, #0
 800c786:	f380 8811 	msr	BASEPRI, r0
 800c78a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c78e:	6819      	ldr	r1, [r3, #0]
 800c790:	6808      	ldr	r0, [r1, #0]
 800c792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c796:	f380 8809 	msr	PSP, r0
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	4770      	bx	lr

0800c7a0 <pxCurrentTCBConst>:
 800c7a0:	200012f8 	.word	0x200012f8
>>>>>>> e9380fc... optimisation RAM=)
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 800be54:	bf00      	nop
 800be56:	bf00      	nop

0800be58 <SysTick_Handler>:
=======
 800c7a4:	bf00      	nop
 800c7a6:	bf00      	nop

0800c7a8 <SysTick_Handler>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	607b      	str	r3, [r7, #4]
}
 800be70:	bf00      	nop
=======
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	607b      	str	r3, [r7, #4]
}
 800c7c0:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800be72:	f7fe fea1 	bl	800abb8 <xTaskIncrementTick>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d003      	beq.n	800be84 <SysTick_Handler+0x2c>
=======
 800c7c2:	f7fe fc6d 	bl	800b0a0 <xTaskIncrementTick>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <SysTick_Handler+0x2c>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 800be7c:	4b06      	ldr	r3, [pc, #24]	; (800be98 <SysTick_Handler+0x40>)
 800be7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	2300      	movs	r3, #0
 800be86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	f383 8811 	msr	BASEPRI, r3
}
 800be8e:	bf00      	nop
=======
 800c7cc:	4b06      	ldr	r3, [pc, #24]	; (800c7e8 <SysTick_Handler+0x40>)
 800c7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	f383 8811 	msr	BASEPRI, r3
}
 800c7de:	bf00      	nop
>>>>>>> e9380fc... optimisation RAM=)
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <vPortSetupTimerInterrupt>:
=======
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <vPortSetupTimerInterrupt>:
>>>>>>> e9380fc... optimisation RAM=)
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800be9c:	b480      	push	{r7}
 800be9e:	af00      	add	r7, sp, #0
=======
 800c7ec:	b480      	push	{r7}
 800c7ee:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 800bea0:	4b0a      	ldr	r3, [pc, #40]	; (800becc <vPortSetupTimerInterrupt+0x30>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bea6:	4b0a      	ldr	r3, [pc, #40]	; (800bed0 <vPortSetupTimerInterrupt+0x34>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800beac:	4b09      	ldr	r3, [pc, #36]	; (800bed4 <vPortSetupTimerInterrupt+0x38>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a09      	ldr	r2, [pc, #36]	; (800bed8 <vPortSetupTimerInterrupt+0x3c>)
 800beb2:	fba2 2303 	umull	r2, r3, r2, r3
 800beb6:	099b      	lsrs	r3, r3, #6
 800beb8:	4a08      	ldr	r2, [pc, #32]	; (800bedc <vPortSetupTimerInterrupt+0x40>)
 800beba:	3b01      	subs	r3, #1
 800bebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bebe:	4b03      	ldr	r3, [pc, #12]	; (800becc <vPortSetupTimerInterrupt+0x30>)
 800bec0:	2207      	movs	r2, #7
 800bec2:	601a      	str	r2, [r3, #0]
}
 800bec4:	bf00      	nop
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bc80      	pop	{r7}
 800beca:	4770      	bx	lr
 800becc:	e000e010 	.word	0xe000e010
 800bed0:	e000e018 	.word	0xe000e018
 800bed4:	20000010 	.word	0x20000010
 800bed8:	10624dd3 	.word	0x10624dd3
 800bedc:	e000e014 	.word	0xe000e014

0800bee0 <vPortValidateInterruptPriority>:
=======
 800c7f0:	4b0a      	ldr	r3, [pc, #40]	; (800c81c <vPortSetupTimerInterrupt+0x30>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7f6:	4b0a      	ldr	r3, [pc, #40]	; (800c820 <vPortSetupTimerInterrupt+0x34>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7fc:	4b09      	ldr	r3, [pc, #36]	; (800c824 <vPortSetupTimerInterrupt+0x38>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a09      	ldr	r2, [pc, #36]	; (800c828 <vPortSetupTimerInterrupt+0x3c>)
 800c802:	fba2 2303 	umull	r2, r3, r2, r3
 800c806:	099b      	lsrs	r3, r3, #6
 800c808:	4a08      	ldr	r2, [pc, #32]	; (800c82c <vPortSetupTimerInterrupt+0x40>)
 800c80a:	3b01      	subs	r3, #1
 800c80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c80e:	4b03      	ldr	r3, [pc, #12]	; (800c81c <vPortSetupTimerInterrupt+0x30>)
 800c810:	2207      	movs	r2, #7
 800c812:	601a      	str	r2, [r3, #0]
}
 800c814:	bf00      	nop
 800c816:	46bd      	mov	sp, r7
 800c818:	bc80      	pop	{r7}
 800c81a:	4770      	bx	lr
 800c81c:	e000e010 	.word	0xe000e010
 800c820:	e000e018 	.word	0xe000e018
 800c824:	20000010 	.word	0x20000010
 800c828:	10624dd3 	.word	0x10624dd3
 800c82c:	e000e014 	.word	0xe000e014

0800c830 <vPortValidateInterruptPriority>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
=======
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 800bee6:	f3ef 8305 	mrs	r3, IPSR
 800beea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b0f      	cmp	r3, #15
 800bef0:	d914      	bls.n	800bf1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bef2:	4a16      	ldr	r2, [pc, #88]	; (800bf4c <vPortValidateInterruptPriority+0x6c>)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4413      	add	r3, r2
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	72fb      	strb	r3, [r7, #11]
=======
 800c836:	f3ef 8305 	mrs	r3, IPSR
 800c83a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2b0f      	cmp	r3, #15
 800c840:	d914      	bls.n	800c86c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c842:	4a16      	ldr	r2, [pc, #88]	; (800c89c <vPortValidateInterruptPriority+0x6c>)
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	4413      	add	r3, r2
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	72fb      	strb	r3, [r7, #11]
>>>>>>> e9380fc... optimisation RAM=)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 800befc:	4b14      	ldr	r3, [pc, #80]	; (800bf50 <vPortValidateInterruptPriority+0x70>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	7afa      	ldrb	r2, [r7, #11]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d20a      	bcs.n	800bf1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	607b      	str	r3, [r7, #4]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <vPortValidateInterruptPriority+0x3a>
=======
 800c84c:	4b14      	ldr	r3, [pc, #80]	; (800c8a0 <vPortValidateInterruptPriority+0x70>)
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	7afa      	ldrb	r2, [r7, #11]
 800c852:	429a      	cmp	r2, r3
 800c854:	d20a      	bcs.n	800c86c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	607b      	str	r3, [r7, #4]
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <vPortValidateInterruptPriority+0x3a>
>>>>>>> e9380fc... optimisation RAM=)
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 800bf1c:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <vPortValidateInterruptPriority+0x74>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf24:	4b0c      	ldr	r3, [pc, #48]	; (800bf58 <vPortValidateInterruptPriority+0x78>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d90a      	bls.n	800bf42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	603b      	str	r3, [r7, #0]
}
 800bf3e:	bf00      	nop
 800bf40:	e7fe      	b.n	800bf40 <vPortValidateInterruptPriority+0x60>
	}
 800bf42:	bf00      	nop
 800bf44:	3714      	adds	r7, #20
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bc80      	pop	{r7}
 800bf4a:	4770      	bx	lr
 800bf4c:	e000e3f0 	.word	0xe000e3f0
 800bf50:	200011e8 	.word	0x200011e8
 800bf54:	e000ed0c 	.word	0xe000ed0c
 800bf58:	200011ec 	.word	0x200011ec

0800bf5c <pvPortMalloc>:
=======
 800c86c:	4b0d      	ldr	r3, [pc, #52]	; (800c8a4 <vPortValidateInterruptPriority+0x74>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c874:	4b0c      	ldr	r3, [pc, #48]	; (800c8a8 <vPortValidateInterruptPriority+0x78>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d90a      	bls.n	800c892 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	603b      	str	r3, [r7, #0]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <vPortValidateInterruptPriority+0x60>
	}
 800c892:	bf00      	nop
 800c894:	3714      	adds	r7, #20
 800c896:	46bd      	mov	sp, r7
 800c898:	bc80      	pop	{r7}
 800c89a:	4770      	bx	lr
 800c89c:	e000e3f0 	.word	0xe000e3f0
 800c8a0:	20001914 	.word	0x20001914
 800c8a4:	e000ed0c 	.word	0xe000ed0c
 800c8a8:	20001918 	.word	0x20001918

0800c8ac <pvPortMalloc>:
>>>>>>> e9380fc... optimisation RAM=)
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08a      	sub	sp, #40	; 0x28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf64:	2300      	movs	r3, #0
 800bf66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf68:	f7fe fd6c 	bl	800aa44 <vTaskSuspendAll>
=======
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08a      	sub	sp, #40	; 0x28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8b8:	f7fe faba 	bl	800ae30 <vTaskSuspendAll>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 800bf6c:	4b58      	ldr	r3, [pc, #352]	; (800c0d0 <pvPortMalloc+0x174>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf74:	f000 f910 	bl	800c198 <prvHeapInit>
=======
 800c8bc:	4b58      	ldr	r3, [pc, #352]	; (800ca20 <pvPortMalloc+0x174>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d101      	bne.n	800c8c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8c4:	f000 f91a 	bl	800cafc <prvHeapInit>
>>>>>>> e9380fc... optimisation RAM=)

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 800bf78:	4b56      	ldr	r3, [pc, #344]	; (800c0d4 <pvPortMalloc+0x178>)
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4013      	ands	r3, r2
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f040 808e 	bne.w	800c0a2 <pvPortMalloc+0x146>
=======
 800c8c8:	4b56      	ldr	r3, [pc, #344]	; (800ca24 <pvPortMalloc+0x178>)
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f040 808e 	bne.w	800c9f2 <pvPortMalloc+0x146>
>>>>>>> e9380fc... optimisation RAM=)
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d01d      	beq.n	800bfc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf8c:	2208      	movs	r2, #8
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4413      	add	r3, r2
 800bf92:	607b      	str	r3, [r7, #4]
=======
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d01d      	beq.n	800c918 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c8dc:	2208      	movs	r2, #8
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	607b      	str	r3, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f003 0307 	and.w	r3, r3, #7
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d014      	beq.n	800bfc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f023 0307 	bic.w	r3, r3, #7
 800bfa4:	3308      	adds	r3, #8
 800bfa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f003 0307 	and.w	r3, r3, #7
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00a      	beq.n	800bfc8 <pvPortMalloc+0x6c>
	__asm volatile
 800bfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	617b      	str	r3, [r7, #20]
}
 800bfc4:	bf00      	nop
 800bfc6:	e7fe      	b.n	800bfc6 <pvPortMalloc+0x6a>
=======
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f003 0307 	and.w	r3, r3, #7
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d014      	beq.n	800c918 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f023 0307 	bic.w	r3, r3, #7
 800c8f4:	3308      	adds	r3, #8
 800c8f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f003 0307 	and.w	r3, r3, #7
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00a      	beq.n	800c918 <pvPortMalloc+0x6c>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	617b      	str	r3, [r7, #20]
}
 800c914:	bf00      	nop
 800c916:	e7fe      	b.n	800c916 <pvPortMalloc+0x6a>
>>>>>>> e9380fc... optimisation RAM=)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d069      	beq.n	800c0a2 <pvPortMalloc+0x146>
 800bfce:	4b42      	ldr	r3, [pc, #264]	; (800c0d8 <pvPortMalloc+0x17c>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d864      	bhi.n	800c0a2 <pvPortMalloc+0x146>
=======
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d069      	beq.n	800c9f2 <pvPortMalloc+0x146>
 800c91e:	4b42      	ldr	r3, [pc, #264]	; (800ca28 <pvPortMalloc+0x17c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	429a      	cmp	r2, r3
 800c926:	d864      	bhi.n	800c9f2 <pvPortMalloc+0x146>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 800bfd8:	4b40      	ldr	r3, [pc, #256]	; (800c0dc <pvPortMalloc+0x180>)
 800bfda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfdc:	4b3f      	ldr	r3, [pc, #252]	; (800c0dc <pvPortMalloc+0x180>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfe2:	e004      	b.n	800bfee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d903      	bls.n	800c000 <pvPortMalloc+0xa4>
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1f1      	bne.n	800bfe4 <pvPortMalloc+0x88>
=======
 800c928:	4b40      	ldr	r3, [pc, #256]	; (800ca2c <pvPortMalloc+0x180>)
 800c92a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c92c:	4b3f      	ldr	r3, [pc, #252]	; (800ca2c <pvPortMalloc+0x180>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c932:	e004      	b.n	800c93e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	429a      	cmp	r2, r3
 800c946:	d903      	bls.n	800c950 <pvPortMalloc+0xa4>
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d1f1      	bne.n	800c934 <pvPortMalloc+0x88>
>>>>>>> e9380fc... optimisation RAM=)
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 800c000:	4b33      	ldr	r3, [pc, #204]	; (800c0d0 <pvPortMalloc+0x174>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c006:	429a      	cmp	r2, r3
 800c008:	d04b      	beq.n	800c0a2 <pvPortMalloc+0x146>
=======
 800c950:	4b33      	ldr	r3, [pc, #204]	; (800ca20 <pvPortMalloc+0x174>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c956:	429a      	cmp	r2, r3
 800c958:	d04b      	beq.n	800c9f2 <pvPortMalloc+0x146>
>>>>>>> e9380fc... optimisation RAM=)
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2208      	movs	r2, #8
 800c010:	4413      	add	r3, r2
 800c012:	61fb      	str	r3, [r7, #28]
=======
 800c95a:	6a3b      	ldr	r3, [r7, #32]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2208      	movs	r2, #8
 800c960:	4413      	add	r3, r2
 800c962:	61fb      	str	r3, [r7, #28]
>>>>>>> e9380fc... optimisation RAM=)

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	601a      	str	r2, [r3, #0]
=======
 800c964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	6a3b      	ldr	r3, [r7, #32]
 800c96a:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	1ad2      	subs	r2, r2, r3
 800c024:	2308      	movs	r3, #8
 800c026:	005b      	lsls	r3, r3, #1
 800c028:	429a      	cmp	r2, r3
 800c02a:	d91f      	bls.n	800c06c <pvPortMalloc+0x110>
=======
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	1ad2      	subs	r2, r2, r3
 800c974:	2308      	movs	r3, #8
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	429a      	cmp	r2, r3
 800c97a:	d91f      	bls.n	800c9bc <pvPortMalloc+0x110>
>>>>>>> e9380fc... optimisation RAM=)
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 800c02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4413      	add	r3, r2
 800c032:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00a      	beq.n	800c054 <pvPortMalloc+0xf8>
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	613b      	str	r3, [r7, #16]
}
 800c050:	bf00      	nop
 800c052:	e7fe      	b.n	800c052 <pvPortMalloc+0xf6>
=======
 800c97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4413      	add	r3, r2
 800c982:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	f003 0307 	and.w	r3, r3, #7
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00a      	beq.n	800c9a4 <pvPortMalloc+0xf8>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	613b      	str	r3, [r7, #16]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <pvPortMalloc+0xf6>
>>>>>>> e9380fc... optimisation RAM=)

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 800c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	1ad2      	subs	r2, r2, r3
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c066:	69b8      	ldr	r0, [r7, #24]
 800c068:	f000 f8f8 	bl	800c25c <prvInsertBlockIntoFreeList>
=======
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	1ad2      	subs	r2, r2, r3
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9b6:	69b8      	ldr	r0, [r7, #24]
 800c9b8:	f000 f902 	bl	800cbc0 <prvInsertBlockIntoFreeList>
>>>>>>> e9380fc... optimisation RAM=)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 800c06c:	4b1a      	ldr	r3, [pc, #104]	; (800c0d8 <pvPortMalloc+0x17c>)
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	4a18      	ldr	r2, [pc, #96]	; (800c0d8 <pvPortMalloc+0x17c>)
 800c078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c07a:	4b17      	ldr	r3, [pc, #92]	; (800c0d8 <pvPortMalloc+0x17c>)
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	4b18      	ldr	r3, [pc, #96]	; (800c0e0 <pvPortMalloc+0x184>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d203      	bcs.n	800c08e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c086:	4b14      	ldr	r3, [pc, #80]	; (800c0d8 <pvPortMalloc+0x17c>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a15      	ldr	r2, [pc, #84]	; (800c0e0 <pvPortMalloc+0x184>)
 800c08c:	6013      	str	r3, [r2, #0]
=======
 800c9bc:	4b1a      	ldr	r3, [pc, #104]	; (800ca28 <pvPortMalloc+0x17c>)
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	4a18      	ldr	r2, [pc, #96]	; (800ca28 <pvPortMalloc+0x17c>)
 800c9c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9ca:	4b17      	ldr	r3, [pc, #92]	; (800ca28 <pvPortMalloc+0x17c>)
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	4b18      	ldr	r3, [pc, #96]	; (800ca30 <pvPortMalloc+0x184>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d203      	bcs.n	800c9de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9d6:	4b14      	ldr	r3, [pc, #80]	; (800ca28 <pvPortMalloc+0x17c>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a15      	ldr	r2, [pc, #84]	; (800ca30 <pvPortMalloc+0x184>)
 800c9dc:	6013      	str	r3, [r2, #0]
>>>>>>> e9380fc... optimisation RAM=)
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 800c08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c090:	685a      	ldr	r2, [r3, #4]
 800c092:	4b10      	ldr	r3, [pc, #64]	; (800c0d4 <pvPortMalloc+0x178>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	431a      	orrs	r2, r3
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	2200      	movs	r2, #0
 800c0a0:	601a      	str	r2, [r3, #0]
=======
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	4b10      	ldr	r3, [pc, #64]	; (800ca24 <pvPortMalloc+0x178>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 800c0a2:	f7fe fcdd 	bl	800aa60 <xTaskResumeAll>
=======
 800c9f2:	f7fe fa2b 	bl	800ae4c <xTaskResumeAll>
>>>>>>> e9380fc... optimisation RAM=)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	f003 0307 	and.w	r3, r3, #7
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00a      	beq.n	800c0c6 <pvPortMalloc+0x16a>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	60fb      	str	r3, [r7, #12]
}
 800c0c2:	bf00      	nop
 800c0c4:	e7fe      	b.n	800c0c4 <pvPortMalloc+0x168>
	return pvReturn;
 800c0c6:	69fb      	ldr	r3, [r7, #28]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3728      	adds	r7, #40	; 0x28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	200038a4 	.word	0x200038a4
 800c0d4:	200038b0 	.word	0x200038b0
 800c0d8:	200038a8 	.word	0x200038a8
 800c0dc:	2000389c 	.word	0x2000389c
 800c0e0:	200038ac 	.word	0x200038ac

0800c0e4 <vPortFree>:
=======
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	f003 0307 	and.w	r3, r3, #7
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <pvPortMalloc+0x16a>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	60fb      	str	r3, [r7, #12]
}
 800ca12:	bf00      	nop
 800ca14:	e7fe      	b.n	800ca14 <pvPortMalloc+0x168>
	return pvReturn;
 800ca16:	69fb      	ldr	r3, [r7, #28]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3728      	adds	r7, #40	; 0x28
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	20003fd0 	.word	0x20003fd0
 800ca24:	20003fdc 	.word	0x20003fdc
 800ca28:	20003fd4 	.word	0x20003fd4
 800ca2c:	20003fc8 	.word	0x20003fc8
 800ca30:	20003fd8 	.word	0x20003fd8

0800ca34 <vPortFree>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d048      	beq.n	800c188 <vPortFree+0xa4>
=======
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b086      	sub	sp, #24
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d048      	beq.n	800cad8 <vPortFree+0xa4>
>>>>>>> e9380fc... optimisation RAM=)
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 800c0f6:	2308      	movs	r3, #8
 800c0f8:	425b      	negs	r3, r3
 800c0fa:	697a      	ldr	r2, [r7, #20]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	4b21      	ldr	r3, [pc, #132]	; (800c190 <vPortFree+0xac>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4013      	ands	r3, r2
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10a      	bne.n	800c128 <vPortFree+0x44>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	60fb      	str	r3, [r7, #12]
}
 800c124:	bf00      	nop
 800c126:	e7fe      	b.n	800c126 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00a      	beq.n	800c146 <vPortFree+0x62>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60bb      	str	r3, [r7, #8]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	685a      	ldr	r2, [r3, #4]
 800c14a:	4b11      	ldr	r3, [pc, #68]	; (800c190 <vPortFree+0xac>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4013      	ands	r3, r2
 800c150:	2b00      	cmp	r3, #0
 800c152:	d019      	beq.n	800c188 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d115      	bne.n	800c188 <vPortFree+0xa4>
=======
 800ca46:	2308      	movs	r3, #8
 800ca48:	425b      	negs	r3, r3
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	4b21      	ldr	r3, [pc, #132]	; (800cae0 <vPortFree+0xac>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d10a      	bne.n	800ca78 <vPortFree+0x44>
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca66:	f383 8811 	msr	BASEPRI, r3
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	60fb      	str	r3, [r7, #12]
}
 800ca74:	bf00      	nop
 800ca76:	e7fe      	b.n	800ca76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00a      	beq.n	800ca96 <vPortFree+0x62>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	60bb      	str	r3, [r7, #8]
}
 800ca92:	bf00      	nop
 800ca94:	e7fe      	b.n	800ca94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	4b11      	ldr	r3, [pc, #68]	; (800cae0 <vPortFree+0xac>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4013      	ands	r3, r2
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d019      	beq.n	800cad8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d115      	bne.n	800cad8 <vPortFree+0xa4>
>>>>>>> e9380fc... optimisation RAM=)
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	685a      	ldr	r2, [r3, #4]
 800c160:	4b0b      	ldr	r3, [pc, #44]	; (800c190 <vPortFree+0xac>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	43db      	mvns	r3, r3
 800c166:	401a      	ands	r2, r3
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c16c:	f7fe fc6a 	bl	800aa44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	4b07      	ldr	r3, [pc, #28]	; (800c194 <vPortFree+0xb0>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4413      	add	r3, r2
 800c17a:	4a06      	ldr	r2, [pc, #24]	; (800c194 <vPortFree+0xb0>)
 800c17c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c17e:	6938      	ldr	r0, [r7, #16]
 800c180:	f000 f86c 	bl	800c25c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c184:	f7fe fc6c 	bl	800aa60 <xTaskResumeAll>
=======
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	685a      	ldr	r2, [r3, #4]
 800cab0:	4b0b      	ldr	r3, [pc, #44]	; (800cae0 <vPortFree+0xac>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	43db      	mvns	r3, r3
 800cab6:	401a      	ands	r2, r3
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cabc:	f7fe f9b8 	bl	800ae30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	685a      	ldr	r2, [r3, #4]
 800cac4:	4b07      	ldr	r3, [pc, #28]	; (800cae4 <vPortFree+0xb0>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4413      	add	r3, r2
 800caca:	4a06      	ldr	r2, [pc, #24]	; (800cae4 <vPortFree+0xb0>)
 800cacc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cace:	6938      	ldr	r0, [r7, #16]
 800cad0:	f000 f876 	bl	800cbc0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cad4:	f7fe f9ba 	bl	800ae4c <xTaskResumeAll>
>>>>>>> e9380fc... optimisation RAM=)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 800c188:	bf00      	nop
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	200038b0 	.word	0x200038b0
 800c194:	200038a8 	.word	0x200038a8

0800c198 <prvHeapInit>:
=======
 800cad8:	bf00      	nop
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	20003fdc 	.word	0x20003fdc
 800cae4:	20003fd4 	.word	0x20003fd4

0800cae8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800cae8:	b480      	push	{r7}
 800caea:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800caec:	4b02      	ldr	r3, [pc, #8]	; (800caf8 <xPortGetFreeHeapSize+0x10>)
 800caee:	681b      	ldr	r3, [r3, #0]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bc80      	pop	{r7}
 800caf6:	4770      	bx	lr
 800caf8:	20003fd4 	.word	0x20003fd4

0800cafc <prvHeapInit>:
>>>>>>> e9380fc... optimisation RAM=)
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
=======
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
>>>>>>> e9380fc... optimisation RAM=)
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 800c19e:	f242 63ac 	movw	r3, #9900	; 0x26ac
 800c1a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1a4:	4b27      	ldr	r3, [pc, #156]	; (800c244 <prvHeapInit+0xac>)
 800c1a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f003 0307 	and.w	r3, r3, #7
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00c      	beq.n	800c1cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3307      	adds	r3, #7
 800c1b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f023 0307 	bic.w	r3, r3, #7
 800c1be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	4a1f      	ldr	r2, [pc, #124]	; (800c244 <prvHeapInit+0xac>)
 800c1c8:	4413      	add	r3, r2
 800c1ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	607b      	str	r3, [r7, #4]
=======
 800cb02:	f242 63ac 	movw	r3, #9900	; 0x26ac
 800cb06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb08:	4b27      	ldr	r3, [pc, #156]	; (800cba8 <prvHeapInit+0xac>)
 800cb0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f003 0307 	and.w	r3, r3, #7
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00c      	beq.n	800cb30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3307      	adds	r3, #7
 800cb1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f023 0307 	bic.w	r3, r3, #7
 800cb22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	4a1f      	ldr	r2, [pc, #124]	; (800cba8 <prvHeapInit+0xac>)
 800cb2c:	4413      	add	r3, r2
 800cb2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	607b      	str	r3, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800c1d0:	4a1d      	ldr	r2, [pc, #116]	; (800c248 <prvHeapInit+0xb0>)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1d6:	4b1c      	ldr	r3, [pc, #112]	; (800c248 <prvHeapInit+0xb0>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	605a      	str	r2, [r3, #4]
=======
 800cb34:	4a1d      	ldr	r2, [pc, #116]	; (800cbac <prvHeapInit+0xb0>)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb3a:	4b1c      	ldr	r3, [pc, #112]	; (800cbac <prvHeapInit+0xb0>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	605a      	str	r2, [r3, #4]
>>>>>>> e9380fc... optimisation RAM=)

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1e4:	2208      	movs	r2, #8
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	1a9b      	subs	r3, r3, r2
 800c1ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f023 0307 	bic.w	r3, r3, #7
 800c1f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	4a15      	ldr	r2, [pc, #84]	; (800c24c <prvHeapInit+0xb4>)
 800c1f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c1fa:	4b14      	ldr	r3, [pc, #80]	; (800c24c <prvHeapInit+0xb4>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2200      	movs	r2, #0
 800c200:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c202:	4b12      	ldr	r3, [pc, #72]	; (800c24c <prvHeapInit+0xb4>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2200      	movs	r2, #0
 800c208:	601a      	str	r2, [r3, #0]
=======
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	4413      	add	r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb48:	2208      	movs	r2, #8
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	1a9b      	subs	r3, r3, r2
 800cb4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f023 0307 	bic.w	r3, r3, #7
 800cb56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	4a15      	ldr	r2, [pc, #84]	; (800cbb0 <prvHeapInit+0xb4>)
 800cb5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb5e:	4b14      	ldr	r3, [pc, #80]	; (800cbb0 <prvHeapInit+0xb4>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2200      	movs	r2, #0
 800cb64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb66:	4b12      	ldr	r3, [pc, #72]	; (800cbb0 <prvHeapInit+0xb4>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	1ad2      	subs	r2, r2, r3
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c218:	4b0c      	ldr	r3, [pc, #48]	; (800c24c <prvHeapInit+0xb4>)
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	4a0a      	ldr	r2, [pc, #40]	; (800c250 <prvHeapInit+0xb8>)
 800c226:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	4a09      	ldr	r2, [pc, #36]	; (800c254 <prvHeapInit+0xbc>)
 800c22e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c230:	4b09      	ldr	r3, [pc, #36]	; (800c258 <prvHeapInit+0xc0>)
 800c232:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c236:	601a      	str	r2, [r3, #0]
}
 800c238:	bf00      	nop
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bc80      	pop	{r7}
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	200011f0 	.word	0x200011f0
 800c248:	2000389c 	.word	0x2000389c
 800c24c:	200038a4 	.word	0x200038a4
 800c250:	200038ac 	.word	0x200038ac
 800c254:	200038a8 	.word	0x200038a8
 800c258:	200038b0 	.word	0x200038b0

0800c25c <prvInsertBlockIntoFreeList>:
=======
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	1ad2      	subs	r2, r2, r3
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb7c:	4b0c      	ldr	r3, [pc, #48]	; (800cbb0 <prvHeapInit+0xb4>)
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	4a0a      	ldr	r2, [pc, #40]	; (800cbb4 <prvHeapInit+0xb8>)
 800cb8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	4a09      	ldr	r2, [pc, #36]	; (800cbb8 <prvHeapInit+0xbc>)
 800cb92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb94:	4b09      	ldr	r3, [pc, #36]	; (800cbbc <prvHeapInit+0xc0>)
 800cb96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb9a:	601a      	str	r2, [r3, #0]
}
 800cb9c:	bf00      	nop
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bc80      	pop	{r7}
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	2000191c 	.word	0x2000191c
 800cbac:	20003fc8 	.word	0x20003fc8
 800cbb0:	20003fd0 	.word	0x20003fd0
 800cbb4:	20003fd8 	.word	0x20003fd8
 800cbb8:	20003fd4 	.word	0x20003fd4
 800cbbc:	20003fdc 	.word	0x20003fdc

0800cbc0 <prvInsertBlockIntoFreeList>:
>>>>>>> e9380fc... optimisation RAM=)
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
=======
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 800c264:	4b27      	ldr	r3, [pc, #156]	; (800c304 <prvInsertBlockIntoFreeList+0xa8>)
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	e002      	b.n	800c270 <prvInsertBlockIntoFreeList+0x14>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	429a      	cmp	r2, r3
 800c278:	d8f7      	bhi.n	800c26a <prvInsertBlockIntoFreeList+0xe>
=======
 800cbc8:	4b27      	ldr	r3, [pc, #156]	; (800cc68 <prvInsertBlockIntoFreeList+0xa8>)
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	e002      	b.n	800cbd4 <prvInsertBlockIntoFreeList+0x14>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d8f7      	bhi.n	800cbce <prvInsertBlockIntoFreeList+0xe>
>>>>>>> e9380fc... optimisation RAM=)
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	4413      	add	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d108      	bne.n	800c29e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	441a      	add	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	607b      	str	r3, [r7, #4]
=======
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	4413      	add	r3, r2
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d108      	bne.n	800cc02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	441a      	add	r2, r3
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	607b      	str	r3, [r7, #4]
>>>>>>> e9380fc... optimisation RAM=)
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	68ba      	ldr	r2, [r7, #8]
 800c2a8:	441a      	add	r2, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d118      	bne.n	800c2e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	4b14      	ldr	r3, [pc, #80]	; (800c308 <prvInsertBlockIntoFreeList+0xac>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d00d      	beq.n	800c2da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	441a      	add	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	601a      	str	r2, [r3, #0]
 800c2d8:	e008      	b.n	800c2ec <prvInsertBlockIntoFreeList+0x90>
=======
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	441a      	add	r2, r3
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d118      	bne.n	800cc48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	4b14      	ldr	r3, [pc, #80]	; (800cc6c <prvInsertBlockIntoFreeList+0xac>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d00d      	beq.n	800cc3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	441a      	add	r2, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	601a      	str	r2, [r3, #0]
 800cc3c:	e008      	b.n	800cc50 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> e9380fc... optimisation RAM=)
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 800c2da:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <prvInsertBlockIntoFreeList+0xac>)
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	e003      	b.n	800c2ec <prvInsertBlockIntoFreeList+0x90>
=======
 800cc3e:	4b0b      	ldr	r3, [pc, #44]	; (800cc6c <prvInsertBlockIntoFreeList+0xac>)
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	601a      	str	r2, [r3, #0]
 800cc46:	e003      	b.n	800cc50 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> e9380fc... optimisation RAM=)
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	601a      	str	r2, [r3, #0]
=======
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d002      	beq.n	800c2fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	601a      	str	r2, [r3, #0]
=======
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d002      	beq.n	800cc5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	601a      	str	r2, [r3, #0]
>>>>>>> e9380fc... optimisation RAM=)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800c2fa:	bf00      	nop
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bc80      	pop	{r7}
 800c302:	4770      	bx	lr
 800c304:	2000389c 	.word	0x2000389c
 800c308:	200038a4 	.word	0x200038a4

0800c30c <__errno>:
 800c30c:	4b01      	ldr	r3, [pc, #4]	; (800c314 <__errno+0x8>)
 800c30e:	6818      	ldr	r0, [r3, #0]
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20000020 	.word	0x20000020

0800c318 <__libc_init_array>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	2600      	movs	r6, #0
 800c31c:	4d0c      	ldr	r5, [pc, #48]	; (800c350 <__libc_init_array+0x38>)
 800c31e:	4c0d      	ldr	r4, [pc, #52]	; (800c354 <__libc_init_array+0x3c>)
 800c320:	1b64      	subs	r4, r4, r5
 800c322:	10a4      	asrs	r4, r4, #2
 800c324:	42a6      	cmp	r6, r4
 800c326:	d109      	bne.n	800c33c <__libc_init_array+0x24>
 800c328:	f000 fcb0 	bl	800cc8c <_init>
 800c32c:	2600      	movs	r6, #0
 800c32e:	4d0a      	ldr	r5, [pc, #40]	; (800c358 <__libc_init_array+0x40>)
 800c330:	4c0a      	ldr	r4, [pc, #40]	; (800c35c <__libc_init_array+0x44>)
 800c332:	1b64      	subs	r4, r4, r5
 800c334:	10a4      	asrs	r4, r4, #2
 800c336:	42a6      	cmp	r6, r4
 800c338:	d105      	bne.n	800c346 <__libc_init_array+0x2e>
 800c33a:	bd70      	pop	{r4, r5, r6, pc}
 800c33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c340:	4798      	blx	r3
 800c342:	3601      	adds	r6, #1
 800c344:	e7ee      	b.n	800c324 <__libc_init_array+0xc>
 800c346:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34a:	4798      	blx	r3
 800c34c:	3601      	adds	r6, #1
 800c34e:	e7f2      	b.n	800c336 <__libc_init_array+0x1e>
 800c350:	0800d30c 	.word	0x0800d30c
 800c354:	0800d30c 	.word	0x0800d30c
 800c358:	0800d30c 	.word	0x0800d30c
 800c35c:	0800d310 	.word	0x0800d310

0800c360 <__retarget_lock_acquire_recursive>:
 800c360:	4770      	bx	lr

0800c362 <__retarget_lock_release_recursive>:
 800c362:	4770      	bx	lr

0800c364 <memcpy>:
 800c364:	440a      	add	r2, r1
 800c366:	4291      	cmp	r1, r2
 800c368:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c36c:	d100      	bne.n	800c370 <memcpy+0xc>
 800c36e:	4770      	bx	lr
 800c370:	b510      	push	{r4, lr}
 800c372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c376:	4291      	cmp	r1, r2
 800c378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c37c:	d1f9      	bne.n	800c372 <memcpy+0xe>
 800c37e:	bd10      	pop	{r4, pc}

0800c380 <memset>:
 800c380:	4603      	mov	r3, r0
 800c382:	4402      	add	r2, r0
 800c384:	4293      	cmp	r3, r2
 800c386:	d100      	bne.n	800c38a <memset+0xa>
 800c388:	4770      	bx	lr
 800c38a:	f803 1b01 	strb.w	r1, [r3], #1
 800c38e:	e7f9      	b.n	800c384 <memset+0x4>

0800c390 <sbrk_aligned>:
 800c390:	b570      	push	{r4, r5, r6, lr}
 800c392:	4e0e      	ldr	r6, [pc, #56]	; (800c3cc <sbrk_aligned+0x3c>)
 800c394:	460c      	mov	r4, r1
 800c396:	6831      	ldr	r1, [r6, #0]
 800c398:	4605      	mov	r5, r0
 800c39a:	b911      	cbnz	r1, 800c3a2 <sbrk_aligned+0x12>
 800c39c:	f000 f88c 	bl	800c4b8 <_sbrk_r>
 800c3a0:	6030      	str	r0, [r6, #0]
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	f000 f887 	bl	800c4b8 <_sbrk_r>
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	d00a      	beq.n	800c3c4 <sbrk_aligned+0x34>
 800c3ae:	1cc4      	adds	r4, r0, #3
 800c3b0:	f024 0403 	bic.w	r4, r4, #3
 800c3b4:	42a0      	cmp	r0, r4
 800c3b6:	d007      	beq.n	800c3c8 <sbrk_aligned+0x38>
 800c3b8:	1a21      	subs	r1, r4, r0
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f000 f87c 	bl	800c4b8 <_sbrk_r>
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	d101      	bne.n	800c3c8 <sbrk_aligned+0x38>
 800c3c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	200038bc 	.word	0x200038bc

0800c3d0 <_malloc_r>:
 800c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d4:	1ccd      	adds	r5, r1, #3
 800c3d6:	f025 0503 	bic.w	r5, r5, #3
 800c3da:	3508      	adds	r5, #8
 800c3dc:	2d0c      	cmp	r5, #12
 800c3de:	bf38      	it	cc
 800c3e0:	250c      	movcc	r5, #12
 800c3e2:	2d00      	cmp	r5, #0
 800c3e4:	4607      	mov	r7, r0
 800c3e6:	db01      	blt.n	800c3ec <_malloc_r+0x1c>
 800c3e8:	42a9      	cmp	r1, r5
 800c3ea:	d905      	bls.n	800c3f8 <_malloc_r+0x28>
 800c3ec:	230c      	movs	r3, #12
 800c3ee:	2600      	movs	r6, #0
 800c3f0:	603b      	str	r3, [r7, #0]
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f8:	4e2e      	ldr	r6, [pc, #184]	; (800c4b4 <_malloc_r+0xe4>)
 800c3fa:	f000 f8a1 	bl	800c540 <__malloc_lock>
 800c3fe:	6833      	ldr	r3, [r6, #0]
 800c400:	461c      	mov	r4, r3
 800c402:	bb34      	cbnz	r4, 800c452 <_malloc_r+0x82>
 800c404:	4629      	mov	r1, r5
 800c406:	4638      	mov	r0, r7
 800c408:	f7ff ffc2 	bl	800c390 <sbrk_aligned>
 800c40c:	1c43      	adds	r3, r0, #1
 800c40e:	4604      	mov	r4, r0
 800c410:	d14d      	bne.n	800c4ae <_malloc_r+0xde>
 800c412:	6834      	ldr	r4, [r6, #0]
 800c414:	4626      	mov	r6, r4
 800c416:	2e00      	cmp	r6, #0
 800c418:	d140      	bne.n	800c49c <_malloc_r+0xcc>
 800c41a:	6823      	ldr	r3, [r4, #0]
 800c41c:	4631      	mov	r1, r6
 800c41e:	4638      	mov	r0, r7
 800c420:	eb04 0803 	add.w	r8, r4, r3
 800c424:	f000 f848 	bl	800c4b8 <_sbrk_r>
 800c428:	4580      	cmp	r8, r0
 800c42a:	d13a      	bne.n	800c4a2 <_malloc_r+0xd2>
 800c42c:	6821      	ldr	r1, [r4, #0]
 800c42e:	3503      	adds	r5, #3
 800c430:	1a6d      	subs	r5, r5, r1
 800c432:	f025 0503 	bic.w	r5, r5, #3
 800c436:	3508      	adds	r5, #8
 800c438:	2d0c      	cmp	r5, #12
 800c43a:	bf38      	it	cc
 800c43c:	250c      	movcc	r5, #12
 800c43e:	4638      	mov	r0, r7
 800c440:	4629      	mov	r1, r5
 800c442:	f7ff ffa5 	bl	800c390 <sbrk_aligned>
 800c446:	3001      	adds	r0, #1
 800c448:	d02b      	beq.n	800c4a2 <_malloc_r+0xd2>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	442b      	add	r3, r5
 800c44e:	6023      	str	r3, [r4, #0]
 800c450:	e00e      	b.n	800c470 <_malloc_r+0xa0>
 800c452:	6822      	ldr	r2, [r4, #0]
 800c454:	1b52      	subs	r2, r2, r5
 800c456:	d41e      	bmi.n	800c496 <_malloc_r+0xc6>
 800c458:	2a0b      	cmp	r2, #11
 800c45a:	d916      	bls.n	800c48a <_malloc_r+0xba>
 800c45c:	1961      	adds	r1, r4, r5
 800c45e:	42a3      	cmp	r3, r4
 800c460:	6025      	str	r5, [r4, #0]
 800c462:	bf18      	it	ne
 800c464:	6059      	strne	r1, [r3, #4]
 800c466:	6863      	ldr	r3, [r4, #4]
 800c468:	bf08      	it	eq
 800c46a:	6031      	streq	r1, [r6, #0]
 800c46c:	5162      	str	r2, [r4, r5]
 800c46e:	604b      	str	r3, [r1, #4]
 800c470:	4638      	mov	r0, r7
 800c472:	f104 060b 	add.w	r6, r4, #11
 800c476:	f000 f869 	bl	800c54c <__malloc_unlock>
 800c47a:	f026 0607 	bic.w	r6, r6, #7
 800c47e:	1d23      	adds	r3, r4, #4
 800c480:	1af2      	subs	r2, r6, r3
 800c482:	d0b6      	beq.n	800c3f2 <_malloc_r+0x22>
 800c484:	1b9b      	subs	r3, r3, r6
 800c486:	50a3      	str	r3, [r4, r2]
 800c488:	e7b3      	b.n	800c3f2 <_malloc_r+0x22>
 800c48a:	6862      	ldr	r2, [r4, #4]
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	bf0c      	ite	eq
 800c490:	6032      	streq	r2, [r6, #0]
 800c492:	605a      	strne	r2, [r3, #4]
 800c494:	e7ec      	b.n	800c470 <_malloc_r+0xa0>
 800c496:	4623      	mov	r3, r4
 800c498:	6864      	ldr	r4, [r4, #4]
 800c49a:	e7b2      	b.n	800c402 <_malloc_r+0x32>
 800c49c:	4634      	mov	r4, r6
 800c49e:	6876      	ldr	r6, [r6, #4]
 800c4a0:	e7b9      	b.n	800c416 <_malloc_r+0x46>
 800c4a2:	230c      	movs	r3, #12
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	603b      	str	r3, [r7, #0]
 800c4a8:	f000 f850 	bl	800c54c <__malloc_unlock>
 800c4ac:	e7a1      	b.n	800c3f2 <_malloc_r+0x22>
 800c4ae:	6025      	str	r5, [r4, #0]
 800c4b0:	e7de      	b.n	800c470 <_malloc_r+0xa0>
 800c4b2:	bf00      	nop
 800c4b4:	200038b8 	.word	0x200038b8

0800c4b8 <_sbrk_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	4d05      	ldr	r5, [pc, #20]	; (800c4d4 <_sbrk_r+0x1c>)
 800c4be:	4604      	mov	r4, r0
 800c4c0:	4608      	mov	r0, r1
 800c4c2:	602b      	str	r3, [r5, #0]
 800c4c4:	f7f8 f866 	bl	8004594 <_sbrk>
 800c4c8:	1c43      	adds	r3, r0, #1
 800c4ca:	d102      	bne.n	800c4d2 <_sbrk_r+0x1a>
 800c4cc:	682b      	ldr	r3, [r5, #0]
 800c4ce:	b103      	cbz	r3, 800c4d2 <_sbrk_r+0x1a>
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	200038c0 	.word	0x200038c0

0800c4d8 <siprintf>:
 800c4d8:	b40e      	push	{r1, r2, r3}
 800c4da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4de:	b500      	push	{lr}
 800c4e0:	b09c      	sub	sp, #112	; 0x70
 800c4e2:	ab1d      	add	r3, sp, #116	; 0x74
 800c4e4:	9002      	str	r0, [sp, #8]
 800c4e6:	9006      	str	r0, [sp, #24]
 800c4e8:	9107      	str	r1, [sp, #28]
 800c4ea:	9104      	str	r1, [sp, #16]
 800c4ec:	4808      	ldr	r0, [pc, #32]	; (800c510 <siprintf+0x38>)
 800c4ee:	4909      	ldr	r1, [pc, #36]	; (800c514 <siprintf+0x3c>)
 800c4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4f4:	9105      	str	r1, [sp, #20]
 800c4f6:	6800      	ldr	r0, [r0, #0]
 800c4f8:	a902      	add	r1, sp, #8
 800c4fa:	9301      	str	r3, [sp, #4]
 800c4fc:	f000 f8d0 	bl	800c6a0 <_svfiprintf_r>
 800c500:	2200      	movs	r2, #0
 800c502:	9b02      	ldr	r3, [sp, #8]
 800c504:	701a      	strb	r2, [r3, #0]
 800c506:	b01c      	add	sp, #112	; 0x70
 800c508:	f85d eb04 	ldr.w	lr, [sp], #4
 800c50c:	b003      	add	sp, #12
 800c50e:	4770      	bx	lr
 800c510:	20000020 	.word	0x20000020
 800c514:	ffff0208 	.word	0xffff0208

0800c518 <strncat>:
 800c518:	b530      	push	{r4, r5, lr}
 800c51a:	4604      	mov	r4, r0
 800c51c:	7825      	ldrb	r5, [r4, #0]
 800c51e:	4623      	mov	r3, r4
 800c520:	3401      	adds	r4, #1
 800c522:	2d00      	cmp	r5, #0
 800c524:	d1fa      	bne.n	800c51c <strncat+0x4>
 800c526:	3a01      	subs	r2, #1
 800c528:	d304      	bcc.n	800c534 <strncat+0x1c>
 800c52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c52e:	f803 4b01 	strb.w	r4, [r3], #1
 800c532:	b904      	cbnz	r4, 800c536 <strncat+0x1e>
 800c534:	bd30      	pop	{r4, r5, pc}
 800c536:	2a00      	cmp	r2, #0
 800c538:	d1f5      	bne.n	800c526 <strncat+0xe>
 800c53a:	701a      	strb	r2, [r3, #0]
 800c53c:	e7f3      	b.n	800c526 <strncat+0xe>
	...

0800c540 <__malloc_lock>:
 800c540:	4801      	ldr	r0, [pc, #4]	; (800c548 <__malloc_lock+0x8>)
 800c542:	f7ff bf0d 	b.w	800c360 <__retarget_lock_acquire_recursive>
 800c546:	bf00      	nop
 800c548:	200038b4 	.word	0x200038b4

0800c54c <__malloc_unlock>:
 800c54c:	4801      	ldr	r0, [pc, #4]	; (800c554 <__malloc_unlock+0x8>)
 800c54e:	f7ff bf08 	b.w	800c362 <__retarget_lock_release_recursive>
 800c552:	bf00      	nop
 800c554:	200038b4 	.word	0x200038b4

0800c558 <_free_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4605      	mov	r5, r0
 800c55c:	2900      	cmp	r1, #0
 800c55e:	d040      	beq.n	800c5e2 <_free_r+0x8a>
 800c560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c564:	1f0c      	subs	r4, r1, #4
 800c566:	2b00      	cmp	r3, #0
 800c568:	bfb8      	it	lt
 800c56a:	18e4      	addlt	r4, r4, r3
 800c56c:	f7ff ffe8 	bl	800c540 <__malloc_lock>
 800c570:	4a1c      	ldr	r2, [pc, #112]	; (800c5e4 <_free_r+0x8c>)
 800c572:	6813      	ldr	r3, [r2, #0]
 800c574:	b933      	cbnz	r3, 800c584 <_free_r+0x2c>
 800c576:	6063      	str	r3, [r4, #4]
 800c578:	6014      	str	r4, [r2, #0]
 800c57a:	4628      	mov	r0, r5
 800c57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c580:	f7ff bfe4 	b.w	800c54c <__malloc_unlock>
 800c584:	42a3      	cmp	r3, r4
 800c586:	d908      	bls.n	800c59a <_free_r+0x42>
 800c588:	6820      	ldr	r0, [r4, #0]
 800c58a:	1821      	adds	r1, r4, r0
 800c58c:	428b      	cmp	r3, r1
 800c58e:	bf01      	itttt	eq
 800c590:	6819      	ldreq	r1, [r3, #0]
 800c592:	685b      	ldreq	r3, [r3, #4]
 800c594:	1809      	addeq	r1, r1, r0
 800c596:	6021      	streq	r1, [r4, #0]
 800c598:	e7ed      	b.n	800c576 <_free_r+0x1e>
 800c59a:	461a      	mov	r2, r3
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	b10b      	cbz	r3, 800c5a4 <_free_r+0x4c>
 800c5a0:	42a3      	cmp	r3, r4
 800c5a2:	d9fa      	bls.n	800c59a <_free_r+0x42>
 800c5a4:	6811      	ldr	r1, [r2, #0]
 800c5a6:	1850      	adds	r0, r2, r1
 800c5a8:	42a0      	cmp	r0, r4
 800c5aa:	d10b      	bne.n	800c5c4 <_free_r+0x6c>
 800c5ac:	6820      	ldr	r0, [r4, #0]
 800c5ae:	4401      	add	r1, r0
 800c5b0:	1850      	adds	r0, r2, r1
 800c5b2:	4283      	cmp	r3, r0
 800c5b4:	6011      	str	r1, [r2, #0]
 800c5b6:	d1e0      	bne.n	800c57a <_free_r+0x22>
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	4401      	add	r1, r0
 800c5be:	6011      	str	r1, [r2, #0]
 800c5c0:	6053      	str	r3, [r2, #4]
 800c5c2:	e7da      	b.n	800c57a <_free_r+0x22>
 800c5c4:	d902      	bls.n	800c5cc <_free_r+0x74>
 800c5c6:	230c      	movs	r3, #12
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	e7d6      	b.n	800c57a <_free_r+0x22>
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	1821      	adds	r1, r4, r0
 800c5d0:	428b      	cmp	r3, r1
 800c5d2:	bf01      	itttt	eq
 800c5d4:	6819      	ldreq	r1, [r3, #0]
 800c5d6:	685b      	ldreq	r3, [r3, #4]
 800c5d8:	1809      	addeq	r1, r1, r0
 800c5da:	6021      	streq	r1, [r4, #0]
 800c5dc:	6063      	str	r3, [r4, #4]
 800c5de:	6054      	str	r4, [r2, #4]
 800c5e0:	e7cb      	b.n	800c57a <_free_r+0x22>
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	200038b8 	.word	0x200038b8

0800c5e8 <__ssputs_r>:
 800c5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ec:	688e      	ldr	r6, [r1, #8]
 800c5ee:	4682      	mov	sl, r0
 800c5f0:	429e      	cmp	r6, r3
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	4690      	mov	r8, r2
 800c5f6:	461f      	mov	r7, r3
 800c5f8:	d838      	bhi.n	800c66c <__ssputs_r+0x84>
 800c5fa:	898a      	ldrh	r2, [r1, #12]
 800c5fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c600:	d032      	beq.n	800c668 <__ssputs_r+0x80>
 800c602:	6825      	ldr	r5, [r4, #0]
 800c604:	6909      	ldr	r1, [r1, #16]
 800c606:	3301      	adds	r3, #1
 800c608:	eba5 0901 	sub.w	r9, r5, r1
 800c60c:	6965      	ldr	r5, [r4, #20]
 800c60e:	444b      	add	r3, r9
 800c610:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c614:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c618:	106d      	asrs	r5, r5, #1
 800c61a:	429d      	cmp	r5, r3
 800c61c:	bf38      	it	cc
 800c61e:	461d      	movcc	r5, r3
 800c620:	0553      	lsls	r3, r2, #21
 800c622:	d531      	bpl.n	800c688 <__ssputs_r+0xa0>
 800c624:	4629      	mov	r1, r5
 800c626:	f7ff fed3 	bl	800c3d0 <_malloc_r>
 800c62a:	4606      	mov	r6, r0
 800c62c:	b950      	cbnz	r0, 800c644 <__ssputs_r+0x5c>
 800c62e:	230c      	movs	r3, #12
 800c630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c634:	f8ca 3000 	str.w	r3, [sl]
 800c638:	89a3      	ldrh	r3, [r4, #12]
 800c63a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c63e:	81a3      	strh	r3, [r4, #12]
 800c640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c644:	464a      	mov	r2, r9
 800c646:	6921      	ldr	r1, [r4, #16]
 800c648:	f7ff fe8c 	bl	800c364 <memcpy>
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c656:	81a3      	strh	r3, [r4, #12]
 800c658:	6126      	str	r6, [r4, #16]
 800c65a:	444e      	add	r6, r9
 800c65c:	6026      	str	r6, [r4, #0]
 800c65e:	463e      	mov	r6, r7
 800c660:	6165      	str	r5, [r4, #20]
 800c662:	eba5 0509 	sub.w	r5, r5, r9
 800c666:	60a5      	str	r5, [r4, #8]
 800c668:	42be      	cmp	r6, r7
 800c66a:	d900      	bls.n	800c66e <__ssputs_r+0x86>
 800c66c:	463e      	mov	r6, r7
 800c66e:	4632      	mov	r2, r6
 800c670:	4641      	mov	r1, r8
 800c672:	6820      	ldr	r0, [r4, #0]
 800c674:	f000 fab8 	bl	800cbe8 <memmove>
 800c678:	68a3      	ldr	r3, [r4, #8]
 800c67a:	2000      	movs	r0, #0
 800c67c:	1b9b      	subs	r3, r3, r6
 800c67e:	60a3      	str	r3, [r4, #8]
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	4433      	add	r3, r6
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	e7db      	b.n	800c640 <__ssputs_r+0x58>
 800c688:	462a      	mov	r2, r5
 800c68a:	f000 fac7 	bl	800cc1c <_realloc_r>
 800c68e:	4606      	mov	r6, r0
 800c690:	2800      	cmp	r0, #0
 800c692:	d1e1      	bne.n	800c658 <__ssputs_r+0x70>
 800c694:	4650      	mov	r0, sl
 800c696:	6921      	ldr	r1, [r4, #16]
 800c698:	f7ff ff5e 	bl	800c558 <_free_r>
 800c69c:	e7c7      	b.n	800c62e <__ssputs_r+0x46>
	...

0800c6a0 <_svfiprintf_r>:
 800c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a4:	4698      	mov	r8, r3
 800c6a6:	898b      	ldrh	r3, [r1, #12]
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	061b      	lsls	r3, r3, #24
 800c6ac:	460d      	mov	r5, r1
 800c6ae:	4614      	mov	r4, r2
 800c6b0:	b09d      	sub	sp, #116	; 0x74
 800c6b2:	d50e      	bpl.n	800c6d2 <_svfiprintf_r+0x32>
 800c6b4:	690b      	ldr	r3, [r1, #16]
 800c6b6:	b963      	cbnz	r3, 800c6d2 <_svfiprintf_r+0x32>
 800c6b8:	2140      	movs	r1, #64	; 0x40
 800c6ba:	f7ff fe89 	bl	800c3d0 <_malloc_r>
 800c6be:	6028      	str	r0, [r5, #0]
 800c6c0:	6128      	str	r0, [r5, #16]
 800c6c2:	b920      	cbnz	r0, 800c6ce <_svfiprintf_r+0x2e>
 800c6c4:	230c      	movs	r3, #12
 800c6c6:	603b      	str	r3, [r7, #0]
 800c6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6cc:	e0d1      	b.n	800c872 <_svfiprintf_r+0x1d2>
 800c6ce:	2340      	movs	r3, #64	; 0x40
 800c6d0:	616b      	str	r3, [r5, #20]
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d6:	2320      	movs	r3, #32
 800c6d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6dc:	2330      	movs	r3, #48	; 0x30
 800c6de:	f04f 0901 	mov.w	r9, #1
 800c6e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c88c <_svfiprintf_r+0x1ec>
 800c6ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ee:	4623      	mov	r3, r4
 800c6f0:	469a      	mov	sl, r3
 800c6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6f6:	b10a      	cbz	r2, 800c6fc <_svfiprintf_r+0x5c>
 800c6f8:	2a25      	cmp	r2, #37	; 0x25
 800c6fa:	d1f9      	bne.n	800c6f0 <_svfiprintf_r+0x50>
 800c6fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c700:	d00b      	beq.n	800c71a <_svfiprintf_r+0x7a>
 800c702:	465b      	mov	r3, fp
 800c704:	4622      	mov	r2, r4
 800c706:	4629      	mov	r1, r5
 800c708:	4638      	mov	r0, r7
 800c70a:	f7ff ff6d 	bl	800c5e8 <__ssputs_r>
 800c70e:	3001      	adds	r0, #1
 800c710:	f000 80aa 	beq.w	800c868 <_svfiprintf_r+0x1c8>
 800c714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c716:	445a      	add	r2, fp
 800c718:	9209      	str	r2, [sp, #36]	; 0x24
 800c71a:	f89a 3000 	ldrb.w	r3, [sl]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f000 80a2 	beq.w	800c868 <_svfiprintf_r+0x1c8>
 800c724:	2300      	movs	r3, #0
 800c726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c72a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c72e:	f10a 0a01 	add.w	sl, sl, #1
 800c732:	9304      	str	r3, [sp, #16]
 800c734:	9307      	str	r3, [sp, #28]
 800c736:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c73a:	931a      	str	r3, [sp, #104]	; 0x68
 800c73c:	4654      	mov	r4, sl
 800c73e:	2205      	movs	r2, #5
 800c740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c744:	4851      	ldr	r0, [pc, #324]	; (800c88c <_svfiprintf_r+0x1ec>)
 800c746:	f000 fa41 	bl	800cbcc <memchr>
 800c74a:	9a04      	ldr	r2, [sp, #16]
 800c74c:	b9d8      	cbnz	r0, 800c786 <_svfiprintf_r+0xe6>
 800c74e:	06d0      	lsls	r0, r2, #27
 800c750:	bf44      	itt	mi
 800c752:	2320      	movmi	r3, #32
 800c754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c758:	0711      	lsls	r1, r2, #28
 800c75a:	bf44      	itt	mi
 800c75c:	232b      	movmi	r3, #43	; 0x2b
 800c75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c762:	f89a 3000 	ldrb.w	r3, [sl]
 800c766:	2b2a      	cmp	r3, #42	; 0x2a
 800c768:	d015      	beq.n	800c796 <_svfiprintf_r+0xf6>
 800c76a:	4654      	mov	r4, sl
 800c76c:	2000      	movs	r0, #0
 800c76e:	f04f 0c0a 	mov.w	ip, #10
 800c772:	9a07      	ldr	r2, [sp, #28]
 800c774:	4621      	mov	r1, r4
 800c776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c77a:	3b30      	subs	r3, #48	; 0x30
 800c77c:	2b09      	cmp	r3, #9
 800c77e:	d94e      	bls.n	800c81e <_svfiprintf_r+0x17e>
 800c780:	b1b0      	cbz	r0, 800c7b0 <_svfiprintf_r+0x110>
 800c782:	9207      	str	r2, [sp, #28]
 800c784:	e014      	b.n	800c7b0 <_svfiprintf_r+0x110>
 800c786:	eba0 0308 	sub.w	r3, r0, r8
 800c78a:	fa09 f303 	lsl.w	r3, r9, r3
 800c78e:	4313      	orrs	r3, r2
 800c790:	46a2      	mov	sl, r4
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	e7d2      	b.n	800c73c <_svfiprintf_r+0x9c>
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	1d19      	adds	r1, r3, #4
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	9103      	str	r1, [sp, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	bfbb      	ittet	lt
 800c7a2:	425b      	neglt	r3, r3
 800c7a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c7a8:	9307      	strge	r3, [sp, #28]
 800c7aa:	9307      	strlt	r3, [sp, #28]
 800c7ac:	bfb8      	it	lt
 800c7ae:	9204      	strlt	r2, [sp, #16]
 800c7b0:	7823      	ldrb	r3, [r4, #0]
 800c7b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c7b4:	d10c      	bne.n	800c7d0 <_svfiprintf_r+0x130>
 800c7b6:	7863      	ldrb	r3, [r4, #1]
 800c7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ba:	d135      	bne.n	800c828 <_svfiprintf_r+0x188>
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	3402      	adds	r4, #2
 800c7c0:	1d1a      	adds	r2, r3, #4
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	9203      	str	r2, [sp, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bfb8      	it	lt
 800c7ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7ce:	9305      	str	r3, [sp, #20]
 800c7d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c890 <_svfiprintf_r+0x1f0>
 800c7d4:	2203      	movs	r2, #3
 800c7d6:	4650      	mov	r0, sl
 800c7d8:	7821      	ldrb	r1, [r4, #0]
 800c7da:	f000 f9f7 	bl	800cbcc <memchr>
 800c7de:	b140      	cbz	r0, 800c7f2 <_svfiprintf_r+0x152>
 800c7e0:	2340      	movs	r3, #64	; 0x40
 800c7e2:	eba0 000a 	sub.w	r0, r0, sl
 800c7e6:	fa03 f000 	lsl.w	r0, r3, r0
 800c7ea:	9b04      	ldr	r3, [sp, #16]
 800c7ec:	3401      	adds	r4, #1
 800c7ee:	4303      	orrs	r3, r0
 800c7f0:	9304      	str	r3, [sp, #16]
 800c7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f6:	2206      	movs	r2, #6
 800c7f8:	4826      	ldr	r0, [pc, #152]	; (800c894 <_svfiprintf_r+0x1f4>)
 800c7fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7fe:	f000 f9e5 	bl	800cbcc <memchr>
 800c802:	2800      	cmp	r0, #0
 800c804:	d038      	beq.n	800c878 <_svfiprintf_r+0x1d8>
 800c806:	4b24      	ldr	r3, [pc, #144]	; (800c898 <_svfiprintf_r+0x1f8>)
 800c808:	bb1b      	cbnz	r3, 800c852 <_svfiprintf_r+0x1b2>
 800c80a:	9b03      	ldr	r3, [sp, #12]
 800c80c:	3307      	adds	r3, #7
 800c80e:	f023 0307 	bic.w	r3, r3, #7
 800c812:	3308      	adds	r3, #8
 800c814:	9303      	str	r3, [sp, #12]
 800c816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c818:	4433      	add	r3, r6
 800c81a:	9309      	str	r3, [sp, #36]	; 0x24
 800c81c:	e767      	b.n	800c6ee <_svfiprintf_r+0x4e>
 800c81e:	460c      	mov	r4, r1
 800c820:	2001      	movs	r0, #1
 800c822:	fb0c 3202 	mla	r2, ip, r2, r3
 800c826:	e7a5      	b.n	800c774 <_svfiprintf_r+0xd4>
 800c828:	2300      	movs	r3, #0
 800c82a:	f04f 0c0a 	mov.w	ip, #10
 800c82e:	4619      	mov	r1, r3
 800c830:	3401      	adds	r4, #1
 800c832:	9305      	str	r3, [sp, #20]
 800c834:	4620      	mov	r0, r4
 800c836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c83a:	3a30      	subs	r2, #48	; 0x30
 800c83c:	2a09      	cmp	r2, #9
 800c83e:	d903      	bls.n	800c848 <_svfiprintf_r+0x1a8>
 800c840:	2b00      	cmp	r3, #0
 800c842:	d0c5      	beq.n	800c7d0 <_svfiprintf_r+0x130>
 800c844:	9105      	str	r1, [sp, #20]
 800c846:	e7c3      	b.n	800c7d0 <_svfiprintf_r+0x130>
 800c848:	4604      	mov	r4, r0
 800c84a:	2301      	movs	r3, #1
 800c84c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c850:	e7f0      	b.n	800c834 <_svfiprintf_r+0x194>
 800c852:	ab03      	add	r3, sp, #12
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	462a      	mov	r2, r5
 800c858:	4638      	mov	r0, r7
 800c85a:	4b10      	ldr	r3, [pc, #64]	; (800c89c <_svfiprintf_r+0x1fc>)
 800c85c:	a904      	add	r1, sp, #16
 800c85e:	f3af 8000 	nop.w
 800c862:	1c42      	adds	r2, r0, #1
 800c864:	4606      	mov	r6, r0
 800c866:	d1d6      	bne.n	800c816 <_svfiprintf_r+0x176>
 800c868:	89ab      	ldrh	r3, [r5, #12]
 800c86a:	065b      	lsls	r3, r3, #25
 800c86c:	f53f af2c 	bmi.w	800c6c8 <_svfiprintf_r+0x28>
 800c870:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c872:	b01d      	add	sp, #116	; 0x74
 800c874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c878:	ab03      	add	r3, sp, #12
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	462a      	mov	r2, r5
 800c87e:	4638      	mov	r0, r7
 800c880:	4b06      	ldr	r3, [pc, #24]	; (800c89c <_svfiprintf_r+0x1fc>)
 800c882:	a904      	add	r1, sp, #16
 800c884:	f000 f87c 	bl	800c980 <_printf_i>
 800c888:	e7eb      	b.n	800c862 <_svfiprintf_r+0x1c2>
 800c88a:	bf00      	nop
 800c88c:	0800d2d0 	.word	0x0800d2d0
 800c890:	0800d2d6 	.word	0x0800d2d6
 800c894:	0800d2da 	.word	0x0800d2da
 800c898:	00000000 	.word	0x00000000
 800c89c:	0800c5e9 	.word	0x0800c5e9

0800c8a0 <_printf_common>:
 800c8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	4616      	mov	r6, r2
 800c8a6:	4699      	mov	r9, r3
 800c8a8:	688a      	ldr	r2, [r1, #8]
 800c8aa:	690b      	ldr	r3, [r1, #16]
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	bfb8      	it	lt
 800c8b2:	4613      	movlt	r3, r2
 800c8b4:	6033      	str	r3, [r6, #0]
 800c8b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8c0:	b10a      	cbz	r2, 800c8c6 <_printf_common+0x26>
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	6033      	str	r3, [r6, #0]
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	0699      	lsls	r1, r3, #26
 800c8ca:	bf42      	ittt	mi
 800c8cc:	6833      	ldrmi	r3, [r6, #0]
 800c8ce:	3302      	addmi	r3, #2
 800c8d0:	6033      	strmi	r3, [r6, #0]
 800c8d2:	6825      	ldr	r5, [r4, #0]
 800c8d4:	f015 0506 	ands.w	r5, r5, #6
 800c8d8:	d106      	bne.n	800c8e8 <_printf_common+0x48>
 800c8da:	f104 0a19 	add.w	sl, r4, #25
 800c8de:	68e3      	ldr	r3, [r4, #12]
 800c8e0:	6832      	ldr	r2, [r6, #0]
 800c8e2:	1a9b      	subs	r3, r3, r2
 800c8e4:	42ab      	cmp	r3, r5
 800c8e6:	dc28      	bgt.n	800c93a <_printf_common+0x9a>
 800c8e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8ec:	1e13      	subs	r3, r2, #0
 800c8ee:	6822      	ldr	r2, [r4, #0]
 800c8f0:	bf18      	it	ne
 800c8f2:	2301      	movne	r3, #1
 800c8f4:	0692      	lsls	r2, r2, #26
 800c8f6:	d42d      	bmi.n	800c954 <_printf_common+0xb4>
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c900:	47c0      	blx	r8
 800c902:	3001      	adds	r0, #1
 800c904:	d020      	beq.n	800c948 <_printf_common+0xa8>
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	68e5      	ldr	r5, [r4, #12]
 800c90a:	f003 0306 	and.w	r3, r3, #6
 800c90e:	2b04      	cmp	r3, #4
 800c910:	bf18      	it	ne
 800c912:	2500      	movne	r5, #0
 800c914:	6832      	ldr	r2, [r6, #0]
 800c916:	f04f 0600 	mov.w	r6, #0
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	bf08      	it	eq
 800c91e:	1aad      	subeq	r5, r5, r2
 800c920:	6922      	ldr	r2, [r4, #16]
 800c922:	bf08      	it	eq
 800c924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c928:	4293      	cmp	r3, r2
 800c92a:	bfc4      	itt	gt
 800c92c:	1a9b      	subgt	r3, r3, r2
 800c92e:	18ed      	addgt	r5, r5, r3
 800c930:	341a      	adds	r4, #26
 800c932:	42b5      	cmp	r5, r6
 800c934:	d11a      	bne.n	800c96c <_printf_common+0xcc>
 800c936:	2000      	movs	r0, #0
 800c938:	e008      	b.n	800c94c <_printf_common+0xac>
 800c93a:	2301      	movs	r3, #1
 800c93c:	4652      	mov	r2, sl
 800c93e:	4649      	mov	r1, r9
 800c940:	4638      	mov	r0, r7
 800c942:	47c0      	blx	r8
 800c944:	3001      	adds	r0, #1
 800c946:	d103      	bne.n	800c950 <_printf_common+0xb0>
 800c948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c950:	3501      	adds	r5, #1
 800c952:	e7c4      	b.n	800c8de <_printf_common+0x3e>
 800c954:	2030      	movs	r0, #48	; 0x30
 800c956:	18e1      	adds	r1, r4, r3
 800c958:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c95c:	1c5a      	adds	r2, r3, #1
 800c95e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c962:	4422      	add	r2, r4
 800c964:	3302      	adds	r3, #2
 800c966:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c96a:	e7c5      	b.n	800c8f8 <_printf_common+0x58>
 800c96c:	2301      	movs	r3, #1
 800c96e:	4622      	mov	r2, r4
 800c970:	4649      	mov	r1, r9
 800c972:	4638      	mov	r0, r7
 800c974:	47c0      	blx	r8
 800c976:	3001      	adds	r0, #1
 800c978:	d0e6      	beq.n	800c948 <_printf_common+0xa8>
 800c97a:	3601      	adds	r6, #1
 800c97c:	e7d9      	b.n	800c932 <_printf_common+0x92>
	...

0800c980 <_printf_i>:
 800c980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c984:	7e0f      	ldrb	r7, [r1, #24]
 800c986:	4691      	mov	r9, r2
 800c988:	2f78      	cmp	r7, #120	; 0x78
 800c98a:	4680      	mov	r8, r0
 800c98c:	460c      	mov	r4, r1
 800c98e:	469a      	mov	sl, r3
 800c990:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c996:	d807      	bhi.n	800c9a8 <_printf_i+0x28>
 800c998:	2f62      	cmp	r7, #98	; 0x62
 800c99a:	d80a      	bhi.n	800c9b2 <_printf_i+0x32>
 800c99c:	2f00      	cmp	r7, #0
 800c99e:	f000 80d9 	beq.w	800cb54 <_printf_i+0x1d4>
 800c9a2:	2f58      	cmp	r7, #88	; 0x58
 800c9a4:	f000 80a4 	beq.w	800caf0 <_printf_i+0x170>
 800c9a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9b0:	e03a      	b.n	800ca28 <_printf_i+0xa8>
 800c9b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9b6:	2b15      	cmp	r3, #21
 800c9b8:	d8f6      	bhi.n	800c9a8 <_printf_i+0x28>
 800c9ba:	a101      	add	r1, pc, #4	; (adr r1, 800c9c0 <_printf_i+0x40>)
 800c9bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9c0:	0800ca19 	.word	0x0800ca19
 800c9c4:	0800ca2d 	.word	0x0800ca2d
 800c9c8:	0800c9a9 	.word	0x0800c9a9
 800c9cc:	0800c9a9 	.word	0x0800c9a9
 800c9d0:	0800c9a9 	.word	0x0800c9a9
 800c9d4:	0800c9a9 	.word	0x0800c9a9
 800c9d8:	0800ca2d 	.word	0x0800ca2d
 800c9dc:	0800c9a9 	.word	0x0800c9a9
 800c9e0:	0800c9a9 	.word	0x0800c9a9
 800c9e4:	0800c9a9 	.word	0x0800c9a9
 800c9e8:	0800c9a9 	.word	0x0800c9a9
 800c9ec:	0800cb3b 	.word	0x0800cb3b
 800c9f0:	0800ca5d 	.word	0x0800ca5d
 800c9f4:	0800cb1d 	.word	0x0800cb1d
 800c9f8:	0800c9a9 	.word	0x0800c9a9
 800c9fc:	0800c9a9 	.word	0x0800c9a9
 800ca00:	0800cb5d 	.word	0x0800cb5d
 800ca04:	0800c9a9 	.word	0x0800c9a9
 800ca08:	0800ca5d 	.word	0x0800ca5d
 800ca0c:	0800c9a9 	.word	0x0800c9a9
 800ca10:	0800c9a9 	.word	0x0800c9a9
 800ca14:	0800cb25 	.word	0x0800cb25
 800ca18:	682b      	ldr	r3, [r5, #0]
 800ca1a:	1d1a      	adds	r2, r3, #4
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	602a      	str	r2, [r5, #0]
 800ca20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e0a4      	b.n	800cb76 <_printf_i+0x1f6>
 800ca2c:	6820      	ldr	r0, [r4, #0]
 800ca2e:	6829      	ldr	r1, [r5, #0]
 800ca30:	0606      	lsls	r6, r0, #24
 800ca32:	f101 0304 	add.w	r3, r1, #4
 800ca36:	d50a      	bpl.n	800ca4e <_printf_i+0xce>
 800ca38:	680e      	ldr	r6, [r1, #0]
 800ca3a:	602b      	str	r3, [r5, #0]
 800ca3c:	2e00      	cmp	r6, #0
 800ca3e:	da03      	bge.n	800ca48 <_printf_i+0xc8>
 800ca40:	232d      	movs	r3, #45	; 0x2d
 800ca42:	4276      	negs	r6, r6
 800ca44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca48:	230a      	movs	r3, #10
 800ca4a:	485e      	ldr	r0, [pc, #376]	; (800cbc4 <_printf_i+0x244>)
 800ca4c:	e019      	b.n	800ca82 <_printf_i+0x102>
 800ca4e:	680e      	ldr	r6, [r1, #0]
 800ca50:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca54:	602b      	str	r3, [r5, #0]
 800ca56:	bf18      	it	ne
 800ca58:	b236      	sxthne	r6, r6
 800ca5a:	e7ef      	b.n	800ca3c <_printf_i+0xbc>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	6820      	ldr	r0, [r4, #0]
 800ca60:	1d19      	adds	r1, r3, #4
 800ca62:	6029      	str	r1, [r5, #0]
 800ca64:	0601      	lsls	r1, r0, #24
 800ca66:	d501      	bpl.n	800ca6c <_printf_i+0xec>
 800ca68:	681e      	ldr	r6, [r3, #0]
 800ca6a:	e002      	b.n	800ca72 <_printf_i+0xf2>
 800ca6c:	0646      	lsls	r6, r0, #25
 800ca6e:	d5fb      	bpl.n	800ca68 <_printf_i+0xe8>
 800ca70:	881e      	ldrh	r6, [r3, #0]
 800ca72:	2f6f      	cmp	r7, #111	; 0x6f
 800ca74:	bf0c      	ite	eq
 800ca76:	2308      	moveq	r3, #8
 800ca78:	230a      	movne	r3, #10
 800ca7a:	4852      	ldr	r0, [pc, #328]	; (800cbc4 <_printf_i+0x244>)
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca82:	6865      	ldr	r5, [r4, #4]
 800ca84:	2d00      	cmp	r5, #0
 800ca86:	bfa8      	it	ge
 800ca88:	6821      	ldrge	r1, [r4, #0]
 800ca8a:	60a5      	str	r5, [r4, #8]
 800ca8c:	bfa4      	itt	ge
 800ca8e:	f021 0104 	bicge.w	r1, r1, #4
 800ca92:	6021      	strge	r1, [r4, #0]
 800ca94:	b90e      	cbnz	r6, 800ca9a <_printf_i+0x11a>
 800ca96:	2d00      	cmp	r5, #0
 800ca98:	d04d      	beq.n	800cb36 <_printf_i+0x1b6>
 800ca9a:	4615      	mov	r5, r2
 800ca9c:	fbb6 f1f3 	udiv	r1, r6, r3
 800caa0:	fb03 6711 	mls	r7, r3, r1, r6
 800caa4:	5dc7      	ldrb	r7, [r0, r7]
 800caa6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800caaa:	4637      	mov	r7, r6
 800caac:	42bb      	cmp	r3, r7
 800caae:	460e      	mov	r6, r1
 800cab0:	d9f4      	bls.n	800ca9c <_printf_i+0x11c>
 800cab2:	2b08      	cmp	r3, #8
 800cab4:	d10b      	bne.n	800cace <_printf_i+0x14e>
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	07de      	lsls	r6, r3, #31
 800caba:	d508      	bpl.n	800cace <_printf_i+0x14e>
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	6861      	ldr	r1, [r4, #4]
 800cac0:	4299      	cmp	r1, r3
 800cac2:	bfde      	ittt	le
 800cac4:	2330      	movle	r3, #48	; 0x30
 800cac6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800caca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cace:	1b52      	subs	r2, r2, r5
 800cad0:	6122      	str	r2, [r4, #16]
 800cad2:	464b      	mov	r3, r9
 800cad4:	4621      	mov	r1, r4
 800cad6:	4640      	mov	r0, r8
 800cad8:	f8cd a000 	str.w	sl, [sp]
 800cadc:	aa03      	add	r2, sp, #12
 800cade:	f7ff fedf 	bl	800c8a0 <_printf_common>
 800cae2:	3001      	adds	r0, #1
 800cae4:	d14c      	bne.n	800cb80 <_printf_i+0x200>
 800cae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caea:	b004      	add	sp, #16
 800caec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf0:	4834      	ldr	r0, [pc, #208]	; (800cbc4 <_printf_i+0x244>)
 800caf2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800caf6:	6829      	ldr	r1, [r5, #0]
 800caf8:	6823      	ldr	r3, [r4, #0]
 800cafa:	f851 6b04 	ldr.w	r6, [r1], #4
 800cafe:	6029      	str	r1, [r5, #0]
 800cb00:	061d      	lsls	r5, r3, #24
 800cb02:	d514      	bpl.n	800cb2e <_printf_i+0x1ae>
 800cb04:	07df      	lsls	r7, r3, #31
 800cb06:	bf44      	itt	mi
 800cb08:	f043 0320 	orrmi.w	r3, r3, #32
 800cb0c:	6023      	strmi	r3, [r4, #0]
 800cb0e:	b91e      	cbnz	r6, 800cb18 <_printf_i+0x198>
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	f023 0320 	bic.w	r3, r3, #32
 800cb16:	6023      	str	r3, [r4, #0]
 800cb18:	2310      	movs	r3, #16
 800cb1a:	e7af      	b.n	800ca7c <_printf_i+0xfc>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	f043 0320 	orr.w	r3, r3, #32
 800cb22:	6023      	str	r3, [r4, #0]
 800cb24:	2378      	movs	r3, #120	; 0x78
 800cb26:	4828      	ldr	r0, [pc, #160]	; (800cbc8 <_printf_i+0x248>)
 800cb28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb2c:	e7e3      	b.n	800caf6 <_printf_i+0x176>
 800cb2e:	0659      	lsls	r1, r3, #25
 800cb30:	bf48      	it	mi
 800cb32:	b2b6      	uxthmi	r6, r6
 800cb34:	e7e6      	b.n	800cb04 <_printf_i+0x184>
 800cb36:	4615      	mov	r5, r2
 800cb38:	e7bb      	b.n	800cab2 <_printf_i+0x132>
 800cb3a:	682b      	ldr	r3, [r5, #0]
 800cb3c:	6826      	ldr	r6, [r4, #0]
 800cb3e:	1d18      	adds	r0, r3, #4
 800cb40:	6961      	ldr	r1, [r4, #20]
 800cb42:	6028      	str	r0, [r5, #0]
 800cb44:	0635      	lsls	r5, r6, #24
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	d501      	bpl.n	800cb4e <_printf_i+0x1ce>
 800cb4a:	6019      	str	r1, [r3, #0]
 800cb4c:	e002      	b.n	800cb54 <_printf_i+0x1d4>
 800cb4e:	0670      	lsls	r0, r6, #25
 800cb50:	d5fb      	bpl.n	800cb4a <_printf_i+0x1ca>
 800cb52:	8019      	strh	r1, [r3, #0]
 800cb54:	2300      	movs	r3, #0
 800cb56:	4615      	mov	r5, r2
 800cb58:	6123      	str	r3, [r4, #16]
 800cb5a:	e7ba      	b.n	800cad2 <_printf_i+0x152>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	2100      	movs	r1, #0
 800cb60:	1d1a      	adds	r2, r3, #4
 800cb62:	602a      	str	r2, [r5, #0]
 800cb64:	681d      	ldr	r5, [r3, #0]
 800cb66:	6862      	ldr	r2, [r4, #4]
 800cb68:	4628      	mov	r0, r5
 800cb6a:	f000 f82f 	bl	800cbcc <memchr>
 800cb6e:	b108      	cbz	r0, 800cb74 <_printf_i+0x1f4>
 800cb70:	1b40      	subs	r0, r0, r5
 800cb72:	6060      	str	r0, [r4, #4]
 800cb74:	6863      	ldr	r3, [r4, #4]
 800cb76:	6123      	str	r3, [r4, #16]
 800cb78:	2300      	movs	r3, #0
 800cb7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb7e:	e7a8      	b.n	800cad2 <_printf_i+0x152>
 800cb80:	462a      	mov	r2, r5
 800cb82:	4649      	mov	r1, r9
 800cb84:	4640      	mov	r0, r8
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	47d0      	blx	sl
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d0ab      	beq.n	800cae6 <_printf_i+0x166>
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	079b      	lsls	r3, r3, #30
 800cb92:	d413      	bmi.n	800cbbc <_printf_i+0x23c>
 800cb94:	68e0      	ldr	r0, [r4, #12]
 800cb96:	9b03      	ldr	r3, [sp, #12]
 800cb98:	4298      	cmp	r0, r3
 800cb9a:	bfb8      	it	lt
 800cb9c:	4618      	movlt	r0, r3
 800cb9e:	e7a4      	b.n	800caea <_printf_i+0x16a>
 800cba0:	2301      	movs	r3, #1
 800cba2:	4632      	mov	r2, r6
 800cba4:	4649      	mov	r1, r9
 800cba6:	4640      	mov	r0, r8
 800cba8:	47d0      	blx	sl
 800cbaa:	3001      	adds	r0, #1
 800cbac:	d09b      	beq.n	800cae6 <_printf_i+0x166>
 800cbae:	3501      	adds	r5, #1
 800cbb0:	68e3      	ldr	r3, [r4, #12]
 800cbb2:	9903      	ldr	r1, [sp, #12]
 800cbb4:	1a5b      	subs	r3, r3, r1
 800cbb6:	42ab      	cmp	r3, r5
 800cbb8:	dcf2      	bgt.n	800cba0 <_printf_i+0x220>
 800cbba:	e7eb      	b.n	800cb94 <_printf_i+0x214>
 800cbbc:	2500      	movs	r5, #0
 800cbbe:	f104 0619 	add.w	r6, r4, #25
 800cbc2:	e7f5      	b.n	800cbb0 <_printf_i+0x230>
 800cbc4:	0800d2e1 	.word	0x0800d2e1
 800cbc8:	0800d2f2 	.word	0x0800d2f2

0800cbcc <memchr>:
 800cbcc:	4603      	mov	r3, r0
 800cbce:	b510      	push	{r4, lr}
 800cbd0:	b2c9      	uxtb	r1, r1
 800cbd2:	4402      	add	r2, r0
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	d101      	bne.n	800cbde <memchr+0x12>
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e003      	b.n	800cbe6 <memchr+0x1a>
 800cbde:	7804      	ldrb	r4, [r0, #0]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	428c      	cmp	r4, r1
 800cbe4:	d1f6      	bne.n	800cbd4 <memchr+0x8>
 800cbe6:	bd10      	pop	{r4, pc}

0800cbe8 <memmove>:
 800cbe8:	4288      	cmp	r0, r1
 800cbea:	b510      	push	{r4, lr}
 800cbec:	eb01 0402 	add.w	r4, r1, r2
 800cbf0:	d902      	bls.n	800cbf8 <memmove+0x10>
 800cbf2:	4284      	cmp	r4, r0
 800cbf4:	4623      	mov	r3, r4
 800cbf6:	d807      	bhi.n	800cc08 <memmove+0x20>
 800cbf8:	1e43      	subs	r3, r0, #1
 800cbfa:	42a1      	cmp	r1, r4
 800cbfc:	d008      	beq.n	800cc10 <memmove+0x28>
 800cbfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc06:	e7f8      	b.n	800cbfa <memmove+0x12>
 800cc08:	4601      	mov	r1, r0
 800cc0a:	4402      	add	r2, r0
 800cc0c:	428a      	cmp	r2, r1
 800cc0e:	d100      	bne.n	800cc12 <memmove+0x2a>
 800cc10:	bd10      	pop	{r4, pc}
 800cc12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc1a:	e7f7      	b.n	800cc0c <memmove+0x24>

0800cc1c <_realloc_r>:
 800cc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc20:	4680      	mov	r8, r0
 800cc22:	4614      	mov	r4, r2
 800cc24:	460e      	mov	r6, r1
 800cc26:	b921      	cbnz	r1, 800cc32 <_realloc_r+0x16>
 800cc28:	4611      	mov	r1, r2
 800cc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2e:	f7ff bbcf 	b.w	800c3d0 <_malloc_r>
 800cc32:	b92a      	cbnz	r2, 800cc40 <_realloc_r+0x24>
 800cc34:	f7ff fc90 	bl	800c558 <_free_r>
 800cc38:	4625      	mov	r5, r4
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc40:	f000 f81b 	bl	800cc7a <_malloc_usable_size_r>
 800cc44:	4284      	cmp	r4, r0
 800cc46:	4607      	mov	r7, r0
 800cc48:	d802      	bhi.n	800cc50 <_realloc_r+0x34>
 800cc4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc4e:	d812      	bhi.n	800cc76 <_realloc_r+0x5a>
 800cc50:	4621      	mov	r1, r4
 800cc52:	4640      	mov	r0, r8
 800cc54:	f7ff fbbc 	bl	800c3d0 <_malloc_r>
 800cc58:	4605      	mov	r5, r0
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d0ed      	beq.n	800cc3a <_realloc_r+0x1e>
 800cc5e:	42bc      	cmp	r4, r7
 800cc60:	4622      	mov	r2, r4
 800cc62:	4631      	mov	r1, r6
 800cc64:	bf28      	it	cs
 800cc66:	463a      	movcs	r2, r7
 800cc68:	f7ff fb7c 	bl	800c364 <memcpy>
 800cc6c:	4631      	mov	r1, r6
 800cc6e:	4640      	mov	r0, r8
 800cc70:	f7ff fc72 	bl	800c558 <_free_r>
 800cc74:	e7e1      	b.n	800cc3a <_realloc_r+0x1e>
 800cc76:	4635      	mov	r5, r6
 800cc78:	e7df      	b.n	800cc3a <_realloc_r+0x1e>

0800cc7a <_malloc_usable_size_r>:
 800cc7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc7e:	1f18      	subs	r0, r3, #4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	bfbc      	itt	lt
 800cc84:	580b      	ldrlt	r3, [r1, r0]
 800cc86:	18c0      	addlt	r0, r0, r3
 800cc88:	4770      	bx	lr
	...

0800cc8c <_init>:
 800cc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc8e:	bf00      	nop
 800cc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc92:	bc08      	pop	{r3}
 800cc94:	469e      	mov	lr, r3
 800cc96:	4770      	bx	lr

0800cc98 <_fini>:
 800cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9a:	bf00      	nop
 800cc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc9e:	bc08      	pop	{r3}
 800cca0:	469e      	mov	lr, r3
 800cca2:	4770      	bx	lr
=======
 800cc5e:	bf00      	nop
 800cc60:	3714      	adds	r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bc80      	pop	{r7}
 800cc66:	4770      	bx	lr
 800cc68:	20003fc8 	.word	0x20003fc8
 800cc6c:	20003fd0 	.word	0x20003fd0

0800cc70 <__errno>:
 800cc70:	4b01      	ldr	r3, [pc, #4]	; (800cc78 <__errno+0x8>)
 800cc72:	6818      	ldr	r0, [r3, #0]
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	20000020 	.word	0x20000020

0800cc7c <__libc_init_array>:
 800cc7c:	b570      	push	{r4, r5, r6, lr}
 800cc7e:	2600      	movs	r6, #0
 800cc80:	4d0c      	ldr	r5, [pc, #48]	; (800ccb4 <__libc_init_array+0x38>)
 800cc82:	4c0d      	ldr	r4, [pc, #52]	; (800ccb8 <__libc_init_array+0x3c>)
 800cc84:	1b64      	subs	r4, r4, r5
 800cc86:	10a4      	asrs	r4, r4, #2
 800cc88:	42a6      	cmp	r6, r4
 800cc8a:	d109      	bne.n	800cca0 <__libc_init_array+0x24>
 800cc8c:	f000 fd22 	bl	800d6d4 <_init>
 800cc90:	2600      	movs	r6, #0
 800cc92:	4d0a      	ldr	r5, [pc, #40]	; (800ccbc <__libc_init_array+0x40>)
 800cc94:	4c0a      	ldr	r4, [pc, #40]	; (800ccc0 <__libc_init_array+0x44>)
 800cc96:	1b64      	subs	r4, r4, r5
 800cc98:	10a4      	asrs	r4, r4, #2
 800cc9a:	42a6      	cmp	r6, r4
 800cc9c:	d105      	bne.n	800ccaa <__libc_init_array+0x2e>
 800cc9e:	bd70      	pop	{r4, r5, r6, pc}
 800cca0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cca4:	4798      	blx	r3
 800cca6:	3601      	adds	r6, #1
 800cca8:	e7ee      	b.n	800cc88 <__libc_init_array+0xc>
 800ccaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccae:	4798      	blx	r3
 800ccb0:	3601      	adds	r6, #1
 800ccb2:	e7f2      	b.n	800cc9a <__libc_init_array+0x1e>
 800ccb4:	0800de80 	.word	0x0800de80
 800ccb8:	0800de80 	.word	0x0800de80
 800ccbc:	0800de80 	.word	0x0800de80
 800ccc0:	0800de84 	.word	0x0800de84

0800ccc4 <__itoa>:
 800ccc4:	1e93      	subs	r3, r2, #2
 800ccc6:	2b22      	cmp	r3, #34	; 0x22
 800ccc8:	b510      	push	{r4, lr}
 800ccca:	460c      	mov	r4, r1
 800cccc:	d904      	bls.n	800ccd8 <__itoa+0x14>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	461c      	mov	r4, r3
 800ccd2:	700b      	strb	r3, [r1, #0]
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	bd10      	pop	{r4, pc}
 800ccd8:	2a0a      	cmp	r2, #10
 800ccda:	d109      	bne.n	800ccf0 <__itoa+0x2c>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	da07      	bge.n	800ccf0 <__itoa+0x2c>
 800cce0:	232d      	movs	r3, #45	; 0x2d
 800cce2:	700b      	strb	r3, [r1, #0]
 800cce4:	2101      	movs	r1, #1
 800cce6:	4240      	negs	r0, r0
 800cce8:	4421      	add	r1, r4
 800ccea:	f000 f90b 	bl	800cf04 <__utoa>
 800ccee:	e7f1      	b.n	800ccd4 <__itoa+0x10>
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	e7f9      	b.n	800cce8 <__itoa+0x24>

0800ccf4 <itoa>:
 800ccf4:	f7ff bfe6 	b.w	800ccc4 <__itoa>

0800ccf8 <__retarget_lock_acquire_recursive>:
 800ccf8:	4770      	bx	lr

0800ccfa <__retarget_lock_release_recursive>:
 800ccfa:	4770      	bx	lr

0800ccfc <memcpy>:
 800ccfc:	440a      	add	r2, r1
 800ccfe:	4291      	cmp	r1, r2
 800cd00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cd04:	d100      	bne.n	800cd08 <memcpy+0xc>
 800cd06:	4770      	bx	lr
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd0e:	4291      	cmp	r1, r2
 800cd10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd14:	d1f9      	bne.n	800cd0a <memcpy+0xe>
 800cd16:	bd10      	pop	{r4, pc}

0800cd18 <memset>:
 800cd18:	4603      	mov	r3, r0
 800cd1a:	4402      	add	r2, r0
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d100      	bne.n	800cd22 <memset+0xa>
 800cd20:	4770      	bx	lr
 800cd22:	f803 1b01 	strb.w	r1, [r3], #1
 800cd26:	e7f9      	b.n	800cd1c <memset+0x4>

0800cd28 <sbrk_aligned>:
 800cd28:	b570      	push	{r4, r5, r6, lr}
 800cd2a:	4e0e      	ldr	r6, [pc, #56]	; (800cd64 <sbrk_aligned+0x3c>)
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	6831      	ldr	r1, [r6, #0]
 800cd30:	4605      	mov	r5, r0
 800cd32:	b911      	cbnz	r1, 800cd3a <sbrk_aligned+0x12>
 800cd34:	f000 f88c 	bl	800ce50 <_sbrk_r>
 800cd38:	6030      	str	r0, [r6, #0]
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	f000 f887 	bl	800ce50 <_sbrk_r>
 800cd42:	1c43      	adds	r3, r0, #1
 800cd44:	d00a      	beq.n	800cd5c <sbrk_aligned+0x34>
 800cd46:	1cc4      	adds	r4, r0, #3
 800cd48:	f024 0403 	bic.w	r4, r4, #3
 800cd4c:	42a0      	cmp	r0, r4
 800cd4e:	d007      	beq.n	800cd60 <sbrk_aligned+0x38>
 800cd50:	1a21      	subs	r1, r4, r0
 800cd52:	4628      	mov	r0, r5
 800cd54:	f000 f87c 	bl	800ce50 <_sbrk_r>
 800cd58:	3001      	adds	r0, #1
 800cd5a:	d101      	bne.n	800cd60 <sbrk_aligned+0x38>
 800cd5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cd60:	4620      	mov	r0, r4
 800cd62:	bd70      	pop	{r4, r5, r6, pc}
 800cd64:	20003fe8 	.word	0x20003fe8

0800cd68 <_malloc_r>:
 800cd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6c:	1ccd      	adds	r5, r1, #3
 800cd6e:	f025 0503 	bic.w	r5, r5, #3
 800cd72:	3508      	adds	r5, #8
 800cd74:	2d0c      	cmp	r5, #12
 800cd76:	bf38      	it	cc
 800cd78:	250c      	movcc	r5, #12
 800cd7a:	2d00      	cmp	r5, #0
 800cd7c:	4607      	mov	r7, r0
 800cd7e:	db01      	blt.n	800cd84 <_malloc_r+0x1c>
 800cd80:	42a9      	cmp	r1, r5
 800cd82:	d905      	bls.n	800cd90 <_malloc_r+0x28>
 800cd84:	230c      	movs	r3, #12
 800cd86:	2600      	movs	r6, #0
 800cd88:	603b      	str	r3, [r7, #0]
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd90:	4e2e      	ldr	r6, [pc, #184]	; (800ce4c <_malloc_r+0xe4>)
 800cd92:	f000 f8f9 	bl	800cf88 <__malloc_lock>
 800cd96:	6833      	ldr	r3, [r6, #0]
 800cd98:	461c      	mov	r4, r3
 800cd9a:	bb34      	cbnz	r4, 800cdea <_malloc_r+0x82>
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4638      	mov	r0, r7
 800cda0:	f7ff ffc2 	bl	800cd28 <sbrk_aligned>
 800cda4:	1c43      	adds	r3, r0, #1
 800cda6:	4604      	mov	r4, r0
 800cda8:	d14d      	bne.n	800ce46 <_malloc_r+0xde>
 800cdaa:	6834      	ldr	r4, [r6, #0]
 800cdac:	4626      	mov	r6, r4
 800cdae:	2e00      	cmp	r6, #0
 800cdb0:	d140      	bne.n	800ce34 <_malloc_r+0xcc>
 800cdb2:	6823      	ldr	r3, [r4, #0]
 800cdb4:	4631      	mov	r1, r6
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	eb04 0803 	add.w	r8, r4, r3
 800cdbc:	f000 f848 	bl	800ce50 <_sbrk_r>
 800cdc0:	4580      	cmp	r8, r0
 800cdc2:	d13a      	bne.n	800ce3a <_malloc_r+0xd2>
 800cdc4:	6821      	ldr	r1, [r4, #0]
 800cdc6:	3503      	adds	r5, #3
 800cdc8:	1a6d      	subs	r5, r5, r1
 800cdca:	f025 0503 	bic.w	r5, r5, #3
 800cdce:	3508      	adds	r5, #8
 800cdd0:	2d0c      	cmp	r5, #12
 800cdd2:	bf38      	it	cc
 800cdd4:	250c      	movcc	r5, #12
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	4629      	mov	r1, r5
 800cdda:	f7ff ffa5 	bl	800cd28 <sbrk_aligned>
 800cdde:	3001      	adds	r0, #1
 800cde0:	d02b      	beq.n	800ce3a <_malloc_r+0xd2>
 800cde2:	6823      	ldr	r3, [r4, #0]
 800cde4:	442b      	add	r3, r5
 800cde6:	6023      	str	r3, [r4, #0]
 800cde8:	e00e      	b.n	800ce08 <_malloc_r+0xa0>
 800cdea:	6822      	ldr	r2, [r4, #0]
 800cdec:	1b52      	subs	r2, r2, r5
 800cdee:	d41e      	bmi.n	800ce2e <_malloc_r+0xc6>
 800cdf0:	2a0b      	cmp	r2, #11
 800cdf2:	d916      	bls.n	800ce22 <_malloc_r+0xba>
 800cdf4:	1961      	adds	r1, r4, r5
 800cdf6:	42a3      	cmp	r3, r4
 800cdf8:	6025      	str	r5, [r4, #0]
 800cdfa:	bf18      	it	ne
 800cdfc:	6059      	strne	r1, [r3, #4]
 800cdfe:	6863      	ldr	r3, [r4, #4]
 800ce00:	bf08      	it	eq
 800ce02:	6031      	streq	r1, [r6, #0]
 800ce04:	5162      	str	r2, [r4, r5]
 800ce06:	604b      	str	r3, [r1, #4]
 800ce08:	4638      	mov	r0, r7
 800ce0a:	f104 060b 	add.w	r6, r4, #11
 800ce0e:	f000 f8c1 	bl	800cf94 <__malloc_unlock>
 800ce12:	f026 0607 	bic.w	r6, r6, #7
 800ce16:	1d23      	adds	r3, r4, #4
 800ce18:	1af2      	subs	r2, r6, r3
 800ce1a:	d0b6      	beq.n	800cd8a <_malloc_r+0x22>
 800ce1c:	1b9b      	subs	r3, r3, r6
 800ce1e:	50a3      	str	r3, [r4, r2]
 800ce20:	e7b3      	b.n	800cd8a <_malloc_r+0x22>
 800ce22:	6862      	ldr	r2, [r4, #4]
 800ce24:	42a3      	cmp	r3, r4
 800ce26:	bf0c      	ite	eq
 800ce28:	6032      	streq	r2, [r6, #0]
 800ce2a:	605a      	strne	r2, [r3, #4]
 800ce2c:	e7ec      	b.n	800ce08 <_malloc_r+0xa0>
 800ce2e:	4623      	mov	r3, r4
 800ce30:	6864      	ldr	r4, [r4, #4]
 800ce32:	e7b2      	b.n	800cd9a <_malloc_r+0x32>
 800ce34:	4634      	mov	r4, r6
 800ce36:	6876      	ldr	r6, [r6, #4]
 800ce38:	e7b9      	b.n	800cdae <_malloc_r+0x46>
 800ce3a:	230c      	movs	r3, #12
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	603b      	str	r3, [r7, #0]
 800ce40:	f000 f8a8 	bl	800cf94 <__malloc_unlock>
 800ce44:	e7a1      	b.n	800cd8a <_malloc_r+0x22>
 800ce46:	6025      	str	r5, [r4, #0]
 800ce48:	e7de      	b.n	800ce08 <_malloc_r+0xa0>
 800ce4a:	bf00      	nop
 800ce4c:	20003fe4 	.word	0x20003fe4

0800ce50 <_sbrk_r>:
 800ce50:	b538      	push	{r3, r4, r5, lr}
 800ce52:	2300      	movs	r3, #0
 800ce54:	4d05      	ldr	r5, [pc, #20]	; (800ce6c <_sbrk_r+0x1c>)
 800ce56:	4604      	mov	r4, r0
 800ce58:	4608      	mov	r0, r1
 800ce5a:	602b      	str	r3, [r5, #0]
 800ce5c:	f7f7 fcf6 	bl	800484c <_sbrk>
 800ce60:	1c43      	adds	r3, r0, #1
 800ce62:	d102      	bne.n	800ce6a <_sbrk_r+0x1a>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	b103      	cbz	r3, 800ce6a <_sbrk_r+0x1a>
 800ce68:	6023      	str	r3, [r4, #0]
 800ce6a:	bd38      	pop	{r3, r4, r5, pc}
 800ce6c:	20003fec 	.word	0x20003fec

0800ce70 <siprintf>:
 800ce70:	b40e      	push	{r1, r2, r3}
 800ce72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce76:	b500      	push	{lr}
 800ce78:	b09c      	sub	sp, #112	; 0x70
 800ce7a:	ab1d      	add	r3, sp, #116	; 0x74
 800ce7c:	9002      	str	r0, [sp, #8]
 800ce7e:	9006      	str	r0, [sp, #24]
 800ce80:	9107      	str	r1, [sp, #28]
 800ce82:	9104      	str	r1, [sp, #16]
 800ce84:	4808      	ldr	r0, [pc, #32]	; (800cea8 <siprintf+0x38>)
 800ce86:	4909      	ldr	r1, [pc, #36]	; (800ceac <siprintf+0x3c>)
 800ce88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce8c:	9105      	str	r1, [sp, #20]
 800ce8e:	6800      	ldr	r0, [r0, #0]
 800ce90:	a902      	add	r1, sp, #8
 800ce92:	9301      	str	r3, [sp, #4]
 800ce94:	f000 f928 	bl	800d0e8 <_svfiprintf_r>
 800ce98:	2200      	movs	r2, #0
 800ce9a:	9b02      	ldr	r3, [sp, #8]
 800ce9c:	701a      	strb	r2, [r3, #0]
 800ce9e:	b01c      	add	sp, #112	; 0x70
 800cea0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cea4:	b003      	add	sp, #12
 800cea6:	4770      	bx	lr
 800cea8:	20000020 	.word	0x20000020
 800ceac:	ffff0208 	.word	0xffff0208

0800ceb0 <strcat>:
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	7814      	ldrb	r4, [r2, #0]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	3201      	adds	r2, #1
 800ceba:	2c00      	cmp	r4, #0
 800cebc:	d1fa      	bne.n	800ceb4 <strcat+0x4>
 800cebe:	3b01      	subs	r3, #1
 800cec0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cec4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cec8:	2a00      	cmp	r2, #0
 800ceca:	d1f9      	bne.n	800cec0 <strcat+0x10>
 800cecc:	bd10      	pop	{r4, pc}

0800cece <strcpy>:
 800cece:	4603      	mov	r3, r0
 800ced0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ced4:	f803 2b01 	strb.w	r2, [r3], #1
 800ced8:	2a00      	cmp	r2, #0
 800ceda:	d1f9      	bne.n	800ced0 <strcpy+0x2>
 800cedc:	4770      	bx	lr

0800cede <strncat>:
 800cede:	b530      	push	{r4, r5, lr}
 800cee0:	4604      	mov	r4, r0
 800cee2:	7825      	ldrb	r5, [r4, #0]
 800cee4:	4623      	mov	r3, r4
 800cee6:	3401      	adds	r4, #1
 800cee8:	2d00      	cmp	r5, #0
 800ceea:	d1fa      	bne.n	800cee2 <strncat+0x4>
 800ceec:	3a01      	subs	r2, #1
 800ceee:	d304      	bcc.n	800cefa <strncat+0x1c>
 800cef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cef4:	f803 4b01 	strb.w	r4, [r3], #1
 800cef8:	b904      	cbnz	r4, 800cefc <strncat+0x1e>
 800cefa:	bd30      	pop	{r4, r5, pc}
 800cefc:	2a00      	cmp	r2, #0
 800cefe:	d1f5      	bne.n	800ceec <strncat+0xe>
 800cf00:	701a      	strb	r2, [r3, #0]
 800cf02:	e7f3      	b.n	800ceec <strncat+0xe>

0800cf04 <__utoa>:
 800cf04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf06:	b08b      	sub	sp, #44	; 0x2c
 800cf08:	4605      	mov	r5, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	466e      	mov	r6, sp
 800cf0e:	4c1d      	ldr	r4, [pc, #116]	; (800cf84 <__utoa+0x80>)
 800cf10:	f104 0c20 	add.w	ip, r4, #32
 800cf14:	4637      	mov	r7, r6
 800cf16:	6820      	ldr	r0, [r4, #0]
 800cf18:	6861      	ldr	r1, [r4, #4]
 800cf1a:	3408      	adds	r4, #8
 800cf1c:	c703      	stmia	r7!, {r0, r1}
 800cf1e:	4564      	cmp	r4, ip
 800cf20:	463e      	mov	r6, r7
 800cf22:	d1f7      	bne.n	800cf14 <__utoa+0x10>
 800cf24:	7921      	ldrb	r1, [r4, #4]
 800cf26:	6820      	ldr	r0, [r4, #0]
 800cf28:	7139      	strb	r1, [r7, #4]
 800cf2a:	1e91      	subs	r1, r2, #2
 800cf2c:	2922      	cmp	r1, #34	; 0x22
 800cf2e:	6038      	str	r0, [r7, #0]
 800cf30:	f04f 0100 	mov.w	r1, #0
 800cf34:	d904      	bls.n	800cf40 <__utoa+0x3c>
 800cf36:	7019      	strb	r1, [r3, #0]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	b00b      	add	sp, #44	; 0x2c
 800cf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf40:	1e58      	subs	r0, r3, #1
 800cf42:	4684      	mov	ip, r0
 800cf44:	fbb5 f7f2 	udiv	r7, r5, r2
 800cf48:	fb02 5617 	mls	r6, r2, r7, r5
 800cf4c:	3628      	adds	r6, #40	; 0x28
 800cf4e:	446e      	add	r6, sp
 800cf50:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cf54:	460c      	mov	r4, r1
 800cf56:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cf5a:	462e      	mov	r6, r5
 800cf5c:	42b2      	cmp	r2, r6
 800cf5e:	463d      	mov	r5, r7
 800cf60:	f101 0101 	add.w	r1, r1, #1
 800cf64:	d9ee      	bls.n	800cf44 <__utoa+0x40>
 800cf66:	2200      	movs	r2, #0
 800cf68:	545a      	strb	r2, [r3, r1]
 800cf6a:	1919      	adds	r1, r3, r4
 800cf6c:	1aa5      	subs	r5, r4, r2
 800cf6e:	42aa      	cmp	r2, r5
 800cf70:	dae3      	bge.n	800cf3a <__utoa+0x36>
 800cf72:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cf76:	780e      	ldrb	r6, [r1, #0]
 800cf78:	3201      	adds	r2, #1
 800cf7a:	7006      	strb	r6, [r0, #0]
 800cf7c:	f801 5901 	strb.w	r5, [r1], #-1
 800cf80:	e7f4      	b.n	800cf6c <__utoa+0x68>
 800cf82:	bf00      	nop
 800cf84:	0800de20 	.word	0x0800de20

0800cf88 <__malloc_lock>:
 800cf88:	4801      	ldr	r0, [pc, #4]	; (800cf90 <__malloc_lock+0x8>)
 800cf8a:	f7ff beb5 	b.w	800ccf8 <__retarget_lock_acquire_recursive>
 800cf8e:	bf00      	nop
 800cf90:	20003fe0 	.word	0x20003fe0

0800cf94 <__malloc_unlock>:
 800cf94:	4801      	ldr	r0, [pc, #4]	; (800cf9c <__malloc_unlock+0x8>)
 800cf96:	f7ff beb0 	b.w	800ccfa <__retarget_lock_release_recursive>
 800cf9a:	bf00      	nop
 800cf9c:	20003fe0 	.word	0x20003fe0

0800cfa0 <_free_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	2900      	cmp	r1, #0
 800cfa6:	d040      	beq.n	800d02a <_free_r+0x8a>
 800cfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfac:	1f0c      	subs	r4, r1, #4
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfb8      	it	lt
 800cfb2:	18e4      	addlt	r4, r4, r3
 800cfb4:	f7ff ffe8 	bl	800cf88 <__malloc_lock>
 800cfb8:	4a1c      	ldr	r2, [pc, #112]	; (800d02c <_free_r+0x8c>)
 800cfba:	6813      	ldr	r3, [r2, #0]
 800cfbc:	b933      	cbnz	r3, 800cfcc <_free_r+0x2c>
 800cfbe:	6063      	str	r3, [r4, #4]
 800cfc0:	6014      	str	r4, [r2, #0]
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfc8:	f7ff bfe4 	b.w	800cf94 <__malloc_unlock>
 800cfcc:	42a3      	cmp	r3, r4
 800cfce:	d908      	bls.n	800cfe2 <_free_r+0x42>
 800cfd0:	6820      	ldr	r0, [r4, #0]
 800cfd2:	1821      	adds	r1, r4, r0
 800cfd4:	428b      	cmp	r3, r1
 800cfd6:	bf01      	itttt	eq
 800cfd8:	6819      	ldreq	r1, [r3, #0]
 800cfda:	685b      	ldreq	r3, [r3, #4]
 800cfdc:	1809      	addeq	r1, r1, r0
 800cfde:	6021      	streq	r1, [r4, #0]
 800cfe0:	e7ed      	b.n	800cfbe <_free_r+0x1e>
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	b10b      	cbz	r3, 800cfec <_free_r+0x4c>
 800cfe8:	42a3      	cmp	r3, r4
 800cfea:	d9fa      	bls.n	800cfe2 <_free_r+0x42>
 800cfec:	6811      	ldr	r1, [r2, #0]
 800cfee:	1850      	adds	r0, r2, r1
 800cff0:	42a0      	cmp	r0, r4
 800cff2:	d10b      	bne.n	800d00c <_free_r+0x6c>
 800cff4:	6820      	ldr	r0, [r4, #0]
 800cff6:	4401      	add	r1, r0
 800cff8:	1850      	adds	r0, r2, r1
 800cffa:	4283      	cmp	r3, r0
 800cffc:	6011      	str	r1, [r2, #0]
 800cffe:	d1e0      	bne.n	800cfc2 <_free_r+0x22>
 800d000:	6818      	ldr	r0, [r3, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	4401      	add	r1, r0
 800d006:	6011      	str	r1, [r2, #0]
 800d008:	6053      	str	r3, [r2, #4]
 800d00a:	e7da      	b.n	800cfc2 <_free_r+0x22>
 800d00c:	d902      	bls.n	800d014 <_free_r+0x74>
 800d00e:	230c      	movs	r3, #12
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	e7d6      	b.n	800cfc2 <_free_r+0x22>
 800d014:	6820      	ldr	r0, [r4, #0]
 800d016:	1821      	adds	r1, r4, r0
 800d018:	428b      	cmp	r3, r1
 800d01a:	bf01      	itttt	eq
 800d01c:	6819      	ldreq	r1, [r3, #0]
 800d01e:	685b      	ldreq	r3, [r3, #4]
 800d020:	1809      	addeq	r1, r1, r0
 800d022:	6021      	streq	r1, [r4, #0]
 800d024:	6063      	str	r3, [r4, #4]
 800d026:	6054      	str	r4, [r2, #4]
 800d028:	e7cb      	b.n	800cfc2 <_free_r+0x22>
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20003fe4 	.word	0x20003fe4

0800d030 <__ssputs_r>:
 800d030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d034:	688e      	ldr	r6, [r1, #8]
 800d036:	4682      	mov	sl, r0
 800d038:	429e      	cmp	r6, r3
 800d03a:	460c      	mov	r4, r1
 800d03c:	4690      	mov	r8, r2
 800d03e:	461f      	mov	r7, r3
 800d040:	d838      	bhi.n	800d0b4 <__ssputs_r+0x84>
 800d042:	898a      	ldrh	r2, [r1, #12]
 800d044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d048:	d032      	beq.n	800d0b0 <__ssputs_r+0x80>
 800d04a:	6825      	ldr	r5, [r4, #0]
 800d04c:	6909      	ldr	r1, [r1, #16]
 800d04e:	3301      	adds	r3, #1
 800d050:	eba5 0901 	sub.w	r9, r5, r1
 800d054:	6965      	ldr	r5, [r4, #20]
 800d056:	444b      	add	r3, r9
 800d058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d05c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d060:	106d      	asrs	r5, r5, #1
 800d062:	429d      	cmp	r5, r3
 800d064:	bf38      	it	cc
 800d066:	461d      	movcc	r5, r3
 800d068:	0553      	lsls	r3, r2, #21
 800d06a:	d531      	bpl.n	800d0d0 <__ssputs_r+0xa0>
 800d06c:	4629      	mov	r1, r5
 800d06e:	f7ff fe7b 	bl	800cd68 <_malloc_r>
 800d072:	4606      	mov	r6, r0
 800d074:	b950      	cbnz	r0, 800d08c <__ssputs_r+0x5c>
 800d076:	230c      	movs	r3, #12
 800d078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d07c:	f8ca 3000 	str.w	r3, [sl]
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d086:	81a3      	strh	r3, [r4, #12]
 800d088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d08c:	464a      	mov	r2, r9
 800d08e:	6921      	ldr	r1, [r4, #16]
 800d090:	f7ff fe34 	bl	800ccfc <memcpy>
 800d094:	89a3      	ldrh	r3, [r4, #12]
 800d096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d09e:	81a3      	strh	r3, [r4, #12]
 800d0a0:	6126      	str	r6, [r4, #16]
 800d0a2:	444e      	add	r6, r9
 800d0a4:	6026      	str	r6, [r4, #0]
 800d0a6:	463e      	mov	r6, r7
 800d0a8:	6165      	str	r5, [r4, #20]
 800d0aa:	eba5 0509 	sub.w	r5, r5, r9
 800d0ae:	60a5      	str	r5, [r4, #8]
 800d0b0:	42be      	cmp	r6, r7
 800d0b2:	d900      	bls.n	800d0b6 <__ssputs_r+0x86>
 800d0b4:	463e      	mov	r6, r7
 800d0b6:	4632      	mov	r2, r6
 800d0b8:	4641      	mov	r1, r8
 800d0ba:	6820      	ldr	r0, [r4, #0]
 800d0bc:	f000 fab8 	bl	800d630 <memmove>
 800d0c0:	68a3      	ldr	r3, [r4, #8]
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	1b9b      	subs	r3, r3, r6
 800d0c6:	60a3      	str	r3, [r4, #8]
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	4433      	add	r3, r6
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	e7db      	b.n	800d088 <__ssputs_r+0x58>
 800d0d0:	462a      	mov	r2, r5
 800d0d2:	f000 fac7 	bl	800d664 <_realloc_r>
 800d0d6:	4606      	mov	r6, r0
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	d1e1      	bne.n	800d0a0 <__ssputs_r+0x70>
 800d0dc:	4650      	mov	r0, sl
 800d0de:	6921      	ldr	r1, [r4, #16]
 800d0e0:	f7ff ff5e 	bl	800cfa0 <_free_r>
 800d0e4:	e7c7      	b.n	800d076 <__ssputs_r+0x46>
	...

0800d0e8 <_svfiprintf_r>:
 800d0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ec:	4698      	mov	r8, r3
 800d0ee:	898b      	ldrh	r3, [r1, #12]
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	061b      	lsls	r3, r3, #24
 800d0f4:	460d      	mov	r5, r1
 800d0f6:	4614      	mov	r4, r2
 800d0f8:	b09d      	sub	sp, #116	; 0x74
 800d0fa:	d50e      	bpl.n	800d11a <_svfiprintf_r+0x32>
 800d0fc:	690b      	ldr	r3, [r1, #16]
 800d0fe:	b963      	cbnz	r3, 800d11a <_svfiprintf_r+0x32>
 800d100:	2140      	movs	r1, #64	; 0x40
 800d102:	f7ff fe31 	bl	800cd68 <_malloc_r>
 800d106:	6028      	str	r0, [r5, #0]
 800d108:	6128      	str	r0, [r5, #16]
 800d10a:	b920      	cbnz	r0, 800d116 <_svfiprintf_r+0x2e>
 800d10c:	230c      	movs	r3, #12
 800d10e:	603b      	str	r3, [r7, #0]
 800d110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d114:	e0d1      	b.n	800d2ba <_svfiprintf_r+0x1d2>
 800d116:	2340      	movs	r3, #64	; 0x40
 800d118:	616b      	str	r3, [r5, #20]
 800d11a:	2300      	movs	r3, #0
 800d11c:	9309      	str	r3, [sp, #36]	; 0x24
 800d11e:	2320      	movs	r3, #32
 800d120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d124:	2330      	movs	r3, #48	; 0x30
 800d126:	f04f 0901 	mov.w	r9, #1
 800d12a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d12e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d2d4 <_svfiprintf_r+0x1ec>
 800d132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d136:	4623      	mov	r3, r4
 800d138:	469a      	mov	sl, r3
 800d13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d13e:	b10a      	cbz	r2, 800d144 <_svfiprintf_r+0x5c>
 800d140:	2a25      	cmp	r2, #37	; 0x25
 800d142:	d1f9      	bne.n	800d138 <_svfiprintf_r+0x50>
 800d144:	ebba 0b04 	subs.w	fp, sl, r4
 800d148:	d00b      	beq.n	800d162 <_svfiprintf_r+0x7a>
 800d14a:	465b      	mov	r3, fp
 800d14c:	4622      	mov	r2, r4
 800d14e:	4629      	mov	r1, r5
 800d150:	4638      	mov	r0, r7
 800d152:	f7ff ff6d 	bl	800d030 <__ssputs_r>
 800d156:	3001      	adds	r0, #1
 800d158:	f000 80aa 	beq.w	800d2b0 <_svfiprintf_r+0x1c8>
 800d15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d15e:	445a      	add	r2, fp
 800d160:	9209      	str	r2, [sp, #36]	; 0x24
 800d162:	f89a 3000 	ldrb.w	r3, [sl]
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 80a2 	beq.w	800d2b0 <_svfiprintf_r+0x1c8>
 800d16c:	2300      	movs	r3, #0
 800d16e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d176:	f10a 0a01 	add.w	sl, sl, #1
 800d17a:	9304      	str	r3, [sp, #16]
 800d17c:	9307      	str	r3, [sp, #28]
 800d17e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d182:	931a      	str	r3, [sp, #104]	; 0x68
 800d184:	4654      	mov	r4, sl
 800d186:	2205      	movs	r2, #5
 800d188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d18c:	4851      	ldr	r0, [pc, #324]	; (800d2d4 <_svfiprintf_r+0x1ec>)
 800d18e:	f000 fa41 	bl	800d614 <memchr>
 800d192:	9a04      	ldr	r2, [sp, #16]
 800d194:	b9d8      	cbnz	r0, 800d1ce <_svfiprintf_r+0xe6>
 800d196:	06d0      	lsls	r0, r2, #27
 800d198:	bf44      	itt	mi
 800d19a:	2320      	movmi	r3, #32
 800d19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1a0:	0711      	lsls	r1, r2, #28
 800d1a2:	bf44      	itt	mi
 800d1a4:	232b      	movmi	r3, #43	; 0x2b
 800d1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d1b0:	d015      	beq.n	800d1de <_svfiprintf_r+0xf6>
 800d1b2:	4654      	mov	r4, sl
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	f04f 0c0a 	mov.w	ip, #10
 800d1ba:	9a07      	ldr	r2, [sp, #28]
 800d1bc:	4621      	mov	r1, r4
 800d1be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1c2:	3b30      	subs	r3, #48	; 0x30
 800d1c4:	2b09      	cmp	r3, #9
 800d1c6:	d94e      	bls.n	800d266 <_svfiprintf_r+0x17e>
 800d1c8:	b1b0      	cbz	r0, 800d1f8 <_svfiprintf_r+0x110>
 800d1ca:	9207      	str	r2, [sp, #28]
 800d1cc:	e014      	b.n	800d1f8 <_svfiprintf_r+0x110>
 800d1ce:	eba0 0308 	sub.w	r3, r0, r8
 800d1d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	46a2      	mov	sl, r4
 800d1da:	9304      	str	r3, [sp, #16]
 800d1dc:	e7d2      	b.n	800d184 <_svfiprintf_r+0x9c>
 800d1de:	9b03      	ldr	r3, [sp, #12]
 800d1e0:	1d19      	adds	r1, r3, #4
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	9103      	str	r1, [sp, #12]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	bfbb      	ittet	lt
 800d1ea:	425b      	neglt	r3, r3
 800d1ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d1f0:	9307      	strge	r3, [sp, #28]
 800d1f2:	9307      	strlt	r3, [sp, #28]
 800d1f4:	bfb8      	it	lt
 800d1f6:	9204      	strlt	r2, [sp, #16]
 800d1f8:	7823      	ldrb	r3, [r4, #0]
 800d1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d1fc:	d10c      	bne.n	800d218 <_svfiprintf_r+0x130>
 800d1fe:	7863      	ldrb	r3, [r4, #1]
 800d200:	2b2a      	cmp	r3, #42	; 0x2a
 800d202:	d135      	bne.n	800d270 <_svfiprintf_r+0x188>
 800d204:	9b03      	ldr	r3, [sp, #12]
 800d206:	3402      	adds	r4, #2
 800d208:	1d1a      	adds	r2, r3, #4
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	9203      	str	r2, [sp, #12]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	bfb8      	it	lt
 800d212:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d216:	9305      	str	r3, [sp, #20]
 800d218:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d2d8 <_svfiprintf_r+0x1f0>
 800d21c:	2203      	movs	r2, #3
 800d21e:	4650      	mov	r0, sl
 800d220:	7821      	ldrb	r1, [r4, #0]
 800d222:	f000 f9f7 	bl	800d614 <memchr>
 800d226:	b140      	cbz	r0, 800d23a <_svfiprintf_r+0x152>
 800d228:	2340      	movs	r3, #64	; 0x40
 800d22a:	eba0 000a 	sub.w	r0, r0, sl
 800d22e:	fa03 f000 	lsl.w	r0, r3, r0
 800d232:	9b04      	ldr	r3, [sp, #16]
 800d234:	3401      	adds	r4, #1
 800d236:	4303      	orrs	r3, r0
 800d238:	9304      	str	r3, [sp, #16]
 800d23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d23e:	2206      	movs	r2, #6
 800d240:	4826      	ldr	r0, [pc, #152]	; (800d2dc <_svfiprintf_r+0x1f4>)
 800d242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d246:	f000 f9e5 	bl	800d614 <memchr>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d038      	beq.n	800d2c0 <_svfiprintf_r+0x1d8>
 800d24e:	4b24      	ldr	r3, [pc, #144]	; (800d2e0 <_svfiprintf_r+0x1f8>)
 800d250:	bb1b      	cbnz	r3, 800d29a <_svfiprintf_r+0x1b2>
 800d252:	9b03      	ldr	r3, [sp, #12]
 800d254:	3307      	adds	r3, #7
 800d256:	f023 0307 	bic.w	r3, r3, #7
 800d25a:	3308      	adds	r3, #8
 800d25c:	9303      	str	r3, [sp, #12]
 800d25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d260:	4433      	add	r3, r6
 800d262:	9309      	str	r3, [sp, #36]	; 0x24
 800d264:	e767      	b.n	800d136 <_svfiprintf_r+0x4e>
 800d266:	460c      	mov	r4, r1
 800d268:	2001      	movs	r0, #1
 800d26a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d26e:	e7a5      	b.n	800d1bc <_svfiprintf_r+0xd4>
 800d270:	2300      	movs	r3, #0
 800d272:	f04f 0c0a 	mov.w	ip, #10
 800d276:	4619      	mov	r1, r3
 800d278:	3401      	adds	r4, #1
 800d27a:	9305      	str	r3, [sp, #20]
 800d27c:	4620      	mov	r0, r4
 800d27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d282:	3a30      	subs	r2, #48	; 0x30
 800d284:	2a09      	cmp	r2, #9
 800d286:	d903      	bls.n	800d290 <_svfiprintf_r+0x1a8>
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d0c5      	beq.n	800d218 <_svfiprintf_r+0x130>
 800d28c:	9105      	str	r1, [sp, #20]
 800d28e:	e7c3      	b.n	800d218 <_svfiprintf_r+0x130>
 800d290:	4604      	mov	r4, r0
 800d292:	2301      	movs	r3, #1
 800d294:	fb0c 2101 	mla	r1, ip, r1, r2
 800d298:	e7f0      	b.n	800d27c <_svfiprintf_r+0x194>
 800d29a:	ab03      	add	r3, sp, #12
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	462a      	mov	r2, r5
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	4b10      	ldr	r3, [pc, #64]	; (800d2e4 <_svfiprintf_r+0x1fc>)
 800d2a4:	a904      	add	r1, sp, #16
 800d2a6:	f3af 8000 	nop.w
 800d2aa:	1c42      	adds	r2, r0, #1
 800d2ac:	4606      	mov	r6, r0
 800d2ae:	d1d6      	bne.n	800d25e <_svfiprintf_r+0x176>
 800d2b0:	89ab      	ldrh	r3, [r5, #12]
 800d2b2:	065b      	lsls	r3, r3, #25
 800d2b4:	f53f af2c 	bmi.w	800d110 <_svfiprintf_r+0x28>
 800d2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2ba:	b01d      	add	sp, #116	; 0x74
 800d2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c0:	ab03      	add	r3, sp, #12
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	4638      	mov	r0, r7
 800d2c8:	4b06      	ldr	r3, [pc, #24]	; (800d2e4 <_svfiprintf_r+0x1fc>)
 800d2ca:	a904      	add	r1, sp, #16
 800d2cc:	f000 f87c 	bl	800d3c8 <_printf_i>
 800d2d0:	e7eb      	b.n	800d2aa <_svfiprintf_r+0x1c2>
 800d2d2:	bf00      	nop
 800d2d4:	0800de45 	.word	0x0800de45
 800d2d8:	0800de4b 	.word	0x0800de4b
 800d2dc:	0800de4f 	.word	0x0800de4f
 800d2e0:	00000000 	.word	0x00000000
 800d2e4:	0800d031 	.word	0x0800d031

0800d2e8 <_printf_common>:
 800d2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ec:	4616      	mov	r6, r2
 800d2ee:	4699      	mov	r9, r3
 800d2f0:	688a      	ldr	r2, [r1, #8]
 800d2f2:	690b      	ldr	r3, [r1, #16]
 800d2f4:	4607      	mov	r7, r0
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	bfb8      	it	lt
 800d2fa:	4613      	movlt	r3, r2
 800d2fc:	6033      	str	r3, [r6, #0]
 800d2fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d302:	460c      	mov	r4, r1
 800d304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d308:	b10a      	cbz	r2, 800d30e <_printf_common+0x26>
 800d30a:	3301      	adds	r3, #1
 800d30c:	6033      	str	r3, [r6, #0]
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	0699      	lsls	r1, r3, #26
 800d312:	bf42      	ittt	mi
 800d314:	6833      	ldrmi	r3, [r6, #0]
 800d316:	3302      	addmi	r3, #2
 800d318:	6033      	strmi	r3, [r6, #0]
 800d31a:	6825      	ldr	r5, [r4, #0]
 800d31c:	f015 0506 	ands.w	r5, r5, #6
 800d320:	d106      	bne.n	800d330 <_printf_common+0x48>
 800d322:	f104 0a19 	add.w	sl, r4, #25
 800d326:	68e3      	ldr	r3, [r4, #12]
 800d328:	6832      	ldr	r2, [r6, #0]
 800d32a:	1a9b      	subs	r3, r3, r2
 800d32c:	42ab      	cmp	r3, r5
 800d32e:	dc28      	bgt.n	800d382 <_printf_common+0x9a>
 800d330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d334:	1e13      	subs	r3, r2, #0
 800d336:	6822      	ldr	r2, [r4, #0]
 800d338:	bf18      	it	ne
 800d33a:	2301      	movne	r3, #1
 800d33c:	0692      	lsls	r2, r2, #26
 800d33e:	d42d      	bmi.n	800d39c <_printf_common+0xb4>
 800d340:	4649      	mov	r1, r9
 800d342:	4638      	mov	r0, r7
 800d344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d348:	47c0      	blx	r8
 800d34a:	3001      	adds	r0, #1
 800d34c:	d020      	beq.n	800d390 <_printf_common+0xa8>
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	68e5      	ldr	r5, [r4, #12]
 800d352:	f003 0306 	and.w	r3, r3, #6
 800d356:	2b04      	cmp	r3, #4
 800d358:	bf18      	it	ne
 800d35a:	2500      	movne	r5, #0
 800d35c:	6832      	ldr	r2, [r6, #0]
 800d35e:	f04f 0600 	mov.w	r6, #0
 800d362:	68a3      	ldr	r3, [r4, #8]
 800d364:	bf08      	it	eq
 800d366:	1aad      	subeq	r5, r5, r2
 800d368:	6922      	ldr	r2, [r4, #16]
 800d36a:	bf08      	it	eq
 800d36c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d370:	4293      	cmp	r3, r2
 800d372:	bfc4      	itt	gt
 800d374:	1a9b      	subgt	r3, r3, r2
 800d376:	18ed      	addgt	r5, r5, r3
 800d378:	341a      	adds	r4, #26
 800d37a:	42b5      	cmp	r5, r6
 800d37c:	d11a      	bne.n	800d3b4 <_printf_common+0xcc>
 800d37e:	2000      	movs	r0, #0
 800d380:	e008      	b.n	800d394 <_printf_common+0xac>
 800d382:	2301      	movs	r3, #1
 800d384:	4652      	mov	r2, sl
 800d386:	4649      	mov	r1, r9
 800d388:	4638      	mov	r0, r7
 800d38a:	47c0      	blx	r8
 800d38c:	3001      	adds	r0, #1
 800d38e:	d103      	bne.n	800d398 <_printf_common+0xb0>
 800d390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d398:	3501      	adds	r5, #1
 800d39a:	e7c4      	b.n	800d326 <_printf_common+0x3e>
 800d39c:	2030      	movs	r0, #48	; 0x30
 800d39e:	18e1      	adds	r1, r4, r3
 800d3a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3a4:	1c5a      	adds	r2, r3, #1
 800d3a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3aa:	4422      	add	r2, r4
 800d3ac:	3302      	adds	r3, #2
 800d3ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3b2:	e7c5      	b.n	800d340 <_printf_common+0x58>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	4622      	mov	r2, r4
 800d3b8:	4649      	mov	r1, r9
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	47c0      	blx	r8
 800d3be:	3001      	adds	r0, #1
 800d3c0:	d0e6      	beq.n	800d390 <_printf_common+0xa8>
 800d3c2:	3601      	adds	r6, #1
 800d3c4:	e7d9      	b.n	800d37a <_printf_common+0x92>
	...

0800d3c8 <_printf_i>:
 800d3c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3cc:	7e0f      	ldrb	r7, [r1, #24]
 800d3ce:	4691      	mov	r9, r2
 800d3d0:	2f78      	cmp	r7, #120	; 0x78
 800d3d2:	4680      	mov	r8, r0
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	469a      	mov	sl, r3
 800d3d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d3de:	d807      	bhi.n	800d3f0 <_printf_i+0x28>
 800d3e0:	2f62      	cmp	r7, #98	; 0x62
 800d3e2:	d80a      	bhi.n	800d3fa <_printf_i+0x32>
 800d3e4:	2f00      	cmp	r7, #0
 800d3e6:	f000 80d9 	beq.w	800d59c <_printf_i+0x1d4>
 800d3ea:	2f58      	cmp	r7, #88	; 0x58
 800d3ec:	f000 80a4 	beq.w	800d538 <_printf_i+0x170>
 800d3f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3f8:	e03a      	b.n	800d470 <_printf_i+0xa8>
 800d3fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3fe:	2b15      	cmp	r3, #21
 800d400:	d8f6      	bhi.n	800d3f0 <_printf_i+0x28>
 800d402:	a101      	add	r1, pc, #4	; (adr r1, 800d408 <_printf_i+0x40>)
 800d404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d408:	0800d461 	.word	0x0800d461
 800d40c:	0800d475 	.word	0x0800d475
 800d410:	0800d3f1 	.word	0x0800d3f1
 800d414:	0800d3f1 	.word	0x0800d3f1
 800d418:	0800d3f1 	.word	0x0800d3f1
 800d41c:	0800d3f1 	.word	0x0800d3f1
 800d420:	0800d475 	.word	0x0800d475
 800d424:	0800d3f1 	.word	0x0800d3f1
 800d428:	0800d3f1 	.word	0x0800d3f1
 800d42c:	0800d3f1 	.word	0x0800d3f1
 800d430:	0800d3f1 	.word	0x0800d3f1
 800d434:	0800d583 	.word	0x0800d583
 800d438:	0800d4a5 	.word	0x0800d4a5
 800d43c:	0800d565 	.word	0x0800d565
 800d440:	0800d3f1 	.word	0x0800d3f1
 800d444:	0800d3f1 	.word	0x0800d3f1
 800d448:	0800d5a5 	.word	0x0800d5a5
 800d44c:	0800d3f1 	.word	0x0800d3f1
 800d450:	0800d4a5 	.word	0x0800d4a5
 800d454:	0800d3f1 	.word	0x0800d3f1
 800d458:	0800d3f1 	.word	0x0800d3f1
 800d45c:	0800d56d 	.word	0x0800d56d
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	1d1a      	adds	r2, r3, #4
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	602a      	str	r2, [r5, #0]
 800d468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d46c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d470:	2301      	movs	r3, #1
 800d472:	e0a4      	b.n	800d5be <_printf_i+0x1f6>
 800d474:	6820      	ldr	r0, [r4, #0]
 800d476:	6829      	ldr	r1, [r5, #0]
 800d478:	0606      	lsls	r6, r0, #24
 800d47a:	f101 0304 	add.w	r3, r1, #4
 800d47e:	d50a      	bpl.n	800d496 <_printf_i+0xce>
 800d480:	680e      	ldr	r6, [r1, #0]
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	2e00      	cmp	r6, #0
 800d486:	da03      	bge.n	800d490 <_printf_i+0xc8>
 800d488:	232d      	movs	r3, #45	; 0x2d
 800d48a:	4276      	negs	r6, r6
 800d48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d490:	230a      	movs	r3, #10
 800d492:	485e      	ldr	r0, [pc, #376]	; (800d60c <_printf_i+0x244>)
 800d494:	e019      	b.n	800d4ca <_printf_i+0x102>
 800d496:	680e      	ldr	r6, [r1, #0]
 800d498:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d49c:	602b      	str	r3, [r5, #0]
 800d49e:	bf18      	it	ne
 800d4a0:	b236      	sxthne	r6, r6
 800d4a2:	e7ef      	b.n	800d484 <_printf_i+0xbc>
 800d4a4:	682b      	ldr	r3, [r5, #0]
 800d4a6:	6820      	ldr	r0, [r4, #0]
 800d4a8:	1d19      	adds	r1, r3, #4
 800d4aa:	6029      	str	r1, [r5, #0]
 800d4ac:	0601      	lsls	r1, r0, #24
 800d4ae:	d501      	bpl.n	800d4b4 <_printf_i+0xec>
 800d4b0:	681e      	ldr	r6, [r3, #0]
 800d4b2:	e002      	b.n	800d4ba <_printf_i+0xf2>
 800d4b4:	0646      	lsls	r6, r0, #25
 800d4b6:	d5fb      	bpl.n	800d4b0 <_printf_i+0xe8>
 800d4b8:	881e      	ldrh	r6, [r3, #0]
 800d4ba:	2f6f      	cmp	r7, #111	; 0x6f
 800d4bc:	bf0c      	ite	eq
 800d4be:	2308      	moveq	r3, #8
 800d4c0:	230a      	movne	r3, #10
 800d4c2:	4852      	ldr	r0, [pc, #328]	; (800d60c <_printf_i+0x244>)
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4ca:	6865      	ldr	r5, [r4, #4]
 800d4cc:	2d00      	cmp	r5, #0
 800d4ce:	bfa8      	it	ge
 800d4d0:	6821      	ldrge	r1, [r4, #0]
 800d4d2:	60a5      	str	r5, [r4, #8]
 800d4d4:	bfa4      	itt	ge
 800d4d6:	f021 0104 	bicge.w	r1, r1, #4
 800d4da:	6021      	strge	r1, [r4, #0]
 800d4dc:	b90e      	cbnz	r6, 800d4e2 <_printf_i+0x11a>
 800d4de:	2d00      	cmp	r5, #0
 800d4e0:	d04d      	beq.n	800d57e <_printf_i+0x1b6>
 800d4e2:	4615      	mov	r5, r2
 800d4e4:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4e8:	fb03 6711 	mls	r7, r3, r1, r6
 800d4ec:	5dc7      	ldrb	r7, [r0, r7]
 800d4ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4f2:	4637      	mov	r7, r6
 800d4f4:	42bb      	cmp	r3, r7
 800d4f6:	460e      	mov	r6, r1
 800d4f8:	d9f4      	bls.n	800d4e4 <_printf_i+0x11c>
 800d4fa:	2b08      	cmp	r3, #8
 800d4fc:	d10b      	bne.n	800d516 <_printf_i+0x14e>
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	07de      	lsls	r6, r3, #31
 800d502:	d508      	bpl.n	800d516 <_printf_i+0x14e>
 800d504:	6923      	ldr	r3, [r4, #16]
 800d506:	6861      	ldr	r1, [r4, #4]
 800d508:	4299      	cmp	r1, r3
 800d50a:	bfde      	ittt	le
 800d50c:	2330      	movle	r3, #48	; 0x30
 800d50e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d512:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d516:	1b52      	subs	r2, r2, r5
 800d518:	6122      	str	r2, [r4, #16]
 800d51a:	464b      	mov	r3, r9
 800d51c:	4621      	mov	r1, r4
 800d51e:	4640      	mov	r0, r8
 800d520:	f8cd a000 	str.w	sl, [sp]
 800d524:	aa03      	add	r2, sp, #12
 800d526:	f7ff fedf 	bl	800d2e8 <_printf_common>
 800d52a:	3001      	adds	r0, #1
 800d52c:	d14c      	bne.n	800d5c8 <_printf_i+0x200>
 800d52e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d532:	b004      	add	sp, #16
 800d534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d538:	4834      	ldr	r0, [pc, #208]	; (800d60c <_printf_i+0x244>)
 800d53a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d53e:	6829      	ldr	r1, [r5, #0]
 800d540:	6823      	ldr	r3, [r4, #0]
 800d542:	f851 6b04 	ldr.w	r6, [r1], #4
 800d546:	6029      	str	r1, [r5, #0]
 800d548:	061d      	lsls	r5, r3, #24
 800d54a:	d514      	bpl.n	800d576 <_printf_i+0x1ae>
 800d54c:	07df      	lsls	r7, r3, #31
 800d54e:	bf44      	itt	mi
 800d550:	f043 0320 	orrmi.w	r3, r3, #32
 800d554:	6023      	strmi	r3, [r4, #0]
 800d556:	b91e      	cbnz	r6, 800d560 <_printf_i+0x198>
 800d558:	6823      	ldr	r3, [r4, #0]
 800d55a:	f023 0320 	bic.w	r3, r3, #32
 800d55e:	6023      	str	r3, [r4, #0]
 800d560:	2310      	movs	r3, #16
 800d562:	e7af      	b.n	800d4c4 <_printf_i+0xfc>
 800d564:	6823      	ldr	r3, [r4, #0]
 800d566:	f043 0320 	orr.w	r3, r3, #32
 800d56a:	6023      	str	r3, [r4, #0]
 800d56c:	2378      	movs	r3, #120	; 0x78
 800d56e:	4828      	ldr	r0, [pc, #160]	; (800d610 <_printf_i+0x248>)
 800d570:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d574:	e7e3      	b.n	800d53e <_printf_i+0x176>
 800d576:	0659      	lsls	r1, r3, #25
 800d578:	bf48      	it	mi
 800d57a:	b2b6      	uxthmi	r6, r6
 800d57c:	e7e6      	b.n	800d54c <_printf_i+0x184>
 800d57e:	4615      	mov	r5, r2
 800d580:	e7bb      	b.n	800d4fa <_printf_i+0x132>
 800d582:	682b      	ldr	r3, [r5, #0]
 800d584:	6826      	ldr	r6, [r4, #0]
 800d586:	1d18      	adds	r0, r3, #4
 800d588:	6961      	ldr	r1, [r4, #20]
 800d58a:	6028      	str	r0, [r5, #0]
 800d58c:	0635      	lsls	r5, r6, #24
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	d501      	bpl.n	800d596 <_printf_i+0x1ce>
 800d592:	6019      	str	r1, [r3, #0]
 800d594:	e002      	b.n	800d59c <_printf_i+0x1d4>
 800d596:	0670      	lsls	r0, r6, #25
 800d598:	d5fb      	bpl.n	800d592 <_printf_i+0x1ca>
 800d59a:	8019      	strh	r1, [r3, #0]
 800d59c:	2300      	movs	r3, #0
 800d59e:	4615      	mov	r5, r2
 800d5a0:	6123      	str	r3, [r4, #16]
 800d5a2:	e7ba      	b.n	800d51a <_printf_i+0x152>
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	1d1a      	adds	r2, r3, #4
 800d5aa:	602a      	str	r2, [r5, #0]
 800d5ac:	681d      	ldr	r5, [r3, #0]
 800d5ae:	6862      	ldr	r2, [r4, #4]
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f000 f82f 	bl	800d614 <memchr>
 800d5b6:	b108      	cbz	r0, 800d5bc <_printf_i+0x1f4>
 800d5b8:	1b40      	subs	r0, r0, r5
 800d5ba:	6060      	str	r0, [r4, #4]
 800d5bc:	6863      	ldr	r3, [r4, #4]
 800d5be:	6123      	str	r3, [r4, #16]
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c6:	e7a8      	b.n	800d51a <_printf_i+0x152>
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	4649      	mov	r1, r9
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	6923      	ldr	r3, [r4, #16]
 800d5d0:	47d0      	blx	sl
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	d0ab      	beq.n	800d52e <_printf_i+0x166>
 800d5d6:	6823      	ldr	r3, [r4, #0]
 800d5d8:	079b      	lsls	r3, r3, #30
 800d5da:	d413      	bmi.n	800d604 <_printf_i+0x23c>
 800d5dc:	68e0      	ldr	r0, [r4, #12]
 800d5de:	9b03      	ldr	r3, [sp, #12]
 800d5e0:	4298      	cmp	r0, r3
 800d5e2:	bfb8      	it	lt
 800d5e4:	4618      	movlt	r0, r3
 800d5e6:	e7a4      	b.n	800d532 <_printf_i+0x16a>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	4632      	mov	r2, r6
 800d5ec:	4649      	mov	r1, r9
 800d5ee:	4640      	mov	r0, r8
 800d5f0:	47d0      	blx	sl
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	d09b      	beq.n	800d52e <_printf_i+0x166>
 800d5f6:	3501      	adds	r5, #1
 800d5f8:	68e3      	ldr	r3, [r4, #12]
 800d5fa:	9903      	ldr	r1, [sp, #12]
 800d5fc:	1a5b      	subs	r3, r3, r1
 800d5fe:	42ab      	cmp	r3, r5
 800d600:	dcf2      	bgt.n	800d5e8 <_printf_i+0x220>
 800d602:	e7eb      	b.n	800d5dc <_printf_i+0x214>
 800d604:	2500      	movs	r5, #0
 800d606:	f104 0619 	add.w	r6, r4, #25
 800d60a:	e7f5      	b.n	800d5f8 <_printf_i+0x230>
 800d60c:	0800de56 	.word	0x0800de56
 800d610:	0800de67 	.word	0x0800de67

0800d614 <memchr>:
 800d614:	4603      	mov	r3, r0
 800d616:	b510      	push	{r4, lr}
 800d618:	b2c9      	uxtb	r1, r1
 800d61a:	4402      	add	r2, r0
 800d61c:	4293      	cmp	r3, r2
 800d61e:	4618      	mov	r0, r3
 800d620:	d101      	bne.n	800d626 <memchr+0x12>
 800d622:	2000      	movs	r0, #0
 800d624:	e003      	b.n	800d62e <memchr+0x1a>
 800d626:	7804      	ldrb	r4, [r0, #0]
 800d628:	3301      	adds	r3, #1
 800d62a:	428c      	cmp	r4, r1
 800d62c:	d1f6      	bne.n	800d61c <memchr+0x8>
 800d62e:	bd10      	pop	{r4, pc}

0800d630 <memmove>:
 800d630:	4288      	cmp	r0, r1
 800d632:	b510      	push	{r4, lr}
 800d634:	eb01 0402 	add.w	r4, r1, r2
 800d638:	d902      	bls.n	800d640 <memmove+0x10>
 800d63a:	4284      	cmp	r4, r0
 800d63c:	4623      	mov	r3, r4
 800d63e:	d807      	bhi.n	800d650 <memmove+0x20>
 800d640:	1e43      	subs	r3, r0, #1
 800d642:	42a1      	cmp	r1, r4
 800d644:	d008      	beq.n	800d658 <memmove+0x28>
 800d646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d64a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d64e:	e7f8      	b.n	800d642 <memmove+0x12>
 800d650:	4601      	mov	r1, r0
 800d652:	4402      	add	r2, r0
 800d654:	428a      	cmp	r2, r1
 800d656:	d100      	bne.n	800d65a <memmove+0x2a>
 800d658:	bd10      	pop	{r4, pc}
 800d65a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d65e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d662:	e7f7      	b.n	800d654 <memmove+0x24>

0800d664 <_realloc_r>:
 800d664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d668:	4680      	mov	r8, r0
 800d66a:	4614      	mov	r4, r2
 800d66c:	460e      	mov	r6, r1
 800d66e:	b921      	cbnz	r1, 800d67a <_realloc_r+0x16>
 800d670:	4611      	mov	r1, r2
 800d672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d676:	f7ff bb77 	b.w	800cd68 <_malloc_r>
 800d67a:	b92a      	cbnz	r2, 800d688 <_realloc_r+0x24>
 800d67c:	f7ff fc90 	bl	800cfa0 <_free_r>
 800d680:	4625      	mov	r5, r4
 800d682:	4628      	mov	r0, r5
 800d684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d688:	f000 f81b 	bl	800d6c2 <_malloc_usable_size_r>
 800d68c:	4284      	cmp	r4, r0
 800d68e:	4607      	mov	r7, r0
 800d690:	d802      	bhi.n	800d698 <_realloc_r+0x34>
 800d692:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d696:	d812      	bhi.n	800d6be <_realloc_r+0x5a>
 800d698:	4621      	mov	r1, r4
 800d69a:	4640      	mov	r0, r8
 800d69c:	f7ff fb64 	bl	800cd68 <_malloc_r>
 800d6a0:	4605      	mov	r5, r0
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d0ed      	beq.n	800d682 <_realloc_r+0x1e>
 800d6a6:	42bc      	cmp	r4, r7
 800d6a8:	4622      	mov	r2, r4
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	bf28      	it	cs
 800d6ae:	463a      	movcs	r2, r7
 800d6b0:	f7ff fb24 	bl	800ccfc <memcpy>
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	4640      	mov	r0, r8
 800d6b8:	f7ff fc72 	bl	800cfa0 <_free_r>
 800d6bc:	e7e1      	b.n	800d682 <_realloc_r+0x1e>
 800d6be:	4635      	mov	r5, r6
 800d6c0:	e7df      	b.n	800d682 <_realloc_r+0x1e>

0800d6c2 <_malloc_usable_size_r>:
 800d6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c6:	1f18      	subs	r0, r3, #4
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	bfbc      	itt	lt
 800d6cc:	580b      	ldrlt	r3, [r1, r0]
 800d6ce:	18c0      	addlt	r0, r0, r3
 800d6d0:	4770      	bx	lr
	...

0800d6d4 <_init>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	bf00      	nop
 800d6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6da:	bc08      	pop	{r3}
 800d6dc:	469e      	mov	lr, r3
 800d6de:	4770      	bx	lr

0800d6e0 <_fini>:
 800d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e2:	bf00      	nop
 800d6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6e6:	bc08      	pop	{r3}
 800d6e8:	469e      	mov	lr, r3
 800d6ea:	4770      	bx	lr
>>>>>>> e9380fc... optimisation RAM=)
